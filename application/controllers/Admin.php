<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Admin extends CI_Controller {

	public function __construct() {
    	parent::__construct();
    	$this->load->model('admin_model', 'admin');
	}

	public function _active_year(){
		$get_budget = $this->admin->check_data('budget_active_tbl', array('budget_active_status' => 1), TRUE);
		$budget_year = $get_budget['info']->budget_active_year;
		return $budget_year;
	}

	public function _require_login(){

		$login = $this->session->userdata('bavi_purchasing');
		
		if(isset($login)){
			$user_type = decode($login['user_type_id']);
			if(decode($login['user_reset']) != 1){
				if($user_type == "1"){
					return $login;
				}elseif($user_type == "2"){
					redirect('business-center');
				}elseif($user_type == "3"){
					return $login;
				}elseif($user_type == "4"){
					redirect('admin/broiler-cost');
				}elseif($user_type == "5"){
					redirect('admin/production-cost');
				}elseif($user_type == "6"){
					redirect('region');
				}elseif($user_type == "7"){
					redirect('national');
				}else{
					$this->session->unset_userdata('bavi_purchasing');
					$this->session->sess_destroy();
					redirect();
				}
			}else{
				$this->session->unset_userdata('bavi_purchasing');
				$this->session->sess_destroy();
				redirect('login/change-password/' . $login['user_id']);
			}
		}else{
			$this->session->unset_userdata('bavi_purchasing');
			$this->session->sess_destroy();
			redirect();
		}
	}

	public function _require_login_ahg(){

		$login = $this->session->userdata('bavi_purchasing');
		
		if(isset($login)){
			$user_type = decode($login['user_type_id']);
			if(decode($login['user_reset']) != 1){
				if($user_type == "1"){
					return $login;
				}elseif($user_type == "2"){
					redirect('business-center');
				}elseif($user_type == "3"){
					redirect('unit');
				}elseif($user_type == "4"){
					return $login;
				}elseif($user_type == "5"){
					redirect('production');
				}else{
					$this->session->unset_userdata('bavi_purchasing');
					$this->session->sess_destroy();
					redirect();
				}
			}else{
				$this->session->unset_userdata('bavi_purchasing');
				$this->session->sess_destroy();
				redirect('login/change-password/' . $login['user_id']);
			}
		}else{
			$this->session->unset_userdata('bavi_purchasing');
			$this->session->sess_destroy();
			redirect();
		}
	}

	public function _require_login_prod(){

		$login = $this->session->userdata('bavi_purchasing');
		
		if(isset($login)){
			$user_type = decode($login['user_type_id']);
			if(decode($login['user_reset']) != 1){
				if($user_type == "1"){
					return $login;
				}elseif($user_type == "2"){
					redirect('business-center');
				}elseif($user_type == "3"){
					redirect('unit');
				}elseif($user_type == "4"){
					redirect('admin/broiler-cost');
				}elseif($user_type == "5"){
					return $login;
				}else{
					$this->session->unset_userdata('bavi_purchasing');
					$this->session->sess_destroy();
					redirect();
				}
			}else{
				$this->session->unset_userdata('bavi_purchasing');
				$this->session->sess_destroy();
				redirect('login/change-password/' . $login['user_id']);
			}
		}else{
			$this->session->unset_userdata('bavi_purchasing');
			$this->session->sess_destroy();
			redirect();
		}
	}

	public function _get_designated_tbl($company_unit_id=NULL, $cost_center_id=NULL, $direct_labor=NULL){
		

		
		$gl_transaction_tbl									= 'gl_transaction_tbl';
		$gl_transaction_item_tbl							= 'gl_transaction_item_tbl';
		$gl_transaction_details_tbl							= 'gl_transaction_details_tbl';
		$asset_group_transaction_tbl						= 'asset_group_transaction_tbl';
		$asset_group_transaction_item_tbl					= 'asset_group_transaction_item_tbl';
		$asset_group_transaction_details_tbl				= 'asset_group_transaction_details_tbl';
		$asset_group_transaction_rank_tbl					= 'asset_group_transaction_rank_tbl';
		$depreciation_bc_tbl								= 'depreciation_bc_tbl';
		$depreciation_unit_tbl								= 'depreciation_unit_tbl';
		if($company_unit_id){
			if($company_unit_id == 17 || $company_unit_id == 22){ //COMMISSARY OR LIEMPO PRODUCTION
				$gl_transaction_tbl							= 'rep_gl_transaction_tbl';
				$gl_transaction_item_tbl					= 'rep_gl_transaction_item_tbl';
				$gl_transaction_details_tbl					= 'rep_gl_transaction_details_tbl';
				$asset_group_transaction_tbl				= 'rep_asset_group_transaction_tbl';
				$asset_group_transaction_item_tbl			= 'rep_asset_group_transaction_item_tbl';
				$asset_group_transaction_details_tbl		= 'rep_asset_group_transaction_details_tbl';
				$asset_group_transaction_rank_tbl			= 'rep_asset_group_transaction_rank_tbl';
				$depreciation_bc_tbl						= 'rep_depreciation_bc_tbl';
				$depreciation_unit_tbl						= 'rep_depreciation_unit_tbl';
			}
		}

		if($direct_labor){
			$gl_transaction_tbl							= 'rep_gl_transaction_tbl';
			$gl_transaction_item_tbl					= 'rep_gl_transaction_item_tbl';
			$gl_transaction_details_tbl					= 'rep_gl_transaction_details_tbl';
			$asset_group_transaction_tbl				= 'rep_asset_group_transaction_tbl';
			$asset_group_transaction_item_tbl			= 'rep_asset_group_transaction_item_tbl';
			$asset_group_transaction_details_tbl		= 'rep_asset_group_transaction_details_tbl';
			$asset_group_transaction_rank_tbl			= 'rep_asset_group_transaction_rank_tbl';
			$depreciation_bc_tbl						= 'rep_depreciation_bc_tbl';
			$depreciation_unit_tbl						= 'rep_depreciation_unit_tbl';
		}

		$data['gl_transaction_tbl'] 						= $gl_transaction_tbl;
		$data['gl_transaction_item_tbl'] 					= $gl_transaction_item_tbl;
		$data['gl_transaction_details_tbl'] 				= $gl_transaction_details_tbl;
		$data['asset_group_transaction_tbl'] 				= $asset_group_transaction_tbl;
		$data['asset_group_transaction_item_tbl'] 			= $asset_group_transaction_item_tbl;
		$data['asset_group_transaction_details_tbl'] 		= $asset_group_transaction_details_tbl;
		$data['asset_group_transaction_rank_tbl'] 			= $asset_group_transaction_rank_tbl;
		$data['depreciation_bc_tbl'] 						= $depreciation_bc_tbl;
		$data['depreciation_unit_tbl'] 						= $depreciation_unit_tbl;

		$object = (object) $data;
		return $object;
	}

	public function _get_cost_center_bc($cost_center_id){
		$join_cost_center = array('bc_tbl b' => 'a.cost_center_code = b.cost_center_code AND a.cost_center_status = 1 AND a.cost_center_id = ' . $cost_center_id);
		$check_cost_center = $this->admin->check_join('cost_center_tbl a', $join_cost_center, TRUE);
		if($check_cost_center['result'] == TRUE){
			$bc_id = $check_cost_center['info']->bc_id;
			return $bc_id;
		}else{
			echo 'Error cost center code not exist. Please try again!';
			exit;
		}
	}

	public function _get_capex_cost_center($cost_center_id, $ag_name, $year){
		if($ag_name == 'STORE EQUIPMENT' || $ag_name == 'KITCHEN EQUIPMENT'){
			$join_cost = array(
				'outlet_tbl b' => 'a.cost_center_code = b.ifs_code AND a.cost_center_type_id = 8 AND cost_center_status = 1 AND a.parent_id = ' . $cost_center_id,
				'outlet_year_tbl c' => 'b.outlet_id = c.outlet_id AND c.outlet_year_status = 1 AND c.outlet_year = ' . $year
			);
			$get_cost_center = $this->admin->get_join('cost_center_tbl a', $join_cost);
		}elseif($ag_name == 'LEASEHOLD IMPROVEMENTS' || $ag_name == 'COMPUTER EQUIPMENT & PARAPHERNALIA'){
			$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_id, 'cost_center_status' => 1));
		}else{
			$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_id, 'cost_center_type_id !=' => 8, 'cost_center_status' => 1));
		}

		return $get_cost_center;
	}

	public function logout(){
		$this->session->unset_userdata('bavi_purchasing');
		$this->session->sess_destroy();
		redirect();
	}

	public function dashboard($year = null){
		$info = $this->_require_login();
		$data['title'] = 'Dashboard';

		if($year == null){
			$year = $this->_active_year();
		}

		$last_year = $year - 1;
		$data['year'] = $year;
		$data['last_year'] = $last_year;

		/*Broiler */
		$get_broiler = $this->_get_broiler_dashboard_tbl($year);
		$harvest_tbl = $get_broiler['tbl'];
		$harvested_heads = $get_broiler['harvested_heads'];
	    $harvested_dif1 = $get_broiler['harvested_dif1'];
	    $harvested_percent1 = $get_broiler['harvested_percent1'];
	    $harvested_condition1 = $get_broiler['harvested_condition1'];
	    $harvested_indicator1 = $get_broiler['harvested_indicator1'];
	    $harvested_heads1 = $get_broiler['harvested_heads1'];

	    $harvested_heads2 = $get_broiler['harvested_heads2'];
	    $harvested_dif2 = $get_broiler['harvested_dif2'];
	    $harvested_percent2 = $get_broiler['harvested_percent2'];
	    $harvested_condition2 = $get_broiler['harvested_condition2'];
	    $harvested_indicator2 = $get_broiler['harvested_indicator2'];

	    $data['harvested_heads'] = $harvested_heads;
	    $data['harvested_dif1'] = $harvested_dif1;
	    $data['harvested_percent1'] = $harvested_percent1;
	    $data['harvested_condition1'] = $harvested_condition1;
	    $data['harvested_indicator1'] = $harvested_indicator1;
	    $data['harvested_heads1'] = $harvested_heads1;

	    $data['harvested_heads2'] = $harvested_heads2;
	    $data['harvested_dif2'] = $harvested_dif2;
	    $data['harvested_percent2'] = $harvested_percent2;
	    $data['harvested_condition2'] = $harvested_condition2;
	    $data['harvested_indicator2'] = $harvested_condition2;

	    $harvest_report = "Harvestable birds is <span class='dashboard-num'>" . convert_num($harvested_heads) . "</span> which is <span class='dashboard-num'>" . number_format($harvested_percent1) ."%</span> <span class='" . $harvested_indicator1 . "'></span>" . $harvested_condition1 . " than " . ($year - 1) . "'s <span class='dashboard-num'>" . convert_num($harvested_heads1) ."</span> and <span class='dashboard-num'>" . number_format($harvested_percent2) . "%</span> <span class='" . $harvested_indicator2 . "'></span>" . $harvested_condition2 . " " . ($year - 2) . " of <span class='dashboard-num'>" . convert_num($harvested_heads2) . "</span>";

	    $data['harvest_tbl'] = $harvest_tbl;
	    $data['harvest_report'] = $harvest_report;

	    $broiler_cost = $get_broiler['broiler_cost'];
	    $broiler_cost_dif1 = $get_broiler['broiler_cost_dif1'];
	    $broiler_cost_condition1 = $get_broiler['broiler_cost_condition1'];
	    $broiler_cost_indicator1 = $get_broiler['broiler_cost_indicator1'];

	    $broiler_cost1 = $get_broiler['broiler_cost1'];
	    $broiler_cost_dif2 = $get_broiler['broiler_cost_dif2'];
	    $broiler_cost_condition2 = $get_broiler['broiler_cost_condition2'];
	    $broiler_cost_indicator2 = $get_broiler['broiler_cost_indicator2'];
	    $broiler_cost_sign2 = $broiler_cost_dif2 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';

	    $broiler_cost2 = $get_broiler['broiler_cost2'];

	    $data['broiler_cost'] = $broiler_cost;
	    $data['broiler_cost_dif1'] = $broiler_cost_dif1;
	    $data['broiler_cost_condition1'] = $broiler_cost_condition1;
	    $data['broiler_cost_indicator1'] = $broiler_cost_indicator1;
	    $broiler_cost_sign1 = $broiler_cost_dif1 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';
	    
	    $data['broiler_cost1'] = $broiler_cost1;
	    $data['broiler_cost_dif2'] = $broiler_cost_dif2;
	    $data['broiler_cost_condition2'] = $broiler_cost_condition2;
	    $data['broiler_cost_indicator2'] = $broiler_cost_indicator2;
	    $data['broiler_cost2'] = $broiler_cost2;

	    $broiler_cost_report = 'Broiler cost is <span class="dashboard-num">₱' . number_format($broiler_cost, 2) . '</span> per kilo, <span class="dashboard-num">₱' .number_format( $broiler_cost_dif1, 2) . '</span>' . $broiler_cost_sign1 . ' per kilo ' . $broiler_cost_condition1 . ' than ' . ($year - 1) . '\'s <span class="dashboard-num">₱' . number_format($broiler_cost1, 2) . '</span> and <span class="dashboard-num">₱' . number_format($broiler_cost_dif2, 2) . '</span>' . $broiler_cost_sign2 . ' ' . $broiler_cost_condition2 . ' than ' . ($year - 2) . ' <span class="dashboard-num">₱' . number_format($broiler_cost2, 2) . '</span>.';

	    $data['broiler_cost_report'] = $broiler_cost_report;
		
	    
	    /*Sales Unit*/

 		$sales_unit = $this->sales_unit($year);
 		$total_sales_unit = 0;
 		foreach($sales_unit as $row_unit){
 			$total_sales_unit += $row_unit->total_sales_unit;
 		}

 		$data['total_sales_unit'] = $total_sales_unit;

 		$get_comparative_sales = $this->get_comparative_net_sales($year);
 		$net_sales1 = $get_comparative_sales['net_sales1'];
 		$net_sales2 = $get_comparative_sales['net_sales2'];

 		/*Outlet Count*/

 		$join_new_outlet = array(
 			'outlet_brand_tbl b' => 'a.outlet_id = b.outlet_id AND a.outlet_status_id = 1 AND b.outlet_brand_status = 1',
 			'brand_tbl c' => 'b.brand_id = c.brand_id',
 			'brand_type_tbl d' => 'c.brand_type_id = d.brand_type_id AND d.brand_type_name = "RETAIL" AND c.brand_name !="RESELLER"	',
 			'outlet_type_tbl e' => 'a.outlet_type_id = e.outlet_type_id AND e.outlet_type_id = 2',
 			'outlet_year_tbl f' => 'a.outlet_id = f.outlet_id AND f.outlet_year = ' . $year
 		);

 		$get_new_outlet = $this->admin->get_join('outlet_tbl a', $join_new_outlet, TRUE, FALSE, FALSE, 'COUNT(a.outlet_id) as outlet_new');
 		$new_outlet_data = $get_new_outlet->outlet_new;

 		$join_old_outlet = array(
 			'outlet_brand_tbl b' => 'a.outlet_id = b.outlet_id AND a.outlet_status_id = 1 AND b.outlet_brand_status = 1',
 			'brand_tbl c' => 'b.brand_id = c.brand_id',
 			'brand_type_tbl d' => 'c.brand_type_id = d.brand_type_id AND d.brand_type_name = "RETAIL" AND c.brand_name !="RESELLER"',
 			'outlet_type_tbl e' => 'a.outlet_type_id = e.outlet_type_id AND e.outlet_type_id = 1',
 			'outlet_year_tbl f' => 'a.outlet_id = f.outlet_id AND f.outlet_year = ' . $year
 		);

 		$get_old_outlet = $this->admin->get_join('outlet_tbl a', $join_old_outlet, TRUE, FALSE, FALSE, 'COUNT(a.outlet_id) as outlet_old');
 		$old_outlet_data = $get_old_outlet->outlet_old;

 		$data['outlet_new'] = $new_outlet_data;
 		$data['outlet_old'] = $old_outlet_data;
 		$data['outlet_total'] = $new_outlet_data + $old_outlet_data;

 		/*Employee Count*/

 		$join_manpower = array(
 			'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.manpower_status = 1 AND a.manpower_year = ' . $year,
 		);
 		$get_manpower = $this->admin->get_join('manpower_tbl a', $join_manpower, TRUE, FALSE, FALSE, 'SUM(manpower_old) as emp_old, SUM(manpower_new) as emp_new');
 		$old_emp_data = $get_manpower->emp_old;
 		$new_emp_data = $get_manpower->emp_new;

 		$data['emp_new'] = $new_emp_data;
 		$data['emp_old'] = $old_emp_data;
 		$data['emp_total'] = $new_emp_data + $old_emp_data;

 		/*CAPEX*/

 		$capex_info = $this->capex_report($year);
		$capex = $capex_info->total_capex;
 		$capex1 = $capex_info->total_capex1;
 		$capex2 = $capex_info->total_capex2;

 		$capex_dif1 = $capex - $capex1;
    	$capex_dif2 = $capex - $capex2;
    	$capex_percent1 = $capex1 > 0 ? ($capex_dif1 / $capex1) * 100 : 0;
    	$capex_percent2 = $capex2 > 0 ? ($capex_dif2 / $capex2) * 100 : 0;
    	$capex_condition1 = $capex_dif1 > 0 ? 'higher' :  'lower';
    	$capex_condition2 = $capex_dif2 > 0 ? 'higher' :  'lower';
    	$capex_sign1 = $capex_percent1 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';
    	$capex_sign2 = $capex_percent2 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';

 		$data['capex_report'] = '<label class="chart-remarks"><strong>CAPEX is <span class="dashboard-num">₱' . convert_num($capex). '</span>, ' . $capex_condition1 . ' by <span class="dashboard-num">₱' . convert_num($capex_dif1) . '</span>' . $capex_sign1 . ' vs ' . ($year - 1) . ' and ' . $capex_condition2 . ' by <span class="dashboard-num">₱' . convert_num($capex_dif2) . '</span>' . $capex_sign2 . ' vs ' . ($year - 2) . '</strong></label>';

 		$data['capex'] = $capex;
 		$data['capex1'] = $capex1;
 		$data['capex2'] = $capex2;


 		/*Volume*/

 		$volume = $this->volume_report($year);

 		$data['volume_tbl'] = $this->_get_volume_dashboard_tbl($volume);
 		$data['price'] = $this->price_assumption_report($year);

 		/*OPEX*/
 		$opex_bc_gl = $this->_opex_nationwide_bc($year);
 		$total_opex = 0;
 		foreach($opex_bc_gl as $row){
 			$total_opex += $row->total_amount;
 		}

 		$get_opex_data = $this->_get_opex_dashboard_tbl($year, $opex_bc_gl);
 		$data['opex_tbl'] = $get_opex_data;

 		$opex_unit_gl = $this->_opex_nationwide_unit($year);
 		$get_opex_unit_data = $this->_get_opex_unit_dashboard_tbl($year, $opex_unit_gl);
 		$data['opex_unit_tbl'] = $get_opex_unit_data;

 		$total_unit_opex = 0;
 		foreach($opex_unit_gl as $row){
 			$total_unit_opex += $row->total_amount;
 		}


 		$where_summary = 'dashboard_bc_summary_year = ' . $year . ' AND dashboard_bc_summary_status = 1';
 		$select_summary = '*, SUM(dashboard_bc_summary_net_sales) net_sales, SUM(dashboard_bc_summary_variable_cost) variable_cost, SUM(dashboard_bc_summary_period_cost) as period_cost';
 		$get_summary = $this->admin->check_data('dashboard_bc_summary_tbl', $where_summary, TRUE, $select_summary);
 		$sum_net_sales = 0;
 		$sum_variable_cost = 0;
 		$sum_period_cost = 0;
 		if($get_summary['result'] == TRUE){
 			$sum_net_sales = $get_summary['info']->net_sales;
 			$sum_variable_cost = $get_summary['info']->variable_cost;
 			$sum_period_cost = $get_summary['info']->period_cost + $total_unit_opex;
 			$sum_margin = $sum_net_sales - $sum_variable_cost;
 			$sum_noi = $sum_margin - $sum_period_cost;
 		}

 		$data['net_sales'] = $sum_net_sales;
 		$data['noi'] = $sum_noi;

 		$get_pnl = $this->_get_noi_dashboard_tbl($year, $sum_net_sales, $total_sales_unit, $sum_variable_cost, $sum_period_cost, 0);

 		$sales_unit1 = $get_pnl['sales_unit1'];
 		$sales_unit2 = $get_pnl['sales_unit2'];
 		$net_sales = $sum_net_sales;
 		$net_sales1 = $get_pnl['net_sales1'];
 		$net_sales2 = $get_pnl['net_sales2'];
 		$noi  = $get_pnl['noi'];
 		$noi1 = $get_pnl['noi1'];
 		$noi2 = $get_pnl['noi2'];

 		$data['pnl_tbl'] = $get_pnl['tbl'];
 		$data['net_sales1'] = $net_sales1;
 		$data['net_sales2'] = $net_sales2;
 		$data['sales_unit1'] = $sales_unit1;
 		$data['sales_unit2'] = $sales_unit2;
 		$data['noi1'] = $noi1;
 		$data['noi2'] = $noi2;

 		$data['noi'] = $noi;


 		$sales_unit_dif1 = $total_sales_unit - $sales_unit1;
    	$sales_unit_dif2 = $total_sales_unit - $sales_unit2;
    	$sales_unit_percent1 = $sales_unit1 > 0 ? ($sales_unit_dif1 / $sales_unit1) * 100 : 0;
    	$sales_unit_percent2 = $sales_unit2 > 0 ? ($sales_unit_dif2 / $sales_unit2) * 100 : 0;
    	$sales_unit_condition1 = $sales_unit_dif1 > 0 ? 'higher' :  'lower';
    	$sales_unit_condition2 = $sales_unit_dif2 > 0 ? 'higher' :  'lower';
    	$sales_unit_sign1 = $sales_unit_percent1 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';
    	$sales_unit_sign2 = $sales_unit_percent2 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';

    	$sales_unit_report = "Total Sales Units is <span class='dashboard-num'>" . convert_num($total_sales_unit) . "</span> which is <span class='dashboard-num'>" . number_format($sales_unit_percent1) ."%</span>" . $sales_unit_sign1 . " " . $sales_unit_condition1 . " than " . ($year - 1) . "'s <span class='dashboard-num'>" . convert_num($sales_unit1) ."</span> and <span class='dashboard-num'>" . number_format($sales_unit_percent2) . "%</span>" . $sales_unit_sign2 . " " . $sales_unit_condition2 . " than " . ($year - 2) . " of <span class='dashboard-num'>" . convert_num($sales_unit2) . '</span>';

    	$data['sales_unit_report'] = $sales_unit_report;

    	$net_sales_dif1 = $net_sales - $net_sales1;
    	$net_sales_dif2 = $net_sales - $net_sales2;
    	$net_sales_percent1 = $net_sales1 > 0 ? ($net_sales_dif1 / $net_sales1) * 100 : 0;
    	$net_sales_percent2 = $net_sales2 > 0 ? ($net_sales_dif2 / $net_sales2) * 100 : 0;
    	$net_sales_condition1 = $net_sales_dif1 > 0 ? 'higher' :  'lower';
    	$net_sales_condition2 = $net_sales_dif2 > 0 ? 'higher' :  'lower';
    	$net_sales_sign1 = $net_sales_percent1 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';
    	$net_sales_sign2 = $net_sales_percent2 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';

 		$net_sales_report = "Net sales is <span class='dashboard-num'>₱" . convert_num($net_sales) . "</span> which is <span class='dashboard-num'>" . number_format($net_sales_percent1) ."%</span>" . $net_sales_sign1 . " " . $net_sales_condition1 . " than " . ($year - 1) . "'s <span class='dashboard-num'>₱" . convert_num($net_sales1) ."</span> and <span class='dashboard-num'>" . number_format($net_sales_percent2) . "%</span>" . $net_sales_sign2 . " " . $net_sales_condition2 . " than " . ($year - 2) . " of <span class='dashboard-num'>₱" . convert_num($net_sales2) . '</span>';
 		$data['net_sales_report'] = $net_sales_report;


 		$noi_dif1 = $noi - $noi1;
    	$noi_dif2 = $noi - $noi2;
    	$noi_percent1 = $noi1 > 0 ? ($noi_dif1 / $noi1) * 100 : 0;
    	$noi_percent2 = $noi2 > 0 ? ($noi_dif2 / $noi2) * 100 : 0;
    	$noi_condition1 = $noi_dif1 > 0 ? 'higher' :  'lower';
    	$noi_condition2 = $noi_dif2 > 0 ? 'higher' :  'lower';
    	$noi_sign1 = $noi_percent1 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';
    	$noi_sign2 = $noi_percent2 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';

 		$noi_report = "NOI is <span class='dashboard-num'>₱" . convert_num($noi) . "</span> which is <span class='dashboard-num'>" . number_format($noi_percent1) ."%</span>" . $noi_sign1 . " " . $noi_condition1 . " than " . ($year - 1) . "'s <span class='dashboard-num'>₱" . convert_num($noi2) ."</span> and <span class='dashboard-num'>" . number_format($noi_percent2) . "%</span>" . $noi_sign2 . " " . $noi_condition2 . " than " . ($year - 2) . " of <span class='dashboard-num'>₱" . convert_num($noi2) . '</span>';
 		$data['noi_report'] = $noi_report;

	 	/*INSERTED CODE STARTS HERE*/
	 	$year = $this->_active_year() - 1;
	 	$data['industry_year'] = $year;

	 	$sql = 'SELECT
					*
				FROM
					(
						SELECT
							a.*, c.industry_name, c.industry_id as industry_order
						FROM
							`industry_trans_tbl` `a`
						JOIN `industry_trans_dtl_tbl` `b` ON `a`.`industry_trans_id` = `b`.`industry_trans_id`
						AND `a`.`trans_status` != 5
						AND YEAR (b.capacity_year) = '.$year.'
						JOIN `industry_tbl` `c` ON `a`.`industry_id` = `c`.`industry_id`
						AND `c`.`industry_status` = 1
					) AS dataone
				INNER JOIN (
					SELECT
						a.industry_trans_id,
						SUM(b.industry_capacity) AS beginning_capacity
					FROM
						`industry_trans_tbl` `a`
					JOIN `industry_trans_dtl_tbl` `b` ON `a`.`industry_trans_id` = `b`.`industry_trans_id`
					AND `a`.`trans_status` != 5
					AND YEAR (b.capacity_year) = '.$year.'
					AND b.season_id = 1
					JOIN `industry_tbl` `c` ON `a`.`industry_id` = `c`.`industry_id`
					AND `c`.`industry_status` = 1
					GROUP BY c.industry_id
				) AS datatwo ON dataone.industry_trans_id = datatwo.industry_trans_id
				INNER JOIN (
					SELECT
						a.industry_trans_id,
						SUM(b.industry_capacity) AS current_capacity
					FROM
						`industry_trans_tbl` `a`
					JOIN `industry_trans_dtl_tbl` `b` ON `a`.`industry_trans_id` = `b`.`industry_trans_id`
					AND `a`.`trans_status` != 5
					AND YEAR (b.capacity_year) = '.$year.'
					AND b.season_id = 2
					JOIN `industry_tbl` `c` ON `a`.`industry_id` = `c`.`industry_id`
					AND `c`.`industry_status` = 1
					GROUP BY c.industry_id
				) AS datathree ON datatwo.industry_trans_id = datathree.industry_trans_id
				INNER JOIN (
					SELECT
						a.industry_trans_id,
						SUM(b.industry_capacity) AS ending_capacity
					FROM
						`industry_trans_tbl` `a`
					JOIN `industry_trans_dtl_tbl` `b` ON `a`.`industry_trans_id` = `b`.`industry_trans_id`
					AND `a`.`trans_status` != 5
					AND YEAR (b.capacity_year) = '.$year.'
					AND b.season_id = 3
					JOIN `industry_tbl` `c` ON `a`.`industry_id` = `c`.`industry_id`
					AND `c`.`industry_status` = 1
					GROUP BY c.industry_id
				) AS datafour ON datathree.industry_trans_id = datafour.industry_trans_id
				GROUP BY dataone.industry_order
				order by dataone.industry_order';

		$data['industry_trans'] = $this->admin->get_query($sql);

		$join = array(
			'industry_trans_dtl_tbl b' => 'a.industry_trans_id = b.industry_trans_id and a.trans_status != 5 and YEAR(b.capacity_year) = '.$year,
			'industry_tbl c'	=>	'a.industry_id = c.industry_id and c.industry_status = 1'
		);
		$data['industry_total'] = $this->admin->get_join('industry_trans_tbl a', $join, false, false, 'b.season_id', 'sum(b.industry_capacity) as industry_sum, b.season_id');
	 	/*INSERTED CODE ENDS HERE*/


		$data['content'] = $this->load->view('admin/admin_dashboard_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function _get_broiler_dashboard_tbl($year){

		$trans_year = encode($year);
		$doctype = encode('trans');
		$join = array('bc_tbl b' => 'a.bc_id = b.bc_id');
 		$harvested_actual_data = $this->admin->get_join('broiler_amount_summary_tbl a', $join, false, false, false, 'a.broiler_line_item_id, trans_qty',  array('trans_type_id' => 2, 'YEAR(a.trans_date)' =>	$year - 1, 'a.trans_status !='	=> 5));

 		$i = 1;
 		$kilo = 1;
 		$feeds = 1;
 		$cg_fee = 1;
 		$medicines = 1;
 		$vaccines = 1;
 		$doc = 1;
 		if(!empty($harvested_actual_data)){
	 		foreach ($harvested_actual_data as $r) {
	 			if($r->broiler_line_item_id == 7){
		 			$actual_harvested_heads[$i] = $r->trans_qty;
		 			$i++;
	 			}
	 			if($r->broiler_line_item_id == 6){
	 				$actual_harvested_kilo[$kilo] = $r->trans_qty;
		 			$kilo++;
	 			}
	 			if($r->broiler_line_item_id == 5){
	 				$actual_feeds_amount[$feeds] = $r->trans_qty;
		 			$feeds++;
	 			}
	 			if($r->broiler_line_item_id == 4){
	 				$actual_cg_fee_amount[$cg_fee] = $r->trans_qty;
		 			$cg_fee++;
	 			}
	 			if($r->broiler_line_item_id == 3){
	 				$actual_medicines_amount[$medicines] = $r->trans_qty;
		 			$medicines++;
	 			}
	 			if($r->broiler_line_item_id == 2){
	 				$actual_vaccines_amount[$vaccines] = $r->trans_qty;
		 			$vaccines++;
	 			}
	 			if($r->broiler_line_item_id == 1){
	 				$actual_doc_amount[$doc] = $r->trans_qty;
		 			$doc++;
	 			}
	 		}

	 		$actual_harvested_heads = $actual_harvested_heads;
	 		$actual_harvested_kilo = $actual_harvested_kilo;
	 		$actual_feeds_amount = $actual_feeds_amount;
	 		$actual_cg_fee_amount = $actual_cg_fee_amount;
	 		$actual_medicines_amount = $actual_medicines_amount;
	 		$actual_vaccines_amount = $actual_vaccines_amount;
	 		$actual_doc_amount = $actual_doc_amount;
 		} else {
 			
 			$actual_harvested_heads = 0;
 			$actual_harvested_kilo = 0;
	 		$actual_feeds_amount = 0;
	 		$actual_cg_fee_amount = 0;
	 		$actual_medicines_amount = 0;
	 		$actual_vaccines_amount = 0;
	 		$actual_doc_amount = 0;
 		}

 		$join = array('bc_tbl b' => 'a.bc_id = b.bc_id');
 		$previous_harvested_actual_data = $this->admin->get_join('broiler_amount_summary_tbl a', $join, false, false, false, 'a.broiler_line_item_id, trans_qty',  array('trans_type_id' => 2, 'YEAR(a.trans_date)' =>	$year - 2, 'a.trans_status !='	=> 5));

 		$i = 1;
 		$kilo = 1;
 		$feeds = 1;
 		$cg_fee = 1;
 		$medicines = 1;
 		$vaccines = 1;
 		$doc = 1;
 		if(!empty($previous_harvested_actual_data)){
 			foreach ($previous_harvested_actual_data as $r) {
	 			
	 			if($r->broiler_line_item_id == 7){
		 			$previous_actual_harvested_heads[$i] = $r->trans_qty;
		 			$i++;
	 			}
	 			if($r->broiler_line_item_id == 6){
	 				$previous_actual_harvested_kilo[$kilo] = $r->trans_qty;
		 			$kilo++;
	 			}
	 			if($r->broiler_line_item_id == 5){
	 				$previous_actual_feeds_amount[$feeds] = $r->trans_qty;
		 			$feeds++;
	 			}
	 			if($r->broiler_line_item_id == 4){
	 				$previous_actual_cg_fee_amount[$cg_fee] = $r->trans_qty;
		 			$cg_fee++;
	 			}
	 			if($r->broiler_line_item_id == 3){
	 				$previous_actual_medicines_amount[$medicines] = $r->trans_qty;
		 			$medicines++;
	 			}
	 			if($r->broiler_line_item_id == 2){
	 				$previous_actual_vaccines_amount[$vaccines] = $r->trans_qty;
		 			$vaccines++;
	 			}
	 			if($r->broiler_line_item_id == 1){
	 				$previous_actual_doc_amount[$doc] = $r->trans_qty;
		 			$doc++;
	 			}
	 		}
	 		$previous_actual_harvested_heads = $previous_actual_harvested_heads;
	 		$previous_actual_harvested_kilo = $previous_actual_harvested_kilo;
	 		$previous_actual_feeds_amount = $previous_actual_feeds_amount;
	 		$previous_actual_cg_fee_amount = $previous_actual_cg_fee_amount;
	 		$previous_actual_medicines_amount = $previous_actual_medicines_amount;
	 		$previous_actual_vaccines_amount = $previous_actual_vaccines_amount;
	 		$previous_actual_doc_amount = $previous_actual_doc_amount;
 		} else {
 			$previous_actual_harvested_heads = 0;
 			$previous_actual_harvested_kilo = 0;
	 		$previous_actual_feeds_amount = 0;
	 		$previous_actual_cg_fee_amount = 0;
	 		$previous_actual_medicines_amount = 0;
	 		$previous_actual_vaccines_amount = 0;
	 		$previous_actual_doc_amount = 0;
	 	}

	 	$join = array(
			'broiler_summary_item_tbl b' => 'a.broiler_summary_item_id = b.broiler_summary_item_id and YEAR(a.trans_date) = '.$year.' and a.trans_type_id = 1 and a.broiler_summary_status = 1'
		);
		$broiler_summary = $this->admin->get_join('broiler_summary_tbl a', $join, false, 'b.order_count, MONTH(a.trans_date)', false, false, false, false);

		$i = 1;
		if(!empty($broiler_summary)){
			foreach ($broiler_summary as $broiler_summary_row) {
				if($broiler_summary_row->broiler_summary_item_id == 33){
					$budgeted_harvested_heads[$i] = $broiler_summary_row->trans_qty;
		 			$i++;

		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 34){
					$budgeted_harvested_kilo[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 35){
					$budgeted_doc_cost_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 1){
					$budgeted_growers_fee_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 37){
					$budgeted_feed_cost_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 45){
					$budgeted_vaccines_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 42){
					$budgeted_medicine_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 43){
					$budgeted_disinfectant_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				}
			}
			$budgeted_harvested_heads = @$budgeted_harvested_heads;
			$budgeted_harvested_kilo = @$budgeted_harvested_kilo;
			$budgeted_doc_cost_amount = @$budgeted_doc_cost_amount;
			$budgeted_growers_fee_amount = @$budgeted_growers_fee_amount;
			$budgeted_feed_cost_amount = @$budgeted_feed_cost_amount;
			$budgeted_vaccines_amount = @$budgeted_vaccines_amount;
			$budgeted_medicine_amount = @$budgeted_medicine_amount;
			$budgeted_disinfectant_amount = @$budgeted_disinfectant_amount;

		} else {
			$budgeted_harvested_heads = 0;
			$budgeted_harvested_kilo = 0;
			$budgeted_doc_cost_amount = 0;
			$budgeted_growers_fee_amount = 0;
			$budgeted_feed_cost_amount = 0;
			$budgeted_vaccines_amount = 0;
			$budgeted_medicine_amount = 0;
			$budgeted_disinfectant_amount = 0;
		}


		$total_actual_harvested_heads = 0;
		$total_actual_doc = 0;
		$total_actual_feeds = 0;
		$total_actual_cg = 0;
		$total_actual_medicines = 0;
		$total_actual_vaccines = 0;
		$total_actual_harvested_kilo = 0;

		$total_previous_actual_harvested_heads = 0;
		$total_previous_actual_doc = 0;
		$total_previous_actual_feeds = 0;
		$total_previous_actual_cg = 0;
		$total_previous_actual_medicines = 0;
		$total_previous_actual_vaccines = 0;
		$total_previous_actual_harvested_kilo = 0;

		$harvested_heads = 0;
		$harvested_kilo = 0;
		$growers_fee_amount = 0;
		$feed_cost_amount = 0;
		$vaccines_amount = 0;
		$medicine_amount = 0;
		$disinfectant_amount = 0;
		$doc_cost_amount = 0;

		$table = '';
		for ($i=1; $i <=12 ; $i++) {
			//BUDGET BROILER
			$harvested_heads = $harvested_heads + $budgeted_harvested_heads[$i];
			$harvested_kilo = $harvested_kilo + $budgeted_harvested_kilo[$i];
			$doc_cost_amount = $doc_cost_amount + $budgeted_doc_cost_amount[$i];
			$growers_fee_amount = $growers_fee_amount + $budgeted_growers_fee_amount[$i];
			$feed_cost_amount = $feed_cost_amount + $budgeted_feed_cost_amount[$i];
			$vaccines_amount = $vaccines_amount + $budgeted_vaccines_amount[$i];
			$medicine_amount = $medicine_amount + $budgeted_medicine_amount[$i];
			$disinfectant_amount = $disinfectant_amount + $budgeted_disinfectant_amount[$i];

			$doc_ave = $harvested_kilo == 0 ? 0 : $doc_cost_amount/$harvested_kilo;
			$growers_fee_ave = $harvested_kilo == 0 ? 0 : $growers_fee_amount/$harvested_kilo;
			$feed_cost_ave = $harvested_kilo == 0 ? 0 : $feed_cost_amount/$harvested_kilo;
			$vaccines_ave = $harvested_kilo == 0 ? 0 : $vaccines_amount/$harvested_kilo;
			$total = $disinfectant_amount + $medicine_amount;
			$medicine_ave = $harvested_kilo == 0 ? 0 : $total/$harvested_kilo;
			$month = date('M', strtotime($year.'-'.$i.'-01'));

			$total_actual_harvested_heads = $total_actual_harvested_heads + $actual_harvested_heads[$i];

			$total_previous_actual_harvested_heads = $total_previous_actual_harvested_heads + $previous_actual_harvested_heads[$i];


			$actual_doc[$i] = $actual_harvested_kilo[$i] <= 0 ? 0 : $actual_doc_amount[$i]/$actual_harvested_kilo[$i];
			$actual_feeds[$i] = $actual_harvested_kilo[$i] <= 0 ? 0 : $actual_feeds_amount[$i]/$actual_harvested_kilo[$i];
			$actual_cg[$i] = $actual_harvested_kilo[$i] <= 0 ? 0 : $actual_cg_fee_amount[$i]/$actual_harvested_kilo[$i];
			$actual_medicines[$i] = $actual_harvested_kilo[$i] <= 0 ? 0 : $actual_medicines_amount[$i]/$actual_harvested_kilo[$i];
			$actual_vaccines[$i] = $actual_harvested_kilo[$i] <= 0 ? 0 : $actual_vaccines_amount[$i]/$actual_harvested_kilo[$i];
			$actual_broiler_cost[$i] = $actual_doc[$i] + $actual_feeds[$i] + $actual_cg[$i] + $actual_medicines[$i] + $actual_vaccines[$i];

			$total_actual_doc = $total_actual_doc + $actual_doc_amount[$i];
			$total_actual_feeds = $total_actual_feeds + $actual_feeds_amount[$i];
			$total_actual_cg = $total_actual_cg + $actual_cg_fee_amount[$i];
			$total_actual_medicines = $total_actual_medicines + $actual_medicines_amount[$i];
			$total_actual_vaccines = $total_actual_vaccines + $actual_vaccines_amount[$i];
			$total_actual_harvested_kilo = $total_actual_harvested_kilo + $actual_harvested_kilo[$i];

			$previous_actual_doc[$i] = $previous_actual_harvested_kilo[$i] <= 0 ? 0 : $previous_actual_doc_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_feeds[$i] = $previous_actual_harvested_kilo[$i] <= 0 ? 0 : $previous_actual_feeds_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_cg[$i] = $previous_actual_harvested_kilo[$i] <= 0 ? 0 : $previous_actual_cg_fee_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_medicines[$i] = $previous_actual_harvested_kilo[$i] <= 0 ? 0 : $previous_actual_medicines_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_vaccines[$i] = $previous_actual_harvested_kilo[$i] <= 0 ? 0 : $previous_actual_vaccines_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_broiler_cost[$i] = $previous_actual_doc[$i] + $previous_actual_feeds[$i] + $previous_actual_cg[$i] + $previous_actual_medicines[$i] + $previous_actual_vaccines[$i];

			$total_previous_actual_doc = $total_previous_actual_doc + $previous_actual_doc_amount[$i];
			$total_previous_actual_feeds = $total_previous_actual_feeds + $previous_actual_feeds_amount[$i];
			$total_previous_actual_cg = $total_previous_actual_cg + $previous_actual_cg_fee_amount[$i];
			$total_previous_actual_medicines = $total_previous_actual_medicines + $previous_actual_medicines_amount[$i];
			$total_previous_actual_vaccines = $total_previous_actual_vaccines + $previous_actual_vaccines_amount[$i];
			$total_previous_actual_harvested_kilo = $total_previous_actual_harvested_kilo + $previous_actual_harvested_kilo[$i];

			$table .= '<tr>
				<td>'.$month.'</td>
				<td align="right">'.number_format($budgeted_harvested_heads[$i],0,'.',',').'</td>
				<td align="right">'.number_format($actual_harvested_heads[$i],0,'.',',').'</td>
				<td align="right">'.number_format($previous_actual_harvested_heads[$i],0,'.',',').'</td>

				<td align="right">'.number_format($this->_get_broiler_cost($trans_year, $i, $doctype),dec_places_dis(),'.',',').'</td>
				<td align="right">'.number_format($actual_broiler_cost[$i],dec_places_dis(),'.',',').'</td>
				<td align="right">'.number_format($previous_actual_broiler_cost[$i],dec_places_dis(),'.',',').'</td>
			</tr>';
		}

		$broiler_cost_ave = $medicine_ave + $doc_ave + $growers_fee_ave + $feed_cost_ave + $vaccines_ave;
		$total_actual_broiler_cost = $total_actual_doc + $total_actual_feeds + $total_actual_cg + $total_actual_vaccines + $total_actual_medicines;
		$total_actual_broiler_cost = $total_actual_harvested_kilo <= 0 ? 0 : $total_actual_broiler_cost/$total_actual_harvested_kilo;

		$total_previous_actual_broiler_cost = $total_previous_actual_doc + $total_previous_actual_feeds + $total_previous_actual_cg + $total_previous_actual_vaccines + $total_previous_actual_medicines;
		$total_previous_actual_broiler_cost = $total_previous_actual_harvested_kilo <= 0 ? 0 : $total_previous_actual_broiler_cost/$total_previous_actual_harvested_kilo;
		$table .= '<tr>
				<td align="right">TOTAL</td>
				<td align="right">'.number_format($harvested_heads,0,'.',',').'</td>
				<td align="right">'.number_format($total_actual_harvested_heads,0,'.',',').'</td>
				<td align="right">'.number_format($total_previous_actual_harvested_heads,0,'.',',').'</td>
				<td align="right">'.number_format($broiler_cost_ave,dec_places_dis(),'.',',').'</td>
				<td align="right">'.number_format($total_actual_broiler_cost,dec_places_dis(),'.',',').'</td>
				<td align="right">'.number_format($total_previous_actual_broiler_cost,dec_places_dis(),'.',',').'</td>
			</tr>';
		
		$harvested_dif1 = $harvested_heads - $total_actual_harvested_heads;
		$harvested_dif2 = $harvested_heads - $total_previous_actual_harvested_heads;
		$harvested_percent1 = $total_actual_harvested_heads > 0 ? ($harvested_dif1 / $total_actual_harvested_heads) * 100 : 0;
		$harvested_percent2 = $total_previous_actual_harvested_heads > 0 ? ($harvested_dif2 / $total_previous_actual_harvested_heads) * 100 : 0;

 		$harvested_condition1 = '';
 		$harvested_indicator1 = '';
 		if($harvested_heads > $total_actual_harvested_heads){
 			$harvested_condition1 = 'higher';
 			$harvested_indicator1 = 'fa fa-long-arrow-up';
 		}elseif($harvested_heads < $total_actual_harvested_heads){
 			$harvested_condition1 = 'lower';
 			$harvested_indicator1 = 'fa fa-long-arrow-down';
 		}

 		$harvested_condition2 = '';
 		$harvested_indicator2 = '';
 		if($harvested_heads > $total_previous_actual_harvested_heads){
 			$harvested_condition2 = 'higher';
 			$harvested_indicator2 = 'fa fa-long-arrow-up';
 		}elseif($harvested_heads < $total_previous_actual_harvested_heads){
 			$harvested_condition2 = 'lower';
 			$harvested_indicator2 = 'fa fa-long-arrow-down';
 		}

		$broiler_cost_dif1 = $broiler_cost_ave - $total_actual_broiler_cost;
		$broiler_cost_dif2 = $broiler_cost_ave - $total_previous_actual_broiler_cost;
		$broilder_cost_percent1 = $broiler_cost_ave > 0 ? ($broiler_cost_dif1 / $broiler_cost_ave) * 100 : 0;
		$broilder_cost_percent2 = $broiler_cost_ave > 0 ? ($broiler_cost_dif1 / $broiler_cost_ave) * 100 : 0;

		$broiler_cost_condition1 = '';
 		$broiler_cost_indicator1 = '';
 		if($broiler_cost_ave > $total_actual_broiler_cost){
 			$broiler_cost_condition1 = 'higher';
 			$broiler_cost_indicator1 = 'fa fa-long-arrow-up';
 		}elseif($broiler_cost_ave < $total_actual_broiler_cost){
 			$broiler_cost_condition1 = 'lower';
 			$broiler_cost_indicator1 = 'fa fa-long-arrow-down';
 		}

 		$broiler_cost_condition2 = '';
 		$broiler_cost_indicator2 = '';
 		if($broiler_cost_ave > $total_previous_actual_broiler_cost){
 			$broiler_cost_condition2 = 'higher';
 			$broiler_cost_indicator2 = 'fa fa-long-arrow-up';
 		}elseif($broiler_cost_ave < $total_previous_actual_broiler_cost){
 			$broiler_cost_condition2 = 'lower';
 			$broiler_cost_indicator2 = 'fa fa-long-arrow-down';
 		}

		$data['harvested_heads'] = $harvested_heads;
		$data['harvested_heads1'] = $total_actual_harvested_heads;
		$data['harvested_heads2'] = $total_previous_actual_harvested_heads;
		$data['harvested_dif1'] = $harvested_dif1;
		$data['harvested_dif2'] = $harvested_dif2;
		$data['harvested_percent1'] = $harvested_percent1;
		$data['harvested_percent2'] = $harvested_percent2;
		$data['harvested_condition1'] = $harvested_condition1;
		$data['harvested_condition2'] = $harvested_condition2;
		$data['harvested_indicator1'] = $harvested_indicator1;
		$data['harvested_indicator2'] = $harvested_indicator2;


		$data['broiler_cost'] = $broiler_cost_ave;
		$data['broiler_cost1'] = $total_actual_broiler_cost;
		$data['broiler_cost2'] = $total_previous_actual_broiler_cost;
		$data['broiler_cost_dif1'] = $broiler_cost_dif1;
		$data['broiler_cost_dif2'] = $broiler_cost_dif2;
		$data['broilder_cost_percent1'] = $broilder_cost_percent1;
		$data['broilder_cost_percent2'] = $broilder_cost_percent2;
		$data['broiler_cost_condition1'] = $broiler_cost_condition1;
		$data['broiler_cost_condition2'] = $broiler_cost_condition2;
		$data['broiler_cost_indicator1'] = $broiler_cost_indicator1;
		$data['broiler_cost_indicator2'] = $broiler_cost_indicator2;

		$data['tbl'] = $table;
		return $data;
	}

	public function _get_broiler_cost($trans_year, $trans_month, $doctype){
		$ci =& get_instance();
		$ci->load->model('admin_model', 'admin');

		$doctype = decode($doctype);
		if($doctype == 'trans'){
			$status = ' AND a.broiler_trans_status != 5';
		} else if($doctype == 'report') {
			$status = ' AND a.broiler_trans_status = 4';
		} else {
			$status = ' AND a.broiler_trans_status = 1';
		}

		$check_broiler_trans = $ci->admin->check_data('broiler_cost_summary_tbl', array('YEAR(trans_date)' =>	decode($trans_year), 'MONTH(trans_date)' => $trans_month), true, 'SUM(trans_qty) as trans_qty');

		if($check_broiler_trans['result']){
			$result = $check_broiler_trans['info']->trans_qty;
			return round($result, dec_places());
		} else {
			return 0;
		}
	}

	public function _get_noi_dashboard_tbl($year, $net_sales, $sales_unit, $variable_cost, $period_cost, $commission){
	    $check_noi1 = $this->admin->check_data('comparative_pnl_tbl', array('comp_pnl_year' => ($year - 1), 'comp_pnl_status' => 1), TRUE);

	    $check_noi2 = $this->admin->check_data('comparative_pnl_tbl', array('comp_pnl_year' => ($year - 2), 'comp_pnl_status' => 1), TRUE);

    	$variable_cost_unit = $sales_unit > 0 ? $variable_cost / $sales_unit : 0;
    	$margin = $net_sales - $variable_cost;
    	$margin_unit = $sales_unit > 0 ?  $margin / $sales_unit : 0;
    	$margin_percent = $net_sales > 0 ? ($margin / $net_sales) * 100 : 0;

    	$period_cost_unit = $sales_unit > 0 ? $period_cost / $sales_unit : 0;

    	$noi = $margin - $period_cost;
    	$noi_unit = $sales_unit > 0 ? $noi / $sales_unit : 0;
    	$noi_percent = number_format($net_sales > 0 ? ($noi / $net_sales) * 100 : 0);


	    $net_sales1 = 0;
    	$sales_unit1 = 0;
    	$variable_cost1 = 0;
    	$commission1 = 0;
    	$period_cost1 = 0;
    	$margin1 = 0;
    	$cm_percent1 = 0;
    	$noi1 = 0;
    	$noi_unit1 = 0;
    	$noi_percent1 = 0;
	    if($check_noi1['result'] == TRUE){
	    	$net_sales1 = $check_noi1['info']->comp_pnl_net_sales;
	    	$sales_unit1 = $check_noi1['info']->comp_pnl_sales_volume;
	    	$variable_cost1 = $check_noi1['info']->comp_pnl_variable_cost;
	    	$commission1 = 0;
	    	$period_cost1 = $check_noi1['info']->comp_pnl_period_cost;
	    	$margin1 = $net_sales1 - $variable_cost1;
	    	$cm_percent1 = $net_sales1 > 0 ? ($margin1 / $net_sales1) * 100 : 0;
	    	$noi1 = $margin1 - $period_cost1;
	    	$noi_unit1 = $sales_unit1 > 0 ? ($noi1 / $sales_unit1) : 0;
	    	$noi_percent1 = $net_sales1 > 0 ? ($noi1 / $net_sales1) * 100 : 0;
	    }

	    $net_sales2 = 0;
    	$sales_unit2 = 0;
    	$variable_cost2 = 0;
    	$commission2 = 0;
    	$period_cost2 = 0;
    	$margin2 = 0;
    	$cm_percent2 = 0;
    	$noi2 = 0;
    	$noi_unit2 = 0;
    	$noi_percent2 = 0;
	    if($check_noi2['result'] == TRUE){
	    	$net_sales2 = $check_noi2['info']->comp_pnl_net_sales;
	    	$sales_unit2 = $check_noi2['info']->comp_pnl_sales_volume;
	    	$variable_cost2 = $check_noi2['info']->comp_pnl_variable_cost;
	    	$commission2 = 0;
	    	$period_cost2 = $check_noi2['info']->comp_pnl_period_cost;
	    	$margin2 = $net_sales2 - $variable_cost2;
	    	$cm_percent2 = $net_sales2 > 0 ? ($margin2 / $net_sales2) * 100 : 0;
	    	$noi2 = $margin2 - $period_cost2;
	    	$noi_unit2 = $sales_unit2 > 0 ? ($noi2 / $sales_unit2) : 0;
	    	$noi_percent2 = $net_sales2 > 0 ? ($noi2 / $net_sales2) * 100 : 0;
	    }


    	$nsp = $sales_unit > 0 ? $net_sales/$sales_unit : 0;
    	$nsp1 = $sales_unit1 > 0 ? $net_sales1/$sales_unit1 : 0;
    	$nsp2 = $sales_unit2 > 0 ? $net_sales2/$sales_unit2 : 0;

    	$variable_cost_unit1 = $sales_unit1 > 0 ? $variable_cost1 / $sales_unit1 : 0;
    	$variable_cost_unit2 = $sales_unit2 > 0 ? $variable_cost2 / $sales_unit2 : 0;

    	$margin1 = $net_sales1 - $variable_cost1;
    	$margin2 = $net_sales2 - $variable_cost2;

    	$margin_unit1 = $sales_unit1 > 0 ?  $margin1 / $sales_unit1 : 0;
    	$margin_unit2 = $sales_unit2 > 0 ?  $margin2 / $sales_unit2 : 0;

    	$margin_percent1 = $net_sales1 > 0 ? ($margin1 / $net_sales1) * 100 : 0;
    	$margin_percent2 = $net_sales2 > 0 ? ($margin2 / $net_sales2) * 100 : 0;

    	$period_cost_unit1 = $sales_unit1 > 0 ? $period_cost1 / $sales_unit1 : 0;
    	$period_cost_unit2 = $sales_unit2 > 0 ? $period_cost2 / $sales_unit2 : 0;

    	$net_sales_dif1 = $net_sales - $net_sales1;
    	$net_sales_dif2 = $net_sales - $net_sales2;
    	$net_sales_percent1 = $net_sales1 > 0 ? ($net_sales_dif1 / $net_sales1) * 100 : 0;
    	$net_sales_percent2 = $net_sales2 > 0 ? ($net_sales_dif2 / $net_sales2) * 100 : 0;

    	$net_sales_condition1 = $net_sales_dif1 > 0 ? 'higher' :  'lower';
    	$net_sales_condition2 = $net_sales_dif2 > 0 ? 'higher' :  'lower';

    	$nsp_dif1 = $nsp - $nsp1;
    	$nsp_dif2 = $nsp - $nsp2;
    	$nsp_percent1 = $nsp1 > 0 ? ($nsp_dif1 / $nsp1) * 100 : 0;
    	$nsp_percent2 = $nsp2 > 0 ? ($nsp_dif2 / $nsp2) * 100 : 0;

    	$sales_unit_dif1 = $sales_unit - $sales_unit1;
    	$sales_unit_dif2 = $sales_unit - $sales_unit2;
    	$sales_unit_percent1 = $sales_unit1 > 0 ? ($sales_unit_dif1 / $sales_unit1) * 100 : 0;
    	$sales_unit_percent2 = $sales_unit2 > 0 ? ($sales_unit_dif2 / $sales_unit2) * 100 : 0;
    	$sales_unit_condition1 = $sales_unit_dif1 > 0 ? 'higher' :  'lower';
    	$sales_unit_condition2 = $sales_unit_dif2 > 0 ? 'higher' :  'lower';

    	$variable_cost_dif1 = $variable_cost - $variable_cost1;
    	$variable_cost_dif2 = $variable_cost - $variable_cost2;
    	$variable_cost_percent1 = $variable_cost1 > 0 ? ($variable_cost_dif1 / $variable_cost1) * 100 : 0;
    	$variable_cost_percent2 = $variable_cost2 > 0 ? ($variable_cost_dif2 / $variable_cost2) * 100 : 0;

    	$commission_dif1 = $commission - $commission1;
    	$commission_dif2 = $commission - $commission2;
    	$commission_percent1 = $commission1 > 0 ? ($commission_dif1 / $commission1) * 100 : 0;
    	$commission_percent2 = $commission2 > 0 ? ($commission_dif2 / $commission2) * 100 : 0;

    	$variable_cost_unit_dif1 = $variable_cost_unit - $variable_cost_unit1;
    	$variable_cost_unit_dif2 = $variable_cost_unit - $variable_cost_unit2;
    	$varialbe_cost_unit_percent1 = $variable_cost_unit1 > 0 ? ($variable_cost_unit_dif1 / $variable_cost_unit1) * 100 : 0;
    	$varialbe_cost_unit_percent2 = $variable_cost_unit1 > 0 ? ($variable_cost_unit_dif2 / $variable_cost_unit1) * 100 : 0;

    	$margin_dif1 = $margin - $margin1;
    	$margin_dif2 = $margin - $margin2;
    	$margin_percent1 = $margin1 > 0 ? ($margin_dif1 / $margin1) * 100 : 0;
    	$margin_percent2 = $margin2 > 0 ? ($margin_dif2 / $margin2) * 100 : 0;

    	$margin_unit_dif1 = $margin_unit - $margin_unit1;
    	$margin_unit_dif2 = $margin_unit - $margin_unit2;
    	$margin_unit_percent1 = $margin_unit1 > 0 ? ($margin_unit_dif1 / $margin_unit1) * 100 : 0;
    	$margin_unit_percent2 = $margin_unit2 > 0 ? ($margin_unit_dif2 / $margin_unit2) * 100 : 0;

    	$cm_percent_dif1 = $margin_percent - $cm_percent1;
    	$cm_percent_dif2 = $margin_percent - $cm_percent2;
    	$cm_percent_dif_percent1 = $cm_percent1 > 0 ? ($cm_percent_dif1 / $cm_percent1) * 100 : 0;
    	$cm_percent_dif_percent2 = $cm_percent2 > 0 ? ($cm_percent_dif2 / $cm_percent2) * 100 : 0;

    	$period_cost_dif1 = $period_cost - $period_cost1;
    	$period_cost_dif2 = $period_cost - $period_cost2;
    	$period_cost_percent1 = $period_cost1 > 0 ? ($period_cost_dif1 / $period_cost1) * 100 : 0;
    	$period_cost_percent2 = $period_cost2 > 0 ? ($period_cost_dif2 / $period_cost2) * 100 : 0;

    	$period_cost_unit_dif1 = $period_cost_unit - $period_cost_unit1;
    	$period_cost_unit_dif2 = $period_cost_unit - $period_cost_unit2;
    	$period_cost_unit_percent1 = $period_cost_unit1 > 0 ? ($period_cost_unit_dif1 / $period_cost_unit1) * 100 : 0;
    	$period_cost_unit_percent2 = $period_cost_unit2 > 0 ? ($period_cost_unit_dif2 / $period_cost_unit2) * 100 : 0;

    	$noi_dif1 = $noi - $noi1;
    	$noi_dif2 = $noi - $noi2;
    	$noi_dif_percent1 = $noi1 != 0 ? ($noi_dif1 / $noi1) * 100 : 0;
    	$noi_dif_percent2 = $noi2 != 0 ? ($noi_dif2 / $noi2) * 100 : 0;
    	$noi_condition1 = $noi_dif1 > 0 ? 'higher' :  'lower';
    	$noi_condition2 = $noi_dif2 > 0 ? 'higher' :  'lower';

    	$noi_unit_dif1 = $noi_unit - $noi_unit1;
    	$noi_unit_dif2 = $noi_unit - $noi_unit2;
    	$noi_unit_percent1 = $noi_unit1 > 0 ? ($noi_unit_dif1 / $noi_unit1) * 100 : 0;
    	$noi_unit_percent2 = $noi_unit2 > 0 ? ($noi_unit_dif2 / $noi_unit2) * 100 : 0;

    	$noi_percent_dif1 = $noi_percent - $noi_percent1;
    	$noi_percent_dif2 = $noi_percent - $noi_percent2;
    	$noi_percent_percent1 = $noi_percent1 > 0 ? ($noi_percent_dif1 / $noi_percent1) * 100 : 0;
    	$noi_percent_percent2 = $noi_percent2 > 0 ? ($noi_percent_dif2 / $noi_percent2) * 100 : 0;

    	$nsp = $sales_unit > 0 ? $net_sales / $sales_unit : 0;
	    $nsp1 = $sales_unit1 > 0 ? $net_sales1 / $sales_unit1 : 0;
	    $nsp2 = $sales_unit2 > 0 ? $net_sales1 / $sales_unit2 : 0;
	    $pnl_tbl = '
                <tr>
	    			<td><strong>Sales Volume, in Unit</strong></td>
	    			<td align="right"><a href="' . base_url('business-center/dl-sales-volume/' . $year) . '" target="_blank">' . number_format($sales_unit/1000) . '</a></td>
	    			<td align="right">' . number_format($sales_unit1/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit2/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit_dif1/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit_percent1) . '%</td>
	    			<td align="right">' . number_format($sales_unit_dif2/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit_percent2) . '%</td>

	    		</tr>

	    		<tr>
	    			<td><strong>NET SALES</strong></td>
	    			<td align="right"><a href="' . base_url('business-center/dl-net-sales/' . $year) . '" target="_blank">' . number_format($net_sales/1000) . '</a></td>
	    			<td align="right">' . number_format($net_sales1/1000) . '</td>
	    			<td align="right">' . number_format($net_sales2/1000) . '</td>
	    			<td align="right">' . number_format($net_sales_dif1/1000) . '</td>
	    			<td align="right">' . number_format($net_sales_percent1) . '%</td>
	    			<td align="right">' . number_format($net_sales_dif2/1000) . '</td>
	    			<td align="right">' . number_format($net_sales_percent2) . '%</td>
	    		</tr>


	    		<tr>
	    			<td><strong>NSP per Unit (P)</strong></td>
	    			<td align="right">' . number_format($nsp, 2) . '</td>
	    			<td align="right">' . number_format($nsp1, 2) . '</td>
	    			<td align="right">' . number_format($nsp2, 2) . '</td>
	    			<td align="right">' . number_format($nsp_dif1, 2) . '</td>
	    			<td align="right">' . number_format($nsp_percent1) . '%</td>
	    			<td align="right">' . number_format($nsp_dif2, 2) . '</td>
	    			<td align="right">' . number_format($nsp_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Variable Cost</strong></td>
	    			<td align="right"><a href="' . base_url('business-center/dl-noi-main-new/' . $year) . '" target="_blank">' . number_format($variable_cost/1000) . '</a></td>
	    			<td align="right">' . number_format($variable_cost1/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost2/1000) . '</td>
	    			<td align="right">' . number_format(($variable_cost_dif1/1000) * -1) . '</td>
	    			<td align="right">' . number_format(($variable_cost_percent1) * -1) . '%</td>
	    			<td align="right">' . number_format(($variable_cost_dif2/1000) * -1) . '</td>
	    			<td align="right">' . number_format(($variable_cost_percent2) * -1) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Var. Cost per Unit (P)</strong></td>
	    			<td align="right">' . number_format($variable_cost_unit, 2) . '</td>
	    			<td align="right">' . number_format($variable_cost_unit1, 2) . '</td>
	    			<td align="right">' . number_format($variable_cost_unit2, 2) . '</td>
	    			<td align="right">' . number_format(($variable_cost_unit_dif1) * -1, 2) . '</td>
	    			<td align="right">' . number_format(($varialbe_cost_unit_percent1) * -1) . '%</td>
	    			<td align="right">' . number_format(($variable_cost_unit_dif2) * -1, 2) . '</td>
	    			<td align="right">' . number_format(($varialbe_cost_unit_percent2 * -1)) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Contribution Margin</strong></td>
	    			<td align="right">' . number_format($margin/1000) . '</td>
	    			<td align="right">' . number_format($margin1/1000) . '</td>
	    			<td align="right">' . number_format($margin2/1000) . '</td>
	    			<td align="right">' . number_format($margin_dif1/1000) . '</td>
	    			<td align="right">' . number_format($margin_percent1) . '%</td>
	    			<td align="right">' . number_format($margin_dif2/1000) . '</td>
	    			<td align="right">' . number_format($margin_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>CM per Unit (P)</strong></td>
	    			<td align="right">' . number_format($margin_unit, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit1, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit2, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit_dif1, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit_percent1) . '%</td>
	    			<td align="right">' . number_format($margin_unit_dif2, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>CM %</strong></td>
	    			<td align="right">' . number_format($margin_percent) . '%</td>
	    			<td align="right">' . number_format($cm_percent1) . '%</td>
	    			<td align="right">' . number_format($cm_percent2) . '%</td>
	    			<td align="right">' . number_format($cm_percent_dif1) . '%</td>
	    			<td align="right">' . number_format($cm_percent_dif_percent1) . '%</td>
	    			<td align="right">' . number_format($cm_percent_dif2) . '%</td>
	    			<td align="right">' . number_format($cm_percent_dif_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Period Cost</strong></td>
	    			<td align="right"><a href="' . base_url('business-center/download-opex/' . $year) . '" target="_blank">' . number_format($period_cost/1000) . '</a</td>
	    			<td align="right">' . number_format($period_cost1/1000) . '</td>
	    			<td align="right">' . number_format($period_cost2/1000) . '</td>
	    			<td align="right">' . number_format(($period_cost_dif1/1000) * -1) . '</td>
	    			<td align="right">' . number_format(($period_cost_percent1) * -1) . '%</td>
	    			<td align="right">' . number_format(($period_cost_dif2/1000) * -1) . '</td>
	    			<td align="right">' . number_format(($period_cost_percent2) * -1) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Period Cost per Unit (P)</strong></td>
	    			<td align="right">' . number_format($period_cost_unit, 2) . '</td>
	    			<td align="right">' . number_format($period_cost_unit1, 2) . '</td>
	    			<td align="right">' . number_format($period_cost_unit2, 2) . '</td>
	    			<td align="right">' . number_format(($period_cost_unit_dif1) * -1, 2) . '</td>
	    			<td align="right">' . number_format($period_cost_unit_percent1 * -1) . '%</td>
	    			<td align="right">' . number_format(($period_cost_unit_dif2 * -1), 2) . '</td>
	    			<td align="right">' . number_format($period_cost_unit_percent2 * -1) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Other Income/Expenses</strong></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    		</tr>

	    		<tr>
	    			<td><strong>Others per Unit (P)</strong></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    		</tr>

	    		<tr>
	    			<td><strong>Net Operating Income</strong></td>
	    			<td align="right">' . number_format($noi/1000) . '</td>
	    			<td align="right">' . number_format($noi1/1000) . '</td>
	    			<td align="right">' . number_format($noi2/1000) . '</td>
	    			<td align="right">' . number_format($noi_dif1/1000) . '</td>
	    			<td align="right">' . number_format($noi_dif_percent1) . '%</td>
	    			<td align="right">' . number_format($noi_dif2/1000) . '</td>
	    			<td align="right">' . number_format($noi_dif_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>NOI per Unit (P)</strong></td>
	    			<td align="right">' . number_format($noi_unit, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit1, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit2, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit_dif1, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit_percent1) . '%</td>
	    			<td align="right">' . number_format($noi_unit_dif2, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>NOI to Sales</strong></td>
	    			<td align="right">' . number_format($noi_percent) . '%</td>
	    			<td align="right">' . number_format($noi_percent1) . '%</td>
	    			<td align="right">' . number_format($noi_percent2) . '%</td>
	    			<td align="right">' . number_format($noi_percent_dif1) . '%</td>
	    			<td align="right">' . number_format($noi_percent_percent1) . '%</td>
	    			<td align="right">' . number_format($noi_percent_dif2) . '%</td>
	    			<td align="right">' . number_format($noi_percent_percent2) . '%</td>
	    		</tr>
	    ';

	    $data['sales_unit1'] = $sales_unit1;
	    $data['sales_unit2'] = $sales_unit2;
	    $data['net_sales1'] = $net_sales1;
	    $data['net_sales2'] = $net_sales2;
	    $data['variable_cost1'] = $variable_cost1;
	    $data['variable_cost2'] = $variable_cost2;
	    $data['period_cost1'] = $period_cost1;
	    $data['period_cost2'] = $period_cost2;
	    $data['noi'] = $noi;
	    $data['noi1'] = $noi1;
	    $data['noi2'] = $noi2;
	    $data['tbl'] = $pnl_tbl;

	    return $data;
	}

	public function _get_opex_dashboard_tbl($year, $opex){

		$opex_per_account_tbl = '';

		$total = 0;
		$total1 = 0;
		$total2 = 0;
		foreach($opex as $row_opex_acc){
	    	$opex_acc_total = $row_opex_acc->total_amount;
	    	$opex_acc_total1 = $row_opex_acc->total_amount1;
	    	$opex_acc_total2 = $row_opex_acc->total_amount2;

	    	$opex_acc_dif1 = $opex_acc_total1 - $opex_acc_total;
	    	$opex_acc_dif2 = $opex_acc_total2 - $opex_acc_total;
	    	$opex_acc_per1 = $opex_acc_total1 != 0 ? ($opex_acc_dif1/$opex_acc_total1) * 100 : 0;
	    	$opex_acc_per2 = $opex_acc_total2 != 0 ? ($opex_acc_dif2/$opex_acc_total2) * 100 : 0;

	    	$opex_per_account_tbl .= '
	    		<tr>
	    			<td>' . $row_opex_acc->gl_sub_name . '</td>
	    			<td align="right">' . number_format($opex_acc_total) . '</td>
	    			<td align="right">' . number_format($opex_acc_total1) . '</td>
	    			<td align="right">' . number_format($opex_acc_total2) . '</td>
	    			<td align="right">' . number_format($opex_acc_dif1) . '</td>
	    			<td align="right">' . $opex_acc_per1 . '%</td>
	    			<td align="right">' . number_format($opex_acc_dif2) . '</td>
	    			<td align="right">' . $opex_acc_per2 . '%</td>
	    		</tr>

	    	';

	    	$total += $opex_acc_total;
	    	$total1 += $opex_acc_total1;
	    	$total2 += $opex_acc_total2;
	    }

	    $total_dif1 = $total - $total1;
	    $total_dif2 = $total - $total2;

	    $total_per1 = $total1 != 0 ? ($total_dif1/$total1) * 100 : 0;
	    $total_per2 = $total2 != 0 ? ($total_dif2/$total2) * 100 : 0;

	    $opex_per_account_tbl .= '
	    	<tr>
	    		<td><strong>Total</td>
	    		<td align="right"><strong>' . number_format($total) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total1) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total2) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total_dif1) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total_per1) . '%</strong></td>
	    		<td align="right"><strong>' . number_format($total_dif2) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total_per2) . '%</strong></td>
	    	</tr>
	    ';

	    return $opex_per_account_tbl;
	}

	public function _get_opex_unit_dashboard_tbl($year, $opex){

		$opex_per_account_tbl = '';

		$total = 0;
		$total1 = 0;
		$total2 = 0;
		foreach($opex as $row_opex_acc){
	    	$opex_acc_total = $row_opex_acc->total_amount;
	    	$opex_acc_total1 = $row_opex_acc->total_amount1;
	    	$opex_acc_total2 = $row_opex_acc->total_amount2;

	    	$opex_acc_dif1 = $opex_acc_total1 - $opex_acc_total;
	    	$opex_acc_dif2 = $opex_acc_total2 - $opex_acc_total;
	    	$opex_acc_per1 = $opex_acc_total1 != 0 ? ($opex_acc_dif1/$opex_acc_total1) * 100 : 0;
	    	$opex_acc_per2 = $opex_acc_total2 != 0 ? ($opex_acc_dif2/$opex_acc_total2) * 100 : 0;

	    	$opex_per_account_tbl .= '
	    		<tr>
	    			<td>' . $row_opex_acc->gl_sub_name . '</td>
	    			<td align="right">' . number_format($opex_acc_total) . '</td>
	    			<td align="right">' . number_format($opex_acc_total1) . '</td>
	    			<td align="right">' . number_format($opex_acc_total2) . '</td>
	    			<td align="right">' . number_format($opex_acc_dif1) . '</td>
	    			<td align="right">' . $opex_acc_per1 . '%</td>
	    			<td align="right">' . number_format($opex_acc_dif2) . '</td>
	    			<td align="right">' . $opex_acc_per2 . '%</td>
	    		</tr>

	    	';

	    	$total += $opex_acc_total;
	    	$total1 += $opex_acc_total1;
	    	$total2 += $opex_acc_total2;
	    }

	    $total_dif1 = $total - $total1;
	    $total_dif2 = $total - $total2;

	    $total_per1 = $total1 != 0 ? ($total_dif1/$total1) * 100 : 0;
	    $total_per2 = $total2 != 0 ? ($total_dif2/$total2) * 100 : 0;

	    $opex_per_account_tbl .= '
	    	<tr>
	    		<td><strong>Total</td>
	    		<td align="right"><strong>' . number_format($total) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total1) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total2) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total_dif1) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total_per1) . '%</strong></td>
	    		<td align="right"><strong>' . number_format($total_dif2) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total_per2) . '%</strong></td>
	    	</tr>
	    ';

	    return $opex_per_account_tbl;
	}

	public function _get_volume_dashboard_tbl($volume){

		$live = $volume['live'];
		$live1 = $volume['live1'];
		$live2 = $volume['live2'];
		$live_dif1 = $live - $live1;
		$live_dif2 = $live - $live2;
		$live_per1 = $live1 > 0 ? ($live_dif1 / $live1) * 100 : 0;
		$live_per2 = $live2 > 0 ? ($live_dif2 / $live2) * 100 : 0;

		$dressed_others = $volume['dressed_others'];
		$dressed_others1 = $volume['dressed_others1'];
		$dressed_others2 = $volume['dressed_others2'];
		$dressed_others_dif1 = $dressed_others - $dressed_others1;
		$dressed_others_dif2 = $dressed_others - $dressed_others2;
		$dressed_others_per1 = $dressed_others1 > 0 ? ($dressed_others_dif1 / $dressed_others1) * 100 : 0;
		$dressed_others_per2 = $dressed_others2 > 0 ? ($dressed_others_dif2 / $dressed_others2) * 100 : 0;

		$dressed_others = $volume['dressed_others'];
		$dressed_others1 = $volume['dressed_others1'];
		$dressed_others2 = $volume['dressed_others2'];
		$dressed_others_dif1 = $dressed_others - $dressed_others1;
		$dressed_others_dif2 = $dressed_others - $dressed_others2;
		$dressed_others_per1 = $dressed_others1 > 0 ? ($dressed_others_dif1 / $dressed_others1) * 100 : 0;
		$dressed_others_per2 = $dressed_others2 > 0 ? ($dressed_others_dif2 / $dressed_others2) * 100 : 0;

		$dressed_sup = $volume['dressed_sup'];
		$dressed_sup1 = $volume['dressed_sup1'];
		$dressed_sup2 = $volume['dressed_sup2'];
		$dressed_sup_dif1 = $dressed_sup - $dressed_sup1;
		$dressed_sup_dif2 = $dressed_others - $dressed_others2;
		$dressed_sup_per1 = $dressed_sup1 > 0 ? ($dressed_sup_dif1 / $dressed_sup1) * 100 : 0;
		$dressed_sup_per2 = $dressed_sup2 > 0 ? ($dressed_sup_dif2 / $dressed_sup2) * 100 : 0;

		$dressed_retail = $volume['dressed_retail'];
		$dressed_retail1 = $volume['dressed_retail1'];
		$dressed_retail2 = $volume['dressed_retail2'];
		$dressed_retail_dif1 = $dressed_retail - $dressed_retail1;
		$dressed_retail_dif2 = $dressed_retail - $dressed_retail2;
		$dressed_retail_per1 = $dressed_retail1 > 0 ? ($dressed_retail_dif1 / $dressed_retail1) * 100 : 0;
		$dressed_retail_per2 = $dressed_retail2 > 0 ? ($dressed_retail_dif2 / $dressed_retail2) * 100 : 0;

		$dressed_vansales = $volume['dressed_vansales'];
		$dressed_vansales1 = $volume['dressed_vansales1'];
		$dressed_vansales2 = $volume['dressed_vansales2'];
		$dressed_vansales_dif1 = $dressed_vansales - $dressed_vansales1;
		$dressed_vansales_dif2 = $dressed_vansales - $dressed_vansales2;
		$dressed_vansales_per1 = $dressed_vansales1 > 0 ? ($dressed_vansales_dif1 / $dressed_vansales1) * 100 : 0;
		$dressed_vansales_per2 = $dressed_vansales2 > 0 ? ($dressed_vansales_dif2 / $dressed_vansales2) * 100 : 0;

		$non_marinated = $volume['non_marinated'];
		$non_marinated1 = $volume['non_marinated1'];
		$non_marinated2 = $volume['non_marinated2'];
		$non_marinated_dif1 = $non_marinated - $non_marinated1;
		$non_marinated_dif2 = $non_marinated - $non_marinated2;
		$non_marinated_per1 = $non_marinated1 > 0 ? ($non_marinated_dif1 / $non_marinated1) * 100 : 0;
		$non_marinated_per2 = $non_marinated2 > 0 ? ($non_marinated_dif2 / $non_marinated2) * 100 : 0;

		$marinated = $volume['marinated'];
		$marinated1 = $volume['marinated1'];
		$marinated2 = $volume['marinated2'];
		$marinated_dif1 = $marinated - $marinated1;
		$marinated_dif2 = $marinated - $marinated2;
		$marinated_per1 = $marinated1 > 0 ? ($marinated_dif1 / $marinated1) * 100 : 0;
		$marinated_per2 = $marinated2 > 0 ? ($marinated_dif2 / $marinated2) * 100 : 0;

		$spicy_neck = $volume['spicy_neck'];
		$spicy_neck1 = $volume['spicy_neck1'];
		$spicy_neck2 = $volume['spicy_neck2'];
		$spicy_neck_dif1 = $spicy_neck - $spicy_neck1;
		$spicy_neck_dif2 = $spicy_neck - $spicy_neck2;
		$spicy_neck_per1 = $spicy_neck1 > 0 ? ($spicy_neck_dif1 / $spicy_neck1) * 100 : 0;
		$spicy_neck_per2 = $spicy_neck2 > 0 ? ($spicy_neck_dif2 / $spicy_neck2) * 100 : 0;

		$roasted_cutups = $volume['roasted_cutups'];
		$roasted_cutups1 = $volume['roasted_cutups1'];
		$roasted_cutups2 = $volume['roasted_cutups2'];
		$roasted_cutups_dif1 = $roasted_cutups - $roasted_cutups1;
		$roasted_cutups_dif2 = $roasted_cutups - $roasted_cutups2;
		$roasted_cutups_per1 = $roasted_cutups1 > 0 ? ($roasted_cutups_dif1 / $roasted_cutups1) * 100 : 0;
		$roasted_cutups_per2 = $roasted_cutups2 > 0 ? ($roasted_cutups_dif2 / $roasted_cutups2) * 100 : 0;

		$roasted_chicken = $volume['roasted_chicken'];
		$roasted_chicken1 = $volume['roasted_chicken1'];
		$roasted_chicken2 = $volume['roasted_chicken2'];
		$roasted_chicken_dif1 = $roasted_chicken - $roasted_chicken1;
		$roasted_chicken_dif2 = $roasted_chicken - $roasted_chicken2;
		$roasted_chicken_per1 = $roasted_chicken1 > 0 ? ($roasted_chicken_dif1 / $roasted_chicken1) * 100 : 0;
		$roasted_chicken_per2 = $roasted_chicken2 > 0 ? ($roasted_chicken_dif2 / $roasted_chicken2) * 100 : 0;

		$marinated_chicken_raw = $volume['marinated_chicken_raw'];
		$marinated_chicken_raw1 = $volume['marinated_chicken_raw1'];
		$marinated_chicken_raw2 = $volume['marinated_chicken_raw2'];
		$marinated_chicken_raw_dif1 = $marinated_chicken_raw - $marinated_chicken_raw1;
		$marinated_chicken_raw_dif2 = $marinated_chicken_raw - $marinated_chicken_raw2;
		$marinated_chicken_raw_per1 = $marinated_chicken_raw1 > 0 ? ($marinated_chicken_raw_dif1 / $marinated_chicken_raw1) * 100 : 0;
		$marinated_chicken_raw_per2 = $marinated_chicken_raw2 > 0 ? ($marinated_chicken_raw_dif2 / $marinated_chicken_raw2) * 100 : 0;

		$others = $volume['others'];
		$others1 = $volume['others1'];
		$others2 = $volume['others2'];
		$others_dif1 = $others - $others1;
		$others_dif2 = $others - $others2;
		$others_per1 = $others1 > 0 ? ($others_dif1 / $others1) * 100 : 0;
		$others_per2 = $others2 > 0 ? ($others_dif2 / $others2) * 100 : 0;

		$sub_total = $live + $dressed_others + $dressed_sup + $dressed_retail + $dressed_vansales + $non_marinated + $marinated + $spicy_neck + $roasted_cutups + $roasted_chicken + $marinated_chicken_raw + $others;

		$liempo = $volume['liempo'];
		$liempo1 = $volume['liempo1'];
		$liempo2 = $volume['liempo2'];
		$liempo_dif1 = $liempo - $liempo1;
		$liempo_dif2 = $liempo - $liempo2;
		$liempo_per1 = $liempo1 > 0 ? ($liempo_dif1 / $liempo1) * 100 : 0;
		$liempo_per2 = $liempo2 > 0 ? ($liempo_dif2 / $liempo2) * 100 : 0;

		$vap = $volume['vap'];
		$vap1 = $volume['vap1'];
		$vap2 = $volume['vap2'];
		$vap_dif1 = $vap - $vap1;
		$vap_dif2 = $vap - $vap2;
		$vap_per1 = $vap1 > 0 ? ($vap_dif1 / $vap1) * 100 : 0;
		$vap_per2 = $vap2 > 0 ? ($vap_dif2 / $vap2) * 100 : 0;

		$total = $live + $dressed_others + $dressed_sup + $dressed_retail + $dressed_vansales + $non_marinated + $marinated + $spicy_neck + $roasted_cutups + $roasted_chicken + $marinated_chicken_raw + $others + $liempo + $vap;

		$total1 = $live1 + $dressed_others1 + $dressed_sup1 + $dressed_retail1 + $non_marinated1 + $marinated1 + $spicy_neck1 + $roasted_cutups1 + $roasted_chicken1 + $marinated_chicken_raw1 + $others1 + $liempo1 + $vap1;

		$total2 = $live2 + $dressed_others2 + $dressed_sup2 + $dressed_retail2 + $non_marinated2 + $marinated2 + $spicy_neck2 + $roasted_cutups2 + $roasted_chicken2 + $marinated_chicken_raw2 + $others2 + $liempo2 + $vap2;

		$variance1 = $total - $total1;
		$variance2 = $total - $total2;
		$percent1 = $total1 > 0 ? ($variance1 / $total1) * 100 : 0;
		$percent2 = $total2 > 0 ? ($variance2 / $total2) * 100 : 0;

		$volume_tbl = '
			<tr>
	            <td class="text-left">LIVE SALES</td>
	            <td class="text-right">' . number_format($live) . '</td>
	            <td class="text-right">' . number_format($live1) . '</td>
	            <td class="text-right">' . number_format($live2) . '</td>
	            <td class="text-right">' . number_format($live_dif1) . '</td>
	            <td class="text-right">' . number_format($live_per1) . '%</td>
	            <td class="text-right">' . number_format($live_dif2) . '</td>
	            <td class="text-right">' . number_format($live_per2) . '%</td>
	            
	            <td class="text-right">' . number_format($live) . '</td>
	            <td class="text-right">' . number_format($live1) . '</td>
	            <td class="text-right">' . number_format($live2) . '</td>
	            <td class="text-right">' . number_format($live_dif1) . '</td>
	            <td class="text-right">' . number_format($live_per1) . '%</td>
	            <td class="text-right">' . number_format($live_dif2) . '</td>
	            <td class="text-right">' . number_format($live_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">DRESSED - OTHERS</td>
	            <td class="text-right">' . number_format($dressed_others) . '</td>
	            <td class="text-right">' . number_format($dressed_others1) . '</td>
	            <td class="text-right">' . number_format($dressed_others2) . '</td>
	            <td class="text-right">' . number_format($dressed_others_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_others_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_others_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_others_per2) . '%</td>

	            <td class="text-right">' . number_format($dressed_others) . '</td>
	            <td class="text-right">' . number_format($dressed_others1) . '</td>
	            <td class="text-right">' . number_format($dressed_others2) . '</td>
	            <td class="text-right">' . number_format($dressed_others_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_others_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_others_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_others_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">DRESSED - SUPERMARKET</td>
	            <td class="text-right">' . number_format($dressed_sup) . '</td>
	            <td class="text-right">' . number_format($dressed_sup1) . '</td>
	            <td class="text-right">' . number_format($dressed_sup2) . '</td>
	            <td class="text-right">' . number_format($dressed_sup_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_sup_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_sup_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_sup_per2) . '%</td>

	            <td class="text-right">' . number_format($dressed_sup) . '</td>
	            <td class="text-right">' . number_format($dressed_sup1) . '</td>
	            <td class="text-right">' . number_format($dressed_sup2) . '</td>
	            <td class="text-right">' . number_format($dressed_sup_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_sup_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_sup_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_sup_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">DRESSED - VANSALES</td>
	            <td class="text-right">' . number_format($dressed_vansales) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales1) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales2) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_vansales_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales_per2) . '%</td>

	            <td class="text-right">' . number_format($dressed_vansales) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales1) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales2) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_vansales_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">DRESSED - RETAIL</td>
	            <td class="text-right">' . number_format($dressed_retail) . '</td>
	            <td class="text-right">' . number_format($dressed_retail1) . '</td>
	            <td class="text-right">' . number_format($dressed_retail2) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_retail_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_per2) . '%</td>

	            <td class="text-right">' . number_format($dressed_retail) . '</td>
	            <td class="text-right">' . number_format($dressed_retail1) . '</td>
	            <td class="text-right">' . number_format($dressed_retail2) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_retail_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">NON MARINATED CUT UPS</td>
	            <td class="text-right">' . number_format($non_marinated) . '</td>
	            <td class="text-right">' . number_format($non_marinated1) . '</td>
	            <td class="text-right">' . number_format($non_marinated2) . '</td>
	            <td class="text-right">' . number_format($non_marinated_dif1) . '</td>
	            <td class="text-right">' . number_format($non_marinated_per1) . '%</td>
	            <td class="text-right">' . number_format($non_marinated_dif2) . '</td>
	            <td class="text-right">' . number_format($non_marinated_per2) . '%</td>

	            <td class="text-right">' . number_format($non_marinated) . '</td>
	            <td class="text-right">' . number_format($non_marinated1) . '</td>
	            <td class="text-right">' . number_format($non_marinated2) . '</td>
	            <td class="text-right">' . number_format($non_marinated_dif1) . '</td>
	            <td class="text-right">' . number_format($non_marinated_per1) . '%</td>
	            <td class="text-right">' . number_format($non_marinated_dif2) . '</td>
	            <td class="text-right">' . number_format($non_marinated_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">MARINATED CUT UPS</td>
	            <td class="text-right">' . number_format($marinated) . '</td>
	            <td class="text-right">' . number_format($marinated1) . '</td>
	            <td class="text-right">' . number_format($marinated2) . '</td>
	            <td class="text-right">' . number_format($marinated_dif1) . '</td>
	            <td class="text-right">' . number_format($marinated_per1) . '%</td>
	            <td class="text-right">' . number_format($marinated_dif2) . '</td>
	            <td class="text-right">' . number_format($marinated_per2) . '%</td>

	            <td class="text-right">' . number_format($marinated) . '</td>
	            <td class="text-right">' . number_format($marinated1) . '</td>
	            <td class="text-right">' . number_format($marinated2) . '</td>
	            <td class="text-right">' . number_format($marinated_dif1) . '</td>
	            <td class="text-right">' . number_format($marinated_per1) . '%</td>
	            <td class="text-right">' . number_format($marinated_dif2) . '</td>
	            <td class="text-right">' . number_format($marinated_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">SPICY NECK</td>
	            <td class="text-right">' . number_format($spicy_neck) . '</td>
	            <td class="text-right">' . number_format($spicy_neck1) . '</td>
	            <td class="text-right">' . number_format($spicy_neck2) . '</td>
	            <td class="text-right">' . number_format($spicy_neck_dif1) . '</td>
	            <td class="text-right">' . number_format($spicy_neck_per1) . '%</td>
	            <td class="text-right">' . number_format($spicy_neck_dif2) . '</td>
	            <td class="text-right">' . number_format($spicy_neck_per2) . '%</td>

	            <td class="text-right"></td>
	            <td class="text-right"></td>
	            <td class="text-right"></td>
	            <td class="text-right"></td>
	            <td class="text-right"></td>
	            <td class="text-right"></td>
	            <td class="text-right"></td>
	        </tr>

	        <tr>
	            <td class="text-left">ROASTED CUT UPS</td>
	            <td class="text-right">' . number_format($roasted_cutups) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups1) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups2) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_dif1) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_per1) . '%</td>
	            <td class="text-right">' . number_format($roasted_cutups_dif2) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_per2) . '%</td>

	            <td class="text-right">' . number_format($roasted_cutups) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups1) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups2) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_dif1) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_per1) . '%</td>
	            <td class="text-right">' . number_format($roasted_cutups_dif2) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">ROASTED CHICKEN</td>
	            <td class="text-right">' . number_format($roasted_chicken) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken1) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken2) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_dif1) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_per1) . '%</td>
	            <td class="text-right">' . number_format($roasted_chicken_dif2) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_per2) . '%</td>

	            <td class="text-right">' . number_format($roasted_chicken) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken1) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken2) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_dif1) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_per1) . '%</td>
	            <td class="text-right">' . number_format($roasted_chicken_dif2) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">MARINATED CHICKEN (RAW)</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw1) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw2) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_dif1) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_per1) . '%</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_dif2) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_per2) . '%</td>

	            <td class="text-right">' . number_format($marinated_chicken_raw) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw1) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw2) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_dif1) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_per1) . '%</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_dif2) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">OTHER SPECIALTY PRODUCTS</td>
	            <td class="text-right">' . number_format($others) . '</td>
	            <td class="text-right">' . number_format($others1) . '</td>
	            <td class="text-right">' . number_format($others2) . '</td>
	            <td class="text-right">' . number_format($others_dif1) . '</td>
	            <td class="text-right">' . number_format($others_per1) . '%</td>
	            <td class="text-right">' . number_format($others_dif2) . '</td>
	            <td class="text-right">' . number_format($others_per2) . '%</td>

	            <td class="text-right">' . number_format($others) . '</td>
	            <td class="text-right">' . number_format($others1) . '</td>
	            <td class="text-right">' . number_format($others2) . '</td>
	            <td class="text-right">' . number_format($others_dif1) . '</td>
	            <td class="text-right">' . number_format($others_per1) . '%</td>
	            <td class="text-right">' . number_format($others_dif2) . '</td>
	            <td class="text-right">' . number_format($others_per2) . '%</td>
	        </tr>

	        <tr>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	        </tr>

	        <tr style="border-top: 2px solid black; border-bottom: 2px solid black">
	            <td class="text-left"><strong>Sub Total</strong></td>
	            <td class="text-right">' . number_format($sub_total) . '</td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	        </tr>

	        <tr>
	            <td class="text-left">LIEMPO</td>
	            <td class="text-right">' . number_format($liempo) . '</td>
	            <td class="text-right">' . number_format($liempo1) . '</td>
	            <td class="text-right">' . number_format($liempo2) . '</td>
	            <td class="text-right">' . number_format($liempo_dif1) . '</td>
	            <td class="text-right">' . number_format($liempo_per1) . '%</td>
	            <td class="text-right">' . number_format($liempo_dif2) . '</td>
	            <td class="text-right">' . number_format($liempo_per2) . '%</td>

	            <td class="text-right">' . number_format($liempo) . '</td>
	            <td class="text-right">' . number_format($liempo1) . '</td>
	            <td class="text-right">' . number_format($liempo2) . '</td>
	            <td class="text-right">' . number_format($liempo_dif1) . '</td>
	            <td class="text-right">' . number_format($liempo_per1) . '%</td>
	            <td class="text-right">' . number_format($liempo_dif2) . '</td>
	            <td class="text-right">' . number_format($liempo_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">VAP</td>
	            <td class="text-right">' . number_format($vap) . '</td>
	            <td class="text-right">' . number_format($vap1) . '</td>
	            <td class="text-right">' . number_format($vap2) . '</td>
	            <td class="text-right">' . number_format($vap_dif1) . '</td>
	            <td class="text-right">' . number_format($vap_per1) . '%</td>
	            <td class="text-right">' . number_format($vap_dif2) . '</td>
	            <td class="text-right">' . number_format($vap_per2) . '%</td>

	            <td class="text-right">' . number_format($vap) . '</td>
	            <td class="text-right">' . number_format($vap1) . '</td>
	            <td class="text-right">' . number_format($vap2) . '</td>
	            <td class="text-right">' . number_format($vap_dif1) . '</td>
	            <td class="text-right">' . number_format($vap_per1) . '%</td>
	            <td class="text-right">' . number_format($vap_dif2) . '</td>
	            <td class="text-right">' . number_format($vap_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">DP/DOA/DAA</td>
	            <td class="text-right"></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	        </tr>

	        <tr>
	            <td class="text-left">Transfer (In) / Out</td>
	            <td class="text-right"></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	        </tr>

	        <tr style="border-top: 2px solid black; border-bottom: 2px solid black">
	            <td class="text-left"><strong>Total</strong></td>
	            <td class="text-right">' . number_format($total) . '</td>
	            <td class="text-right">' . number_format($total1) . '</td>
	            <td class="text-right">' . number_format($total2) . '</td>
	            <td class="text-right">' . number_format($variance1) . '</td>
	            <td class="text-right">' . number_format($percent1) . '</td>
	            <td class="text-right">' . number_format($variance2) . '</td>
	            <td class="text-right">' . number_format($percent1) . '</td>

	            <td class="text-right">' . number_format($total) . '</td>
	            <td class="text-right">' . number_format($total1) . '</td>
	            <td class="text-right">' . number_format($total2) . '</td>
	            <td class="text-right">' . number_format($variance1) . '</td>
	            <td class="text-right">' . number_format($percent1) . '</td>
	            <td class="text-right">' . number_format($variance2) . '</td>
	            <td class="text-right">' . number_format($percent1) . '</td>
	        </tr>
	    ';

	    return $volume_tbl;
	}

	public function get_comparative_net_sales($year){
		$info = $this->_require_login();

		$join1 = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id AND YEAR(a.trans_year) = ' . ($year - 1),
		);
		$comparative1 = $this->admin->check_join('comparative_net_sales_tbl a', $join1, TRUE,'b.bc_name ASC', false, 'b.bc_name, a.*, SUM(net_sales) as net_sales, SUM(a.sales_unit) as sales_unit');
		$net_sales1 = 0;
		$sales_unit1 = 0;
		if($comparative1['result'] == TRUE){
			$net_sales1 = $comparative1['info']->net_sales;
			$sales_unit1 = $comparative1['info']->sales_unit;
		}

		$join2 = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id AND YEAR(a.trans_year) = ' . ($year - 2),
		);
		$comparative2 = $this->admin->check_join('comparative_net_sales_tbl a', $join2, FALSE,'b.bc_name ASC', false, 'b.bc_name, a.*, SUM(net_sales) as net_sales, SUM(a.sales_unit) as sales_unit');

		$net_sales2 = 0;
		$sales_unit2 = 0;
		if($comparative2['result'] == TRUE){
			$net_sales2 = $comparative2['info']->net_sales;
			$sales_unit2 = $comparative2['info']->sales_unit;
		}

		$data['net_sales1'] = $net_sales1;
		$data['net_sales2'] = $net_sales2;
		$data['sales_unit1'] = $sales_unit1;
		$data['sales_unit2'] = $sales_unit2;
		return $data;
	}

	public function sales_unit($year){
		$join = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b. sales_item_status',
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_unit_tbl e' => 'd.material_id = e.material_id AND e.material_unit_status = 1',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'bc_tbl g' => 'f.bc_id = g.bc_id AND a.sales_year = ' . $year 
		);

		$sales_unit = $this->admin->get_join('sales_tbl a', $join, FALSE, FALSE, 'd.material_id', 'd.material_code, d.material_desc, SUM(c.sales_det_qty), e.sales_unit_equivalent as sales_unit, SUM(c.sales_det_qty) / e.sales_unit_equivalent as total_sales_unit');
		return $sales_unit;
	}

	public function sales_mix($year){
		$info = $this->_require_login();

		$sales_mix = $this->_get_sales_mix_report($year);
		$data['result'] = 1;
		$data['info'] = $sales_mix;
		echo json_encode($data);
	}

	public function capex_report($year){
		$info = $this->_require_login();

		$join = array(
			'asset_group_transaction_item_tbl b' => 'a.ag_trans_id = b.ag_trans_id AND a.ag_trans_status = 1 AND b.ag_trans_item_status = 1 AND a.ag_trans_budget_year = ' . $year,
			'asset_group_transaction_details_tbl c' => 'b.ag_trans_item_id = c.ag_trans_item_id AND c.ag_trans_det_status = 1',
			'asset_subgroup_tbl d' => 'b.asg_id = d.asg_id',
			'asset_group_tbl e' => 'd.ag_id = e.ag_id',
		);

		$capex = $this->admin->get_join('asset_group_transaction_tbl a', $join, TRUE, FALSE, FALSE, '

			SUM(b.capex_price * c.capex_qty) as total_capex,

			(SELECT SUM(x.comp_capex_val) FROM comparative_capex_tbl x WHERE e.ag_id = x.ag_id AND x.comp_capex_status = 1 AND x.comp_capex_year = ' . ($year - 1) . ') as total_capex1, 

			(SELECT SUM(x.comp_capex_val) FROM comparative_capex_tbl x WHERE d.ag_id = x.ag_id AND x.comp_capex_status = 1 AND x.comp_capex_year = ' . ($year - 2) . ') as total_capex2

			');
		return $capex;
	}

	public function volume_report($year){
		$info = $this->_require_login();

		$join_live = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVE SALES\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id'
		);

		$get_live = $this->admin->get_join('sales_tbl a', $join_live, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as live_sales_unit, 

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "LIVE SALES" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as live_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "LIVE SALES" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as live_sales_unit2
		');

		$data['live'] = $get_live->live_sales_unit;
		$data['live1'] = $get_live->live_sales_unit1;
		$data['live2'] = $get_live->live_sales_unit2;

		$join_dressed_others = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id',
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id AND i.brand_name = \'TRADE DISTRIBUTOR\''
		);

		$get_dressed_others = $this->admin->get_join('sales_tbl a', $join_dressed_others, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_others_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - OTHERS" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as dressed_others_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - OTHERS" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as dressed_others_sales_unit2

		');
		$data['dressed_others'] = $get_dressed_others->dressed_others_sales_unit;
		$data['dressed_others1'] = $get_dressed_others->dressed_others_sales_unit1;
		$data['dressed_others2'] = $get_dressed_others->dressed_others_sales_unit2;

		$join_dressed_sup = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id',
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id AND i.brand_name = \'SUPERMARKET\''
		);

		$get_dressed_sup = $this->admin->get_join('sales_tbl a', $join_dressed_sup, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_sup_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - SUPERMARKET" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as dressed_sup_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - SUPERMARKET" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as dressed_sup_sales_unit2
		');
		$data['dressed_sup'] = $get_dressed_sup->dressed_sup_sales_unit;
		$data['dressed_sup1'] = $get_dressed_sup->dressed_sup_sales_unit1;
		$data['dressed_sup2'] = $get_dressed_sup->dressed_sup_sales_unit2;


		$join_dressed_retail = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id',
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_dressed_retail = $this->admin->get_join('sales_tbl a', $join_dressed_retail, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_retail_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - RETAIL" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as dressed_retail_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - RETAIL" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as dressed_retail_sales_unit2
		');
		$data['dressed_retail'] = $get_dressed_retail->dressed_retail_sales_unit;
		$data['dressed_retail1'] = $get_dressed_retail->dressed_retail_sales_unit1;
		$data['dressed_retail2'] = $get_dressed_retail->dressed_retail_sales_unit2;

		$join_dressed_vansales = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id',
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND i.brand_name = \'VAN SALES\''
		);

		$get_dressed_vansales = $this->admin->get_join('sales_tbl a', $join_dressed_vansales, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_vansales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - VANSALES" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as dressed_vansales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - VANSALES" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as dressed_vansales_unit2
		');

		$data['dressed_vansales'] = $get_dressed_vansales->dressed_vansales_unit;
		$data['dressed_vansales1'] = $get_dressed_vansales->dressed_vansales_unit1;
		$data['dressed_vansales2'] = $get_dressed_vansales->dressed_vansales_unit2;

		$join_non_marinated = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'NON MARINATED CUT UPS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id',
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id'
			/*'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''*/
		);

		$get_non_marinated = $this->admin->get_join('sales_tbl a', $join_non_marinated, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as non_marinated_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "NON MARINATED CUT UPS" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as non_marinated_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "NON MARINATED CUT UPS" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as non_marinated_sales_unit2

			');
		$data['non_marinated'] = $get_non_marinated->non_marinated_sales_unit;
		$data['non_marinated1'] = $get_non_marinated->non_marinated_sales_unit1;
		$data['non_marinated2'] = $get_non_marinated->non_marinated_sales_unit2;

		$join_marinated = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code NOT IN ("1000090", "10200090", "1000401", "1000402")',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id',
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id'
			/*'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''*/
		);

		$get_marinated = $this->admin->get_join('sales_tbl a', $join_marinated, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as marinated_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "MARINATED CUT UPS" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as marinated_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "MARINATED CUT UPS" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as marinated_sales_unit2


			');
		$data['marinated'] = $get_marinated->marinated_sales_unit;
		$data['marinated1'] = $get_marinated->marinated_sales_unit1;
		$data['marinated2'] = $get_marinated->marinated_sales_unit2;

		$join_spicy_neck = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = "10200090"',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id',
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_spicy_neck = $this->admin->get_join('sales_tbl a', $join_spicy_neck, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as spicy_neck_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "SPICY NECK" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as spicy_neck_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "SPICY NECK" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as spicy_neck_sales_unit2
		');
		$data['spicy_neck'] = $get_spicy_neck->spicy_neck_sales_unit;
		$data['spicy_neck1'] = $get_spicy_neck->spicy_neck_sales_unit1;
		$data['spicy_neck2'] = $get_spicy_neck->spicy_neck_sales_unit2;

		$join_roasted_cutups = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'ROASTED CUT UPS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id',
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_roasted_cutups = $this->admin->get_join('sales_tbl a', $join_roasted_cutups, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as roasted_cutups_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "ROASTED CUT UPS" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as roasted_cutups_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "ROASTED CUT UPS" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as roasted_cutups_sales_unit2

			');
		$data['roasted_cutups'] = $get_roasted_cutups->roasted_cutups_sales_unit;
		$data['roasted_cutups1'] = $get_roasted_cutups->roasted_cutups_sales_unit1;
		$data['roasted_cutups2'] = $get_roasted_cutups->roasted_cutups_sales_unit2;

		$join_roasted_chicken = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'ROASTED CHICKEN\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id',
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_roasted_chicken = $this->admin->get_join('sales_tbl a', $join_roasted_chicken, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as roasted_chicken_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "ROASTED CHICKEN" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as roasted_chicken_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "ROASTED CHICKEN" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as roasted_chicken_sales_unit2
		');
		$data['roasted_chicken'] = $get_roasted_chicken->roasted_chicken_sales_unit;
		$data['roasted_chicken1'] = $get_roasted_chicken->roasted_chicken_sales_unit1;
		$data['roasted_chicken2'] = $get_roasted_chicken->roasted_chicken_sales_unit2;

		$join_marinated_chicken_raw = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CHICKEN (RAW)\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id',
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id'
			/*'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''*/
		);

		$get_marinated_chicken_raw = $this->admin->get_join('sales_tbl a', $join_marinated_chicken_raw, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as marinated_chicken_raw_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "MARINATED CHICKEN (RAW)" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as marinated_chicken_raw_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "MARINATED CHICKEN (RAW)" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as marinated_chicken_raw_sales_unit2

		');
		$data['marinated_chicken_raw'] = $get_marinated_chicken_raw->marinated_chicken_raw_sales_unit;
		$data['marinated_chicken_raw1'] = $get_marinated_chicken_raw->marinated_chicken_raw_sales_unit1;
		$data['marinated_chicken_raw2'] = $get_marinated_chicken_raw->marinated_chicken_raw_sales_unit2;

		$join_other = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER SPECIALTY PRODUCTS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id',
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_other = $this->admin->get_join('sales_tbl a', $join_other, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as other_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "OTHER SPECIALTY PRODUCTS" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as other_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "OTHER SPECIALTY PRODUCTS" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as other_sales_unit2
		');
		$data['others'] = $get_other->other_sales_unit;
		$data['others1'] = $get_other->other_sales_unit1;
		$data['others2'] = $get_other->other_sales_unit2;

		$join_liempo = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIEMPO\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id',
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_liempo = $this->admin->get_join('sales_tbl a', $join_liempo, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as liempo_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "LIEMPO" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as liempo_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "LIEMPO" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as liempo_sales_unit2
		');
		$data['liempo'] = $get_liempo->liempo_sales_unit;
		$data['liempo1'] = $get_liempo->liempo_sales_unit1;
		$data['liempo2'] = $get_liempo->liempo_sales_unit2;

		$join_vap = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER VAP PRODUCTS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id',
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_vap = $this->admin->get_join('sales_tbl a', $join_vap, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as vap_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "VAP" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as vap_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "VAP" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as vap_sales_unit2

		');
		$data['vap'] = $get_vap->vap_sales_unit;
		$data['vap1'] = $get_vap->vap_sales_unit1;
		$data['vap2'] = $get_vap->vap_sales_unit2;

		return $data;
	}

	public function price_assumption_report($year){
		$info = $this->_require_login();

		$count = 0;
		$newline_count = 15;
		$join_live = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => "b.material_id = d.material_id AND d.material_desc = 'LIVE BROILER'",
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = "LIVE"'
		);

		$get_live = $this->admin->get_join('sales_tbl a', $join_live, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['live1'] = 0;
		$data['live2'] = 0;
		$data['live3'] = 0;
		$data['live4'] = 0;
		$data['live5'] = 0;
		$data['live6'] = 0;
		$data['live7'] = 0;
		$data['live8'] = 0;
		$data['live9'] = 0;
		$data['live10'] = 0;
		$data['live11'] = 0;
		$data['live12'] = 0;
		$data['live_total'] = 0;
		$data['live_count'] = 0;
		$data['live_avg'] = 0;
		$data['live_min'] = 0;
		$data['live_max'] = 0;

		foreach($get_live as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['live' . $month] = $asp;

			$data['live_total'] += $asp;

			if($asp < $data['live_min'] || $data['live_count'] == 0){
				$data['live_min'] = $asp;
			}

			if($asp > $data['live_max'] || $data['live_count'] == 0){
				$data['live_max'] = $asp;
			}

			$data['live_count']++;
		}

		$data['live_avg'] = $data['live_total'] != 0 ? $data['live_total'] / $data['live_count'] : 0;


		
		$data['live_prev'] = 0;
		$data['live_prev2'] = 0;

		$live_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIVE', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');-
		
		$data['live_prev_year2_jan'] = 0;
		$data['live_prev_year2_feb'] = 0;
		$data['live_prev_year2_mar'] = 0;
		$data['live_prev_year2_apr'] = 0;
		$data['live_prev_year2_may'] = 0;
		$data['live_prev_year2_jun'] = 0;
		$data['live_prev_year2_jul'] = 0;
		$data['live_prev_year2_aug'] = 0;
		$data['live_prev_year2_sep'] = 0;
		$data['live_prev_year2_oct'] = 0;
		$data['live_prev_year2_nov'] = 0;
		$data['live_prev_year2_dec'] = 0;
		$data['live_prev_year2_avg'] = 0;
		$data['live_prev_year2_min'] = 0;
		$data['live_prev_year2_max'] = 0;

		foreach($live_prev_year2 as $row){
			$data['live_prev_year2_jan'] = $row->jan_price;
			$data['live_prev_year2_feb'] = $row->feb_price;
			$data['live_prev_year2_mar'] = $row->mar_price;
			$data['live_prev_year2_apr'] = $row->apr_price;
			$data['live_prev_year2_may'] = $row->may_price;
			$data['live_prev_year2_jun'] = $row->jun_price;
			$data['live_prev_year2_jul'] = $row->jul_price;
			$data['live_prev_year2_aug'] = $row->aug_price;
			$data['live_prev_year2_sep'] = $row->sep_price;
			$data['live_prev_year2_oct'] = $row->oct_price;
			$data['live_prev_year2_nov'] = $row->nov_price;
			$data['live_prev_year2_dec'] = $row->dec_price;
			$data['live_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['live_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['live_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

		}


		$live_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIVE', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['live_prev_year1_jan'] = 0;
		$data['live_prev_year1_feb'] = 0;
		$data['live_prev_year1_mar'] = 0;
		$data['live_prev_year1_apr'] = 0;
		$data['live_prev_year1_may'] = 0;
		$data['live_prev_year1_jun'] = 0;
		$data['live_prev_year1_jul'] = 0;
		$data['live_prev_year1_aug'] = 0;
		$data['live_prev_year1_sep'] = 0;
		$data['live_prev_year1_oct'] = 0;
		$data['live_prev_year1_nov'] = 0;
		$data['live_prev_year1_dec'] = 0;
		$data['live_prev_year1_avg'] = 0;
		$data['live_prev_year1_min'] = 0;
		$data['live_prev_year1_max'] = 0;

		foreach($live_prev_year1 as $row){
			$data['live_prev_year1_jan'] = $row->jan_price;
			$data['live_prev_year1_feb'] = $row->feb_price;
			$data['live_prev_year1_mar'] = $row->mar_price;
			$data['live_prev_year1_apr'] = $row->apr_price;
			$data['live_prev_year1_may'] = $row->may_price;
			$data['live_prev_year1_jun'] = $row->jun_price;
			$data['live_prev_year1_jul'] = $row->jul_price;
			$data['live_prev_year1_aug'] = $row->aug_price;
			$data['live_prev_year1_sep'] = $row->sep_price;
			$data['live_prev_year1_oct'] = $row->oct_price;
			$data['live_prev_year1_nov'] = $row->nov_price;
			$data['live_prev_year1_dec'] = $row->dec_price;
			$data['live_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['live_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['live_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*Van Sales*/

		$join_vansales = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'VAN SALES\''
		);

		$get_vansales = $this->admin->get_join('sales_tbl a', $join_vansales, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['vansales1'] = 0;
		$data['vansales2'] = 0;
		$data['vansales3'] = 0;
		$data['vansales4'] = 0;
		$data['vansales5'] = 0;
		$data['vansales6'] = 0;
		$data['vansales7'] = 0;
		$data['vansales8'] = 0;
		$data['vansales9'] = 0;
		$data['vansales10'] = 0;
		$data['vansales11'] = 0;
		$data['vansales12'] = 0;
		$data['vansales_total'] = 0;
		$data['vansales_count'] = 0;
		$data['vansales_avg'] = 0;
		$data['vansales_min'] = 0;
		$data['vansales_max'] = 0;

		foreach($get_vansales as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['vansales' . $month] = $asp;
			$data['vansales_total'] += $asp;

			if($asp < $data['vansales_min'] || $data['vansales_count'] == 0){
				$data['vansales_min'] = $asp;
			}

			if($asp > $data['vansales_max'] || $data['vansales_count'] == 0){
				$data['vansales_max'] = $asp;
			}

			$data['vansales_count']++;
		}

		$data['vansales_avg'] = $data['vansales_total'] != 0 ? $data['vansales_total'] / $data['vansales_count'] : 0;

		$vansales_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAN SALES', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['vansales_prev_year2_jan'] = 0;
		$data['vansales_prev_year2_feb'] = 0;
		$data['vansales_prev_year2_mar'] = 0;
		$data['vansales_prev_year2_apr'] = 0;
		$data['vansales_prev_year2_may'] = 0;
		$data['vansales_prev_year2_jun'] = 0;
		$data['vansales_prev_year2_jul'] = 0;
		$data['vansales_prev_year2_aug'] = 0;
		$data['vansales_prev_year2_sep'] = 0;
		$data['vansales_prev_year2_oct'] = 0;
		$data['vansales_prev_year2_nov'] = 0;
		$data['vansales_prev_year2_dec'] = 0;
		$data['vansales_prev_year2_avg'] = 0;
		$data['vansales_prev_year2_min'] = 0;
		$data['vansales_prev_year2_max'] = 0;

		foreach($vansales_prev_year2 as $row){
			$data['vansales_prev_year2_jan'] = $row->jan_price;
			$data['vansales_prev_year2_feb'] = $row->feb_price;
			$data['vansales_prev_year2_mar'] = $row->mar_price;
			$data['vansales_prev_year2_apr'] = $row->apr_price;
			$data['vansales_prev_year2_may'] = $row->may_price;
			$data['vansales_prev_year2_jun'] = $row->jun_price;
			$data['vansales_prev_year2_jul'] = $row->jul_price;
			$data['vansales_prev_year2_aug'] = $row->aug_price;
			$data['vansales_prev_year2_sep'] = $row->sep_price;
			$data['vansales_prev_year2_oct'] = $row->oct_price;
			$data['vansales_prev_year2_nov'] = $row->nov_price;
			$data['vansales_prev_year2_dec'] = $row->dec_price;
			$data['vansales_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['vansales_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['vansales_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		$vansales_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAN SALES', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['vansales_prev_year1_jan'] = 0;
		$data['vansales_prev_year1_feb'] = 0;
		$data['vansales_prev_year1_mar'] = 0;
		$data['vansales_prev_year1_apr'] = 0;
		$data['vansales_prev_year1_may'] = 0;
		$data['vansales_prev_year1_jun'] = 0;
		$data['vansales_prev_year1_jul'] = 0;
		$data['vansales_prev_year1_aug'] = 0;
		$data['vansales_prev_year1_sep'] = 0;
		$data['vansales_prev_year1_oct'] = 0;
		$data['vansales_prev_year1_nov'] = 0;
		$data['vansales_prev_year1_dec'] = 0;
		$data['vansales_prev_year1_avg'] = 0;
		$data['vansales_prev_year1_min'] = 0;
		$data['vansales_prev_year1_max'] = 0;

		foreach($vansales_prev_year1 as $row){
			$data['vansales_prev_year1_jan'] = $row->jan_price;
			$data['vansales_prev_year1_feb'] = $row->feb_price;
			$data['vansales_prev_year1_mar'] = $row->mar_price;
			$data['vansales_prev_year1_apr'] = $row->apr_price;
			$data['vansales_prev_year1_may'] = $row->may_price;
			$data['vansales_prev_year1_jun'] = $row->jun_price;
			$data['vansales_prev_year1_jul'] = $row->jul_price;
			$data['vansales_prev_year1_aug'] = $row->aug_price;
			$data['vansales_prev_year1_sep'] = $row->sep_price;
			$data['vansales_prev_year1_oct'] = $row->oct_price;
			$data['vansales_prev_year1_nov'] = $row->nov_price;
			$data['vansales_prev_year1_dec'] = $row->dec_price;
			$data['vansales_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['vansales_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['vansales_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		$join_smkt = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'SUPERMARKET\''
		);

		$join_tds = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'TRADE DISTRIBUTOR\''
		);

		$get_tds = $this->admin->get_join('sales_tbl a', $join_tds, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['tds1'] = 0;
		$data['tds2'] = 0;
		$data['tds3'] = 0;
		$data['tds4'] = 0;
		$data['tds5'] = 0;
		$data['tds6'] = 0;
		$data['tds7'] = 0;
		$data['tds8'] = 0;
		$data['tds9'] = 0;
		$data['tds10'] = 0;
		$data['tds11'] = 0;
		$data['tds12'] = 0;
		$data['tds_total'] = 0;
		$data['tds_count'] = 0;
		$data['tds_avg'] = 0;
		$data['tds_min'] = 0;
		$data['tds_max'] = 0;

		foreach($get_tds as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['tds' . $month] = $asp;
			$data['tds_total'] += $asp;

			if($asp < $data['tds_min'] || $data['tds_count'] == 0){
				$data['tds_min'] = $asp;
			}

			if($asp > $data['tds_max'] || $data['tds_count'] == 0){
				$data['tds_max'] = $asp;
			}

			$data['tds_count']++;
		}

		$data['tds_avg'] = $data['tds_total'] != 0 ? $data['tds_total'] / $data['tds_count'] : 0;

		$tds_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_prev_year2_jan'] = 0;
		$data['tds_prev_year2_feb'] = 0;
		$data['tds_prev_year2_mar'] = 0;
		$data['tds_prev_year2_apr'] = 0;
		$data['tds_prev_year2_may'] = 0;
		$data['tds_prev_year2_jun'] = 0;
		$data['tds_prev_year2_jul'] = 0;
		$data['tds_prev_year2_aug'] = 0;
		$data['tds_prev_year2_sep'] = 0;
		$data['tds_prev_year2_oct'] = 0;
		$data['tds_prev_year2_nov'] = 0;
		$data['tds_prev_year2_dec'] = 0;
		$data['tds_prev_year2_avg'] = 0;
		$data['tds_prev_year2_min'] = 0;
		$data['tds_prev_year2_max'] = 0;

		foreach($tds_prev_year2 as $row){
			$data['tds_prev_year2_jan'] = $row->jan_price;
			$data['tds_prev_year2_feb'] = $row->feb_price;
			$data['tds_prev_year2_mar'] = $row->mar_price;
			$data['tds_prev_year2_apr'] = $row->apr_price;
			$data['tds_prev_year2_may'] = $row->may_price;
			$data['tds_prev_year2_jun'] = $row->jun_price;
			$data['tds_prev_year2_jul'] = $row->jul_price;
			$data['tds_prev_year2_aug'] = $row->aug_price;
			$data['tds_prev_year2_sep'] = $row->sep_price;
			$data['tds_prev_year2_oct'] = $row->oct_price;
			$data['tds_prev_year2_nov'] = $row->nov_price;
			$data['tds_prev_year2_dec'] = $row->dec_price;
			$data['tds_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['tds_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['tds_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		$tds_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_prev_year1_jan'] = 0;
		$data['tds_prev_year1_feb'] = 0;
		$data['tds_prev_year1_mar'] = 0;
		$data['tds_prev_year1_apr'] = 0;
		$data['tds_prev_year1_may'] = 0;
		$data['tds_prev_year1_jun'] = 0;
		$data['tds_prev_year1_jul'] = 0;
		$data['tds_prev_year1_aug'] = 0;
		$data['tds_prev_year1_sep'] = 0;
		$data['tds_prev_year1_oct'] = 0;
		$data['tds_prev_year1_nov'] = 0;
		$data['tds_prev_year1_dec'] = 0;
		$data['tds_prev_year1_avg'] = 0;
		$data['tds_prev_year1_min'] = 0;
		$data['tds_prev_year1_max'] = 0;

		foreach($tds_prev_year1 as $row){
			$data['tds_prev_year1_jan'] = $row->jan_price;
			$data['tds_prev_year1_feb'] = $row->feb_price;
			$data['tds_prev_year1_mar'] = $row->mar_price;
			$data['tds_prev_year1_apr'] = $row->apr_price;
			$data['tds_prev_year1_may'] = $row->may_price;
			$data['tds_prev_year1_jun'] = $row->jun_price;
			$data['tds_prev_year1_jul'] = $row->jul_price;
			$data['tds_prev_year1_aug'] = $row->aug_price;
			$data['tds_prev_year1_sep'] = $row->sep_price;
			$data['tds_prev_year1_oct'] = $row->oct_price;
			$data['tds_prev_year1_nov'] = $row->nov_price;
			$data['tds_prev_year1_dec'] = $row->dec_price;
			$data['tds_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['tds_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['tds_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		$join_smkt = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'SUPERMARKET\''
		);

		$get_smkt = $this->admin->get_join('sales_tbl a', $join_smkt, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['smkt1'] = 0;
		$data['smkt2'] = 0;
		$data['smkt3'] = 0;
		$data['smkt4'] = 0;
		$data['smkt5'] = 0;
		$data['smkt6'] = 0;
		$data['smkt7'] = 0;
		$data['smkt8'] = 0;
		$data['smkt9'] = 0;
		$data['smkt10'] = 0;
		$data['smkt11'] = 0;
		$data['smkt12'] = 0;
		$data['smkt_total'] = 0;
		$data['smkt_count'] = 0;
		$data['smkt_avg'] = 0;
		$data['smkt_min'] = 0;
		$data['smkt_max'] = 0;

		foreach($get_smkt as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['smkt' . $month] = $asp;
			$data['smkt_total'] += $asp;

			if($asp < $data['smkt_min'] || $data['smkt_count'] == 0){
				$data['smkt_min'] = $asp;
			}

			if($asp > $data['smkt_max'] || $data['smkt_count'] == 0){
				$data['smkt_max'] = $asp;
			}

			$data['smkt_count']++;
		}

		$data['smkt_avg'] = $data['smkt_total'] != 0 ? $data['smkt_total'] / $data['smkt_count'] : 0;

		$smkt_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_prev_year2_jan'] = 0;
		$data['smkt_prev_year2_feb'] = 0;
		$data['smkt_prev_year2_mar'] = 0;
		$data['smkt_prev_year2_apr'] = 0;
		$data['smkt_prev_year2_may'] = 0;
		$data['smkt_prev_year2_jun'] = 0;
		$data['smkt_prev_year2_jul'] = 0;
		$data['smkt_prev_year2_aug'] = 0;
		$data['smkt_prev_year2_sep'] = 0;
		$data['smkt_prev_year2_oct'] = 0;
		$data['smkt_prev_year2_nov'] = 0;
		$data['smkt_prev_year2_dec'] = 0;
		$data['smkt_prev_year2_avg'] = 0;
		$data['smkt_prev_year2_min'] = 0;
		$data['smkt_prev_year2_max'] = 0;

		foreach($smkt_prev_year2 as $row){
			$data['smkt_prev_year2_jan'] = $row->jan_price;
			$data['smkt_prev_year2_feb'] = $row->feb_price;
			$data['smkt_prev_year2_mar'] = $row->mar_price;
			$data['smkt_prev_year2_apr'] = $row->apr_price;
			$data['smkt_prev_year2_may'] = $row->may_price;
			$data['smkt_prev_year2_jun'] = $row->jun_price;
			$data['smkt_prev_year2_jul'] = $row->jul_price;
			$data['smkt_prev_year2_aug'] = $row->aug_price;
			$data['smkt_prev_year2_sep'] = $row->sep_price;
			$data['smkt_prev_year2_oct'] = $row->oct_price;
			$data['smkt_prev_year2_nov'] = $row->nov_price;
			$data['smkt_prev_year2_dec'] = $row->dec_price;
			$data['smkt_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['smkt_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['smkt_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		$smkt_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SUPERMARKET', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_prev_year1_jan'] = 0;
		$data['smkt_prev_year1_feb'] = 0;
		$data['smkt_prev_year1_mar'] = 0;
		$data['smkt_prev_year1_apr'] = 0;
		$data['smkt_prev_year1_may'] = 0;
		$data['smkt_prev_year1_jun'] = 0;
		$data['smkt_prev_year1_jul'] = 0;
		$data['smkt_prev_year1_aug'] = 0;
		$data['smkt_prev_year1_sep'] = 0;
		$data['smkt_prev_year1_oct'] = 0;
		$data['smkt_prev_year1_nov'] = 0;
		$data['smkt_prev_year1_dec'] = 0;
		$data['smkt_prev_year1_avg'] = 0;
		$data['smkt_prev_year1_min'] = 0;
		$data['smkt_prev_year1_max'] = 0;

		foreach($smkt_prev_year1 as $row){
			$data['smkt_prev_year1_jan'] = $row->jan_price;
			$data['smkt_prev_year1_feb'] = $row->feb_price;
			$data['smkt_prev_year1_mar'] = $row->mar_price;
			$data['smkt_prev_year1_apr'] = $row->apr_price;
			$data['smkt_prev_year1_may'] = $row->may_price;
			$data['smkt_prev_year1_jun'] = $row->jun_price;
			$data['smkt_prev_year1_jul'] = $row->jul_price;
			$data['smkt_prev_year1_aug'] = $row->aug_price;
			$data['smkt_prev_year1_sep'] = $row->sep_price;
			$data['smkt_prev_year1_oct'] = $row->oct_price;
			$data['smkt_prev_year1_nov'] = $row->nov_price;
			$data['smkt_prev_year1_dec'] = $row->dec_price;
			$data['smkt_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['smkt_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['smkt_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*Chooks-to-Go*/

		$get_ctg_orc = $this->admin->get_query("SELECT p.size_name, AVG(asp_tbl.jan_asp) as orc_jan, AVG(asp_tbl.feb_asp) as orc_feb, AVG(asp_tbl.mar_asp) as orc_mar, AVG(asp_tbl.apr_asp) as orc_apr, AVG(asp_tbl.may_asp) as orc_may, AVG(asp_tbl.jun_asp) as orc_jun, AVG(asp_tbl.jul_asp) as orc_jul, AVG(asp_tbl.aug_asp) as orc_aug, AVG(asp_tbl.sep_asp) as orc_sep, AVG(asp_tbl.oct_asp) as orc_oct, AVG(asp_tbl.nov_asp) as orc_nov, AVG(asp_tbl.dec_asp) as orc_dec FROM material_tbl o, size_tbl p,

		(SELECT m.material_id, m.size_id,

		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-01-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as jan_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-02-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as feb_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-03-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as mar_asp,
    
   		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-04-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as apr_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-05-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as may_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-06-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as jun_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-07-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as jul_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-08-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as aug_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-09-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as sep_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-10-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as oct_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-11-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as nov_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-12-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as dec_asp
    
		FROM material_size_tbl m, brand_tbl n WHERE m.brand_id = n.brand_id AND m.material_size_status = 1 AND n.brand_name = 'CHOOKS-TO-GO' AND m.is_orc = 1) as asp_tbl

		WHERE o.material_id = asp_tbl.material_id AND p.size_id = asp_tbl.size_id GROUP BY p.size_id");

		$data['ctg_reg1'] = $data['ctg_reg2'] = $data['ctg_reg3'] = $data['ctg_reg4'] = $data['ctg_reg5'] = $data['ctg_reg6'] = $data['ctg_reg7'] = $data['ctg_reg8'] = $data['ctg_reg9'] = $data['ctg_reg10'] = $data['ctg_reg11'] = $data['ctg_reg12'] = $data['ctg_reg_total'] = $data['ctg_reg_count'] = $data['ctg_reg_avg'] = $data['ctg_reg_min'] = $data['ctg_reg_max'] = 0;

		$data['ctg_jbo1'] = $data['ctg_jbo2'] = $data['ctg_jbo3'] = $data['ctg_jbo4'] = $data['ctg_jbo5'] = $data['ctg_jbo6'] = $data['ctg_jbo7'] = $data['ctg_jbo8'] = $data['ctg_jbo9'] = $data['ctg_jbo10'] = $data['ctg_jbo11'] = $data['ctg_jbo12'] = $data['ctg_jbo_total'] = $data['ctg_jbo_count'] = $data['ctg_jbo_avg'] = $data['ctg_jbo_min'] = $data['ctg_jbo_max'] = 0;

		$data['ctg_ss1'] = $data['ctg_ss2'] = $data['ctg_ss3'] = $data['ctg_ss4'] = $data['ctg_ss5'] = $data['ctg_ss6'] = $data['ctg_ss7'] = $data['ctg_ss8'] = $data['ctg_ss9'] = $data['ctg_ss10'] = $data['ctg_ss11'] = $data['ctg_ss12'] = $data['ctg_ss_total'] = $data['ctg_ss_count'] = $data['ctg_ss_avg'] = $data['ctg_ss_min'] = $data['ctg_ss_max'] = 0;

		$data['ctg_bt1'] = $data['ctg_bt2'] = $data['ctg_bt3'] = $data['ctg_bt4'] = $data['ctg_bt5'] = $data['ctg_bt6'] = $data['ctg_bt7'] = $data['ctg_bt8'] = $data['ctg_bt9'] = $data['ctg_bt10'] = $data['ctg_bt11'] = $data['ctg_bt12'] = $data['ctg_bt_total'] = $data['ctg_bt_count'] = $data['ctg_bt_avg'] = $data['ctg_bt_min'] = $data['ctg_bt_max'] = 0;

		$data['ctg_half1'] = $data['ctg_half2'] = $data['ctg_half3'] = $data['ctg_half4'] = $data['ctg_half5'] = $data['ctg_half6'] = $data['ctg_half7'] = $data['ctg_half8'] = $data['ctg_half9'] = $data['ctg_half10'] = $data['ctg_half11'] = $data['ctg_half12'] = $data['ctg_half_total'] = $data['ctg_half_count'] = $data['ctg_half_avg'] = $data['ctg_half_min'] = $data['ctg_half_max'] = 0;

		foreach($get_ctg_orc as $row){

			$orc_size = $row->size_name;
			$orc_jan = $row->orc_jan;
			$orc_feb = $row->orc_feb;
			$orc_mar = $row->orc_mar;
			$orc_apr = $row->orc_apr;
			$orc_may = $row->orc_may;
			$orc_jun = $row->orc_jun;
			$orc_jul = $row->orc_jul;
			$orc_aug = $row->orc_aug;
			$orc_sep = $row->orc_sep;
			$orc_oct = $row->orc_oct;
			$orc_nov = $row->orc_nov;
			$orc_dec = $row->orc_dec;
			$orc_min = min($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_max = max($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_avg = ($orc_jan + $orc_feb + $orc_mar + $orc_apr + $orc_may + $orc_jun + $orc_jul + $orc_aug + $orc_sep + $orc_oct + $orc_nov + $orc_dec) / 12;

			if($orc_size == "REGULAR"){
				$data['ctg_reg1'] = $orc_jan;
				$data['ctg_reg2'] = $orc_feb;
				$data['ctg_reg3'] = $orc_mar;
				$data['ctg_reg4'] = $orc_apr;
				$data['ctg_reg5'] = $orc_may;
				$data['ctg_reg6'] = $orc_jun;
				$data['ctg_reg7'] = $orc_jul;
				$data['ctg_reg8'] = $orc_aug;
				$data['ctg_reg9'] = $orc_sep;
				$data['ctg_reg10'] = $orc_oct;
				$data['ctg_reg11'] = $orc_nov;
				$data['ctg_reg12'] = $orc_dec;
				$data['ctg_reg_avg'] = $orc_avg;
				$data['ctg_reg_min'] = $orc_min;
				$data['ctg_reg_max'] = $orc_max;

				$reg_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - REGULAR', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
				foreach($reg_prev_year2 as $row){
					$data['ctg_reg1_year2'] = $row->jan_price;
					$data['ctg_reg2_year2'] = $row->feb_price;
					$data['ctg_reg3_year2'] = $row->mar_price;
					$data['ctg_reg4_year2'] = $row->apr_price;
					$data['ctg_reg5_year2'] = $row->may_price;
					$data['ctg_reg6_year2'] = $row->jun_price;
					$data['ctg_reg7_year2'] = $row->jul_price;
					$data['ctg_reg8_year2'] = $row->aug_price;
					$data['ctg_reg9_year2'] = $row->sep_price;
					$data['ctg_reg10_year2'] = $row->oct_price;
					$data['ctg_reg11_year2'] = $row->nov_price;
					$data['ctg_reg12_year2'] = $row->dec_price;
					$data['ctg_reg_avg_year2'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_reg_min_year2'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_reg_max_year2'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

				$reg_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - REGULAR', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($reg_prev_year1 as $row){
					$data['ctg_reg1_year1'] = $row->jan_price;
					$data['ctg_reg2_year1'] = $row->feb_price;
					$data['ctg_reg3_year1'] = $row->mar_price;
					$data['ctg_reg4_year1'] = $row->apr_price;
					$data['ctg_reg5_year1'] = $row->may_price;
					$data['ctg_reg6_year1'] = $row->jun_price;
					$data['ctg_reg7_year1'] = $row->jul_price;
					$data['ctg_reg8_year1'] = $row->aug_price;
					$data['ctg_reg9_year1'] = $row->sep_price;
					$data['ctg_reg10_year1'] = $row->oct_price;
					$data['ctg_reg11_year1'] = $row->nov_price;
					$data['ctg_reg12_year1'] = $row->dec_price;
					$data['ctg_reg_avg_year1'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_reg_min_year1'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_reg_max_year1'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "JUMBO"){
				$data['ctg_jbo1'] = $orc_jan;
				$data['ctg_jbo2'] = $orc_feb;
				$data['ctg_jbo3'] = $orc_mar;
				$data['ctg_jbo4'] = $orc_apr;
				$data['ctg_jbo5'] = $orc_may;
				$data['ctg_jbo6'] = $orc_jun;
				$data['ctg_jbo7'] = $orc_jul;
				$data['ctg_jbo8'] = $orc_aug;
				$data['ctg_jbo9'] = $orc_sep;
				$data['ctg_jbo10'] = $orc_oct;
				$data['ctg_jbo11'] = $orc_nov;
				$data['ctg_jbo12'] = $orc_dec;
				$data['ctg_jbo_avg'] = $orc_avg;
				$data['ctg_jbo_min'] = $orc_min;
				$data['ctg_jbo_max'] = $orc_max;

				$jbo_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - JUMBO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($jbo_prev_year2 as $row){
					$data['ctg_jbo1_year2'] = $row->jan_price;
					$data['ctg_jbo2_year2'] = $row->feb_price;
					$data['ctg_jbo3_year2'] = $row->mar_price;
					$data['ctg_jbo4_year2'] = $row->apr_price;
					$data['ctg_jbo5_year2'] = $row->may_price;
					$data['ctg_jbo6_year2'] = $row->jun_price;
					$data['ctg_jbo7_year2'] = $row->jul_price;
					$data['ctg_jbo8_year2'] = $row->aug_price;
					$data['ctg_jbo9_year2'] = $row->sep_price;
					$data['ctg_jbo10_year2'] = $row->oct_price;
					$data['ctg_jbo11_year2'] = $row->nov_price;
					$data['ctg_jbo12_year2'] = $row->dec_price;
					$data['ctg_jbo_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_jbo_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_jbo_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

				$jbo_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - JUMBO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($jbo_prev_year1 as $row){
					$data['ctg_jbo1_year1'] = $row->jan_price;
					$data['ctg_jbo2_year1'] = $row->feb_price;
					$data['ctg_jbo3_year1'] = $row->mar_price;
					$data['ctg_jbo4_year1'] = $row->apr_price;
					$data['ctg_jbo5_year1'] = $row->may_price;
					$data['ctg_jbo6_year1'] = $row->jun_price;
					$data['ctg_jbo7_year1'] = $row->jul_price;
					$data['ctg_jbo8_year1'] = $row->aug_price;
					$data['ctg_jbo9_year1'] = $row->sep_price;
					$data['ctg_jbo10_year1'] = $row->oct_price;
					$data['ctg_jbo11_year1'] = $row->nov_price;
					$data['ctg_jbo12_year1'] = $row->dec_price;
					$data['ctg_jbo_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_jbo_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_jbo_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "SUPERSIZE"){
				$data['ctg_ss1'] = $orc_jan;
				$data['ctg_ss2'] = $orc_feb;
				$data['ctg_ss3'] = $orc_mar;
				$data['ctg_ss4'] = $orc_apr;
				$data['ctg_ss5'] = $orc_may;
				$data['ctg_ss6'] = $orc_jun;
				$data['ctg_ss7'] = $orc_jul;
				$data['ctg_ss8'] = $orc_aug;
				$data['ctg_ss9'] = $orc_sep;
				$data['ctg_ss10'] = $orc_oct;
				$data['ctg_ss11'] = $orc_nov;
				$data['ctg_ss12'] = $orc_dec;
				$data['ctg_ss_avg'] = $orc_avg;
				$data['ctg_ss_min'] = $orc_min;
				$data['ctg_ss_max'] = $orc_max;

				$ss_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - SUPERSIZE', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($ss_prev_year2 as $row){
					$data['ctg_ss1_year2'] = $row->jan_price;
					$data['ctg_ss2_year2'] = $row->feb_price;
					$data['ctg_ss3_year2'] = $row->mar_price;
					$data['ctg_ss4_year2'] = $row->apr_price;
					$data['ctg_ss5_year2'] = $row->may_price;
					$data['ctg_ss6_year2'] = $row->jun_price;
					$data['ctg_ss7_year2'] = $row->jul_price;
					$data['ctg_ss8_year2'] = $row->aug_price;
					$data['ctg_ss9_year2'] = $row->sep_price;
					$data['ctg_ss10_year2'] = $row->oct_price;
					$data['ctg_ss11_year2'] = $row->nov_price;
					$data['ctg_ss12_year2'] = $row->dec_price;
					$data['ctg_ss_avg_year2'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_ss_min_year2'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_ss_max_year2'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

				$ss_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - SUPERSIZE', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($ss_prev_year1 as $row){
					$data['ctg_ss1_year1'] = $row->jan_price;
					$data['ctg_ss2_year1'] = $row->feb_price;
					$data['ctg_ss3_year1'] = $row->mar_price;
					$data['ctg_ss4_year1'] = $row->apr_price;
					$data['ctg_ss5_year1'] = $row->may_price;
					$data['ctg_ss6_year1'] = $row->jun_price;
					$data['ctg_ss7_year1'] = $row->jul_price;
					$data['ctg_ss8_year1'] = $row->aug_price;
					$data['ctg_ss9_year1'] = $row->sep_price;
					$data['ctg_ss10_year1'] = $row->oct_price;
					$data['ctg_ss11_year1'] = $row->nov_price;
					$data['ctg_ss12_year1'] = $row->dec_price;
					$data['ctg_ss_avg_year1'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_ss_min_year1'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_ss_max_year1'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "BIGTIME"){
				$data['ctg_bt1'] = $orc_jan;
				$data['ctg_bt2'] = $orc_feb;
				$data['ctg_bt3'] = $orc_mar;
				$data['ctg_bt4'] = $orc_apr;
				$data['ctg_bt5'] = $orc_may;
				$data['ctg_bt6'] = $orc_jun;
				$data['ctg_bt7'] = $orc_jul;
				$data['ctg_bt8'] = $orc_aug;
				$data['ctg_bt9'] = $orc_sep;
				$data['ctg_bt10'] = $orc_oct;
				$data['ctg_bt11'] = $orc_nov;
				$data['ctg_bt12'] = $orc_dec;
				$data['ctg_bt_avg'] = $orc_avg;
				$data['cctg_bt_min'] = $orc_min;
				$data['ctg_bt_max'] = $orc_max;


				$bt_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - BIGTIME', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2),
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($bt_prev_year2 as $row){
					$data['ctg_bt1_year2'] = $row->jan_price;
					$data['ctg_bt2_year2'] = $row->feb_price;
					$data['ctg_bt3_year2'] = $row->mar_price;
					$data['ctg_bt4_year2'] = $row->apr_price;
					$data['ctg_bt5_year2'] = $row->may_price;
					$data['ctg_bt6_year2'] = $row->jun_price;
					$data['ctg_bt7_year2'] = $row->jul_price;
					$data['ctg_bt8_year2'] = $row->aug_price;
					$data['ctg_bt9_year2'] = $row->sep_price;
					$data['ctg_bt10_year2'] = $row->oct_price;
					$data['ctg_bt11_year2'] = $row->nov_price;
					$data['ctg_bt12_year2'] = $row->dec_price;
					$data['ctg_bt_avg_year2'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_bt_min_year2'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_bt_max_year2'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

				$bt_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - BIGTIME', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($bt_prev_year1 as $row){
					$data['ctg_bt1_year1'] = $row->jan_price;
					$data['ctg_bt2_year1'] = $row->feb_price;
					$data['ctg_bt3_year1'] = $row->mar_price;
					$data['ctg_bt4_year1'] = $row->apr_price;
					$data['ctg_bt5_year1'] = $row->may_price;
					$data['ctg_bt6_year1'] = $row->jun_price;
					$data['ctg_bt7_year1'] = $row->jul_price;
					$data['ctg_bt8_year1'] = $row->aug_price;
					$data['ctg_bt9_year1'] = $row->sep_price;
					$data['ctg_bt10_year1'] = $row->oct_price;
					$data['ctg_bt11_year1'] = $row->nov_price;
					$data['ctg_bt12_year1'] = $row->dec_price;
					$data['ctg_bt_avg_year1'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_bt_min_year1'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_bt_max_year1'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "HALF"){
				$data['ctg_half1'] = $orc_jan;
				$data['ctg_half2'] = $orc_feb;
				$data['ctg_half3'] = $orc_mar;
				$data['ctg_half4'] = $orc_apr;
				$data['ctg_half5'] = $orc_may;
				$data['ctg_half6'] = $orc_jun;
				$data['ctg_half7'] = $orc_jul;
				$data['ctg_half8'] = $orc_aug;
				$data['ctg_half9'] = $orc_sep;
				$data['ctg_half10'] = $orc_oct;
				$data['ctg_half11'] = $orc_nov;
				$data['ctg_half12'] = $orc_dec;
				$data['ctg_half_avg'] = $orc_avg;
				$data['ctg_half_min'] = $orc_min;
				$data['ctg_half_max'] = $orc_max;

				$half_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - HALF', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2),
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($half_prev_year2 as $row){
					$data['ctg_half1_year2'] = $row->jan_price;
					$data['ctg_half2_year2'] = $row->feb_price;
					$data['ctg_half3_year2'] = $row->mar_price;
					$data['ctg_half4_year2'] = $row->apr_price;
					$data['ctg_half5_year2'] = $row->may_price;
					$data['ctg_half6_year2'] = $row->jun_price;
					$data['ctg_half7_year2'] = $row->jul_price;
					$data['ctg_half8_year2'] = $row->aug_price;
					$data['ctg_half9_year2'] = $row->sep_price;
					$data['ctg_half10_year2'] = $row->oct_price;
					$data['ctg_half11_year2'] = $row->nov_price;
					$data['ctg_half12_year2'] = $row->dec_price;
					$data['ctg_half_avg_year2'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_half_min_year2'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_half_max_year2'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

				$half_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - HALF', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($half_prev_year1 as $row){
					$data['ctg_half1_year1'] = $row->jan_price;
					$data['ctg_half2_year1'] = $row->feb_price;
					$data['ctg_half3_year1'] = $row->mar_price;
					$data['ctg_half4_year1'] = $row->apr_price;
					$data['ctg_half5_year1'] = $row->may_price;
					$data['ctg_half6_year1'] = $row->jun_price;
					$data['ctg_half7_year1'] = $row->jul_price;
					$data['ctg_half8_year1'] = $row->aug_price;
					$data['ctg_half9_year1'] = $row->sep_price;
					$data['ctg_half10_year1'] = $row->oct_price;
					$data['ctg_half11_year1'] = $row->nov_price;
					$data['ctg_half12_year1'] = $row->dec_price;
					$data['ctg_half_avg_year1'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_half_min_year1'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_half_max_year1'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}
			}
		}

		/*CTG Liempo*/
		$join_liempo = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code IN (10600002, 10600026, 10600003, 10600027)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "LIEMPO"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_liempo = $this->admin->get_join('sales_tbl a', $join_liempo, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['liempo1'] = 0;
		$data['liempo2'] = 0;
		$data['liempo3'] = 0;
		$data['liempo4'] = 0;
		$data['liempo5'] = 0;
		$data['liempo6'] = 0;
		$data['liempo7'] = 0;
		$data['liempo8'] = 0;
		$data['liempo9'] = 0;
		$data['liempo10'] = 0;
		$data['liempo11'] = 0;
		$data['liempo12'] = 0;
		$data['liempo_total'] = 0;
		$data['liempo_count'] = 0;
		$data['liempo_avg'] = 0;
		$data['liempo_min'] = 0;
		$data['liempo_max'] = 0;

		foreach($get_liempo as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['liempo' . $month] = $asp;
			$data['liempo_total'] += $asp;

			if($asp < $data['liempo_min'] || $data['liempo_count'] == 0){
				$data['liempo_min'] = $asp;
			}

			if($asp > $data['liempo_max'] || $data['liempo_count'] == 0){
				$data['liempo_max'] = $asp;
			}

			$data['liempo_count']++;
		}

		$data['liempo_avg'] = $data['liempo_total'] != 0 ? $data['liempo_total'] / $data['liempo_count'] : 0;

		$ctg_liempo_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_liempo_prev_year2_jan'] = 0;
		$data['ctg_liempo_prev_year2_feb'] = 0;
		$data['ctg_liempo_prev_year2_mar'] = 0;
		$data['ctg_liempo_prev_year2_apr'] = 0;
		$data['ctg_liempo_prev_year2_may'] = 0;
		$data['ctg_liempo_prev_year2_jun'] = 0;
		$data['ctg_liempo_prev_year2_jul'] = 0;
		$data['ctg_liempo_prev_year2_aug'] = 0;
		$data['ctg_liempo_prev_year2_sep'] = 0;
		$data['ctg_liempo_prev_year2_oct'] = 0;
		$data['ctg_liempo_prev_year2_nov'] = 0;
		$data['ctg_liempo_prev_year2_dec'] = 0;
		$data['ctg_liempo_prev_year2_avg'] = 0;
		$data['ctg_liempo_prev_year2_min'] = 0;
		$data['ctg_liempo_prev_year2_max'] = 0;

		foreach($ctg_liempo_prev_year2 as $row){
			$data['ctg_liempo_prev_year2_jan'] = $row->jan_price;
			$data['ctg_liempo_prev_year2_feb'] = $row->feb_price;
			$data['ctg_liempo_prev_year2_mar'] = $row->mar_price;
			$data['ctg_liempo_prev_year2_apr'] = $row->apr_price;
			$data['ctg_liempo_prev_year2_may'] = $row->may_price;
			$data['ctg_liempo_prev_year2_jun'] = $row->jun_price;
			$data['ctg_liempo_prev_year2_jul'] = $row->jul_price;
			$data['ctg_liempo_prev_year2_aug'] = $row->aug_price;
			$data['ctg_liempo_prev_year2_sep'] = $row->sep_price;
			$data['ctg_liempo_prev_year2_oct'] = $row->oct_price;
			$data['ctg_liempo_prev_year2_nov'] = $row->nov_price;
			$data['ctg_liempo_prev_year2_dec'] = $row->dec_price;
			$data['ctg_liempo_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_liempo_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_liempo_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_liempo_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_liempo_prev_year1_jan'] = 0;
		$data['ctg_liempo_prev_year1_feb'] = 0;
		$data['ctg_liempo_prev_year1_mar'] = 0;
		$data['ctg_liempo_prev_year1_apr'] = 0;
		$data['ctg_liempo_prev_year1_may'] = 0;
		$data['ctg_liempo_prev_year1_jun'] = 0;
		$data['ctg_liempo_prev_year1_jul'] = 0;
		$data['ctg_liempo_prev_year1_aug'] = 0;
		$data['ctg_liempo_prev_year1_sep'] = 0;
		$data['ctg_liempo_prev_year1_oct'] = 0;
		$data['ctg_liempo_prev_year1_nov'] = 0;
		$data['ctg_liempo_prev_year1_dec'] = 0;
		$data['ctg_liempo_prev_year1_avg'] = 0;
		$data['ctg_liempo_prev_year1_min'] = 0;
		$data['ctg_liempo_prev_year1_max'] = 0;

		foreach($ctg_liempo_prev_year1 as $row){
			$data['ctg_liempo_prev_year1_jan'] = $row->jan_price;
			$data['ctg_liempo_prev_year1_feb'] = $row->feb_price;
			$data['ctg_liempo_prev_year1_mar'] = $row->mar_price;
			$data['ctg_liempo_prev_year1_apr'] = $row->apr_price;
			$data['ctg_liempo_prev_year1_may'] = $row->may_price;
			$data['ctg_liempo_prev_year1_jun'] = $row->jun_price;
			$data['ctg_liempo_prev_year1_jul'] = $row->jul_price;
			$data['ctg_liempo_prev_year1_aug'] = $row->aug_price;
			$data['ctg_liempo_prev_year1_sep'] = $row->sep_price;
			$data['ctg_liempo_prev_year1_oct'] = $row->oct_price;
			$data['ctg_liempo_prev_year1_nov'] = $row->nov_price;
			$data['ctg_liempo_prev_year1_dec'] = $row->dec_price;
			$data['ctg_liempo_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_liempo_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_liempo_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*CTG Dressed Chicken*/
		$join_ctg_dressed = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_dressed = $this->admin->get_join('sales_tbl a', $join_ctg_dressed, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_dressed1'] = 0;
		$data['ctg_dressed2'] = 0;
		$data['ctg_dressed3'] = 0;
		$data['ctg_dressed4'] = 0;
		$data['ctg_dressed5'] = 0;
		$data['ctg_dressed6'] = 0;
		$data['ctg_dressed7'] = 0;
		$data['ctg_dressed8'] = 0;
		$data['ctg_dressed9'] = 0;
		$data['ctg_dressed10'] = 0;
		$data['ctg_dressed11'] = 0;
		$data['ctg_dressed12'] = 0;
		$data['ctg_dressed_total'] = 0;
		$data['ctg_dressed_count'] = 0;
		$data['ctg_dressed_avg'] = 0;
		$data['ctg_dressed_min'] = 0;
		$data['ctg_dressed_max'] = 0;

		foreach($get_ctg_dressed as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_dressed' . $month] = $asp;
			$data['ctg_dressed_total'] += $asp;

			if($asp < $data['ctg_dressed_min'] || $data['ctg_dressed_count'] == 0){
				$data['ctg_dressed_min'] = $asp;
			}

			if($asp > $data['ctg_dressed_max'] || $data['ctg_dressed_count'] == 0){
				$data['ctg_dressed_max'] = $asp;
			}

			$data['ctg_dressed_count']++;
		}

		$data['ctg_dressed_avg'] = $data['ctg_dressed_total'] != 0 ? $data['ctg_dressed_total'] / $data['ctg_dressed_count'] : 0;

		$ctg_dressed_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_dressed_prev_year2_jan'] = 0;
		$data['ctg_dressed_prev_year2_feb'] = 0;
		$data['ctg_dressed_prev_year2_mar'] = 0;
		$data['ctg_dressed_prev_year2_apr'] = 0;
		$data['ctg_dressed_prev_year2_may'] = 0;
		$data['ctg_dressed_prev_year2_jun'] = 0;
		$data['ctg_dressed_prev_year2_jul'] = 0;
		$data['ctg_dressed_prev_year2_aug'] = 0;
		$data['ctg_dressed_prev_year2_sep'] = 0;
		$data['ctg_dressed_prev_year2_oct'] = 0;
		$data['ctg_dressed_prev_year2_nov'] = 0;
		$data['ctg_dressed_prev_year2_dec'] = 0;
		$data['ctg_dressed_prev_year2_avg'] = 0;
		$data['ctg_dressed_prev_year2_min'] = 0;
		$data['ctg_dressed_prev_year2_max'] = 0;

		foreach($ctg_dressed_prev_year2 as $row){
			$data['ctg_dressed_prev_year2_jan'] = $row->jan_price;
			$data['ctg_dressed_prev_year2_feb'] = $row->feb_price;
			$data['ctg_dressed_prev_year2_mar'] = $row->mar_price;
			$data['ctg_dressed_prev_year2_apr'] = $row->apr_price;
			$data['ctg_dressed_prev_year2_may'] = $row->may_price;
			$data['ctg_dressed_prev_year2_jun'] = $row->jun_price;
			$data['ctg_dressed_prev_year2_jul'] = $row->jul_price;
			$data['ctg_dressed_prev_year2_aug'] = $row->aug_price;
			$data['ctg_dressed_prev_year2_sep'] = $row->sep_price;
			$data['ctg_dressed_prev_year2_oct'] = $row->oct_price;
			$data['ctg_dressed_prev_year2_nov'] = $row->nov_price;
			$data['ctg_dressed_prev_year2_dec'] = $row->dec_price;
			$data['ctg_dressed_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_dressed_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_dressed_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_dressed_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_dressed_prev_year1_jan'] = 0;
		$data['ctg_dressed_prev_year1_feb'] = 0;
		$data['ctg_dressed_prev_year1_mar'] = 0;
		$data['ctg_dressed_prev_year1_apr'] = 0;
		$data['ctg_dressed_prev_year1_may'] = 0;
		$data['ctg_dressed_prev_year1_jun'] = 0;
		$data['ctg_dressed_prev_year1_jul'] = 0;
		$data['ctg_dressed_prev_year1_aug'] = 0;
		$data['ctg_dressed_prev_year1_sep'] = 0;
		$data['ctg_dressed_prev_year1_oct'] = 0;
		$data['ctg_dressed_prev_year1_nov'] = 0;
		$data['ctg_dressed_prev_year1_dec'] = 0;
		$data['ctg_dressed_prev_year1_avg'] = 0;
		$data['ctg_dressed_prev_year1_min'] = 0;
		$data['ctg_dressed_prev_year1_max'] = 0;

		foreach($ctg_dressed_prev_year1 as $row){
			$data['ctg_dressed_prev_year1_jan'] = $row->jan_price;
			$data['ctg_dressed_prev_year1_feb'] = $row->feb_price;
			$data['ctg_dressed_prev_year1_mar'] = $row->mar_price;
			$data['ctg_dressed_prev_year1_apr'] = $row->apr_price;
			$data['ctg_dressed_prev_year1_may'] = $row->may_price;
			$data['ctg_dressed_prev_year1_jun'] = $row->jun_price;
			$data['ctg_dressed_prev_year1_jul'] = $row->jul_price;
			$data['ctg_dressed_prev_year1_aug'] = $row->aug_price;
			$data['ctg_dressed_prev_year1_sep'] = $row->sep_price;
			$data['ctg_dressed_prev_year1_oct'] = $row->oct_price;
			$data['ctg_dressed_prev_year1_nov'] = $row->nov_price;
			$data['ctg_dressed_prev_year1_dec'] = $row->dec_price;
			$data['ctg_dressed_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_dressed_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_dressed_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*CTG Chooksies*/
		$join_ctg_chooksies = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 10200095 OR d.material_code = 10200096 OR d.material_code = 10200097)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_chooksies = $this->admin->get_join('sales_tbl a', $join_ctg_chooksies, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_chooksies1'] = 0;
		$data['ctg_chooksies2'] = 0;
		$data['ctg_chooksies3'] = 0;
		$data['ctg_chooksies4'] = 0;
		$data['ctg_chooksies5'] = 0;
		$data['ctg_chooksies6'] = 0;
		$data['ctg_chooksies7'] = 0;
		$data['ctg_chooksies8'] = 0;
		$data['ctg_chooksies9'] = 0;
		$data['ctg_chooksies10'] = 0;
		$data['ctg_chooksies11'] = 0;
		$data['ctg_chooksies12'] = 0;
		$data['ctg_chooksies_total'] = 0;
		$data['ctg_chooksies_count'] = 0;
		$data['ctg_chooksies_avg'] = 0;
		$data['ctg_chooksies_min'] = 0;
		$data['ctg_chooksies_max'] = 0;

		foreach($get_ctg_chooksies as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_chooksies' . $month] = $asp;
			$data['ctg_chooksies_total'] += $asp;

			if($asp < $data['ctg_chooksies_min'] || $data['ctg_chooksies_count'] == 0){
				$data['ctg_chooksies_min'] = $asp;
			}

			if($asp > $data['ctg_chooksies_max'] || $data['ctg_chooksies_count'] == 0){
				$data['ctg_chooksies_max'] = $asp;
			}

			$data['ctg_chooksies_count']++;
		}

		$data['ctg_chooksies_avg'] = $data['ctg_chooksies_total'] != 0 ? $data['ctg_chooksies_total'] / $data['ctg_chooksies_count'] : 0;


		$ctg_chooksies_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_chooksies_prev_year2_jan'] = 0;
		$data['ctg_chooksies_prev_year2_feb'] = 0;
		$data['ctg_chooksies_prev_year2_mar'] = 0;
		$data['ctg_chooksies_prev_year2_apr'] = 0;
		$data['ctg_chooksies_prev_year2_may'] = 0;
		$data['ctg_chooksies_prev_year2_jun'] = 0;
		$data['ctg_chooksies_prev_year2_jul'] = 0;
		$data['ctg_chooksies_prev_year2_aug'] = 0;
		$data['ctg_chooksies_prev_year2_sep'] = 0;
		$data['ctg_chooksies_prev_year2_oct'] = 0;
		$data['ctg_chooksies_prev_year2_nov'] = 0;
		$data['ctg_chooksies_prev_year2_dec'] = 0;
		$data['ctg_chooksies_prev_year2_avg'] = 0;
		$data['ctg_chooksies_prev_year2_min'] = 0;
		$data['ctg_chooksies_prev_year2_max'] = 0;

		foreach($ctg_chooksies_prev_year2 as $row){
			$data['ctg_chooksies_prev_year2_jan'] = $row->jan_price;
			$data['ctg_chooksies_prev_year2_feb'] = $row->feb_price;
			$data['ctg_chooksies_prev_year2_mar'] = $row->mar_price;
			$data['ctg_chooksies_prev_year2_apr'] = $row->apr_price;
			$data['ctg_chooksies_prev_year2_may'] = $row->may_price;
			$data['ctg_chooksies_prev_year2_jun'] = $row->jun_price;
			$data['ctg_chooksies_prev_year2_jul'] = $row->jul_price;
			$data['ctg_chooksies_prev_year2_aug'] = $row->aug_price;
			$data['ctg_chooksies_prev_year2_sep'] = $row->sep_price;
			$data['ctg_chooksies_prev_year2_oct'] = $row->oct_price;
			$data['ctg_chooksies_prev_year2_nov'] = $row->nov_price;
			$data['ctg_chooksies_prev_year2_dec'] = $row->dec_price;
			$data['ctg_chooksies_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_chooksies_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_chooksies_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_chooksies_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_chooksies_prev_year1_jan'] = 0;
		$data['ctg_chooksies_prev_year1_feb'] = 0;
		$data['ctg_chooksies_prev_year1_mar'] = 0;
		$data['ctg_chooksies_prev_year1_apr'] = 0;
		$data['ctg_chooksies_prev_year1_may'] = 0;
		$data['ctg_chooksies_prev_year1_jun'] = 0;
		$data['ctg_chooksies_prev_year1_jul'] = 0;
		$data['ctg_chooksies_prev_year1_aug'] = 0;
		$data['ctg_chooksies_prev_year1_sep'] = 0;
		$data['ctg_chooksies_prev_year1_oct'] = 0;
		$data['ctg_chooksies_prev_year1_nov'] = 0;
		$data['ctg_chooksies_prev_year1_dec'] = 0;
		$data['ctg_chooksies_prev_year1_avg'] = 0;
		$data['ctg_chooksies_prev_year1_min'] = 0;
		$data['ctg_chooksies_prev_year1_max'] = 0;

		foreach($ctg_chooksies_prev_year1 as $row){
			$data['ctg_chooksies_prev_year1_jan'] = $row->jan_price;
			$data['ctg_chooksies_prev_year1_feb'] = $row->feb_price;
			$data['ctg_chooksies_prev_year1_mar'] = $row->mar_price;
			$data['ctg_chooksies_prev_year1_apr'] = $row->apr_price;
			$data['ctg_chooksies_prev_year1_may'] = $row->may_price;
			$data['ctg_chooksies_prev_year1_jun'] = $row->jun_price;
			$data['ctg_chooksies_prev_year1_jul'] = $row->jul_price;
			$data['ctg_chooksies_prev_year1_aug'] = $row->aug_price;
			$data['ctg_chooksies_prev_year1_sep'] = $row->sep_price;
			$data['ctg_chooksies_prev_year1_oct'] = $row->oct_price;
			$data['ctg_chooksies_prev_year1_nov'] = $row->nov_price;
			$data['ctg_chooksies_prev_year1_dec'] = $row->dec_price;
			$data['ctg_chooksies_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_chooksies_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_chooksies_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$join_ctg_marinado = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000638',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_marinado = $this->admin->get_join('sales_tbl a', $join_ctg_marinado, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_marinado1'] = 0;
		$data['ctg_marinado2'] = 0;
		$data['ctg_marinado3'] = 0;
		$data['ctg_marinado4'] = 0;
		$data['ctg_marinado5'] = 0;
		$data['ctg_marinado6'] = 0;
		$data['ctg_marinado7'] = 0;
		$data['ctg_marinado8'] = 0;
		$data['ctg_marinado9'] = 0;
		$data['ctg_marinado10'] = 0;
		$data['ctg_marinado11'] = 0;
		$data['ctg_marinado12'] = 0;
		$data['ctg_marinado_total'] = 0;
		$data['ctg_marinado_count'] = 0;
		$data['ctg_marinado_avg'] = 0;
		$data['ctg_marinado_min'] = 0;
		$data['ctg_marinado_max'] = 0;

		foreach($get_ctg_marinado as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_marinado' . $month] = $asp;
			$data['ctg_marinado_total'] += $asp;

			if($asp < $data['ctg_marinado_min'] || $data['ctg_marinado_count'] == 0){
				$data['ctg_marinado_min'] = $asp;
			}

			if($asp > $data['ctg_marinado_max'] || $data['ctg_marinado_count'] == 0){
				$data['ctg_marinado_max'] = $asp;
			}

			$data['ctg_marinado_count']++;
		}

		$data['ctg_marinado_avg'] = $data['ctg_marinado_total'] != 0 ? $data['ctg_marinado_total'] / $data['ctg_marinado_count'] : 0;

		$ctg_marinado_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_marinado_prev_year2_jan'] = 0;
		$data['ctg_marinado_prev_year2_feb'] = 0;
		$data['ctg_marinado_prev_year2_mar'] = 0;
		$data['ctg_marinado_prev_year2_apr'] = 0;
		$data['ctg_marinado_prev_year2_may'] = 0;
		$data['ctg_marinado_prev_year2_jun'] = 0;
		$data['ctg_marinado_prev_year2_jul'] = 0;
		$data['ctg_marinado_prev_year2_aug'] = 0;
		$data['ctg_marinado_prev_year2_sep'] = 0;
		$data['ctg_marinado_prev_year2_oct'] = 0;
		$data['ctg_marinado_prev_year2_nov'] = 0;
		$data['ctg_marinado_prev_year2_dec'] = 0;
		$data['ctg_marinado_prev_year2_avg'] = 0;
		$data['ctg_marinado_prev_year2_min'] = 0;
		$data['ctg_marinado_prev_year2_max'] = 0;

		foreach($ctg_marinado_prev_year2 as $row){
			$data['ctg_marinado_prev_year2_jan'] = $row->jan_price;
			$data['ctg_marinado_prev_year2_feb'] = $row->feb_price;
			$data['ctg_marinado_prev_year2_mar'] = $row->mar_price;
			$data['ctg_marinado_prev_year2_apr'] = $row->apr_price;
			$data['ctg_marinado_prev_year2_may'] = $row->may_price;
			$data['ctg_marinado_prev_year2_jun'] = $row->jun_price;
			$data['ctg_marinado_prev_year2_jul'] = $row->jul_price;
			$data['ctg_marinado_prev_year2_aug'] = $row->aug_price;
			$data['ctg_marinado_prev_year2_sep'] = $row->sep_price;
			$data['ctg_marinado_prev_year2_oct'] = $row->oct_price;
			$data['ctg_marinado_prev_year2_nov'] = $row->nov_price;
			$data['ctg_marinado_prev_year2_dec'] = $row->dec_price;
			$data['ctg_marinado_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_marinado_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_marinado_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_marinado_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_marinado_prev_year1_jan'] = 0;
		$data['ctg_marinado_prev_year1_feb'] = 0;
		$data['ctg_marinado_prev_year1_mar'] = 0;
		$data['ctg_marinado_prev_year1_apr'] = 0;
		$data['ctg_marinado_prev_year1_may'] = 0;
		$data['ctg_marinado_prev_year1_jun'] = 0;
		$data['ctg_marinado_prev_year1_jul'] = 0;
		$data['ctg_marinado_prev_year1_aug'] = 0;
		$data['ctg_marinado_prev_year1_sep'] = 0;
		$data['ctg_marinado_prev_year1_oct'] = 0;
		$data['ctg_marinado_prev_year1_nov'] = 0;
		$data['ctg_marinado_prev_year1_dec'] = 0;
		$data['ctg_marinado_prev_year1_avg'] = 0;
		$data['ctg_marinado_prev_year1_min'] = 0;
		$data['ctg_marinado_prev_year1_max'] = 0;

		foreach($ctg_marinado_prev_year1 as $row){
			$data['ctg_marinado_prev_year1_jan'] = $row->jan_price;
			$data['ctg_marinado_prev_year1_feb'] = $row->feb_price;
			$data['ctg_marinado_prev_year1_mar'] = $row->mar_price;
			$data['ctg_marinado_prev_year1_apr'] = $row->apr_price;
			$data['ctg_marinado_prev_year1_may'] = $row->may_price;
			$data['ctg_marinado_prev_year1_jun'] = $row->jun_price;
			$data['ctg_marinado_prev_year1_jul'] = $row->jul_price;
			$data['ctg_marinado_prev_year1_aug'] = $row->aug_price;
			$data['ctg_marinado_prev_year1_sep'] = $row->sep_price;
			$data['ctg_marinado_prev_year1_oct'] = $row->oct_price;
			$data['ctg_marinado_prev_year1_nov'] = $row->nov_price;
			$data['ctg_marinado_prev_year1_dec'] = $row->dec_price;
			$data['ctg_marinado_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_marinado_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_marinado_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$join_ctg_spicy = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 10200090 OR d.material_code = 1000401 OR d.material_code = 1000402 OR d.material_code = 1000617)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_spicy = $this->admin->get_join('sales_tbl a', $join_ctg_spicy, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_spicy1'] = 0;
		$data['ctg_spicy2'] = 0;
		$data['ctg_spicy3'] = 0;
		$data['ctg_spicy4'] = 0;
		$data['ctg_spicy5'] = 0;
		$data['ctg_spicy6'] = 0;
		$data['ctg_spicy7'] = 0;
		$data['ctg_spicy8'] = 0;
		$data['ctg_spicy9'] = 0;
		$data['ctg_spicy10'] = 0;
		$data['ctg_spicy11'] = 0;
		$data['ctg_spicy12'] = 0;
		$data['ctg_spicy_total'] = 0;
		$data['ctg_spicy_count'] = 0;
		$data['ctg_spicy_avg'] = 0;
		$data['ctg_spicy_min'] = 0;
		$data['ctg_spicy_max'] = 0;

		foreach($get_ctg_spicy as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_spicy' . $month] = $asp;
			$data['ctg_spicy_total'] += $asp;

			if($asp < $data['ctg_spicy_min'] || $data['ctg_spicy_count'] == 0){
				$data['ctg_spicy_min'] = $asp;
			}

			if($asp > $data['ctg_spicy_max'] || $data['ctg_spicy_count'] == 0){
				$data['ctg_spicy_max'] = $asp;
			}

			$data['ctg_spicy_count']++;
		}

		$data['ctg_spicy_avg'] = $data['ctg_spicy_total'] != 0 ? $data['ctg_spicy_total'] / $data['ctg_spicy_count'] : 0;

		$ctg_spicy_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_spicy_prev_year2_jan'] = 0;
		$data['ctg_spicy_prev_year2_feb'] = 0;
		$data['ctg_spicy_prev_year2_mar'] = 0;
		$data['ctg_spicy_prev_year2_apr'] = 0;
		$data['ctg_spicy_prev_year2_may'] = 0;
		$data['ctg_spicy_prev_year2_jun'] = 0;
		$data['ctg_spicy_prev_year2_jul'] = 0;
		$data['ctg_spicy_prev_year2_aug'] = 0;
		$data['ctg_spicy_prev_year2_sep'] = 0;
		$data['ctg_spicy_prev_year2_oct'] = 0;
		$data['ctg_spicy_prev_year2_nov'] = 0;
		$data['ctg_spicy_prev_year2_dec'] = 0;
		$data['ctg_spicy_prev_year2_avg'] = 0;
		$data['ctg_spicy_prev_year2_min'] = 0;
		$data['ctg_spicy_prev_year2_max'] = 0;

		foreach($ctg_spicy_prev_year2 as $row){
			$data['ctg_spicy_prev_year2_jan'] = $row->jan_price;
			$data['ctg_spicy_prev_year2_feb'] = $row->feb_price;
			$data['ctg_spicy_prev_year2_mar'] = $row->mar_price;
			$data['ctg_spicy_prev_year2_apr'] = $row->apr_price;
			$data['ctg_spicy_prev_year2_may'] = $row->may_price;
			$data['ctg_spicy_prev_year2_jun'] = $row->jun_price;
			$data['ctg_spicy_prev_year2_jul'] = $row->jul_price;
			$data['ctg_spicy_prev_year2_aug'] = $row->aug_price;
			$data['ctg_spicy_prev_year2_sep'] = $row->sep_price;
			$data['ctg_spicy_prev_year2_oct'] = $row->oct_price;
			$data['ctg_spicy_prev_year2_nov'] = $row->nov_price;
			$data['ctg_spicy_prev_year2_dec'] = $row->dec_price;
			$data['ctg_spicy_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_spicy_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_spicy_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_spicy_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_spicy_prev_year1_jan'] = 0;
		$data['ctg_spicy_prev_year1_feb'] = 0;
		$data['ctg_spicy_prev_year1_mar'] = 0;
		$data['ctg_spicy_prev_year1_apr'] = 0;
		$data['ctg_spicy_prev_year1_may'] = 0;
		$data['ctg_spicy_prev_year1_jun'] = 0;
		$data['ctg_spicy_prev_year1_jul'] = 0;
		$data['ctg_spicy_prev_year1_aug'] = 0;
		$data['ctg_spicy_prev_year1_sep'] = 0;
		$data['ctg_spicy_prev_year1_oct'] = 0;
		$data['ctg_spicy_prev_year1_nov'] = 0;
		$data['ctg_spicy_prev_year1_dec'] = 0;
		$data['ctg_spicy_prev_year1_avg'] = 0;
		$data['ctg_spicy_prev_year1_min'] = 0;
		$data['ctg_spicy_prev_year1_max'] = 0;

		foreach($ctg_spicy_prev_year1 as $row){
			$data['ctg_spicy_prev_year1_jan'] = $row->jan_price;
			$data['ctg_spicy_prev_year1_feb'] = $row->feb_price;
			$data['ctg_spicy_prev_year1_mar'] = $row->mar_price;
			$data['ctg_spicy_prev_year1_apr'] = $row->apr_price;
			$data['ctg_spicy_prev_year1_may'] = $row->may_price;
			$data['ctg_spicy_prev_year1_jun'] = $row->jun_price;
			$data['ctg_spicy_prev_year1_jul'] = $row->jul_price;
			$data['ctg_spicy_prev_year1_aug'] = $row->aug_price;
			$data['ctg_spicy_prev_year1_sep'] = $row->sep_price;
			$data['ctg_spicy_prev_year1_oct'] = $row->oct_price;
			$data['ctg_spicy_prev_year1_nov'] = $row->nov_price;
			$data['ctg_spicy_prev_year1_dec'] = $row->dec_price;
			$data['ctg_spicy_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_spicy_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_spicy_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*Barbeque*/
		$join_ctg_barbeque = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000548',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER SPECIALTY PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_barbeque = $this->admin->get_join('sales_tbl a', $join_ctg_barbeque, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_barbeque1'] = 0;
		$data['ctg_barbeque2'] = 0;
		$data['ctg_barbeque3'] = 0;
		$data['ctg_barbeque4'] = 0;
		$data['ctg_barbeque5'] = 0;
		$data['ctg_barbeque6'] = 0;
		$data['ctg_barbeque7'] = 0;
		$data['ctg_barbeque8'] = 0;
		$data['ctg_barbeque9'] = 0;
		$data['ctg_barbeque10'] = 0;
		$data['ctg_barbeque11'] = 0;
		$data['ctg_barbeque12'] = 0;
		$data['ctg_barbeque_total'] = 0;
		$data['ctg_barbeque_count'] = 0;
		$data['ctg_barbeque_avg'] = 0;
		$data['ctg_barbeque_min'] = 0;
		$data['ctg_barbeque_max'] = 0;

		foreach($get_ctg_barbeque as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_barbeque' . $month] = $asp;
			$data['ctg_barbeque_total'] += $asp;

			if($asp < $data['ctg_barbeque_min'] || $data['ctg_barbeque_count'] == 0){
				$data['ctg_barbeque_min'] = $asp;
			}

			if($asp > $data['ctg_barbeque_max'] || $data['ctg_barbeque_count'] == 0){
				$data['ctg_barbeque_max'] = $asp;
			}

			$data['ctg_barbeque_count']++;
		}

		$data['ctg_barbeque_avg'] = $data['ctg_barbeque_total'] != 0 ? $data['ctg_barbeque_total'] / $data['ctg_barbeque_count'] : 0;

		$ctg_barbecue_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BBQ', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_barbecue_prev_year2_jan'] = 0;
		$data['ctg_barbecue_prev_year2_feb'] = 0;
		$data['ctg_barbecue_prev_year2_mar'] = 0;
		$data['ctg_barbecue_prev_year2_apr'] = 0;
		$data['ctg_barbecue_prev_year2_may'] = 0;
		$data['ctg_barbecue_prev_year2_jun'] = 0;
		$data['ctg_barbecue_prev_year2_jul'] = 0;
		$data['ctg_barbecue_prev_year2_aug'] = 0;
		$data['ctg_barbecue_prev_year2_sep'] = 0;
		$data['ctg_barbecue_prev_year2_oct'] = 0;
		$data['ctg_barbecue_prev_year2_nov'] = 0;
		$data['ctg_barbecue_prev_year2_dec'] = 0;
		$data['ctg_barbecue_prev_year2_avg'] = 0;
		$data['ctg_barbecue_prev_year2_min'] = 0;
		$data['ctg_barbecue_prev_year2_max'] = 0;

		foreach($ctg_barbecue_prev_year2 as $row){
			$data['ctg_barbecue_prev_year2_jan'] = $row->jan_price;
			$data['ctg_barbecue_prev_year2_feb'] = $row->feb_price;
			$data['ctg_barbecue_prev_year2_mar'] = $row->mar_price;
			$data['ctg_barbecue_prev_year2_apr'] = $row->apr_price;
			$data['ctg_barbecue_prev_year2_may'] = $row->may_price;
			$data['ctg_barbecue_prev_year2_jun'] = $row->jun_price;
			$data['ctg_barbecue_prev_year2_jul'] = $row->jul_price;
			$data['ctg_barbecue_prev_year2_aug'] = $row->aug_price;
			$data['ctg_barbecue_prev_year2_sep'] = $row->sep_price;
			$data['ctg_barbecue_prev_year2_oct'] = $row->oct_price;
			$data['ctg_barbecue_prev_year2_nov'] = $row->nov_price;
			$data['ctg_barbecue_prev_year2_dec'] = $row->dec_price;
			$data['ctg_barbecue_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_barbecue_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_barbecue_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_barbecue_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BBQ', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_barbecue_prev_year1_jan'] = 0;
		$data['ctg_barbecue_prev_year1_feb'] = 0;
		$data['ctg_barbecue_prev_year1_mar'] = 0;
		$data['ctg_barbecue_prev_year1_apr'] = 0;
		$data['ctg_barbecue_prev_year1_may'] = 0;
		$data['ctg_barbecue_prev_year1_jun'] = 0;
		$data['ctg_barbecue_prev_year1_jul'] = 0;
		$data['ctg_barbecue_prev_year1_aug'] = 0;
		$data['ctg_barbecue_prev_year1_sep'] = 0;
		$data['ctg_barbecue_prev_year1_oct'] = 0;
		$data['ctg_barbecue_prev_year1_nov'] = 0;
		$data['ctg_barbecue_prev_year1_dec'] = 0;
		$data['ctg_barbecue_prev_year1_avg'] = 0;
		$data['ctg_barbecue_prev_year1_min'] = 0;
		$data['ctg_barbecue_prev_year1_max'] = 0;

		foreach($ctg_barbecue_prev_year1 as $row){
			$data['ctg_barbecue_prev_year1_jan'] = $row->jan_price;
			$data['ctg_barbecue_prev_year1_feb'] = $row->feb_price;
			$data['ctg_barbecue_prev_year1_mar'] = $row->mar_price;
			$data['ctg_barbecue_prev_year1_apr'] = $row->apr_price;
			$data['ctg_barbecue_prev_year1_may'] = $row->may_price;
			$data['ctg_barbecue_prev_year1_jun'] = $row->jun_price;
			$data['ctg_barbecue_prev_year1_jul'] = $row->jul_price;
			$data['ctg_barbecue_prev_year1_aug'] = $row->aug_price;
			$data['ctg_barbecue_prev_year1_sep'] = $row->sep_price;
			$data['ctg_barbecue_prev_year1_oct'] = $row->oct_price;
			$data['ctg_barbecue_prev_year1_nov'] = $row->nov_price;
			$data['ctg_barbecue_prev_year1_dec'] = $row->dec_price;
			$data['ctg_barbecue_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_barbecue_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_barbecue_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*Nuggets*/
		$join_ctg_nuggets = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 40000016 OR d.material_code = 40000019)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER VAP PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_nuggets = $this->admin->get_join('sales_tbl a', $join_ctg_nuggets, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_nuggets1'] = 0;
		$data['ctg_nuggets2'] = 0;
		$data['ctg_nuggets3'] = 0;
		$data['ctg_nuggets4'] = 0;
		$data['ctg_nuggets5'] = 0;
		$data['ctg_nuggets6'] = 0;
		$data['ctg_nuggets7'] = 0;
		$data['ctg_nuggets8'] = 0;
		$data['ctg_nuggets9'] = 0;
		$data['ctg_nuggets10'] = 0;
		$data['ctg_nuggets11'] = 0;
		$data['ctg_nuggets12'] = 0;
		$data['ctg_nuggets_total'] = 0;
		$data['ctg_nuggets_count'] = 0;
		$data['ctg_nuggets_avg'] = 0;
		$data['ctg_nuggets_min'] = 0;
		$data['ctg_nuggets_max'] = 0;

		foreach($get_ctg_nuggets as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_nuggets' . $month] = $asp;
			$data['ctg_nuggets_total'] += $asp;

			if($asp < $data['ctg_nuggets_min'] || $data['ctg_nuggets_count'] == 0){
				$data['ctg_nuggets_min'] = $asp;
			}

			if($asp > $data['ctg_nuggets_max'] || $data['ctg_nuggets_count'] == 0){
				$data['ctg_nuggets_max'] = $asp;
			}

			$data['ctg_nuggets_count']++;
		}

		$data['ctg_nuggets_avg'] = $data['ctg_nuggets_total'] != 0 ? $data['ctg_nuggets_total'] / $data['ctg_nuggets_count'] : 0;


		$ctg_nuggets_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-Nuggets', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_nuggets_prev_year2_jan'] = 0;
		$data['ctg_nuggets_prev_year2_feb'] = 0;
		$data['ctg_nuggets_prev_year2_mar'] = 0;
		$data['ctg_nuggets_prev_year2_apr'] = 0;
		$data['ctg_nuggets_prev_year2_may'] = 0;
		$data['ctg_nuggets_prev_year2_jun'] = 0;
		$data['ctg_nuggets_prev_year2_jul'] = 0;
		$data['ctg_nuggets_prev_year2_aug'] = 0;
		$data['ctg_nuggets_prev_year2_sep'] = 0;
		$data['ctg_nuggets_prev_year2_oct'] = 0;
		$data['ctg_nuggets_prev_year2_nov'] = 0;
		$data['ctg_nuggets_prev_year2_dec'] = 0;
		$data['ctg_nuggets_prev_year2_avg'] = 0;
		$data['ctg_nuggets_prev_year2_min'] = 0;
		$data['ctg_nuggets_prev_year2_max'] = 0;

		foreach($ctg_nuggets_prev_year2 as $row){
			$data['ctg_nuggets_prev_year2_jan'] = $row->jan_price;
			$data['ctg_nuggets_prev_year2_feb'] = $row->feb_price;
			$data['ctg_nuggets_prev_year2_mar'] = $row->mar_price;
			$data['ctg_nuggets_prev_year2_apr'] = $row->apr_price;
			$data['ctg_nuggets_prev_year2_may'] = $row->may_price;
			$data['ctg_nuggets_prev_year2_jun'] = $row->jun_price;
			$data['ctg_nuggets_prev_year2_jul'] = $row->jul_price;
			$data['ctg_nuggets_prev_year2_aug'] = $row->aug_price;
			$data['ctg_nuggets_prev_year2_sep'] = $row->sep_price;
			$data['ctg_nuggets_prev_year2_oct'] = $row->oct_price;
			$data['ctg_nuggets_prev_year2_nov'] = $row->nov_price;
			$data['ctg_nuggets_prev_year2_dec'] = $row->dec_price;
			$data['ctg_nuggets_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_nuggets_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_nuggets_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_nuggets_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-Nuggets', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_nuggets_prev_year1_jan'] = 0;
		$data['ctg_nuggets_prev_year1_feb'] = 0;
		$data['ctg_nuggets_prev_year1_mar'] = 0;
		$data['ctg_nuggets_prev_year1_apr'] = 0;
		$data['ctg_nuggets_prev_year1_may'] = 0;
		$data['ctg_nuggets_prev_year1_jun'] = 0;
		$data['ctg_nuggets_prev_year1_jul'] = 0;
		$data['ctg_nuggets_prev_year1_aug'] = 0;
		$data['ctg_nuggets_prev_year1_sep'] = 0;
		$data['ctg_nuggets_prev_year1_oct'] = 0;
		$data['ctg_nuggets_prev_year1_nov'] = 0;
		$data['ctg_nuggets_prev_year1_dec'] = 0;
		$data['ctg_nuggets_prev_year1_avg'] = 0;
		$data['ctg_nuggets_prev_year1_min'] = 0;
		$data['ctg_nuggets_prev_year1_max'] = 0;

		foreach($ctg_nuggets_prev_year1 as $row){
			$data['ctg_nuggets_prev_year1_jan'] = $row->jan_price;
			$data['ctg_nuggets_prev_year1_feb'] = $row->feb_price;
			$data['ctg_nuggets_prev_year1_mar'] = $row->mar_price;
			$data['ctg_nuggets_prev_year1_apr'] = $row->apr_price;
			$data['ctg_nuggets_prev_year1_may'] = $row->may_price;
			$data['ctg_nuggets_prev_year1_jun'] = $row->jun_price;
			$data['ctg_nuggets_prev_year1_jul'] = $row->jul_price;
			$data['ctg_nuggets_prev_year1_aug'] = $row->aug_price;
			$data['ctg_nuggets_prev_year1_sep'] = $row->sep_price;
			$data['ctg_nuggets_prev_year1_oct'] = $row->oct_price;
			$data['ctg_nuggets_prev_year1_nov'] = $row->nov_price;
			$data['ctg_nuggets_prev_year1_dec'] = $row->dec_price;
			$data['ctg_nuggets_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_nuggets_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_nuggets_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*Marinated Raw*/
		$join_ctg_raw = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CHICKEN (RAW)\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_raw = $this->admin->get_join('sales_tbl a', $join_ctg_raw, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_raw1'] = 0;
		$data['ctg_raw2'] = 0;
		$data['ctg_raw3'] = 0;
		$data['ctg_raw4'] = 0;
		$data['ctg_raw5'] = 0;
		$data['ctg_raw6'] = 0;
		$data['ctg_raw7'] = 0;
		$data['ctg_raw8'] = 0;
		$data['ctg_raw9'] = 0;
		$data['ctg_raw10'] = 0;
		$data['ctg_raw11'] = 0;
		$data['ctg_raw12'] = 0;
		$data['ctg_raw_total'] = 0;
		$data['ctg_raw_count'] = 0;
		$data['ctg_raw_avg'] = 0;
		$data['ctg_raw_min'] = 0;
		$data['ctg_raw_max'] = 0;

		foreach($get_ctg_raw as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_raw' . $month] = $asp;
			$data['ctg_raw_total'] += $asp;

			if($asp < $data['ctg_raw_min'] || $data['ctg_raw_count'] == 0){
				$data['ctg_raw_min'] = $asp;
			}

			if($asp > $data['ctg_raw_max'] || $data['ctg_raw_count'] == 0){
				$data['ctg_raw_max'] = $asp;
			}

			$data['ctg_raw_count']++;
		}

		$data['ctg_raw_avg'] = $data['ctg_raw_total'] != 0 ? $data['ctg_raw_total'] / $data['ctg_raw_count'] : 0;


		$ctg_raw_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINATED CHICKEN RAW', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_raw_prev_year2_jan'] = 0;
		$data['ctg_raw_prev_year2_feb'] = 0;
		$data['ctg_raw_prev_year2_mar'] = 0;
		$data['ctg_raw_prev_year2_apr'] = 0;
		$data['ctg_raw_prev_year2_may'] = 0;
		$data['ctg_raw_prev_year2_jun'] = 0;
		$data['ctg_raw_prev_year2_jul'] = 0;
		$data['ctg_raw_prev_year2_aug'] = 0;
		$data['ctg_raw_prev_year2_sep'] = 0;
		$data['ctg_raw_prev_year2_oct'] = 0;
		$data['ctg_raw_prev_year2_nov'] = 0;
		$data['ctg_raw_prev_year2_dec'] = 0;
		$data['ctg_raw_prev_year2_avg'] = 0;
		$data['ctg_raw_prev_year2_min'] = 0;
		$data['ctg_raw_prev_year2_max'] = 0;

		foreach($ctg_raw_prev_year2 as $row){
			$data['ctg_raw_prev_year2_jan'] = $row->jan_price;
			$data['ctg_raw_prev_year2_feb'] = $row->feb_price;
			$data['ctg_raw_prev_year2_mar'] = $row->mar_price;
			$data['ctg_raw_prev_year2_apr'] = $row->apr_price;
			$data['ctg_raw_prev_year2_may'] = $row->may_price;
			$data['ctg_raw_prev_year2_jun'] = $row->jun_price;
			$data['ctg_raw_prev_year2_jul'] = $row->jul_price;
			$data['ctg_raw_prev_year2_aug'] = $row->aug_price;
			$data['ctg_raw_prev_year2_sep'] = $row->sep_price;
			$data['ctg_raw_prev_year2_oct'] = $row->oct_price;
			$data['ctg_raw_prev_year2_nov'] = $row->nov_price;
			$data['ctg_raw_prev_year2_dec'] = $row->dec_price;
			$data['ctg_raw_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_raw_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_raw_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_raw_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINATED CHICKEN RAW', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1),
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_raw_prev_year1_jan'] = 0;
		$data['ctg_raw_prev_year1_feb'] = 0;
		$data['ctg_raw_prev_year1_mar'] = 0;
		$data['ctg_raw_prev_year1_apr'] = 0;
		$data['ctg_raw_prev_year1_may'] = 0;
		$data['ctg_raw_prev_year1_jun'] = 0;
		$data['ctg_raw_prev_year1_jul'] = 0;
		$data['ctg_raw_prev_year1_aug'] = 0;
		$data['ctg_raw_prev_year1_sep'] = 0;
		$data['ctg_raw_prev_year1_oct'] = 0;
		$data['ctg_raw_prev_year1_nov'] = 0;
		$data['ctg_raw_prev_year1_dec'] = 0;
		$data['ctg_raw_prev_year1_avg'] = 0;
		$data['ctg_raw_prev_year1_min'] = 0;
		$data['ctg_raw_prev_year1_max'] = 0;

		foreach($ctg_raw_prev_year1 as $row){
			$data['ctg_raw_prev_year1_jan'] = $row->jan_price;
			$data['ctg_raw_prev_year1_feb'] = $row->feb_price;
			$data['ctg_raw_prev_year1_mar'] = $row->mar_price;
			$data['ctg_raw_prev_year1_apr'] = $row->apr_price;
			$data['ctg_raw_prev_year1_may'] = $row->may_price;
			$data['ctg_raw_prev_year1_jun'] = $row->jun_price;
			$data['ctg_raw_prev_year1_jul'] = $row->jul_price;
			$data['ctg_raw_prev_year1_aug'] = $row->aug_price;
			$data['ctg_raw_prev_year1_sep'] = $row->sep_price;
			$data['ctg_raw_prev_year1_oct'] = $row->oct_price;
			$data['ctg_raw_prev_year1_nov'] = $row->nov_price;
			$data['ctg_raw_prev_year1_dec'] = $row->dec_price;
			$data['ctg_raw_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_raw_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_raw_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}



		/*CTG Chooksies Cut ups*/
		$join_ctg_cutups = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 10000150',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'NON MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_cutups = $this->admin->get_join('sales_tbl a', $join_ctg_cutups, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_cutups1'] = 0;
		$data['ctg_cutups2'] = 0;
		$data['ctg_cutups3'] = 0;
		$data['ctg_cutups4'] = 0;
		$data['ctg_cutups5'] = 0;
		$data['ctg_cutups6'] = 0;
		$data['ctg_cutups7'] = 0;
		$data['ctg_cutups8'] = 0;
		$data['ctg_cutups9'] = 0;
		$data['ctg_cutups10'] = 0;
		$data['ctg_cutups11'] = 0;
		$data['ctg_cutups12'] = 0;
		$data['ctg_cutups_total'] = 0;
		$data['ctg_cutups_count'] = 0;
		$data['ctg_cutups_avg'] = 0;
		$data['ctg_cutups_min'] = 0;
		$data['ctg_cutups_max'] = 0;

		foreach($get_ctg_cutups as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_cutups' . $month] = $asp;
			$data['ctg_cutups_total'] += $asp;

			if($asp < $data['ctg_cutups_min'] || $data['ctg_cutups_count'] == 0){
				$data['ctg_cutups_min'] = $asp;
			}

			if($asp > $data['ctg_cutups_max'] || $data['ctg_cutups_count'] == 0){
				$data['ctg_cutups_max'] = $asp;
			}

			$data['ctg_cutups_count']++;
		}

		$data['ctg_cutups_avg'] = $data['ctg_cutups_total'] != 0 ? $data['ctg_cutups_total'] / $data['ctg_cutups_count'] : 0;

		$ctg_cutups_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES CUT UPS', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2),
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_cutups_prev_year2_jan'] = 0;
		$data['ctg_cutups_prev_year2_feb'] = 0;
		$data['ctg_cutups_prev_year2_mar'] = 0;
		$data['ctg_cutups_prev_year2_apr'] = 0;
		$data['ctg_cutups_prev_year2_may'] = 0;
		$data['ctg_cutups_prev_year2_jun'] = 0;
		$data['ctg_cutups_prev_year2_jul'] = 0;
		$data['ctg_cutups_prev_year2_aug'] = 0;
		$data['ctg_cutups_prev_year2_sep'] = 0;
		$data['ctg_cutups_prev_year2_oct'] = 0;
		$data['ctg_cutups_prev_year2_nov'] = 0;
		$data['ctg_cutups_prev_year2_dec'] = 0;
		$data['ctg_cutups_prev_year2_avg'] = 0;
		$data['ctg_cutups_prev_year2_min'] = 0;
		$data['ctg_cutups_prev_year2_max'] = 0;

		foreach($ctg_cutups_prev_year2 as $row){
			$data['ctg_cutups_prev_year2_jan'] = $row->jan_price;
			$data['ctg_cutups_prev_year2_feb'] = $row->feb_price;
			$data['ctg_cutups_prev_year2_mar'] = $row->mar_price;
			$data['ctg_cutups_prev_year2_apr'] = $row->apr_price;
			$data['ctg_cutups_prev_year2_may'] = $row->may_price;
			$data['ctg_cutups_prev_year2_jun'] = $row->jun_price;
			$data['ctg_cutups_prev_year2_jul'] = $row->jul_price;
			$data['ctg_cutups_prev_year2_aug'] = $row->aug_price;
			$data['ctg_cutups_prev_year2_sep'] = $row->sep_price;
			$data['ctg_cutups_prev_year2_oct'] = $row->oct_price;
			$data['ctg_cutups_prev_year2_nov'] = $row->nov_price;
			$data['ctg_cutups_prev_year2_dec'] = $row->dec_price;
			$data['ctg_cutups_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_cutups_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_cutups_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_cutups_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES CUT UPS', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_cutups_prev_year1_jan'] = 0;
		$data['ctg_cutups_prev_year1_feb'] = 0;
		$data['ctg_cutups_prev_year1_mar'] = 0;
		$data['ctg_cutups_prev_year1_apr'] = 0;
		$data['ctg_cutups_prev_year1_may'] = 0;
		$data['ctg_cutups_prev_year1_jun'] = 0;
		$data['ctg_cutups_prev_year1_jul'] = 0;
		$data['ctg_cutups_prev_year1_aug'] = 0;
		$data['ctg_cutups_prev_year1_sep'] = 0;
		$data['ctg_cutups_prev_year1_oct'] = 0;
		$data['ctg_cutups_prev_year1_nov'] = 0;
		$data['ctg_cutups_prev_year1_dec'] = 0;
		$data['ctg_cutups_prev_year1_avg'] = 0;
		$data['ctg_cutups_prev_year1_min'] = 0;
		$data['ctg_cutups_prev_year1_max'] = 0;

		foreach($ctg_cutups_prev_year1 as $row){
			$data['ctg_cutups_prev_year1_jan'] = $row->jan_price;
			$data['ctg_cutups_prev_year1_feb'] = $row->feb_price;
			$data['ctg_cutups_prev_year1_mar'] = $row->mar_price;
			$data['ctg_cutups_prev_year1_apr'] = $row->apr_price;
			$data['ctg_cutups_prev_year1_may'] = $row->may_price;
			$data['ctg_cutups_prev_year1_jun'] = $row->jun_price;
			$data['ctg_cutups_prev_year1_jul'] = $row->jul_price;
			$data['ctg_cutups_prev_year1_aug'] = $row->aug_price;
			$data['ctg_cutups_prev_year1_sep'] = $row->sep_price;
			$data['ctg_cutups_prev_year1_oct'] = $row->oct_price;
			$data['ctg_cutups_prev_year1_nov'] = $row->nov_price;
			$data['ctg_cutups_prev_year1_dec'] = $row->dec_price;
			$data['ctg_cutups_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_cutups_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_cutups_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*CTG Liver / Gizzard*/
		$join_ctg_liver = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVER / GIZZARD\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_liver = $this->admin->get_join('sales_tbl a', $join_ctg_liver, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_liver1'] = 0;
		$data['ctg_liver2'] = 0;
		$data['ctg_liver3'] = 0;
		$data['ctg_liver4'] = 0;
		$data['ctg_liver5'] = 0;
		$data['ctg_liver6'] = 0;
		$data['ctg_liver7'] = 0;
		$data['ctg_liver8'] = 0;
		$data['ctg_liver9'] = 0;
		$data['ctg_liver10'] = 0;
		$data['ctg_liver11'] = 0;
		$data['ctg_liver12'] = 0;
		$data['ctg_liver_total'] = 0;
		$data['ctg_liver_count'] = 0;
		$data['ctg_liver_avg'] = 0;
		$data['ctg_liver_min'] = 0;
		$data['ctg_liver_max'] = 0;

		foreach($get_ctg_liver as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_liver' . $month] = $asp;
			$data['ctg_liver_total'] += $asp;

			if($asp < $data['ctg_liver_min'] || $data['ctg_liver_count'] == 0){
				$data['ctg_cutups_min'] = $asp;
			}

			if($asp > $data['ctg_liver_max'] || $data['ctg_liver_count'] == 0){
				$data['ctg_liver_max'] = $asp;
			}

			$data['ctg_liver_count']++;
		}

		$data['ctg_liver_avg'] = $data['ctg_liver_total'] != 0 ? $data['ctg_liver_total'] / $data['ctg_liver_count'] : 0;


		$ctg_liver_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'GIZZARD / LIVER', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2),
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_liver_prev_year2_jan'] = 0;
		$data['ctg_liver_prev_year2_feb'] = 0;
		$data['ctg_liver_prev_year2_mar'] = 0;
		$data['ctg_liver_prev_year2_apr'] = 0;
		$data['ctg_liver_prev_year2_may'] = 0;
		$data['ctg_liver_prev_year2_jun'] = 0;
		$data['ctg_liver_prev_year2_jul'] = 0;
		$data['ctg_liver_prev_year2_aug'] = 0;
		$data['ctg_liver_prev_year2_sep'] = 0;
		$data['ctg_liver_prev_year2_oct'] = 0;
		$data['ctg_liver_prev_year2_nov'] = 0;
		$data['ctg_liver_prev_year2_dec'] = 0;
		$data['ctg_liver_prev_year2_avg'] = 0;
		$data['ctg_liver_prev_year2_min'] = 0;
		$data['ctg_liver_prev_year2_max'] = 0;

		foreach($ctg_liver_prev_year2 as $row){
			$data['ctg_liver_prev_year2_jan'] = $row->jan_price;
			$data['ctg_liver_prev_year2_feb'] = $row->feb_price;
			$data['ctg_liver_prev_year2_mar'] = $row->mar_price;
			$data['ctg_liver_prev_year2_apr'] = $row->apr_price;
			$data['ctg_liver_prev_year2_may'] = $row->may_price;
			$data['ctg_liver_prev_year2_jun'] = $row->jun_price;
			$data['ctg_liver_prev_year2_jul'] = $row->jul_price;
			$data['ctg_liver_prev_year2_aug'] = $row->aug_price;
			$data['ctg_liver_prev_year2_sep'] = $row->sep_price;
			$data['ctg_liver_prev_year2_oct'] = $row->oct_price;
			$data['ctg_liver_prev_year2_nov'] = $row->nov_price;
			$data['ctg_liver_prev_year2_dec'] = $row->dec_price;
			$data['ctg_liver_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_liver_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_liver_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_liver_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'GIZZARD / LIVER', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_liver_prev_year1_jan'] = 0;
		$data['ctg_liver_prev_year1_feb'] = 0;
		$data['ctg_liver_prev_year1_mar'] = 0;
		$data['ctg_liver_prev_year1_apr'] = 0;
		$data['ctg_liver_prev_year1_may'] = 0;
		$data['ctg_liver_prev_year1_jun'] = 0;
		$data['ctg_liver_prev_year1_jul'] = 0;
		$data['ctg_liver_prev_year1_aug'] = 0;
		$data['ctg_liver_prev_year1_sep'] = 0;
		$data['ctg_liver_prev_year1_oct'] = 0;
		$data['ctg_liver_prev_year1_nov'] = 0;
		$data['ctg_liver_prev_year1_dec'] = 0;
		$data['ctg_liver_prev_year1_avg'] = 0;
		$data['ctg_liver_prev_year1_min'] = 0;
		$data['ctg_liver_prev_year1_max'] = 0;

		foreach($ctg_liver_prev_year1 as $row){
			$data['ctg_liver_prev_year1_jan'] = $row->jan_price;
			$data['ctg_liver_prev_year1_feb'] = $row->feb_price;
			$data['ctg_liver_prev_year1_mar'] = $row->mar_price;
			$data['ctg_liver_prev_year1_apr'] = $row->apr_price;
			$data['ctg_liver_prev_year1_may'] = $row->may_price;
			$data['ctg_liver_prev_year1_jun'] = $row->jun_price;
			$data['ctg_liver_prev_year1_jul'] = $row->jul_price;
			$data['ctg_liver_prev_year1_aug'] = $row->aug_price;
			$data['ctg_liver_prev_year1_sep'] = $row->sep_price;
			$data['ctg_liver_prev_year1_oct'] = $row->oct_price;
			$data['ctg_liver_prev_year1_nov'] = $row->nov_price;
			$data['ctg_liver_prev_year1_dec'] = $row->dec_price;
			$data['ctg_liver_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_liver_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_liver_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*11 PC PICA PICA CUTS*/

		$join_ctg_pica = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 10400170',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_pica = $this->admin->get_join('sales_tbl a', $join_ctg_pica, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_pica1'] = 0;
		$data['ctg_pica2'] = 0;
		$data['ctg_pica3'] = 0;
		$data['ctg_pica4'] = 0;
		$data['ctg_pica5'] = 0;
		$data['ctg_pica6'] = 0;
		$data['ctg_pica7'] = 0;
		$data['ctg_pica8'] = 0;
		$data['ctg_pica9'] = 0;
		$data['ctg_pica10'] = 0;
		$data['ctg_pica11'] = 0;
		$data['ctg_pica12'] = 0;
		$data['ctg_pica_total'] = 0;
		$data['ctg_pica_count'] = 0;
		$data['ctg_pica_avg'] = 0;
		$data['ctg_pica_min'] = 0;
		$data['ctg_pica_max'] = 0;

		foreach($get_ctg_pica as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_pica' . $month] = $asp;
			$data['ctg_pica_total'] += $asp;

			if($asp < $data['ctg_pica_min'] || $data['ctg_pica_count'] == 0){
				$data['ctg_pica_min'] = $asp;
			}

			if($asp > $data['ctg_pica_max'] || $data['ctg_pica_count'] == 0){
				$data['ctg_pica_max'] = $asp;
			}

			$data['ctg_pica_count']++;
		}

		$data['ctg_pica_avg'] = $data['ctg_pica_total'] != 0 ? $data['ctg_pica_total'] / $data['ctg_pica_count'] : 0;


		$ctg_pica_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_pica_prev_year2_jan'] = 0;
		$data['ctg_pica_prev_year2_feb'] = 0;
		$data['ctg_pica_prev_year2_mar'] = 0;
		$data['ctg_pica_prev_year2_apr'] = 0;
		$data['ctg_pica_prev_year2_may'] = 0;
		$data['ctg_pica_prev_year2_jun'] = 0;
		$data['ctg_pica_prev_year2_jul'] = 0;
		$data['ctg_pica_prev_year2_aug'] = 0;
		$data['ctg_pica_prev_year2_sep'] = 0;
		$data['ctg_pica_prev_year2_oct'] = 0;
		$data['ctg_pica_prev_year2_nov'] = 0;
		$data['ctg_pica_prev_year2_dec'] = 0;
		$data['ctg_pica_prev_year2_avg'] = 0;
		$data['ctg_pica_prev_year2_min'] = 0;
		$data['ctg_pica_prev_year2_max'] = 0;

		foreach($ctg_pica_prev_year2 as $row){
			$data['ctg_pica_prev_year2_jan'] = $row->jan_price;
			$data['ctg_pica_prev_year2_feb'] = $row->feb_price;
			$data['ctg_pica_prev_year2_mar'] = $row->mar_price;
			$data['ctg_pica_prev_year2_apr'] = $row->apr_price;
			$data['ctg_pica_prev_year2_may'] = $row->may_price;
			$data['ctg_pica_prev_year2_jun'] = $row->jun_price;
			$data['ctg_pica_prev_year2_jul'] = $row->jul_price;
			$data['ctg_pica_prev_year2_aug'] = $row->aug_price;
			$data['ctg_pica_prev_year2_sep'] = $row->sep_price;
			$data['ctg_pica_prev_year2_oct'] = $row->oct_price;
			$data['ctg_pica_prev_year2_nov'] = $row->nov_price;
			$data['ctg_pica_prev_year2_dec'] = $row->dec_price;
			$data['ctg_pica_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_pica_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_pica_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_pica_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1),
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_pica_prev_year1_jan'] = 0;
		$data['ctg_pica_prev_year1_feb'] = 0;
		$data['ctg_pica_prev_year1_mar'] = 0;
		$data['ctg_pica_prev_year1_apr'] = 0;
		$data['ctg_pica_prev_year1_may'] = 0;
		$data['ctg_pica_prev_year1_jun'] = 0;
		$data['ctg_pica_prev_year1_jul'] = 0;
		$data['ctg_pica_prev_year1_aug'] = 0;
		$data['ctg_pica_prev_year1_sep'] = 0;
		$data['ctg_pica_prev_year1_oct'] = 0;
		$data['ctg_pica_prev_year1_nov'] = 0;
		$data['ctg_pica_prev_year1_dec'] = 0;
		$data['ctg_pica_prev_year1_avg'] = 0;
		$data['ctg_pica_prev_year1_min'] = 0;
		$data['ctg_pica_prev_year1_max'] = 0;

		foreach($ctg_pica_prev_year1 as $row){
			$data['ctg_pica_prev_year1_jan'] = $row->jan_price;
			$data['ctg_pica_prev_year1_feb'] = $row->feb_price;
			$data['ctg_pica_prev_year1_mar'] = $row->mar_price;
			$data['ctg_pica_prev_year1_apr'] = $row->apr_price;
			$data['ctg_pica_prev_year1_may'] = $row->may_price;
			$data['ctg_pica_prev_year1_jun'] = $row->jun_price;
			$data['ctg_pica_prev_year1_jul'] = $row->jul_price;
			$data['ctg_pica_prev_year1_aug'] = $row->aug_price;
			$data['ctg_pica_prev_year1_sep'] = $row->sep_price;
			$data['ctg_pica_prev_year1_oct'] = $row->oct_price;
			$data['ctg_pica_prev_year1_nov'] = $row->nov_price;
			$data['ctg_pica_prev_year1_dec'] = $row->dec_price;
			$data['ctg_pica_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_pica_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_pica_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*1 PC BOSSING CUTS */
		
		$join_ctg_bossing = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 10400184',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_bossing = $this->admin->get_join('sales_tbl a', $join_ctg_bossing, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_bossing1'] = 0;
		$data['ctg_bossing2'] = 0;
		$data['ctg_bossing3'] = 0;
		$data['ctg_bossing4'] = 0;
		$data['ctg_bossing5'] = 0;
		$data['ctg_bossing6'] = 0;
		$data['ctg_bossing7'] = 0;
		$data['ctg_bossing8'] = 0;
		$data['ctg_bossing9'] = 0;
		$data['ctg_bossing10'] = 0;
		$data['ctg_bossing11'] = 0;
		$data['ctg_bossing12'] = 0;
		$data['ctg_bossing_total'] = 0;
		$data['ctg_bossing_count'] = 0;
		$data['ctg_bossing_avg'] = 0;
		$data['ctg_bossing_min'] = 0;
		$data['ctg_bossing_max'] = 0;

		foreach($get_ctg_bossing as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_bossing' . $month] = $asp;
			$data['ctg_bossing_total'] += $asp;

			if($asp < $data['ctg_bossing_min'] || $data['ctg_bossing_count'] == 0){
				$data['ctg_bossing_min'] = $asp;
			}

			if($asp > $data['ctg_bossing_max'] || $data['ctg_bossing_count'] == 0){
				$data['ctg_bossing_max'] = $asp;
			}

			$data['ctg_bossing_count']++;
		}

		$data['ctg_bossing_avg'] = $data['ctg_bossing_total'] != 0 ? $data['ctg_bossing_total'] / $data['ctg_bossing_count'] : 0;


		$ctg_bossing_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '1 PC', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_bossing_prev_year2_jan'] = 0;
		$data['ctg_bossing_prev_year2_feb'] = 0;
		$data['ctg_bossing_prev_year2_mar'] = 0;
		$data['ctg_bossing_prev_year2_apr'] = 0;
		$data['ctg_bossing_prev_year2_may'] = 0;
		$data['ctg_bossing_prev_year2_jun'] = 0;
		$data['ctg_bossing_prev_year2_jul'] = 0;
		$data['ctg_bossing_prev_year2_aug'] = 0;
		$data['ctg_bossing_prev_year2_sep'] = 0;
		$data['ctg_bossing_prev_year2_oct'] = 0;
		$data['ctg_bossing_prev_year2_nov'] = 0;
		$data['ctg_bossing_prev_year2_dec'] = 0;
		$data['ctg_bossing_prev_year2_avg'] = 0;
		$data['ctg_bossing_prev_year2_min'] = 0;
		$data['ctg_bossing_prev_year2_max'] = 0;

		foreach($ctg_bossing_prev_year2 as $row){
			$data['ctg_bossing_prev_year2_jan'] = $row->jan_price;
			$data['ctg_bossing_prev_year2_feb'] = $row->feb_price;
			$data['ctg_bossing_prev_year2_mar'] = $row->mar_price;
			$data['ctg_bossing_prev_year2_apr'] = $row->apr_price;
			$data['ctg_bossing_prev_year2_may'] = $row->may_price;
			$data['ctg_bossing_prev_year2_jun'] = $row->jun_price;
			$data['ctg_bossing_prev_year2_jul'] = $row->jul_price;
			$data['ctg_bossing_prev_year2_aug'] = $row->aug_price;
			$data['ctg_bossing_prev_year2_sep'] = $row->sep_price;
			$data['ctg_bossing_prev_year2_oct'] = $row->oct_price;
			$data['ctg_bossing_prev_year2_nov'] = $row->nov_price;
			$data['ctg_bossing_prev_year2_dec'] = $row->dec_price;
			$data['ctg_bossing_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_bossing_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_bossing_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_bossing_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_bossing_prev_year1_jan'] = 0;
		$data['ctg_bossing_prev_year1_feb'] = 0;
		$data['ctg_bossing_prev_year1_mar'] = 0;
		$data['ctg_bossing_prev_year1_apr'] = 0;
		$data['ctg_bossing_prev_year1_may'] = 0;
		$data['ctg_bossing_prev_year1_jun'] = 0;
		$data['ctg_bossing_prev_year1_jul'] = 0;
		$data['ctg_bossing_prev_year1_aug'] = 0;
		$data['ctg_bossing_prev_year1_sep'] = 0;
		$data['ctg_bossing_prev_year1_oct'] = 0;
		$data['ctg_bossing_prev_year1_nov'] = 0;
		$data['ctg_bossing_prev_year1_dec'] = 0;
		$data['ctg_bossing_prev_year1_avg'] = 0;
		$data['ctg_bossing_prev_year1_min'] = 0;
		$data['ctg_bossing_prev_year1_max'] = 0;

		foreach($ctg_bossing_prev_year1 as $row){
			$data['ctg_bossing_prev_year1_jan'] = $row->jan_price;
			$data['ctg_bossing_prev_year1_feb'] = $row->feb_price;
			$data['ctg_bossing_prev_year1_mar'] = $row->mar_price;
			$data['ctg_bossing_prev_year1_apr'] = $row->apr_price;
			$data['ctg_bossing_prev_year1_may'] = $row->may_price;
			$data['ctg_bossing_prev_year1_jun'] = $row->jun_price;
			$data['ctg_bossing_prev_year1_jul'] = $row->jul_price;
			$data['ctg_bossing_prev_year1_aug'] = $row->aug_price;
			$data['ctg_bossing_prev_year1_sep'] = $row->sep_price;
			$data['ctg_bossing_prev_year1_oct'] = $row->oct_price;
			$data['ctg_bossing_prev_year1_nov'] = $row->nov_price;
			$data['ctg_bossing_prev_year1_dec'] = $row->dec_price;
			$data['ctg_bossing_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_bossing_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_bossing_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*Uling Roasters*/

		/*UR Chicken*/

		$get_ur_orc = $this->admin->get_query("SELECT p.size_name, AVG(asp_tbl.jan_asp) as orc_jan, AVG(asp_tbl.feb_asp) as orc_feb, AVG(asp_tbl.mar_asp) as orc_mar, AVG(asp_tbl.apr_asp) as orc_apr, AVG(asp_tbl.may_asp) as orc_may, AVG(asp_tbl.jun_asp) as orc_jun, AVG(asp_tbl.jul_asp) as orc_jul, AVG(asp_tbl.aug_asp) as orc_aug, AVG(asp_tbl.sep_asp) as orc_sep, AVG(asp_tbl.oct_asp) as orc_oct, AVG(asp_tbl.nov_asp) as orc_nov, AVG(asp_tbl.dec_asp) as orc_dec FROM material_tbl o, size_tbl p,

		(SELECT m.material_id, m.size_id,

		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-01-01' WHERE d.material_id = m.material_id) as jan_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-02-01' WHERE d.material_id = m.material_id) as feb_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-03-01' WHERE d.material_id = m.material_id) as mar_asp,
    
   		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-04-01' WHERE d.material_id = m.material_id) as apr_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-05-01' WHERE d.material_id = m.material_id) as may_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-06-01' WHERE d.material_id = m.material_id) as jun_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-07-01' WHERE d.material_id = m.material_id) as jul_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-08-01' WHERE d.material_id = m.material_id) as aug_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-09-01' WHERE d.material_id = m.material_id) as sep_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-10-01' WHERE d.material_id = m.material_id) as oct_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-11-01' WHERE d.material_id = m.material_id) as nov_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-01-01' WHERE d.material_id =  m.material_id) as dec_asp
    
		FROM material_size_tbl m, brand_tbl n WHERE m.brand_id = n.brand_id AND m.material_size_status = 1 AND n.brand_name = 'ULING ROASTER') as asp_tbl

		WHERE o.material_id = asp_tbl.material_id AND p.size_id = asp_tbl.size_id GROUP BY p.size_id");
		
		$data['ur_largo1'] = $data['ur_largo2'] = $data['ur_largo3'] = $data['ur_largo4'] = $data['ur_largo5'] = $data['ur_largo6'] = $data['ur_largo7'] = $data['ur_largo8'] = $data['ur_largo9'] = $data['ur_largo10'] = $data['ur_largo11'] = $data['ur_largo12'] = $data['ur_largo_total'] = $data['ur_largo_count'] = $data['ur_largo_avg'] = $data['ur_largo_min'] = $data['ur_largo_max'] = 0;

		$data['ur_plm1'] = $data['ur_plm2'] = $data['ur_plm3'] = $data['ur_plm4'] = $data['ur_plm5'] = $data['ur_plm6'] = $data['ur_plm7'] = $data['ur_plm8'] = $data['ur_plm9'] = $data['ur_plm10'] = $data['ur_plm11'] = $data['ur_plm12'] = $data['ur_plm_total'] = $data['ur_plm_count'] = $data['ur_plm_avg'] = $data['ur_plm_min'] = $data['ur_plm_max'] = 0;

		$data['ur_half1'] = $data['ur_half2'] = $data['ur_half3'] = $data['ur_half4'] = $data['ur_half5'] = $data['ur_half6'] = $data['ur_half7'] = $data['ur_half8'] = $data['ur_half9'] = $data['ur_half10'] = $data['ur_half11'] = $data['ur_half12'] = $data['ur_half_total'] = $data['ur_half_count'] = $data['ur_half_avg'] = $data['ur_half_min'] = $data['ur_half_max'] = 0;

		$data['ur_pequeno1'] = $data['ur_pequeno2'] = $data['ur_pequeno3'] = $data['ur_pequeno4'] = $data['ur_pequeno5'] = $data['ur_pequeno6'] = $data['ur_pequeno7'] = $data['ur_pequeno8'] = $data['ur_pequeno9'] = $data['ur_pequeno10'] = $data['ur_pequeno11'] = $data['ur_pequeno12'] = $data['ur_pequeno_total'] = $data['ur_pequeno_count'] = $data['ur_pequeno_avg'] = $data['ur_pequeno_min'] = $data['ur_pequeno_max'] = 0;

		foreach($get_ur_orc as $row){

			$orc_size = $row->size_name;
			$orc_jan = $row->orc_jan;
			$orc_feb = $row->orc_feb;
			$orc_mar = $row->orc_mar;
			$orc_apr = $row->orc_apr;
			$orc_may = $row->orc_may;
			$orc_jun = $row->orc_jun;
			$orc_jul = $row->orc_jul;
			$orc_aug = $row->orc_aug;
			$orc_sep = $row->orc_sep;
			$orc_oct = $row->orc_oct;
			$orc_nov = $row->orc_nov;
			$orc_dec = $row->orc_dec;
			$orc_min = min($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_max = max($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_avg = ($orc_jan + $orc_feb + $orc_mar + $orc_apr + $orc_may + $orc_jun + $orc_jul + $orc_aug + $orc_sep + $orc_oct + $orc_nov + $orc_dec) / 12;

			if($orc_size == "LARGO"){
				$data['ur_largo1'] = $orc_jan;
				$data['ur_largo2'] = $orc_feb;
				$data['ur_largo3'] = $orc_mar;
				$data['ur_largo4'] = $orc_apr;
				$data['ur_largo5'] = $orc_may;
				$data['ur_largo6'] = $orc_jun;
				$data['ur_largo7'] = $orc_jul;
				$data['ur_largo8'] = $orc_aug;
				$data['ur_largo9'] = $orc_sep;
				$data['ur_largo10'] = $orc_oct;
				$data['ur_largo11'] = $orc_nov;
				$data['ur_largo12'] = $orc_dec;
				$data['ur_largo_avg'] = $orc_avg;
				$data['ur_largo_min'] = $orc_min;
				$data['ur_largo_max'] = $orc_max;

				$ur_largo_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LARGO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
				$data['ur_largo_prev_year2_jan'] = 0;
				$data['ur_largo_prev_year2_feb'] = 0;
				$data['ur_largo_prev_year2_mar'] = 0;
				$data['ur_largo_prev_year2_apr'] = 0;
				$data['ur_largo_prev_year2_may'] = 0;
				$data['ur_largo_prev_year2_jun'] = 0;
				$data['ur_largo_prev_year2_jul'] = 0;
				$data['ur_largo_prev_year2_aug'] = 0;
				$data['ur_largo_prev_year2_sep'] = 0;
				$data['ur_largo_prev_year2_oct'] = 0;
				$data['ur_largo_prev_year2_nov'] = 0;
				$data['ur_largo_prev_year2_dec'] = 0;
				$data['ur_largo_prev_year2_avg'] = 0;
				$data['ur_largo_prev_year2_min'] = 0;
				$data['ur_largo_prev_year2_max'] = 0;

				foreach($ur_largo_prev_year2 as $row){
					$data['ur_largo_prev_year2_jan'] = $row->jan_price;
					$data['ur_largo_prev_year2_feb'] = $row->feb_price;
					$data['ur_largo_prev_year2_mar'] = $row->mar_price;
					$data['ur_largo_prev_year2_apr'] = $row->apr_price;
					$data['ur_largo_prev_year2_may'] = $row->may_price;
					$data['ur_largo_prev_year2_jun'] = $row->jun_price;
					$data['ur_largo_prev_year2_jul'] = $row->jul_price;
					$data['ur_largo_prev_year2_aug'] = $row->aug_price;
					$data['ur_largo_prev_year2_sep'] = $row->sep_price;
					$data['ur_largo_prev_year2_oct'] = $row->oct_price;
					$data['ur_largo_prev_year2_nov'] = $row->nov_price;
					$data['ur_largo_prev_year2_dec'] = $row->dec_price;
					$data['ur_largo_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ur_largo_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ur_largo_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}


				$ur_largo_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LARGO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1), 
					FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
				
				$data['ur_largo_prev_year1_jan'] = 0;
				$data['ur_largo_prev_year1_feb'] = 0;
				$data['ur_largo_prev_year1_mar'] = 0;
				$data['ur_largo_prev_year1_apr'] = 0;
				$data['ur_largo_prev_year1_may'] = 0;
				$data['ur_largo_prev_year1_jun'] = 0;
				$data['ur_largo_prev_year1_jul'] = 0;
				$data['ur_largo_prev_year1_aug'] = 0;
				$data['ur_largo_prev_year1_sep'] = 0;
				$data['ur_largo_prev_year1_oct'] = 0;
				$data['ur_largo_prev_year1_nov'] = 0;
				$data['ur_largo_prev_year1_dec'] = 0;
				$data['ur_largo_prev_year1_avg'] = 0;
				$data['ur_largo_prev_year1_min'] = 0;
				$data['ur_largo_prev_year1_max'] = 0;

				foreach($ur_largo_prev_year1 as $row){
					$data['ur_largo_prev_year1_jan'] = $row->jan_price;
					$data['ur_largo_prev_year1_feb'] = $row->feb_price;
					$data['ur_largo_prev_year1_mar'] = $row->mar_price;
					$data['ur_largo_prev_year1_apr'] = $row->apr_price;
					$data['ur_largo_prev_year1_may'] = $row->may_price;
					$data['ur_largo_prev_year1_jun'] = $row->jun_price;
					$data['ur_largo_prev_year1_jul'] = $row->jul_price;
					$data['ur_largo_prev_year1_aug'] = $row->aug_price;
					$data['ur_largo_prev_year1_sep'] = $row->sep_price;
					$data['ur_largo_prev_year1_oct'] = $row->oct_price;
					$data['ur_largo_prev_year1_nov'] = $row->nov_price;
					$data['ur_largo_prev_year1_dec'] = $row->dec_price;
					$data['ur_largo_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ur_largo_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ur_largo_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "PLM"){
				$data['ur_plm1'] = $orc_jan;
				$data['ur_plm2'] = $orc_feb;
				$data['ur_plm3'] = $orc_mar;
				$data['ur_plm4'] = $orc_apr;
				$data['ur_plm5'] = $orc_may;
				$data['ur_plm6'] = $orc_jun;
				$data['ur_plm7'] = $orc_jul;
				$data['ur_plm8'] = $orc_aug;
				$data['ur_plm9'] = $orc_sep;
				$data['ur_plm10'] = $orc_oct;
				$data['ur_plm11'] = $orc_nov;
				$data['ur_plm12'] = $orc_dec;
				$data['ur_plm_avg'] = $orc_avg;
				$data['ur_plm_min'] = $orc_min;
				$data['ur_plm_max'] = $orc_max;

				$ur_plm_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'PLM', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
				$data['ur_plm_prev_year2_jan'] = 0;
				$data['ur_plm_prev_year2_feb'] = 0;
				$data['ur_plm_prev_year2_mar'] = 0;
				$data['ur_plm_prev_year2_apr'] = 0;
				$data['ur_plm_prev_year2_may'] = 0;
				$data['ur_plm_prev_year2_jun'] = 0;
				$data['ur_plm_prev_year2_jul'] = 0;
				$data['ur_plm_prev_year2_aug'] = 0;
				$data['ur_plm_prev_year2_sep'] = 0;
				$data['ur_plm_prev_year2_oct'] = 0;
				$data['ur_plm_prev_year2_nov'] = 0;
				$data['ur_plm_prev_year2_dec'] = 0;
				$data['ur_plm_prev_year2_avg'] = 0;
				$data['ur_plm_prev_year2_min'] = 0;
				$data['ur_plm_prev_year2_max'] = 0;

				foreach($ur_plm_prev_year2 as $row){
					$data['ur_plm_prev_year2_jan'] = $row->jan_price;
					$data['ur_plm_prev_year2_feb'] = $row->feb_price;
					$data['ur_plm_prev_year2_mar'] = $row->mar_price;
					$data['ur_plm_prev_year2_apr'] = $row->apr_price;
					$data['ur_plm_prev_year2_may'] = $row->may_price;
					$data['ur_plm_prev_year2_jun'] = $row->jun_price;
					$data['ur_plm_prev_year2_jul'] = $row->jul_price;
					$data['ur_plm_prev_year2_aug'] = $row->aug_price;
					$data['ur_plm_prev_year2_sep'] = $row->sep_price;
					$data['ur_plm_prev_year2_oct'] = $row->oct_price;
					$data['ur_plm_prev_year2_nov'] = $row->nov_price;
					$data['ur_plm_prev_year2_dec'] = $row->dec_price;
					$data['ur_plm_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ur_plm_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ur_plm_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}


				$ur_plm_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'PLM', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1), 
					FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
				
				$data['ur_plm_prev_year1_jan'] = 0;
				$data['ur_plm_prev_year1_feb'] = 0;
				$data['ur_plm_prev_year1_mar'] = 0;
				$data['ur_plm_prev_year1_apr'] = 0;
				$data['ur_plm_prev_year1_may'] = 0;
				$data['ur_plm_prev_year1_jun'] = 0;
				$data['ur_plm_prev_year1_jul'] = 0;
				$data['ur_plm_prev_year1_aug'] = 0;
				$data['ur_plm_prev_year1_sep'] = 0;
				$data['ur_plm_prev_year1_oct'] = 0;
				$data['ur_plm_prev_year1_nov'] = 0;
				$data['ur_plm_prev_year1_dec'] = 0;
				$data['ur_plm_prev_year1_avg'] = 0;
				$data['ur_plm_prev_year1_min'] = 0;
				$data['ur_plm_prev_year1_max'] = 0;

				foreach($ur_plm_prev_year1 as $row){
					$data['ur_plm_prev_year1_jan'] = $row->jan_price;
					$data['ur_plm_prev_year1_feb'] = $row->feb_price;
					$data['ur_plm_prev_year1_mar'] = $row->mar_price;
					$data['ur_plm_prev_year1_apr'] = $row->apr_price;
					$data['ur_plm_prev_year1_may'] = $row->may_price;
					$data['ur_plm_prev_year1_jun'] = $row->jun_price;
					$data['ur_plm_prev_year1_jul'] = $row->jul_price;
					$data['ur_plm_prev_year1_aug'] = $row->aug_price;
					$data['ur_plm_prev_year1_sep'] = $row->sep_price;
					$data['ur_plm_prev_year1_oct'] = $row->oct_price;
					$data['ur_plm_prev_year1_nov'] = $row->nov_price;
					$data['ur_plm_prev_year1_dec'] = $row->dec_price;
					$data['ur_plm_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ur_plm_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ur_plm_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "PEQUENO"){
				$data['ur_pequeno1'] = $orc_jan;
				$data['ur_pequeno2'] = $orc_feb;
				$data['ur_pequeno3'] = $orc_mar;
				$data['ur_pequeno4'] = $orc_apr;
				$data['ur_pequeno5'] = $orc_may;
				$data['ur_pequeno6'] = $orc_jun;
				$data['ur_pequeno7'] = $orc_jul;
				$data['ur_pequeno8'] = $orc_aug;
				$data['ur_pequeno9'] = $orc_sep;
				$data['ur_pequeno10'] = $orc_oct;
				$data['ur_pequeno11'] = $orc_nov;
				$data['ur_pequeno12'] = $orc_dec;
				$data['ur_pequeno_avg'] = $orc_avg;
				$data['ur_pequeno_min'] = $orc_min;
				$data['ur_pequeno_max'] = $orc_max;

				$ur_pequeno_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'PEQUENO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
				$data['ur_pequeno_prev_year2_jan'] = 0;
				$data['ur_pequeno_prev_year2_feb'] = 0;
				$data['ur_pequeno_prev_year2_mar'] = 0;
				$data['ur_pequeno_prev_year2_apr'] = 0;
				$data['ur_pequeno_prev_year2_may'] = 0;
				$data['ur_pequeno_prev_year2_jun'] = 0;
				$data['ur_pequeno_prev_year2_jul'] = 0;
				$data['ur_pequeno_prev_year2_aug'] = 0;
				$data['ur_pequeno_prev_year2_sep'] = 0;
				$data['ur_pequeno_prev_year2_oct'] = 0;
				$data['ur_pequeno_prev_year2_nov'] = 0;
				$data['ur_pequeno_prev_year2_dec'] = 0;
				$data['ur_pequeno_prev_year2_avg'] = 0;
				$data['ur_pequeno_prev_year2_min'] = 0;
				$data['ur_pequeno_prev_year2_max'] = 0;

				foreach($ur_pequeno_prev_year2 as $row){
					$data['ur_pequeno_prev_year2_jan'] = $row->jan_price;
					$data['ur_pequeno_prev_year2_feb'] = $row->feb_price;
					$data['ur_pequeno_prev_year2_mar'] = $row->mar_price;
					$data['ur_pequeno_prev_year2_apr'] = $row->apr_price;
					$data['ur_pequeno_prev_year2_may'] = $row->may_price;
					$data['ur_pequeno_prev_year2_jun'] = $row->jun_price;
					$data['ur_pequeno_prev_year2_jul'] = $row->jul_price;
					$data['ur_pequeno_prev_year2_aug'] = $row->aug_price;
					$data['ur_pequeno_prev_year2_sep'] = $row->sep_price;
					$data['ur_pequeno_prev_year2_oct'] = $row->oct_price;
					$data['ur_pequeno_prev_year2_nov'] = $row->nov_price;
					$data['ur_pequeno_prev_year2_dec'] = $row->dec_price;
					$data['ur_pequeno_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ur_pequeno_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ur_pequeno_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}


				$ur_pequeno_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'PEQUENO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1), 
					FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
				
				$data['ur_pequeno_prev_year1_jan'] = 0;
				$data['ur_pequeno_prev_year1_feb'] = 0;
				$data['ur_pequeno_prev_year1_mar'] = 0;
				$data['ur_pequeno_prev_year1_apr'] = 0;
				$data['ur_pequeno_prev_year1_may'] = 0;
				$data['ur_pequeno_prev_year1_jun'] = 0;
				$data['ur_pequeno_prev_year1_jul'] = 0;
				$data['ur_pequeno_prev_year1_aug'] = 0;
				$data['ur_pequeno_prev_year1_sep'] = 0;
				$data['ur_pequeno_prev_year1_oct'] = 0;
				$data['ur_pequeno_prev_year1_nov'] = 0;
				$data['ur_pequeno_prev_year1_dec'] = 0;
				$data['ur_pequeno_prev_year1_avg'] = 0;
				$data['ur_pequeno_prev_year1_min'] = 0;
				$data['ur_pequeno_prev_year1_max'] = 0;

				foreach($ur_pequeno_prev_year1 as $row){
					$data['ur_pequeno_prev_year1_jan'] = $row->jan_price;
					$data['ur_pequeno_prev_year1_feb'] = $row->feb_price;
					$data['ur_pequeno_prev_year1_mar'] = $row->mar_price;
					$data['ur_pequeno_prev_year1_apr'] = $row->apr_price;
					$data['ur_pequeno_prev_year1_may'] = $row->may_price;
					$data['ur_pequeno_prev_year1_jun'] = $row->jun_price;
					$data['ur_pequeno_prev_year1_jul'] = $row->jul_price;
					$data['ur_pequeno_prev_year1_aug'] = $row->aug_price;
					$data['ur_pequeno_prev_year1_sep'] = $row->sep_price;
					$data['ur_pequeno_prev_year1_oct'] = $row->oct_price;
					$data['ur_pequeno_prev_year1_nov'] = $row->nov_price;
					$data['ur_pequeno_prev_year1_dec'] = $row->dec_price;
					$data['ur_pequeno_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ur_pequeno_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ur_pequeno_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "HALF"){
				$data['ur_half1'] = $orc_jan;
				$data['ur_half2'] = $orc_feb;
				$data['ur_half3'] = $orc_mar;
				$data['ur_half4'] = $orc_apr;
				$data['ur_half5'] = $orc_may;
				$data['ur_half6'] = $orc_jun;
				$data['ur_half7'] = $orc_jul;
				$data['ur_half8'] = $orc_aug;
				$data['ur_half9'] = $orc_sep;
				$data['ur_half10'] = $orc_oct;
				$data['ur_half11'] = $orc_nov;
				$data['ur_half12'] = $orc_dec;
				$data['ur_half_avg'] = $orc_avg;
				$data['ur_half_min'] = $orc_min;
				$data['ur_half_max'] = $orc_max;

				$ur_half_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'HALF', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
				$data['ur_half_prev_year2_jan'] = 0;
				$data['ur_half_prev_year2_feb'] = 0;
				$data['ur_half_prev_year2_mar'] = 0;
				$data['ur_half_prev_year2_apr'] = 0;
				$data['ur_half_prev_year2_may'] = 0;
				$data['ur_half_prev_year2_jun'] = 0;
				$data['ur_half_prev_year2_jul'] = 0;
				$data['ur_half_prev_year2_aug'] = 0;
				$data['ur_half_prev_year2_sep'] = 0;
				$data['ur_half_prev_year2_oct'] = 0;
				$data['ur_half_prev_year2_nov'] = 0;
				$data['ur_half_prev_year2_dec'] = 0;
				$data['ur_half_prev_year2_avg'] = 0;
				$data['ur_half_prev_year2_min'] = 0;
				$data['ur_half_prev_year2_max'] = 0;

				foreach($ur_half_prev_year2 as $row){
					$data['ur_half_prev_year2_jan'] = $row->jan_price;
					$data['ur_half_prev_year2_feb'] = $row->feb_price;
					$data['ur_half_prev_year2_mar'] = $row->mar_price;
					$data['ur_half_prev_year2_apr'] = $row->apr_price;
					$data['ur_half_prev_year2_may'] = $row->may_price;
					$data['ur_half_prev_year2_jun'] = $row->jun_price;
					$data['ur_half_prev_year2_jul'] = $row->jul_price;
					$data['ur_half_prev_year2_aug'] = $row->aug_price;
					$data['ur_half_prev_year2_sep'] = $row->sep_price;
					$data['ur_half_prev_year2_oct'] = $row->oct_price;
					$data['ur_half_prev_year2_nov'] = $row->nov_price;
					$data['ur_half_prev_year2_dec'] = $row->dec_price;
					$data['ur_half_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ur_half_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ur_half_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}


				$ur_half_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'HALF', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1), 
					FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
				
				$data['ur_half_prev_year1_jan'] = 0;
				$data['ur_half_prev_year1_feb'] = 0;
				$data['ur_half_prev_year1_mar'] = 0;
				$data['ur_half_prev_year1_apr'] = 0;
				$data['ur_half_prev_year1_may'] = 0;
				$data['ur_half_prev_year1_jun'] = 0;
				$data['ur_half_prev_year1_jul'] = 0;
				$data['ur_half_prev_year1_aug'] = 0;
				$data['ur_half_prev_year1_sep'] = 0;
				$data['ur_half_prev_year1_oct'] = 0;
				$data['ur_half_prev_year1_nov'] = 0;
				$data['ur_half_prev_year1_dec'] = 0;
				$data['ur_half_prev_year1_avg'] = 0;
				$data['ur_half_prev_year1_min'] = 0;
				$data['ur_half_prev_year1_max'] = 0;

				foreach($ur_half_prev_year1 as $row){
					$data['ur_half_prev_year1_jan'] = $row->jan_price;
					$data['ur_half_prev_year1_feb'] = $row->feb_price;
					$data['ur_half_prev_year1_mar'] = $row->mar_price;
					$data['ur_half_prev_year1_apr'] = $row->apr_price;
					$data['ur_half_prev_year1_may'] = $row->may_price;
					$data['ur_half_prev_year1_jun'] = $row->jun_price;
					$data['ur_half_prev_year1_jul'] = $row->jul_price;
					$data['ur_half_prev_year1_aug'] = $row->aug_price;
					$data['ur_half_prev_year1_sep'] = $row->sep_price;
					$data['ur_half_prev_year1_oct'] = $row->oct_price;
					$data['ur_half_prev_year1_nov'] = $row->nov_price;
					$data['ur_half_prev_year1_dec'] = $row->dec_price;
					$data['ur_half_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ur_half_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ur_half_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}
			}
		}

		/*IMPROVED INASAL CLASSIC*/
		$join_ur_improved_inasal_classic = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_id IN ("1000741", "1000742")',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_improved_inasal_classic = $this->admin->get_join('sales_tbl a', $join_ur_improved_inasal_classic, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_improved_inasal_classic1'] = 0;
		$data['ur_improved_inasal_classic2'] = 0;
		$data['ur_improved_inasal_classic3'] = 0;
		$data['ur_improved_inasal_classic4'] = 0;
		$data['ur_improved_inasal_classic5'] = 0;
		$data['ur_improved_inasal_classic6'] = 0;
		$data['ur_improved_inasal_classic7'] = 0;
		$data['ur_improved_inasal_classic8'] = 0;
		$data['ur_improved_inasal_classic9'] = 0;
		$data['ur_improved_inasal_classic10'] = 0;
		$data['ur_improved_inasal_classic11'] = 0;
		$data['ur_improved_inasal_classic12'] = 0;
		$data['ur_improved_inasal_classic_total'] = 0;
		$data['ur_improved_inasal_classic_count'] = 0;
		$data['ur_improved_inasal_classic_avg'] = 0;
		$data['ur_improved_inasal_classic_min'] = 0;
		$data['ur_improved_inasal_classic_max'] = 0;

		foreach($get_ur_improved_inasal_classic as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_improved_inasal_classic' . $month] = $asp;
			$data['ur_improved_inasal_classic_total'] += $asp;

			if($asp < $data['ur_improved_inasal_classic_min'] || $data['ur_improved_inasal_classic_count'] == 0){
				$data['ur_improved_inasal_classic_min'] = $asp;
			}

			if($asp > $data['ur_improved_inasal_classic_max'] || $data['ur_improved_inasal_classic_count'] == 0){
				$data['ur_improved_inasal_classic_max'] = $asp;
			}

			$data['ur_improved_inasal_classic_count']++;
		}

		$data['ur_improved_inasal_classic_avg'] = $data['ur_improved_inasal_classic_total'] != 0 ? $data['ur_improved_inasal_classic_total'] / $data['ur_improved_inasal_classic_count'] : 0;

		$ur_improved_inasal_classic_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'IMPROVED INASAL CLASSIC', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_improved_inasal_classic_prev_year2_jan'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_feb'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_mar'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_apr'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_may'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_jun'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_jul'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_aug'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_sep'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_oct'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_nov'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_dec'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_avg'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_min'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_max'] = 0;

		foreach($ur_improved_inasal_classic_prev_year2 as $row){
			$data['ur_improved_inasal_classic_prev_year2_jan'] = $row->jan_price;
			$data['ur_improved_inasal_classic_prev_year2_feb'] = $row->feb_price;
			$data['ur_improved_inasal_classic_prev_year2_mar'] = $row->mar_price;
			$data['ur_improved_inasal_classic_prev_year2_apr'] = $row->apr_price;
			$data['ur_improved_inasal_classic_prev_year2_may'] = $row->may_price;
			$data['ur_improved_inasal_classic_prev_year2_jun'] = $row->jun_price;
			$data['ur_improved_inasal_classic_prev_year2_jul'] = $row->jul_price;
			$data['ur_improved_inasal_classic_prev_year2_aug'] = $row->aug_price;
			$data['ur_improved_inasal_classic_prev_year2_sep'] = $row->sep_price;
			$data['ur_improved_inasal_classic_prev_year2_oct'] = $row->oct_price;
			$data['ur_improved_inasal_classic_prev_year2_nov'] = $row->nov_price;
			$data['ur_improved_inasal_classic_prev_year2_dec'] = $row->dec_price;
			$data['ur_improved_inasal_classic_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_improved_inasal_classic_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_improved_inasal_classic_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_improved_inasal_classic_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'IMPROVED INASAL CLASSIC', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_improved_inasal_classic_prev_year1_jan'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_feb'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_mar'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_apr'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_may'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_jun'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_jul'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_aug'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_sep'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_oct'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_nov'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_dec'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_avg'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_min'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_max'] = 0;

		foreach($ur_improved_inasal_classic_prev_year1 as $row){
			$data['ur_improved_inasal_classic_prev_year1_jan'] = $row->jan_price;
			$data['ur_improved_inasal_classic_prev_year1_feb'] = $row->feb_price;
			$data['ur_improved_inasal_classic_prev_year1_mar'] = $row->mar_price;
			$data['ur_improved_inasal_classic_prev_year1_apr'] = $row->apr_price;
			$data['ur_improved_inasal_classic_prev_year1_may'] = $row->may_price;
			$data['ur_improved_inasal_classic_prev_year1_jun'] = $row->jun_price;
			$data['ur_improved_inasal_classic_prev_year1_jul'] = $row->jul_price;
			$data['ur_improved_inasal_classic_prev_year1_aug'] = $row->aug_price;
			$data['ur_improved_inasal_classic_prev_year1_sep'] = $row->sep_price;
			$data['ur_improved_inasal_classic_prev_year1_oct'] = $row->oct_price;
			$data['ur_improved_inasal_classic_prev_year1_nov'] = $row->nov_price;
			$data['ur_improved_inasal_classic_prev_year1_dec'] = $row->dec_price;
			$data['ur_improved_inasal_classic_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_improved_inasal_classic_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_improved_inasal_classic_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		
		/*IMPROVED SWEET AND SPICY*/

		$join_ur_improved_sweet_and_spicy = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_id IN ("1000755", "1000757")',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_improved_sweet_and_spicy = $this->admin->get_join('sales_tbl a', $join_ur_improved_sweet_and_spicy, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_improved_sweet_and_spicy1'] = 0;
		$data['ur_improved_sweet_and_spicy2'] = 0;
		$data['ur_improved_sweet_and_spicy3'] = 0;
		$data['ur_improved_sweet_and_spicy4'] = 0;
		$data['ur_improved_sweet_and_spicy5'] = 0;
		$data['ur_improved_sweet_and_spicy6'] = 0;
		$data['ur_improved_sweet_and_spicy7'] = 0;
		$data['ur_improved_sweet_and_spicy8'] = 0;
		$data['ur_improved_sweet_and_spicy9'] = 0;
		$data['ur_improved_sweet_and_spicy10'] = 0;
		$data['ur_improved_sweet_and_spicy11'] = 0;
		$data['ur_improved_sweet_and_spicy12'] = 0;
		$data['ur_improved_sweet_and_spicy_total'] = 0;
		$data['ur_improved_sweet_and_spicy_count'] = 0;
		$data['ur_improved_sweet_and_spicy_avg'] = 0;
		$data['ur_improved_sweet_and_spicy_min'] = 0;
		$data['ur_improved_sweet_and_spicy_max'] = 0;

		foreach($get_ur_improved_sweet_and_spicy as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_improved_sweet_and_spicy' . $month] = $asp;
			$data['ur_improved_sweet_and_spicy_total'] += $asp;

			if($asp < $data['ur_improved_sweet_and_spicy_min'] || $data['ur_improved_sweet_and_spicy_count'] == 0){
				$data['ur_improved_sweet_and_spicy_min'] = $asp;
			}

			if($asp > $data['ur_improved_sweet_and_spicy_max'] || $data['ur_improved_sweet_and_spicy_count'] == 0){
				$data['ur_improved_sweet_and_spicy_max'] = $asp;
			}

			$data['ur_improved_sweet_and_spicy_count']++;
		}

		$data['ur_improved_sweet_and_spicy_avg'] = $data['ur_improved_sweet_and_spicy_total'] != 0 ? $data['ur_improved_sweet_and_spicy_total'] / $data['ur_improved_sweet_and_spicy_count'] : 0;

		$ur_improved_sweet_and_spicy_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'IMPROVED SWEET AND SPICY', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_improved_sweet_and_spicy_prev_year2_jan'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_feb'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_mar'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_apr'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_may'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_jun'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_jul'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_aug'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_sep'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_oct'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_nov'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_dec'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_avg'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_min'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_max'] = 0;

		foreach($ur_improved_sweet_and_spicy_prev_year2 as $row){
			$data['ur_improved_sweet_and_spicy_prev_year2_jan'] = $row->jan_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_feb'] = $row->feb_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_mar'] = $row->mar_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_apr'] = $row->apr_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_may'] = $row->may_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_jun'] = $row->jun_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_jul'] = $row->jul_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_aug'] = $row->aug_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_sep'] = $row->sep_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_oct'] = $row->oct_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_nov'] = $row->nov_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_dec'] = $row->dec_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_improved_sweet_and_spicy_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_improved_sweet_and_spicy_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_improved_sweet_and_spicy_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'IMPROVED SWEET AND SPICY', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_improved_sweet_and_spicy_prev_year1_jan'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_feb'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_mar'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_apr'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_may'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_jun'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_jul'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_aug'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_sep'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_oct'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_nov'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_dec'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_avg'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_min'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_max'] = 0;

		foreach($ur_improved_sweet_and_spicy_prev_year1 as $row){
			$data['ur_improved_sweet_and_spicy_prev_year1_jan'] = $row->jan_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_feb'] = $row->feb_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_mar'] = $row->mar_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_apr'] = $row->apr_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_may'] = $row->may_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_jun'] = $row->jun_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_jul'] = $row->jul_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_aug'] = $row->aug_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_sep'] = $row->sep_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_oct'] = $row->oct_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_nov'] = $row->nov_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_dec'] = $row->dec_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_improved_sweet_and_spicy_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_improved_sweet_and_spicy_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*UR Liempo*/
		$join_ur_liempo = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "LIEMPO"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_liempo = $this->admin->get_join('sales_tbl a', $join_ur_liempo, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_liempo1'] = 0;
		$data['ur_liempo2'] = 0;
		$data['ur_liempo3'] = 0;
		$data['ur_liempo4'] = 0;
		$data['ur_liempo5'] = 0;
		$data['ur_liempo6'] = 0;
		$data['ur_liempo7'] = 0;
		$data['ur_liempo8'] = 0;
		$data['ur_liempo9'] = 0;
		$data['ur_liempo10'] = 0;
		$data['ur_liempo11'] = 0;
		$data['ur_liempo12'] = 0;
		$data['ur_liempo_total'] = 0;
		$data['ur_liempo_count'] = 0;
		$data['ur_liempo_avg'] = 0;
		$data['ur_liempo_min'] = 0;
		$data['ur_liempo_max'] = 0;

		foreach($get_ur_liempo as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_liempo' . $month] = $asp;
			$data['ur_liempo_total'] += $asp;

			if($asp < $data['ur_liempo_min'] || $data['ur_liempo_count'] == 0){
				$data['ur_liempo_min'] = $asp;
			}

			if($asp > $data['ur_liempo_max'] || $data['ur_liempo_count'] == 0){
				$data['ur_liempo_max'] = $asp;
			}

			$data['ur_liempo_count']++;
		}

		$data['ur_liempo_avg'] = $data['ur_liempo_total'] != 0 ? $data['ur_liempo_total'] / $data['ur_liempo_count'] : 0;

		$ur_liempo_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_liempo_prev_year2_jan'] = 0;
		$data['ur_liempo_prev_year2_feb'] = 0;
		$data['ur_liempo_prev_year2_mar'] = 0;
		$data['ur_liempo_prev_year2_apr'] = 0;
		$data['ur_liempo_prev_year2_may'] = 0;
		$data['ur_liempo_prev_year2_jun'] = 0;
		$data['ur_liempo_prev_year2_jul'] = 0;
		$data['ur_liempo_prev_year2_aug'] = 0;
		$data['ur_liempo_prev_year2_sep'] = 0;
		$data['ur_liempo_prev_year2_oct'] = 0;
		$data['ur_liempo_prev_year2_nov'] = 0;
		$data['ur_liempo_prev_year2_dec'] = 0;
		$data['ur_liempo_prev_year2_avg'] = 0;
		$data['ur_liempo_prev_year2_min'] = 0;
		$data['ur_liempo_prev_year2_max'] = 0;

		foreach($ur_liempo_prev_year2 as $row){
			$data['ur_liempo_prev_year2_jan'] = $row->jan_price;
			$data['ur_liempo_prev_year2_feb'] = $row->feb_price;
			$data['ur_liempo_prev_year2_mar'] = $row->mar_price;
			$data['ur_liempo_prev_year2_apr'] = $row->apr_price;
			$data['ur_liempo_prev_year2_may'] = $row->may_price;
			$data['ur_liempo_prev_year2_jun'] = $row->jun_price;
			$data['ur_liempo_prev_year2_jul'] = $row->jul_price;
			$data['ur_liempo_prev_year2_aug'] = $row->aug_price;
			$data['ur_liempo_prev_year2_sep'] = $row->sep_price;
			$data['ur_liempo_prev_year2_oct'] = $row->oct_price;
			$data['ur_liempo_prev_year2_nov'] = $row->nov_price;
			$data['ur_liempo_prev_year2_dec'] = $row->dec_price;
			$data['ur_liempo_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_liempo_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_liempo_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_liempo_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_liempo_prev_year1_jan'] = 0;
		$data['ur_liempo_prev_year1_feb'] = 0;
		$data['ur_liempo_prev_year1_mar'] = 0;
		$data['ur_liempo_prev_year1_apr'] = 0;
		$data['ur_liempo_prev_year1_may'] = 0;
		$data['ur_liempo_prev_year1_jun'] = 0;
		$data['ur_liempo_prev_year1_jul'] = 0;
		$data['ur_liempo_prev_year1_aug'] = 0;
		$data['ur_liempo_prev_year1_sep'] = 0;
		$data['ur_liempo_prev_year1_oct'] = 0;
		$data['ur_liempo_prev_year1_nov'] = 0;
		$data['ur_liempo_prev_year1_dec'] = 0;
		$data['ur_liempo_prev_year1_avg'] = 0;
		$data['ur_liempo_prev_year1_min'] = 0;
		$data['ur_liempo_prev_year1_max'] = 0;

		foreach($ur_liempo_prev_year1 as $row){
			$data['ur_liempo_prev_year1_jan'] = $row->jan_price;
			$data['ur_liempo_prev_year1_feb'] = $row->feb_price;
			$data['ur_liempo_prev_year1_mar'] = $row->mar_price;
			$data['ur_liempo_prev_year1_apr'] = $row->apr_price;
			$data['ur_liempo_prev_year1_may'] = $row->may_price;
			$data['ur_liempo_prev_year1_jun'] = $row->jun_price;
			$data['ur_liempo_prev_year1_jul'] = $row->jul_price;
			$data['ur_liempo_prev_year1_aug'] = $row->aug_price;
			$data['ur_liempo_prev_year1_sep'] = $row->sep_price;
			$data['ur_liempo_prev_year1_oct'] = $row->oct_price;
			$data['ur_liempo_prev_year1_nov'] = $row->nov_price;
			$data['ur_liempo_prev_year1_dec'] = $row->dec_price;
			$data['ur_liempo_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_liempo_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_liempo_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		
		/*UR Dressed*/
		$join_ur_dressed = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_dressed = $this->admin->get_join('sales_tbl a', $join_ur_dressed, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_dressed1'] = 0;
		$data['ur_dressed2'] = 0;
		$data['ur_dressed3'] = 0;
		$data['ur_dressed4'] = 0;
		$data['ur_dressed5'] = 0;
		$data['ur_dressed6'] = 0;
		$data['ur_dressed7'] = 0;
		$data['ur_dressed8'] = 0;
		$data['ur_dressed9'] = 0;
		$data['ur_dressed10'] = 0;
		$data['ur_dressed11'] = 0;
		$data['ur_dressed12'] = 0;
		$data['ur_dressed_total'] = 0;
		$data['ur_dressed_count'] = 0;
		$data['ur_dressed_avg'] = 0;
		$data['ur_dressed_min'] = 0;
		$data['ur_dressed_max'] = 0;

		foreach($get_ur_dressed as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_dressed' . $month] = $asp;
			$data['ur_dressed_total'] += $asp;

			if($asp < $data['ur_dressed_min'] || $data['ur_dressed_count'] == 0){
				$data['ur_dressed_min'] = $asp;
			}

			if($asp > $data['ur_dressed_max'] || $data['ur_dressed_count'] == 0){
				$data['ur_dressed_max'] = $asp;
			}

			$data['ur_dressed_count']++;
		}

		$data['ur_dressed_avg'] = $data['ur_dressed_total'] != 0 ? $data['ur_dressed_total'] / $data['ur_dressed_count'] : 0;

		$ur_dressed_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_dressed_prev_year2_jan'] = 0;
		$data['ur_dressed_prev_year2_feb'] = 0;
		$data['ur_dressed_prev_year2_mar'] = 0;
		$data['ur_dressed_prev_year2_apr'] = 0;
		$data['ur_dressed_prev_year2_may'] = 0;
		$data['ur_dressed_prev_year2_jun'] = 0;
		$data['ur_dressed_prev_year2_jul'] = 0;
		$data['ur_dressed_prev_year2_aug'] = 0;
		$data['ur_dressed_prev_year2_sep'] = 0;
		$data['ur_dressed_prev_year2_oct'] = 0;
		$data['ur_dressed_prev_year2_nov'] = 0;
		$data['ur_dressed_prev_year2_dec'] = 0;
		$data['ur_dressed_prev_year2_avg'] = 0;
		$data['ur_dressed_prev_year2_min'] = 0;
		$data['ur_dressed_prev_year2_max'] = 0;

		foreach($ur_dressed_prev_year2 as $row){
			$data['ur_dressed_prev_year2_jan'] = $row->jan_price;
			$data['ur_dressed_prev_year2_feb'] = $row->feb_price;
			$data['ur_dressed_prev_year2_mar'] = $row->mar_price;
			$data['ur_dressed_prev_year2_apr'] = $row->apr_price;
			$data['ur_dressed_prev_year2_may'] = $row->may_price;
			$data['ur_dressed_prev_year2_jun'] = $row->jun_price;
			$data['ur_dressed_prev_year2_jul'] = $row->jul_price;
			$data['ur_dressed_prev_year2_aug'] = $row->aug_price;
			$data['ur_dressed_prev_year2_sep'] = $row->sep_price;
			$data['ur_dressed_prev_year2_oct'] = $row->oct_price;
			$data['ur_dressed_prev_year2_nov'] = $row->nov_price;
			$data['ur_dressed_prev_year2_dec'] = $row->dec_price;
			$data['ur_dressed_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_dressed_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_dressed_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_dressed_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_dressed_prev_year1_jan'] = 0;
		$data['ur_dressed_prev_year1_feb'] = 0;
		$data['ur_dressed_prev_year1_mar'] = 0;
		$data['ur_dressed_prev_year1_apr'] = 0;
		$data['ur_dressed_prev_year1_may'] = 0;
		$data['ur_dressed_prev_year1_jun'] = 0;
		$data['ur_dressed_prev_year1_jul'] = 0;
		$data['ur_dressed_prev_year1_aug'] = 0;
		$data['ur_dressed_prev_year1_sep'] = 0;
		$data['ur_dressed_prev_year1_oct'] = 0;
		$data['ur_dressed_prev_year1_nov'] = 0;
		$data['ur_dressed_prev_year1_dec'] = 0;
		$data['ur_dressed_prev_year1_avg'] = 0;
		$data['ur_dressed_prev_year1_min'] = 0;
		$data['ur_dressed_prev_year1_max'] = 0;

		foreach($ur_dressed_prev_year1 as $row){
			$data['ur_dressed_prev_year1_jan'] = $row->jan_price;
			$data['ur_dressed_prev_year1_feb'] = $row->feb_price;
			$data['ur_dressed_prev_year1_mar'] = $row->mar_price;
			$data['ur_dressed_prev_year1_apr'] = $row->apr_price;
			$data['ur_dressed_prev_year1_may'] = $row->may_price;
			$data['ur_dressed_prev_year1_jun'] = $row->jun_price;
			$data['ur_dressed_prev_year1_jul'] = $row->jul_price;
			$data['ur_dressed_prev_year1_aug'] = $row->aug_price;
			$data['ur_dressed_prev_year1_sep'] = $row->sep_price;
			$data['ur_dressed_prev_year1_oct'] = $row->oct_price;
			$data['ur_dressed_prev_year1_nov'] = $row->nov_price;
			$data['ur_dressed_prev_year1_dec'] = $row->dec_price;
			$data['ur_dressed_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_dressed_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_dressed_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		

		/*UR Chooksies*/
		$join_ur_chooksies = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 10200095 OR d.material_code = 10200096 OR d.material_code = 10200097)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_chooksies = $this->admin->get_join('sales_tbl a', $join_ur_chooksies, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_chooksies1'] = 0;
		$data['ur_chooksies2'] = 0;
		$data['ur_chooksies3'] = 0;
		$data['ur_chooksies4'] = 0;
		$data['ur_chooksies5'] = 0;
		$data['ur_chooksies6'] = 0;
		$data['ur_chooksies7'] = 0;
		$data['ur_chooksies8'] = 0;
		$data['ur_chooksies9'] = 0;
		$data['ur_chooksies10'] = 0;
		$data['ur_chooksies11'] = 0;
		$data['ur_chooksies12'] = 0;
		$data['ur_chooksies_total'] = 0;
		$data['ur_chooksies_count'] = 0;
		$data['ur_chooksies_avg'] = 0;
		$data['ur_chooksies_min'] = 0;
		$data['ur_chooksies_max'] = 0;

		foreach($get_ur_chooksies as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_chooksies' . $month] = $asp;
			$data['ur_chooksies_total'] += $asp;

			if($asp < $data['ur_chooksies_min'] || $data['ur_chooksies_count'] == 0){
				$data['ur_chooksies_min'] = $asp;
			}

			if($asp > $data['ur_chooksies_max'] || $data['ur_chooksies_count'] == 0){
				$data['ur_chooksies_max'] = $asp;
			}

			$data['ur_chooksies_count']++;
		}

		$data['ur_chooksies_avg'] = $data['ur_chooksies_total'] != 0 ? $data['ur_chooksies_total'] / $data['ur_chooksies_count'] : 0;

		$ur_chooksies_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_chooksies_prev_year2_jan'] = 0;
		$data['ur_chooksies_prev_year2_feb'] = 0;
		$data['ur_chooksies_prev_year2_mar'] = 0;
		$data['ur_chooksies_prev_year2_apr'] = 0;
		$data['ur_chooksies_prev_year2_may'] = 0;
		$data['ur_chooksies_prev_year2_jun'] = 0;
		$data['ur_chooksies_prev_year2_jul'] = 0;
		$data['ur_chooksies_prev_year2_aug'] = 0;
		$data['ur_chooksies_prev_year2_sep'] = 0;
		$data['ur_chooksies_prev_year2_oct'] = 0;
		$data['ur_chooksies_prev_year2_nov'] = 0;
		$data['ur_chooksies_prev_year2_dec'] = 0;
		$data['ur_chooksies_prev_year2_avg'] = 0;
		$data['ur_chooksies_prev_year2_min'] = 0;
		$data['ur_chooksies_prev_year2_max'] = 0;

		foreach($ur_chooksies_prev_year2 as $row){
			$data['ur_chooksies_prev_year2_jan'] = $row->jan_price;
			$data['ur_chooksies_prev_year2_feb'] = $row->feb_price;
			$data['ur_chooksies_prev_year2_mar'] = $row->mar_price;
			$data['ur_chooksies_prev_year2_apr'] = $row->apr_price;
			$data['ur_chooksies_prev_year2_may'] = $row->may_price;
			$data['ur_chooksies_prev_year2_jun'] = $row->jun_price;
			$data['ur_chooksies_prev_year2_jul'] = $row->jul_price;
			$data['ur_chooksies_prev_year2_aug'] = $row->aug_price;
			$data['ur_chooksies_prev_year2_sep'] = $row->sep_price;
			$data['ur_chooksies_prev_year2_oct'] = $row->oct_price;
			$data['ur_chooksies_prev_year2_nov'] = $row->nov_price;
			$data['ur_chooksies_prev_year2_dec'] = $row->dec_price;
			$data['ur_chooksies_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_chooksies_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_chooksies_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_chooksies_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_chooksies_prev_year1_jan'] = 0;
		$data['ur_chooksies_prev_year1_feb'] = 0;
		$data['ur_chooksies_prev_year1_mar'] = 0;
		$data['ur_chooksies_prev_year1_apr'] = 0;
		$data['ur_chooksies_prev_year1_may'] = 0;
		$data['ur_chooksies_prev_year1_jun'] = 0;
		$data['ur_chooksies_prev_year1_jul'] = 0;
		$data['ur_chooksies_prev_year1_aug'] = 0;
		$data['ur_chooksies_prev_year1_sep'] = 0;
		$data['ur_chooksies_prev_year1_oct'] = 0;
		$data['ur_chooksies_prev_year1_nov'] = 0;
		$data['ur_chooksies_prev_year1_dec'] = 0;
		$data['ur_chooksies_prev_year1_avg'] = 0;
		$data['ur_chooksies_prev_year1_min'] = 0;
		$data['ur_chooksies_prev_year1_max'] = 0;

		foreach($ur_chooksies_prev_year1 as $row){
			$data['ur_chooksies_prev_year1_jan'] = $row->jan_price;
			$data['ur_chooksies_prev_year1_feb'] = $row->feb_price;
			$data['ur_chooksies_prev_year1_mar'] = $row->mar_price;
			$data['ur_chooksies_prev_year1_apr'] = $row->apr_price;
			$data['ur_chooksies_prev_year1_may'] = $row->may_price;
			$data['ur_chooksies_prev_year1_jun'] = $row->jun_price;
			$data['ur_chooksies_prev_year1_jul'] = $row->jul_price;
			$data['ur_chooksies_prev_year1_aug'] = $row->aug_price;
			$data['ur_chooksies_prev_year1_sep'] = $row->sep_price;
			$data['ur_chooksies_prev_year1_oct'] = $row->oct_price;
			$data['ur_chooksies_prev_year1_nov'] = $row->nov_price;
			$data['ur_chooksies_prev_year1_dec'] = $row->dec_price;
			$data['ur_chooksies_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_chooksies_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_chooksies_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$join_ur_marinado = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000638',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_marinado = $this->admin->get_join('sales_tbl a', $join_ur_marinado, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_marinado1'] = 0;
		$data['ur_marinado2'] = 0;
		$data['ur_marinado3'] = 0;
		$data['ur_marinado4'] = 0;
		$data['ur_marinado5'] = 0;
		$data['ur_marinado6'] = 0;
		$data['ur_marinado7'] = 0;
		$data['ur_marinado8'] = 0;
		$data['ur_marinado9'] = 0;
		$data['ur_marinado10'] = 0;
		$data['ur_marinado11'] = 0;
		$data['ur_marinado12'] = 0;
		$data['ur_marinado_total'] = 0;
		$data['ur_marinado_count'] = 0;
		$data['ur_marinado_avg'] = 0;
		$data['ur_marinado_min'] = 0;
		$data['ur_marinado_max'] = 0;

		foreach($get_ur_marinado as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_marinado' . $month] = $asp;
			$data['ur_marinado_total'] += $asp;

			if($asp < $data['ur_marinado_min'] || $data['ur_marinado_count'] == 0){
				$data['ur_marinado_min'] = $asp;
			}

			if($asp > $data['ur_marinado_max'] || $data['ur_marinado_count'] == 0){
				$data['ur_marinado_max'] = $asp;
			}

			$data['ur_marinado_count']++;
		}

		$data['ur_marinado_avg'] = $data['ur_marinado_total'] != 0 ? $data['ur_marinado_total'] / $data['ur_marinado_count'] : 0;

		$ur_marinado_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_marinado_prev_year2_jan'] = 0;
		$data['ur_marinado_prev_year2_feb'] = 0;
		$data['ur_marinado_prev_year2_mar'] = 0;
		$data['ur_marinado_prev_year2_apr'] = 0;
		$data['ur_marinado_prev_year2_may'] = 0;
		$data['ur_marinado_prev_year2_jun'] = 0;
		$data['ur_marinado_prev_year2_jul'] = 0;
		$data['ur_marinado_prev_year2_aug'] = 0;
		$data['ur_marinado_prev_year2_sep'] = 0;
		$data['ur_marinado_prev_year2_oct'] = 0;
		$data['ur_marinado_prev_year2_nov'] = 0;
		$data['ur_marinado_prev_year2_dec'] = 0;
		$data['ur_marinado_prev_year2_avg'] = 0;
		$data['ur_marinado_prev_year2_min'] = 0;
		$data['ur_marinado_prev_year2_max'] = 0;

		foreach($ur_marinado_prev_year2 as $row){
			$data['ur_marinado_prev_year2_jan'] = $row->jan_price;
			$data['ur_marinado_prev_year2_feb'] = $row->feb_price;
			$data['ur_marinado_prev_year2_mar'] = $row->mar_price;
			$data['ur_marinado_prev_year2_apr'] = $row->apr_price;
			$data['ur_marinado_prev_year2_may'] = $row->may_price;
			$data['ur_marinado_prev_year2_jun'] = $row->jun_price;
			$data['ur_marinado_prev_year2_jul'] = $row->jul_price;
			$data['ur_marinado_prev_year2_aug'] = $row->aug_price;
			$data['ur_marinado_prev_year2_sep'] = $row->sep_price;
			$data['ur_marinado_prev_year2_oct'] = $row->oct_price;
			$data['ur_marinado_prev_year2_nov'] = $row->nov_price;
			$data['ur_marinado_prev_year2_dec'] = $row->dec_price;
			$data['ur_marinado_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_marinado_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_marinado_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_marinado_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_marinado_prev_year1_jan'] = 0;
		$data['ur_marinado_prev_year1_feb'] = 0;
		$data['ur_marinado_prev_year1_mar'] = 0;
		$data['ur_marinado_prev_year1_apr'] = 0;
		$data['ur_marinado_prev_year1_may'] = 0;
		$data['ur_marinado_prev_year1_jun'] = 0;
		$data['ur_marinado_prev_year1_jul'] = 0;
		$data['ur_marinado_prev_year1_aug'] = 0;
		$data['ur_marinado_prev_year1_sep'] = 0;
		$data['ur_marinado_prev_year1_oct'] = 0;
		$data['ur_marinado_prev_year1_nov'] = 0;
		$data['ur_marinado_prev_year1_dec'] = 0;
		$data['ur_marinado_prev_year1_avg'] = 0;
		$data['ur_marinado_prev_year1_min'] = 0;
		$data['ur_marinado_prev_year1_max'] = 0;

		foreach($ur_marinado_prev_year1 as $row){
			$data['ur_marinado_prev_year1_jan'] = $row->jan_price;
			$data['ur_marinado_prev_year1_feb'] = $row->feb_price;
			$data['ur_marinado_prev_year1_mar'] = $row->mar_price;
			$data['ur_marinado_prev_year1_apr'] = $row->apr_price;
			$data['ur_marinado_prev_year1_may'] = $row->may_price;
			$data['ur_marinado_prev_year1_jun'] = $row->jun_price;
			$data['ur_marinado_prev_year1_jul'] = $row->jul_price;
			$data['ur_marinado_prev_year1_aug'] = $row->aug_price;
			$data['ur_marinado_prev_year1_sep'] = $row->sep_price;
			$data['ur_marinado_prev_year1_oct'] = $row->oct_price;
			$data['ur_marinado_prev_year1_nov'] = $row->nov_price;
			$data['ur_marinado_prev_year1_dec'] = $row->dec_price;
			$data['ur_marinado_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_marinado_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_marinado_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		$join_ur_spicy = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 10200090 OR d.material_code = 1000401 OR d.material_code = 1000402 OR d.material_code = 1000617)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_spicy = $this->admin->get_join('sales_tbl a', $join_ur_spicy, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_spicy1'] = 0;
		$data['ur_spicy2'] = 0;
		$data['ur_spicy3'] = 0;
		$data['ur_spicy4'] = 0;
		$data['ur_spicy5'] = 0;
		$data['ur_spicy6'] = 0;
		$data['ur_spicy7'] = 0;
		$data['ur_spicy8'] = 0;
		$data['ur_spicy9'] = 0;
		$data['ur_spicy10'] = 0;
		$data['ur_spicy11'] = 0;
		$data['ur_spicy12'] = 0;
		$data['ur_spicy_total'] = 0;
		$data['ur_spicy_count'] = 0;
		$data['ur_spicy_avg'] = 0;
		$data['ur_spicy_min'] = 0;
		$data['ur_spicy_max'] = 0;

		foreach($get_ur_spicy as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_spicy' . $month] = $asp;
			$data['ur_spicy_total'] += $asp;

			if($asp < $data['ur_spicy_min'] || $data['ur_spicy_count'] == 0){
				$data['ur_spicy_min'] = $asp;
			}

			if($asp > $data['ur_spicy_max'] || $data['ur_spicy_count'] == 0){
				$data['ur_spicy_max'] = $asp;
			}

			$data['ur_spicy_count']++;
		}

		$data['ur_spicy_avg'] = $data['ur_spicy_total'] != 0 ? $data['ur_spicy_total'] / $data['ur_spicy_count'] : 0;

		$ur_spicy_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_spicy_prev_year2_jan'] = 0;
		$data['ur_spicy_prev_year2_feb'] = 0;
		$data['ur_spicy_prev_year2_mar'] = 0;
		$data['ur_spicy_prev_year2_apr'] = 0;
		$data['ur_spicy_prev_year2_may'] = 0;
		$data['ur_spicy_prev_year2_jun'] = 0;
		$data['ur_spicy_prev_year2_jul'] = 0;
		$data['ur_spicy_prev_year2_aug'] = 0;
		$data['ur_spicy_prev_year2_sep'] = 0;
		$data['ur_spicy_prev_year2_oct'] = 0;
		$data['ur_spicy_prev_year2_nov'] = 0;
		$data['ur_spicy_prev_year2_dec'] = 0;
		$data['ur_spicy_prev_year2_avg'] = 0;
		$data['ur_spicy_prev_year2_min'] = 0;
		$data['ur_spicy_prev_year2_max'] = 0;

		foreach($ur_spicy_prev_year2 as $row){
			$data['ur_spicy_prev_year2_jan'] = $row->jan_price;
			$data['ur_spicy_prev_year2_feb'] = $row->feb_price;
			$data['ur_spicy_prev_year2_mar'] = $row->mar_price;
			$data['ur_spicy_prev_year2_apr'] = $row->apr_price;
			$data['ur_spicy_prev_year2_may'] = $row->may_price;
			$data['ur_spicy_prev_year2_jun'] = $row->jun_price;
			$data['ur_spicy_prev_year2_jul'] = $row->jul_price;
			$data['ur_spicy_prev_year2_aug'] = $row->aug_price;
			$data['ur_spicy_prev_year2_sep'] = $row->sep_price;
			$data['ur_spicy_prev_year2_oct'] = $row->oct_price;
			$data['ur_spicy_prev_year2_nov'] = $row->nov_price;
			$data['ur_spicy_prev_year2_dec'] = $row->dec_price;
			$data['ur_spicy_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_spicy_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_spicy_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_spicy_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_spicy_prev_year1_jan'] = 0;
		$data['ur_spicy_prev_year1_feb'] = 0;
		$data['ur_spicy_prev_year1_mar'] = 0;
		$data['ur_spicy_prev_year1_apr'] = 0;
		$data['ur_spicy_prev_year1_may'] = 0;
		$data['ur_spicy_prev_year1_jun'] = 0;
		$data['ur_spicy_prev_year1_jul'] = 0;
		$data['ur_spicy_prev_year1_aug'] = 0;
		$data['ur_spicy_prev_year1_sep'] = 0;
		$data['ur_spicy_prev_year1_oct'] = 0;
		$data['ur_spicy_prev_year1_nov'] = 0;
		$data['ur_spicy_prev_year1_dec'] = 0;
		$data['ur_spicy_prev_year1_avg'] = 0;
		$data['ur_spicy_prev_year1_min'] = 0;
		$data['ur_spicy_prev_year1_max'] = 0;

		foreach($ur_spicy_prev_year1 as $row){
			$data['ur_spicy_prev_year1_jan'] = $row->jan_price;
			$data['ur_spicy_prev_year1_feb'] = $row->feb_price;
			$data['ur_spicy_prev_year1_mar'] = $row->mar_price;
			$data['ur_spicy_prev_year1_apr'] = $row->apr_price;
			$data['ur_spicy_prev_year1_may'] = $row->may_price;
			$data['ur_spicy_prev_year1_jun'] = $row->jun_price;
			$data['ur_spicy_prev_year1_jul'] = $row->jul_price;
			$data['ur_spicy_prev_year1_aug'] = $row->aug_price;
			$data['ur_spicy_prev_year1_sep'] = $row->sep_price;
			$data['ur_spicy_prev_year1_oct'] = $row->oct_price;
			$data['ur_spicy_prev_year1_nov'] = $row->nov_price;
			$data['ur_spicy_prev_year1_dec'] = $row->dec_price;
			$data['ur_spicy_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_spicy_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_spicy_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*Barbeque*/
		$join_ur_barbeque = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000548',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER SPECIALTY PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_barbeque = $this->admin->get_join('sales_tbl a', $join_ur_barbeque, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_barbeque1'] = 0;
		$data['ur_barbeque2'] = 0;
		$data['ur_barbeque3'] = 0;
		$data['ur_barbeque4'] = 0;
		$data['ur_barbeque5'] = 0;
		$data['ur_barbeque6'] = 0;
		$data['ur_barbeque7'] = 0;
		$data['ur_barbeque8'] = 0;
		$data['ur_barbeque9'] = 0;
		$data['ur_barbeque10'] = 0;
		$data['ur_barbeque11'] = 0;
		$data['ur_barbeque12'] = 0;
		$data['ur_barbeque_total'] = 0;
		$data['ur_barbeque_count'] = 0;
		$data['ur_barbeque_avg'] = 0;
		$data['ur_barbeque_min'] = 0;
		$data['ur_barbeque_max'] = 0;

		foreach($get_ur_barbeque as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_barbeque' . $month] = $asp;
			$data['ur_barbeque_total'] += $asp;

			if($asp < $data['ur_barbeque_min'] || $data['ur_barbeque_count'] == 0){
				$data['ur_barbeque_min'] = $asp;
			}

			if($asp > $data['ur_barbeque_max'] || $data['ur_barbeque_count'] == 0){
				$data['ur_barbeque_max'] = $asp;
			}

			$data['ur_barbeque_count']++;
		}

		$data['ur_barbeque_avg'] = $data['ur_barbeque_total'] != 0 ? $data['ur_barbeque_total'] / $data['ur_barbeque_count'] : 0;


		$ur_barbeque_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BBQ', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_barbeque_prev_year2_jan'] = 0;
		$data['ur_barbeque_prev_year2_feb'] = 0;
		$data['ur_barbeque_prev_year2_mar'] = 0;
		$data['ur_barbeque_prev_year2_apr'] = 0;
		$data['ur_barbeque_prev_year2_may'] = 0;
		$data['ur_barbeque_prev_year2_jun'] = 0;
		$data['ur_barbeque_prev_year2_jul'] = 0;
		$data['ur_barbeque_prev_year2_aug'] = 0;
		$data['ur_barbeque_prev_year2_sep'] = 0;
		$data['ur_barbeque_prev_year2_oct'] = 0;
		$data['ur_barbeque_prev_year2_nov'] = 0;
		$data['ur_barbeque_prev_year2_dec'] = 0;
		$data['ur_barbeque_prev_year2_avg'] = 0;
		$data['ur_barbeque_prev_year2_min'] = 0;
		$data['ur_barbeque_prev_year2_max'] = 0;

		foreach($ur_barbeque_prev_year2 as $row){
			$data['ur_barbeque_prev_year2_jan'] = $row->jan_price;
			$data['ur_barbeque_prev_year2_feb'] = $row->feb_price;
			$data['ur_barbeque_prev_year2_mar'] = $row->mar_price;
			$data['ur_barbeque_prev_year2_apr'] = $row->apr_price;
			$data['ur_barbeque_prev_year2_may'] = $row->may_price;
			$data['ur_barbeque_prev_year2_jun'] = $row->jun_price;
			$data['ur_barbeque_prev_year2_jul'] = $row->jul_price;
			$data['ur_barbeque_prev_year2_aug'] = $row->aug_price;
			$data['ur_barbeque_prev_year2_sep'] = $row->sep_price;
			$data['ur_barbeque_prev_year2_oct'] = $row->oct_price;
			$data['ur_barbeque_prev_year2_nov'] = $row->nov_price;
			$data['ur_barbeque_prev_year2_dec'] = $row->dec_price;
			$data['ur_barbeque_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_barbeque_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_barbeque_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_barbeque_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BBQ', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_barbeque_prev_year1_jan'] = 0;
		$data['ur_barbeque_prev_year1_feb'] = 0;
		$data['ur_barbeque_prev_year1_mar'] = 0;
		$data['ur_barbeque_prev_year1_apr'] = 0;
		$data['ur_barbeque_prev_year1_may'] = 0;
		$data['ur_barbeque_prev_year1_jun'] = 0;
		$data['ur_barbeque_prev_year1_jul'] = 0;
		$data['ur_barbeque_prev_year1_aug'] = 0;
		$data['ur_barbeque_prev_year1_sep'] = 0;
		$data['ur_barbeque_prev_year1_oct'] = 0;
		$data['ur_barbeque_prev_year1_nov'] = 0;
		$data['ur_barbeque_prev_year1_dec'] = 0;
		$data['ur_barbeque_prev_year1_avg'] = 0;
		$data['ur_barbeque_prev_year1_min'] = 0;
		$data['ur_barbeque_prev_year1_max'] = 0;

		foreach($ur_barbeque_prev_year1 as $row){
			$data['ur_barbeque_prev_year1_jan'] = $row->jan_price;
			$data['ur_barbeque_prev_year1_feb'] = $row->feb_price;
			$data['ur_barbeque_prev_year1_mar'] = $row->mar_price;
			$data['ur_barbeque_prev_year1_apr'] = $row->apr_price;
			$data['ur_barbeque_prev_year1_may'] = $row->may_price;
			$data['ur_barbeque_prev_year1_jun'] = $row->jun_price;
			$data['ur_barbeque_prev_year1_jul'] = $row->jul_price;
			$data['ur_barbeque_prev_year1_aug'] = $row->aug_price;
			$data['ur_barbeque_prev_year1_sep'] = $row->sep_price;
			$data['ur_barbeque_prev_year1_oct'] = $row->oct_price;
			$data['ur_barbeque_prev_year1_nov'] = $row->nov_price;
			$data['ur_barbeque_prev_year1_dec'] = $row->dec_price;
			$data['ur_barbeque_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_barbeque_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_barbeque_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*Nuggets*/
		$join_ur_nuggets = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 40000016 OR d.material_code = 40000019)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER VAP PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTERS\''
		);

		$get_ur_nuggets = $this->admin->get_join('sales_tbl a', $join_ur_nuggets, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_nuggets1'] = 0;
		$data['ur_nuggets2'] = 0;
		$data['ur_nuggets3'] = 0;
		$data['ur_nuggets4'] = 0;
		$data['ur_nuggets5'] = 0;
		$data['ur_nuggets6'] = 0;
		$data['ur_nuggets7'] = 0;
		$data['ur_nuggets8'] = 0;
		$data['ur_nuggets9'] = 0;
		$data['ur_nuggets10'] = 0;
		$data['ur_nuggets11'] = 0;
		$data['ur_nuggets12'] = 0;
		$data['ur_nuggets_total'] = 0;
		$data['ur_nuggets_count'] = 0;
		$data['ur_nuggets_avg'] = 0;
		$data['ur_nuggets_min'] = 0;
		$data['ur_nuggets_max'] = 0;

		foreach($get_ur_nuggets as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_nuggets' . $month] = $asp;
			$data['ur_nuggets_total'] += $asp;

			if($asp < $data['ur_nuggets_min'] || $data['ur_nuggets_count'] == 0){
				$data['ur_nuggets_min'] = $asp;
			}

			if($asp > $data['ur_nuggets_max'] || $data['ur_nuggets_count'] == 0){
				$data['ur_nuggets_max'] = $asp;
			}

			$data['ur_nuggets_count']++;
		}

		$data['ur_nuggets_avg'] = $data['ur_nuggets_total'] != 0 ? $data['ur_nuggets_total'] / $data['ur_nuggets_count'] : 0;


		$ur_nuggets_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-NUGGETS', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_nuggets_prev_year2_jan'] = 0;
		$data['ur_nuggets_prev_year2_feb'] = 0;
		$data['ur_nuggets_prev_year2_mar'] = 0;
		$data['ur_nuggets_prev_year2_apr'] = 0;
		$data['ur_nuggets_prev_year2_may'] = 0;
		$data['ur_nuggets_prev_year2_jun'] = 0;
		$data['ur_nuggets_prev_year2_jul'] = 0;
		$data['ur_nuggets_prev_year2_aug'] = 0;
		$data['ur_nuggets_prev_year2_sep'] = 0;
		$data['ur_nuggets_prev_year2_oct'] = 0;
		$data['ur_nuggets_prev_year2_nov'] = 0;
		$data['ur_nuggets_prev_year2_dec'] = 0;
		$data['ur_nuggets_prev_year2_avg'] = 0;
		$data['ur_nuggets_prev_year2_min'] = 0;
		$data['ur_nuggets_prev_year2_max'] = 0;

		foreach($ur_nuggets_prev_year2 as $row){
			$data['ur_nuggets_prev_year2_jan'] = $row->jan_price;
			$data['ur_nuggets_prev_year2_feb'] = $row->feb_price;
			$data['ur_nuggets_prev_year2_mar'] = $row->mar_price;
			$data['ur_nuggets_prev_year2_apr'] = $row->apr_price;
			$data['ur_nuggets_prev_year2_may'] = $row->may_price;
			$data['ur_nuggets_prev_year2_jun'] = $row->jun_price;
			$data['ur_nuggets_prev_year2_jul'] = $row->jul_price;
			$data['ur_nuggets_prev_year2_aug'] = $row->aug_price;
			$data['ur_nuggets_prev_year2_sep'] = $row->sep_price;
			$data['ur_nuggets_prev_year2_oct'] = $row->oct_price;
			$data['ur_nuggets_prev_year2_nov'] = $row->nov_price;
			$data['ur_nuggets_prev_year2_dec'] = $row->dec_price;
			$data['ur_nuggets_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_nuggets_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_nuggets_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_nuggets_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-NUGGETS', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_nuggets_prev_year1_jan'] = 0;
		$data['ur_nuggets_prev_year1_feb'] = 0;
		$data['ur_nuggets_prev_year1_mar'] = 0;
		$data['ur_nuggets_prev_year1_apr'] = 0;
		$data['ur_nuggets_prev_year1_may'] = 0;
		$data['ur_nuggets_prev_year1_jun'] = 0;
		$data['ur_nuggets_prev_year1_jul'] = 0;
		$data['ur_nuggets_prev_year1_aug'] = 0;
		$data['ur_nuggets_prev_year1_sep'] = 0;
		$data['ur_nuggets_prev_year1_oct'] = 0;
		$data['ur_nuggets_prev_year1_nov'] = 0;
		$data['ur_nuggets_prev_year1_dec'] = 0;
		$data['ur_nuggets_prev_year1_avg'] = 0;
		$data['ur_nuggets_prev_year1_min'] = 0;
		$data['ur_nuggets_prev_year1_max'] = 0;

		foreach($ur_nuggets_prev_year1 as $row){
			$data['ur_nuggets_prev_year1_jan'] = $row->jan_price;
			$data['ur_nuggets_prev_year1_feb'] = $row->feb_price;
			$data['ur_nuggets_prev_year1_mar'] = $row->mar_price;
			$data['ur_nuggets_prev_year1_apr'] = $row->apr_price;
			$data['ur_nuggets_prev_year1_may'] = $row->may_price;
			$data['ur_nuggets_prev_year1_jun'] = $row->jun_price;
			$data['ur_nuggets_prev_year1_jul'] = $row->jul_price;
			$data['ur_nuggets_prev_year1_aug'] = $row->aug_price;
			$data['ur_nuggets_prev_year1_sep'] = $row->sep_price;
			$data['ur_nuggets_prev_year1_oct'] = $row->oct_price;
			$data['ur_nuggets_prev_year1_nov'] = $row->nov_price;
			$data['ur_nuggets_prev_year1_dec'] = $row->dec_price;
			$data['ur_nuggets_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_nuggets_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_nuggets_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*UR 11 PC PICA PICA CUTS*/

		$join_ur_pica = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 10400170',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_pica = $this->admin->get_join('sales_tbl a', $join_ur_pica, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_pica1'] = 0;
		$data['ur_pica2'] = 0;
		$data['ur_pica3'] = 0;
		$data['ur_pica4'] = 0;
		$data['ur_pica5'] = 0;
		$data['ur_pica6'] = 0;
		$data['ur_pica7'] = 0;
		$data['ur_pica8'] = 0;
		$data['ur_pica9'] = 0;
		$data['ur_pica10'] = 0;
		$data['ur_pica11'] = 0;
		$data['ur_pica12'] = 0;
		$data['ur_pica_total'] = 0;
		$data['ur_pica_count'] = 0;
		$data['ur_pica_avg'] = 0;
		$data['ur_pica_min'] = 0;
		$data['ur_pica_max'] = 0;

		foreach($get_ur_pica as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_pica' . $month] = $asp;
			$data['ur_pica_total'] += $asp;

			if($asp < $data['ur_pica_min'] || $data['ur_pica_count'] == 0){
				$data['ur_pica_min'] = $asp;
			}

			if($asp > $data['ur_pica_max'] || $data['ur_pica_count'] == 0){
				$data['ur_pica_max'] = $asp;
			}

			$data['ur_pica_count']++;
		}

		$data['ur_pica_avg'] = $data['ur_pica_total'] != 0 ? $data['ur_pica_total'] / $data['ur_pica_count'] : 0;


		$ur_pica_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_pica_prev_year2_jan'] = 0;
		$data['ur_pica_prev_year2_feb'] = 0;
		$data['ur_pica_prev_year2_mar'] = 0;
		$data['ur_pica_prev_year2_apr'] = 0;
		$data['ur_pica_prev_year2_may'] = 0;
		$data['ur_pica_prev_year2_jun'] = 0;
		$data['ur_pica_prev_year2_jul'] = 0;
		$data['ur_pica_prev_year2_aug'] = 0;
		$data['ur_pica_prev_year2_sep'] = 0;
		$data['ur_pica_prev_year2_oct'] = 0;
		$data['ur_pica_prev_year2_nov'] = 0;
		$data['ur_pica_prev_year2_dec'] = 0;
		$data['ur_pica_prev_year2_avg'] = 0;
		$data['ur_pica_prev_year2_min'] = 0;
		$data['ur_pica_prev_year2_max'] = 0;

		foreach($ur_pica_prev_year2 as $row){
			$data['ur_pica_prev_year2_jan'] = $row->jan_price;
			$data['ur_pica_prev_year2_feb'] = $row->feb_price;
			$data['ur_pica_prev_year2_mar'] = $row->mar_price;
			$data['ur_pica_prev_year2_apr'] = $row->apr_price;
			$data['ur_pica_prev_year2_may'] = $row->may_price;
			$data['ur_pica_prev_year2_jun'] = $row->jun_price;
			$data['ur_pica_prev_year2_jul'] = $row->jul_price;
			$data['ur_pica_prev_year2_aug'] = $row->aug_price;
			$data['ur_pica_prev_year2_sep'] = $row->sep_price;
			$data['ur_pica_prev_year2_oct'] = $row->oct_price;
			$data['ur_pica_prev_year2_nov'] = $row->nov_price;
			$data['ur_pica_prev_year2_dec'] = $row->dec_price;
			$data['ur_pica_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_pica_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_pica_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_pica_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_pica_prev_year1_jan'] = 0;
		$data['ur_pica_prev_year1_feb'] = 0;
		$data['ur_pica_prev_year1_mar'] = 0;
		$data['ur_pica_prev_year1_apr'] = 0;
		$data['ur_pica_prev_year1_may'] = 0;
		$data['ur_pica_prev_year1_jun'] = 0;
		$data['ur_pica_prev_year1_jul'] = 0;
		$data['ur_pica_prev_year1_aug'] = 0;
		$data['ur_pica_prev_year1_sep'] = 0;
		$data['ur_pica_prev_year1_oct'] = 0;
		$data['ur_pica_prev_year1_nov'] = 0;
		$data['ur_pica_prev_year1_dec'] = 0;
		$data['ur_pica_prev_year1_avg'] = 0;
		$data['ur_pica_prev_year1_min'] = 0;
		$data['ur_pica_prev_year1_max'] = 0;

		foreach($ur_pica_prev_year1 as $row){
			$data['ur_pica_prev_year1_jan'] = $row->jan_price;
			$data['ur_pica_prev_year1_feb'] = $row->feb_price;
			$data['ur_pica_prev_year1_mar'] = $row->mar_price;
			$data['ur_pica_prev_year1_apr'] = $row->apr_price;
			$data['ur_pica_prev_year1_may'] = $row->may_price;
			$data['ur_pica_prev_year1_jun'] = $row->jun_price;
			$data['ur_pica_prev_year1_jul'] = $row->jul_price;
			$data['ur_pica_prev_year1_aug'] = $row->aug_price;
			$data['ur_pica_prev_year1_sep'] = $row->sep_price;
			$data['ur_pica_prev_year1_oct'] = $row->oct_price;
			$data['ur_pica_prev_year1_nov'] = $row->nov_price;
			$data['ur_pica_prev_year1_dec'] = $row->dec_price;
			$data['ur_pica_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_pica_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_pica_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*1 PC BOSSING CUTS */
		
		$join_ur_bossing = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 10400184',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_bossing = $this->admin->get_join('sales_tbl a', $join_ur_bossing, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_bossing1'] = 0;
		$data['ur_bossing2'] = 0;
		$data['ur_bossing3'] = 0;
		$data['ur_bossing4'] = 0;
		$data['ur_bossing5'] = 0;
		$data['ur_bossing6'] = 0;
		$data['ur_bossing7'] = 0;
		$data['ur_bossing8'] = 0;
		$data['ur_bossing9'] = 0;
		$data['ur_bossing10'] = 0;
		$data['ur_bossing11'] = 0;
		$data['ur_bossing12'] = 0;
		$data['ur_bossing_total'] = 0;
		$data['ur_bossing_count'] = 0;
		$data['ur_bossing_avg'] = 0;
		$data['ur_bossing_min'] = 0;
		$data['ur_bossing_max'] = 0;

		foreach($get_ur_bossing as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_bossing' . $month] = $asp;
			$data['ur_bossing_total'] += $asp;

			if($asp < $data['ur_bossing_min'] || $data['ur_bossing_count'] == 0){
				$data['ur_bossing_min'] = $asp;
			}

			if($asp > $data['ur_bossing_max'] || $data['ur_bossing_count'] == 0){
				$data['ur_bossing_max'] = $asp;
			}

			$data['ur_bossing_count']++;
		}

		$data['ur_bossing_avg'] = $data['ur_bossing_total'] != 0 ? $data['ur_bossing_total'] / $data['ur_bossing_count'] : 0;


		$ur_bossing_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '1 PC', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_bossing_prev_year2_jan'] = 0;
		$data['ur_bossing_prev_year2_feb'] = 0;
		$data['ur_bossing_prev_year2_mar'] = 0;
		$data['ur_bossing_prev_year2_apr'] = 0;
		$data['ur_bossing_prev_year2_may'] = 0;
		$data['ur_bossing_prev_year2_jun'] = 0;
		$data['ur_bossing_prev_year2_jul'] = 0;
		$data['ur_bossing_prev_year2_aug'] = 0;
		$data['ur_bossing_prev_year2_sep'] = 0;
		$data['ur_bossing_prev_year2_oct'] = 0;
		$data['ur_bossing_prev_year2_nov'] = 0;
		$data['ur_bossing_prev_year2_dec'] = 0;
		$data['ur_bossing_prev_year2_avg'] = 0;
		$data['ur_bossing_prev_year2_min'] = 0;
		$data['ur_bossing_prev_year2_max'] = 0;

		foreach($ur_bossing_prev_year2 as $row){
			$data['ur_bossing_prev_year2_jan'] = $row->jan_price;
			$data['ur_bossing_prev_year2_feb'] = $row->feb_price;
			$data['ur_bossing_prev_year2_mar'] = $row->mar_price;
			$data['ur_bossing_prev_year2_apr'] = $row->apr_price;
			$data['ur_bossing_prev_year2_may'] = $row->may_price;
			$data['ur_bossing_prev_year2_jun'] = $row->jun_price;
			$data['ur_bossing_prev_year2_jul'] = $row->jul_price;
			$data['ur_bossing_prev_year2_aug'] = $row->aug_price;
			$data['ur_bossing_prev_year2_sep'] = $row->sep_price;
			$data['ur_bossing_prev_year2_oct'] = $row->oct_price;
			$data['ur_bossing_prev_year2_nov'] = $row->nov_price;
			$data['ur_bossing_prev_year2_dec'] = $row->dec_price;
			$data['ur_bossing_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_bossing_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_bossing_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_bossing_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_bossing_prev_year1_jan'] = 0;
		$data['ur_bossing_prev_year1_feb'] = 0;
		$data['ur_bossing_prev_year1_mar'] = 0;
		$data['ur_bossing_prev_year1_apr'] = 0;
		$data['ur_bossing_prev_year1_may'] = 0;
		$data['ur_bossing_prev_year1_jun'] = 0;
		$data['ur_bossing_prev_year1_jul'] = 0;
		$data['ur_bossing_prev_year1_aug'] = 0;
		$data['ur_bossing_prev_year1_sep'] = 0;
		$data['ur_bossing_prev_year1_oct'] = 0;
		$data['ur_bossing_prev_year1_nov'] = 0;
		$data['ur_bossing_prev_year1_dec'] = 0;
		$data['ur_bossing_prev_year1_avg'] = 0;
		$data['ur_bossing_prev_year1_min'] = 0;
		$data['ur_bossing_prev_year1_max'] = 0;

		foreach($ur_bossing_prev_year1 as $row){
			$data['ur_bossing_prev_year1_jan'] = $row->jan_price;
			$data['ur_bossing_prev_year1_feb'] = $row->feb_price;
			$data['ur_bossing_prev_year1_mar'] = $row->mar_price;
			$data['ur_bossing_prev_year1_apr'] = $row->apr_price;
			$data['ur_bossing_prev_year1_may'] = $row->may_price;
			$data['ur_bossing_prev_year1_jun'] = $row->jun_price;
			$data['ur_bossing_prev_year1_jul'] = $row->jul_price;
			$data['ur_bossing_prev_year1_aug'] = $row->aug_price;
			$data['ur_bossing_prev_year1_sep'] = $row->sep_price;
			$data['ur_bossing_prev_year1_oct'] = $row->oct_price;
			$data['ur_bossing_prev_year1_nov'] = $row->nov_price;
			$data['ur_bossing_prev_year1_dec'] = $row->dec_price;
			$data['ur_bossing_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_bossing_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_bossing_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*UR Chooksies Cut ups*/
		$join_ur_cutups = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 10000150',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'NON MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_cutups = $this->admin->get_join('sales_tbl a', $join_ur_cutups, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_cutups1'] = 0;
		$data['ur_cutups2'] = 0;
		$data['ur_cutups3'] = 0;
		$data['ur_cutups4'] = 0;
		$data['ur_cutups5'] = 0;
		$data['ur_cutups6'] = 0;
		$data['ur_cutups7'] = 0;
		$data['ur_cutups8'] = 0;
		$data['ur_cutups9'] = 0;
		$data['ur_cutups10'] = 0;
		$data['ur_cutups11'] = 0;
		$data['ur_cutups12'] = 0;
		$data['ur_cutups_total'] = 0;
		$data['ur_cutups_count'] = 0;
		$data['ur_cutups_avg'] = 0;
		$data['ur_cutups_min'] = 0;
		$data['ur_cutups_max'] = 0;

		foreach($get_ur_cutups as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_cutups' . $month] = $asp;
			$data['ur_cutups_total'] += $asp;

			if($asp < $data['ur_cutups_min'] || $data['ur_cutups_count'] == 0){
				$data['ur_cutups_min'] = $asp;
			}

			if($asp > $data['ur_cutups_max'] || $data['ur_cutups_count'] == 0){
				$data['ur_cutups_max'] = $asp;
			}

			$data['ur_cutups_count']++;
		}

		$data['ur_cutups_avg'] = $data['ur_cutups_total'] != 0 ? $data['ur_cutups_total'] / $data['ur_cutups_count'] : 0;


		$ur_cutups_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => ' CHOOKSIES CUTUPS', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_cutups_prev_year2_jan'] = 0;
		$data['ur_cutups_prev_year2_feb'] = 0;
		$data['ur_cutups_prev_year2_mar'] = 0;
		$data['ur_cutups_prev_year2_apr'] = 0;
		$data['ur_cutups_prev_year2_may'] = 0;
		$data['ur_cutups_prev_year2_jun'] = 0;
		$data['ur_cutups_prev_year2_jul'] = 0;
		$data['ur_cutups_prev_year2_aug'] = 0;
		$data['ur_cutups_prev_year2_sep'] = 0;
		$data['ur_cutups_prev_year2_oct'] = 0;
		$data['ur_cutups_prev_year2_nov'] = 0;
		$data['ur_cutups_prev_year2_dec'] = 0;
		$data['ur_cutups_prev_year2_avg'] = 0;
		$data['ur_cutups_prev_year2_min'] = 0;
		$data['ur_cutups_prev_year2_max'] = 0;

		foreach($ur_cutups_prev_year2 as $row){
			$data['ur_cutups_prev_year2_jan'] = $row->jan_price;
			$data['ur_cutups_prev_year2_feb'] = $row->feb_price;
			$data['ur_cutups_prev_year2_mar'] = $row->mar_price;
			$data['ur_cutups_prev_year2_apr'] = $row->apr_price;
			$data['ur_cutups_prev_year2_may'] = $row->may_price;
			$data['ur_cutups_prev_year2_jun'] = $row->jun_price;
			$data['ur_cutups_prev_year2_jul'] = $row->jul_price;
			$data['ur_cutups_prev_year2_aug'] = $row->aug_price;
			$data['ur_cutups_prev_year2_sep'] = $row->sep_price;
			$data['ur_cutups_prev_year2_oct'] = $row->oct_price;
			$data['ur_cutups_prev_year2_nov'] = $row->nov_price;
			$data['ur_cutups_prev_year2_dec'] = $row->dec_price;
			$data['ur_cutups_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_cutups_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_cutups_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_cutups_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES CUTUPS', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_cutups_prev_year1_jan'] = 0;
		$data['ur_cutups_prev_year1_feb'] = 0;
		$data['ur_cutups_prev_year1_mar'] = 0;
		$data['ur_cutups_prev_year1_apr'] = 0;
		$data['ur_cutups_prev_year1_may'] = 0;
		$data['ur_cutups_prev_year1_jun'] = 0;
		$data['ur_cutups_prev_year1_jul'] = 0;
		$data['ur_cutups_prev_year1_aug'] = 0;
		$data['ur_cutups_prev_year1_sep'] = 0;
		$data['ur_cutups_prev_year1_oct'] = 0;
		$data['ur_cutups_prev_year1_nov'] = 0;
		$data['ur_cutups_prev_year1_dec'] = 0;
		$data['ur_cutups_prev_year1_avg'] = 0;
		$data['ur_cutups_prev_year1_min'] = 0;
		$data['ur_cutups_prev_year1_max'] = 0;

		foreach($ur_cutups_prev_year1 as $row){
			$data['ur_cutups_prev_year1_jan'] = $row->jan_price;
			$data['ur_cutups_prev_year1_feb'] = $row->feb_price;
			$data['ur_cutups_prev_year1_mar'] = $row->mar_price;
			$data['ur_cutups_prev_year1_apr'] = $row->apr_price;
			$data['ur_cutups_prev_year1_may'] = $row->may_price;
			$data['ur_cutups_prev_year1_jun'] = $row->jun_price;
			$data['ur_cutups_prev_year1_jul'] = $row->jul_price;
			$data['ur_cutups_prev_year1_aug'] = $row->aug_price;
			$data['ur_cutups_prev_year1_sep'] = $row->sep_price;
			$data['ur_cutups_prev_year1_oct'] = $row->oct_price;
			$data['ur_cutups_prev_year1_nov'] = $row->nov_price;
			$data['ur_cutups_prev_year1_dec'] = $row->dec_price;
			$data['ur_cutups_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_cutups_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_cutups_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*UR Liver / Gizzard*/
		$join_ur_liver = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVER / GIZZARD\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_liver = $this->admin->get_join('sales_tbl a', $join_ur_liver, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_liver1'] = 0;
		$data['ur_liver2'] = 0;
		$data['ur_liver3'] = 0;
		$data['ur_liver4'] = 0;
		$data['ur_liver5'] = 0;
		$data['ur_liver6'] = 0;
		$data['ur_liver7'] = 0;
		$data['ur_liver8'] = 0;
		$data['ur_liver9'] = 0;
		$data['ur_liver10'] = 0;
		$data['ur_liver11'] = 0;
		$data['ur_liver12'] = 0;
		$data['ur_liver_total'] = 0;
		$data['ur_liver_count'] = 0;
		$data['ur_liver_avg'] = 0;
		$data['ur_liver_min'] = 0;
		$data['ur_liver_max'] = 0;

		foreach($get_ur_liver as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_liver' . $month] = $asp;
			$data['ur_liver_total'] += $asp;

			if($asp < $data['ur_liver_min'] || $data['ur_liver_count'] == 0){
				$data['ur_cutups_min'] = $asp;
			}

			if($asp > $data['ur_liver_max'] || $data['ur_liver_count'] == 0){
				$data['ur_liver_max'] = $asp;
			}

			$data['ur_liver_count']++;
		}

		$data['ur_liver_avg'] = $data['ur_liver_total'] != 0 ? $data['ur_liver_total'] / $data['ur_liver_count'] : 0;


		$ur_liver_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'GIZZARD / LIVER', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_liver_prev_year2_jan'] = 0;
		$data['ur_liver_prev_year2_feb'] = 0;
		$data['ur_liver_prev_year2_mar'] = 0;
		$data['ur_liver_prev_year2_apr'] = 0;
		$data['ur_liver_prev_year2_may'] = 0;
		$data['ur_liver_prev_year2_jun'] = 0;
		$data['ur_liver_prev_year2_jul'] = 0;
		$data['ur_liver_prev_year2_aug'] = 0;
		$data['ur_liver_prev_year2_sep'] = 0;
		$data['ur_liver_prev_year2_oct'] = 0;
		$data['ur_liver_prev_year2_nov'] = 0;
		$data['ur_liver_prev_year2_dec'] = 0;
		$data['ur_liver_prev_year2_avg'] = 0;
		$data['ur_liver_prev_year2_min'] = 0;
		$data['ur_liver_prev_year2_max'] = 0;

		foreach($ur_liver_prev_year2 as $row){
			$data['ur_liver_prev_year2_jan'] = $row->jan_price;
			$data['ur_liver_prev_year2_feb'] = $row->feb_price;
			$data['ur_liver_prev_year2_mar'] = $row->mar_price;
			$data['ur_liver_prev_year2_apr'] = $row->apr_price;
			$data['ur_liver_prev_year2_may'] = $row->may_price;
			$data['ur_liver_prev_year2_jun'] = $row->jun_price;
			$data['ur_liver_prev_year2_jul'] = $row->jul_price;
			$data['ur_liver_prev_year2_aug'] = $row->aug_price;
			$data['ur_liver_prev_year2_sep'] = $row->sep_price;
			$data['ur_liver_prev_year2_oct'] = $row->oct_price;
			$data['ur_liver_prev_year2_nov'] = $row->nov_price;
			$data['ur_liver_prev_year2_dec'] = $row->dec_price;
			$data['ur_liver_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_liver_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_liver_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_liver_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'GIZZARD / LIVER', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_liver_prev_year1_jan'] = 0;
		$data['ur_liver_prev_year1_feb'] = 0;
		$data['ur_liver_prev_year1_mar'] = 0;
		$data['ur_liver_prev_year1_apr'] = 0;
		$data['ur_liver_prev_year1_may'] = 0;
		$data['ur_liver_prev_year1_jun'] = 0;
		$data['ur_liver_prev_year1_jul'] = 0;
		$data['ur_liver_prev_year1_aug'] = 0;
		$data['ur_liver_prev_year1_sep'] = 0;
		$data['ur_liver_prev_year1_oct'] = 0;
		$data['ur_liver_prev_year1_nov'] = 0;
		$data['ur_liver_prev_year1_dec'] = 0;
		$data['ur_liver_prev_year1_avg'] = 0;
		$data['ur_liver_prev_year1_min'] = 0;
		$data['ur_liver_prev_year1_max'] = 0;

		foreach($ur_liver_prev_year1 as $row){
			$data['ur_liver_prev_year1_jan'] = $row->jan_price;
			$data['ur_liver_prev_year1_feb'] = $row->feb_price;
			$data['ur_liver_prev_year1_mar'] = $row->mar_price;
			$data['ur_liver_prev_year1_apr'] = $row->apr_price;
			$data['ur_liver_prev_year1_may'] = $row->may_price;
			$data['ur_liver_prev_year1_jun'] = $row->jun_price;
			$data['ur_liver_prev_year1_jul'] = $row->jul_price;
			$data['ur_liver_prev_year1_aug'] = $row->aug_price;
			$data['ur_liver_prev_year1_sep'] = $row->sep_price;
			$data['ur_liver_prev_year1_oct'] = $row->oct_price;
			$data['ur_liver_prev_year1_nov'] = $row->nov_price;
			$data['ur_liver_prev_year1_dec'] = $row->dec_price;
			$data['ur_liver_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_liver_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_liver_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*REYAL*/

		/*REYAL Chicken*/

		$get_improved_sweet_and_spicy_orc = $this->admin->get_query("SELECT p.size_name, AVG(asp_tbl.jan_asp) as orc_jan, AVG(asp_tbl.feb_asp) as orc_feb, AVG(asp_tbl.mar_asp) as orc_mar, AVG(asp_tbl.apr_asp) as orc_apr, AVG(asp_tbl.may_asp) as orc_may, AVG(asp_tbl.jun_asp) as orc_jun, AVG(asp_tbl.jul_asp) as orc_jul, AVG(asp_tbl.aug_asp) as orc_aug, AVG(asp_tbl.sep_asp) as orc_sep, AVG(asp_tbl.oct_asp) as orc_oct, AVG(asp_tbl.nov_asp) as orc_nov, AVG(asp_tbl.dec_asp) as orc_dec FROM material_tbl o, size_tbl p,

		(SELECT m.material_id, m.size_id,

		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-01-01' WHERE d.material_id = m.material_id) as jan_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-02-01' WHERE d.material_id = m.material_id) as feb_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-03-01' WHERE d.material_id = m.material_id) as mar_asp,
    
   		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-04-01' WHERE d.material_id = m.material_id) as apr_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-05-01' WHERE d.material_id = m.material_id) as may_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-06-01' WHERE d.material_id = m.material_id) as jun_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-07-01' WHERE d.material_id = m.material_id) as jul_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-08-01' WHERE d.material_id = m.material_id) as aug_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-09-01' WHERE d.material_id = m.material_id) as sep_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-10-01' WHERE d.material_id = m.material_id) as oct_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-11-01' WHERE d.material_id = m.material_id) as nov_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-12-01' WHERE d.material_id =  m.material_id) as dec_asp
    
		FROM material_size_tbl m, brand_tbl n WHERE m.brand_id = n.brand_id AND m.material_size_status = 1 AND n.brand_name = 'REYAL') as asp_tbl

		WHERE o.material_id = asp_tbl.material_id AND p.size_id = asp_tbl.size_id GROUP BY p.size_id");

		$data['improved_sweet_and_spicy_bfc1'] = $data['improved_sweet_and_spicy_bfc2'] = $data['improved_sweet_and_spicy_bfc3'] = $data['improved_sweet_and_spicy_bfc4'] = $data['improved_sweet_and_spicy_bfc5'] = $data['improved_sweet_and_spicy_bfc6'] = $data['improved_sweet_and_spicy_bfc7'] = $data['improved_sweet_and_spicy_bfc8'] = $data['improved_sweet_and_spicy_bfc9'] = $data['improved_sweet_and_spicy_bfc10'] = $data['improved_sweet_and_spicy_bfc11'] = $data['improved_sweet_and_spicy_bfc12'] = $data['improved_sweet_and_spicy_bfc_total'] = $data['improved_sweet_and_spicy_bfc_count'] = $data['improved_sweet_and_spicy_bfc_avg'] = $data['improved_sweet_and_spicy_bfc_min'] = $data['improved_sweet_and_spicy_bfc_max'] = 0;

		
		foreach($get_improved_sweet_and_spicy_orc as $row){

			$orc_size = $row->size_name;
			$orc_jan = $row->orc_jan;
			$orc_feb = $row->orc_feb;
			$orc_mar = $row->orc_mar;
			$orc_apr = $row->orc_apr;
			$orc_may = $row->orc_may;
			$orc_jun = $row->orc_jun;
			$orc_jul = $row->orc_jul;
			$orc_aug = $row->orc_aug;
			$orc_sep = $row->orc_sep;
			$orc_oct = $row->orc_oct;
			$orc_nov = $row->orc_nov;
			$orc_dec = $row->orc_dec;
			$orc_min = min($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_max = max($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_avg = ($orc_jan + $orc_feb + $orc_mar + $orc_apr + $orc_may + $orc_jun + $orc_jul + $orc_aug + $orc_sep + $orc_oct + $orc_nov + $orc_dec) / 12;

			if($orc_size == "BUTTERFLY CHICKEN"){
				$data['improved_sweet_and_spicy_bfc1'] = $orc_jan;
				$data['improved_sweet_and_spicy_bfc'] = $orc_feb;
				$data['improved_sweet_and_spicy_bfc'] = $orc_mar;
				$data['improved_sweet_and_spicy_bfc'] = $orc_apr;
				$data['improved_sweet_and_spicy_bfc'] = $orc_may;
				$data['improved_sweet_and_spicy_bfc'] = $orc_jun;
				$data['improved_sweet_and_spicy_bfc'] = $orc_jul;
				$data['improved_sweet_and_spicy_bfc'] = $orc_aug;
				$data['improved_sweet_and_spicy_bfc'] = $orc_sep;
				$data['improved_sweet_and_spicy_bfc'] = $orc_oct;
				$data['improved_sweet_and_spicy_bfc'] = $orc_nov;
				$data['improved_sweet_and_spicy_bfc'] = $orc_dec;
				$data['improved_sweet_and_spicy_bfc_avg'] = $orc_avg;
				$data['improved_sweet_and_spicy_bfc_min'] = $orc_min;
				$data['improved_sweet_and_spicy_bfc_max'] = $orc_max;

				$improved_sweet_and_spicy_bfc_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BUTTERFLY', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
				$data['improved_sweet_and_spicy_bfc_prev_year2_jan'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year2_feb'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year2_mar'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year2_apr'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year2_may'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year2_jun'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year2_jul'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year2_aug'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year2_sep'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year2_oct'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year2_nov'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year2_dec'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year2_avg'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year2_min'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year2_max'] = 0;

				foreach($improved_sweet_and_spicy_bfc_prev_year2 as $row){
					$data['improved_sweet_and_spicy_bfc_prev_year2_jan'] = $row->jan_price;
					$data['improved_sweet_and_spicy_bfc_prev_year2_feb'] = $row->feb_price;
					$data['improved_sweet_and_spicy_bfc_prev_year2_mar'] = $row->mar_price;
					$data['improved_sweet_and_spicy_bfc_prev_year2_apr'] = $row->apr_price;
					$data['improved_sweet_and_spicy_bfc_prev_year2_may'] = $row->may_price;
					$data['improved_sweet_and_spicy_bfc_prev_year2_jun'] = $row->jun_price;
					$data['improved_sweet_and_spicy_bfc_prev_year2_jul'] = $row->jul_price;
					$data['improved_sweet_and_spicy_bfc_prev_year2_aug'] = $row->aug_price;
					$data['improved_sweet_and_spicy_bfc_prev_year2_sep'] = $row->sep_price;
					$data['improved_sweet_and_spicy_bfc_prev_year2_oct'] = $row->oct_price;
					$data['improved_sweet_and_spicy_bfc_prev_year2_nov'] = $row->nov_price;
					$data['improved_sweet_and_spicy_bfc_prev_year2_dec'] = $row->dec_price;
					$data['improved_sweet_and_spicy_bfc_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['improved_sweet_and_spicy_bfc_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['improved_sweet_and_spicy_bfc_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}


				$improved_sweet_and_spicy_bfc_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BUTTERFLY', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1), 
					FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
				
				$data['improved_sweet_and_spicy_bfc_prev_year1_jan'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year1_feb'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year1_mar'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year1_apr'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year1_may'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year1_jun'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year1_jul'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year1_aug'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year1_sep'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year1_oct'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year1_nov'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year1_dec'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year1_avg'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year1_min'] = 0;
				$data['improved_sweet_and_spicy_bfc_prev_year1_max'] = 0;

				foreach($improved_sweet_and_spicy_bfc_prev_year1 as $row){
					$data['improved_sweet_and_spicy_bfc_prev_year1_jan'] = $row->jan_price;
					$data['improved_sweet_and_spicy_bfc_prev_year1_feb'] = $row->feb_price;
					$data['improved_sweet_and_spicy_bfc_prev_year1_mar'] = $row->mar_price;
					$data['improved_sweet_and_spicy_bfc_prev_year1_apr'] = $row->apr_price;
					$data['improved_sweet_and_spicy_bfc_prev_year1_may'] = $row->may_price;
					$data['improved_sweet_and_spicy_bfc_prev_year1_jun'] = $row->jun_price;
					$data['improved_sweet_and_spicy_bfc_prev_year1_jul'] = $row->jul_price;
					$data['improved_sweet_and_spicy_bfc_prev_year1_aug'] = $row->aug_price;
					$data['improved_sweet_and_spicy_bfc_prev_year1_sep'] = $row->sep_price;
					$data['improved_sweet_and_spicy_bfc_prev_year1_oct'] = $row->oct_price;
					$data['improved_sweet_and_spicy_bfc_prev_year1_nov'] = $row->nov_price;
					$data['improved_sweet_and_spicy_bfc_prev_year1_dec'] = $row->dec_price;
					$data['improved_sweet_and_spicy_bfc_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['improved_sweet_and_spicy_bfc_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['improved_sweet_and_spicy_bfc_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}
		}

		/*REYAL Liempo*/
		$join_improved_sweet_and_spicy_liempo = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "LIEMPO"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_improved_sweet_and_spicy_liempo = $this->admin->get_join('sales_tbl a', $join_improved_sweet_and_spicy_liempo, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['improved_sweet_and_spicy_liempo1'] = 0;
		$data['improved_sweet_and_spicy_liempo2'] = 0;
		$data['improved_sweet_and_spicy_liempo3'] = 0;
		$data['improved_sweet_and_spicy_liempo4'] = 0;
		$data['improved_sweet_and_spicy_liempo5'] = 0;
		$data['improved_sweet_and_spicy_liempo6'] = 0;
		$data['improved_sweet_and_spicy_liempo7'] = 0;
		$data['improved_sweet_and_spicy_liempo8'] = 0;
		$data['improved_sweet_and_spicy_liempo9'] = 0;
		$data['improved_sweet_and_spicy_liempo10'] = 0;
		$data['improved_sweet_and_spicy_liempo11'] = 0;
		$data['improved_sweet_and_spicy_liempo12'] = 0;
		$data['improved_sweet_and_spicy_liempo_total'] = 0;
		$data['improved_sweet_and_spicy_liempo_count'] = 0;
		$data['improved_sweet_and_spicy_liempo_avg'] = 0;
		$data['improved_sweet_and_spicy_liempo_min'] = 0;
		$data['improved_sweet_and_spicy_liempo_max'] = 0;

		foreach($get_improved_sweet_and_spicy_liempo as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['improved_sweet_and_spicy_liempo' . $month] = $asp;
			$data['improved_sweet_and_spicy_liempo_total'] += $asp;

			if($asp < $data['improved_sweet_and_spicy_liempo_min'] || $data['improved_sweet_and_spicy_liempo_count'] == 0){
				$data['improved_sweet_and_spicy_liempo_min'] = $asp;
			}

			if($asp > $data['improved_sweet_and_spicy_liempo_max'] || $data['improved_sweet_and_spicy_liempo_count'] == 0){
				$data['improved_sweet_and_spicy_liempo_max'] = $asp;
			}

			$data['improved_sweet_and_spicy_liempo_count']++;
		}

		$data['improved_sweet_and_spicy_liempo_avg'] = $data['improved_sweet_and_spicy_liempo_total'] != 0 ? $data['improved_sweet_and_spicy_liempo_total'] / $data['improved_sweet_and_spicy_liempo_count'] : 0;

		$improved_sweet_and_spicy_liempo_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_liempo_prev_year2_jan'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year2_feb'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year2_mar'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year2_apr'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year2_may'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year2_jun'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year2_jul'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year2_aug'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year2_sep'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year2_oct'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year2_nov'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year2_dec'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year2_avg'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year2_min'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year2_max'] = 0;

		foreach($improved_sweet_and_spicy_liempo_prev_year2 as $row){
			$data['improved_sweet_and_spicy_liempo_prev_year2_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_liempo_prev_year2_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_liempo_prev_year2_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_liempo_prev_year2_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_liempo_prev_year2_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_liempo_prev_year2_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_liempo_prev_year2_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_liempo_prev_year2_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_liempo_prev_year2_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_liempo_prev_year2_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_liempo_prev_year2_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_liempo_prev_year2_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_liempo_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_liempo_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_liempo_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$improved_sweet_and_spicy_liempo_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_liempo_prev_year1_jan'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year1_feb'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year1_mar'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year1_apr'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year1_may'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year1_jun'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year1_jul'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year1_aug'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year1_sep'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year1_oct'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year1_nov'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year1_dec'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year1_avg'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year1_min'] = 0;
		$data['improved_sweet_and_spicy_liempo_prev_year1_max'] = 0;

		foreach($improved_sweet_and_spicy_liempo_prev_year1 as $row){
			$data['improved_sweet_and_spicy_liempo_prev_year1_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_liempo_prev_year1_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_liempo_prev_year1_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_liempo_prev_year1_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_liempo_prev_year1_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_liempo_prev_year1_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_liempo_prev_year1_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_liempo_prev_year1_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_liempo_prev_year1_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_liempo_prev_year1_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_liempo_prev_year1_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_liempo_prev_year1_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_liempo_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_liempo_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_liempo_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}
		
		/*REYAL Dressed*/
		$join_improved_sweet_and_spicy_dressed = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_improved_sweet_and_spicy_dressed = $this->admin->get_join('sales_tbl a', $join_improved_sweet_and_spicy_dressed, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['improved_sweet_and_spicy_dressed1'] = 0;
		$data['improved_sweet_and_spicy_dressed2'] = 0;
		$data['improved_sweet_and_spicy_dressed3'] = 0;
		$data['improved_sweet_and_spicy_dressed4'] = 0;
		$data['improved_sweet_and_spicy_dressed5'] = 0;
		$data['improved_sweet_and_spicy_dressed6'] = 0;
		$data['improved_sweet_and_spicy_dressed7'] = 0;
		$data['improved_sweet_and_spicy_dressed8'] = 0;
		$data['improved_sweet_and_spicy_dressed9'] = 0;
		$data['improved_sweet_and_spicy_dressed10'] = 0;
		$data['improved_sweet_and_spicy_dressed11'] = 0;
		$data['improved_sweet_and_spicy_dressed12'] = 0;
		$data['improved_sweet_and_spicy_dressed_total'] = 0;
		$data['improved_sweet_and_spicy_dressed_count'] = 0;
		$data['improved_sweet_and_spicy_dressed_avg'] = 0;
		$data['improved_sweet_and_spicy_dressed_min'] = 0;
		$data['improved_sweet_and_spicy_dressed_max'] = 0;

		foreach($get_improved_sweet_and_spicy_dressed as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['improved_sweet_and_spicy_dressed' . $month] = $asp;
			$data['improved_sweet_and_spicy_dressed_total'] += $asp;

			if($asp < $data['improved_sweet_and_spicy_dressed_min'] || $data['improved_sweet_and_spicy_dressed_count'] == 0){
				$data['improved_sweet_and_spicy_dressed_min'] = $asp;
			}

			if($asp > $data['improved_sweet_and_spicy_dressed_max'] || $data['improved_sweet_and_spicy_dressed_count'] == 0){
				$data['improved_sweet_and_spicy_dressed_max'] = $asp;
			}

			$data['improved_sweet_and_spicy_dressed_count']++;
		}

		$data['improved_sweet_and_spicy_dressed_avg'] = $data['improved_sweet_and_spicy_dressed_total'] != 0 ? $data['improved_sweet_and_spicy_dressed_total'] / $data['improved_sweet_and_spicy_dressed_count'] : 0;

		$improved_sweet_and_spicy_dressed_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_dressed_prev_year2_jan'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year2_feb'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year2_mar'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year2_apr'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year2_may'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year2_jun'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year2_jul'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year2_aug'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year2_sep'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year2_oct'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year2_nov'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year2_dec'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year2_avg'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year2_min'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year2_max'] = 0;

		foreach($improved_sweet_and_spicy_dressed_prev_year2 as $row){
			$data['improved_sweet_and_spicy_dressed_prev_year2_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_dressed_prev_year2_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_dressed_prev_year2_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_dressed_prev_year2_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_dressed_prev_year2_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_dressed_prev_year2_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_dressed_prev_year2_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_dressed_prev_year2_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_dressed_prev_year2_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_dressed_prev_year2_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_dressed_prev_year2_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_dressed_prev_year2_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_dressed_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_dressed_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_dressed_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$improved_sweet_and_spicy_dressed_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_dressed_prev_year1_jan'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year1_feb'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year1_mar'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year1_apr'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year1_may'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year1_jun'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year1_jul'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year1_aug'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year1_sep'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year1_oct'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year1_nov'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year1_dec'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year1_avg'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year1_min'] = 0;
		$data['improved_sweet_and_spicy_dressed_prev_year1_max'] = 0;

		foreach($improved_sweet_and_spicy_dressed_prev_year1 as $row){
			$data['improved_sweet_and_spicy_dressed_prev_year1_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_dressed_prev_year1_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_dressed_prev_year1_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_dressed_prev_year1_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_dressed_prev_year1_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_dressed_prev_year1_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_dressed_prev_year1_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_dressed_prev_year1_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_dressed_prev_year1_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_dressed_prev_year1_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_dressed_prev_year1_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_dressed_prev_year1_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_dressed_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_dressed_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_dressed_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*REYAL Chooksies*/
		$join_improved_sweet_and_spicy_chooksies = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 10200095 OR d.material_code = 10200096 OR d.material_code = 10200097)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_improved_sweet_and_spicy_chooksies = $this->admin->get_join('sales_tbl a', $join_improved_sweet_and_spicy_chooksies, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['improved_sweet_and_spicy_chooksies1'] = 0;
		$data['improved_sweet_and_spicy_chooksies2'] = 0;
		$data['improved_sweet_and_spicy_chooksies3'] = 0;
		$data['improved_sweet_and_spicy_chooksies4'] = 0;
		$data['improved_sweet_and_spicy_chooksies5'] = 0;
		$data['improved_sweet_and_spicy_chooksies6'] = 0;
		$data['improved_sweet_and_spicy_chooksies7'] = 0;
		$data['improved_sweet_and_spicy_chooksies8'] = 0;
		$data['improved_sweet_and_spicy_chooksies9'] = 0;
		$data['improved_sweet_and_spicy_chooksies10'] = 0;
		$data['improved_sweet_and_spicy_chooksies11'] = 0;
		$data['improved_sweet_and_spicy_chooksies12'] = 0;
		$data['improved_sweet_and_spicy_chooksies_total'] = 0;
		$data['improved_sweet_and_spicy_chooksies_count'] = 0;
		$data['improved_sweet_and_spicy_chooksies_avg'] = 0;
		$data['improved_sweet_and_spicy_chooksies_min'] = 0;
		$data['improved_sweet_and_spicy_chooksies_max'] = 0;

		foreach($get_improved_sweet_and_spicy_chooksies as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['improved_sweet_and_spicy_chooksies' . $month] = $asp;
			$data['improved_sweet_and_spicy_chooksies_total'] += $asp;

			if($asp < $data['improved_sweet_and_spicy_chooksies_min'] || $data['improved_sweet_and_spicy_chooksies_count'] == 0){
				$data['improved_sweet_and_spicy_chooksies_min'] = $asp;
			}

			if($asp > $data['improved_sweet_and_spicy_chooksies_max'] || $data['improved_sweet_and_spicy_chooksies_count'] == 0){
				$data['improved_sweet_and_spicy_chooksies_max'] = $asp;
			}

			$data['improved_sweet_and_spicy_chooksies_count']++;
		}

		$data['improved_sweet_and_spicy_chooksies_avg'] = $data['improved_sweet_and_spicy_chooksies_total'] != 0 ? $data['improved_sweet_and_spicy_chooksies_total'] / $data['improved_sweet_and_spicy_chooksies_count'] : 0;


		$improved_sweet_and_spicy_chooksies_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_chooksies_prev_year2_jan'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year2_feb'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year2_mar'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year2_apr'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year2_may'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year2_jun'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year2_jul'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year2_aug'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year2_sep'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year2_oct'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year2_nov'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year2_dec'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year2_avg'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year2_min'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year2_max'] = 0;

		foreach($improved_sweet_and_spicy_chooksies_prev_year2 as $row){
			$data['improved_sweet_and_spicy_chooksies_prev_year2_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year2_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year2_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year2_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year2_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year2_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year2_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year2_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year2_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year2_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year2_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year2_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_chooksies_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_chooksies_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$improved_sweet_and_spicy_chooksies_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_chooksies_prev_year1_jan'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year1_feb'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year1_mar'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year1_apr'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year1_may'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year1_jun'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year1_jul'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year1_aug'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year1_sep'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year1_oct'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year1_nov'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year1_dec'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year1_avg'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year1_min'] = 0;
		$data['improved_sweet_and_spicy_chooksies_prev_year1_max'] = 0;

		foreach($improved_sweet_and_spicy_chooksies_prev_year1 as $row){
			$data['improved_sweet_and_spicy_chooksies_prev_year1_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year1_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year1_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year1_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year1_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year1_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year1_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year1_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year1_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year1_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year1_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year1_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_chooksies_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_chooksies_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_chooksies_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*REYAL Marinado*/
		$join_improved_sweet_and_spicy_marinado = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000638',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_improved_sweet_and_spicy_marinado = $this->admin->get_join('sales_tbl a', $join_improved_sweet_and_spicy_marinado, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['improved_sweet_and_spicy_marinado1'] = 0;
		$data['improved_sweet_and_spicy_marinado2'] = 0;
		$data['improved_sweet_and_spicy_marinado3'] = 0;
		$data['improved_sweet_and_spicy_marinado4'] = 0;
		$data['improved_sweet_and_spicy_marinado5'] = 0;
		$data['improved_sweet_and_spicy_marinado6'] = 0;
		$data['improved_sweet_and_spicy_marinado7'] = 0;
		$data['improved_sweet_and_spicy_marinado8'] = 0;
		$data['improved_sweet_and_spicy_marinado9'] = 0;
		$data['improved_sweet_and_spicy_marinado10'] = 0;
		$data['improved_sweet_and_spicy_marinado11'] = 0;
		$data['improved_sweet_and_spicy_marinado12'] = 0;
		$data['improved_sweet_and_spicy_marinado_total'] = 0;
		$data['improved_sweet_and_spicy_marinado_count'] = 0;
		$data['improved_sweet_and_spicy_marinado_avg'] = 0;
		$data['improved_sweet_and_spicy_marinado_min'] = 0;
		$data['improved_sweet_and_spicy_marinado_max'] = 0;

		foreach($get_improved_sweet_and_spicy_marinado as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['improved_sweet_and_spicy_marinado' . $month] = $asp;
			$data['improved_sweet_and_spicy_marinado_total'] += $asp;

			if($asp < $data['improved_sweet_and_spicy_marinado_min'] || $data['improved_sweet_and_spicy_marinado_count'] == 0){
				$data['improved_sweet_and_spicy_marinado_min'] = $asp;
			}

			if($asp > $data['improved_sweet_and_spicy_marinado_max'] || $data['improved_sweet_and_spicy_marinado_count'] == 0){
				$data['improved_sweet_and_spicy_marinado_max'] = $asp;
			}

			$data['improved_sweet_and_spicy_marinado_count']++;
		}

		$data['improved_sweet_and_spicy_marinado_avg'] = $data['improved_sweet_and_spicy_marinado_total'] != 0 ? $data['improved_sweet_and_spicy_marinado_total'] / $data['improved_sweet_and_spicy_marinado_count'] : 0;

		$improved_sweet_and_spicy_marinado_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_marinado_prev_year2_jan'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year2_feb'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year2_mar'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year2_apr'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year2_may'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year2_jun'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year2_jul'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year2_aug'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year2_sep'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year2_oct'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year2_nov'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year2_dec'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year2_avg'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year2_min'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year2_max'] = 0;

		foreach($improved_sweet_and_spicy_marinado_prev_year2 as $row){
			$data['improved_sweet_and_spicy_marinado_prev_year2_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_marinado_prev_year2_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_marinado_prev_year2_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_marinado_prev_year2_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_marinado_prev_year2_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_marinado_prev_year2_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_marinado_prev_year2_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_marinado_prev_year2_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_marinado_prev_year2_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_marinado_prev_year2_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_marinado_prev_year2_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_marinado_prev_year2_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_marinado_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_marinado_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_marinado_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$improved_sweet_and_spicy_marinado_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_marinado_prev_year1_jan'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year1_feb'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year1_mar'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year1_apr'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year1_may'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year1_jun'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year1_jul'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year1_aug'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year1_sep'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year1_oct'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year1_nov'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year1_dec'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year1_avg'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year1_min'] = 0;
		$data['improved_sweet_and_spicy_marinado_prev_year1_max'] = 0;

		foreach($improved_sweet_and_spicy_marinado_prev_year1 as $row){
			$data['improved_sweet_and_spicy_marinado_prev_year1_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_marinado_prev_year1_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_marinado_prev_year1_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_marinado_prev_year1_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_marinado_prev_year1_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_marinado_prev_year1_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_marinado_prev_year1_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_marinado_prev_year1_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_marinado_prev_year1_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_marinado_prev_year1_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_marinado_prev_year1_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_marinado_prev_year1_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_marinado_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_marinado_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_marinado_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*REYAL Spicy Neck*/
		$join_improved_sweet_and_spicy_spicy = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 10200090 OR d.material_code = 1000401 OR d.material_code = 1000402 OR d.material_code = 1000617)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_improved_sweet_and_spicy_spicy = $this->admin->get_join('sales_tbl a', $join_improved_sweet_and_spicy_spicy, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['improved_sweet_and_spicy_spicy1'] = 0;
		$data['improved_sweet_and_spicy_spicy2'] = 0;
		$data['improved_sweet_and_spicy_spicy3'] = 0;
		$data['improved_sweet_and_spicy_spicy4'] = 0;
		$data['improved_sweet_and_spicy_spicy5'] = 0;
		$data['improved_sweet_and_spicy_spicy6'] = 0;
		$data['improved_sweet_and_spicy_spicy7'] = 0;
		$data['improved_sweet_and_spicy_spicy8'] = 0;
		$data['improved_sweet_and_spicy_spicy9'] = 0;
		$data['improved_sweet_and_spicy_spicy10'] = 0;
		$data['improved_sweet_and_spicy_spicy11'] = 0;
		$data['improved_sweet_and_spicy_spicy12'] = 0;
		$data['improved_sweet_and_spicy_spicy_total'] = 0;
		$data['improved_sweet_and_spicy_spicy_count'] = 0;
		$data['improved_sweet_and_spicy_spicy_avg'] = 0;
		$data['improved_sweet_and_spicy_spicy_min'] = 0;
		$data['improved_sweet_and_spicy_spicy_max'] = 0;

		foreach($get_improved_sweet_and_spicy_spicy as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['improved_sweet_and_spicy_spicy' . $month] = $asp;
			$data['improved_sweet_and_spicy_spicy_total'] += $asp;

			if($asp < $data['improved_sweet_and_spicy_spicy_min'] || $data['improved_sweet_and_spicy_spicy_count'] == 0){
				$data['improved_sweet_and_spicy_spicy_min'] = $asp;
			}

			if($asp > $data['improved_sweet_and_spicy_spicy_max'] || $data['improved_sweet_and_spicy_spicy_count'] == 0){
				$data['improved_sweet_and_spicy_spicy_max'] = $asp;
			}

			$data['improved_sweet_and_spicy_spicy_count']++;
		}

		$data['improved_sweet_and_spicy_spicy_avg'] = $data['improved_sweet_and_spicy_spicy_total'] != 0 ? $data['improved_sweet_and_spicy_spicy_total'] / $data['improved_sweet_and_spicy_spicy_count'] : 0;

		$improved_sweet_and_spicy_spicy_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_spicy_prev_year2_jan'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year2_feb'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year2_mar'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year2_apr'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year2_may'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year2_jun'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year2_jul'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year2_aug'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year2_sep'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year2_oct'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year2_nov'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year2_dec'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year2_avg'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year2_min'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year2_max'] = 0;

		foreach($improved_sweet_and_spicy_spicy_prev_year2 as $row){
			$data['improved_sweet_and_spicy_spicy_prev_year2_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_spicy_prev_year2_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_spicy_prev_year2_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_spicy_prev_year2_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_spicy_prev_year2_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_spicy_prev_year2_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_spicy_prev_year2_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_spicy_prev_year2_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_spicy_prev_year2_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_spicy_prev_year2_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_spicy_prev_year2_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_spicy_prev_year2_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_spicy_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_spicy_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_spicy_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$improved_sweet_and_spicy_spicy_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_spicy_prev_year1_jan'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year1_feb'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year1_mar'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year1_apr'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year1_may'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year1_jun'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year1_jul'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year1_aug'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year1_sep'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year1_oct'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year1_nov'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year1_dec'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year1_avg'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year1_min'] = 0;
		$data['improved_sweet_and_spicy_spicy_prev_year1_max'] = 0;

		foreach($improved_sweet_and_spicy_spicy_prev_year1 as $row){
			$data['improved_sweet_and_spicy_spicy_prev_year1_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_spicy_prev_year1_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_spicy_prev_year1_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_spicy_prev_year1_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_spicy_prev_year1_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_spicy_prev_year1_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_spicy_prev_year1_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_spicy_prev_year1_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_spicy_prev_year1_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_spicy_prev_year1_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_spicy_prev_year1_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_spicy_prev_year1_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_spicy_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_spicy_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_spicy_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*REYAL Barbeque*/
		$join_improved_sweet_and_spicy_barbeque = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000548',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER SPECIALTY PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_improved_sweet_and_spicy_barbeque = $this->admin->get_join('sales_tbl a', $join_improved_sweet_and_spicy_barbeque, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['improved_sweet_and_spicy_barbeque1'] = 0;
		$data['improved_sweet_and_spicy_barbeque2'] = 0;
		$data['improved_sweet_and_spicy_barbeque3'] = 0;
		$data['improved_sweet_and_spicy_barbeque4'] = 0;
		$data['improved_sweet_and_spicy_barbeque5'] = 0;
		$data['improved_sweet_and_spicy_barbeque6'] = 0;
		$data['improved_sweet_and_spicy_barbeque7'] = 0;
		$data['improved_sweet_and_spicy_barbeque8'] = 0;
		$data['improved_sweet_and_spicy_barbeque9'] = 0;
		$data['improved_sweet_and_spicy_barbeque10'] = 0;
		$data['improved_sweet_and_spicy_barbeque11'] = 0;
		$data['improved_sweet_and_spicy_barbeque12'] = 0;
		$data['improved_sweet_and_spicy_barbeque_total'] = 0;
		$data['improved_sweet_and_spicy_barbeque_count'] = 0;
		$data['improved_sweet_and_spicy_barbeque_avg'] = 0;
		$data['improved_sweet_and_spicy_barbeque_min'] = 0;
		$data['improved_sweet_and_spicy_barbeque_max'] = 0;

		foreach($get_improved_sweet_and_spicy_barbeque as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['improved_sweet_and_spicy_barbeque' . $month] = $asp;
			$data['improved_sweet_and_spicy_barbeque_total'] += $asp;

			if($asp < $data['improved_sweet_and_spicy_barbeque_min'] || $data['improved_sweet_and_spicy_barbeque_count'] == 0){
				$data['improved_sweet_and_spicy_barbeque_min'] = $asp;
			}

			if($asp > $data['improved_sweet_and_spicy_barbeque_max'] || $data['improved_sweet_and_spicy_barbeque_count'] == 0){
				$data['improved_sweet_and_spicy_barbeque_max'] = $asp;
			}

			$data['improved_sweet_and_spicy_barbeque_count']++;
		}

		$data['improved_sweet_and_spicy_barbeque_avg'] = $data['improved_sweet_and_spicy_barbeque_total'] != 0 ? $data['improved_sweet_and_spicy_barbeque_total'] / $data['improved_sweet_and_spicy_barbeque_count'] : 0;

		$improved_sweet_and_spicy_barbeque_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BBQ', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_barbeque_prev_year2_jan'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year2_feb'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year2_mar'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year2_apr'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year2_may'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year2_jun'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year2_jul'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year2_aug'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year2_sep'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year2_oct'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year2_nov'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year2_dec'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year2_avg'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year2_min'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year2_max'] = 0;

		foreach($improved_sweet_and_spicy_barbeque_prev_year2 as $row){
			$data['improved_sweet_and_spicy_barbeque_prev_year2_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year2_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year2_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year2_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year2_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year2_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year2_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year2_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year2_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year2_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year2_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year2_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_barbeque_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_barbeque_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$improved_sweet_and_spicy_barbeque_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BBQ', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_barbeque_prev_year1_jan'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year1_feb'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year1_mar'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year1_apr'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year1_may'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year1_jun'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year1_jul'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year1_aug'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year1_sep'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year1_oct'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year1_nov'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year1_dec'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year1_avg'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year1_min'] = 0;
		$data['improved_sweet_and_spicy_barbeque_prev_year1_max'] = 0;

		foreach($improved_sweet_and_spicy_barbeque_prev_year1 as $row){
			$data['improved_sweet_and_spicy_barbeque_prev_year1_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year1_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year1_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year1_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year1_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year1_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year1_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year1_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year1_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year1_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year1_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year1_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_barbeque_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_barbeque_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_barbeque_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*REYAL Nuggets*/
		$join_improved_sweet_and_spicy_nuggets = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 40000016 OR d.material_code = 40000019)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER VAP PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_improved_sweet_and_spicy_nuggets = $this->admin->get_join('sales_tbl a', $join_improved_sweet_and_spicy_nuggets, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['improved_sweet_and_spicy_nuggets1'] = 0;
		$data['improved_sweet_and_spicy_nuggets2'] = 0;
		$data['improved_sweet_and_spicy_nuggets3'] = 0;
		$data['improved_sweet_and_spicy_nuggets4'] = 0;
		$data['improved_sweet_and_spicy_nuggets5'] = 0;
		$data['improved_sweet_and_spicy_nuggets6'] = 0;
		$data['improved_sweet_and_spicy_nuggets7'] = 0;
		$data['improved_sweet_and_spicy_nuggets8'] = 0;
		$data['improved_sweet_and_spicy_nuggets9'] = 0;
		$data['improved_sweet_and_spicy_nuggets10'] = 0;
		$data['improved_sweet_and_spicy_nuggets11'] = 0;
		$data['improved_sweet_and_spicy_nuggets12'] = 0;
		$data['improved_sweet_and_spicy_nuggets_total'] = 0;
		$data['improved_sweet_and_spicy_nuggets_count'] = 0;
		$data['improved_sweet_and_spicy_nuggets_avg'] = 0;
		$data['improved_sweet_and_spicy_nuggets_min'] = 0;
		$data['improved_sweet_and_spicy_nuggets_max'] = 0;

		foreach($get_improved_sweet_and_spicy_nuggets as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['improved_sweet_and_spicy_nuggets' . $month] = $asp;
			$data['improved_sweet_and_spicy_nuggets_total'] += $asp;

			if($asp < $data['improved_sweet_and_spicy_nuggets_min'] || $data['improved_sweet_and_spicy_nuggets_count'] == 0){
				$data['improved_sweet_and_spicy_nuggets_min'] = $asp;
			}

			if($asp > $data['improved_sweet_and_spicy_nuggets_max'] || $data['improved_sweet_and_spicy_nuggets_count'] == 0){
				$data['improved_sweet_and_spicy_nuggets_max'] = $asp;
			}

			$data['improved_sweet_and_spicy_nuggets_count']++;
		}

		$data['improved_sweet_and_spicy_nuggets_avg'] = $data['improved_sweet_and_spicy_nuggets_total'] != 0 ? $data['improved_sweet_and_spicy_nuggets_total'] / $data['improved_sweet_and_spicy_nuggets_count'] : 0;

		$improved_sweet_and_spicy_nuggets_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-NUGGETS', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_nuggets_prev_year2_jan'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year2_feb'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year2_mar'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year2_apr'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year2_may'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year2_jun'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year2_jul'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year2_aug'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year2_sep'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year2_oct'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year2_nov'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year2_dec'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year2_avg'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year2_min'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year2_max'] = 0;

		foreach($improved_sweet_and_spicy_nuggets_prev_year2 as $row){
			$data['improved_sweet_and_spicy_nuggets_prev_year2_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year2_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year2_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year2_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year2_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year2_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year2_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year2_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year2_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year2_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year2_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year2_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_nuggets_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_nuggets_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$improved_sweet_and_spicy_nuggets_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-NUGGETS', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_nuggets_prev_year1_jan'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year1_feb'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year1_mar'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year1_apr'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year1_may'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year1_jun'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year1_jul'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year1_aug'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year1_sep'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year1_oct'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year1_nov'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year1_dec'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year1_avg'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year1_min'] = 0;
		$data['improved_sweet_and_spicy_nuggets_prev_year1_max'] = 0;

		foreach($improved_sweet_and_spicy_nuggets_prev_year1 as $row){
			$data['improved_sweet_and_spicy_nuggets_prev_year1_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year1_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year1_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year1_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year1_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year1_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year1_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year1_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year1_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year1_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year1_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year1_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_nuggets_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_nuggets_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_nuggets_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*REYAL 11 PCS*/
		$join_improved_sweet_and_spicy_11pcs= array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 10400170',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER SPECIALTY PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_improved_sweet_and_spicy_11pcs = $this->admin->get_join('sales_tbl a', $join_improved_sweet_and_spicy_11pcs, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['improved_sweet_and_spicy_11pcs_1'] = 0;
		$data['improved_sweet_and_spicy_11pcs_2'] = 0;
		$data['improved_sweet_and_spicy_11pcs_3'] = 0;
		$data['improved_sweet_and_spicy_11pcs_4'] = 0;
		$data['improved_sweet_and_spicy_11pcs_5'] = 0;
		$data['improved_sweet_and_spicy_11pcs_6'] = 0;
		$data['improved_sweet_and_spicy_11pcs_7'] = 0;
		$data['improved_sweet_and_spicy_11pcs_8'] = 0;
		$data['improved_sweet_and_spicy_11pcs_9'] = 0;
		$data['improved_sweet_and_spicy_11pcs_10'] = 0;
		$data['improved_sweet_and_spicy_11pcs_11'] = 0;
		$data['improved_sweet_and_spicy_11pcs_12'] = 0;
		$data['improved_sweet_and_spicy_11pcs_total'] = 0;
		$data['improved_sweet_and_spicy_11pcs_count'] = 0;
		$data['improved_sweet_and_spicy_11pcs_avg'] = 0;
		$data['improved_sweet_and_spicy_11pcs_min'] = 0;
		$data['improved_sweet_and_spicy_11pcs_max'] = 0;

		foreach($get_improved_sweet_and_spicy_11pcs as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['reyap_11pcs_' . $month] = $asp;
			$data['reyap_11pcs_total'] += $asp;

			if($asp < $data['improved_sweet_and_spicy_11pcs_min'] || $data['improved_sweet_and_spicy_11pcs_count'] == 0){
				$data['improved_sweet_and_spicy_11pcs_min'] = $asp;
			}

			if($asp > $data['improved_sweet_and_spicy_11pcs_max'] || $data['improved_sweet_and_spicy_11pcs_count'] == 0){
				$data['improved_sweet_and_spicy_11pcs_max'] = $asp;
			}

			$data['improved_sweet_and_spicy_11pcs_count']++;
		}

		$data['improved_sweet_and_spicy_11pcs_avg'] = $data['improved_sweet_and_spicy_11pcs_total'] != 0 ? $data['improved_sweet_and_spicy_11pcs_total'] / $data['improved_sweet_and_spicy_11pcs_count'] : 0;

		$improved_sweet_and_spicy_11pcs_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_11pcs_prev_year2_jan'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year2_feb'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year2_mar'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year2_apr'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year2_may'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year2_jun'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year2_jul'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year2_aug'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year2_sep'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year2_oct'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year2_nov'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year2_dec'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year2_avg'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year2_min'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year2_max'] = 0;

		foreach($improved_sweet_and_spicy_11pcs_prev_year2 as $row){
			$data['improved_sweet_and_spicy_11pcs_prev_year2_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year2_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year2_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year2_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year2_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year2_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year2_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year2_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year2_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year2_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year2_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year2_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_11pcs_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_11pcs_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$improved_sweet_and_spicy_11pcs_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_11pcs_prev_year1_jan'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year1_feb'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year1_mar'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year1_apr'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year1_may'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year1_jun'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year1_jul'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year1_aug'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year1_sep'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year1_oct'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year1_nov'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year1_dec'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year1_avg'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year1_min'] = 0;
		$data['improved_sweet_and_spicy_11pcs_prev_year1_max'] = 0;

		foreach($improved_sweet_and_spicy_11pcs_prev_year1 as $row){
			$data['improved_sweet_and_spicy_11pcs_prev_year1_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year1_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year1_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year1_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year1_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year1_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year1_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year1_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year1_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year1_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year1_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year1_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_11pcs_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_11pcs_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_11pcs_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*REYAL Chooksies Cut ups*/
		$join_improved_sweet_and_spicy_cutups = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 10000150',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'NON MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_improved_sweet_and_spicy_cutups = $this->admin->get_join('sales_tbl a', $join_improved_sweet_and_spicy_cutups, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['improved_sweet_and_spicy_cutups1'] = 0;
		$data['improved_sweet_and_spicy_cutups2'] = 0;
		$data['improved_sweet_and_spicy_cutups3'] = 0;
		$data['improved_sweet_and_spicy_cutups4'] = 0;
		$data['improved_sweet_and_spicy_cutups5'] = 0;
		$data['improved_sweet_and_spicy_cutups6'] = 0;
		$data['improved_sweet_and_spicy_cutups7'] = 0;
		$data['improved_sweet_and_spicy_cutups8'] = 0;
		$data['improved_sweet_and_spicy_cutups9'] = 0;
		$data['improved_sweet_and_spicy_cutups10'] = 0;
		$data['improved_sweet_and_spicy_cutups11'] = 0;
		$data['improved_sweet_and_spicy_cutups12'] = 0;
		$data['improved_sweet_and_spicy_cutups_total'] = 0;
		$data['improved_sweet_and_spicy_cutups_count'] = 0;
		$data['improved_sweet_and_spicy_cutups_avg'] = 0;
		$data['improved_sweet_and_spicy_cutups_min'] = 0;
		$data['improved_sweet_and_spicy_cutups_max'] = 0;

		foreach($get_improved_sweet_and_spicy_cutups as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['improved_sweet_and_spicy_cutups' . $month] = $asp;
			$data['improved_sweet_and_spicy_cutups_total'] += $asp;

			if($asp < $data['improved_sweet_and_spicy_cutups_min'] || $data['improved_sweet_and_spicy_cutups_count'] == 0){
				$data['improved_sweet_and_spicy_cutups_min'] = $asp;
			}

			if($asp > $data['improved_sweet_and_spicy_cutups_max'] || $data['improved_sweet_and_spicy_cutups_count'] == 0){
				$data['improved_sweet_and_spicy_cutups_max'] = $asp;
			}

			$data['improved_sweet_and_spicy_cutups_count']++;
		}

		$data['improved_sweet_and_spicy_cutups_avg'] = $data['improved_sweet_and_spicy_cutups_total'] != 0 ? $data['improved_sweet_and_spicy_cutups_total'] / $data['improved_sweet_and_spicy_cutups_count'] : 0;


		$get_improved_sweet_and_spicy_cutups = $this->admin->get_join('sales_tbl a', $join_improved_sweet_and_spicy_cutups, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['improved_sweet_and_spicy_cutups1'] = 0;
		$data['improved_sweet_and_spicy_cutups2'] = 0;
		$data['improved_sweet_and_spicy_cutups3'] = 0;
		$data['improved_sweet_and_spicy_cutups4'] = 0;
		$data['improved_sweet_and_spicy_cutups5'] = 0;
		$data['improved_sweet_and_spicy_cutups6'] = 0;
		$data['improved_sweet_and_spicy_cutups7'] = 0;
		$data['improved_sweet_and_spicy_cutups8'] = 0;
		$data['improved_sweet_and_spicy_cutups9'] = 0;
		$data['improved_sweet_and_spicy_cutups10'] = 0;
		$data['improved_sweet_and_spicy_cutups11'] = 0;
		$data['improved_sweet_and_spicy_cutups12'] = 0;
		$data['improved_sweet_and_spicy_cutups_total'] = 0;
		$data['improved_sweet_and_spicy_cutups_count'] = 0;
		$data['improved_sweet_and_spicy_cutups_avg'] = 0;
		$data['improved_sweet_and_spicy_cutups_min'] = 0;
		$data['improved_sweet_and_spicy_cutups_max'] = 0;

		foreach($get_improved_sweet_and_spicy_cutups as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['improved_sweet_and_spicy_cutups' . $month] = $asp;
			$data['improved_sweet_and_spicy_cutups_total'] += $asp;

			if($asp < $data['improved_sweet_and_spicy_cutups_min'] || $data['improved_sweet_and_spicy_cutups_count'] == 0){
				$data['improved_sweet_and_spicy_cutups_min'] = $asp;
			}

			if($asp > $data['improved_sweet_and_spicy_cutups_max'] || $data['improved_sweet_and_spicy_cutups_count'] == 0){
				$data['improved_sweet_and_spicy_cutups_max'] = $asp;
			}

			$data['improved_sweet_and_spicy_cutups_count']++;
		}

		$data['improved_sweet_and_spicy_cutups_avg'] = $data['improved_sweet_and_spicy_cutups_total'] != 0 ? $data['improved_sweet_and_spicy_cutups_total'] / $data['improved_sweet_and_spicy_cutups_count'] : 0;

		$improved_sweet_and_spicy_cutups_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES CUT UPS', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_cutups_prev_year2_jan'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year2_feb'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year2_mar'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year2_apr'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year2_may'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year2_jun'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year2_jul'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year2_aug'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year2_sep'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year2_oct'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year2_nov'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year2_dec'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year2_avg'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year2_min'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year2_max'] = 0;

		foreach($improved_sweet_and_spicy_cutups_prev_year2 as $row){
			$data['improved_sweet_and_spicy_cutups_prev_year2_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_cutups_prev_year2_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_cutups_prev_year2_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_cutups_prev_year2_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_cutups_prev_year2_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_cutups_prev_year2_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_cutups_prev_year2_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_cutups_prev_year2_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_cutups_prev_year2_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_cutups_prev_year2_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_cutups_prev_year2_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_cutups_prev_year2_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_cutups_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_cutups_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_cutups_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		$improved_sweet_and_spicy_cutups_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES CUT UPS', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['improved_sweet_and_spicy_cutups_prev_year1_jan'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year1_feb'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year1_mar'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year1_apr'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year1_may'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year1_jun'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year1_jul'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year1_aug'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year1_sep'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year1_oct'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year1_nov'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year1_dec'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year1_avg'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year1_min'] = 0;
		$data['improved_sweet_and_spicy_cutups_prev_year1_max'] = 0;

		foreach($improved_sweet_and_spicy_cutups_prev_year1 as $row){
			$data['improved_sweet_and_spicy_cutups_prev_year1_jan'] = $row->jan_price;
			$data['improved_sweet_and_spicy_cutups_prev_year1_feb'] = $row->feb_price;
			$data['improved_sweet_and_spicy_cutups_prev_year1_mar'] = $row->mar_price;
			$data['improved_sweet_and_spicy_cutups_prev_year1_apr'] = $row->apr_price;
			$data['improved_sweet_and_spicy_cutups_prev_year1_may'] = $row->may_price;
			$data['improved_sweet_and_spicy_cutups_prev_year1_jun'] = $row->jun_price;
			$data['improved_sweet_and_spicy_cutups_prev_year1_jul'] = $row->jul_price;
			$data['improved_sweet_and_spicy_cutups_prev_year1_aug'] = $row->aug_price;
			$data['improved_sweet_and_spicy_cutups_prev_year1_sep'] = $row->sep_price;
			$data['improved_sweet_and_spicy_cutups_prev_year1_oct'] = $row->oct_price;
			$data['improved_sweet_and_spicy_cutups_prev_year1_nov'] = $row->nov_price;
			$data['improved_sweet_and_spicy_cutups_prev_year1_dec'] = $row->dec_price;
			$data['improved_sweet_and_spicy_cutups_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['improved_sweet_and_spicy_cutups_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['improved_sweet_and_spicy_cutups_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*SUPERMARKET Marinated Raw*/
		$join_smkt_raw = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CHICKEN (RAW)\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'SUPERMARKET\''
		);

		$get_smkt_raw = $this->admin->get_join('sales_tbl a', $join_smkt_raw, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['smkt_raw1'] = 0;
		$data['smkt_raw2'] = 0;
		$data['smkt_raw3'] = 0;
		$data['smkt_raw4'] = 0;
		$data['smkt_raw5'] = 0;
		$data['smkt_raw6'] = 0;
		$data['smkt_raw7'] = 0;
		$data['smkt_raw8'] = 0;
		$data['smkt_raw9'] = 0;
		$data['smkt_raw10'] = 0;
		$data['smkt_raw11'] = 0;
		$data['smkt_raw12'] = 0;
		$data['smkt_raw_total'] = 0;
		$data['smkt_raw_count'] = 0;
		$data['smkt_raw_avg'] = 0;
		$data['smkt_raw_min'] = 0;
		$data['smkt_raw_max'] = 0;

		foreach($get_smkt_raw as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['smkt_raw' . $month] = $asp;
			$data['smkt_raw_total'] += $asp;

			if($asp < $data['smkt_raw_min'] || $data['smkt_raw_count'] == 0){
				$data['smkt_raw_min'] = $asp;
			}

			if($asp > $data['smkt_raw_max'] || $data['smkt_raw_count'] == 0){
				$data['smkt_raw_max'] = $asp;
			}

			$data['smkt_raw_count']++;
		}

		$data['smkt_raw_avg'] = $data['smkt_raw_total'] != 0 ? $data['smkt_raw_total'] / $data['smkt_raw_count'] : 0;


		$smkt_raw_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - MARINATED CHICKEN RAW', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_raw_prev_year2_jan'] = 0;
		$data['smkt_raw_prev_year2_feb'] = 0;
		$data['smkt_raw_prev_year2_mar'] = 0;
		$data['smkt_raw_prev_year2_apr'] = 0;
		$data['smkt_raw_prev_year2_may'] = 0;
		$data['smkt_raw_prev_year2_jun'] = 0;
		$data['smkt_raw_prev_year2_jul'] = 0;
		$data['smkt_raw_prev_year2_aug'] = 0;
		$data['smkt_raw_prev_year2_sep'] = 0;
		$data['smkt_raw_prev_year2_oct'] = 0;
		$data['smkt_raw_prev_year2_nov'] = 0;
		$data['smkt_raw_prev_year2_dec'] = 0;
		$data['smkt_raw_prev_year2_avg'] = 0;
		$data['smkt_raw_prev_year2_min'] = 0;
		$data['smkt_raw_prev_year2_max'] = 0;

		foreach($smkt_raw_prev_year2 as $row){
			$data['smkt_raw_prev_year2_jan'] = $row->jan_price;
			$data['smkt_raw_prev_year2_feb'] = $row->feb_price;
			$data['smkt_raw_prev_year2_mar'] = $row->mar_price;
			$data['smkt_raw_prev_year2_apr'] = $row->apr_price;
			$data['smkt_raw_prev_year2_may'] = $row->may_price;
			$data['smkt_raw_prev_year2_jun'] = $row->jun_price;
			$data['smkt_raw_prev_year2_jul'] = $row->jul_price;
			$data['smkt_raw_prev_year2_aug'] = $row->aug_price;
			$data['smkt_raw_prev_year2_sep'] = $row->sep_price;
			$data['smkt_raw_prev_year2_oct'] = $row->oct_price;
			$data['smkt_raw_prev_year2_nov'] = $row->nov_price;
			$data['smkt_raw_prev_year2_dec'] = $row->dec_price;
			$data['smkt_raw_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['smkt_raw_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['smkt_raw_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$smkt_raw_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - MARINATED CHICKEN RAW', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_raw_prev_year1_jan'] = 0;
		$data['smkt_raw_prev_year1_feb'] = 0;
		$data['smkt_raw_prev_year1_mar'] = 0;
		$data['smkt_raw_prev_year1_apr'] = 0;
		$data['smkt_raw_prev_year1_may'] = 0;
		$data['smkt_raw_prev_year1_jun'] = 0;
		$data['smkt_raw_prev_year1_jul'] = 0;
		$data['smkt_raw_prev_year1_aug'] = 0;
		$data['smkt_raw_prev_year1_sep'] = 0;
		$data['smkt_raw_prev_year1_oct'] = 0;
		$data['smkt_raw_prev_year1_nov'] = 0;
		$data['smkt_raw_prev_year1_dec'] = 0;
		$data['smkt_raw_prev_year1_avg'] = 0;
		$data['smkt_raw_prev_year1_min'] = 0;
		$data['smkt_raw_prev_year1_max'] = 0;

		foreach($smkt_raw_prev_year1 as $row){
			$data['smkt_raw_prev_year1_jan'] = $row->jan_price;
			$data['smkt_raw_prev_year1_feb'] = $row->feb_price;
			$data['smkt_raw_prev_year1_mar'] = $row->mar_price;
			$data['smkt_raw_prev_year1_apr'] = $row->apr_price;
			$data['smkt_raw_prev_year1_may'] = $row->may_price;
			$data['smkt_raw_prev_year1_jun'] = $row->jun_price;
			$data['smkt_raw_prev_year1_jul'] = $row->jul_price;
			$data['smkt_raw_prev_year1_aug'] = $row->aug_price;
			$data['smkt_raw_prev_year1_sep'] = $row->sep_price;
			$data['smkt_raw_prev_year1_oct'] = $row->oct_price;
			$data['smkt_raw_prev_year1_nov'] = $row->nov_price;
			$data['smkt_raw_prev_year1_dec'] = $row->dec_price;
			$data['smkt_raw_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['smkt_raw_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['smkt_raw_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*SUPERMARKET Liver / Gizzard*/
		$join_smkt_liver = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVER / GIZZARD\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'SUPERMARKET\''
		);

		$get_smkt_liver = $this->admin->get_join('sales_tbl a', $join_smkt_liver, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['smkt_liver1'] = 0;
		$data['smkt_liver2'] = 0;
		$data['smkt_liver3'] = 0;
		$data['smkt_liver4'] = 0;
		$data['smkt_liver5'] = 0;
		$data['smkt_liver6'] = 0;
		$data['smkt_liver7'] = 0;
		$data['smkt_liver8'] = 0;
		$data['smkt_liver9'] = 0;
		$data['smkt_liver10'] = 0;
		$data['smkt_liver11'] = 0;
		$data['smkt_liver12'] = 0;
		$data['smkt_liver_total'] = 0;
		$data['smkt_liver_count'] = 0;
		$data['smkt_liver_avg'] = 0;
		$data['smkt_liver_min'] = 0;
		$data['smkt_liver_max'] = 0;

		foreach($get_smkt_liver as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['smkt_liver' . $month] = $asp;
			$data['smkt_liver_total'] += $asp;

			if($asp < $data['smkt_liver_min'] || $data['smkt_liver_count'] == 0){
				$data['smkt_liver_min'] = $asp;
			}

			if($asp > $data['smkt_liver_max'] || $data['smkt_liver_count'] == 0){
				$data['smkt_liver_max'] = $asp;
			}

			$data['smkt_liver_count']++;
		}

		$data['smkt_liver_avg'] = $data['smkt_liver_total'] != 0 ? $data['smkt_liver_total'] / $data['smkt_liver_count'] : 0;


		$smkt_liver_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - LIVER / GIZZARD', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_liver_prev_year2_jan'] = 0;
		$data['smkt_liver_prev_year2_feb'] = 0;
		$data['smkt_liver_prev_year2_mar'] = 0;
		$data['smkt_liver_prev_year2_apr'] = 0;
		$data['smkt_liver_prev_year2_may'] = 0;
		$data['smkt_liver_prev_year2_jun'] = 0;
		$data['smkt_liver_prev_year2_jul'] = 0;
		$data['smkt_liver_prev_year2_aug'] = 0;
		$data['smkt_liver_prev_year2_sep'] = 0;
		$data['smkt_liver_prev_year2_oct'] = 0;
		$data['smkt_liver_prev_year2_nov'] = 0;
		$data['smkt_liver_prev_year2_dec'] = 0;
		$data['smkt_liver_prev_year2_avg'] = 0;
		$data['smkt_liver_prev_year2_min'] = 0;
		$data['smkt_liver_prev_year2_max'] = 0;

		foreach($smkt_liver_prev_year2 as $row){
			$data['smkt_liver_prev_year2_jan'] = $row->jan_price;
			$data['smkt_liver_prev_year2_feb'] = $row->feb_price;
			$data['smkt_liver_prev_year2_mar'] = $row->mar_price;
			$data['smkt_liver_prev_year2_apr'] = $row->apr_price;
			$data['smkt_liver_prev_year2_may'] = $row->may_price;
			$data['smkt_liver_prev_year2_jun'] = $row->jun_price;
			$data['smkt_liver_prev_year2_jul'] = $row->jul_price;
			$data['smkt_liver_prev_year2_aug'] = $row->aug_price;
			$data['smkt_liver_prev_year2_sep'] = $row->sep_price;
			$data['smkt_liver_prev_year2_oct'] = $row->oct_price;
			$data['smkt_liver_prev_year2_nov'] = $row->nov_price;
			$data['smkt_liver_prev_year2_dec'] = $row->dec_price;
			$data['smkt_liver_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['smkt_liver_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['smkt_liver_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$smkt_liver_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - LIVER / GIZZARD', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_liver_prev_year1_jan'] = 0;
		$data['smkt_liver_prev_year1_feb'] = 0;
		$data['smkt_liver_prev_year1_mar'] = 0;
		$data['smkt_liver_prev_year1_apr'] = 0;
		$data['smkt_liver_prev_year1_may'] = 0;
		$data['smkt_liver_prev_year1_jun'] = 0;
		$data['smkt_liver_prev_year1_jul'] = 0;
		$data['smkt_liver_prev_year1_aug'] = 0;
		$data['smkt_liver_prev_year1_sep'] = 0;
		$data['smkt_liver_prev_year1_oct'] = 0;
		$data['smkt_liver_prev_year1_nov'] = 0;
		$data['smkt_liver_prev_year1_dec'] = 0;
		$data['smkt_liver_prev_year1_avg'] = 0;
		$data['smkt_liver_prev_year1_min'] = 0;
		$data['smkt_liver_prev_year1_max'] = 0;

		foreach($smkt_liver_prev_year1 as $row){
			$data['smkt_liver_prev_year1_jan'] = $row->jan_price;
			$data['smkt_liver_prev_year1_feb'] = $row->feb_price;
			$data['smkt_liver_prev_year1_mar'] = $row->mar_price;
			$data['smkt_liver_prev_year1_apr'] = $row->apr_price;
			$data['smkt_liver_prev_year1_may'] = $row->may_price;
			$data['smkt_liver_prev_year1_jun'] = $row->jun_price;
			$data['smkt_liver_prev_year1_jul'] = $row->jul_price;
			$data['smkt_liver_prev_year1_aug'] = $row->aug_price;
			$data['smkt_liver_prev_year1_sep'] = $row->sep_price;
			$data['smkt_liver_prev_year1_oct'] = $row->oct_price;
			$data['smkt_liver_prev_year1_nov'] = $row->nov_price;
			$data['smkt_liver_prev_year1_dec'] = $row->dec_price;
			$data['smkt_liver_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['smkt_liver_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['smkt_liver_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*SUPERMARKET Marinated Cut ups*/
		$join_smkt_marinated = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'SUPERMARKET\''
		);

		$get_smkt_marinated = $this->admin->get_join('sales_tbl a', $join_smkt_marinated, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['smkt_marinated1'] = 0;
		$data['smkt_marinated2'] = 0;
		$data['smkt_marinated3'] = 0;
		$data['smkt_marinated4'] = 0;
		$data['smkt_marinated5'] = 0;
		$data['smkt_marinated6'] = 0;
		$data['smkt_marinated7'] = 0;
		$data['smkt_marinated8'] = 0;
		$data['smkt_marinated9'] = 0;
		$data['smkt_marinated10'] = 0;
		$data['smkt_marinated11'] = 0;
		$data['smkt_marinated12'] = 0;
		$data['smkt_marinated_total'] = 0;
		$data['smkt_marinated_count'] = 0;
		$data['smkt_marinated_avg'] = 0;
		$data['smkt_marinated_min'] = 0;
		$data['smkt_marinated_max'] = 0;

		foreach($get_smkt_marinated as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['smkt_marinated' . $month] = $asp;
			$data['smkt_marinated_total'] += $asp;

			if($asp < $data['smkt_marinated_min'] || $data['smkt_marinated_count'] == 0){
				$data['smkt_marinated_min'] = $asp;
			}

			if($asp > $data['smkt_marinated_max'] || $data['smkt_marinated_count'] == 0){
				$data['smkt_marinated_max'] = $asp;
			}

			$data['smkt_marinated_count']++;
		}

		$data['smkt_marinated_avg'] = $data['smkt_marinated_total'] != 0 ? $data['smkt_marinated_total'] / $data['smkt_marinated_count'] : 0;

		$smkt_marinated_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - MAR CUT UPS', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_marinated_prev_year2_jan'] = 0;
		$data['smkt_marinated_prev_year2_feb'] = 0;
		$data['smkt_marinated_prev_year2_mar'] = 0;
		$data['smkt_marinated_prev_year2_apr'] = 0;
		$data['smkt_marinated_prev_year2_may'] = 0;
		$data['smkt_marinated_prev_year2_jun'] = 0;
		$data['smkt_marinated_prev_year2_jul'] = 0;
		$data['smkt_marinated_prev_year2_aug'] = 0;
		$data['smkt_marinated_prev_year2_sep'] = 0;
		$data['smkt_marinated_prev_year2_oct'] = 0;
		$data['smkt_marinated_prev_year2_nov'] = 0;
		$data['smkt_marinated_prev_year2_dec'] = 0;
		$data['smkt_marinated_prev_year2_avg'] = 0;
		$data['smkt_marinated_prev_year2_min'] = 0;
		$data['smkt_marinated_prev_year2_max'] = 0;

		foreach($smkt_marinated_prev_year2 as $row){
			$data['smkt_marinated_prev_year2_jan'] = $row->jan_price;
			$data['smkt_marinated_prev_year2_feb'] = $row->feb_price;
			$data['smkt_marinated_prev_year2_mar'] = $row->mar_price;
			$data['smkt_marinated_prev_year2_apr'] = $row->apr_price;
			$data['smkt_marinated_prev_year2_may'] = $row->may_price;
			$data['smkt_marinated_prev_year2_jun'] = $row->jun_price;
			$data['smkt_marinated_prev_year2_jul'] = $row->jul_price;
			$data['smkt_marinated_prev_year2_aug'] = $row->aug_price;
			$data['smkt_marinated_prev_year2_sep'] = $row->sep_price;
			$data['smkt_marinated_prev_year2_oct'] = $row->oct_price;
			$data['smkt_marinated_prev_year2_nov'] = $row->nov_price;
			$data['smkt_marinated_prev_year2_dec'] = $row->dec_price;
			$data['smkt_marinated_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['smkt_marinated_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['smkt_marinated_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$smkt_marinated_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - MAR CUT UPS', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_marinated_prev_year1_jan'] = 0;
		$data['smkt_marinated_prev_year1_feb'] = 0;
		$data['smkt_marinated_prev_year1_mar'] = 0;
		$data['smkt_marinated_prev_year1_apr'] = 0;
		$data['smkt_marinated_prev_year1_may'] = 0;
		$data['smkt_marinated_prev_year1_jun'] = 0;
		$data['smkt_marinated_prev_year1_jul'] = 0;
		$data['smkt_marinated_prev_year1_aug'] = 0;
		$data['smkt_marinated_prev_year1_sep'] = 0;
		$data['smkt_marinated_prev_year1_oct'] = 0;
		$data['smkt_marinated_prev_year1_nov'] = 0;
		$data['smkt_marinated_prev_year1_dec'] = 0;
		$data['smkt_marinated_prev_year1_avg'] = 0;
		$data['smkt_marinated_prev_year1_min'] = 0;
		$data['smkt_marinated_prev_year1_max'] = 0;

		foreach($smkt_marinated_prev_year1 as $row){
			$data['smkt_marinated_prev_year1_jan'] = $row->jan_price;
			$data['smkt_marinated_prev_year1_feb'] = $row->feb_price;
			$data['smkt_marinated_prev_year1_mar'] = $row->mar_price;
			$data['smkt_marinated_prev_year1_apr'] = $row->apr_price;
			$data['smkt_marinated_prev_year1_may'] = $row->may_price;
			$data['smkt_marinated_prev_year1_jun'] = $row->jun_price;
			$data['smkt_marinated_prev_year1_jul'] = $row->jul_price;
			$data['smkt_marinated_prev_year1_aug'] = $row->aug_price;
			$data['smkt_marinated_prev_year1_sep'] = $row->sep_price;
			$data['smkt_marinated_prev_year1_oct'] = $row->oct_price;
			$data['smkt_marinated_prev_year1_nov'] = $row->nov_price;
			$data['smkt_marinated_prev_year1_dec'] = $row->dec_price;
			$data['smkt_marinated_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['smkt_marinated_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['smkt_marinated_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*TRADE DISTRIBUTOR Marinated Raw*/
		$join_tds_raw = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CHICKEN (RAW)\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'TRADE DISTRIBUTOR\''
		);

		$get_tds_raw = $this->admin->get_join('sales_tbl a', $join_tds_raw, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['tds_raw1'] = 0;
		$data['tds_raw2'] = 0;
		$data['tds_raw3'] = 0;
		$data['tds_raw4'] = 0;
		$data['tds_raw5'] = 0;
		$data['tds_raw6'] = 0;
		$data['tds_raw7'] = 0;
		$data['tds_raw8'] = 0;
		$data['tds_raw9'] = 0;
		$data['tds_raw10'] = 0;
		$data['tds_raw11'] = 0;
		$data['tds_raw12'] = 0;
		$data['tds_raw_total'] = 0;
		$data['tds_raw_count'] = 0;
		$data['tds_raw_avg'] = 0;
		$data['tds_raw_min'] = 0;
		$data['tds_raw_max'] = 0;

		foreach($get_tds_raw as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['tds_raw' . $month] = $asp;
			$data['tds_raw_total'] += $asp;

			if($asp < $data['tds_raw_min'] || $data['tds_raw_count'] == 0){
				$data['tds_raw_min'] = $asp;
			}

			if($asp > $data['tds_raw_max'] || $data['tds_raw_count'] == 0){
				$data['tds_raw_max'] = $asp;
			}

			$data['tds_raw_count']++;
		}

		$data['tds_raw_avg'] = $data['tds_raw_total'] != 0 ? $data['tds_raw_total'] / $data['tds_raw_count'] : 0;

		$tds_raw_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs - MARINATED CHICKEN RAW', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_raw_prev_year2_jan'] = 0;
		$data['tds_raw_prev_year2_feb'] = 0;
		$data['tds_raw_prev_year2_mar'] = 0;
		$data['tds_raw_prev_year2_apr'] = 0;
		$data['tds_raw_prev_year2_may'] = 0;
		$data['tds_raw_prev_year2_jun'] = 0;
		$data['tds_raw_prev_year2_jul'] = 0;
		$data['tds_raw_prev_year2_aug'] = 0;
		$data['tds_raw_prev_year2_sep'] = 0;
		$data['tds_raw_prev_year2_oct'] = 0;
		$data['tds_raw_prev_year2_nov'] = 0;
		$data['tds_raw_prev_year2_dec'] = 0;
		$data['tds_raw_prev_year2_avg'] = 0;
		$data['tds_raw_prev_year2_min'] = 0;
		$data['tds_raw_prev_year2_max'] = 0;

		foreach($tds_raw_prev_year2 as $row){
			$data['tds_raw_prev_year2_jan'] = $row->jan_price;
			$data['tds_raw_prev_year2_feb'] = $row->feb_price;
			$data['tds_raw_prev_year2_mar'] = $row->mar_price;
			$data['tds_raw_prev_year2_apr'] = $row->apr_price;
			$data['tds_raw_prev_year2_may'] = $row->may_price;
			$data['tds_raw_prev_year2_jun'] = $row->jun_price;
			$data['tds_raw_prev_year2_jul'] = $row->jul_price;
			$data['tds_raw_prev_year2_aug'] = $row->aug_price;
			$data['tds_raw_prev_year2_sep'] = $row->sep_price;
			$data['tds_raw_prev_year2_oct'] = $row->oct_price;
			$data['tds_raw_prev_year2_nov'] = $row->nov_price;
			$data['tds_raw_prev_year2_dec'] = $row->dec_price;
			$data['tds_raw_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['tds_raw_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['tds_raw_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$tds_raw_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs - MARINATED CHICKEN RAW', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_raw_prev_year1_jan'] = 0;
		$data['tds_raw_prev_year1_feb'] = 0;
		$data['tds_raw_prev_year1_mar'] = 0;
		$data['tds_raw_prev_year1_apr'] = 0;
		$data['tds_raw_prev_year1_may'] = 0;
		$data['tds_raw_prev_year1_jun'] = 0;
		$data['tds_raw_prev_year1_jul'] = 0;
		$data['tds_raw_prev_year1_aug'] = 0;
		$data['tds_raw_prev_year1_sep'] = 0;
		$data['tds_raw_prev_year1_oct'] = 0;
		$data['tds_raw_prev_year1_nov'] = 0;
		$data['tds_raw_prev_year1_dec'] = 0;
		$data['tds_raw_prev_year1_avg'] = 0;
		$data['tds_raw_prev_year1_min'] = 0;
		$data['tds_raw_prev_year1_max'] = 0;

		foreach($tds_raw_prev_year1 as $row){
			$data['tds_raw_prev_year1_jan'] = $row->jan_price;
			$data['tds_raw_prev_year1_feb'] = $row->feb_price;
			$data['tds_raw_prev_year1_mar'] = $row->mar_price;
			$data['tds_raw_prev_year1_apr'] = $row->apr_price;
			$data['tds_raw_prev_year1_may'] = $row->may_price;
			$data['tds_raw_prev_year1_jun'] = $row->jun_price;
			$data['tds_raw_prev_year1_jul'] = $row->jul_price;
			$data['tds_raw_prev_year1_aug'] = $row->aug_price;
			$data['tds_raw_prev_year1_sep'] = $row->sep_price;
			$data['tds_raw_prev_year1_oct'] = $row->oct_price;
			$data['tds_raw_prev_year1_nov'] = $row->nov_price;
			$data['tds_raw_prev_year1_dec'] = $row->dec_price;
			$data['tds_raw_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['tds_raw_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['tds_raw_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*TRADE DISTRIBUTOR Liver / Gizzard*/
		$join_tds_liver = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVER / GIZZARD\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'TRADE DISTRIBUTOR\''
		);

		$get_tds_liver = $this->admin->get_join('sales_tbl a', $join_tds_liver, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['tds_liver1'] = 0;
		$data['tds_liver2'] = 0;
		$data['tds_liver3'] = 0;
		$data['tds_liver4'] = 0;
		$data['tds_liver5'] = 0;
		$data['tds_liver6'] = 0;
		$data['tds_liver7'] = 0;
		$data['tds_liver8'] = 0;
		$data['tds_liver9'] = 0;
		$data['tds_liver10'] = 0;
		$data['tds_liver11'] = 0;
		$data['tds_liver12'] = 0;
		$data['tds_liver_total'] = 0;
		$data['tds_liver_count'] = 0;
		$data['tds_liver_avg'] = 0;
		$data['tds_liver_min'] = 0;
		$data['tds_liver_max'] = 0;

		foreach($get_tds_liver as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['tds_liver' . $month] = $asp;
			$data['tds_liver_total'] += $asp;

			if($asp < $data['tds_liver_min'] || $data['tds_liver_count'] == 0){
				$data['tds_liver_min'] = $asp;
			}

			if($asp > $data['tds_liver_max'] || $data['tds_liver_count'] == 0){
				$data['tds_liver_max'] = $asp;
			}

			$data['tds_liver_count']++;
		}

		$data['tds_liver_avg'] = $data['tds_liver_total'] != 0 ? $data['tds_liver_total'] / $data['tds_liver_count'] : 0;


		$tds_liver_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs - LIVER / GIZZARD', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_liver_prev_year2_jan'] = 0;
		$data['tds_liver_prev_year2_feb'] = 0;
		$data['tds_liver_prev_year2_mar'] = 0;
		$data['tds_liver_prev_year2_apr'] = 0;
		$data['tds_liver_prev_year2_may'] = 0;
		$data['tds_liver_prev_year2_jun'] = 0;
		$data['tds_liver_prev_year2_jul'] = 0;
		$data['tds_liver_prev_year2_aug'] = 0;
		$data['tds_liver_prev_year2_sep'] = 0;
		$data['tds_liver_prev_year2_oct'] = 0;
		$data['tds_liver_prev_year2_nov'] = 0;
		$data['tds_liver_prev_year2_dec'] = 0;
		$data['tds_liver_prev_year2_avg'] = 0;
		$data['tds_liver_prev_year2_min'] = 0;
		$data['tds_liver_prev_year2_max'] = 0;

		foreach($tds_liver_prev_year2 as $row){
			$data['tds_liver_prev_year2_jan'] = $row->jan_price;
			$data['tds_liver_prev_year2_feb'] = $row->feb_price;
			$data['tds_liver_prev_year2_mar'] = $row->mar_price;
			$data['tds_liver_prev_year2_apr'] = $row->apr_price;
			$data['tds_liver_prev_year2_may'] = $row->may_price;
			$data['tds_liver_prev_year2_jun'] = $row->jun_price;
			$data['tds_liver_prev_year2_jul'] = $row->jul_price;
			$data['tds_liver_prev_year2_aug'] = $row->aug_price;
			$data['tds_liver_prev_year2_sep'] = $row->sep_price;
			$data['tds_liver_prev_year2_oct'] = $row->oct_price;
			$data['tds_liver_prev_year2_nov'] = $row->nov_price;
			$data['tds_liver_prev_year2_dec'] = $row->dec_price;
			$data['tds_liver_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['tds_liver_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['tds_liver_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$tds_liver_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs - LIVER / GIZZARD', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_liver_prev_year1_jan'] = 0;
		$data['tds_liver_prev_year1_feb'] = 0;
		$data['tds_liver_prev_year1_mar'] = 0;
		$data['tds_liver_prev_year1_apr'] = 0;
		$data['tds_liver_prev_year1_may'] = 0;
		$data['tds_liver_prev_year1_jun'] = 0;
		$data['tds_liver_prev_year1_jul'] = 0;
		$data['tds_liver_prev_year1_aug'] = 0;
		$data['tds_liver_prev_year1_sep'] = 0;
		$data['tds_liver_prev_year1_oct'] = 0;
		$data['tds_liver_prev_year1_nov'] = 0;
		$data['tds_liver_prev_year1_dec'] = 0;
		$data['tds_liver_prev_year1_avg'] = 0;
		$data['tds_liver_prev_year1_min'] = 0;
		$data['tds_liver_prev_year1_max'] = 0;

		foreach($tds_liver_prev_year1 as $row){
			$data['tds_liver_prev_year1_jan'] = $row->jan_price;
			$data['tds_liver_prev_year1_feb'] = $row->feb_price;
			$data['tds_liver_prev_year1_mar'] = $row->mar_price;
			$data['tds_liver_prev_year1_apr'] = $row->apr_price;
			$data['tds_liver_prev_year1_may'] = $row->may_price;
			$data['tds_liver_prev_year1_jun'] = $row->jun_price;
			$data['tds_liver_prev_year1_jul'] = $row->jul_price;
			$data['tds_liver_prev_year1_aug'] = $row->aug_price;
			$data['tds_liver_prev_year1_sep'] = $row->sep_price;
			$data['tds_liver_prev_year1_oct'] = $row->oct_price;
			$data['tds_liver_prev_year1_nov'] = $row->nov_price;
			$data['tds_liver_prev_year1_dec'] = $row->dec_price;
			$data['tds_liver_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['tds_liver_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['tds_liver_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*Resellers*/
		
		$get_rsl_orc = $this->admin->get_query("SELECT p.size_name, AVG(asp_tbl.jan_asp) as orc_jan, AVG(asp_tbl.feb_asp) as orc_feb, AVG(asp_tbl.mar_asp) as orc_mar, AVG(asp_tbl.apr_asp) as orc_apr, AVG(asp_tbl.may_asp) as orc_may, AVG(asp_tbl.jun_asp) as orc_jun, AVG(asp_tbl.jul_asp) as orc_jul, AVG(asp_tbl.aug_asp) as orc_aug, AVG(asp_tbl.sep_asp) as orc_sep, AVG(asp_tbl.oct_asp) as orc_oct, AVG(asp_tbl.nov_asp) as orc_nov, AVG(asp_tbl.dec_asp) as orc_dec FROM material_tbl o, size_tbl p,

		(SELECT m.material_id, m.size_id,

		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-01-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as jan_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-02-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as feb_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-03-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as mar_asp,
    
   		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-04-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as apr_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-05-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as may_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-06-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as jun_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-07-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as jul_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-08-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as aug_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-09-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as sep_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-10-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as oct_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-11-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as nov_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-12-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0) as dec_asp
    
		FROM material_size_tbl m, brand_tbl n WHERE m.brand_id = n.brand_id AND m.material_size_status = 1 AND n.brand_name = 'RESELLER' AND m.is_orc = 1) as asp_tbl

		WHERE o.material_id = asp_tbl.material_id AND p.size_id = asp_tbl.size_id GROUP BY p.size_id");

		$data['rsl_reg1'] = $data['rsl_reg2'] = $data['rsl_reg3'] = $data['rsl_reg4'] = $data['rsl_reg5'] = $data['rsl_reg6'] = $data['rsl_reg7'] = $data['rsl_reg8'] = $data['rsl_reg9'] = $data['rsl_reg10'] = $data['rsl_reg11'] = $data['rsl_reg12'] = $data['rsl_reg_total'] = $data['rsl_reg_count'] = $data['rsl_reg_avg'] = $data['rsl_reg_min'] = $data['rsl_reg_max'] = 0;

		$data['rsl_jbo1'] = $data['rsl_jbo2'] = $data['rsl_jbo3'] = $data['rsl_jbo4'] = $data['rsl_jbo5'] = $data['rsl_jbo6'] = $data['rsl_jbo7'] = $data['rsl_jbo8'] = $data['rsl_jbo9'] = $data['rsl_jbo10'] = $data['rsl_jbo11'] = $data['rsl_jbo12'] = $data['rsl_jbo_total'] = $data['rsl_jbo_count'] = $data['rsl_jbo_avg'] = $data['rsl_jbo_min'] = $data['rsl_jbo_max'] = 0;

		$data['rsl_ss1'] = $data['rsl_ss2'] = $data['rsl_ss3'] = $data['rsl_ss4'] = $data['rsl_ss5'] = $data['rsl_ss6'] = $data['rsl_ss7'] = $data['rsl_ss8'] = $data['rsl_ss9'] = $data['rsl_ss10'] = $data['rsl_ss11'] = $data['rsl_ss12'] = $data['rsl_ss_total'] = $data['rsl_ss_count'] = $data['rsl_ss_avg'] = $data['rsl_ss_min'] = $data['rsl_ss_max'] = 0;

		$data['rsl_bt1'] = $data['rsl_bt2'] = $data['rsl_bt3'] = $data['rsl_bt4'] = $data['rsl_bt5'] = $data['rsl_bt6'] = $data['rsl_bt7'] = $data['rsl_bt8'] = $data['rsl_bt9'] = $data['rsl_bt10'] = $data['rsl_bt11'] = $data['rsl_bt12'] = $data['rsl_bt_total'] = $data['rsl_bt_count'] = $data['rsl_bt_avg'] = $data['rsl_bt_min'] = $data['rsl_bt_max'] = 0;

		$data['rsl_half1'] = $data['rsl_half2'] = $data['rsl_half3'] = $data['rsl_half4'] = $data['rsl_half5'] = $data['rsl_half6'] = $data['rsl_half7'] = $data['rsl_half8'] = $data['rsl_half9'] = $data['rsl_half10'] = $data['rsl_half11'] = $data['rsl_half12'] = $data['rsl_half_total'] = $data['rsl_half_count'] = $data['rsl_half_avg'] = $data['rsl_half_min'] = $data['rsl_half_max'] = 0;

		$data['rsl_reg1_year2'] = 0;
		$data['rsl_reg2_year2'] = 0;
		$data['rsl_reg3_year2'] = 0;
		$data['rsl_reg4_year2'] = 0;
		$data['rsl_reg5_year2'] = 0;
		$data['rsl_reg6_year2'] = 0;
		$data['rsl_reg7_year2'] = 0;
		$data['rsl_reg8_year2'] = 0;
		$data['rsl_reg9_year2'] = 0;
		$data['rsl_reg10_year2'] = 0;
		$data['rsl_reg11_year2'] = 0;
		$data['rsl_reg12_year2'] = 0;
		$data['rsl_reg_avg_year2'] = 0;
		$data['rsl_reg_min_year2'] = 0;
		$data['rsl_reg_max_year2'] = 0;

		$data['rsl_reg1_year1'] = 0;
		$data['rsl_reg2_year1'] = 0;
		$data['rsl_reg3_year1'] = 0;
		$data['rsl_reg4_year1'] = 0;
		$data['rsl_reg5_year1'] = 0;
		$data['rsl_reg6_year1'] = 0;
		$data['rsl_reg7_year1'] = 0;
		$data['rsl_reg8_year1'] = 0;
		$data['rsl_reg9_year1'] = 0;
		$data['rsl_reg10_year1'] = 0;
		$data['rsl_reg11_year1'] = 0;
		$data['rsl_reg12_year1'] = 0;
		$data['rsl_reg_avg_year1'] = 0;
		$data['rsl_reg_min_year1'] = 0;
		$data['rsl_reg_max_year1'] = 0;

		$data['rsl_jbo1_year2'] = 0;
		$data['rsl_jbo2_year2'] = 0;
		$data['rsl_jbo3_year2'] = 0;
		$data['rsl_jbo4_year2'] = 0;
		$data['rsl_jbo5_year2'] = 0;
		$data['rsl_jbo6_year2'] = 0;
		$data['rsl_jbo7_year2'] = 0;
		$data['rsl_jbo8_year2'] = 0;
		$data['rsl_jbo9_year2'] = 0;
		$data['rsl_jbo10_year2'] = 0;
		$data['rsl_jbo11_year2'] = 0;
		$data['rsl_jbo12_year2'] = 0;
		$data['rsl_jbo_year2_avg'] = 0;
		$data['rsl_jbo_year2_min'] = 0;
		$data['rsl_jbo_year2_max'] = 0;

		$data['rsl_jbo1_year2'] = 0;
		$data['rsl_jbo2_year2'] = 0;
		$data['rsl_jbo3_year2'] = 0;
		$data['rsl_jbo4_year2'] = 0;
		$data['rsl_jbo5_year2'] = 0;
		$data['rsl_jbo6_year2'] = 0;
		$data['rsl_jbo7_year2'] = 0;
		$data['rsl_jbo8_year2'] = 0;
		$data['rsl_jbo9_year2'] = 0;
		$data['rsl_jbo10_year2'] = 0;
		$data['rsl_jbo11_year2'] = 0;
		$data['rsl_jbo12_year2'] = 0;
		$data['rsl_jbo_year2_avg'] = 0;
		$data['rsl_jbo_year2_min'] = 0;
		$data['rsl_jbo_year2_max'] = 0;


		$data['rsl_jbo1_year1'] = 0;
		$data['rsl_jbo2_year1'] = 0;
		$data['rsl_jbo3_year1'] = 0;
		$data['rsl_jbo4_year1'] = 0;
		$data['rsl_jbo5_year1'] = 0;
		$data['rsl_jbo6_year1'] = 0;
		$data['rsl_jbo7_year1'] = 0;
		$data['rsl_jbo8_year1'] = 0;
		$data['rsl_jbo9_year1'] = 0;
		$data['rsl_jbo10_year1'] = 0;
		$data['rsl_jbo11_year1'] = 0;
		$data['rsl_jbo12_year1'] = 0;
		$data['rsl_jbo_year1_avg'] = 0;
		$data['rsl_jbo_year1_min'] = 0;
		$data['rsl_jbo_year1_max'] = 0;

		$data['rsl_ss1_year2'] = 0;
		$data['rsl_ss2_year2'] = 0;
		$data['rsl_ss3_year2'] = 0;
		$data['rsl_ss4_year2'] = 0;
		$data['rsl_ss5_year2'] = 0;
		$data['rsl_ss6_year2'] = 0;
		$data['rsl_ss7_year2'] = 0;
		$data['rsl_ss8_year2'] = 0;
		$data['rsl_ss9_year2'] = 0;
		$data['rsl_ss10_year2'] = 0;
		$data['rsl_ss11_year2'] = 0;
		$data['rsl_ss12_year2'] = 0;
		$data['rsl_ss_avg_year2'] = 0;
		$data['rsl_ss_min_year2'] = 0;
		$data['rsl_ss_max_year2'] = 0;


		$data['rsl_ss1_year1'] = 0;
		$data['rsl_ss2_year1'] = 0;
		$data['rsl_ss3_year1'] = 0;
		$data['rsl_ss4_year1'] = 0;
		$data['rsl_ss5_year1'] = 0;
		$data['rsl_ss6_year1'] = 0;
		$data['rsl_ss7_year1'] = 0;
		$data['rsl_ss8_year1'] = 0;
		$data['rsl_ss9_year1'] = 0;
		$data['rsl_ss10_year1'] = 0;
		$data['rsl_ss11_year1'] = 0;
		$data['rsl_ss12_year1'] = 0;
		$data['rsl_ss_avg_year1'] = 0;
		$data['rsl_ss_min_year1'] = 0;
		$data['rsl_ss_max_year1'] = 0;

		$data['rsl_bt1_year2'] = 0;
		$data['rsl_bt2_year2'] = 0;
		$data['rsl_bt3_year2'] = 0;
		$data['rsl_bt4_year2'] = 0;
		$data['rsl_bt5_year2'] = 0;
		$data['rsl_bt6_year2'] = 0;
		$data['rsl_bt7_year2'] = 0;
		$data['rsl_bt8_year2'] = 0;
		$data['rsl_bt9_year2'] = 0;
		$data['rsl_bt10_year2'] = 0;
		$data['rsl_bt11_year2'] = 0;
		$data['rsl_bt12_year2'] = 0;
		$data['rsl_bt_avg_year2'] = 0;
		$data['rsl_bt_min_year2'] = 0;
		$data['rsl_bt_max_year2'] = 0;

		$data['rsl_bt1_year1'] = 0;
		$data['rsl_bt2_year1'] = 0;
		$data['rsl_bt3_year1'] = 0;
		$data['rsl_bt4_year1'] = 0;
		$data['rsl_bt5_year1'] = 0;
		$data['rsl_bt6_year1'] = 0;
		$data['rsl_bt7_year1'] = 0;
		$data['rsl_bt8_year1'] = 0;
		$data['rsl_bt9_year1'] = 0;
		$data['rsl_bt10_year1'] = 0;
		$data['rsl_bt11_year1'] = 0;
		$data['rsl_bt12_year1'] = 0;
		$data['rsl_bt_avg_year1'] = 0;
		$data['rsl_bt_min_year1'] = 0;
		$data['rsl_bt_max_year1'] = 0;

		$data['rsl_half1_year2'] = 0;
		$data['rsl_half2_year2'] = 0;
		$data['rsl_half3_year2'] = 0;
		$data['rsl_half4_year2'] = 0;
		$data['rsl_half5_year2'] = 0;
		$data['rsl_half6_year2'] = 0;
		$data['rsl_half7_year2'] = 0;
		$data['rsl_half8_year2'] = 0;
		$data['rsl_half9_year2'] = 0;
		$data['rsl_half10_year2'] = 0;
		$data['rsl_half11_year2'] = 0;
		$data['rsl_half12_year2'] = 0;
		$data['rsl_half_avg_year2'] = 0;
		$data['rsl_half_min_year2'] = 0;
		$data['rsl_half_max_year2'] = 0;

		$data['rsl_half1_year1'] = 0;
		$data['rsl_half2_year1'] = 0;
		$data['rsl_half3_year1'] = 0;
		$data['rsl_half4_year1'] = 0;
		$data['rsl_half5_year1'] = 0;
		$data['rsl_half6_year1'] = 0;
		$data['rsl_half7_year1'] = 0;
		$data['rsl_half8_year1'] = 0;
		$data['rsl_half9_year1'] = 0;
		$data['rsl_half10_year1'] = 0;
		$data['rsl_half11_year1'] = 0;
		$data['rsl_half12_year1'] = 0;
		$data['rsl_half_avg_year1'] = 0;
		$data['rsl_half_min_year1'] = 0;
		$data['rsl_half_max_year1'] = 0;

		foreach($get_rsl_orc as $row){
			$orc_size = $row->size_name;
			$orc_jan = $row->orc_jan;
			$orc_feb = $row->orc_feb;
			$orc_mar = $row->orc_mar;
			$orc_apr = $row->orc_apr;
			$orc_may = $row->orc_may;
			$orc_jun = $row->orc_jun;
			$orc_jul = $row->orc_jul;
			$orc_aug = $row->orc_aug;
			$orc_sep = $row->orc_sep;
			$orc_oct = $row->orc_oct;
			$orc_nov = $row->orc_nov;
			$orc_dec = $row->orc_dec;
			$orc_min = min($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_max = max($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_avg = ($orc_jan + $orc_feb + $orc_mar + $orc_apr + $orc_may + $orc_jun + $orc_jul + $orc_aug + $orc_sep + $orc_oct + $orc_nov + $orc_dec) / 12;

			if($orc_size == "REGULAR"){
				$data['rsl_reg1'] = $orc_jan;
				$data['rsl_reg2'] = $orc_feb;
				$data['rsl_reg3'] = $orc_mar;
				$data['rsl_reg4'] = $orc_apr;
				$data['rsl_reg5'] = $orc_may;
				$data['rsl_reg6'] = $orc_jun;
				$data['rsl_reg7'] = $orc_jul;
				$data['rsl_reg8'] = $orc_aug;
				$data['rsl_reg9'] = $orc_sep;
				$data['rsl_reg10'] = $orc_oct;
				$data['rsl_reg11'] = $orc_nov;
				$data['rsl_reg12'] = $orc_dec;
				$data['rsl_reg_avg'] = $orc_avg;
				$data['rsl_reg_min'] = $orc_min;
				$data['rsl_reg_max'] = $orc_max;

				$reg_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - REGULAR', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($reg_prev_year2 as $row){
					$data['rsl_reg1_year2'] = $row->jan_price;
					$data['rsl_reg2_year2'] = $row->feb_price;
					$data['rsl_reg3_year2'] = $row->mar_price;
					$data['rsl_reg4_year2'] = $row->apr_price;
					$data['rsl_reg5_year2'] = $row->may_price;
					$data['rsl_reg6_year2'] = $row->jun_price;
					$data['rsl_reg7_year2'] = $row->jul_price;
					$data['rsl_reg8_year2'] = $row->aug_price;
					$data['rsl_reg9_year2'] = $row->sep_price;
					$data['rsl_reg10_year2'] = $row->oct_price;
					$data['rsl_reg11_year2'] = $row->nov_price;
					$data['rsl_reg12_year2'] = $row->dec_price;
					$data['rsl_reg_avg_year2'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['rsl_reg_min_year2'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['rsl_reg_max_year2'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

				$reg_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - REGULAR', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($reg_prev_year1 as $row){
					$data['rsl_reg1_year1'] = $row->jan_price;
					$data['rsl_reg2_year1'] = $row->feb_price;
					$data['rsl_reg3_year1'] = $row->mar_price;
					$data['rsl_reg4_year1'] = $row->apr_price;
					$data['rsl_reg5_year1'] = $row->may_price;
					$data['rsl_reg6_year1'] = $row->jun_price;
					$data['rsl_reg7_year1'] = $row->jul_price;
					$data['rsl_reg8_year1'] = $row->aug_price;
					$data['rsl_reg9_year1'] = $row->sep_price;
					$data['rsl_reg10_year1'] = $row->oct_price;
					$data['rsl_reg11_year1'] = $row->nov_price;
					$data['rsl_reg12_year1'] = $row->dec_price;
					$data['rsl_reg_avg_year1'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['rsl_reg_min_year1'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['rsl_reg_max_year1'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "JUMBO"){
				$data['rsl_jbo1'] = $orc_jan;
				$data['rsl_jbo2'] = $orc_feb;
				$data['rsl_jbo3'] = $orc_mar;
				$data['rsl_jbo4'] = $orc_apr;
				$data['rsl_jbo5'] = $orc_may;
				$data['rsl_jbo6'] = $orc_jun;
				$data['rsl_jbo7'] = $orc_jul;
				$data['rsl_jbo8'] = $orc_aug;
				$data['rsl_jbo9'] = $orc_sep;
				$data['rsl_jbo10'] = $orc_oct;
				$data['rsl_jbo11'] = $orc_nov;
				$data['rsl_jbo12'] = $orc_dec;
				$data['rsl_jbo_avg'] = $orc_avg;
				$data['rsl_jbo_min'] = $orc_min;
				$data['rsl_jbo_max'] = $orc_max;

				$jbo_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - JUMBO', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($jbo_prev_year2 as $row){
					$data['rsl_jbo1_year2'] = $row->jan_price;
					$data['rsl_jbo2_year2'] = $row->feb_price;
					$data['rsl_jbo3_year2'] = $row->mar_price;
					$data['rsl_jbo4_year2'] = $row->apr_price;
					$data['rsl_jbo5_year2'] = $row->may_price;
					$data['rsl_jbo6_year2'] = $row->jun_price;
					$data['rsl_jbo7_year2'] = $row->jul_price;
					$data['rsl_jbo8_year2'] = $row->aug_price;
					$data['rsl_jbo9_year2'] = $row->sep_price;
					$data['rsl_jbo10_year2'] = $row->oct_price;
					$data['rsl_jbo11_year2'] = $row->nov_price;
					$data['rsl_jbo12_year2'] = $row->dec_price;
					$data['rsl_jbo_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['rsl_jbo_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['rsl_jbo_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

				$jbo_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - JUMBO', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($jbo_prev_year1 as $row){
					$data['rsl_jbo1_year1'] = $row->jan_price;
					$data['rsl_jbo2_year1'] = $row->feb_price;
					$data['rsl_jbo3_year1'] = $row->mar_price;
					$data['rsl_jbo4_year1'] = $row->apr_price;
					$data['rsl_jbo5_year1'] = $row->may_price;
					$data['rsl_jbo6_year1'] = $row->jun_price;
					$data['rsl_jbo7_year1'] = $row->jul_price;
					$data['rsl_jbo8_year1'] = $row->aug_price;
					$data['rsl_jbo9_year1'] = $row->sep_price;
					$data['rsl_jbo10_year1'] = $row->oct_price;
					$data['rsl_jbo11_year1'] = $row->nov_price;
					$data['rsl_jbo12_year1'] = $row->dec_price;
					$data['rsl_jbo_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['rsl_jbo_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['rsl_jbo_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "SUPERSIZE"){
				$data['rsl_ss1'] = $orc_jan;
				$data['rsl_ss2'] = $orc_feb;
				$data['rsl_ss3'] = $orc_mar;
				$data['rsl_ss4'] = $orc_apr;
				$data['rsl_ss5'] = $orc_may;
				$data['rsl_ss6'] = $orc_jun;
				$data['rsl_ss7'] = $orc_jul;
				$data['rsl_ss8'] = $orc_aug;
				$data['rsl_ss9'] = $orc_sep;
				$data['rsl_ss10'] = $orc_oct;
				$data['rsl_ss11'] = $orc_nov;
				$data['rsl_ss12'] = $orc_dec;
				$data['rsl_ss_avg'] = $orc_avg;
				$data['rsl_ss_min'] = $orc_min;
				$data['rsl_ss_max'] = $orc_max;

				$ss_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - SUPERSIZE', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($ss_prev_year2 as $row){
					$data['rsl_ss1_year2'] = $row->jan_price;
					$data['rsl_ss2_year2'] = $row->feb_price;
					$data['rsl_ss3_year2'] = $row->mar_price;
					$data['rsl_ss4_year2'] = $row->apr_price;
					$data['rsl_ss5_year2'] = $row->may_price;
					$data['rsl_ss6_year2'] = $row->jun_price;
					$data['rsl_ss7_year2'] = $row->jul_price;
					$data['rsl_ss8_year2'] = $row->aug_price;
					$data['rsl_ss9_year2'] = $row->sep_price;
					$data['rsl_ss10_year2'] = $row->oct_price;
					$data['rsl_ss11_year2'] = $row->nov_price;
					$data['rsl_ss12_year2'] = $row->dec_price;
					$data['rsl_ss_avg_year2'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['rsl_ss_min_year2'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['rsl_ss_max_year2'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

				$ss_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - SUPERSIZE', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($ss_prev_year1 as $row){
					$data['rsl_ss1_year1'] = $row->jan_price;
					$data['rsl_ss2_year1'] = $row->feb_price;
					$data['rsl_ss3_year1'] = $row->mar_price;
					$data['rsl_ss4_year1'] = $row->apr_price;
					$data['rsl_ss5_year1'] = $row->may_price;
					$data['rsl_ss6_year1'] = $row->jun_price;
					$data['rsl_ss7_year1'] = $row->jul_price;
					$data['rsl_ss8_year1'] = $row->aug_price;
					$data['rsl_ss9_year1'] = $row->sep_price;
					$data['rsl_ss10_year1'] = $row->oct_price;
					$data['rsl_ss11_year1'] = $row->nov_price;
					$data['rsl_ss12_year1'] = $row->dec_price;
					$data['rsl_ss_avg_year1'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['rsl_ss_min_year1'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['rsl_ss_max_year1'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "BIGTIME"){
				$data['rsl_bt1'] = $orc_jan;
				$data['rsl_bt2'] = $orc_feb;
				$data['rsl_bt3'] = $orc_mar;
				$data['rsl_bt4'] = $orc_apr;
				$data['rsl_bt5'] = $orc_may;
				$data['rsl_bt6'] = $orc_jun;
				$data['rsl_bt7'] = $orc_jul;
				$data['rsl_bt8'] = $orc_aug;
				$data['rsl_bt9'] = $orc_sep;
				$data['rsl_bt10'] = $orc_oct;
				$data['rsl_bt11'] = $orc_nov;
				$data['rsl_bt12'] = $orc_dec;
				$data['rsl_bt_avg'] = $orc_avg;
				$data['crsl_bt_min'] = $orc_min;
				$data['rsl_bt_max'] = $orc_max;


				$bt_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - BIGTIME', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2),
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($bt_prev_year2 as $row){
					$data['rsl_bt1_year2'] = $row->jan_price;
					$data['rsl_bt2_year2'] = $row->feb_price;
					$data['rsl_bt3_year2'] = $row->mar_price;
					$data['rsl_bt4_year2'] = $row->apr_price;
					$data['rsl_bt5_year2'] = $row->may_price;
					$data['rsl_bt6_year2'] = $row->jun_price;
					$data['rsl_bt7_year2'] = $row->jul_price;
					$data['rsl_bt8_year2'] = $row->aug_price;
					$data['rsl_bt9_year2'] = $row->sep_price;
					$data['rsl_bt10_year2'] = $row->oct_price;
					$data['rsl_bt11_year2'] = $row->nov_price;
					$data['rsl_bt12_year2'] = $row->dec_price;
					$data['rsl_bt_avg_year2'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['rsl_bt_min_year2'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['rsl_bt_max_year2'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

				$bt_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - BIGTIME', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($bt_prev_year1 as $row){
					$data['rsl_bt1_year1'] = $row->jan_price;
					$data['rsl_bt2_year1'] = $row->feb_price;
					$data['rsl_bt3_year1'] = $row->mar_price;
					$data['rsl_bt4_year1'] = $row->apr_price;
					$data['rsl_bt5_year1'] = $row->may_price;
					$data['rsl_bt6_year1'] = $row->jun_price;
					$data['rsl_bt7_year1'] = $row->jul_price;
					$data['rsl_bt8_year1'] = $row->aug_price;
					$data['rsl_bt9_year1'] = $row->sep_price;
					$data['rsl_bt10_year1'] = $row->oct_price;
					$data['rsl_bt11_year1'] = $row->nov_price;
					$data['rsl_bt12_year1'] = $row->dec_price;
					$data['rsl_bt_avg_year1'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['rsl_bt_min_year1'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['rsl_bt_max_year1'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "HALF"){
				$data['rsl_half1'] = $orc_jan;
				$data['rsl_half2'] = $orc_feb;
				$data['rsl_half3'] = $orc_mar;
				$data['rsl_half4'] = $orc_apr;
				$data['rsl_half5'] = $orc_may;
				$data['rsl_half6'] = $orc_jun;
				$data['rsl_half7'] = $orc_jul;
				$data['rsl_half8'] = $orc_aug;
				$data['rsl_half9'] = $orc_sep;
				$data['rsl_half10'] = $orc_oct;
				$data['rsl_half11'] = $orc_nov;
				$data['rsl_half12'] = $orc_dec;
				$data['rsl_half_avg'] = $orc_avg;
				$data['rsl_half_min'] = $orc_min;
				$data['rsl_half_max'] = $orc_max;

				$half_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - HALF', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2),
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($half_prev_year2 as $row){
					$data['rsl_half1_year2'] = $row->jan_price;
					$data['rsl_half2_year2'] = $row->feb_price;
					$data['rsl_half3_year2'] = $row->mar_price;
					$data['rsl_half4_year2'] = $row->apr_price;
					$data['rsl_half5_year2'] = $row->may_price;
					$data['rsl_half6_year2'] = $row->jun_price;
					$data['rsl_half7_year2'] = $row->jul_price;
					$data['rsl_half8_year2'] = $row->aug_price;
					$data['rsl_half9_year2'] = $row->sep_price;
					$data['rsl_half10_year2'] = $row->oct_price;
					$data['rsl_half11_year2'] = $row->nov_price;
					$data['rsl_half12_year2'] = $row->dec_price;
					$data['rsl_half_avg_year2'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['rsl_half_min_year2'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['rsl_half_max_year2'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

				$half_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - HALF', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($half_prev_year1 as $row){
					$data['rsl_half1_year1'] = $row->jan_price;
					$data['rsl_half2_year1'] = $row->feb_price;
					$data['rsl_half3_year1'] = $row->mar_price;
					$data['rsl_half4_year1'] = $row->apr_price;
					$data['rsl_half5_year1'] = $row->may_price;
					$data['rsl_half6_year1'] = $row->jun_price;
					$data['rsl_half7_year1'] = $row->jul_price;
					$data['rsl_half8_year1'] = $row->aug_price;
					$data['rsl_half9_year1'] = $row->sep_price;
					$data['rsl_half10_year1'] = $row->oct_price;
					$data['rsl_half11_year1'] = $row->nov_price;
					$data['rsl_half12_year1'] = $row->dec_price;
					$data['rsl_half_avg_year1'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['rsl_half_min_year1'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['rsl_half_max_year1'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}
			}
		}

		/*RSL Liempo*/
		$join_rsl_liempo = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "LIEMPO"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_liempo = $this->admin->get_join('sales_tbl a', $join_rsl_liempo, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_liempo1'] = 0;
		$data['rsl_liempo2'] = 0;
		$data['rsl_liempo3'] = 0;
		$data['rsl_liempo4'] = 0;
		$data['rsl_liempo5'] = 0;
		$data['rsl_liempo6'] = 0;
		$data['rsl_liempo7'] = 0;
		$data['rsl_liempo8'] = 0;
		$data['rsl_liempo9'] = 0;
		$data['rsl_liempo10'] = 0;
		$data['rsl_liempo11'] = 0;
		$data['rsl_liempo12'] = 0;
		$data['rsl_liempo_total'] = 0;
		$data['rsl_liempo_count'] = 0;
		$data['rsl_liempo_avg'] = 0;
		$data['rsl_liempo_min'] = 0;
		$data['rsl_liempo_max'] = 0;

		foreach($get_rsl_liempo as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['liempo' . $month] = $asp;
			$data['liempo_total'] += $asp;

			if($asp < $data['rsl_liempo_min'] || $data['rsl_liempo_count'] == 0){
				$data['rsl_liempo_min'] = $asp;
			}

			if($asp > $data['rsl_liempo_max'] || $data['rsl_liempo_count'] == 0){
				$data['rsl_liempo_max'] = $asp;
			}

			$data['rsl_liempo_count']++;
		}

		$data['rsl_liempo_avg'] = $data['rsl_liempo_total'] != 0 ? $data['rsl_liempo_total'] / $data['rsl_liempo_count'] : 0;

		$rsl_liempo_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_liempo_prev_year2_jan'] = 0;
		$data['rsl_liempo_prev_year2_feb'] = 0;
		$data['rsl_liempo_prev_year2_mar'] = 0;
		$data['rsl_liempo_prev_year2_apr'] = 0;
		$data['rsl_liempo_prev_year2_may'] = 0;
		$data['rsl_liempo_prev_year2_jun'] = 0;
		$data['rsl_liempo_prev_year2_jul'] = 0;
		$data['rsl_liempo_prev_year2_aug'] = 0;
		$data['rsl_liempo_prev_year2_sep'] = 0;
		$data['rsl_liempo_prev_year2_oct'] = 0;
		$data['rsl_liempo_prev_year2_nov'] = 0;
		$data['rsl_liempo_prev_year2_dec'] = 0;
		$data['rsl_liempo_prev_year2_avg'] = 0;
		$data['rsl_liempo_prev_year2_min'] = 0;
		$data['rsl_liempo_prev_year2_max'] = 0;

		foreach($rsl_liempo_prev_year2 as $row){
			$data['rsl_liempo_prev_year2_jan'] = $row->jan_price;
			$data['rsl_liempo_prev_year2_feb'] = $row->feb_price;
			$data['rsl_liempo_prev_year2_mar'] = $row->mar_price;
			$data['rsl_liempo_prev_year2_apr'] = $row->apr_price;
			$data['rsl_liempo_prev_year2_may'] = $row->may_price;
			$data['rsl_liempo_prev_year2_jun'] = $row->jun_price;
			$data['rsl_liempo_prev_year2_jul'] = $row->jul_price;
			$data['rsl_liempo_prev_year2_aug'] = $row->aug_price;
			$data['rsl_liempo_prev_year2_sep'] = $row->sep_price;
			$data['rsl_liempo_prev_year2_oct'] = $row->oct_price;
			$data['rsl_liempo_prev_year2_nov'] = $row->nov_price;
			$data['rsl_liempo_prev_year2_dec'] = $row->dec_price;
			$data['rsl_liempo_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_liempo_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_liempo_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$rsl_liempo_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_liempo_prev_year1_jan'] = 0;
		$data['rsl_liempo_prev_year1_feb'] = 0;
		$data['rsl_liempo_prev_year1_mar'] = 0;
		$data['rsl_liempo_prev_year1_apr'] = 0;
		$data['rsl_liempo_prev_year1_may'] = 0;
		$data['rsl_liempo_prev_year1_jun'] = 0;
		$data['rsl_liempo_prev_year1_jul'] = 0;
		$data['rsl_liempo_prev_year1_aug'] = 0;
		$data['rsl_liempo_prev_year1_sep'] = 0;
		$data['rsl_liempo_prev_year1_oct'] = 0;
		$data['rsl_liempo_prev_year1_nov'] = 0;
		$data['rsl_liempo_prev_year1_dec'] = 0;
		$data['rsl_liempo_prev_year1_avg'] = 0;
		$data['rsl_liempo_prev_year1_min'] = 0;
		$data['rsl_liempo_prev_year1_max'] = 0;

		foreach($rsl_liempo_prev_year1 as $row){
			$data['rsl_liempo_prev_year1_jan'] = $row->jan_price;
			$data['rsl_liempo_prev_year1_feb'] = $row->feb_price;
			$data['rsl_liempo_prev_year1_mar'] = $row->mar_price;
			$data['rsl_liempo_prev_year1_apr'] = $row->apr_price;
			$data['rsl_liempo_prev_year1_may'] = $row->may_price;
			$data['rsl_liempo_prev_year1_jun'] = $row->jun_price;
			$data['rsl_liempo_prev_year1_jul'] = $row->jul_price;
			$data['rsl_liempo_prev_year1_aug'] = $row->aug_price;
			$data['rsl_liempo_prev_year1_sep'] = $row->sep_price;
			$data['rsl_liempo_prev_year1_oct'] = $row->oct_price;
			$data['rsl_liempo_prev_year1_nov'] = $row->nov_price;
			$data['rsl_liempo_prev_year1_dec'] = $row->dec_price;
			$data['rsl_liempo_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_liempo_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_liempo_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*Reseller Dressed Chicken*/
		$join_rsl_dressed = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_dressed = $this->admin->get_join('sales_tbl a', $join_rsl_dressed, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_dressed1'] = 0;
		$data['rsl_dressed2'] = 0;
		$data['rsl_dressed3'] = 0;
		$data['rsl_dressed4'] = 0;
		$data['rsl_dressed5'] = 0;
		$data['rsl_dressed6'] = 0;
		$data['rsl_dressed7'] = 0;
		$data['rsl_dressed8'] = 0;
		$data['rsl_dressed9'] = 0;
		$data['rsl_dressed10'] = 0;
		$data['rsl_dressed11'] = 0;
		$data['rsl_dressed12'] = 0;
		$data['rsl_dressed_total'] = 0;
		$data['rsl_dressed_count'] = 0;
		$data['rsl_dressed_avg'] = 0;
		$data['rsl_dressed_min'] = 0;
		$data['rsl_dressed_max'] = 0;

		foreach($get_rsl_dressed as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_dressed' . $month] = $asp;
			$data['rsl_dressed_total'] += $asp;

			if($asp < $data['rsl_dressed_min'] || $data['rsl_dressed_count'] == 0){
				$data['rsl_dressed_min'] = $asp;
			}

			if($asp > $data['rsl_dressed_max'] || $data['rsl_dressed_count'] == 0){
				$data['rsl_dressed_max'] = $asp;
			}

			$data['rsl_dressed_count']++;
		}

		$data['rsl_dressed_avg'] = $data['rsl_dressed_total'] != 0 ? $data['rsl_dressed_total'] / $data['rsl_dressed_count'] : 0;

		$rsl_dressed_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_dressed_prev_year2_jan'] = 0;
		$data['rsl_dressed_prev_year2_feb'] = 0;
		$data['rsl_dressed_prev_year2_mar'] = 0;
		$data['rsl_dressed_prev_year2_apr'] = 0;
		$data['rsl_dressed_prev_year2_may'] = 0;
		$data['rsl_dressed_prev_year2_jun'] = 0;
		$data['rsl_dressed_prev_year2_jul'] = 0;
		$data['rsl_dressed_prev_year2_aug'] = 0;
		$data['rsl_dressed_prev_year2_sep'] = 0;
		$data['rsl_dressed_prev_year2_oct'] = 0;
		$data['rsl_dressed_prev_year2_nov'] = 0;
		$data['rsl_dressed_prev_year2_dec'] = 0;
		$data['rsl_dressed_prev_year2_avg'] = 0;
		$data['rsl_dressed_prev_year2_min'] = 0;
		$data['rsl_dressed_prev_year2_max'] = 0;

		foreach($rsl_dressed_prev_year2 as $row){
			$data['rsl_dressed_prev_year2_jan'] = $row->jan_price;
			$data['rsl_dressed_prev_year2_feb'] = $row->feb_price;
			$data['rsl_dressed_prev_year2_mar'] = $row->mar_price;
			$data['rsl_dressed_prev_year2_apr'] = $row->apr_price;
			$data['rsl_dressed_prev_year2_may'] = $row->may_price;
			$data['rsl_dressed_prev_year2_jun'] = $row->jun_price;
			$data['rsl_dressed_prev_year2_jul'] = $row->jul_price;
			$data['rsl_dressed_prev_year2_aug'] = $row->aug_price;
			$data['rsl_dressed_prev_year2_sep'] = $row->sep_price;
			$data['rsl_dressed_prev_year2_oct'] = $row->oct_price;
			$data['rsl_dressed_prev_year2_nov'] = $row->nov_price;
			$data['rsl_dressed_prev_year2_dec'] = $row->dec_price;
			$data['rsl_dressed_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_dressed_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_dressed_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$rsl_dressed_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_dressed_prev_year1_jan'] = 0;
		$data['rsl_dressed_prev_year1_feb'] = 0;
		$data['rsl_dressed_prev_year1_mar'] = 0;
		$data['rsl_dressed_prev_year1_apr'] = 0;
		$data['rsl_dressed_prev_year1_may'] = 0;
		$data['rsl_dressed_prev_year1_jun'] = 0;
		$data['rsl_dressed_prev_year1_jul'] = 0;
		$data['rsl_dressed_prev_year1_aug'] = 0;
		$data['rsl_dressed_prev_year1_sep'] = 0;
		$data['rsl_dressed_prev_year1_oct'] = 0;
		$data['rsl_dressed_prev_year1_nov'] = 0;
		$data['rsl_dressed_prev_year1_dec'] = 0;
		$data['rsl_dressed_prev_year1_avg'] = 0;
		$data['rsl_dressed_prev_year1_min'] = 0;
		$data['rsl_dressed_prev_year1_max'] = 0;

		foreach($rsl_dressed_prev_year1 as $row){
			$data['rsl_dressed_prev_year1_jan'] = $row->jan_price;
			$data['rsl_dressed_prev_year1_feb'] = $row->feb_price;
			$data['rsl_dressed_prev_year1_mar'] = $row->mar_price;
			$data['rsl_dressed_prev_year1_apr'] = $row->apr_price;
			$data['rsl_dressed_prev_year1_may'] = $row->may_price;
			$data['rsl_dressed_prev_year1_jun'] = $row->jun_price;
			$data['rsl_dressed_prev_year1_jul'] = $row->jul_price;
			$data['rsl_dressed_prev_year1_aug'] = $row->aug_price;
			$data['rsl_dressed_prev_year1_sep'] = $row->sep_price;
			$data['rsl_dressed_prev_year1_oct'] = $row->oct_price;
			$data['rsl_dressed_prev_year1_nov'] = $row->nov_price;
			$data['rsl_dressed_prev_year1_dec'] = $row->dec_price;
			$data['rsl_dressed_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_dressed_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_dressed_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*Reseller Chooksies*/
		$join_rsl_chooksies = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 10200095 OR d.material_code = 10200096 OR d.material_code = 10200097)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_chooksies = $this->admin->get_join('sales_tbl a', $join_rsl_chooksies, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_chooksies1'] = 0;
		$data['rsl_chooksies2'] = 0;
		$data['rsl_chooksies3'] = 0;
		$data['rsl_chooksies4'] = 0;
		$data['rsl_chooksies5'] = 0;
		$data['rsl_chooksies6'] = 0;
		$data['rsl_chooksies7'] = 0;
		$data['rsl_chooksies8'] = 0;
		$data['rsl_chooksies9'] = 0;
		$data['rsl_chooksies10'] = 0;
		$data['rsl_chooksies11'] = 0;
		$data['rsl_chooksies12'] = 0;
		$data['rsl_chooksies_total'] = 0;
		$data['rsl_chooksies_count'] = 0;
		$data['rsl_chooksies_avg'] = 0;
		$data['rsl_chooksies_min'] = 0;
		$data['rsl_chooksies_max'] = 0;

		foreach($get_rsl_chooksies as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_chooksies' . $month] = $asp;
			$data['rsl_chooksies_total'] += $asp;

			if($asp < $data['rsl_chooksies_min'] || $data['rsl_chooksies_count'] == 0){
				$data['rsl_chooksies_min'] = $asp;
			}

			if($asp > $data['rsl_chooksies_max'] || $data['rsl_chooksies_count'] == 0){
				$data['rsl_chooksies_max'] = $asp;
			}

			$data['rsl_chooksies_count']++;
		}

		$data['rsl_chooksies_avg'] = $data['rsl_chooksies_total'] != 0 ? $data['rsl_chooksies_total'] / $data['rsl_chooksies_count'] : 0;


		$rsl_chooksies_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_chooksies_prev_year2_jan'] = 0;
		$data['rsl_chooksies_prev_year2_feb'] = 0;
		$data['rsl_chooksies_prev_year2_mar'] = 0;
		$data['rsl_chooksies_prev_year2_apr'] = 0;
		$data['rsl_chooksies_prev_year2_may'] = 0;
		$data['rsl_chooksies_prev_year2_jun'] = 0;
		$data['rsl_chooksies_prev_year2_jul'] = 0;
		$data['rsl_chooksies_prev_year2_aug'] = 0;
		$data['rsl_chooksies_prev_year2_sep'] = 0;
		$data['rsl_chooksies_prev_year2_oct'] = 0;
		$data['rsl_chooksies_prev_year2_nov'] = 0;
		$data['rsl_chooksies_prev_year2_dec'] = 0;
		$data['rsl_chooksies_prev_year2_avg'] = 0;
		$data['rsl_chooksies_prev_year2_min'] = 0;
		$data['rsl_chooksies_prev_year2_max'] = 0;

		foreach($rsl_chooksies_prev_year2 as $row){
			$data['rsl_chooksies_prev_year2_jan'] = $row->jan_price;
			$data['rsl_chooksies_prev_year2_feb'] = $row->feb_price;
			$data['rsl_chooksies_prev_year2_mar'] = $row->mar_price;
			$data['rsl_chooksies_prev_year2_apr'] = $row->apr_price;
			$data['rsl_chooksies_prev_year2_may'] = $row->may_price;
			$data['rsl_chooksies_prev_year2_jun'] = $row->jun_price;
			$data['rsl_chooksies_prev_year2_jul'] = $row->jul_price;
			$data['rsl_chooksies_prev_year2_aug'] = $row->aug_price;
			$data['rsl_chooksies_prev_year2_sep'] = $row->sep_price;
			$data['rsl_chooksies_prev_year2_oct'] = $row->oct_price;
			$data['rsl_chooksies_prev_year2_nov'] = $row->nov_price;
			$data['rsl_chooksies_prev_year2_dec'] = $row->dec_price;
			$data['rsl_chooksies_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_chooksies_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_chooksies_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$rsl_chooksies_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_chooksies_prev_year1_jan'] = 0;
		$data['rsl_chooksies_prev_year1_feb'] = 0;
		$data['rsl_chooksies_prev_year1_mar'] = 0;
		$data['rsl_chooksies_prev_year1_apr'] = 0;
		$data['rsl_chooksies_prev_year1_may'] = 0;
		$data['rsl_chooksies_prev_year1_jun'] = 0;
		$data['rsl_chooksies_prev_year1_jul'] = 0;
		$data['rsl_chooksies_prev_year1_aug'] = 0;
		$data['rsl_chooksies_prev_year1_sep'] = 0;
		$data['rsl_chooksies_prev_year1_oct'] = 0;
		$data['rsl_chooksies_prev_year1_nov'] = 0;
		$data['rsl_chooksies_prev_year1_dec'] = 0;
		$data['rsl_chooksies_prev_year1_avg'] = 0;
		$data['rsl_chooksies_prev_year1_min'] = 0;
		$data['rsl_chooksies_prev_year1_max'] = 0;

		foreach($rsl_chooksies_prev_year1 as $row){
			$data['rsl_chooksies_prev_year1_jan'] = $row->jan_price;
			$data['rsl_chooksies_prev_year1_feb'] = $row->feb_price;
			$data['rsl_chooksies_prev_year1_mar'] = $row->mar_price;
			$data['rsl_chooksies_prev_year1_apr'] = $row->apr_price;
			$data['rsl_chooksies_prev_year1_may'] = $row->may_price;
			$data['rsl_chooksies_prev_year1_jun'] = $row->jun_price;
			$data['rsl_chooksies_prev_year1_jul'] = $row->jul_price;
			$data['rsl_chooksies_prev_year1_aug'] = $row->aug_price;
			$data['rsl_chooksies_prev_year1_sep'] = $row->sep_price;
			$data['rsl_chooksies_prev_year1_oct'] = $row->oct_price;
			$data['rsl_chooksies_prev_year1_nov'] = $row->nov_price;
			$data['rsl_chooksies_prev_year1_dec'] = $row->dec_price;
			$data['rsl_chooksies_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_chooksies_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_chooksies_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$join_rsl_marinado = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000638',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_marinado = $this->admin->get_join('sales_tbl a', $join_rsl_marinado, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_marinado1'] = 0;
		$data['rsl_marinado2'] = 0;
		$data['rsl_marinado3'] = 0;
		$data['rsl_marinado4'] = 0;
		$data['rsl_marinado5'] = 0;
		$data['rsl_marinado6'] = 0;
		$data['rsl_marinado7'] = 0;
		$data['rsl_marinado8'] = 0;
		$data['rsl_marinado9'] = 0;
		$data['rsl_marinado10'] = 0;
		$data['rsl_marinado11'] = 0;
		$data['rsl_marinado12'] = 0;
		$data['rsl_marinado_total'] = 0;
		$data['rsl_marinado_count'] = 0;
		$data['rsl_marinado_avg'] = 0;
		$data['rsl_marinado_min'] = 0;
		$data['rsl_marinado_max'] = 0;

		foreach($get_rsl_marinado as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_marinado' . $month] = $asp;
			$data['rsl_marinado_total'] += $asp;

			if($asp < $data['rsl_marinado_min'] || $data['rsl_marinado_count'] == 0){
				$data['rsl_marinado_min'] = $asp;
			}

			if($asp > $data['rsl_marinado_max'] || $data['rsl_marinado_count'] == 0){
				$data['rsl_marinado_max'] = $asp;
			}

			$data['rsl_marinado_count']++;
		}

		$data['rsl_marinado_avg'] = $data['rsl_marinado_total'] != 0 ? $data['rsl_marinado_total'] / $data['rsl_marinado_count'] : 0;

		$rsl_marinado_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_marinado_prev_year2_jan'] = 0;
		$data['rsl_marinado_prev_year2_feb'] = 0;
		$data['rsl_marinado_prev_year2_mar'] = 0;
		$data['rsl_marinado_prev_year2_apr'] = 0;
		$data['rsl_marinado_prev_year2_may'] = 0;
		$data['rsl_marinado_prev_year2_jun'] = 0;
		$data['rsl_marinado_prev_year2_jul'] = 0;
		$data['rsl_marinado_prev_year2_aug'] = 0;
		$data['rsl_marinado_prev_year2_sep'] = 0;
		$data['rsl_marinado_prev_year2_oct'] = 0;
		$data['rsl_marinado_prev_year2_nov'] = 0;
		$data['rsl_marinado_prev_year2_dec'] = 0;
		$data['rsl_marinado_prev_year2_avg'] = 0;
		$data['rsl_marinado_prev_year2_min'] = 0;
		$data['rsl_marinado_prev_year2_max'] = 0;

		foreach($rsl_marinado_prev_year2 as $row){
			$data['rsl_marinado_prev_year2_jan'] = $row->jan_price;
			$data['rsl_marinado_prev_year2_feb'] = $row->feb_price;
			$data['rsl_marinado_prev_year2_mar'] = $row->mar_price;
			$data['rsl_marinado_prev_year2_apr'] = $row->apr_price;
			$data['rsl_marinado_prev_year2_may'] = $row->may_price;
			$data['rsl_marinado_prev_year2_jun'] = $row->jun_price;
			$data['rsl_marinado_prev_year2_jul'] = $row->jul_price;
			$data['rsl_marinado_prev_year2_aug'] = $row->aug_price;
			$data['rsl_marinado_prev_year2_sep'] = $row->sep_price;
			$data['rsl_marinado_prev_year2_oct'] = $row->oct_price;
			$data['rsl_marinado_prev_year2_nov'] = $row->nov_price;
			$data['rsl_marinado_prev_year2_dec'] = $row->dec_price;
			$data['rsl_marinado_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_marinado_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_marinado_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$rsl_marinado_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_marinado_prev_year1_jan'] = 0;
		$data['rsl_marinado_prev_year1_feb'] = 0;
		$data['rsl_marinado_prev_year1_mar'] = 0;
		$data['rsl_marinado_prev_year1_apr'] = 0;
		$data['rsl_marinado_prev_year1_may'] = 0;
		$data['rsl_marinado_prev_year1_jun'] = 0;
		$data['rsl_marinado_prev_year1_jul'] = 0;
		$data['rsl_marinado_prev_year1_aug'] = 0;
		$data['rsl_marinado_prev_year1_sep'] = 0;
		$data['rsl_marinado_prev_year1_oct'] = 0;
		$data['rsl_marinado_prev_year1_nov'] = 0;
		$data['rsl_marinado_prev_year1_dec'] = 0;
		$data['rsl_marinado_prev_year1_avg'] = 0;
		$data['rsl_marinado_prev_year1_min'] = 0;
		$data['rsl_marinado_prev_year1_max'] = 0;

		foreach($rsl_marinado_prev_year1 as $row){
			$data['rsl_marinado_prev_year1_jan'] = $row->jan_price;
			$data['rsl_marinado_prev_year1_feb'] = $row->feb_price;
			$data['rsl_marinado_prev_year1_mar'] = $row->mar_price;
			$data['rsl_marinado_prev_year1_apr'] = $row->apr_price;
			$data['rsl_marinado_prev_year1_may'] = $row->may_price;
			$data['rsl_marinado_prev_year1_jun'] = $row->jun_price;
			$data['rsl_marinado_prev_year1_jul'] = $row->jul_price;
			$data['rsl_marinado_prev_year1_aug'] = $row->aug_price;
			$data['rsl_marinado_prev_year1_sep'] = $row->sep_price;
			$data['rsl_marinado_prev_year1_oct'] = $row->oct_price;
			$data['rsl_marinado_prev_year1_nov'] = $row->nov_price;
			$data['rsl_marinado_prev_year1_dec'] = $row->dec_price;
			$data['rsl_marinado_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_marinado_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_marinado_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$join_rsl_spicy = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 10200090 OR d.material_code = 1000401 OR d.material_code = 1000402 OR d.material_code = 1000617)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_spicy = $this->admin->get_join('sales_tbl a', $join_rsl_spicy, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_spicy1'] = 0;
		$data['rsl_spicy2'] = 0;
		$data['rsl_spicy3'] = 0;
		$data['rsl_spicy4'] = 0;
		$data['rsl_spicy5'] = 0;
		$data['rsl_spicy6'] = 0;
		$data['rsl_spicy7'] = 0;
		$data['rsl_spicy8'] = 0;
		$data['rsl_spicy9'] = 0;
		$data['rsl_spicy10'] = 0;
		$data['rsl_spicy11'] = 0;
		$data['rsl_spicy12'] = 0;
		$data['rsl_spicy_total'] = 0;
		$data['rsl_spicy_count'] = 0;
		$data['rsl_spicy_avg'] = 0;
		$data['rsl_spicy_min'] = 0;
		$data['rsl_spicy_max'] = 0;

		foreach($get_rsl_spicy as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_spicy' . $month] = $asp;
			$data['rsl_spicy_total'] += $asp;

			if($asp < $data['rsl_spicy_min'] || $data['rsl_spicy_count'] == 0){
				$data['rsl_spicy_min'] = $asp;
			}

			if($asp > $data['rsl_spicy_max'] || $data['rsl_spicy_count'] == 0){
				$data['rsl_spicy_max'] = $asp;
			}

			$data['rsl_spicy_count']++;
		}

		$data['rsl_spicy_avg'] = $data['rsl_spicy_total'] != 0 ? $data['rsl_spicy_total'] / $data['rsl_spicy_count'] : 0;

		$rsl_spicy_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_spicy_prev_year2_jan'] = 0;
		$data['rsl_spicy_prev_year2_feb'] = 0;
		$data['rsl_spicy_prev_year2_mar'] = 0;
		$data['rsl_spicy_prev_year2_apr'] = 0;
		$data['rsl_spicy_prev_year2_may'] = 0;
		$data['rsl_spicy_prev_year2_jun'] = 0;
		$data['rsl_spicy_prev_year2_jul'] = 0;
		$data['rsl_spicy_prev_year2_aug'] = 0;
		$data['rsl_spicy_prev_year2_sep'] = 0;
		$data['rsl_spicy_prev_year2_oct'] = 0;
		$data['rsl_spicy_prev_year2_nov'] = 0;
		$data['rsl_spicy_prev_year2_dec'] = 0;
		$data['rsl_spicy_prev_year2_avg'] = 0;
		$data['rsl_spicy_prev_year2_min'] = 0;
		$data['rsl_spicy_prev_year2_max'] = 0;

		foreach($rsl_spicy_prev_year2 as $row){
			$data['rsl_spicy_prev_year2_jan'] = $row->jan_price;
			$data['rsl_spicy_prev_year2_feb'] = $row->feb_price;
			$data['rsl_spicy_prev_year2_mar'] = $row->mar_price;
			$data['rsl_spicy_prev_year2_apr'] = $row->apr_price;
			$data['rsl_spicy_prev_year2_may'] = $row->may_price;
			$data['rsl_spicy_prev_year2_jun'] = $row->jun_price;
			$data['rsl_spicy_prev_year2_jul'] = $row->jul_price;
			$data['rsl_spicy_prev_year2_aug'] = $row->aug_price;
			$data['rsl_spicy_prev_year2_sep'] = $row->sep_price;
			$data['rsl_spicy_prev_year2_oct'] = $row->oct_price;
			$data['rsl_spicy_prev_year2_nov'] = $row->nov_price;
			$data['rsl_spicy_prev_year2_dec'] = $row->dec_price;
			$data['rsl_spicy_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_spicy_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_spicy_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$rsl_spicy_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_spicy_prev_year1_jan'] = 0;
		$data['rsl_spicy_prev_year1_feb'] = 0;
		$data['rsl_spicy_prev_year1_mar'] = 0;
		$data['rsl_spicy_prev_year1_apr'] = 0;
		$data['rsl_spicy_prev_year1_may'] = 0;
		$data['rsl_spicy_prev_year1_jun'] = 0;
		$data['rsl_spicy_prev_year1_jul'] = 0;
		$data['rsl_spicy_prev_year1_aug'] = 0;
		$data['rsl_spicy_prev_year1_sep'] = 0;
		$data['rsl_spicy_prev_year1_oct'] = 0;
		$data['rsl_spicy_prev_year1_nov'] = 0;
		$data['rsl_spicy_prev_year1_dec'] = 0;
		$data['rsl_spicy_prev_year1_avg'] = 0;
		$data['rsl_spicy_prev_year1_min'] = 0;
		$data['rsl_spicy_prev_year1_max'] = 0;

		foreach($rsl_spicy_prev_year1 as $row){
			$data['rsl_spicy_prev_year1_jan'] = $row->jan_price;
			$data['rsl_spicy_prev_year1_feb'] = $row->feb_price;
			$data['rsl_spicy_prev_year1_mar'] = $row->mar_price;
			$data['rsl_spicy_prev_year1_apr'] = $row->apr_price;
			$data['rsl_spicy_prev_year1_may'] = $row->may_price;
			$data['rsl_spicy_prev_year1_jun'] = $row->jun_price;
			$data['rsl_spicy_prev_year1_jul'] = $row->jul_price;
			$data['rsl_spicy_prev_year1_aug'] = $row->aug_price;
			$data['rsl_spicy_prev_year1_sep'] = $row->sep_price;
			$data['rsl_spicy_prev_year1_oct'] = $row->oct_price;
			$data['rsl_spicy_prev_year1_nov'] = $row->nov_price;
			$data['rsl_spicy_prev_year1_dec'] = $row->dec_price;
			$data['rsl_spicy_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_spicy_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_spicy_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*Barbeque*/
		$join_rsl_barbeque = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000548',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER SPECIALTY PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_barbeque = $this->admin->get_join('sales_tbl a', $join_rsl_barbeque, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_barbeque1'] = 0;
		$data['rsl_barbeque2'] = 0;
		$data['rsl_barbeque3'] = 0;
		$data['rsl_barbeque4'] = 0;
		$data['rsl_barbeque5'] = 0;
		$data['rsl_barbeque6'] = 0;
		$data['rsl_barbeque7'] = 0;
		$data['rsl_barbeque8'] = 0;
		$data['rsl_barbeque9'] = 0;
		$data['rsl_barbeque10'] = 0;
		$data['rsl_barbeque11'] = 0;
		$data['rsl_barbeque12'] = 0;
		$data['rsl_barbeque_total'] = 0;
		$data['rsl_barbeque_count'] = 0;
		$data['rsl_barbeque_avg'] = 0;
		$data['rsl_barbeque_min'] = 0;
		$data['rsl_barbeque_max'] = 0;

		foreach($get_rsl_barbeque as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_barbeque' . $month] = $asp;
			$data['rsl_barbeque_total'] += $asp;

			if($asp < $data['rsl_barbeque_min'] || $data['rsl_barbeque_count'] == 0){
				$data['rsl_barbeque_min'] = $asp;
			}

			if($asp > $data['rsl_barbeque_max'] || $data['rsl_barbeque_count'] == 0){
				$data['rsl_barbeque_max'] = $asp;
			}

			$data['rsl_barbeque_count']++;
		}

		$data['rsl_barbeque_avg'] = $data['rsl_barbeque_total'] != 0 ? $data['rsl_barbeque_total'] / $data['rsl_barbeque_count'] : 0;

		$rsl_barbecue_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BBQ', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_barbecue_prev_year2_jan'] = 0;
		$data['rsl_barbecue_prev_year2_feb'] = 0;
		$data['rsl_barbecue_prev_year2_mar'] = 0;
		$data['rsl_barbecue_prev_year2_apr'] = 0;
		$data['rsl_barbecue_prev_year2_may'] = 0;
		$data['rsl_barbecue_prev_year2_jun'] = 0;
		$data['rsl_barbecue_prev_year2_jul'] = 0;
		$data['rsl_barbecue_prev_year2_aug'] = 0;
		$data['rsl_barbecue_prev_year2_sep'] = 0;
		$data['rsl_barbecue_prev_year2_oct'] = 0;
		$data['rsl_barbecue_prev_year2_nov'] = 0;
		$data['rsl_barbecue_prev_year2_dec'] = 0;
		$data['rsl_barbecue_prev_year2_avg'] = 0;
		$data['rsl_barbecue_prev_year2_min'] = 0;
		$data['rsl_barbecue_prev_year2_max'] = 0;

		foreach($rsl_barbecue_prev_year2 as $row){
			$data['rsl_barbecue_prev_year2_jan'] = $row->jan_price;
			$data['rsl_barbecue_prev_year2_feb'] = $row->feb_price;
			$data['rsl_barbecue_prev_year2_mar'] = $row->mar_price;
			$data['rsl_barbecue_prev_year2_apr'] = $row->apr_price;
			$data['rsl_barbecue_prev_year2_may'] = $row->may_price;
			$data['rsl_barbecue_prev_year2_jun'] = $row->jun_price;
			$data['rsl_barbecue_prev_year2_jul'] = $row->jul_price;
			$data['rsl_barbecue_prev_year2_aug'] = $row->aug_price;
			$data['rsl_barbecue_prev_year2_sep'] = $row->sep_price;
			$data['rsl_barbecue_prev_year2_oct'] = $row->oct_price;
			$data['rsl_barbecue_prev_year2_nov'] = $row->nov_price;
			$data['rsl_barbecue_prev_year2_dec'] = $row->dec_price;
			$data['rsl_barbecue_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_barbecue_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_barbecue_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$rsl_barbecue_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BBQ', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_barbecue_prev_year1_jan'] = 0;
		$data['rsl_barbecue_prev_year1_feb'] = 0;
		$data['rsl_barbecue_prev_year1_mar'] = 0;
		$data['rsl_barbecue_prev_year1_apr'] = 0;
		$data['rsl_barbecue_prev_year1_may'] = 0;
		$data['rsl_barbecue_prev_year1_jun'] = 0;
		$data['rsl_barbecue_prev_year1_jul'] = 0;
		$data['rsl_barbecue_prev_year1_aug'] = 0;
		$data['rsl_barbecue_prev_year1_sep'] = 0;
		$data['rsl_barbecue_prev_year1_oct'] = 0;
		$data['rsl_barbecue_prev_year1_nov'] = 0;
		$data['rsl_barbecue_prev_year1_dec'] = 0;
		$data['rsl_barbecue_prev_year1_avg'] = 0;
		$data['rsl_barbecue_prev_year1_min'] = 0;
		$data['rsl_barbecue_prev_year1_max'] = 0;

		foreach($rsl_barbecue_prev_year1 as $row){
			$data['rsl_barbecue_prev_year1_jan'] = $row->jan_price;
			$data['rsl_barbecue_prev_year1_feb'] = $row->feb_price;
			$data['rsl_barbecue_prev_year1_mar'] = $row->mar_price;
			$data['rsl_barbecue_prev_year1_apr'] = $row->apr_price;
			$data['rsl_barbecue_prev_year1_may'] = $row->may_price;
			$data['rsl_barbecue_prev_year1_jun'] = $row->jun_price;
			$data['rsl_barbecue_prev_year1_jul'] = $row->jul_price;
			$data['rsl_barbecue_prev_year1_aug'] = $row->aug_price;
			$data['rsl_barbecue_prev_year1_sep'] = $row->sep_price;
			$data['rsl_barbecue_prev_year1_oct'] = $row->oct_price;
			$data['rsl_barbecue_prev_year1_nov'] = $row->nov_price;
			$data['rsl_barbecue_prev_year1_dec'] = $row->dec_price;
			$data['rsl_barbecue_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_barbecue_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_barbecue_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*Reseller Nuggets*/

		$join_rsl_nuggets = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 40000016 OR d.material_code = 40000019)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER VAP PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_nuggets = $this->admin->get_join('sales_tbl a', $join_rsl_nuggets, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_nuggets1'] = 0;
		$data['rsl_nuggets2'] = 0;
		$data['rsl_nuggets3'] = 0;
		$data['rsl_nuggets4'] = 0;
		$data['rsl_nuggets5'] = 0;
		$data['rsl_nuggets6'] = 0;
		$data['rsl_nuggets7'] = 0;
		$data['rsl_nuggets8'] = 0;
		$data['rsl_nuggets9'] = 0;
		$data['rsl_nuggets10'] = 0;
		$data['rsl_nuggets11'] = 0;
		$data['rsl_nuggets12'] = 0;
		$data['rsl_nuggets_total'] = 0;
		$data['rsl_nuggets_count'] = 0;
		$data['rsl_nuggets_avg'] = 0;
		$data['rsl_nuggets_min'] = 0;
		$data['rsl_nuggets_max'] = 0;

		foreach($get_rsl_nuggets as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_nuggets' . $month] = $asp;
			$data['rsl_nuggets_total'] += $asp;

			if($asp < $data['rsl_nuggets_min'] || $data['rsl_nuggets_count'] == 0){
				$data['rsl_nuggets_min'] = $asp;
			}

			if($asp > $data['rsl_nuggets_max'] || $data['rsl_nuggets_count'] == 0){
				$data['rsl_nuggets_max'] = $asp;
			}

			$data['rsl_nuggets_count']++;
		}

		$data['rsl_nuggets_avg'] = $data['rsl_nuggets_total'] != 0 ? $data['rsl_nuggets_total'] / $data['rsl_nuggets_count'] : 0;


		$rsl_nuggets_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-Nuggets', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_nuggets_prev_year2_jan'] = 0;
		$data['rsl_nuggets_prev_year2_feb'] = 0;
		$data['rsl_nuggets_prev_year2_mar'] = 0;
		$data['rsl_nuggets_prev_year2_apr'] = 0;
		$data['rsl_nuggets_prev_year2_may'] = 0;
		$data['rsl_nuggets_prev_year2_jun'] = 0;
		$data['rsl_nuggets_prev_year2_jul'] = 0;
		$data['rsl_nuggets_prev_year2_aug'] = 0;
		$data['rsl_nuggets_prev_year2_sep'] = 0;
		$data['rsl_nuggets_prev_year2_oct'] = 0;
		$data['rsl_nuggets_prev_year2_nov'] = 0;
		$data['rsl_nuggets_prev_year2_dec'] = 0;
		$data['rsl_nuggets_prev_year2_avg'] = 0;
		$data['rsl_nuggets_prev_year2_min'] = 0;
		$data['rsl_nuggets_prev_year2_max'] = 0;

		foreach($rsl_nuggets_prev_year2 as $row){
			$data['rsl_nuggets_prev_year2_jan'] = $row->jan_price;
			$data['rsl_nuggets_prev_year2_feb'] = $row->feb_price;
			$data['rsl_nuggets_prev_year2_mar'] = $row->mar_price;
			$data['rsl_nuggets_prev_year2_apr'] = $row->apr_price;
			$data['rsl_nuggets_prev_year2_may'] = $row->may_price;
			$data['rsl_nuggets_prev_year2_jun'] = $row->jun_price;
			$data['rsl_nuggets_prev_year2_jul'] = $row->jul_price;
			$data['rsl_nuggets_prev_year2_aug'] = $row->aug_price;
			$data['rsl_nuggets_prev_year2_sep'] = $row->sep_price;
			$data['rsl_nuggets_prev_year2_oct'] = $row->oct_price;
			$data['rsl_nuggets_prev_year2_nov'] = $row->nov_price;
			$data['rsl_nuggets_prev_year2_dec'] = $row->dec_price;
			$data['rsl_nuggets_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_nuggets_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_nuggets_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$rsl_nuggets_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-NuggetsQ', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_nuggets_prev_year1_jan'] = 0;
		$data['rsl_nuggets_prev_year1_feb'] = 0;
		$data['rsl_nuggets_prev_year1_mar'] = 0;
		$data['rsl_nuggets_prev_year1_apr'] = 0;
		$data['rsl_nuggets_prev_year1_may'] = 0;
		$data['rsl_nuggets_prev_year1_jun'] = 0;
		$data['rsl_nuggets_prev_year1_jul'] = 0;
		$data['rsl_nuggets_prev_year1_aug'] = 0;
		$data['rsl_nuggets_prev_year1_sep'] = 0;
		$data['rsl_nuggets_prev_year1_oct'] = 0;
		$data['rsl_nuggets_prev_year1_nov'] = 0;
		$data['rsl_nuggets_prev_year1_dec'] = 0;
		$data['rsl_nuggets_prev_year1_avg'] = 0;
		$data['rsl_nuggets_prev_year1_min'] = 0;
		$data['rsl_nuggets_prev_year1_max'] = 0;

		foreach($rsl_nuggets_prev_year1 as $row){
			$data['rsl_nuggets_prev_year1_jan'] = $row->jan_price;
			$data['rsl_nuggets_prev_year1_feb'] = $row->feb_price;
			$data['rsl_nuggets_prev_year1_mar'] = $row->mar_price;
			$data['rsl_nuggets_prev_year1_apr'] = $row->apr_price;
			$data['rsl_nuggets_prev_year1_may'] = $row->may_price;
			$data['rsl_nuggets_prev_year1_jun'] = $row->jun_price;
			$data['rsl_nuggets_prev_year1_jul'] = $row->jul_price;
			$data['rsl_nuggets_prev_year1_aug'] = $row->aug_price;
			$data['rsl_nuggets_prev_year1_sep'] = $row->sep_price;
			$data['rsl_nuggets_prev_year1_oct'] = $row->oct_price;
			$data['rsl_nuggets_prev_year1_nov'] = $row->nov_price;
			$data['rsl_nuggets_prev_year1_dec'] = $row->dec_price;
			$data['rsl_nuggets_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_nuggets_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_nuggets_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*UR 11 PC PICA PICA CUTS*/

		$join_rsl_pica = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 10400170',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_pica = $this->admin->get_join('sales_tbl a', $join_rsl_pica, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_pica1'] = 0;
		$data['rsl_pica2'] = 0;
		$data['rsl_pica3'] = 0;
		$data['rsl_pica4'] = 0;
		$data['rsl_pica5'] = 0;
		$data['rsl_pica6'] = 0;
		$data['rsl_pica7'] = 0;
		$data['rsl_pica8'] = 0;
		$data['rsl_pica9'] = 0;
		$data['rsl_pica10'] = 0;
		$data['rsl_pica11'] = 0;
		$data['rsl_pica12'] = 0;
		$data['rsl_pica_total'] = 0;
		$data['rsl_pica_count'] = 0;
		$data['rsl_pica_avg'] = 0;
		$data['rsl_pica_min'] = 0;
		$data['rsl_pica_max'] = 0;

		foreach($get_rsl_pica as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_pica' . $month] = $asp;
			$data['rsl_pica_total'] += $asp;

			if($asp < $data['rsl_pica_min'] || $data['rsl_pica_count'] == 0){
				$data['rsl_pica_min'] = $asp;
			}

			if($asp > $data['rsl_pica_max'] || $data['rsl_pica_count'] == 0){
				$data['rsl_pica_max'] = $asp;
			}

			$data['rsl_pica_count']++;
		}

		$data['rsl_pica_avg'] = $data['rsl_pica_total'] != 0 ? $data['rsl_pica_total'] / $data['rsl_pica_count'] : 0;


		$rsl_pica_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_pica_prev_year2_jan'] = 0;
		$data['rsl_pica_prev_year2_feb'] = 0;
		$data['rsl_pica_prev_year2_mar'] = 0;
		$data['rsl_pica_prev_year2_apr'] = 0;
		$data['rsl_pica_prev_year2_may'] = 0;
		$data['rsl_pica_prev_year2_jun'] = 0;
		$data['rsl_pica_prev_year2_jul'] = 0;
		$data['rsl_pica_prev_year2_aug'] = 0;
		$data['rsl_pica_prev_year2_sep'] = 0;
		$data['rsl_pica_prev_year2_oct'] = 0;
		$data['rsl_pica_prev_year2_nov'] = 0;
		$data['rsl_pica_prev_year2_dec'] = 0;
		$data['rsl_pica_prev_year2_avg'] = 0;
		$data['rsl_pica_prev_year2_min'] = 0;
		$data['rsl_pica_prev_year2_max'] = 0;

		foreach($rsl_pica_prev_year2 as $row){
			$data['rsl_pica_prev_year2_jan'] = $row->jan_price;
			$data['rsl_pica_prev_year2_feb'] = $row->feb_price;
			$data['rsl_pica_prev_year2_mar'] = $row->mar_price;
			$data['rsl_pica_prev_year2_apr'] = $row->apr_price;
			$data['rsl_pica_prev_year2_may'] = $row->may_price;
			$data['rsl_pica_prev_year2_jun'] = $row->jun_price;
			$data['rsl_pica_prev_year2_jul'] = $row->jul_price;
			$data['rsl_pica_prev_year2_aug'] = $row->aug_price;
			$data['rsl_pica_prev_year2_sep'] = $row->sep_price;
			$data['rsl_pica_prev_year2_oct'] = $row->oct_price;
			$data['rsl_pica_prev_year2_nov'] = $row->nov_price;
			$data['rsl_pica_prev_year2_dec'] = $row->dec_price;
			$data['rsl_pica_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_pica_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_pica_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$rsl_pica_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_pica_prev_year1_jan'] = 0;
		$data['rsl_pica_prev_year1_feb'] = 0;
		$data['rsl_pica_prev_year1_mar'] = 0;
		$data['rsl_pica_prev_year1_apr'] = 0;
		$data['rsl_pica_prev_year1_may'] = 0;
		$data['rsl_pica_prev_year1_jun'] = 0;
		$data['rsl_pica_prev_year1_jul'] = 0;
		$data['rsl_pica_prev_year1_aug'] = 0;
		$data['rsl_pica_prev_year1_sep'] = 0;
		$data['rsl_pica_prev_year1_oct'] = 0;
		$data['rsl_pica_prev_year1_nov'] = 0;
		$data['rsl_pica_prev_year1_dec'] = 0;
		$data['rsl_pica_prev_year1_avg'] = 0;
		$data['rsl_pica_prev_year1_min'] = 0;
		$data['rsl_pica_prev_year1_max'] = 0;

		foreach($rsl_pica_prev_year1 as $row){
			$data['rsl_pica_prev_year1_jan'] = $row->jan_price;
			$data['rsl_pica_prev_year1_feb'] = $row->feb_price;
			$data['rsl_pica_prev_year1_mar'] = $row->mar_price;
			$data['rsl_pica_prev_year1_apr'] = $row->apr_price;
			$data['rsl_pica_prev_year1_may'] = $row->may_price;
			$data['rsl_pica_prev_year1_jun'] = $row->jun_price;
			$data['rsl_pica_prev_year1_jul'] = $row->jul_price;
			$data['rsl_pica_prev_year1_aug'] = $row->aug_price;
			$data['rsl_pica_prev_year1_sep'] = $row->sep_price;
			$data['rsl_pica_prev_year1_oct'] = $row->oct_price;
			$data['rsl_pica_prev_year1_nov'] = $row->nov_price;
			$data['rsl_pica_prev_year1_dec'] = $row->dec_price;
			$data['rsl_pica_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_pica_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_pica_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*RSL 1 PC BOSSING CUTS */
		
		$join_rsl_bossing = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 10400184',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_bossing = $this->admin->get_join('sales_tbl a', $join_rsl_bossing, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_bossing1'] = 0;
		$data['rsl_bossing2'] = 0;
		$data['rsl_bossing3'] = 0;
		$data['rsl_bossing4'] = 0;
		$data['rsl_bossing5'] = 0;
		$data['rsl_bossing6'] = 0;
		$data['rsl_bossing7'] = 0;
		$data['rsl_bossing8'] = 0;
		$data['rsl_bossing9'] = 0;
		$data['rsl_bossing10'] = 0;
		$data['rsl_bossing11'] = 0;
		$data['rsl_bossing12'] = 0;
		$data['rsl_bossing_total'] = 0;
		$data['rsl_bossing_count'] = 0;
		$data['rsl_bossing_avg'] = 0;
		$data['rsl_bossing_min'] = 0;
		$data['rsl_bossing_max'] = 0;

		foreach($get_rsl_bossing as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_bossing' . $month] = $asp;
			$data['rsl_bossing_total'] += $asp;

			if($asp < $data['rsl_bossing_min'] || $data['rsl_bossing_count'] == 0){
				$data['rsl_bossing_min'] = $asp;
			}

			if($asp > $data['rsl_bossing_max'] || $data['rsl_bossing_count'] == 0){
				$data['rsl_bossing_max'] = $asp;
			}

			$data['rsl_bossing_count']++;
		}

		$data['rsl_bossing_avg'] = $data['rsl_bossing_total'] != 0 ? $data['rsl_bossing_total'] / $data['rsl_bossing_count'] : 0;


		$rsl_bossing_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '1 PC', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_bossing_prev_year2_jan'] = 0;
		$data['rsl_bossing_prev_year2_feb'] = 0;
		$data['rsl_bossing_prev_year2_mar'] = 0;
		$data['rsl_bossing_prev_year2_apr'] = 0;
		$data['rsl_bossing_prev_year2_may'] = 0;
		$data['rsl_bossing_prev_year2_jun'] = 0;
		$data['rsl_bossing_prev_year2_jul'] = 0;
		$data['rsl_bossing_prev_year2_aug'] = 0;
		$data['rsl_bossing_prev_year2_sep'] = 0;
		$data['rsl_bossing_prev_year2_oct'] = 0;
		$data['rsl_bossing_prev_year2_nov'] = 0;
		$data['rsl_bossing_prev_year2_dec'] = 0;
		$data['rsl_bossing_prev_year2_avg'] = 0;
		$data['rsl_bossing_prev_year2_min'] = 0;
		$data['rsl_bossing_prev_year2_max'] = 0;

		foreach($rsl_bossing_prev_year2 as $row){
			$data['rsl_bossing_prev_year2_jan'] = $row->jan_price;
			$data['rsl_bossing_prev_year2_feb'] = $row->feb_price;
			$data['rsl_bossing_prev_year2_mar'] = $row->mar_price;
			$data['rsl_bossing_prev_year2_apr'] = $row->apr_price;
			$data['rsl_bossing_prev_year2_may'] = $row->may_price;
			$data['rsl_bossing_prev_year2_jun'] = $row->jun_price;
			$data['rsl_bossing_prev_year2_jul'] = $row->jul_price;
			$data['rsl_bossing_prev_year2_aug'] = $row->aug_price;
			$data['rsl_bossing_prev_year2_sep'] = $row->sep_price;
			$data['rsl_bossing_prev_year2_oct'] = $row->oct_price;
			$data['rsl_bossing_prev_year2_nov'] = $row->nov_price;
			$data['rsl_bossing_prev_year2_dec'] = $row->dec_price;
			$data['rsl_bossing_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_bossing_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_bossing_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$rsl_bossing_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_bossing_prev_year1_jan'] = 0;
		$data['rsl_bossing_prev_year1_feb'] = 0;
		$data['rsl_bossing_prev_year1_mar'] = 0;
		$data['rsl_bossing_prev_year1_apr'] = 0;
		$data['rsl_bossing_prev_year1_may'] = 0;
		$data['rsl_bossing_prev_year1_jun'] = 0;
		$data['rsl_bossing_prev_year1_jul'] = 0;
		$data['rsl_bossing_prev_year1_aug'] = 0;
		$data['rsl_bossing_prev_year1_sep'] = 0;
		$data['rsl_bossing_prev_year1_oct'] = 0;
		$data['rsl_bossing_prev_year1_nov'] = 0;
		$data['rsl_bossing_prev_year1_dec'] = 0;
		$data['rsl_bossing_prev_year1_avg'] = 0;
		$data['rsl_bossing_prev_year1_min'] = 0;
		$data['rsl_bossing_prev_year1_max'] = 0;

		foreach($rsl_bossing_prev_year1 as $row){
			$data['rsl_bossing_prev_year1_jan'] = $row->jan_price;
			$data['rsl_bossing_prev_year1_feb'] = $row->feb_price;
			$data['rsl_bossing_prev_year1_mar'] = $row->mar_price;
			$data['rsl_bossing_prev_year1_apr'] = $row->apr_price;
			$data['rsl_bossing_prev_year1_may'] = $row->may_price;
			$data['rsl_bossing_prev_year1_jun'] = $row->jun_price;
			$data['rsl_bossing_prev_year1_jul'] = $row->jul_price;
			$data['rsl_bossing_prev_year1_aug'] = $row->aug_price;
			$data['rsl_bossing_prev_year1_sep'] = $row->sep_price;
			$data['rsl_bossing_prev_year1_oct'] = $row->oct_price;
			$data['rsl_bossing_prev_year1_nov'] = $row->nov_price;
			$data['rsl_bossing_prev_year1_dec'] = $row->dec_price;
			$data['rsl_bossing_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_bossing_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_bossing_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*Reseller Marinated Raw*/
		$join_rsl_raw = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CHICKEN (RAW)\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_raw = $this->admin->get_join('sales_tbl a', $join_rsl_raw, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_raw1'] = 0;
		$data['rsl_raw2'] = 0;
		$data['rsl_raw3'] = 0;
		$data['rsl_raw4'] = 0;
		$data['rsl_raw5'] = 0;
		$data['rsl_raw6'] = 0;
		$data['rsl_raw7'] = 0;
		$data['rsl_raw8'] = 0;
		$data['rsl_raw9'] = 0;
		$data['rsl_raw10'] = 0;
		$data['rsl_raw11'] = 0;
		$data['rsl_raw12'] = 0;
		$data['rsl_raw_total'] = 0;
		$data['rsl_raw_count'] = 0;
		$data['rsl_raw_avg'] = 0;
		$data['rsl_raw_min'] = 0;
		$data['rsl_raw_max'] = 0;

		foreach($get_rsl_raw as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_raw' . $month] = $asp;
			$data['rsl_raw_total'] += $asp;

			if($asp < $data['rsl_raw_min'] || $data['rsl_raw_count'] == 0){
				$data['rsl_raw_min'] = $asp;
			}

			if($asp > $data['rsl_raw_max'] || $data['rsl_raw_count'] == 0){
				$data['rsl_raw_max'] = $asp;
			}

			$data['rsl_raw_count']++;
		}

		$data['rsl_raw_avg'] = $data['rsl_raw_total'] != 0 ? $data['rsl_raw_total'] / $data['rsl_raw_count'] : 0;


		$rsl_raw_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINATED CHICKEN RAW', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_raw_prev_year2_jan'] = 0;
		$data['rsl_raw_prev_year2_feb'] = 0;
		$data['rsl_raw_prev_year2_mar'] = 0;
		$data['rsl_raw_prev_year2_apr'] = 0;
		$data['rsl_raw_prev_year2_may'] = 0;
		$data['rsl_raw_prev_year2_jun'] = 0;
		$data['rsl_raw_prev_year2_jul'] = 0;
		$data['rsl_raw_prev_year2_aug'] = 0;
		$data['rsl_raw_prev_year2_sep'] = 0;
		$data['rsl_raw_prev_year2_oct'] = 0;
		$data['rsl_raw_prev_year2_nov'] = 0;
		$data['rsl_raw_prev_year2_dec'] = 0;
		$data['rsl_raw_prev_year2_avg'] = 0;
		$data['rsl_raw_prev_year2_min'] = 0;
		$data['rsl_raw_prev_year2_max'] = 0;

		foreach($rsl_raw_prev_year2 as $row){
			$data['rsl_raw_prev_year2_jan'] = $row->jan_price;
			$data['rsl_raw_prev_year2_feb'] = $row->feb_price;
			$data['rsl_raw_prev_year2_mar'] = $row->mar_price;
			$data['rsl_raw_prev_year2_apr'] = $row->apr_price;
			$data['rsl_raw_prev_year2_may'] = $row->may_price;
			$data['rsl_raw_prev_year2_jun'] = $row->jun_price;
			$data['rsl_raw_prev_year2_jul'] = $row->jul_price;
			$data['rsl_raw_prev_year2_aug'] = $row->aug_price;
			$data['rsl_raw_prev_year2_sep'] = $row->sep_price;
			$data['rsl_raw_prev_year2_oct'] = $row->oct_price;
			$data['rsl_raw_prev_year2_nov'] = $row->nov_price;
			$data['rsl_raw_prev_year2_dec'] = $row->dec_price;
			$data['rsl_raw_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_raw_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_raw_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$rsl_raw_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINATED CHICKEN RAW', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_raw_prev_year1_jan'] = 0;
		$data['rsl_raw_prev_year1_feb'] = 0;
		$data['rsl_raw_prev_year1_mar'] = 0;
		$data['rsl_raw_prev_year1_apr'] = 0;
		$data['rsl_raw_prev_year1_may'] = 0;
		$data['rsl_raw_prev_year1_jun'] = 0;
		$data['rsl_raw_prev_year1_jul'] = 0;
		$data['rsl_raw_prev_year1_aug'] = 0;
		$data['rsl_raw_prev_year1_sep'] = 0;
		$data['rsl_raw_prev_year1_oct'] = 0;
		$data['rsl_raw_prev_year1_nov'] = 0;
		$data['rsl_raw_prev_year1_dec'] = 0;
		$data['rsl_raw_prev_year1_avg'] = 0;
		$data['rsl_raw_prev_year1_min'] = 0;
		$data['rsl_raw_prev_year1_max'] = 0;

		foreach($rsl_raw_prev_year1 as $row){
			$data['rsl_raw_prev_year1_jan'] = $row->jan_price;
			$data['rsl_raw_prev_year1_feb'] = $row->feb_price;
			$data['rsl_raw_prev_year1_mar'] = $row->mar_price;
			$data['rsl_raw_prev_year1_apr'] = $row->apr_price;
			$data['rsl_raw_prev_year1_may'] = $row->may_price;
			$data['rsl_raw_prev_year1_jun'] = $row->jun_price;
			$data['rsl_raw_prev_year1_jul'] = $row->jul_price;
			$data['rsl_raw_prev_year1_aug'] = $row->aug_price;
			$data['rsl_raw_prev_year1_sep'] = $row->sep_price;
			$data['rsl_raw_prev_year1_oct'] = $row->oct_price;
			$data['rsl_raw_prev_year1_nov'] = $row->nov_price;
			$data['rsl_raw_prev_year1_dec'] = $row->dec_price;
			$data['rsl_raw_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_raw_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_raw_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}



		/*Reseller Chooksies Cut ups*/
		$join_rsl_cutups = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 10000150',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'NON MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_cutups = $this->admin->get_join('sales_tbl a', $join_rsl_cutups, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_cutups1'] = 0;
		$data['rsl_cutups2'] = 0;
		$data['rsl_cutups3'] = 0;
		$data['rsl_cutups4'] = 0;
		$data['rsl_cutups5'] = 0;
		$data['rsl_cutups6'] = 0;
		$data['rsl_cutups7'] = 0;
		$data['rsl_cutups8'] = 0;
		$data['rsl_cutups9'] = 0;
		$data['rsl_cutups10'] = 0;
		$data['rsl_cutups11'] = 0;
		$data['rsl_cutups12'] = 0;
		$data['rsl_cutups_total'] = 0;
		$data['rsl_cutups_count'] = 0;
		$data['rsl_cutups_avg'] = 0;
		$data['rsl_cutups_min'] = 0;
		$data['rsl_cutups_max'] = 0;

		foreach($get_rsl_cutups as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_cutups' . $month] = $asp;
			$data['rsl_cutups_total'] += $asp;

			if($asp < $data['rsl_cutups_min'] || $data['rsl_cutups_count'] == 0){
				$data['rsl_cutups_min'] = $asp;
			}

			if($asp > $data['rsl_cutups_max'] || $data['rsl_cutups_count'] == 0){
				$data['rsl_cutups_max'] = $asp;
			}

			$data['rsl_cutups_count']++;
		}

		$data['rsl_cutups_avg'] = $data['rsl_cutups_total'] != 0 ? $data['rsl_cutups_total'] / $data['rsl_cutups_count'] : 0;

		$rsl_cutups_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES CUT UPS', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_cutups_prev_year2_jan'] = 0;
		$data['rsl_cutups_prev_year2_feb'] = 0;
		$data['rsl_cutups_prev_year2_mar'] = 0;
		$data['rsl_cutups_prev_year2_apr'] = 0;
		$data['rsl_cutups_prev_year2_may'] = 0;
		$data['rsl_cutups_prev_year2_jun'] = 0;
		$data['rsl_cutups_prev_year2_jul'] = 0;
		$data['rsl_cutups_prev_year2_aug'] = 0;
		$data['rsl_cutups_prev_year2_sep'] = 0;
		$data['rsl_cutups_prev_year2_oct'] = 0;
		$data['rsl_cutups_prev_year2_nov'] = 0;
		$data['rsl_cutups_prev_year2_dec'] = 0;
		$data['rsl_cutups_prev_year2_avg'] = 0;
		$data['rsl_cutups_prev_year2_min'] = 0;
		$data['rsl_cutups_prev_year2_max'] = 0;

		foreach($rsl_cutups_prev_year2 as $row){
			$data['rsl_cutups_prev_year2_jan'] = $row->jan_price;
			$data['rsl_cutups_prev_year2_feb'] = $row->feb_price;
			$data['rsl_cutups_prev_year2_mar'] = $row->mar_price;
			$data['rsl_cutups_prev_year2_apr'] = $row->apr_price;
			$data['rsl_cutups_prev_year2_may'] = $row->may_price;
			$data['rsl_cutups_prev_year2_jun'] = $row->jun_price;
			$data['rsl_cutups_prev_year2_jul'] = $row->jul_price;
			$data['rsl_cutups_prev_year2_aug'] = $row->aug_price;
			$data['rsl_cutups_prev_year2_sep'] = $row->sep_price;
			$data['rsl_cutups_prev_year2_oct'] = $row->oct_price;
			$data['rsl_cutups_prev_year2_nov'] = $row->nov_price;
			$data['rsl_cutups_prev_year2_dec'] = $row->dec_price;
			$data['rsl_cutups_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_cutups_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_cutups_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$rsl_cutups_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES CUT UPS', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_cutups_prev_year1_jan'] = 0;
		$data['rsl_cutups_prev_year1_feb'] = 0;
		$data['rsl_cutups_prev_year1_mar'] = 0;
		$data['rsl_cutups_prev_year1_apr'] = 0;
		$data['rsl_cutups_prev_year1_may'] = 0;
		$data['rsl_cutups_prev_year1_jun'] = 0;
		$data['rsl_cutups_prev_year1_jul'] = 0;
		$data['rsl_cutups_prev_year1_aug'] = 0;
		$data['rsl_cutups_prev_year1_sep'] = 0;
		$data['rsl_cutups_prev_year1_oct'] = 0;
		$data['rsl_cutups_prev_year1_nov'] = 0;
		$data['rsl_cutups_prev_year1_dec'] = 0;
		$data['rsl_cutups_prev_year1_avg'] = 0;
		$data['rsl_cutups_prev_year1_min'] = 0;
		$data['rsl_cutups_prev_year1_max'] = 0;

		foreach($rsl_cutups_prev_year1 as $row){
			$data['rsl_cutups_prev_year1_jan'] = $row->jan_price;
			$data['rsl_cutups_prev_year1_feb'] = $row->feb_price;
			$data['rsl_cutups_prev_year1_mar'] = $row->mar_price;
			$data['rsl_cutups_prev_year1_apr'] = $row->apr_price;
			$data['rsl_cutups_prev_year1_may'] = $row->may_price;
			$data['rsl_cutups_prev_year1_jun'] = $row->jun_price;
			$data['rsl_cutups_prev_year1_jul'] = $row->jul_price;
			$data['rsl_cutups_prev_year1_aug'] = $row->aug_price;
			$data['rsl_cutups_prev_year1_sep'] = $row->sep_price;
			$data['rsl_cutups_prev_year1_oct'] = $row->oct_price;
			$data['rsl_cutups_prev_year1_nov'] = $row->nov_price;
			$data['rsl_cutups_prev_year1_dec'] = $row->dec_price;
			$data['rsl_cutups_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_cutups_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_cutups_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*Reseller Liver / Gizzard*/
		$join_rsl_liver = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVER / GIZZARD\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_liver = $this->admin->get_join('sales_tbl a', $join_rsl_liver, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_liver1'] = 0;
		$data['rsl_liver2'] = 0;
		$data['rsl_liver3'] = 0;
		$data['rsl_liver4'] = 0;
		$data['rsl_liver5'] = 0;
		$data['rsl_liver6'] = 0;
		$data['rsl_liver7'] = 0;
		$data['rsl_liver8'] = 0;
		$data['rsl_liver9'] = 0;
		$data['rsl_liver10'] = 0;
		$data['rsl_liver11'] = 0;
		$data['rsl_liver12'] = 0;
		$data['rsl_liver_total'] = 0;
		$data['rsl_liver_count'] = 0;
		$data['rsl_liver_avg'] = 0;
		$data['rsl_liver_min'] = 0;
		$data['rsl_liver_max'] = 0;

		foreach($get_rsl_liver as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_liver' . $month] = $asp;
			$data['rsl_liver_total'] += $asp;

			if($asp < $data['rsl_liver_min'] || $data['rsl_liver_count'] == 0){
				$data['rsl_cutups_min'] = $asp;
			}

			if($asp > $data['rsl_liver_max'] || $data['rsl_liver_count'] == 0){
				$data['rsl_liver_max'] = $asp;
			}

			$data['rsl_liver_count']++;
		}

		$data['rsl_liver_avg'] = $data['rsl_liver_total'] != 0 ? $data['rsl_liver_total'] / $data['rsl_liver_count'] : 0;


		$rsl_liver_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'GIZZARD / LIVER', 'comp_price_segment' => 'RESELLER', 'comp_price_year' => $year - 2), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_liver_prev_year2_jan'] = 0;
		$data['rsl_liver_prev_year2_feb'] = 0;
		$data['rsl_liver_prev_year2_mar'] = 0;
		$data['rsl_liver_prev_year2_apr'] = 0;
		$data['rsl_liver_prev_year2_may'] = 0;
		$data['rsl_liver_prev_year2_jun'] = 0;
		$data['rsl_liver_prev_year2_jul'] = 0;
		$data['rsl_liver_prev_year2_aug'] = 0;
		$data['rsl_liver_prev_year2_sep'] = 0;
		$data['rsl_liver_prev_year2_oct'] = 0;
		$data['rsl_liver_prev_year2_nov'] = 0;
		$data['rsl_liver_prev_year2_dec'] = 0;
		$data['rsl_liver_prev_year2_avg'] = 0;
		$data['rsl_liver_prev_year2_min'] = 0;
		$data['rsl_liver_prev_year2_max'] = 0;

		foreach($rsl_liver_prev_year2 as $row){
			$data['rsl_liver_prev_year2_jan'] = $row->jan_price;
			$data['rsl_liver_prev_year2_feb'] = $row->feb_price;
			$data['rsl_liver_prev_year2_mar'] = $row->mar_price;
			$data['rsl_liver_prev_year2_apr'] = $row->apr_price;
			$data['rsl_liver_prev_year2_may'] = $row->may_price;
			$data['rsl_liver_prev_year2_jun'] = $row->jun_price;
			$data['rsl_liver_prev_year2_jul'] = $row->jul_price;
			$data['rsl_liver_prev_year2_aug'] = $row->aug_price;
			$data['rsl_liver_prev_year2_sep'] = $row->sep_price;
			$data['rsl_liver_prev_year2_oct'] = $row->oct_price;
			$data['rsl_liver_prev_year2_nov'] = $row->nov_price;
			$data['rsl_liver_prev_year2_dec'] = $row->dec_price;
			$data['rsl_liver_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_liver_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rsl_liver_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$rsl_liver_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'GIZZARD / LIVER', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_liver_prev_year1_jan'] = 0;
		$data['rsl_liver_prev_year1_feb'] = 0;
		$data['rsl_liver_prev_year1_mar'] = 0;
		$data['rsl_liver_prev_year1_apr'] = 0;
		$data['rsl_liver_prev_year1_may'] = 0;
		$data['rsl_liver_prev_year1_jun'] = 0;
		$data['rsl_liver_prev_year1_jul'] = 0;
		$data['rsl_liver_prev_year1_aug'] = 0;
		$data['rsl_liver_prev_year1_sep'] = 0;
		$data['rsl_liver_prev_year1_oct'] = 0;
		$data['rsl_liver_prev_year1_nov'] = 0;
		$data['rsl_liver_prev_year1_dec'] = 0;
		$data['rsl_liver_prev_year1_avg'] = 0;
		$data['rsl_liver_prev_year1_min'] = 0;
		$data['rsl_liver_prev_year1_max'] = 0;

		foreach($rsl_liver_prev_year1 as $row){
			$data['rsl_liver_prev_year1_jan'] = $row->jan_price;
			$data['rsl_liver_prev_year1_feb'] = $row->feb_price;
			$data['rsl_liver_prev_year1_mar'] = $row->mar_price;
			$data['rsl_liver_prev_year1_apr'] = $row->apr_price;
			$data['rsl_liver_prev_year1_may'] = $row->may_price;
			$data['rsl_liver_prev_year1_jun'] = $row->jun_price;
			$data['rsl_liver_prev_year1_jul'] = $row->jul_price;
			$data['rsl_liver_prev_year1_aug'] = $row->aug_price;
			$data['rsl_liver_prev_year1_sep'] = $row->sep_price;
			$data['rsl_liver_prev_year1_oct'] = $row->oct_price;
			$data['rsl_liver_prev_year1_nov'] = $row->nov_price;
			$data['rsl_liver_prev_year1_dec'] = $row->dec_price;
			$data['rsl_liver_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['rsl_liver_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['rls_liver_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		return $data;

	}

	public function _opex_nationwide_bc($year){
		$info = $this->_require_login();

		$join_opex = array(
			'gl_subgroup_tbl b' => 'a.gl_sub_id = b.gl_sub_id',
			'gl_group_tbl c' => 'b.gl_group_id = c.gl_group_id',
			'cost_center_tbl d' => 'a.cost_center_id = d.cost_center_id'
		); 
		$where_opex = 'YEAR(a.dashboard_opex_date) = ' . $year . ' AND a.dashboard_opex_status = 1';
		$group_opex = 'b.gl_sub_id';
		$select_opex = '*, SUM(a.dashboard_opex_amount) as total_amount,
			(SELECT SUM(x.cost) FROM comparative_opex_gl_tbl x WHERE b.gl_sub_id = x.gl_sub_id AND x.comp_opex_gl_status = 1 AND YEAR(x.trans_year) = ' . ($year - 1) . ') as total_amount1,

			(SELECT SUM(x.cost) FROM comparative_opex_gl_tbl x WHERE b.gl_sub_id = x.gl_sub_id AND x.comp_opex_gl_status = 1 AND YEAR(x.trans_year) = ' . ($year - 2) . ') as total_amount2

		';

		$get_opex = $this->admin->get_join('dashboard_opex_tbl a', $join_opex, FALSE, FALSE, $group_opex, $select_opex, $where_opex);

		return $get_opex;
	}

	public function _opex_nationwide_unit($year){
		$info = $this->_require_login();

		$join_opex = array(
			'gl_subgroup_tbl b' => 'a.gl_sub_id = b.gl_sub_id',
			'gl_group_tbl c' => 'b.gl_group_id = c.gl_group_id',
			'cost_center_tbl d' => 'a.cost_center_id = d.cost_center_id'
		); 
		$where_opex = 'YEAR(a.dashboard_opex_unit_date) = ' . $year . ' AND a.dashboard_opex_unit_status = 1';
		$group_opex = 'b.gl_sub_id';
		$select_opex = '*, SUM(a.dashboard_opex_unit_amount) as total_amount,
			(SELECT SUM(x.cost) FROM comparative_opex_dept_tbl x WHERE b.gl_sub_id = x.gl_sub_id AND x.comp_opex_dept_status = 1 AND YEAR(x.trans_year) = ' . ($year - 1) . ') as total_amount1,

			(SELECT SUM(x.cost) FROM comparative_opex_dept_tbl x WHERE b.gl_sub_id = x.gl_sub_id AND x.comp_opex_dept_status = 1 AND YEAR(x.trans_year) = ' . ($year - 2) . ') as total_amount2

		';

		$get_opex = $this->admin->get_join('dashboard_opex_unit_tbl a', $join_opex, FALSE, FALSE, $group_opex, $select_opex, $where_opex);

		return $get_opex;
	}

	public function _opex_per_cost_center($year){
		$info = $this->_require_login();

		$opex_bc_gl = $this->admin->get_query('
			
			SELECT opex.cost_center_desc, opex.date, opex.cost_center_group_id, opex.gl_sub_id, opex.gl_group_name, opex.gl_code, opex.gl_sub_name, opex.cost_center_group_name, opex.cost_center_type_id, SUM(total) as total, SUM(total1) as total1, SUM(total2) as total2

			FROM
				(SELECT `f`.`cost_center_desc`, DATE(a.opex_budget_date) as date, `g`.`cost_center_group_id`, `b`.`gl_sub_id`, `e`.`gl_group_name`, `d`.`gl_code`, `d`.`gl_sub_name`, `cost_center_group_name`, `cost_center_type_id`,  SUM(a.opex_amount) total, 0 as total1, 0 as total2 

				FROM `gl_transaction_details_tbl` `a` JOIN `gl_transaction_item_tbl` `b` ON `a`.`gl_trans_item_id` = `b`.`gl_trans_item_id` AND `b`.`gl_trans_item_status` = 1 AND `a`.`gl_trans_det_status`=1 JOIN `gl_transaction_tbl` `c` ON `b`.`gl_trans_id`=`c`.`gl_trans_id` AND `c`.`gl_trans_status` = 1 AND YEAR(a.opex_budget_date)= ' . $year . ' JOIN `gl_subgroup_tbl` `d` ON `b`.`gl_sub_id`=`d`.`gl_sub_id` JOIN `gl_group_tbl` `e` ON `d`.`gl_group_id` = `e`.`gl_group_id` JOIN `cost_center_tbl` `f` ON `b`.`cost_center_id` = `f`.`cost_center_id` JOIN `cost_center_group_tbl` `g` ON `f`.`cost_center_group_id` = `g`.`cost_center_group_id` GROUP BY `f`.`cost_center_id` 

				UNION

				SELECT comp_tbl.cost_center_desc, comp_tbl.date, comp_tbl.cost_center_group_id, comp_tbl.gl_sub_id, comp_tbl.gl_group_name, comp_tbl.gl_code, comp_tbl.gl_sub_name, comp_tbl.cost_center_group_name, comp_tbl.cost_center_type_id, SUM(total) as total, SUM(total1) as total1, SUM(total2) as total2
				FROM 
					(
					SELECT opex_comp1.cost_center_desc, opex_comp1.date, opex_comp1.cost_center_group_id, opex_comp1.gl_sub_id, opex_comp1.gl_group_name, opex_comp1.gl_code, opex_comp1.gl_sub_name, opex_comp1.cost_center_group_name, opex_comp1.cost_center_type_id, SUM(opex_comp1.total) as total, SUM(opex_comp1.total1) as total1, SUM(opex_comp1.total2) as total2

					FROM

						(SELECT n.cost_center_desc, DATE(m.trans_year) as date, n.cost_center_group_id, o.gl_sub_id, p.gl_group_name, o.gl_code, o.gl_sub_name, q.cost_center_group_name, n.cost_center_type_id, 0 total, (m.cost) as total1, 0 as total2 FROM comparative_opex_gl_tbl m, cost_center_tbl n, gl_subgroup_tbl o, gl_group_tbl p, cost_center_group_tbl q WHERE m.cost_center_id = n.cost_center_id AND m.gl_sub_id = o.gl_sub_id AND o.gl_group_id = p.gl_group_id AND n.cost_center_group_id = q.cost_center_group_id AND m.comp_opex_gl_status = 1 AND YEAR(m.trans_year) = ' . ($year - 1) . '

						UNION

						SELECT n.cost_center_desc, DATE(m.trans_year) as date, n.cost_center_group_id, o.gl_sub_id, p.gl_group_name, o.gl_code, o.gl_sub_name, q.cost_center_group_name, n.cost_center_type_id, 0 total, (m.cost) as total1, 0 as total2 FROM comparative_opex_dept_tbl m, cost_center_tbl n, gl_subgroup_tbl o, gl_group_tbl p, cost_center_group_tbl q WHERE m.cost_center_id = n.cost_center_id AND m.gl_sub_id = o.gl_sub_id AND o.gl_group_id = p.gl_group_id AND n.cost_center_group_id = q.cost_center_group_id AND m.comp_opex_dept_status = 1 AND YEAR(m.trans_year) = ' . ($year - 1) . '
						)
					as opex_comp1 GROUP BY opex_comp1.cost_center_desc, opex_comp1.gl_sub_id

					UNION

					SELECT opex_comp2.cost_center_desc, opex_comp2.date, opex_comp2.cost_center_group_id, opex_comp2.gl_sub_id, opex_comp2.gl_group_name, opex_comp2.gl_code, opex_comp2.gl_sub_name, opex_comp2.cost_center_group_name, opex_comp2.cost_center_type_id, SUM(opex_comp2.total) as total, SUM(opex_comp2.total1) as total1, SUM(opex_comp2.total2) as total2

					FROM

						(SELECT n.cost_center_desc, DATE(m.trans_year) as date, n.cost_center_group_id, o.gl_sub_id, p.gl_group_name, o.gl_code, o.gl_sub_name, q.cost_center_group_name, n.cost_center_type_id, 0 total, 0 as total1, (m.cost) as total2 FROM comparative_opex_gl_tbl m, cost_center_tbl n, gl_subgroup_tbl o, gl_group_tbl p, cost_center_group_tbl q WHERE m.cost_center_id = n.cost_center_id AND m.gl_sub_id = o.gl_sub_id AND o.gl_group_id = p.gl_group_id AND n.cost_center_group_id = q.cost_center_group_id AND m.comp_opex_gl_status = 1 AND YEAR(m.trans_year) = ' . ($year - 2) . '

						UNION

						SELECT n.cost_center_desc, DATE(m.trans_year) as date, n.cost_center_group_id, o.gl_sub_id, p.gl_group_name, o.gl_code, o.gl_sub_name, q.cost_center_group_name, n.cost_center_type_id, 0 total, 0 as total1, (m.cost) as total2 FROM comparative_opex_dept_tbl m, cost_center_tbl n, gl_subgroup_tbl o, gl_group_tbl p, cost_center_group_tbl q WHERE m.cost_center_id = n.cost_center_id AND m.gl_sub_id = o.gl_sub_id AND o.gl_group_id = p.gl_group_id AND n.cost_center_group_id = q.cost_center_group_id AND m.comp_opex_dept_status = 1 AND YEAR(m.trans_year) = ' . ($year - 2) . '
						)
					as opex_comp2 GROUP BY opex_comp2.cost_center_desc, opex_comp2.gl_sub_id

					) as comp_tbl GROUP BY comp_tbl.cost_center_desc, comp_tbl.gl_sub_id
				) as opex

				GROUP BY opex.cost_center_desc, opex.gl_sub_id ORDER BY opex.cost_center_desc, opex.gl_sub_id, opex.date ASC

		');

		$opex_total = 0;
		$opex_arr = array();
		foreach($opex_bc_gl as $row_gl){
			
			$cost_center_desc = $row_gl->cost_center_desc;
			$date = $row_gl->date;
			$cost_center_group_id = $row_gl->cost_center_group_id;
			$gl_sub_id = $row_gl->gl_sub_id;
			$gl_group_name = $row_gl->gl_group_name;
			$gl_code = $row_gl->gl_code;
			$gl_sub_name = $row_gl->gl_sub_name;
			$total_amount = $row_gl->total;
			$total_amount1 = $row_gl->total1;
			$total_amount2 = $row_gl->total2;
			$cost_center_group_name = $row_gl->cost_center_group_name;
			$cost_center_type_id = $row_gl->cost_center_type_id;

			if(!array_key_exists($cost_center_desc, $opex_arr)){
				$opex_arr[$cost_center_desc]['cost_center_desc'] = $cost_center_desc;
				$opex_arr[$cost_center_desc]['date'] = $date;
				$opex_arr[$cost_center_desc]['cost_center_group_id'] = $cost_center_group_id;
				$opex_arr[$cost_center_desc]['gl_sub_id'] = $gl_sub_id;
				$opex_arr[$cost_center_desc]['gl_group_name'] = $gl_group_name;
				$opex_arr[$cost_center_desc]['gl_code'] = $gl_code;
				$opex_arr[$cost_center_desc]['gl_sub_name'] = $gl_sub_name;
				$opex_arr[$cost_center_desc]['total_amount'] = $total_amount;
				$opex_arr[$cost_center_desc]['total_amount1'] = $total_amount1;
				$opex_arr[$cost_center_desc]['total_amount2'] = $total_amount2;
				$opex_arr[$cost_center_desc]['cost_center_group_name'] = $cost_center_group_name;
				$opex_arr[$cost_center_desc]['cost_center_type_id'] = $cost_center_type_id;
			}else{
				$opex_arr[$cost_center_desc]['total_amount'] += $total_amount;
				$opex_arr[$cost_center_desc]['total_amount1'] += $total_amount1;
				$opex_arr[$cost_center_desc]['total_amount2'] += $total_amount2;
			}

			$opex_total += $total_amount;
		}

		$bc_depre_sub = $this->_get_depreciation_per_cost_center($year);
		$depre = "DEPRECIATION EXPENSES";

		foreach($bc_depre_sub as $row_sub){
			$cost_center_desc = $row_sub->cost_center_desc;
			$depre_date = $row_sub->budget_date;
			$depre_cost_center_id = $row_sub->cost_center_id;
			$gl_code = $row_sub->ag_gl_code;
			$cost_center_group_name = $row_sub->cost_center_group_name;
			$cost_center_type_id = $row_sub->cost_center_type_id;
			
			$total_amount = $row_sub->total;
			$total_amount1 = 0;
			$total_amount2 = 0;
			if(!array_key_exists($cost_center_desc, $opex_arr)){
				$opex_arr[$cost_center_desc]['cost_center_desc'] = $cost_center_desc;
				$opex_arr[$cost_center_desc]['date'] = $depre_date;
				$opex_arr[$cost_center_desc]['gl_group_name'] = $depre;
				$opex_arr[$cost_center_desc]['gl_code'] = $gl_code;
				$opex_arr[$cost_center_desc]['total_amount'] = $total_amount;
				$opex_arr[$cost_center_desc]['total_amount1'] = $total_amount1;
				$opex_arr[$cost_center_desc]['total_amount2'] = $total_amount2;
				$opex_arr[$cost_center_desc]['cost_center_group_name'] = $cost_center_group_name;
				$opex_arr[$cost_center_desc]['cost_center_type_id'] = $cost_center_type_id;
			}else{
				$opex_arr[$cost_center_desc]['total_amount'] += $total_amount;
				$opex_arr[$cost_center_desc]['total_amount1'] += $total_amount1;
				$opex_arr[$cost_center_desc]['total_amount2'] += $total_amount2;
			}

			$opex_total += $total_amount;
		}



		if($this->db->trans_status() === FALSE){
			$this->db->trans_rollback();
			echo 'Please try again!';
		}else{
			$this->db->trans_commit();
		}

		return $opex_arr;
	}

	public function _get_depreciation_dashboard($year){
		$info = $this->_require_login();

		$get_depreciation1 = $this->admin->get_query('

			SELECT "" as ag_name, "" as asset_group, y.gl_code as ag_gl_code, SUM(x.depreciation_bc_amount) as total, x.depreciation_bc_date as budget_date, y.gl_sub_id, y.gl_sub_name, m.cost_center_group_id, z.cost_center_id, z.cost_center_type_id FROM depreciation_bc_tbl x, gl_subgroup_tbl y, cost_center_tbl z, cost_center_group_tbl m WHERE x.gl_sub_id = y.gl_sub_id AND x.cost_center_id = z.cost_center_id AND z.cost_center_group_id = m.cost_center_group_id  AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.depreciation_bc_status = 1 GROUP BY z.cost_center_id, y.gl_sub_id, x.depreciation_bc_date
		');

		$get_depreciation2 = $this->admin->get_query('
		 	SELECT e.ag_name, d.asg_name as asset_group, e.ag_gl_code, (b.capex_price / b.capex_lifespan) as total, c.capex_qty, c.capex_budget_date as budget_date, MONTH(c.capex_budget_date) as budget_month, h.gl_sub_id, h.gl_sub_name,  i.cost_center_group_id, f.cost_center_id, f.cost_center_type_id, 
		 		
		 		IF(MONTH(c.capex_budget_date) <= 1, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as jan_opex,
		 		IF(MONTH(c.capex_budget_date) <= 2, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as feb_opex,
		 		IF(MONTH(c.capex_budget_date) <= 3, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as mar_opex,
		 		IF(MONTH(c.capex_budget_date) <= 4, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as apr_opex,
		 		IF(MONTH(c.capex_budget_date) <= 5, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as may_opex,
		 		IF(MONTH(c.capex_budget_date) <= 6, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as jun_opex,
		 		IF(MONTH(c.capex_budget_date) <= 7, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as jul_opex,
		 		IF(MONTH(c.capex_budget_date) <= 8, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as aug_opex,
		 		IF(MONTH(c.capex_budget_date) <= 9, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as sep_opex,
		 		IF(MONTH(c.capex_budget_date) <= 10, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as oct_opex,
		 		IF(MONTH(c.capex_budget_date) <= 11, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as nov_opex,
		 		IF(MONTH(c.capex_budget_date) <= 12, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as dec_opex

			FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g, gl_subgroup_tbl h, cost_center_group_tbl i WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND e.ag_gl_code = h.gl_code AND f.cost_center_group_id = i.cost_center_group_id AND g.trans_type_id = 1 AND a.ag_trans_status = 1 AND b.ag_trans_item_status = 1 AND c.ag_trans_det_status=1 AND YEAR(c.capex_budget_date)=' . $year . '
		');

		 $data['depreciation1'] = $get_depreciation1;
		 $data['depreciation2'] = $get_depreciation2;

		return $data;
	}

	public function _get_depreciation_per_cost_center($year){
		$info = $this->_require_login();

		$get_depreciation = $this->admin->get_query('
			SELECT
				cost_center_desc, asset_group, ag_gl_code, SUM(total) as total, budget_date, gl_sub_id, gl_sub_name, cost_center_group_id, cost_center_id, cost_center_group_name, cost_center_type_id
			FROM
			(
				SELECT f.cost_center_desc, d.asg_name as asset_group, e.ag_gl_code, SUM((b.capex_price / b.capex_lifespan) * (13-MONTH(c.capex_budget_date)) * c.capex_qty) as total, c.capex_budget_date as budget_date, h.gl_sub_id, h.gl_sub_name,  i.cost_center_group_id, f.cost_center_id, f.cost_center_type_id,

				(SELECT x.cost_center_group_name FROM cost_center_group_tbl x WHERE x.cost_center_group_id = i.cost_center_group_id) AS cost_center_group_name

				FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g, gl_subgroup_tbl h, cost_center_group_tbl i WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND e.ag_gl_code = h.gl_code AND f.cost_center_group_id = i.cost_center_group_id AND g.trans_type_id = 1 AND a.ag_trans_status = 1 AND b.ag_trans_item_status = 1 AND c.ag_trans_det_status=1 AND YEAR(c.capex_budget_date)=' . $year . ' GROUP BY f.cost_center_id, h.gl_sub_id

				UNION
					SELECT *
					FROM	
					(	
						SELECT z.cost_center_desc, "", y.gl_code, SUM(x.depreciation_bc_amount) as total, x.depreciation_bc_date, y.gl_sub_id, y.gl_sub_name, m.cost_center_group_id, z.cost_center_id, z.cost_center_type_id,

							(SELECT x.cost_center_group_name FROM cost_center_group_tbl x WHERE x.cost_center_group_id = z.cost_center_group_id) AS cost_center_group_name 

						FROM depreciation_bc_tbl x, gl_subgroup_tbl y, cost_center_tbl z, cost_center_group_tbl m WHERE x.gl_sub_id = y.gl_sub_id AND x.cost_center_id = z.cost_center_id AND z.cost_center_group_id = m.cost_center_group_id  AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.depreciation_bc_status = 1 GROUP BY z.cost_center_id, y.gl_sub_id

						UNION

						SELECT z.cost_center_desc, "", y.gl_code, SUM(x.depreciation_unit_amount) as total, x.depreciation_unit_date, y.gl_sub_id, y.gl_sub_name, m.cost_center_group_id, z.cost_center_id, z.cost_center_type_id,

							(SELECT x.cost_center_group_name FROM cost_center_group_tbl x WHERE x.cost_center_group_id = z.cost_center_group_id) AS cost_center_group_name 

						FROM depreciation_unit_tbl x, gl_subgroup_tbl y, cost_center_tbl z, cost_center_group_tbl m WHERE x.gl_sub_id = y.gl_sub_id AND x.cost_center_id = z.cost_center_id AND z.cost_center_group_id = m.cost_center_group_id  AND YEAR(x.depreciation_unit_date) = ' . $year . ' AND x.depreciation_unit_status = 1 GROUP BY z.cost_center_id, y.gl_sub_id
					) as depre_bc_unit_tbl
			) depre_tbl

			GROUP BY cost_center_id, gl_sub_id
			
		 ');


		return $get_depreciation;
	}

	public function index(){
		$info = $this->_require_login();
		$data['title'] = 'Material';
 		$join_material = array(
			
			'unit_tbl b' => 'a.unit_id = b.unit_id',
			'material_group_tbl c' => 'a.material_group_id = c.material_group_id',
			'material_unit_tbl d' => 'a.material_id=d.material_id',
			'unit_tbl e' => 'd.valuation_unit = e.unit_id',
			'vat_type_tbl f' => 'a.vat_type_id = f.vat_type_id'
		);

		$data['material'] = $this->admin->get_join('material_tbl a', $join_material, FALSE,'a.material_code ASC', FALSE, '*, e.unit_name as valuation_unit, (SELECT GROUP_CONCAT(y.allocation_type_name) FROM material_allocation_tbl x, allocation_type_tbl y WHERE a.material_id = x.material_id AND x.allocation_type_id = y.allocation_type_id AND x.material_allocation_status = 1) as allocation');

		/*$join_vmaterial = array(
			'material_bc_formula_tbl g' => 'a.material_id=g.material_id',
			'unit_tbl b' => 'g.unit_id = b.unit_id',
			'material_type_tbl c' => 'a.material_type_id = c.material_type_id AND (c.material_type_name="LIVE SALES" || c.material_type_name="DRESSED - SUPERMARKET" || c.material_type_name="DRESSED - OTHERS")',
			'unit_tbl f' => 'g.sales_unit_id = f.unit_id',
			'vat_type_tbl h' => 'a.vat_type_id = h.vat_type_id'
		);

		$data['vmaterial'] = $this->admin->get_join('material_tbl a', $join_vmaterial, FALSE,'a.material_code ASC', FALSE, '*, f.unit_name as sales_unit, b.unit_name as base_unit, IFNULL((SELECT e.unit_name FROM material_unit_tbl as d, unit_tbl as e WHERE d.unit_id=e.unit_id AND g.material_bc_id=d.material_bc_id AND  d.material_unit_status=1), "N/A") as weight_unit, IFNULL((SELECT d.unit_conversation FROM material_unit_tbl as d, unit_tbl as e WHERE d.unit_id=e.unit_id AND g.material_bc_id=d.material_bc_id AND  d.material_unit_status=1), "N/A") as unit_conversation');*/

		$data['unit'] = $this->admin->get_data('unit_tbl', array('unit_status' => 1));
		$data['group'] = $this->admin->get_query('SELECT * FROM material_group_tbl WHERE material_group_name NOT IN("MATERIAL VARIABLE")');
		$data['vtype'] = $this->admin->get_query('SELECT * FROM material_group_tbl WHERE material_group_name IN("LIVE SALES", "SUPERMARKET", "TRADE DISTRIBUTOR")');
		$data['unit'] = $this->admin->get_data('unit_tbl', array('unit_status' => 1));
		$data['vat'] = $this->admin->get_data('vat_type_tbl', array('vat_type_status' => 1));
		$data['allocation'] = $this->admin->get_data('allocation_type_tbl', array('allocation_type_status' => 1));

		$data['content'] = $this->load->view('admin/admin_material_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	
	/*Material*/

	public function materials(){
		$this->index();
	}

	public function add_material(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$material_code = clean_data($this->input->post('material_code'));
			$material_desc = clean_data($this->input->post('description'));
			$group = decode($this->input->post('group'));
			$vat = decode($this->input->post('vat'));
			$base_unit = decode($this->input->post('base_unit'));
			$valuation_unit = decode($this->input->post('valuation_unit'));
			$valuation_basis = clean_data($this->input->post('valuation_basis'));
			$equivalent_unit = clean_data($this->input->post('equivalent_unit'));
			$allocation = clean_data($this->input->post('allocation'));
			$material_weight = clean_data($this->input->post('material_weight'));

			if(!empty($material_code) && !empty($material_desc) && !empty($group) && !empty($vat) && !empty($base_unit) && !empty($valuation_unit) && !empty($equivalent_unit)){
				$check_code = $this->admin->check_data('material_tbl', array('material_code' =>  strtoupper($material_code)));
				if($check_code == FALSE){
					$check_code = $this->admin->check_data('material_tbl', array('material_code' =>  $material_code));
					$this->db->trans_start();
					if($check_code == FALSE){
						$set = array(
							'unit_id' => $base_unit,
							'material_group_id' => $group,
							'vat_type_id' => $vat,
							'material_code' => $material_code,
							'material_weight' => $material_weight,
							'material_desc' => strtoupper($material_desc),
							'material_status' => 1
						);

						$result = $this->admin->insert_data('material_tbl', $set, TRUE);

						if($result['result'] == TRUE){
							$material_id = $result['id'];

							$set_material_unit = array(
								'material_id' => $material_id,
								'valuation_unit' => $valuation_unit,
								'valuation_basis' => $valuation_basis,
								'sales_unit_equivalent' => $equivalent_unit,
								'material_unit_status' => 1
							);

							$result_material_bc = $this->admin->insert_data('material_unit_tbl', $set_material_unit, TRUE);

							foreach($allocation as $row){
								$allocation_type_id = decode($row);
								
								$set_allocation = array(
									'material_id' => $material_id,
									'allocation_type_id' => $allocation_type_id,
									'user_id' => $user_id,
									'material_allocation_added' => date_now(),
									'material_allocation_status' => 1
								);

								$insert_allocation = $this->admin->insert_data('material_allocation_tbl', $set_allocation);
							}
							
							if($this->db->trans_status() === FALSE){
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error please try again!</div>';
								$this->session->set_flashdata('message', $msg);
								redirect('admin/materials');
							}else{
								$this->db->trans_commit();
								$msg = '<div class="alert alert-success">Materials added.</div>';
								$this->session->set_flashdata('message', $msg);
								redirect('admin/materials');
							}
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error material code already exist!</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error material description already exist!</div>';
				}
				
				$this->session->set_flashdata('message', $msg);
				redirect('admin/materials');
			}else{
				//redirect('admin');
			}
		}else{
			redirect('admin');
		}
	}

	public function add_vmaterial(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$material_code = clean_data($this->input->post('material_code'));
			$material_desc = clean_data($this->input->post('description'));
			$type = decode($this->input->post('type'));
			$base_unit = decode($this->input->post('base_unit'));
			$weight_unit = decode($this->input->post('weight_unit'));
			/*$weight_basis = clean_data($this->input->post('weight_basis'));*/
			$sales_basis = decode($this->input->post('sales_basis'));
			$equivalent_unit = clean_data($this->input->post('equivalent_unit'));
			$vat = decode($this->input->post('vat'));

			if(!empty($material_code) && !empty($material_desc) && !empty($type) && !empty($base_unit) && !empty($sales_basis) && !empty($equivalent_unit) && !empty($vat)){
				$check_name = $this->admin->check_data('material_tbl', array('material_desc' =>  strtoupper($material_desc), 'material_type_id' => $type));

				if($base_unit != $weight_unit){

					if($check_name == FALSE){
						$check_code = $this->admin->check_data('material_tbl', array('material_code' =>  $material_code, 'material_type_id' => $type));
						if($check_code == FALSE){
							$set = array(
								/*'unit_id' => $base_unit,
								'sales_unit_id' => $sales_basis,*/
								'material_type_id' => $type,
								'vat_type_id' => $vat,
								'material_code' => $material_code,
								'material_desc' => strtoupper($material_desc),
								/*'equivalent_unit' => $equivalent_unit,*/
								'material_status' => 1
							);

							print_r($set);

							$result = $this->admin->insert_data('material_tbl', $set, TRUE);

							if($result['result'] == TRUE){
								$material_id = $result['id'];

								$set_material_bc = array(
									'material_id' => $material_id,
									'unit_id' => $base_unit,
									'sales_unit_id' => $sales_basis,
									'equivalent_unit' => $equivalent_unit,
									'material_bc_status' => 1
								);

								$result_material_bc = $this->admin->insert_data('material_bc_formula_tbl', $set_material_bc, TRUE);

								if($weight_unit != '' || !empty($weight_unit)){

									$material_bc_id = $result_material_bc['id'];
									$set_unit_material = array(
										'material_bc_id' => $material_bc_id,
										'unit_id' => $weight_unit,
										'unit_conversation' => 0,
										'material_unit_status' => 1
									);

									$this->admin->insert_data('material_unit_tbl', $set_unit_material);
								}

								
								if($result == TRUE){
									$msg = '<div class="alert alert-success">Variable Materials added.</div>';
								}else{
									$msg = '<div class="alert alert-danger">Error please try again!</div>';
								}
							}else{
								$msg = '<div class="alert alert-danger">Error please try again!</div>';
							}
						}else{
							$msg = '<div class="alert alert-danger">Error material code already exist!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error material description already exist!</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error base unit and weight unit should not the same try again!</div>';
				}
				$this->session->set_flashdata('message', $msg);
				redirect('admin/materials');
			}else{
				redirect('admin');
			}
		}else{
			redirect('admin');
		}
	}

	public function update_material(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = clean_data(decode($this->input->post('id')));
			$material_code = clean_data($this->input->post('material_code'));
			$material_desc = clean_data($this->input->post('description'));
			$group = decode($this->input->post('group'));
			$vat = decode($this->input->post('vat'));
			$base_unit = decode($this->input->post('base_unit'));
			$valuation_unit = decode($this->input->post('valuation_unit'));
			$valuation_basis = clean_data($this->input->post('valuation_basis'));
			$equivalent_unit = clean_data($this->input->post('equivalent_unit'));
			$allocation = clean_data($this->input->post('allocation'));
			$material_weight = clean_data($this->input->post('material_weight'));
			
			if(!empty($id) && !empty($material_code) && !empty($material_desc) && !empty($group) && !empty($vat) && !empty($base_unit) && !empty($valuation_unit)){
				$check_id = $this->admin->check_data('material_tbl', array('material_id' => $id), TRUE);
				if($check_id['result'] == TRUE){

					$check_name = $this->admin->check_data('material_tbl', array('material_desc' =>  strtoupper($material_desc), 'material_code' =>  strtoupper($material_code), 'material_id !=' => $id));
					if($check_name == FALSE){
						$check_code = $this->admin->check_data('material_tbl', array('material_code' => $material_code, 'material_id !=' => $id));
						if($check_code == FALSE){

							$set = array(
								'unit_id' => $base_unit,
								'material_group_id' => $group,
								'vat_type_id' => $vat,
								'material_code' => $material_code,
								'material_weight' => $material_weight,
								'material_desc' => strtoupper($material_desc),
								'material_status' => 1
							);

							$where = array('material_id' => $id);

							$result = $this->admin->update_data('material_tbl', $set, $where);
							if($result == TRUE){

								$set_material_unit = array(
									'valuation_unit' => $valuation_unit,
									'valuation_basis' => $valuation_basis,
									'sales_unit_equivalent' => $equivalent_unit
								);

								$where_material_unit = array('material_id' => $id, 'material_unit_status' => 1);

								$result_material_bc = $this->admin->update_data('material_unit_tbl', $set_material_unit, $where_material_unit);	
								


								if(count($allocation) > 0 && !empty($allocation)){
									$allocation_data = '';
									$allocation_count = 1;
									foreach($allocation as $row_data){
										$allocation_data .= decode($row_data);
										if(count($allocation) != $allocation_count){
											$allocation_data .= ',';
										}
										
										$allocation_count++;
									}

									$set_remove_allocation = array('material_allocation_status' => 0);
									$where_remove_allocation = 'material_allocation_status = 1 AND material_id = ' . $id . ' AND allocation_type_id NOT IN(' . $allocation_data . ')';
									$remove_allocation = $this->admin->update_data('material_allocation_tbl', $set_remove_allocation, $where_remove_allocation);
									foreach($allocation as $row){
										$allocation_type_id = decode($row);
										$check_allocation = $this->admin->check_data('material_allocation_tbl', array('material_id' => $id, 'allocation_type_id' => $allocation_type_id, 'material_allocation_status' => 1));
										if($check_allocation == FALSE){
											$set_allocation = array(
												'material_id' => $id,
												'allocation_type_id' => $allocation_type_id,
												'user_id' => $user_id,
												'material_allocation_added' => date_now(),
												'material_allocation_status' => 1
											);

											$insert_allocation = $this->admin->insert_data('material_allocation_tbl', $set_allocation);
										}
									}
								}else{
									$set_remove_allocation = array('material_allocation_status' => 0);
									$where_remove_allocation = 'material_allocation_status = 1 AND material_id = ' . $id;
									$remove_allocation = $this->admin->update_data('material_allocation_tbl', $set_remove_allocation, $where_remove_allocation);
								}

								$msg = '<div class="alert alert-success">Materials updated.</div>';
							}else{
								$msg = '<div class="alert alert-danger">Error please try again!</div>';
							}
						}else{
							$msg = '<div class="alert alert-danger">Error material code already exist!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error material description already exist!</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				
			}else{
				$msg = '<div class="alert alert-danger">Error make sure your fill up all requeired fields.</div>';
			}
		}else{
			redirect('admin');
		}

		$this->session->set_flashdata('message', $msg);
		redirect('admin/materials');

	}

	public function upload_materials_old(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$this->load->library('excel');
			ini_set('max_execution_time', 0); 
			ini_set('memory_limit','2048M');
			
			$temp_code = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 10);

			$config['upload_path']   = 'assets/Materials';
	        $config['allowed_types'] = 'xls|xlsx|xlsb';
	        $config['file_name'] = 'tmp_' . $temp_code;
	        $this->load->library('upload', $config);
			
	        if (! $this->upload->do_upload('material_file')) {
	            $error = array('error' => $this->upload->display_errors());
	            $msg = $this->upload->display_errors();
	            $this->session->set_flashdata('message', $msg);
	            redirect($_SERVER['HTTP_REFERER']);
	        }else{
				$data = array('upload_data' => $this->upload->data());
		        $file_name = $data['upload_data']['file_name'];
				$file = 'assets/Materials/' . $file_name;

		    	$this->db->trans_start();
				$objPHPExcel = PHPExcel_IOFactory::load($file);
				//get only the Cell Collection
				$cell_collection = $objPHPExcel->getActiveSheet()->getCellCollection();
			
				$high = $objPHPExcel->getActiveSheet()->getHighestRow();
				$exist_count = 1;


				for($a = 2; $a <= $high; $a++){
					$material_code = $objPHPExcel->getActiveSheet()->getCell('A' . $a)->getValue();
					$material_desc = strtoupper($objPHPExcel->getActiveSheet()->getCell('B' . $a)->getValue());
					$unit = $objPHPExcel->getActiveSheet()->getCell('C' . $a)->getValue();
					$val_unit = $objPHPExcel->getActiveSheet()->getCell('D' . $a)->getValue();
					$val_basis = $objPHPExcel->getActiveSheet()->getCell('E' . $a)->getValue() ? : '';
					$sales_unit_equivalent = $objPHPExcel->getActiveSheet()->getCell('F' . $a)->getValue() ? : '';
					$material_group = $objPHPExcel->getActiveSheet()->getCell('G' . $a)->getValue();
					$vat = $objPHPExcel->getActiveSheet()->getCell('H' . $a)->getValue();
					$brand = $objPHPExcel->getActiveSheet()->getCell('I' . $a)->getValue();
					$allocation = $objPHPExcel->getActiveSheet()->getCell('J' . $a)->getValue();
					$material_weight = $objPHPExcel->getActiveSheet()->getCell('K' . $a)->getValue();
					$material_weight = $material_weight == NULL ? 0 : $material_weight;
					$material_class = $objPHPExcel->getActiveSheet()->getCell('L' . $a)->getValue();
					$material_class = trim(strtoupper($material_class));
					
					if(!empty($material_code) && !empty($material_desc)){
						$check_class = $this->admin->check_data('material_class_tbl', array('material_class_name' => strtoupper($material_class), 'material_class_status' => 1), TRUE);
						if($check_class['result'] == TRUE){
							$material_class_id = $check_class['info']->material_class_id;
						} else {
							$msg = '<div class="alert alert-danger">Error Material Class ('.$material_class.') does not exist in line ' . $a . '!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect($_SERVER['HTTP_REFERER']);
						}

						$check_name = $this->admin->check_data('material_tbl', array('material_desc' => $material_desc, 'material_code' => $material_code), TRUE);
						if($check_name['result'] == FALSE){
							$check_code = $this->admin->check_data('material_tbl', array('material_code' => $material_code));
							if($check_code == FALSE){
								$check_unit = $this->admin->check_data('unit_tbl', array('unit_name' => $unit), TRUE);
								if($check_unit['result'] == TRUE){
									$unit_id = $check_unit['info']->unit_id;
									$check_valuation_unit = $this->admin->check_data('unit_tbl', array('unit_name' => $val_unit), TRUE);
									if($check_valuation_unit['result'] == TRUE){
										$valuation_unit = $check_valuation_unit['info']->unit_id;
										$check_vat = $this->admin->check_data('vat_type_tbl', array('vat_type_name' => strtoupper($vat)), TRUE);
										if($check_vat['result'] == TRUE){
											$vat_type_id = $check_vat['info']->vat_type_id;

											$check_group = $this->admin->check_data('material_group_tbl', array('material_group_name' => strtoupper($material_group)), TRUE);
											if($check_group['result'] == TRUE){

												
												
												
												$material_group_id = $check_group['info']->material_group_id;

												$set_material = array(
													'unit_id' => $unit_id,
													'material_group_id' => $material_group_id,
													'vat_type_id' => $vat_type_id,
													'material_code' => $material_code,
													'material_desc' => $material_desc,
													'material_weight' => $material_weight,
													'material_class_id' => $material_class_id,
													'material_added' => date_now(),
													'material_status' => 1,
												);

												$insert_mat = $this->admin->insert_data('material_tbl', $set_material, TRUE);

												$material_id = $insert_mat['id'];

												$set_mat_unit = array(
													'material_id' => $material_id,
													'valuation_unit' => $valuation_unit,
													'valuation_basis' => $val_basis,
													'sales_unit_equivalent' => $sales_unit_equivalent,
													'material_unit_status' => 1,
												);

												$insert_unit = $this->admin->insert_data('material_unit_tbl', $set_mat_unit);
												if($brand != '' || !empty($brand)){
													$split_brand = explode('/', $brand);

													foreach($split_brand as $row){
														$brand_name = $row;

														$check_brand = $this->admin->check_data('brand_tbl', array('brand_name' => strtoupper($brand_name)), TRUE);
														if($check_brand['result'] == TRUE){
															$brand_id = $check_brand['info']->brand_id;
															$set_brand = array(
																'brand_id' => $brand_id,
																'material_id' => $material_id,
																'brand_material_status' => 1
															);

															$insert_brand = $this->admin->insert_data('brand_material_tbl', $set_brand);
														}else{
															$msg = '<div class="alert alert-danger">Error Brand not exist "' . $brand_name . '" line ' . $a . '!</div>';
															$this->session->set_flashdata('message', $msg);
															redirect($_SERVER['HTTP_REFERER']);
														}
													}

													$split_allocation = explode('/', $allocation);
													foreach($split_allocation as $row_allocation){
														$allocation_type_name = $row_allocation;
														$check_allocation = $this->admin->check_data('allocation_type_tbl', array('allocation_type_name' => $allocation_type_name, 'allocation_type_status' => 1), TRUE);
														if($check_allocation['result'] == TRUE){
															$allocation_type_id = $check_allocation['info']->allocation_type_id;
															$set_allocation = array(
																'material_id' => $material_id,
																'allocation_type_id' => $allocation_type_id,
																'user_id' => $user_id,
																'material_allocation_added' => date_now(),
																'material_allocation_status' => 1
															);

															$insert_allocation = $this->admin->insert_data('material_allocation_tbl', $set_allocation);
														}else{
															$msg = '<div class="alert alert-danger">Error Allocation Type (' . $allocation_type_name . ') not exist line ' . $a . '!</div>';
															$this->session->set_flashdata('message', $msg);
															redirect($_SERVER['HTTP_REFERER']);
														}
													}
												}

												$success_count++;
												
											}else{
												$msg = '<div class="alert alert-danger">Error Material Group not exist line ' . $a . '!</div>';
												$this->session->set_flashdata('message', $msg);
												redirect($_SERVER['HTTP_REFERER']);
											}
											
										}else{
											$msg = '<div class="alert alert-danger">Error Vat not exist line ' . $a . '!</div>';
											$this->session->set_flashdata('message', $msg);
											redirect($_SERVER['HTTP_REFERER']);
										}				
									}else{
										$msg = '<div class="alert alert-danger">Error Valuation Unit not exist line ' . $a . '!</div>';
										$this->session->set_flashdata('message', $msg);
										redirect($_SERVER['HTTP_REFERER']);
									}
								}else{
									$msg = '<div class="alert alert-danger">Error Based Unit not exist line ' . $a . '!</div>';
									$this->session->set_flashdata('message', $msg);
									redirect($_SERVER['HTTP_REFERER']);
								}
							}else{
								$exist_count++;
							}
						}else{
							
							
							$material_id = $check_name['info']->material_id;

							$set = array(
								'material_class_id' => $material_class_id
							);
							$where = array(
								'material_id' => $material_id
							);
							$this->admin->update_data('material_tbl', $set, $where);


							$split_allocation = explode('/', $allocation);
							foreach($split_allocation as $row_allocation){
								$allocation_type_name = $row_allocation;
								$check_allocation = $this->admin->check_data('allocation_type_tbl', array('allocation_type_name' => $allocation_type_name, 'allocation_type_status' => 1), TRUE);
								if($check_allocation['result'] == TRUE){
									$allocation_type_id = $check_allocation['info']->allocation_type_id;
									$check_mat_allocation = $this->admin->check_data('material_allocation_tbl', array('material_id' => $material_id, 'allocation_type_id' => $allocation_type_id,  'material_allocation_status' => 1));
									if($check_mat_allocation == FALSE){
										$set_allocation = array(
											'material_id' => $material_id,
											'allocation_type_id' => $allocation_type_id,
											'user_id' => $user_id,
											'material_allocation_added' => date_now(),
											'material_allocation_status' => 1
										);

										$insert_allocation = $this->admin->insert_data('material_allocation_tbl', $set_allocation);
									}
								}else{
									$msg = '<div class="alert alert-danger">Error Allocation Type (' . $allocation_type_name . ') not exist line ' . $a . '!</div>';
									$this->session->set_flashdata('message', $msg);
									redirect($_SERVER['HTTP_REFERER']);
								}
							}

							$exist_count++;
						}
					}else{
						$a = $high + 1;
					}
				}

				$total_count = ($exist_count + $success_count) - 1;

				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success">Total of ' . $success_count . ' out of ' . $total_count . ' materials successfully uploaded!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}
			}
		}else{
			$msg = '<div class="alert alert-success">Error please try again!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect($_SERVER['HTTP_REFERER']);
		}
	}
	
	public function upload_materials(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$this->load->library('excel');
			ini_set('max_execution_time', 0); 
			ini_set('memory_limit','2048M');
			
			$temp_code = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 10);

			$config['upload_path']   = 'assets/Materials';
	        $config['allowed_types'] = 'xls|xlsx|xlsb';
	        $config['file_name'] = 'tmp_' . $temp_code;
	        $this->load->library('upload', $config);
			
	        if (! $this->upload->do_upload('material_file')) {
	            $error = array('error' => $this->upload->display_errors());
	            $msg = $this->upload->display_errors();
	            $this->session->set_flashdata('message', $msg);
	            redirect($_SERVER['HTTP_REFERER']);
	        }else{
				$data = array('upload_data' => $this->upload->data());
		        $file_name = $data['upload_data']['file_name'];
				$file = 'assets/Materials/' . $file_name;

		    	$this->db->trans_start();
				$objPHPExcel = PHPExcel_IOFactory::load($file);
				//get only the Cell Collection
				$cell_collection = $objPHPExcel->getActiveSheet()->getCellCollection();
			
				$high = $objPHPExcel->getActiveSheet()->getHighestRow();
				$exist_count = 1;



				for($a = 2; $a <= $high; $a++){
					$material_code = $objPHPExcel->getActiveSheet()->getCell('A' . $a)->getValue();
					$material_desc = strtoupper($objPHPExcel->getActiveSheet()->getCell('B' . $a)->getValue());
					$unit = $objPHPExcel->getActiveSheet()->getCell('C' . $a)->getValue();
					$val_unit = $objPHPExcel->getActiveSheet()->getCell('D' . $a)->getValue();
					$val_basis = $objPHPExcel->getActiveSheet()->getCell('E' . $a)->getValue() ? : '';
					$sales_unit_equivalent = $objPHPExcel->getActiveSheet()->getCell('F' . $a)->getValue() ? : '';
					$material_group = $objPHPExcel->getActiveSheet()->getCell('G' . $a)->getValue();
					$vat = $objPHPExcel->getActiveSheet()->getCell('H' . $a)->getValue();
					$brand = $objPHPExcel->getActiveSheet()->getCell('I' . $a)->getValue();
					$allocation = $objPHPExcel->getActiveSheet()->getCell('J' . $a)->getValue();
					$material_weight = $objPHPExcel->getActiveSheet()->getCell('K' . $a)->getValue();
					$material_weight = $material_weight == NULL ? 0 : $material_weight;
					$material_class = $objPHPExcel->getActiveSheet()->getCell('L' . $a)->getValue();
					$material_class = trim(strtoupper($material_class));
					$status_name = $objPHPExcel->getActiveSheet()->getCell('M' . $a)->getValue();
					$status_name = trim(strtoupper($status_name));
					$status = 1;
					if($status_name == 'INACTIVE'){
						$status = 0;
					}

					if(!empty($material_code) && !empty($material_desc)){
						$check_class = $this->admin->check_data('material_class_tbl', array('material_class_name' => strtoupper($material_class), 'material_class_status' => 1), TRUE);
						if($check_class['result'] == TRUE){
							$material_class_id = $check_class['info']->material_class_id;
						} else {
							$msg = '<div class="alert alert-danger">Error Material Class ('.$material_class.') does not exist in line ' . $a . '!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect($_SERVER['HTTP_REFERER']);
						}

						$check_unit = $this->admin->check_data('unit_tbl', array('unit_name' => $unit), TRUE);
						if($check_unit['result'] == TRUE){
							$unit_id = $check_unit['info']->unit_id;
						}else{
							$msg = '<div class="alert alert-danger">Error Based Unit ('.$unit.') not exist line ' . $a . '!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect($_SERVER['HTTP_REFERER']);
						}

						$check_valuation_unit = $this->admin->check_data('unit_tbl', array('unit_name' => $val_unit), TRUE);
						if($check_valuation_unit['result'] == TRUE){
							$valuation_unit = $check_valuation_unit['info']->unit_id;
						}else{
							$msg = '<div class="alert alert-danger">Error Valuation Unit ('.$val_unit.') not exist line ' . $a . '!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect($_SERVER['HTTP_REFERER']);
						}

						$check_vat = $this->admin->check_data('vat_type_tbl', array('vat_type_name' => strtoupper($vat)), TRUE);
						if($check_vat['result'] == TRUE){
							$vat_type_id = $check_vat['info']->vat_type_id;
						}else{
							$msg = '<div class="alert alert-danger">Error Vat ('.$vat.') not exist line ' . $a . '!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect($_SERVER['HTTP_REFERER']);
						}

						$check_group = $this->admin->check_data('material_group_tbl', array('material_group_name' => strtoupper($material_group)), TRUE);
						if($check_group['result'] == TRUE){
							$material_group_id = $check_group['info']->material_group_id;
						}else{
							$msg = '<div class="alert alert-danger">Error Material Group ('.$material_group.') not exist line ' . $a . '!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect($_SERVER['HTTP_REFERER']);
						}

						// $check_name = $this->admin->check_data('material_tbl', array('material_desc' => $material_desc, 'material_code' => $material_code), TRUE);
						$check_name = $this->admin->check_data('material_tbl', array('material_code' => $material_code), TRUE);
						if($check_name['result'] == FALSE){
							$check_code = $this->admin->check_data('material_tbl', array('material_code' => $material_code));
							if($check_code == FALSE){
								
								$set_material = array(
									'unit_id' => $unit_id,
									'material_group_id' => $material_group_id,
									'vat_type_id' => $vat_type_id,
									'material_code' => $material_code,
									'material_desc' => $material_desc,
									'material_weight' => $material_weight,
									'material_class_id' => $material_class_id,
									'material_added' => date_now(),
									'material_status' => $status,
								);

								$insert_mat = $this->admin->insert_data('material_tbl', $set_material, TRUE);

								$material_id = $insert_mat['id'];

								$set_mat_unit = array(
									'material_id' => $material_id,
									'valuation_unit' => $valuation_unit,
									'valuation_basis' => $val_basis,
									'sales_unit_equivalent' => $sales_unit_equivalent,
									'material_unit_status' => $status,
								);

								$insert_unit = $this->admin->insert_data('material_unit_tbl', $set_mat_unit);
								if($brand != '' || !empty($brand)){
									$split_brand = explode('/', $brand);

									foreach($split_brand as $row){
										$brand_name = $row;

										$check_brand = $this->admin->check_data('brand_tbl', array('brand_name' => strtoupper($brand_name)), TRUE);
										if($check_brand['result'] == TRUE){
											$brand_id = $check_brand['info']->brand_id;
											$set_brand = array(
												'brand_id' => $brand_id,
												'material_id' => $material_id,
												'brand_material_status' => $status
											);

											$insert_brand = $this->admin->insert_data('brand_material_tbl', $set_brand);
										}else{
											$msg = '<div class="alert alert-danger">Error Brand not exist "' . $brand_name . '" line ' . $a . '!</div>';
											$this->session->set_flashdata('message', $msg);
											redirect($_SERVER['HTTP_REFERER']);
										}
									}
								}

								if($allocation != '' || !empty($allocation)){
									$split_allocation = explode('/', $allocation);
									foreach($split_allocation as $row_allocation){
										$allocation_type_name = $row_allocation;
										$check_allocation = $this->admin->check_data('allocation_type_tbl', array('allocation_type_name' => $allocation_type_name, 'allocation_type_status' => 1), TRUE);
										if($check_allocation['result'] == TRUE){
											$allocation_type_id = $check_allocation['info']->allocation_type_id;
											$set_allocation = array(
												'material_id' => $material_id,
												'allocation_type_id' => $allocation_type_id,
												'user_id' => $user_id,
												'material_allocation_added' => date_now(),
												'material_allocation_status' => $status
											);

											$insert_allocation = $this->admin->insert_data('material_allocation_tbl', $set_allocation);
										}else{
											$msg = '<div class="alert alert-danger">Error Allocation Type (' . $allocation_type_name . ') not exist line ' . $a . '!</div>';
											$this->session->set_flashdata('message', $msg);
											redirect($_SERVER['HTTP_REFERER']);
										}
									}
								}

								$success_count++;
							} else {
								$exist_count++;
							}
						}else{
							$material_id = $check_name['info']->material_id;
							$set = array(
								'unit_id' => $unit_id,
								'material_group_id' => $material_group_id,
								'vat_type_id' => $vat_type_id,
								'material_code' => $material_code,
								'material_desc' => $material_desc,
								'material_weight' => $material_weight,
								'material_class_id' => $material_class_id,
								'material_status' => $status,
							);
							$where = array(
								'material_id' => $material_id
							);
							$this->admin->update_data('material_tbl', $set, $where);

							$set_mat_unit = array(
								'valuation_unit' => $valuation_unit,
								'valuation_basis' => $val_basis,
								'sales_unit_equivalent' => $sales_unit_equivalent,
								'material_unit_status' => $status,
							);
							$this->admin->update_data('material_unit_tbl', $set_mat_unit, $where);

							//* BRAND MATERIALS
							if($brand != '' || !empty($brand)){
								$split_brand = explode('/', $brand);
								foreach($split_brand as $row){
									$brand_name = $row;

									$check_brand = $this->admin->check_data('brand_tbl', array('brand_name' => strtoupper($brand_name)), TRUE);
									if($check_brand['result'] == TRUE){
										$brand_id = $check_brand['info']->brand_id;
										$check_brand_material = $this->admin->check_data('brand_material_tbl', array('material_id' => $material_id, 'brand_id' => $brand_id));
										if($check_brand_material == FALSE){
											$set_brand = array(
												'brand_id' => $brand_id,
												'material_id' => $material_id,
												'brand_material_status' => $status
											);

											$insert_brand = $this->admin->insert_data('brand_material_tbl', $set_brand);
										} else {
											$this->admin->update_data('brand_material_tbl', array('brand_material_status' => $status), array('material_id' => $material_id, 'brand_id' => $brand_id));
										}
									}else{
										$msg = '<div class="alert alert-danger">Error Brand not exist "' . $brand_name . '" line ' . $a . '!</div>';
										$this->session->set_flashdata('message', $msg);
										redirect($_SERVER['HTTP_REFERER']);
									}
								}
							}

							//* ALLOCATIONS
							if($allocation != '' || !empty($allocation)){
								$split_allocation = explode('/', $allocation);
								foreach($split_allocation as $row_allocation){
									$allocation_type_name = $row_allocation;
									$check_allocation = $this->admin->check_data('allocation_type_tbl', array('allocation_type_name' => $allocation_type_name, 'allocation_type_status' => 1), TRUE);
									if($check_allocation['result'] == TRUE){
										$allocation_type_id = $check_allocation['info']->allocation_type_id;
										$check_mat_allocation = $this->admin->check_data('material_allocation_tbl', array('material_id' => $material_id, 'allocation_type_id' => $allocation_type_id));
										if($check_mat_allocation == FALSE){
											$set_allocation = array(
												'material_id' => $material_id,
												'allocation_type_id' => $allocation_type_id,
												'user_id' => $user_id,
												'material_allocation_added' => date_now(),
												'material_allocation_status' => $status
											);
	
											$insert_allocation = $this->admin->insert_data('material_allocation_tbl', $set_allocation);
										} else {
											$this->admin->update_data('material_allocation_tbl', array('material_allocation_status' => $status), array('material_id' => $material_id, 'allocation_type_id' => $allocation_type_id));
										}
									}else{
										$msg = '<div class="alert alert-danger">Error Allocation Type (' . $allocation_type_name . ') not exist line ' . $a . '!</div>';
										$this->session->set_flashdata('message', $msg);
										redirect($_SERVER['HTTP_REFERER']);
									}
								}
							}

							$success_count++;
						}
					}else{
						$a = $high + 1;
					}
				}

				$total_count = ($exist_count + $success_count) - 1;

				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success">Total of ' . $success_count . ' out of ' . $total_count . ' materials successfully uploaded!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}
			}
		}else{
			$msg = '<div class="alert alert-success">Error please try again!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect($_SERVER['HTTP_REFERER']);
		}
	}

	public function download_material(){
		$info = $this->_require_login();

		$join_material = array(
			'unit_tbl b' => 'a.unit_id = b.unit_id',
			'material_group_tbl c' => 'a.material_group_id = c.material_group_id',
			'material_unit_tbl d' => 'a.material_id=d.material_id',
			'unit_tbl e' => 'd.valuation_unit = e.unit_id',
			'vat_type_tbl f' => 'a.vat_type_id = f.vat_type_id'
		);

		$data['material'] = $this->admin->get_join('material_tbl a', $join_material, FALSE,'a.material_code ASC', FALSE, '*, e.unit_name as valuation_unit, b.unit_name as base_unit');

		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('List of fixed materials ')
				->setSubject('Fixed Materials')
				->setDescription('List of materials');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => \PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);


		foreach(range('A','H') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);


		$spreadsheet->getActiveSheet()->getStyle("A1:I1")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A1:I1")->applyFromArray($style_info);
		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Material Code')
				->setCellValue("B1", "Material Description")
				->setCellValue("C1", "BUoM")
				->setCellValue("D1", "Valuation Unit")
				->setCellValue("E1", "Conversion Unit")
				->setCellValue("F1", "Sales Unit Equivalent")
				->setCellValue("G1", "Material Group")
				->setCellValue("H1", "VAT TYPE")
				->setCellValue("I1", "MATERIAL WEIGHT")
				;


		// Add some data
		$x= 2;
		$count = 0;
		foreach($data['material'] as $row){
			$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A$x",$row->material_code)
					->setCellValue("B$x",$row->material_desc)
					->setCellValue("C$x",$row->base_unit)
					->setCellValue("D$x",$row->valuation_unit)
					->setCellValue("E$x",$row->valuation_basis)
					->setCellValue("F$x",$row->sales_unit_equivalent)
					->setCellValue("G$x",$row->material_group_name)
					->setCellValue("H$x",$row->vat_type_name)
					->setCellValue("I$x",$row->material_weight);

			$spreadsheet->getActiveSheet()->getStyle("A$x:I$x")->applyFromArray($style_data);
			$x++;
		}
		
		// Rename worksheet
		$spreadsheet->getActiveSheet()->setTitle('List of fixed material');

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);

		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Budgeting - Fixed Materials.xlsx"');
		header('Cache-Control: max-age=0');
		// If you're serving to IE 9, then the following may be needed
		header('Cache-Control: max-age=1');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function download_vmaterial(){
		$this->load->model('admin_model');
		$info = $this->_require_login();
		$join_vmaterial = array(
			'material_bc_formula_tbl g' => 'a.material_id=g.material_id',
			'unit_tbl b' => 'g.unit_id = b.unit_id',
			'material_type_tbl c' => 'a.material_type_id = c.material_type_id AND (c.material_type_name="LIVE SALES" || c.material_type_name="DRESSED - SUPERMARKET" || c.material_type_name="DRESSED - OTHERS")',
			'unit_tbl f' => 'g.sales_unit_id = f.unit_id',
			'vat_type_tbl h' => 'a.vat_type_id = h.vat_type_id'
		);

		$data['vmaterial'] = $this->admin->get_join('material_tbl a', $join_vmaterial, FALSE,'a.material_code ASC', FALSE, '*, f.unit_name as sales_unit, b.unit_name as base_unit, IFNULL((SELECT e.unit_name FROM material_unit_tbl as d, unit_tbl as e WHERE d.unit_id=e.unit_id AND g.material_bc_id=d.material_bc_id AND  d.material_unit_status=1), "N/A") as weight_unit, IFNULL((SELECT d.unit_conversation FROM material_unit_tbl as d, unit_tbl as e WHERE d.unit_id=e.unit_id AND g.material_bc_id=d.material_bc_id AND  d.material_unit_status=1), "N/A") as unit_conversation');
		require_once APPPATH . '/third_party/PHPExcel/Phpexcel/Bootstrap.php';

		$spreadsheet = new \PhpOffice\PhpSpreadsheet\Spreadsheet();
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('List of variable materials ')
				->setSubject('Variable Materials')
				->setDescription('List of materials');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => \PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER,
						'vertical' => \PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => \PhpOffice\PhpSpreadsheet\Style\Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);

		foreach(range('A','I') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => \PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => \PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => \PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => \PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER
			),
		);


		$spreadsheet->getActiveSheet()->getStyle("A1:H1")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A1:H1")->applyFromArray($style_info);
		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1",'Material Code')
				->setCellValue("B1","Material Description")
				->setCellValue("C1", "Material Group")
				->setCellValue("D1", "VAT")
				->setCellValue("E1", "Base Unit")
				->setCellValue("F1", "Weight Unit")
				->setCellValue("G1", "Sales Basis")
				->setCellValue("H1", "Equivalent Unit");


		// Add some data
		$x= 2;
		$count = 0;
		foreach($data['vmaterial'] as $row){
			$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A$x",$row->material_code)
					->setCellValue("B$x",$row->material_desc)
					->setCellValue("C$x",$row->material_type_name)
					->setCellValue("D$x",$row->vat_type_name)
					->setCellValue("E$x",$row->base_unit)
					->setCellValue("F$x",$row->weight_unit)
					->setCellValue("G$x",$row->sales_unit)
					->setCellValue("H$x",$row->equivalent_unit);

			$spreadsheet->getActiveSheet()->getStyle("A$x:H$x")->applyFromArray($style_data);
			$x++;
		}
		
		// Rename worksheet
		$spreadsheet->getActiveSheet()->setTitle('List of variable material');

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);

		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Budgeting - Variable Materials.xlsx"');
		header('Cache-Control: max-age=0');
		// If you're serving to IE 9, then the following may be needed
		header('Cache-Control: max-age=1');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = \PhpOffice\PhpSpreadsheet\IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function modal_material($id){
		$info = $this->_require_login();
		$material_id = decode($id);

		$join = array(
			'material_unit_tbl b' => 'a.material_id = b.material_id AND b.material_unit_status = 1 AND a.material_id =' . $material_id,

		);
		$check_material = $this->admin->check_join('material_tbl a', $join, TRUE);


		if($check_material['result'] == TRUE){

			$data['result'] = 1;
			$unit = $this->admin->get_data('unit_tbl', array('unit_status' => 1));	
			$base_unit = '';

			foreach($unit as $row):

				if($row->unit_id == $check_material['info']->unit_id){
					$base_unit .= '<option value="' . encode($row->unit_id) . '" selected>' . $row->unit_name . '</option>';
				}else{
					$base_unit .= '<option value="' . encode($row->unit_id) . '">' . $row->unit_name . '</option>';
				}

			endforeach;

			$get_group = $this->admin->get_data('material_group_tbl', array('material_group_status' => 1));	
			$group = '';

			foreach($get_group as $row_group):

				if($row_group->material_group_id == $check_material['info']->material_group_id){
					$group .= '<option value="' . encode($row_group->material_group_id) . '" selected>' . $row_group->material_group_name . '</option>';
				}else{
					$group .= '<option value="' . encode($row_group->material_group_id) . '">' . $row_group->material_group_name . '</option>';
				}

			endforeach;

			$get_allocation = $this->admin->get_data('allocation_type_tbl', array('allocation_type_status' => 1));	
			$allocation = '';
			$get_selected_allocation = $this->admin->get_data('material_allocation_tbl', array('material_id' => $material_id, 'material_allocation_status' => 1), FALSE, 'allocation_type_id');

			foreach($get_allocation as $row_allocation):

				if(count($get_selected_allocation) > 0){
					$check_allocation = $this->admin->get_data('material_allocation_tbl', array('material_id' => $material_id, 'allocation_type_id' => $row_allocation->allocation_type_id, 'material_allocation_status' => 1));
					if($check_allocation == TRUE){
						$allocation .= '<option value="' . encode($row_allocation->allocation_type_id) . '" selected>' . $row_allocation->allocation_type_name . '</option>';
					}else{
						$allocation .= '<option value="' . encode($row_allocation->allocation_type_id) . '">' . $row_allocation->allocation_type_name . '</option>';
					}
				}else{
					$allocation .= '<option value="' . encode($row_allocation->allocation_type_id) . '">' . $row_allocation->allocation_type_name . '</option>';
				}

			endforeach;

			$get_vat  = $this->admin->get_data('vat_type_tbl', array('vat_type_status' => 1));	
			$vat = '';

			foreach($get_vat as $row_vat):

				if($row_vat->vat_type_id == $check_material['info']->vat_type_id){
					$vat .= '<option value="' . encode($row_vat->vat_type_id) . '" selected>' . $row_vat->vat_type_name . '</option>';
				}else{
					$vat .= '<option value="' . encode($row_vat->vat_type_id) . '">' . $row_vat->vat_type_name . '</option>';
				}

			endforeach;

			
			
			$unit = $this->admin->get_data('unit_tbl', array('unit_status' => 1));	
			$valuation_unit = '';

			foreach($unit as $row):

				if($row->unit_id == $check_material['info']->valuation_unit){
					/*echo 'wew';*/
					$valuation_unit .= '<option value="' . encode($row->unit_id) . '" selected>' . $row->unit_name . '</option>';
				}else{
					$valuation_unit .= '<option value="' . encode($row->unit_id) . '">' . $row->unit_name . '</option>';
				}

			endforeach;

			$data['info'] = array(
				'material_code' => $check_material['info']->material_code,
				'material_desc' => $check_material['info']->material_desc,
				'material_weight' => $check_material['info']->material_weight,
				'group' => $group,
				'vat' => $vat,
				'base_unit' => $base_unit,
				'valuation_unit' => $valuation_unit,
				'valuation_basis' => $check_material['info']->valuation_basis,
				'sales_equivalent' => $check_material['info']->sales_unit_equivalent,
				'allocation' => $allocation
			);

			
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}


	/*Outlet*/

	public function outlets($year = null){
		$info = $this->_require_login();
		$data['title'] = 'Outlets';
		
		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','6048M');

		if($year == null){
			$year = $this->_active_year();
		}

		$data['year'] = $year;

		$join_outlet = array(
			'outlet_type_tbl b' => 'a.outlet_type_id = b.outlet_type_id',
			'bc_tbl c' => 'a.bc_id = c.bc_id',
			'region_tbl d' => 'c.region_id=d.region_id',
			/*'outlet_status_tbl e' => 'a.outlet_status_id=e.outlet_status_id',*/
			'outlet_brand_tbl f' => 'a.outlet_id = f.outlet_id AND f.outlet_brand_status = 1',
			'brand_tbl g' => 'f.brand_id = g.brand_id',
			'brand_type_tbl h' => 'g.brand_type_id = h.brand_type_id',
			'outlet_year_tbl i' => 'a.outlet_id = i.outlet_id AND i.outlet_year_status = 1 AND i.outlet_year = ' . $year
		);
		
		$data['outlets'] = $this->admin->get_join('outlet_tbl a', $join_outlet, FALSE,'a.ifs_code ASC');
		
		$data['bc'] = $this->admin->get_data('bc_tbl');
		$data['region'] = $this->admin->get_data('region_tbl', array('region_status' => 1));
		$data['type'] = $this->admin->get_data('brand_type_tbl', array('brand_type_status' => 1));
		$data['status'] = $this->admin->get_data('outlet_status_tbl');

		$data['content'] = $this->load->view('admin/admin_outlet_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function _migrate_outlets($year){

		$outlets = $this->admin->get_data('outlet_tbl', array('outlet_status_id' => 1));

		foreach($outlets as $row){
			$outlet_id = $row->outlet_id;

			$check_outlet = $this->admin->check_data('outlet_year_tbl', array('outlet_id' => $outlet_id, 'outlet_year' => $year, 'outlet_year_status' => 1));

			if($check_outlet == FALSE){
				$set = array(
					'outlet_id' => $outlet_id,
					'outlet_year' => $year,
					'outlet_year_added' => date_now(),
					'outlet_year_status' => 1
				);

				$insert_emp = $this->admin->insert_data('outlet_year_tbl', $set);
			}
		}

	}

	public function get_new_outlet($bc, $brand){
		$bc_id = decode($bc);
		$brand_id = decode($brand);
		$check_bc = $this->admin->check_data('bc_tbl', array('bc_id' => $bc_id), TRUE);

		if($check_bc['result'] == TRUE){
			$bc_code = $check_bc['info']->cost_center_code;
			$check_brand = $this->admin->check_data('brand_tbl', array('brand_id' => $brand_id), TRUE);
			if($check_brand['result'] == TRUE){
				$brand_code = $check_brand['info']->brand_code;

				$flag = TRUE;
				while($flag){
					$random = generate_random(3);
					$format = $bc_code . '-' . $brand_code . '-' . $random;

					$check_code = $this->admin->check_data('outlet_tbl', array('ifs_code' => $format));
					if($check_code == FALSE){
						$flag = FALSE;
					}
				}
				

				$data['result'] = 1;
				$data['info'] = $format;
			}
		}

		echo json_encode($data);
	}

	public function add_outlet(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$outlet = clean_data($this->input->post('outlet'));
			$ifs_code = clean_data($this->input->post('ifs'));
			$region_id = decode($this->input->post('region'));
			$bc_id = decode($this->input->post('bc'));
			$type_id = decode($this->input->post('type'));
			$brand = $this->input->post('brand');
			$status = decode($this->input->post('status'));
			$year = clean_data($this->input->post('year'));

			if(!empty($outlet) && !empty($ifs_code) && !empty($bc_id) && !empty($type_id) && !empty($brand) && !empty($status) && !empty($year)){
				$check_outlet = $this->admin->check_data('outlet_tbl', array('outlet_name' =>  strtoupper($outlet), 'ifs_code' => $ifs_code));
				if($check_outlet == FALSE){
					$check_code = $this->admin->check_data('outlet_tbl', array('ifs_code' =>  $ifs_code));
					if($check_code == FALSE){
						$join_bc = array('cost_center_tbl b' => 'a.cost_center_code = b.cost_center_code AND a.bc_id =' . $bc_id);
						$check_bc = $this->admin->check_join('bc_tbl a', $join_bc , TRUE);
						if($check_bc['result'] == TRUE){
							$parent_id = $check_bc['info']->cost_center_id;
							
							$this->db->trans_start();
							
							$set = array(
								'bc_id' => $bc_id,
								'outlet_type_id' => $status,
								'ifs_code' => $ifs_code,
								'outlet_name' => strtoupper($outlet),
								'outlet_status_id' => 1
							);

							$result = $this->admin->insert_data('outlet_tbl', $set, TRUE);

							if($result['result'] == TRUE){
								$outlet_id = $result['id'];
								foreach ($brand as $key) {
									$brand_id 	= clean_data(decode($key));

									$check_brand = $this->admin->check_data('brand_tbl', 'brand_id = ' . $brand_id, TRUE);
									if($check_brand['result'] == TRUE){
										$cost_center_group_id = $check_brand['info']->cost_center_group_id;
										$set_outlet_brand = array(
											'outlet_id' => $outlet_id,
											'brand_id' => $brand_id,
											'outlet_brand_status' => 1
										);
										$result = $this->admin->insert_data('outlet_brand_tbl', $set_outlet_brand);

										$set_cost_center = array(
											'bc_id' => $bc_id,
											'parent_id' => $parent_id,
											'cost_center_type_id' => 8,
											'user_id' => $user_id,
											'cost_center_group_id' => $cost_center_group_id,
											'cost_center_code' => $ifs_code,
											'cost_center_desc' => strtoupper($outlet),
											'cost_center_added' => date_now(),
											'cost_center_status' => 1
										);

										$insert_cost_center = $this->admin->insert_data('cost_center_tbl', $set_cost_center);
									}else{
										$msg = '<div class="alert alert-danger">Error Brand not exist!</div>';
										$this->session->set_flashdata('message', $msg);
										redirect($_SERVER['HTTP_REFERER']);
									}
								}
								
								$set_year = array(
									'outlet_id' => $outlet_id,
									'outlet_year' => $year,
									'outlet_year_added' => date_now(),
									'outlet_year_status' => 1
								);

								$insert_year = $this->admin->insert_data('outlet_year_tbl', $set_year);

								if($insert_year == TRUE){
									if($this->db->trans_status() === FALSE){
										$this->db->trans_rollback();
										$msg = '<div class="alert alert-danger">Error please contact your administrator!</div>';
									}else{
										$this->db->trans_commit();
										$msg = '<div class="alert alert-success">Outlet added.</div>';
									}
								}else{
									$msg = '<div class="alert alert-danger">Error please try again!</div>';
								}
							}else{
								$msg = '<div class="alert alert-danger">Error please try again!</div>';
							}
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error IFS code already exist!</div>';
					}

				}else{
					$msg = '<div class="alert alert-danger">Error outlet name already exist!</div>';
				}
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}else{
				redirect($_SERVER['HTTP_REFERER']);
			}
		}else{
			redirect('admin');
		}
	}

	public function modal_outlet(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			
			$check_outlet = $this->admin->check_data('outlet_tbl', array('outlet_id' => $id), TRUE);
			
			if($check_outlet['result'] == TRUE){
				$bc_id = $check_outlet['info']->bc_id;
				$outlet_type_id = $check_outlet['info']->outlet_type_id;
				$outlet_status_id = $check_outlet['info']->outlet_status_id;
				$outlet_name = $check_outlet['info']->outlet_name;
				$ifs_code = $check_outlet['info']->ifs_code;

				$get_bc = $this->admin->get_data('bc_tbl', array('bc_status' => 1));
				$bc_data = '<option value="">Select...</option>';

				foreach($get_bc as $row_bc){
					if($row_bc->bc_id == $bc_id){
						$bc_data .= '<option value="' . encode($row_bc->bc_id) . '" selected>' . $row_bc->bc_name . '</option>';
					}else{
						$bc_data .= '<option value="' . encode($row_bc->bc_id) . '">' . $row_bc->bc_name . '</option>';
					}
				}

				$get_type = $this->admin->get_data('outlet_type_tbl', array('outlet_type_status' => 1));
				$type_data = '<option value="">Select...</option>';

				foreach($get_type as $row_type){
					if($row_type->outlet_type_id == $outlet_type_id){
						$type_data .= '<option value="' . encode($row_type->outlet_type_id) . '" selected>' . $row_type->outlet_type_name . '</option>';
					}else{
						$type_data .= '<option value="' . encode($row_type->outlet_type_id) . '">' . $row_type->outlet_type_name . '</option>';
					}
				}

				$data['result'] = 1;
				$data['info'] = array(
					'outlet_name' => $outlet_name,
					'ifs_code' => $ifs_code,
					'bc'=> $bc_data,
					'status' => $type_data
				);

			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_outlet(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$outlet = clean_data($this->input->post('outlet'));
			$ifs_code = clean_data($this->input->post('ifs'));
			$bc_id = decode($this->input->post('bc'));
			$status = decode($this->input->post('status'));

			if(!empty($id) && !empty($outlet) && !empty($ifs_code) && !empty($bc_id) && !empty($status)){
				$join_id = array('cost_center_tbl b' => 'a.ifs_code = b.cost_center_code AND a.outlet_id = ' . $id);
				$check_id = $this->admin->check_join('outlet_tbl a', $join_id, TRUE);
				if($check_id['result'] == TRUE){
					$cost_center_id = $check_id['info']->cost_center_id;
					$check_outlet = $this->admin->check_data('outlet_tbl', array('outlet_name' =>  strtoupper($outlet), 'outlet_id !=' => $id));
					if($check_outlet == FALSE){
						$check_code = $this->admin->check_data('outlet_tbl', array('ifs_code' =>  $ifs_code, 'outlet_id !=' => $id ));
						if($check_code == FALSE){
							$join_cost_center = "a.cost_center_status = 1 AND a.cost_center_code = '" . $ifs_code . "' AND a.cost_center_id != " . $cost_center_id;
							$check_cost_center = $this->admin->check_data('cost_center_tbl a', $join_cost_center);
							if($check_cost_center == FALSE){
								
								$this->db->trans_start();
								
								$set_outlet = array(
									'outlet_type_id' => $status,
									'ifs_code' => $ifs_code,
									'outlet_name' => strtoupper($outlet)
								);
								$where_outlet = array('outlet_id' => $id);

								$result = $this->admin->update_data('outlet_tbl', $set_outlet, $where_outlet);

								
								$set_cost_center = array(
									'cost_center_code' => $ifs_code,
									'cost_center_desc' => strtoupper($outlet)
								);
								$where_cost_center = array('cost_center_id' => $cost_center_id);
								$update_cost_center = $this->admin->update_data('cost_center_tbl', $set_cost_center, $where_cost_center);
							
								if($this->db->trans_status() === FALSE){
									$this->db->trans_rollback();
									$msg = '<div class="alert alert-danger">Error please contact your administrator!</div>';
								}else{
									$this->db->trans_commit();
									$msg = '<div class="alert alert-success">Outlet updated.</div>';
								}
							}else{
								$msg = '<div class="alert alert-danger">Error cost center code already exist. Please try again!</div>';
							}
						}else{
							$msg = '<div class="alert alert-danger">Error IFS code already exist!</div>';
						}

					}else{
						$msg = '<div class="alert alert-danger">Error outlet name already exist!</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error outlet not exist!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);

			}else{
				redirect($_SERVER['HTTP_REFERER']);
			}
		}else{
			redirect('admin');
		}
	}

	public function remove_outlet(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode(clean_data($this->input->post('id')));
			$year = clean_data($this->input->post('year'));
			if(!empty($id)){
				$check_outlet = $this->admin->check_data('outlet_tbl', array('outlet_id' => $id), TRUE);
				if($check_outlet == TRUE){
					$ifs_code = $check_outlet['info']->ifs_code;
					$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $ifs_code), TRUE);
					if($check_cost_center['result'] == TRUE){
						$cost_center_id = $check_cost_center['info']->cost_center_id;

						$set_year = array('outlet_year_status' => 0);
						$where_year  = array('outlet_id' => $id, 'outlet_year' => $year);
						$update_year = $this->admin->update_data('outlet_year_tbl', $set_year, $where_year);

						$set_remove_cost = array('cost_center_status' => 0);
						$where_remove_cost = array('cost_center_id' => $cost_center_id);

						$update_cost_center = $this->admin->update_data('cost_center_tbl', $set_remove_cost, $where_remove_cost);
					}else{
						$msg = '<div class="alert alert-danger">Erro Cost Center not exist.</div>';
						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}

					
					$msg = '<div class="alert alert-success">Outlet removed.</div>';

				}else{
					$msg = '<div class="alert alert-danger">Error outlet name already exist!</div>';
				}
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}else{
				redirect($_SERVER['HTTP_REFERER']);
			}
		}else{
			redirect('admin');
		}
	}

	public function remove_outlets(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		
		$outlet = array(115069,119070,2000043,315000,315009,315015,315018,315027,315038,315043,315045,315047,315052,315062,315063,315067,315068,315075,315078,315082,315085,315091,315094,315096,315099,315125,315129,315130,315135,315138,315145,315147,315156,315161,315162,315170,315184,315187,315195,315197,315198,315200,315201,315202,315203,315205,315214,315216,315217,315223,315227,315229,315230,315233,315234,315236,315237,315240,315242,315248,315251,315254,315257,315258,315259,315264,315265,315268,315274,315280,315286,515048,515049,515051,515054,515055,515057,515072,515074,515084,515085,515086,902808,902830,902848,902850,902953,925001,925002,925003,925004);
		$year = 2022;
		$msg = '<div class="alert alert-success">';
		$error = 0;
		$success = 0;
		$count = 0;
		if(!empty($outlet) && !empty($year)){
			foreach($outlet as $row){
				$code = $row;
				$count++;

				$check_outlet = $this->admin->check_data('outlet_tbl', array('ifs_code' => $code, 'outlet_status_id' => 1), TRUE);
				if($check_outlet['result'] == TRUE){
					$outlet_id = $check_outlet['info']->outlet_id;
					$check_year = $this->admin->check_data('outlet_year_tbl', array('outlet_year' => $year, 'outlet_id' => $outlet_id, 'outlet_year_status' => 1), TRUE);
					if($check_year['result'] == TRUE){
						$outlet_year_id = $check_year['info']->outlet_year_id;

						$set = array('outlet_year_status' => 0);
						$where = array('outlet_year_id' => $outlet_year_id);
						$result = $this->admin->update_data('outlet_year_tbl', $set, $where);
						$success++;
					}else{
						$msg .= 'Error Outlet Year not exist. Line ' . $count;
						$msg .= '<br />';
						$error++;
					}
				}else{
					$msg .= 'Error Outlet Code not exist. Line ' . $count;
					$msg .= '<br />';
					$error++;
				}
			}
			$msg .= '<br />';
			$msg .= 'Outlet remove successful total of ' . $success . '/' . $count . '.';
			$msg .= '</div>';

			$this->session->set_flashdata('message', $msg);
			redirect('admin/outlets');
		}else{
			$msg = 'Error empty parameters.';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/outlets');
			redirect($_SERVER['HTTP_REFERER']);
		}
	
	}

	public function download_outlets($year){
		$info = $this->_require_login();

		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','6048M');

		$join_outlet = array(
			'outlet_type_tbl b' => 'a.outlet_type_id = b.outlet_type_id AND a.outlet_status_id = 1',
			'bc_tbl c' => 'a.bc_id = c.bc_id',
			'region_tbl d' => 'c.region_id=d.region_id',
			'outlet_brand_tbl f' => 'a.outlet_id = f.outlet_id AND f.outlet_brand_status = 1',
			'brand_tbl g' => 'f.brand_id = g.brand_id',
			'brand_type_tbl h' => 'g.brand_type_id = h.brand_type_id',
			'outlet_year_tbl i' => 'a.outlet_id = i.outlet_id AND i.outlet_year_status = 1 AND i.outlet_year = ' . $year
		);
		
		$outlets = $this->admin->get_join('outlet_tbl a', $join_outlet, FALSE,'a.ifs_code ASC');

		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('Outlets')
				->setSubject('List of Outlets')
				->setDescription('List of Outlets');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => \PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);


		foreach(range('A','F') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);


		$spreadsheet->getActiveSheet()->getStyle("A1:F1")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A1:F1")->applyFromArray($style_info);
		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'IFS Code')
				->setCellValue("B1", "Brand")
				->setCellValue("C1", "Region")
				->setCellValue("D1", "Business Center")
				->setCellValue("E1", "Outlet")
				->setCellValue("F1", "Outlet Type");
		// Add some data
		$x= 2;
		$count = 0;
		foreach($outlets as $row){
			$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A$x",$row->ifs_code)
					->setCellValue("B$x",$row->brand_name)
					->setCellValue("C$x",$row->region_name)
					->setCellValue("D$x",$row->bc_name)
					->setCellValue("E$x",$row->outlet_name)
					->setCellValue("F$x",$row->outlet_type_name);

			$spreadsheet->getActiveSheet()->getStyle("A$x:F$x")->applyFromArray($style_data);
			$x++;
		}
		
		// Rename worksheet
		$spreadsheet->getActiveSheet()->setTitle('List of Outlets ' . $year);

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);

		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Budgeting - List of Outlets ' . $year . '.xlsx"');
		header('Cache-Control: max-age=0');
		// If you're serving to IE 9, then the following may be needed
		header('Cache-Control: max-age=1');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function upload_outlets(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$year = clean_data($this->input->post('year'));

			if(!empty($year)){

				$this->load->library('excel');
				ini_set('max_execution_time', 0); 
				ini_set('memory_limit','6048M');
				
				$temp_code = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 10);

				$config['upload_path']   = 'assets/outlet';
		        $config['allowed_types'] = 'xls|xlsx|xlsb';
		        $config['file_name'] = 'tmp_' . $temp_code;
		        $this->load->library('upload', $config);
				
		        if (! $this->upload->do_upload('outlet_file')) {
		            $error = array('error' => $this->upload->display_errors());
		            $msg = $this->upload->display_errors();
		            $this->session->set_flashdata('message', $msg);
		            redirect($_SERVER['HTTP_REFERER']);
		        }else{
					$data = array('upload_data' => $this->upload->data());
			        $file_name = $data['upload_data']['file_name'];
					$file = 'assets/outlet/' . $file_name;	   
				   
			    	$this->db->trans_start();
			       
					$objPHPExcel = PHPExcel_IOFactory::load($file);
					//get only the Cell Collection
					$cell_collection = $objPHPExcel->getActiveSheet()->getCellCollection();
				
					$high = $objPHPExcel->getActiveSheet()->getHighestRow();
					for($a = 2; $a <= $high; $a++){
						$ifs_code = $objPHPExcel->getActiveSheet()->getCell('A' . $a)->getValue();
						$outlet_name = $objPHPExcel->getActiveSheet()->getCell('E' . $a)->getValue();
						$outlet_status = strtoupper($objPHPExcel->getActiveSheet()->getCell('F' . $a)->getValue());
							
						$check_code = $this->admin->check_data('outlet_tbl', array('ifs_code' => $ifs_code), TRUE);	
						if(!empty($ifs_code)){
							$brand = $objPHPExcel->getActiveSheet()->getCell('B' . $a)->getValue();

							$check_brand = $this->admin->check_data('brand_tbl', 'brand_code = "' . $brand . '" OR brand_name = "' . $brand . '"', TRUE);

							if($check_brand['result'] == TRUE){
								$cost_center_group_id = $check_brand['info']->cost_center_group_id;
								$bc = $objPHPExcel->getActiveSheet()->getCell('D' . $a)->getValue();
								$join_cost_center = array("cost_center_tbl b" => "a.cost_center_code = b.cost_center_code AND a.bc_name ='" . clean_data($bc) . "'");
								$check_bc = $this->admin->check_join('bc_tbl a', $join_cost_center, TRUE, FALSE, FALSE, '*, a.bc_id as bc');

								if($check_bc['result'] == TRUE){
									$bc_id = $check_bc['info']->bc;
									$parent_id = $check_bc['info']->cost_center_id;
									$brand_id = $check_brand['info']->brand_id;
									if($check_code['result'] == FALSE){
										$set = array(
											'ifs_code' => $ifs_code,
											'bc_id' => $bc_id,
											'outlet_type_id' => 1,
											'outlet_name' => strtoupper($outlet_name),
											'outlet_status_id' => 1
										);

										$insert_data = $this->admin->insert_data('outlet_tbl', $set, TRUE);
										$outlet_id = $insert_data['id'];

										$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $ifs_code));
										if($check_cost_center == FALSE){

											$set_brand = array(
												'outlet_id' => $outlet_id,
												'brand_id' => $brand_id,
												'outlet_brand_status' => 1
											);

											$this->admin->insert_data('outlet_brand_tbl', $set_brand);

											$set_cost_center = array(
												'bc_id' => $bc_id,
												'parent_id' => $parent_id,
												'cost_center_type_id' => 8,
												'user_id' => $user_id,
												'cost_center_group_id' => $cost_center_group_id,
												'cost_center_code' => $ifs_code,
												'cost_center_desc' => strtoupper($outlet_name),
												'cost_center_added' => date_now(),
												'cost_center_status' => 1
											);

											$insert_cost_center = $this->admin->insert_data('cost_center_tbl', $set_cost_center);
										}else{
											$msg = '<div class="alert alert-danger">Error cost center already exist line ' . $a . '!</div>';
											$this->session->set_flashdata('message', $msg);
											redirect($_SERVER['HTTP_REFERER']);
										}

										$check_year = $this->admin->check_data('outlet_year_tbl', array('outlet_id' => $outlet_id, 'outlet_year' => $year, 'outlet_year_status' => 1));

										if($check_year == FALSE){
											$set_year = array(
												'outlet_id' => $outlet_id,
												'outlet_year' => $year,
												'outlet_year_added' => date_now(),
												'outlet_year_status' => 1
											);

											$insert_year = $this->admin->insert_data('outlet_year_tbl', $set_year);
										}

									}else{
										$outlet_id = $check_code['info']->outlet_id;
										
										$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $ifs_code), TRUE);
										if($check_cost_center['result'] == TRUE){
											$cost_center_id = $check_cost_center['info']->cost_center_id;
											if($outlet_status == "INACTIVE"){
												$set_remove = array('outlet_status_id' => 0);
												$where_remove = array('outlet_id' => $outlet_id);
												$update_remove = $this->admin->update_data('outlet_tbl', $set_remove, $where_remove);

												$set_year = array('outlet_year_status' => 0);
												$where_year = array('outlet_id' => $outlet_id, 'outlet_year' => $year);
												$update_year = $this->admin->update_data('outlet_year_tbl', $set_year, $where_year);

												$set_remove_cost = array('cost_center_status' => 0);
												$where_remove_cost = array('cost_center_id' => $cost_center_id);

												$update_cost_center = $this->admin->update_data('cost_center_tbl', $set_remove_cost, $where_remove_cost);
											}else{

												$set_outlet = array('outlet_status_id' => 1, 'bc_id' => $bc_id);
												$where_outlet = array('outlet_id' => $outlet_id);
												$update_outlet = $this->admin->update_data('outlet_tbl', $set_outlet, $where_outlet);

												$check_year = $this->admin->check_data('outlet_year_tbl', array('outlet_id' => $outlet_id, 'outlet_year' => $year, 'outlet_year_status' => 1));

												if($check_year == FALSE){
													$set_year = array(
														'outlet_id' => $outlet_id,
														'outlet_year' => $year,
														'outlet_year_added' => date_now(),
														'outlet_year_status' => 1
													);

													$insert_year = $this->admin->insert_data('outlet_year_tbl', $set_year);
												}

												// $check_brand = $this->admin->check_data('outlet_brand_tbl', array('outlet_id' => $outlet_id, 'brand_id' => $brand_id, 'outlet_brand_status' => 1));

												// if($check_brand == FALSE){
												// 	$set_brand = array(
												// 		'outlet_id' => $outlet_id,
												// 		'brand_id' => $brand_id,
												// 		'outlet_brand_status' => 1
												// 	);
		
												// 	$this->admin->insert_data('outlet_brand_tbl', $set_brand);
												// }

												$set_remove_cost = array('cost_center_status' => 1, 'bc_id' => $bc_id, 'parent_id' => $parent_id);
												$where_remove_cost = array('cost_center_id' => $cost_center_id);

												$update_cost_center = $this->admin->update_data('cost_center_tbl', $set_remove_cost, $where_remove_cost);
											}
										}else{
											$msg = '<div class="alert alert-danger">Error Cost Center ('.$ifs_code.') does not exist in line ' . $a . '!</div>';
											$this->session->set_flashdata('message', $msg);
											redirect($_SERVER['HTTP_REFERER']);
										}
									}
								
								}else{
									$msg = '<div class="alert alert-danger">Error business center ('.$bc.') does not exist in line ' . $a . '!</div>';
									$this->session->set_flashdata('message', $msg);
									redirect($_SERVER['HTTP_REFERER']);
								}
							}else{
								$msg = '<div class="alert alert-danger">Error brand ('.$brand.') does not exist in line ' . $a . '!</div>';
								$this->session->set_flashdata('message', $msg);
								redirect($_SERVER['HTTP_REFERER']);
							}							
						}else{
							$a = $high + 1;
						}
					}

					if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success">Outlet uploaded added!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}
				}
			}else{
				$msg = '<div class="alert alert-danger">Error Year is required. Please try again</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}
		}else{
			redirect($_SERVER['HTTP_REFERER']);
		}
	}

	public function upload_commodity(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$this->load->library('excel');
		ini_set('max_execution_time', 0);
		ini_set('memory_limit','2048M');
		$date = $this->input->post('date');

		$file   = './assets/outlet/2019/Commodity/Zamboanga - 1031 Commodity.xlsx';
	   
    	$this->db->trans_start();
       
		$objPHPExcel = PHPExcel_IOFactory::load($file);
		//get only the Cell Collection
		$cell_collection = $objPHPExcel->getActiveSheet()->getCellCollection();
	
		$high = $objPHPExcel->getActiveSheet()->getHighestRow();
		for($a = 2; $a <= $high; $a++){
			$ifs_code = $objPHPExcel->getActiveSheet()->getCell('A' . $a)->getValue();
			$outlet_name = $objPHPExcel->getActiveSheet()->getCell('E' . $a)->getValue();
				
			$check_code = $this->admin->check_data('outlet_tbl', array('ifs_code' => $ifs_code), TRUE);	
			if(!empty($ifs_code)){
				if($check_code['result'] == FALSE){

					$brand = $objPHPExcel->getActiveSheet()->getCell('B' . $a)->getValue();

					$check_brand = $this->admin->check_data('brand_tbl', array('brand_code' => $brand), TRUE);

					if($check_brand['result'] == TRUE){
						$bc = $objPHPExcel->getActiveSheet()->getCell('D' . $a)->getValue();
						$join_cost_center = array("cost_center_tbl b" => "a.cost_center_code = b.cost_center_code AND a.bc_name ='" . clean_data($bc) . "'");
						$check_bc = $this->admin->check_join('bc_tbl a', $join_cost_center, TRUE, FALSE, FALSE, '*, a.bc_id as bc');

						if($check_bc['result'] == TRUE){
							
							$bc_id = $check_bc['info']->bc;
							$parent_id = $check_bc['info']->cost_center_id;
							$brand_id = $check_brand['info']->brand_id;
							$set = array(
								'ifs_code' => $ifs_code,
								'bc_id' => $bc_id,
								'outlet_type_id' => 1,
								'outlet_name' => strtoupper($outlet_name),
								'outlet_status_id' => 1
							);

							print_r($set);

							$insert_data = $this->admin->insert_data('outlet_tbl', $set, TRUE);
							$outlet_id = $insert_data['id'];
							
							//$outlet_id = 1;
							$set_brand = array(
								'outlet_id' => $outlet_id,
								'brand_id' => $brand_id,
								'outlet_brand_status' => 1
							);

							print_r($set_brand);
							$this->admin->insert_data('outlet_brand_tbl', $set_brand);

							$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $ifs_code));
							if($check_cost_center == FALSE){
								$set_cost_center = array(
									'bc_id' => $bc_id,
									'parent_id' => $parent_id,
									'cost_center_type_id' => 8,
									'user_id' => $user_id,
									'cost_center_group_id' => $brand_id,
									'cost_center_code' => $ifs_code,
									'cost_center_desc' => strtoupper($outlet_name),
									'cost_center_added' => date_now(),
									'cost_center_status' => 1
								);
								print_r($set_cost_center);
								echo '<br /><br />';
								$insert_cost_center = $this->admin->insert_data('cost_center_tbl', $set_cost_center);
							}else{
								$msg = '<div class="alert alert-danger">Error cost center already exist line ' . $a . '!</div>';
								echo $mg;
							}
						}else{
							$msg = '<div class="alert alert-danger">Error business center not exist line ' . $a . '!</div>';
							echo $msg;
						}
					}else{
						$msg = '<div class="alert alert-danger">Error brand not exist line ' . $a . '!</div>';
						echo $msg;
					}
				}else{
					
					$msg = '<div class="alert alert-danger">Error outlet already exist line ' . $a . '!</div>';
					echo $msg;
				}
			}else{
				$a = $high + 1;
			}
		}

		if($this->db->trans_status() === FALSE){
			$this->db->trans_rollback();
			$msg = '<div class="alert alert-danger">Error please try again!</div>';
			$this->session->set_flashdata('message', $msg);
			//redirect('admin/outlet');
		}else{
			$this->db->trans_commit();
			$msg = '<div class="alert alert-success">Outlet uploaded added!</div>';
			$this->session->set_flashdata('message', $msg);
			//redirect('admin/outlet');
		}
		
	}


	/*Sales Module*/

	public function sales(){
		$info = $this->_require_login();

		$data['year'] = $this->_active_year();
		$data['title'] = 'Sales';
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_status' => 1));
		$data['content'] = $this->load->view('admin/admin_sales_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function sales_info($id, $year = null){
		$info = $this->_require_login();
		$bc_id = decode($id);
		$data['id'] = $id;
		$data['title'] = 'Sales Info';

		if($year == null){
			$year = $this->_active_year();
		}

		$data['year'] = $year;

		$check_bc = $this->admin->check_data('bc_tbl', array('bc_id' => $bc_id, 'bc_status' => 1), TRUE);
		if($check_bc['result'] == TRUE){
			$bc_name = $check_bc['info']->bc_name;
			$data['bc_name'] = $bc_name;
			$join_brand = array(
				'outlet_brand_tbl b' => 'a.brand_id = b.brand_id AND b.outlet_brand_status = 1',
				'outlet_tbl c' => 'b.outlet_id = c.outlet_id AND c.outlet_status_id = 1',
				'bc_tbl d' => 'c.bc_id = d.bc_id AND d.bc_id = ' . $bc_id
			);
			$data['brand'] = $this->admin->get_join('brand_tbl a', $join_brand, FALSE, FALSE, 'a.brand_id');

			$join_budgeted_outlet = array(
				'outlet_type_tbl b' => 'a.outlet_type_id = b.outlet_type_id',
				'bc_tbl c' => 'a.bc_id = c.bc_id AND c.bc_id = ' . $bc_id,
				'region_tbl d' => 'c.region_id=d.region_id',
				'outlet_status_tbl e' => 'a.outlet_status_id=e.outlet_status_id',
				'outlet_brand_tbl f' => 'a.outlet_id = f.outlet_id AND f.outlet_brand_status = 1',
				'brand_tbl g' => 'f.brand_id = g.brand_id',
				'brand_type_tbl h' => 'g.brand_type_id = h.brand_type_id',
				'sales_tbl i' => 'a.outlet_id = i.outlet_id AND i.sales_year=' . $year . ' AND i.sales_status=1 AND i.trans_type_id = 1'
			);
			
			$data['budgeted_outlet'] = $this->admin->get_join('outlet_tbl a', $join_budgeted_outlet, FALSE,'a.ifs_code ASC');
			$join_unbudgeted_outlet = array(
				'outlet_type_tbl b' => 'a.outlet_type_id = b.outlet_type_id',
				'bc_tbl c' => 'a.bc_id = c.bc_id AND c.bc_id = ' . $bc_id,
				'region_tbl d' => 'c.region_id=d.region_id',
				'outlet_status_tbl e' => 'a.outlet_status_id=e.outlet_status_id',
				'outlet_brand_tbl f' => 'a.outlet_id = f.outlet_id AND f.outlet_brand_status = 1',
				'brand_tbl g' => 'f.brand_id = g.brand_id',
				'brand_type_tbl h' => 'g.brand_type_id = h.brand_type_id',
				'outlet_year_tbl i' => 'a.outlet_id = i.outlet_id AND i.outlet_year_status = 1 AND i.outlet_year = ' . $year
			);
			$where_budgeted = 'a.outlet_id NOT IN(SELECT outlet_id FROM sales_tbl x WHERE x.outlet_id=a.outlet_id AND x.sales_year=' . $year . ' AND x.sales_status=1 AND x.trans_type_id = 1)';

			$data['unbudgeted_outlet'] = $this->admin->get_join('outlet_tbl a', $join_unbudgeted_outlet, FALSE,'a.ifs_code ASC', FALSE, FALSE, $where_budgeted);

			$data['region'] = $this->admin->get_data('region_tbl', array('region_status' => 1));
			$data['type'] = $this->admin->get_data('brand_type_tbl', array('brand_type_status' => 1));
			$data['status'] = $this->admin->get_data('outlet_status_tbl');
			$data['content'] = $this->load->view('admin/admin_sales_info_content', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}
	}

	public function get_sales_info_unit(){
		$info = $this->_require_login();

		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','4048M');

		$bc_id = decode($this->input->post('id'));
		$year = $this->input->post('year');

 		$join = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b. sales_item_status',
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_unit_tbl e' => 'd.material_id = e.material_id AND e.material_unit_status = 1',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'bc_tbl g' => 'f.bc_id = g.bc_id AND a.sales_year = ' . $year 
		);

		$get_sales_unit = $this->admin->get_join('sales_tbl a', $join, FALSE, FALSE, 'd.material_id', 'd.material_code, d.material_desc, SUM(c.sales_det_qty), e.sales_unit_equivalent as sales_unit, SUM(c.sales_det_qty) / e.sales_unit_equivalent as total_sales_unit');

 		$sales_unit = 0;
 		$sales_unit1 = 0;
 		$sales_unit2 = 0;
 		foreach($get_sales_unit as $row_unit){
 			$sales_unit += $row_unit->total_sales_unit;
 		}

 		$check_noi1 = $this->admin->check_data('comparative_pnl_tbl', array('bc_id' => $bc_id, 'comp_pnl_year' => ($year - 1), 'comp_pnl_status' => 1), TRUE);

	    $check_noi2 = $this->admin->check_data('comparative_pnl_tbl', array('bc_id' => $bc_id, 'comp_pnl_year' => ($year - 2), 'comp_pnl_status' => 1), TRUE);

	    if($check_noi1['result'] == TRUE){
 			$sales_unit1 = $check_noi1['info']->comp_pnl_sales_volume;
 		}

 		if($check_noi2['result'] == TRUE){
 			$sales_unit2 = $check_noi2['info']->comp_pnl_sales_volume;
 		}

 		$data['sales_unit'] = $sales_unit;
 		$data['sales_unit1'] = $sales_unit1;
 		$data['sales_unit2'] = $sales_unit2;

 		echo json_encode($data);
	}

	public function get_sales_info_net_sales(){
		$info = $this->_require_login();

		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','2048M');

		$bc_id = decode($this->input->post('id'));
		$year = $this->input->post('year');

		$get_sales = $this->admin->get_query('
 			
				SELECT i.vat_type_name, h.sales_det_qty, j.material_group_name, h.sales_det_date, c.material_id, k.sales_unit_equivalent,

				(h.sales_det_asp - IFNULL((SELECT z.sales_tactical_det_price FROM sales_tactical_tbl x, sales_tactical_item_tbl y, sales_tactical_details_tbl z WHERE d.outlet_id = x.outlet_id AND x.sales_tactical_id = y.sales_tactical_id AND b.material_id = y.material_id AND y.sales_tactical_item_id = z.sales_tactical_item_id AND h.sales_det_date = z.sales_tactical_det_date AND x.sales_tactical_status = 1 AND y.sales_tactical_item_status = 1 AND z.sales_tactical_det_status = 1), 0)
					
				) as price

			FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 JOIN `material_tbl` `c` ON `b`.`material_id` = `c`.`material_id` JOIN `outlet_tbl` `d` ON `a`.`outlet_id` = `d`.`outlet_id` JOIN `outlet_brand_tbl` `e` ON `d`.`outlet_id` = `e`.`outlet_id` JOIN `brand_tbl` `f` ON `e`.`brand_id` = `f`.`brand_id` JOIN `bc_tbl` `g` ON `d`.`bc_id` = `g`.`bc_id` JOIN `sales_details_tbl` `h` ON `b`.`sales_item_id` = `h`.`sales_item_id` JOIN vat_type_tbl i ON c.vat_type_id = i.vat_type_id JOIN material_group_tbl j ON c.material_group_id = j.material_group_id AND g.bc_id = ' . $bc_id . ' AND a.sales_year = ' . $year . ' JOIN material_unit_tbl k ON c.material_id = k.material_id AND k.material_unit_status = 1 WHERE e.outlet_brand_status = 1
		');


		$net_sales = 0;
		$net_sales1 = 0;
		$net_sales2 = 0;

		$sales_unit = 0;
		$sales_unit1 = 0;
		$sales_unit2 = 0;

		$weight_arr = array();
		foreach($get_sales as $row){

			$sales_det_qty = $row->sales_det_qty;
			$material_group_name = $row->material_group_name;
			$sales_date = $row->sales_det_date;
			$material_id = $row->material_id;
			$unit = $row->sales_unit_equivalent;

			$sales_unit += $unit > 0 ? $sales_det_qty / $unit : 0;

			$sales_weight = 1;
			if($material_group_name == 'DRESSED'){

				if(!array_key_exists($material_id . $sales_date, $weight_arr)){

					$get_dressed_wt = $this->admin->get_query(
						'SELECT g1.ext_prod_trans_dtl_id, g1.ave_wgt FROM prod_trans_tbl a1, prod_trans_dtl_tbl b1, component_type_tbl c1, material_tbl d1, ext_prod_trans_tbl f1, ext_prod_trans_dtl_tbl g1

						WHERE a1.prod_trans_id = b1.prod_trans_id AND b1.component_type_id = c1.component_type_id AND a1.prod_id = ' . $material_id . ' AND b1.article_id = d1.material_id AND b1.article_type_id = 1 AND a1.prod_trans_status = 3 AND a1.bc_id = ' . $bc_id . ' AND b1.prod_trans_dtl_date = "' . $sales_date . '" AND a1.process_type_id = 5 AND c1.component_type = "COST OF SALES" AND f1.bc_id = a1.bc_id AND f1.ext_prod_trans_id = g1.ext_prod_trans_id AND b1.prod_trans_dtl_date = g1.trans_dtl_date AND d1.material_id = f1.material_id AND f1.ext_prod_trans_status = 1 AND g1.ext_prod_trans_dtl_status = 1
					', TRUE);
					
					if(!empty($get_dressed_wt)){
						$sales_weight = $get_dressed_wt->ave_wgt;
						if($sales_weight > 0){
							$sales_det_qty = $sales_det_qty * $sales_weight;
						}else{
							$sales_weight = 1;
						}
					}

					$weight_arr[$material_id . $sales_date] = $sales_weight;
				}else{
					$sales_weight = $weight_arr[$material_id . $sales_date];
					if($sales_weight > 0){
						$sales_det_qty = $sales_det_qty * $sales_weight;
					}else{
						$sales_weight = 1;
					}
				}
			}

	

			$gross_sales = $sales_det_qty * $row->price;

			$vat_total = 0;
			if($row->vat_type_name == 'VAT ITEM'){
				$vat_total = $gross_sales / 1.12 * 0.12;
			}

			$net_sales += $gross_sales - $vat_total;
		}

 		$check_net_sales1 = $this->admin->check_data('comparative_pnl_tbl', array('bc_id' => $bc_id, 'comp_pnl_year' => ($year - 1), 'comp_pnl_status' => 1), TRUE);

	    $check_net_sales2 = $this->admin->check_data('comparative_pnl_tbl', array('bc_id' => $bc_id, 'comp_pnl_year' => ($year - 2), 'comp_pnl_status' => 1), TRUE);

	    if($check_net_sales1['result'] == TRUE){
 			$net_sales1 = $check_net_sales1['info']->comp_pnl_net_sales;
 			$sales_unit1 = $check_net_sales1['info']->comp_pnl_sales_volume;
 		}

 		if($check_net_sales2['result'] == TRUE){
 			$net_sales2 = $check_net_sales2['info']->comp_pnl_net_sales;
 			$sales_unit2 = $check_net_sales2['info']->comp_pnl_sales_volume;
 		}

 		$data['net_sales'] = $net_sales;
 		$data['net_sales1'] = $net_sales1;
 		$data['net_sales2'] = $net_sales2;

 		$data['sales_unit'] = $sales_unit;
 		$data['sales_unit1'] = $sales_unit1;
 		$data['sales_unit2'] = $sales_unit2;

 		/*Sale Volume*/
 		$get_sales_volume = $this->_get_sales_info_volume($bc_id, $year);
 		$volume_tbl = $this->_get_sales_info_volume_tbl($get_sales_volume);
 		$data['volume_tbl'] = $volume_tbl;

 		echo json_encode($data);
	}

	public function _get_sales_info_volume($bc_id, $year){


		$join_live = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVE SALES\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id
		);

		$get_live = $this->admin->get_join('sales_tbl a', $join_live, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as live_sales_unit, 

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "LIVE SALES" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as live_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "LIVE SALES" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as live_sales_unit2
		');

		$data['live'] = $get_live->live_sales_unit;
		$data['live1'] = $get_live->live_sales_unit1;
		$data['live2'] = $get_live->live_sales_unit2;

		$join_dressed_others = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id AND i.brand_name = \'TRADE DISTRIBUTOR\''
		);

		$get_dressed_others = $this->admin->get_join('sales_tbl a', $join_dressed_others, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_distributor_sales_unit
		');
		$data['dressed_distributor'] = $get_dressed_others->dressed_distributor_sales_unit;

		$get_dressed_others1 = $this->admin->check_query('SELECT SUM(x.sales_unit) as dressed_distributor_sales_unit1 FROM comparative_volume_tbl x WHERE x.sales_status = 1 AND x.sales_vol = "DRESSED - DISTRIBUTOR" AND YEAR(x.trans_year) = ' . ($year - 1) . ' AND x.bc_id = ' . $bc_id, TRUE);

		$data['dressed_distributor1'] = 0;
		if($get_dressed_others1['result'] == TRUE){
			$data['dressed_distributor1'] = $get_dressed_others1['info']->dressed_distributor_sales_unit1;
		}

		$get_dressed_others2 = $this->admin->check_query('SELECT SUM(x.sales_unit) as dressed_distributor_sales_unit2 FROM comparative_volume_tbl x WHERE x.sales_status = 1 AND x.sales_vol = "DRESSED - DISTRIBUTOR" AND YEAR(x.trans_year) = ' . ($year - 2) . ' AND x.bc_id = ' . $bc_id, TRUE);

		$data['dressed_distributor2'] = 0;
		if($get_dressed_others2['result'] == TRUE){
			$data['dressed_distributor2'] = $get_dressed_others2['info']->dressed_distributor_sales_unit2;
		}

		
		/*Dressed Dealer*/

		$join_dressed_dealer = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id AND i.brand_name = \'DEALER\''
		);

		$get_dressed_dealer = $this->admin->get_join('sales_tbl a', $join_dressed_dealer, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_dealer_sales_unit

		');
		$data['dressed_dealer'] = $get_dressed_dealer->dressed_dealer_sales_unit;


		$get_dressed_dealer1 = $this->admin->check_query('SELECT SUM(x.sales_unit) as dressed_dealer_sales_unit1 FROM comparative_volume_tbl x WHERE x.sales_status = 1 AND x.sales_vol = "DRESSED - DEALER" AND YEAR(x.trans_year) = ' . ($year - 1) . ' AND x.bc_id = ' . $bc_id, TRUE);

		$data['dressed_dealer1'] = 0;
		if($get_dressed_dealer1['result'] == TRUE){
			$data['dressed_dealer1'] = $get_dressed_dealer1['info']->dressed_dealer_sales_unit1;	
		}


		$get_dressed_dealer2 = $this->admin->check_query('SELECT SUM(x.sales_unit) as dressed_dealer_sales_unit2 FROM comparative_volume_tbl x WHERE x.sales_status = 1 AND x.sales_vol = "DRESSED - DEALER" AND YEAR(x.trans_year) = ' . ($year - 2) . ' AND x.bc_id = ' . $bc_id, TRUE);	
			
		$data['dressed_dealer2'] = 0;
		if($get_dressed_dealer2['result'] == TRUE){
			$data['dressed_dealer2'] = $get_dressed_dealer2['info']->dressed_dealer_sales_unit2;	
		}

		


		/*Dressed HRI*/

		$join_dressed_hri = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id AND i.brand_name = \'HRI\''
		);

		$get_dressed_hri = $this->admin->get_join('sales_tbl a', $join_dressed_hri, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_hri_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - HRI" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as dressed_hri_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - HRI" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as dressed_hri_sales_unit2

		');
		$data['dressed_hri'] = $get_dressed_hri->dressed_hri_sales_unit;
		$data['dressed_hri1'] = $get_dressed_hri->dressed_hri_sales_unit1;
		$data['dressed_hri2'] = $get_dressed_hri->dressed_hri_sales_unit2;

		$join_dressed_sup = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id AND i.brand_name = \'SUPERMARKET\''
		);

		$get_dressed_sup = $this->admin->get_join('sales_tbl a', $join_dressed_sup, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_sup_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - SUPERMARKET" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as dressed_sup_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - SUPERMARKET" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as dressed_sup_sales_unit2
		');
		$data['dressed_sup'] = $get_dressed_sup->dressed_sup_sales_unit;
		$data['dressed_sup1'] = $get_dressed_sup->dressed_sup_sales_unit1;
		$data['dressed_sup2'] = $get_dressed_sup->dressed_sup_sales_unit2;


		$join_dressed_retail = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_dressed_retail = $this->admin->get_join('sales_tbl a', $join_dressed_retail, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_retail_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as dressed_retail_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as dressed_retail_sales_unit2
		');
		$data['dressed_retail'] = $get_dressed_retail->dressed_retail_sales_unit;
		$data['dressed_retail1'] = $get_dressed_retail->dressed_retail_sales_unit1;
		$data['dressed_retail2'] = $get_dressed_retail->dressed_retail_sales_unit2;

		$join_dressed_vansales = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND i.brand_name = \'VAN SALES\''
		);

		$get_dressed_vansales = $this->admin->get_join('sales_tbl a', $join_dressed_vansales, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_vansales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - VANSALES" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as dressed_vansales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - VANSALES" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as dressed_vansales_unit2
		');

		$data['dressed_vansales'] = $get_dressed_vansales->dressed_vansales_unit;
		$data['dressed_vansales1'] = $get_dressed_vansales->dressed_vansales_unit1;
		$data['dressed_vansales2'] = $get_dressed_vansales->dressed_vansales_unit2;

		$join_non_marinated = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'NON MARINATED CUT UPS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id'
			/*'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''*/
		);

		$get_non_marinated = $this->admin->get_join('sales_tbl a', $join_non_marinated, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as non_marinated_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "NON MARINATED CUT UPS" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as non_marinated_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "NON MARINATED CUT UPS" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as non_marinated_sales_unit2

			');
		$data['non_marinated'] = $get_non_marinated->non_marinated_sales_unit;
		$data['non_marinated1'] = $get_non_marinated->non_marinated_sales_unit1;
		$data['non_marinated2'] = $get_non_marinated->non_marinated_sales_unit2;

		$join_marinated = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code NOT IN ("1000090", "10200090", "1000401", "1000402")',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id'
			/*'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''*/
		);

		$get_marinated = $this->admin->get_join('sales_tbl a', $join_marinated, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as marinated_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "MARINATED CUT UPS" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as marinated_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "MARINATED CUT UPS" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as marinated_sales_unit2


			');
		$data['marinated'] = $get_marinated->marinated_sales_unit;
		$data['marinated1'] = $get_marinated->marinated_sales_unit1;
		$data['marinated2'] = $get_marinated->marinated_sales_unit2;

		$join_spicy_neck = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = "10200090"',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_spicy_neck = $this->admin->get_join('sales_tbl a', $join_spicy_neck, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as spicy_neck_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "SPICY NECK" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as spicy_neck_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "SPICY NECK" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as spicy_neck_sales_unit2
		');
		$data['spicy_neck'] = $get_spicy_neck->spicy_neck_sales_unit;
		$data['spicy_neck1'] = $get_spicy_neck->spicy_neck_sales_unit1;
		$data['spicy_neck2'] = $get_spicy_neck->spicy_neck_sales_unit2;

		$join_roasted_cutups = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'ROASTED CUT UPS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_roasted_cutups = $this->admin->get_join('sales_tbl a', $join_roasted_cutups, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as roasted_cutups_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "ROASTED CUT UPS" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as roasted_cutups_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "ROASTED CUT UPS" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as roasted_cutups_sales_unit2

			');
		$data['roasted_cutups'] = $get_roasted_cutups->roasted_cutups_sales_unit;
		$data['roasted_cutups1'] = $get_roasted_cutups->roasted_cutups_sales_unit1;
		$data['roasted_cutups2'] = $get_roasted_cutups->roasted_cutups_sales_unit2;

		$join_roasted_chicken = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'ROASTED CHICKEN\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_roasted_chicken = $this->admin->get_join('sales_tbl a', $join_roasted_chicken, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as roasted_chicken_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "ROASTED CHICKEN" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as roasted_chicken_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "ROASTED CHICKEN" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as roasted_chicken_sales_unit2
		');
		$data['roasted_chicken'] = $get_roasted_chicken->roasted_chicken_sales_unit;
		$data['roasted_chicken1'] = $get_roasted_chicken->roasted_chicken_sales_unit1;
		$data['roasted_chicken2'] = $get_roasted_chicken->roasted_chicken_sales_unit2;

		$join_marinated_chicken_raw = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CHICKEN (RAW)\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id'
			/*'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''*/
		);

		$get_marinated_chicken_raw = $this->admin->get_join('sales_tbl a', $join_marinated_chicken_raw, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as marinated_chicken_raw_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "MARINATED CHICKEN (RAW)" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as marinated_chicken_raw_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "MARINATED CHICKEN (RAW)" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as marinated_chicken_raw_sales_unit2

		');

		$data['marinated_chicken_raw'] = $get_marinated_chicken_raw->marinated_chicken_raw_sales_unit;


		$get_marinated_chicken_raw1 = $this->admin->check_query('SELECT SUM(x.sales_unit) as marinated_chicken_raw_sales_unit1 FROM comparative_volume_tbl x WHERE x.sales_status = 1 AND x.sales_vol = "MARINATED CHICKEN (RAW)" AND YEAR(x.trans_year) = ' . ($year - 1) . ' AND x.bc_id = ' . $bc_id, TRUE);

		$data['marinated_chicken_raw1'] = 0;
		if($get_marinated_chicken_raw1['result'] == TRUE){
			$data['marinated_chicken_raw1'] = $get_marinated_chicken_raw1['info']->marinated_chicken_raw_sales_unit1;	
		}

		$get_marinated_chicken_raw2 = $this->admin->check_query('SELECT SUM(x.sales_unit) as marinated_chicken_raw_sales_unit2 FROM comparative_volume_tbl x WHERE x.sales_status = 1 AND x.sales_vol = "MARINATED CHICKEN (RAW)" AND YEAR(x.trans_year) = ' . ($year - 2) . ' AND x.bc_id = ' . $bc_id, TRUE);

		$data['marinated_chicken_raw2'] = 0;
		if($get_marinated_chicken_raw2['result'] == TRUE){
			$data['marinated_chicken_raw2'] = $get_marinated_chicken_raw2['info']->marinated_chicken_raw_sales_unit2;	
		}

		

		$join_other = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER SPECIALTY PRODUCTS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_other = $this->admin->get_join('sales_tbl a', $join_other, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as other_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "OTHER SPECIALTY PRODUCTS" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as other_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "OTHER SPECIALTY PRODUCTS" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as other_sales_unit2
		');
		$data['others'] = $get_other->other_sales_unit;
		$data['others1'] = $get_other->other_sales_unit1;
		$data['others2'] = $get_other->other_sales_unit2;

		$join_liempo = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIEMPO\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_liempo = $this->admin->get_join('sales_tbl a', $join_liempo, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as liempo_sales_unit
		');

		$data['liempo'] = $get_liempo->liempo_sales_unit;

		$get_liempo1 = $this->admin->check_query('SELECT SUM(x.sales_unit) as liempo_sales_unit1 FROM comparative_volume_tbl x WHERE x.sales_status = 1 AND x.sales_vol = "LIEMPO" AND YEAR(x.trans_year) = ' . ($year - 1) . ' AND x.bc_id = ' . $bc_id, TRUE);

		$data['liempo1'] = 0;
		if($get_liempo1['result'] == 1){
			$data['liempo1'] = $get_liempo1['info']->liempo_sales_unit1;
		}

		$get_liempo2 = $this->admin->check_query('SELECT SUM(x.sales_unit) as liempo_sales_unit2 FROM comparative_volume_tbl x WHERE x.sales_status = 1 AND x.sales_vol = "LIEMPO" AND YEAR(x.trans_year) = ' . ($year - 2) . ' AND x.bc_id = ' . $bc_id, TRUE);

		$data['liempo2'] = 0;
		if($get_liempo2['result'] == 1){
			$data['liempo2'] = $get_liempo2['info']->liempo_sales_unit2;
		}
		

		$join_vap = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER VAP PRODUCTS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_vap = $this->admin->get_join('sales_tbl a', $join_vap, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as vap_sales_unit	

		');

		$data['vap'] = $get_vap->vap_sales_unit;

		$get_vap1 = $this->admin->check_query('SELECT SUM(x.sales_unit) as vap_sales_unit1 FROM comparative_volume_tbl x WHERE x.sales_status = 1 AND x.sales_vol = "VAP" AND YEAR(x.trans_year) = ' . ($year - 1) . ' AND x.bc_id = ' . $bc_id, TRUE);

		$data['vap1'] = 0;
		if($get_vap1['result'] == TRUE){
			$data['vap1'] = $get_vap1['info']->vap_sales_unit1;	
		}

		$get_vap2 = $this->admin->check_query('SELECT SUM(x.sales_unit) as vap_sales_unit2 FROM comparative_volume_tbl x WHERE x.sales_status = 1 AND x.sales_vol = "VAP" AND YEAR(x.trans_year) = ' . ($year - 2) . ' AND x.bc_id = ' . $bc_id, TRUE);
		
		$data['vap2'] = 0;
		if($get_vap2['result'] == TRUE){
			$data['vap2'] = $get_vap2['info']->vap_sales_unit2;	
		}

		$get_transfer = $this->admin->check_data('volume_others_tbl', array('bc_id' => $bc_id, 'volume_others_year' => $year, 'volume_others_status' => 1), TRUE);
		$data['transfer'] = 0;
		$data['transfer1'] = 0;
		$data['transfer2'] = 0;
		if($get_transfer['result'] == TRUE){
			$data['transfer'] = $get_transfer['info']->volume_others_unit;
		}
	}

	public function _get_sales_info_volume_tbl($volume){
		$info = $this->_require_login();

		$live = $volume['live'];
		$live1 = $volume['live1'];
		$live2 = $volume['live2'];
		$live_dif1 = $live - $live1;
		$live_dif2 = $live - $live2;
		$live_per1 = $live1 > 0 ? ($live_dif1 / $live1) * 100 : 0;
		$live_per2 = $live2 > 0 ? ($live_dif2 / $live2) * 100 : 0;

		$dressed_distributor = $volume['dressed_distributor'];
		$dressed_distributor1 = $volume['dressed_distributor1'];
		$dressed_distributor2 = $volume['dressed_distributor2'];
		$dressed_distributor_dif1 = $dressed_distributor - $dressed_distributor1;
		$dressed_distributor_dif2 = $dressed_distributor - $dressed_distributor2;
		$dressed_distributor_per1 = $dressed_distributor1 > 0 ? ($dressed_distributor_dif1 / $dressed_distributor1) * 100 : 0;
		$dressed_distributor_per2 = $dressed_distributor2 > 0 ? ($dressed_distributor_dif2 / $dressed_distributor2) * 100 : 0;

		$dressed_dealer = $volume['dressed_dealer'];
		$dressed_dealer1 = $volume['dressed_dealer1'];
		$dressed_dealer2 = $volume['dressed_dealer2'];
		$dressed_dealer_dif1 = $dressed_dealer - $dressed_dealer1;
		$dressed_dealer_dif2 = $dressed_dealer - $dressed_dealer2;
		$dressed_dealer_per1 = $dressed_dealer1 > 0 ? ($dressed_dealer_dif1 / $dressed_dealer1) * 100 : 0;
		$dressed_dealer_per2 = $dressed_dealer2 > 0 ? ($dressed_dealer_dif2 / $dressed_dealer2) * 100 : 0;

		$dressed_hri = $volume['dressed_hri'];
		$dressed_hri1 = $volume['dressed_hri1'];
		$dressed_hri2 = $volume['dressed_hri2'];
		$dressed_hri_dif1 = $dressed_hri - $dressed_hri1;
		$dressed_hri_dif2 = $dressed_hri - $dressed_hri2;
		$dressed_hri_per1 = $dressed_hri1 > 0 ? ($dressed_hri_dif1 / $dressed_hri1) * 100 : 0;
		$dressed_hri_per2 = $dressed_hri2 > 0 ? ($dressed_hri_dif2 / $dressed_hri2) * 100 : 0;


		$dressed_sup = $volume['dressed_sup'];
		$dressed_sup1 = $volume['dressed_sup1'];
		$dressed_sup2 = $volume['dressed_sup2'];
		$dressed_sup_dif1 = $dressed_sup - $dressed_sup1;
		$dressed_sup_dif2 = $dressed_sup - $dressed_sup2;
		$dressed_sup_per1 = $dressed_sup1 > 0 ? ($dressed_sup_dif1 / $dressed_sup1) * 100 : 0;
		$dressed_sup_per2 = $dressed_sup2 > 0 ? ($dressed_sup_dif2 / $dressed_sup2) * 100 : 0;

		$dressed_vansales = $volume['dressed_vansales'];
		$dressed_vansales1 = $volume['dressed_vansales1'];
		$dressed_vansales2 = $volume['dressed_vansales2'];
		$dressed_vansales_dif1 = $dressed_vansales - $dressed_vansales1;
		$dressed_vansales_dif2 = $dressed_vansales - $dressed_vansales2;
		$dressed_vansales_per1 = $dressed_vansales1 > 0 ? ($dressed_vansales_dif1 / $dressed_vansales1) * 100 : 0;
		$dressed_vansales_per2 = $dressed_vansales2 > 0 ? ($dressed_vansales_dif2 / $dressed_vansales2) * 100 : 0;


		$dressed_retail = $volume['dressed_retail'];
		$dressed_retail1 = $volume['dressed_retail1'];
		$dressed_retail2 = $volume['dressed_retail2'];
		$dressed_retail_dif1 = $dressed_retail - $dressed_retail1;
		$dressed_retail_dif2 = $dressed_retail - $dressed_retail2;
		$dressed_retail_per1 = $dressed_retail1 > 0 ? ($dressed_retail_dif1 / $dressed_retail1) * 100 : 0;
		$dressed_retail_per2 = $dressed_retail2 > 0 ? ($dressed_retail_dif2 / $dressed_retail2) * 100 : 0;
		

		$non_marinated = $volume['non_marinated'];
		$non_marinated1 = $volume['non_marinated1'];
		$non_marinated2 = $volume['non_marinated2'];
		$non_marinated_dif1 = $non_marinated - $non_marinated1;
		$non_marinated_dif2 = $non_marinated - $non_marinated2;
		$non_marinated_per1 = $non_marinated1 > 0 ? ($non_marinated_dif1 / $non_marinated1) * 100 : 0;
		$non_marinated_per2 = $non_marinated2 > 0 ? ($non_marinated_dif2 / $non_marinated2) * 100 : 0;


		$marinated = $volume['marinated'];
		$marinated1 = $volume['marinated1'];
		$marinated2 = $volume['marinated2'];
		$marinated_dif1 = $marinated - $marinated1;
		$marinated_dif2 = $marinated - $marinated2;
		$marinated_per1 = $marinated1 > 0 ? ($marinated_dif1 / $marinated1) * 100 : 0;
		$marinated_per2 = $marinated2 > 0 ? ($marinated_dif2 / $marinated2) * 100 : 0;


		$spicy_neck = $volume['spicy_neck'];
		$spicy_neck1 = $volume['spicy_neck1'];
		$spicy_neck2 = $volume['spicy_neck2'];
		$spicy_neck_dif1 = $spicy_neck - $spicy_neck1;
		$spicy_neck_dif2 = $spicy_neck - $spicy_neck2;
		$spicy_neck_per1 = $spicy_neck1 > 0 ? ($spicy_neck_dif1 / $spicy_neck1) * 100 : 0;
		$spicy_neck_per2 = $spicy_neck2 > 0 ? ($spicy_neck_dif2 / $spicy_neck2) * 100 : 0;


		$roasted_cutups = $volume['roasted_cutups'];
		$roasted_cutups1 = $volume['roasted_cutups1'];
		$roasted_cutups2 = $volume['roasted_cutups2'];
		$roasted_cutups_dif1 = $roasted_cutups - $roasted_cutups1;
		$roasted_cutups_dif2 = $roasted_cutups - $roasted_cutups2;
		$roasted_cutups_per1 = $roasted_cutups1 > 0 ? ($roasted_cutups_dif1 / $roasted_cutups1) * 100 : 0;
		$roasted_cutups_per2 = $roasted_cutups2 > 0 ? ($roasted_cutups_dif2 / $roasted_cutups2) * 100 : 0;


		$roasted_chicken = $volume['roasted_chicken'];
		$roasted_chicken1 = $volume['roasted_chicken1'];
		$roasted_chicken2 = $volume['roasted_chicken2'];
		$roasted_chicken_dif1 = $roasted_chicken - $roasted_chicken1;
		$roasted_chicken_dif2 = $roasted_chicken - $roasted_chicken2;
		$roasted_chicken_per1 = $roasted_chicken1 > 0 ? ($roasted_chicken_dif1 / $roasted_chicken1) * 100 : 0;
		$roasted_chicken_per2 = $roasted_chicken2 > 0 ? ($roasted_chicken_dif2 / $roasted_chicken2) * 100 : 0;

		
		$marinated_chicken_raw = $volume['marinated_chicken_raw'];
		$marinated_chicken_raw1 = $volume['marinated_chicken_raw1'];
		$marinated_chicken_raw2 = $volume['marinated_chicken_raw2'];
		$marinated_chicken_raw_dif1 = $marinated_chicken_raw - $marinated_chicken_raw1;
		$marinated_chicken_raw_dif2 = $marinated_chicken_raw - $marinated_chicken_raw2;
		$marinated_chicken_raw_per1 = $marinated_chicken_raw1 > 0 ? ($marinated_chicken_raw_dif1 / $marinated_chicken_raw1) * 100 : 0;
		$marinated_chicken_raw_per2 = $marinated_chicken_raw2 > 0 ? ($marinated_chicken_raw_dif2 / $marinated_chicken_raw2) * 100 : 0;

		
		$others = $volume['others'];
		$others1 = $volume['others1'];
		$others2 = $volume['others2'];
		$others_dif1 = $others - $others1;
		$others_dif2 = $others - $others2;
		$others_per1 = $others1 > 0 ? ($others_dif1 / $others1) * 100 : 0;
		$others_per2 = $others2 > 0 ? ($others_dif2 / $others2) * 100 : 0;


		$sub_total = $live + $dressed_distributor + $dressed_dealer + $dressed_hri + $dressed_sup + $dressed_retail + $dressed_vansales + $non_marinated + $marinated + $spicy_neck + $roasted_cutups + $roasted_chicken + $marinated_chicken_raw + $others;

		$liempo = $volume['liempo'];
		$liempo1 = $volume['liempo1'];
		$liempo2 = $volume['liempo2'];
		$liempo_dif1 = $liempo - $liempo1;
		$liempo_dif2 = $liempo - $liempo2;
		$liempo_per1 = $liempo1 > 0 ? ($liempo_dif1 / $liempo1) * 100 : 0;
		$liempo_per2 = $liempo2 > 0 ? ($liempo_dif2 / $liempo2) * 100 : 0;


		$vap = $volume['vap'];
		$vap1 = $volume['vap1'];
		$vap2 = $volume['vap2'];
		$vap_dif1 = $vap - $vap1;
		$vap_dif2 = $vap - $vap2;
		$vap_per1 = $vap1 > 0 ? ($vap_dif1 / $vap1) * 100 : 0;
		$vap_per2 = $vap2 > 0 ? ($vap_dif2 / $vap2) * 100 : 0;

		$transfer = $volume['transfer'];
		$transfer1 = $volume['transfer1'];
		$transfer2 = $volume['transfer2'];
		$transfer_dif1 = $transfer - $transfer1;
		$transfer_dif2 = $transfer - $transfer2;
		$transfer_per1 = $transfer1 > 0 ? ($transfer_dif1 / $transfer1) * 100 : 0;
		$transfer_per2 = $transfer2 > 0 ? ($transfer_dif2 / $transfer2) * 100 : 0;



		$total = $live + $dressed_distributor + $dressed_dealer + $dressed_hri + $dressed_sup + $dressed_retail + $dressed_vansales + $non_marinated + $marinated + $spicy_neck + $roasted_cutups + $roasted_chicken + $marinated_chicken_raw + $others + $liempo + $vap + $transfer;

		$total1 = $live1 + $dressed_distributor1 + $dressed_dealer1 + $dressed_hri1 + $dressed_sup1 + $dressed_retail1 + $dressed_vansales1 + $non_marinated1 + $marinated1 + $spicy_neck1 + $roasted_cutups1 + $roasted_chicken1 + $marinated_chicken_raw1 + $others1 + $liempo1 + $vap1 + $transfer1;

		$total2 = $live2 + $dressed_distributor2 + $dressed_dealer2 + $dressed_hri2 + $dressed_sup2 + $dressed_retail2 + $dressed_vansales2 + $non_marinated2 + $marinated2 + $spicy_neck2 + $roasted_cutups2 + $roasted_chicken2 + $marinated_chicken_raw2 + $others2 + $liempo2 + $vap2 + $transfer2;

		$variance1 = $total - $total1;
		$variance2 = $total - $total2;
		$percent1 = $total1 > 0 ? ($variance1 / $total1) * 100 : 0;
		$percent2 = $total2 > 0 ? ($variance2 / $total2) * 100 : 0;

		$total_heads = $live + $dressed_distributor + $dressed_dealer + $dressed_hri + $dressed_sup + $dressed_retail + $dressed_vansales + $non_marinated + $marinated + $roasted_cutups + $roasted_chicken + $marinated_chicken_raw + $others;


		$volume_tbl = '


	        <tr>
	            <td class="text-left">DRESSED</td>
	            <td class="text-right">' . number_format($dressed_retail) . '</td>
	            <td class="text-right">' . number_format($dressed_retail1) . '</td>
	            <td class="text-right">' . number_format($dressed_retail2) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_retail_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_per2) . '%</td>

	            <td class="text-right">' . number_format($dressed_retail) . '</td>
	            <td class="text-right">' . number_format($dressed_retail1) . '</td>
	            <td class="text-right">' . number_format($dressed_retail2) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_retail_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">NON MARINATED CUT UPS</td>
	            <td class="text-right">' . number_format($non_marinated) . '</td>
	            <td class="text-right">' . number_format($non_marinated1) . '</td>
	            <td class="text-right">' . number_format($non_marinated2) . '</td>
	            <td class="text-right">' . number_format($non_marinated_dif1) . '</td>
	            <td class="text-right">' . number_format($non_marinated_per1) . '%</td>
	            <td class="text-right">' . number_format($non_marinated_dif2) . '</td>
	            <td class="text-right">' . number_format($non_marinated_per2) . '%</td>

	            <td class="text-right">' . number_format($non_marinated) . '</td>
	            <td class="text-right">' . number_format($non_marinated1) . '</td>
	            <td class="text-right">' . number_format($non_marinated2) . '</td>
	            <td class="text-right">' . number_format($non_marinated_dif1) . '</td>
	            <td class="text-right">' . number_format($non_marinated_per1) . '%</td>
	            <td class="text-right">' . number_format($non_marinated_dif2) . '</td>
	            <td class="text-right">' . number_format($non_marinated_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">MARINATED CUT UPS</td>
	            <td class="text-right">' . number_format($marinated) . '</td>
	            <td class="text-right">' . number_format($marinated1) . '</td>
	            <td class="text-right">' . number_format($marinated2) . '</td>
	            <td class="text-right">' . number_format($marinated_dif1) . '</td>
	            <td class="text-right">' . number_format($marinated_per1) . '%</td>
	            <td class="text-right">' . number_format($marinated_dif2) . '</td>
	            <td class="text-right">' . number_format($marinated_per2) . '%</td>

	            <td class="text-right">' . number_format($marinated) . '</td>
	            <td class="text-right">' . number_format($marinated1) . '</td>
	            <td class="text-right">' . number_format($marinated2) . '</td>
	            <td class="text-right">' . number_format($marinated_dif1) . '</td>
	            <td class="text-right">' . number_format($marinated_per1) . '%</td>
	            <td class="text-right">' . number_format($marinated_dif2) . '</td>
	            <td class="text-right">' . number_format($marinated_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">SPICY NECK</td>
	            <td class="text-right">' . number_format($spicy_neck) . '</td>
	            <td class="text-right">' . number_format($spicy_neck1) . '</td>
	            <td class="text-right">' . number_format($spicy_neck2) . '</td>
	            <td class="text-right">' . number_format($spicy_neck_dif1) . '</td>
	            <td class="text-right">' . number_format($spicy_neck_per1) . '%</td>
	            <td class="text-right">' . number_format($spicy_neck_dif2) . '</td>
	            <td class="text-right">' . number_format($spicy_neck_per2) . '%</td>

	            <td class="text-right"></td>
	            <td class="text-right"></td>
	            <td class="text-right"></td>
	            <td class="text-right"></td>
	            <td class="text-right"></td>
	            <td class="text-right"></td>
	            <td class="text-right"></td>
	        </tr>

	        <tr>
	            <td class="text-left">ROASTED CUT UPS</td>
	            <td class="text-right">' . number_format($roasted_cutups) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups1) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups2) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_dif1) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_per1) . '%</td>
	            <td class="text-right">' . number_format($roasted_cutups_dif2) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_per2) . '%</td>

	            <td class="text-right">' . number_format($roasted_cutups) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups1) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups2) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_dif1) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_per1) . '%</td>
	            <td class="text-right">' . number_format($roasted_cutups_dif2) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">ROASTED CHICKEN</td>
	            <td class="text-right">' . number_format($roasted_chicken) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken1) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken2) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_dif1) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_per1) . '%</td>
	            <td class="text-right">' . number_format($roasted_chicken_dif2) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_per2) . '%</td>

	            <td class="text-right">' . number_format($roasted_chicken) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken1) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken2) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_dif1) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_per1) . '%</td>
	            <td class="text-right">' . number_format($roasted_chicken_dif2) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">MARINATED CHICKEN (RAW)</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw1) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw2) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_dif1) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_per1) . '%</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_dif2) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_per2) . '%</td>

	            <td class="text-right">' . number_format($marinated_chicken_raw) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw1) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw2) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_dif1) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_per1) . '%</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_dif2) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">OTHER SPECIALTY PRODUCTS</td>
	            <td class="text-right">' . number_format($others) . '</td>
	            <td class="text-right">' . number_format($others1) . '</td>
	            <td class="text-right">' . number_format($others2) . '</td>
	            <td class="text-right">' . number_format($others_dif1) . '</td>
	            <td class="text-right">' . number_format($others_per1) . '%</td>
	            <td class="text-right">' . number_format($others_dif2) . '</td>
	            <td class="text-right">' . number_format($others_per2) . '%</td>

	            <td class="text-right">' . number_format($others) . '</td>
	            <td class="text-right">' . number_format($others1) . '</td>
	            <td class="text-right">' . number_format($others2) . '</td>
	            <td class="text-right">' . number_format($others_dif1) . '</td>
	            <td class="text-right">' . number_format($others_per1) . '%</td>
	            <td class="text-right">' . number_format($others_dif2) . '</td>
	            <td class="text-right">' . number_format($others_per2) . '%</td>
	        </tr>

	        <tr>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	        </tr>

	        <tr style="border-top: 2px solid black; border-bottom: 2px solid black">
	            <td class="text-left"><strong>Sub Total</strong></td>
	            <td class="text-right">' . number_format($sub_total) . '</td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	        </tr>

	        <tr>
	            <td class="text-left">LIEMPO</td>
	            <td class="text-right">' . number_format($liempo) . '</td>
	            <td class="text-right">' . number_format($liempo1) . '</td>
	            <td class="text-right">' . number_format($liempo2) . '</td>
	            <td class="text-right">' . number_format($liempo_dif1) . '</td>
	            <td class="text-right">' . number_format($liempo_per1) . '%</td>
	            <td class="text-right">' . number_format($liempo_dif2) . '</td>
	            <td class="text-right">' . number_format($liempo_per2) . '%</td>

	            <td class="text-right">' . number_format($liempo) . '</td>
	            <td class="text-right">' . number_format($liempo1) . '</td>
	            <td class="text-right">' . number_format($liempo2) . '</td>
	            <td class="text-right">' . number_format($liempo_dif1) . '</td>
	            <td class="text-right">' . number_format($liempo_per1) . '%</td>
	            <td class="text-right">' . number_format($liempo_dif2) . '</td>
	            <td class="text-right">' . number_format($liempo_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">VAP</td>
	            <td class="text-right">' . number_format($vap) . '</td>
	            <td class="text-right">' . number_format($vap1) . '</td>
	            <td class="text-right">' . number_format($vap2) . '</td>
	            <td class="text-right">' . number_format($vap_dif1) . '</td>
	            <td class="text-right">' . number_format($vap_per1) . '%</td>
	            <td class="text-right">' . number_format($vap_dif2) . '</td>
	            <td class="text-right">' . number_format($vap_per2) . '%</td>

	            <td class="text-right">' . number_format($vap) . '</td>
	            <td class="text-right">' . number_format($vap1) . '</td>
	            <td class="text-right">' . number_format($vap2) . '</td>
	            <td class="text-right">' . number_format($vap_dif1) . '</td>
	            <td class="text-right">' . number_format($vap_per1) . '%</td>
	            <td class="text-right">' . number_format($vap_dif2) . '</td>
	            <td class="text-right">' . number_format($vap_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">DP/DOA/DAA</td>
	            <td class="text-right"></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	        </tr>

	        <tr>
	            <td class="text-left">Transfer (In) / Out</td>
	            <td class="text-right">' . number_format($transfer) . '</td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td class="text-right">' . number_format($transfer) . '</td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	        </tr>

	        <tr style="border-top: 2px solid black; border-bottom: 2px solid black">
	            <td class="text-left"><strong>Total</strong></td>
	            <td class="text-right">' . number_format($total) . '</td>
	            <td class="text-right">' . number_format($total1) . '</td>
	            <td class="text-right">' . number_format($total2) . '</td>
	            <td class="text-right">' . number_format($variance1) . '</td>
	            <td class="text-right">' . number_format($percent1) . '</td>
	            <td class="text-right">' . number_format($variance2) . '</td>
	            <td class="text-right">' . number_format($percent1) . '</td>

	            <td class="text-right">' . number_format($total_heads) . '</td>
	            <td class="text-right">' . number_format($total1) . '</td>
	            <td class="text-right">' . number_format($total2) . '</td>
	            <td class="text-right">' . number_format($variance1) . '</td>
	            <td class="text-right">' . number_format($percent1) . '%</td>
	            <td class="text-right">' . number_format($variance2) . '</td>
	            <td class="text-right">' . number_format($percent1) . '%</td>
	        </tr>
	    ';

	    return $volume_tbl;
	}

	public function outlet_budget($id, $year){
		$info = $this->_require_login();
		ini_set('max_input_vars', 20000);
		$data['title'] = 'Transact Sales';
		$data['id'] = $id;
		$outlet_id = decode($id);
		if(!empty($year)){
			$data['year'] = $year;
			$join_outlet = array(
				'bc_tbl b' => 'a.bc_id=b.bc_id AND b.bc_status=1 AND a.outlet_id=' . $outlet_id,
				'outlet_brand_tbl c' => 'a.outlet_id = c.outlet_id AND c.outlet_brand_status = 1',
				'brand_tbl d' => 'c.brand_id = d.brand_id AND c.outlet_brand_status = 1'
			);
			$check_outlet = $this->admin->check_join('outlet_tbl a', $join_outlet, TRUE);

			if($check_outlet['result'] == TRUE){
				$bc_id = $check_outlet['info']->bc_id;
				$brand_id = $check_outlet['info']->brand_id;
				$data['outlet_name'] = $check_outlet['info']->outlet_name;
				$data['bc_name'] = $check_outlet['info']->bc_name;
				$data['brand_name'] = $check_outlet['info']->brand_name;
				$data['brand_code'] = $check_outlet['info']->brand_code;
				$data['outlet_id'] = encode($check_outlet['info']->outlet_id);
				$data['bc_id'] = encode($bc_id);

				$join = array(
					'brand_bc_material_tbl b' => 'a.material_id = b.material_id AND b.brand_bc_material_status = 1',
					'brand_bc_tbl c' => 'b.brand_bc_id = c.brand_bc_id AND c.bc_id = ' . $bc_id . ' AND c.brand_bc_year = ' . $year,
					'brand_tbl d' => 'c.brand_id = d.brand_id AND d.brand_id = ' . $brand_id,
					'outlet_brand_tbl e' => 'd.brand_id = e.brand_id',
					'outlet_tbl f' => 'e.outlet_id = f.outlet_id AND f.outlet_id = ' . $outlet_id,
					'unit_tbl g' => 'a.unit_id = g.unit_id',
					'material_unit_tbl h' => 'a.material_id = h.material_id',
					'unit_tbl i' => 'h.valuation_unit = i.unit_id',
					'material_group_tbl j' => 'a.material_group_id = j.material_group_id'
				);

				$data['material'] = $this->admin->get_join('material_tbl a', $join);

				$data['content'] = $this->load->view('admin/admin_budget_content', $data , TRUE);
				$this->load->view('admin/templates', $data);
			}else{
				redirect('admin/sales');
			}
		}
	}

	public function add_outlet_budget(){

		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$outlet_id = decode($this->input->post('id'));
			$month_date = clean_data($this->input->post('month'));
			$material = $this->input->post('material');
			$asp = $this->input->post('asp');
			$qty = $this->input->post('budget_qty');
			$year = $this->input->post('year');
			$user_id = decode($info['user_id']);
			if(!empty($outlet_id) && !empty($material) && !empty($asp) && !empty($qty) && !empty($user_id) && !empty($year)){
				$this->db->trans_start();
				$check_outlet = $this->admin->check_data('outlet_tbl', array('outlet_id' => $outlet_id), TRUE);
				if($check_outlet['info'] == TRUE){
					$bc_id = $check_outlet['info']->bc_id;
					$date = explode('/', $month_date);
					$check_budget = $this->admin->check_data('sales_tbl', array('outlet_id' => $outlet_id, 'sales_year' => $year, 'sales_status' => 1));

					if($check_budget == FALSE){
						$set_budget = array(
							'outlet_id' => $outlet_id,
							'trans_type_id' => 1,
							'user_id' => $user_id,
							'sales_year' => $year,
							'sales_added' => date_now(),
							'sales_status' => 1
						);

						$insert_budget = $this->admin->insert_data('sales_tbl', $set_budget, TRUE);
						$sales_id = $insert_budget['id'];
						$count = 0;

						foreach($material as $row):
							echo $count;
							echo '<br>';
							$material_id = decode($row);
							$check_material = $this->admin->check_data('material_tbl', array('material_id' => $material_id, 'material_status' => 1));
							if($check_material == TRUE){

								$jan_budget_qty = check_num($qty['jan'][$count]);
								$feb_budget_qty = check_num($qty['feb'][$count]);
								$mar_budget_qty = check_num($qty['mar'][$count]);
								$apr_budget_qty = check_num($qty['apr'][$count]);
								$may_budget_qty = check_num($qty['may'][$count]);
								$jun_budget_qty = check_num($qty['jun'][$count]);
								$jul_budget_qty = check_num($qty['jul'][$count]);
								$aug_budget_qty = check_num($qty['aug'][$count]);
								$sep_budget_qty = check_num($qty['sep'][$count]);
								$oct_budget_qty = check_num($qty['oct'][$count]);
								$nov_budget_qty = check_num($qty['nov'][$count]);
								$dec_budget_qty = check_num($qty['dec'][$count]);

								$total_qty = $jan_budget_qty + $feb_budget_qty + $mar_budget_qty + $apr_budget_qty + $may_budget_qty + $jun_budget_qty + $jul_budget_qty + $aug_budget_qty + $sep_budget_qty + $oct_budget_qty + $nov_budget_qty + $dec_budget_qty;

								if($total_qty == TRUE){
									$set_item = array(
										'sales_id' => $sales_id,
										'material_id' => $material_id,
										'user_id' => $user_id,
										'sales_item_added' => date_now(),
										'sales_item_status' => 1
									);

									$insert_item = $this->admin->insert_data('sales_item_tbl', $set_item, TRUE);
									$sale_item_id = $insert_item['id'];


								
									$jan_asp_qty = check_num($asp['jan'][$count]);
									$set_jan = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $jan_budget_qty,
										'sales_det_asp' => $jan_asp_qty,
										'sales_det_date' => $year . '-01-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_jan);

									$feb_asp_qty = check_num($asp['feb'][$count]);
									$set_feb = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $feb_budget_qty,
										'sales_det_asp' => $feb_asp_qty,
										'sales_det_date' => $year . '-02-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_feb);

									
									$mar_asp_qty = check_num($asp['mar'][$count]);
									$set_mar = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $mar_budget_qty,
										'sales_det_asp' => $mar_asp_qty,
										'sales_det_date' => $year . '-03-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_mar);

									
									$apr_asp_qty = check_num($asp['apr'][$count]);
									$set_apr = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $apr_budget_qty,
										'sales_det_asp' => $apr_asp_qty,
										'sales_det_date' => $year . '-04-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_apr);

									$may_asp_qty = check_num($asp['may'][$count]);
									$set_may = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $may_budget_qty,
										'sales_det_asp' => $may_asp_qty,
										'sales_det_date' => $year . '-05-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_may);

									$jun_asp_qty = check_num($asp['jun'][$count]);
									$set_jun = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $jun_budget_qty,
										'sales_det_asp' => $jun_asp_qty,
										'sales_det_date' => $year . '-06-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_jun);

									
									$jul_asp_qty = check_num($asp['jul'][$count]);
									$set_jul = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $jul_budget_qty,
										'sales_det_asp' => $jul_asp_qty,
										'sales_det_date' => $year . '-07-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_jul);

									$aug_asp_qty = check_num($asp['aug'][$count]);
									$set_aug = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => check_num($aug_budget_qty),
										'sales_det_asp' => check_num($aug_asp_qty),
										'sales_det_date' => $year . '-08-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_aug);

									$sep_asp_qty = check_num($asp['sep'][$count]);
									$set_sep = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $sep_budget_qty,
										'sales_det_asp' => $sep_asp_qty,
										'sales_det_date' => $year . '-09-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_sep);


									$oct_asp_qty = check_num($asp['oct'][$count]);
									$set_oct = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $oct_budget_qty,
										'sales_det_asp' => $oct_asp_qty,
										'sales_det_date' => $year . '-10-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_oct);

									$nov_asp_qty = check_num($asp['nov'][$count]);
									$set_nov = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $nov_budget_qty,
										'sales_det_asp' => $nov_asp_qty,
										'sales_det_date' => $year . '-11-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_nov);

									
									$dec_asp_qty = check_num($asp['dec'][$count]);
									$set_dec = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $dec_budget_qty,
										'sales_det_asp' => $dec_asp_qty,
										'sales_det_date' => $year . '-12-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_dec);
								}
							}

							$count++;
						endforeach;


						if($this->db->trans_status() === FALSE){
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error please contact your administrator!</div>';
						}else{
							$this->db->trans_commit();
							$msg = '<div class="alert alert-success">Sales Budget Added.</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Budget Already Exist!</div>';	
					}	
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}
			$this->session->set_flashdata('message', $msg);
			redirect('admin/sales-info/' . encode($bc_id) . '/' . $year);
		}else{
			redirect('admin');
		}
	}


	public function sales_view($id){
		$info = $this->_require_login();
		$data['title'] = 'Sales View';
		$sales_id = decode($id);
		$join_id = array(
			'outlet_tbl b' => 'a.outlet_id = b.outlet_id AND a.sales_status = 1 AND a.sales_id = ' . $sales_id,
			'bc_tbl c' => 'b.bc_id = c.bc_id',
			'outlet_brand_tbl d' => 'b.outlet_id = a.outlet_id AND d.outlet_brand_status = 1',
			'brand_tbl e' => 'd.brand_id = e.brand_id',
		);

		$check_id = $this->admin->check_join('sales_tbl a', $join_id, TRUE);
		if($check_id['result'] == TRUE){
			$data['id'] = $sales_id;
			$data['outlet_name'] = $check_id['info']->outlet_name;
			$data['bc_name'] = $check_id['info']->bc_name;
			$data['brand_name'] = $check_id['info']->brand_name;
			$data['bc_id'] = $check_id['info']->bc_id;
			$data['year'] = $check_id['info']->sales_year;

			$join_item = array(
				'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_id = ' . $sales_id,
				'material_tbl c' => 'b.material_id = c.material_id',
			);
			$data['material'] = $this->admin->get_join('sales_tbl a', $join_item, FALSE, FALSE, FALSE, 'a.sales_id, b.sales_item_id, c.material_id, c.material_code, c.material_desc, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 1) as jan, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 2) as feb, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 3) as mar, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 4) as apr, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 5) as may, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 6) as jun, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 7) as jul, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 8) as aug, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 9) as sep, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 10) as oct, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 11) as nov, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 12) as december');

			/*print_r($data['material']);
			exit;*/
			$data['content'] = $this->load->view('admin/admin_sales_view', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}else{

		}
	}

	public function remove_sales_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('sales_item_id' => $id);
			$check_id = $this->admin->check_data('sales_item_tbl', $where, TRUE);
			if($check_id['result'] == TRUE){
				$sales_id = $check_id['info']->sales_id;
				$set = array('sales_item_status' => 0);
				$remove_item = $this->admin->update_data('sales_item_tbl', $set, $where);

				if($remove_item == TRUE){
					$msg = '<div class="alert alert-success">Item successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('admin/sales-view/' . encode($sales_id));
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/sales/');
			}
		}

	}

	public function add_sales_item($id){
		$info = $this->_require_login();
		$data['title'] = 'Add Sales Item';
		$data['id'] = $id;
		$sales_id = decode($id);
		$year = $this->_active_year();
		$join_outlet = array(
			'outlet_tbl b' => 'a.outlet_id=b.outlet_id AND a.sales_status = 1 AND a.sales_id =' . $sales_id,
			'bc_tbl c' => 'b.bc_id = c.bc_id',
			'outlet_brand_tbl d' => 'a.outlet_id = d.outlet_id AND d.outlet_brand_status = 1',
			'brand_tbl e' => 'd.brand_id = e.brand_id'
		);
		$check_outlet = $this->admin->check_join('sales_tbl a', $join_outlet, TRUE);

		if($check_outlet['result'] == TRUE){
			$data['outlet_name'] = $check_outlet['info']->outlet_name;
			$data['bc_name'] = $check_outlet['info']->bc_name;
			$data['brand_name'] = $check_outlet['info']->brand_name;
			$data['outlet_id'] = encode($check_outlet['info']->outlet_id);
			$data['bc_id'] = encode($check_outlet['info']->bc_id);
			$outlet_id = $check_outlet['info']->outlet_id;
			$data['year'] = $check_outlet['info']->sales_year;

			$join = array(
				'brand_material_tbl b' => 'a.material_id = b.material_id',
				'brand_tbl c' => 'b.brand_id = c.brand_id',
				'outlet_brand_tbl d' => 'c.brand_id = d.brand_id',
				'outlet_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_id = ' . $outlet_id,
				'unit_tbl f' => 'a.unit_id = f.unit_id',
				'material_unit_tbl g' => 'a.material_id = g.material_id',
				'unit_tbl h' => 'g.valuation_unit = h.unit_id',
				'material_group_tbl i' => 'a.material_group_id = i.material_group_id'
			);

			$where = 'a.material_id NOT IN (SELECT y.material_id FROM sales_tbl x, sales_item_tbl y WHERE x.sales_id = y.sales_id AND  y.sales_item_status = 1 AND x.sales_id = ' . $sales_id . ')';
			$data['material'] = $this->admin->get_join('material_tbl a', $join, FALSE, FALSE, FALSE, FALSE, $where);

			$data['content'] = $this->load->view('admin/admin_sales_add_item', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}else{
			redirect('admin/sales');
		}
	}

	public function add_trans_sales_item(){

		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$sales_id = decode($this->input->post('id'));
			$material = $this->input->post('material');
			$asp = $this->input->post('asp');
			$qty = $this->input->post('budget_qty');
			$user_id = decode($info['user_id']);
			if(!empty($sales_id) && !empty($material) && !empty($asp) && !empty($qty) && !empty($user_id)){
				$this->db->trans_start();
				$check_sales = $this->admin->check_data('sales_tbl', array('sales_id' => $sales_id, 'sales_status' => 1), TRUE);
				if($check_sales['info'] == TRUE){
					$year = $check_sales['info']->sales_year;
					
					$count = 0;
					foreach($material as $row):
						$material_id = decode($row);
						$check_material = $this->admin->check_data('material_tbl', array('material_id' => $material_id, 'material_status' => 1));
						if($check_material == TRUE){

							$jan_budget_qty = check_num($qty['jan'][$count]);
							$feb_budget_qty = check_num($qty['feb'][$count]);
							$mar_budget_qty = check_num($qty['mar'][$count]);
							$apr_budget_qty = check_num($qty['apr'][$count]);
							$may_budget_qty = check_num($qty['may'][$count]);
							$jun_budget_qty = check_num($qty['jun'][$count]);
							$jul_budget_qty = check_num($qty['jul'][$count]);
							$aug_budget_qty = check_num($qty['aug'][$count]);
							$sep_budget_qty = check_num($qty['sep'][$count]);
							$oct_budget_qty = check_num($qty['oct'][$count]);
							$nov_budget_qty = check_num($qty['nov'][$count]);
							$dec_budget_qty = check_num($qty['dec'][$count]);

							$total_qty = $jan_budget_qty + $feb_budget_qty + $mar_budget_qty + $apr_budget_qty + $may_budget_qty + $jun_budget_qty + $jul_budget_qty + $aug_budget_qty + $sep_budget_qty + $oct_budget_qty + $nov_budget_qty + $dec_budget_qty;
							if($total_qty == TRUE){
								$set_item = array(
									'sales_id' => $sales_id,
									'material_id' => $material_id,
									'user_id' => $user_id,
									'sales_item_added' => date_now(),
									'sales_item_status' => 1
								);

								$insert_item = $this->admin->insert_data('sales_item_tbl', $set_item, TRUE);
								$sale_item_id = $insert_item['id'];


							
								$jan_asp_qty = check_num($asp['jan'][$count]);
								$set_jan = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $jan_budget_qty,
									'sales_det_asp' => $jan_asp_qty,
									'sales_det_date' => $year . '-01-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_jan);

								$feb_asp_qty = check_num($asp['feb'][$count]);
								$set_feb = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $feb_budget_qty,
									'sales_det_asp' => $feb_asp_qty,
									'sales_det_date' => $year . '-02-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_feb);

								
								$mar_asp_qty = check_num($asp['mar'][$count]);
								$set_mar = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $mar_budget_qty,
									'sales_det_asp' => $mar_asp_qty,
									'sales_det_date' => $year . '-03-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_mar);

								
								$apr_asp_qty = check_num($asp['apr'][$count]);
								$set_apr = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $apr_budget_qty,
									'sales_det_asp' => $apr_asp_qty,
									'sales_det_date' => $year . '-04-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_apr);

								$may_asp_qty = check_num($asp['may'][$count]);
								$set_may = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $may_budget_qty,
									'sales_det_asp' => $may_asp_qty,
									'sales_det_date' => $year . '-05-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_may);

								$jun_asp_qty = check_num($asp['jun'][$count]);
								$set_jun = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $jun_budget_qty,
									'sales_det_asp' => $jun_asp_qty,
									'sales_det_date' => $year . '-06-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_jun);

								
								$jul_asp_qty = check_num($asp['jul'][$count]);
								$set_jul = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $jul_budget_qty,
									'sales_det_asp' => $jul_asp_qty,
									'sales_det_date' => $year . '-07-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_jul);

								$aug_asp_qty = check_num($asp['aug'][$count]);
								$set_aug = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => check_num($aug_budget_qty),
									'sales_det_asp' => check_num($aug_asp_qty),
									'sales_det_date' => $year . '-08-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_aug);

								$sep_asp_qty = check_num($asp['sep'][$count]);
								$set_sep = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $sep_budget_qty,
									'sales_det_asp' => $sep_asp_qty,
									'sales_det_date' => $year . '-09-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_sep);


								$oct_asp_qty = check_num($asp['oct'][$count]);
								$set_oct = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $oct_budget_qty,
									'sales_det_asp' => $oct_asp_qty,
									'sales_det_date' => $year . '-10-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_oct);

								$nov_asp_qty = check_num($asp['nov'][$count]);
								$set_nov = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $nov_budget_qty,
									'sales_det_asp' => $nov_asp_qty,
									'sales_det_date' => $year . '-11-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_nov);

								
								$dec_asp_qty = check_num($asp['dec'][$count]);
								$set_dec = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $dec_budget_qty,
									'sales_det_asp' => $dec_asp_qty,
									'sales_det_date' => $year . '-12-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_dec);
							}
						}

						$count++;
					endforeach;

					if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please contact your administrator!</div>';
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success">Sales item added.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}
			$this->session->set_flashdata('message', $msg);
			redirect('admin/sales-view/' . encode($sales_id));
		}else{
			redirect('admin');
		}
	}

	public function cancel_sales(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('sales_id' => $id);
			$join_id = array(
				'outlet_tbl b' => 'a.outlet_id = b.outlet_id AND a.sales_status = 1 AND a.sales_id = ' . $id,
				'bc_tbl c' => 'b.bc_id = c.bc_id'
			);
			$check_id = $this->admin->check_join('sales_tbl a', $join_id, TRUE);
			if($check_id['result'] == TRUE){
				$bc_id = $check_id['info']->bc_id;
				$sales_id = $check_id['info']->sales_id;
				$set = array('sales_status' => 0);
				$remove_sales = $this->admin->update_data('sales_tbl', $set, $where);
				
				if($remove_sales == TRUE){
					$msg = '<div class="alert alert-success">Outlet Sales successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('admin/sales-info/' . encode($bc_id));
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/sales/');
			}
		}
	}

	public function cancel_sales_batch(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$bc_id = decode(clean_data($this->input->post('bc_id')));
			$ids = $this->input->post('id');
			$this->db->trans_start();

			foreach($ids as $row){
				$id = decode($row);
				$where = array('sales_id' => $id);
				$join_id = array(
					'outlet_tbl b' => 'a.outlet_id = b.outlet_id AND a.sales_status = 1 AND a.sales_id = ' . $id,
					'bc_tbl c' => 'b.bc_id = c.bc_id AND c.bc_id = ' . $bc_id
				);
				$check_id = $this->admin->check_join('sales_tbl a', $join_id, TRUE);
				if($check_id['result'] == TRUE){
					$bc_id = $check_id['info']->bc_id;
					$sales_id = $check_id['info']->sales_id;
					$set = array('sales_status' => 0);
					$remove_sales = $this->admin->update_data('sales_tbl', $set, $where);
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/sales-info/' . encode($bc_id));
				}
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/sales-info/' . encode($bc_id));
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success">Sales successfully Removed.</strong></div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/sales-info/' . encode($bc_id));
			}
		}
	}

	public function get_sales_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$sales_item_id = clean_data(decode($this->input->post('id')));
			$join_item = array(
				'material_tbl b' => 'a.material_id = b.material_id AND a.sales_item_status = 1 AND a.sales_item_id = ' . $sales_item_id
			);
			$check_item = $this->admin->check_join('sales_item_tbl a', $join_item, TRUE);

			if($check_item['result'] == TRUE){
				$material_code = $check_item['info']->material_code;
				$material_desc = $check_item['info']->material_desc;
				
				$join_get_item = array(
					'sales_item_tbl b' => 'a.sales_item_id = b.sales_item_id AND b.sales_item_status = 1 AND a.sales_det_status = 1 AND b.sales_item_id = ' . $sales_item_id,
				);

				$get_item = $this->admin->get_join('sales_details_tbl a', $join_get_item, FALSE, 'a.sales_det_date ASC', FALSE, 'a.sales_det_qty, a.sales_det_asp, MONTHNAME(a.sales_det_date) as sales_budget_date');

				$qty = array(
					'January' => 0,
					'February' => 0,
					'March' => 0,
					'April' => 0,
					'May' => 0, 
					'June' => 0,
					'July' => 0,
					'August' => 0,
					'September' => 0,
					'October' => 0,
					'November' => 0,
					'December' => 0
				);

				$asp = array(
					'January' => 0,
					'February' => 0,
					'March' => 0,
					'April' => 0,
					'May' => 0, 
					'June' => 0,
					'July' => 0,
					'August' => 0,
					'September' => 0,
					'October' => 0,
					'November' => 0,
					'December' => 0
				);

				$total_qty = 0;
				foreach($get_item as $row_item){
					$qty[$row_item->sales_budget_date] += $row_item->sales_det_qty;
					$asp[$row_item->sales_budget_date] += $row_item->sales_det_asp;
					$total_qty += $row_item->sales_det_qty;
				}


				$details = array(
					'code' => $material_code,
					'desc' => $material_desc,
					'total' => $total_qty,
					'qty' => $qty,
					'asp' => $asp
				);

				$data['result'] = 1;
				$data['info'] = $details;
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_sales_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = $this->input->post('id');
			$qty = clean_data($this->input->post('qty'));
			$asp = clean_data($this->input->post('asp'));

			$count = 0;
			$this->db->trans_start();
			foreach($id as $row_id){
				$item_id = decode($row_id);
				$check_item = $this->admin->check_data('sales_item_tbl', array('sales_item_id' => $item_id), TRUE);

				if($check_item['result'] == TRUE){
					$sales_id = $check_item['info']->sales_id;

					$item_qty = $qty['jan'][$count];
					$item_asp = $asp['jan'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 1, 'sales_det_status' => 1));
					
					$item_qty = $qty['feb'][$count];
					$item_asp = $asp['feb'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 2, 'sales_det_status' => 1));


					$item_qty = $qty['mar'][$count];
					$item_asp = $asp['mar'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 3, 'sales_det_status' => 1));

					$item_qty = $qty['apr'][$count];
					$item_asp = $asp['apr'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 4, 'sales_det_status' => 1));

					$item_qty = $qty['may'][$count];
					$item_asp = $asp['may'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 5, 'sales_det_status' => 1));


					$item_qty = $qty['jun'][$count];
					$item_asp = $asp['jun'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 6, 'sales_det_status' => 1));

					$item_qty = $qty['jul'][$count];
					$item_asp = $asp['jul'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 7, 'sales_det_status' => 1));

					$item_qty = $qty['aug'][$count];
					$item_asp = $asp['aug'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 8, 'sales_det_status' => 1));

					$item_qty = $qty['sep'][$count];
					$item_asp = $asp['sep'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 9, 'sales_det_status' => 1));

					$item_qty = $qty['oct'][$count];
					$item_asp = $asp['oct'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 10, 'sales_det_status' => 1));

					$item_qty = $qty['nov'][$count];
					$item_asp = $asp['nov'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 11, 'sales_det_status' => 1));

					$item_qty = $qty['dec'][$count];
					$item_asp = $asp['dec'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 12, 'sales_det_status' => 1));
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/sales-view/' . encode($sales_id));
				}

				$count++;
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success">Sales successfully updated.</strong></div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/sales-view/' . encode($sales_id));
		}
	}

	public function upload_sales(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$year = clean_data($this->input->post('year'));
			$this->load->library('excel');
			ini_set('max_execution_time', 0); 
			ini_set('memory_limit','2048M');
			ini_set('upload_max_filesize','5120M');
			
			$temp_code = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 10);

			$config['upload_path']   = 'assets/budget-temp';
	        $config['allowed_types'] = 'xls|xlsx|xlsb';
	        $config['file_name'] = 'tmp_' . $temp_code;
	        $this->load->library('upload', $config);
			
	        if (! $this->upload->do_upload('budget_file')) {
	            $error = array('error' => $this->upload->display_errors());
	            $msg = $this->upload->display_errors();
	            $this->session->set_flashdata('message', $msg);
	            redirect('admin/outlet');
	        }else{

					$data = array('upload_data' => $this->upload->data());
			        $file_name = $data['upload_data']['file_name'];

					$file = 'assets/budget-temp/' . $file_name;
					$data['file'] = $file_name;

		        	$this->db->trans_start();

					$objPHPExcel = PHPExcel_IOFactory::load($file);
					//get only the Cell Collection
					$cell_collection = $objPHPExcel->getActiveSheet()->getCellCollection();
					$data['excel_data'] = '';
					
					$bc = $objPHPExcel->getActiveSheet()->getCell('B1')->getValue();
					// $bc = trim($bc);

					$check_bc = $this->admin->check_data('bc_tbl', array('bc_name' => strtoupper($bc)), TRUE);
					$bc_id = '';
					if($check_bc['result'] == TRUE){
						$bc_id = $check_bc['info']->bc_id;
						$high_column = $objPHPExcel->getActiveSheet()->getHighestColumn();
						$high =PHPExcel_Cell::columnIndexFromString($high_column);
						for($a = 4; $a <= $high; $a = $a + 24){
							
							$column_outlet = PHPExcel_Cell::stringFromColumnIndex($a);
							// $column_outlet . '6 - ';
							$outlet_code = $objPHPExcel->getActiveSheet()->getCell($column_outlet . '6')->getValue();
							
							if(!empty($outlet_code)){
								$check_outlet = $this->admin->check_data('outlet_tbl', array('ifs_code' => strtoupper($outlet_code), 'outlet_status_id' => 1), TRUE);

								if($check_outlet['result'] == TRUE){
									$outlet_id = $check_outlet['info']->outlet_id;

									$check_budget = $this->admin->check_data('sales_tbl', array('outlet_id' => $outlet_id, 'sales_year' => $year, 'sales_status' => 1));

									if($check_budget == FALSE){
										$set_sales = array(
											'outlet_id' => $outlet_id,
											'trans_type_id' => 1,
											'user_id' => $user_id,
											'sales_file' => $file,
											'sales_year' => $year,
											'sales_added' => date_now(),
											'sales_status' => 1
										);

										$insert_sales = $this->admin->insert_data('sales_tbl', $set_sales, TRUE);
										$sales_id = $insert_sales['id'];

										$high_row = $objPHPExcel->getActiveSheet()->getHighestRow();
										
										for($b = 9; $b <= $high_row; $b++){
											$qty_column = $column_outlet;
											
											$material_code = $objPHPExcel->getActiveSheet()->getCell('A' . $b)->getValue();

											$check_code = $this->admin->check_data('material_tbl', array('material_code' => strtoupper($material_code), 'material_status' => 1), TRUE);
											if($check_code['result'] == TRUE){

												$checker_qty = $qty_column;
												$jan_qty = check_num($objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue());
												$checker_qty++;
												$checker_qty++;
												$feb_qty = check_num($objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue());
												$checker_qty++;
												$checker_qty++;
												$mar_qty = check_num($objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue());
												$checker_qty++;
												$checker_qty++;
												$apr_qty = check_num($objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue());
												$checker_qty++;
												$checker_qty++;
												$may_qty = check_num($objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue());
												$checker_qty++;
												$checker_qty++;
												$jun_qty = check_num($objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue());
												$checker_qty++;
												$checker_qty++;
												$jul_qty = check_num($objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue());
												$checker_qty++;
												$checker_qty++;
												$aug_qty = check_num($objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue());
												$checker_qty++;
												$checker_qty++;
												$sep_qty = check_num($objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue());
												$checker_qty++;
												$checker_qty++;
												$oct_qty = check_num($objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue());
												$checker_qty++;
												$checker_qty++;
												$nov_qty = check_num($objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue());
												$checker_qty++;
												$checker_qty++;
												$dec_qty = check_num($objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue());

												$total_qty = $jan_qty + $feb_qty + $mar_qty + $apr_qty + $may_qty + $jun_qty + $jul_qty + $aug_qty + $sep_qty + $oct_qty + $nov_qty + $dec_qty;

												if($total_qty > 0){

													$material_id = $check_code['info']->material_id;
													$set_item = array(
														'sales_id' => $sales_id,
														'material_id' => $material_id,
														'user_id' => $user_id,
														'sales_item_added' => date_now(),
														'sales_item_status' => 1
													);

													$insert_item = $this->admin->insert_data('sales_item_tbl', $set_item, TRUE);
													$sales_item_id = $insert_item['id'];


													$date = $year . '-01-01';
													//$jan_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
													$qty_column++;
													$jan_asp = check_num($objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue());
													$qty_column++;

													$set_details = array(
														'sales_item_id' => $sales_item_id,
														'sales_det_qty' => $jan_qty,
														'sales_det_asp' => $jan_asp,
														'sales_det_date' => $date,
														'sales_det_added' => date_now(),
														'sales_det_status' => 1
													);
													$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

													$date = $year . '-02-01';
													//$feb_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
													$qty_column++;
													$feb_asp = check_num($objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue());
													$qty_column++;

													$set_details = array(
														'sales_item_id' => $sales_item_id,
														'sales_det_qty' => $feb_qty,
														'sales_det_asp' => $feb_asp,
														'sales_det_date' => $date,
														'sales_det_added' => date_now(),
														'sales_det_status' => 1
													);
													$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);
													
													$date = $year . '-03-01';
													//$mar_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
													$qty_column++;
													$mar_asp = check_num($objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue());
													$qty_column++;
													
													$set_details = array(
														'sales_item_id' => $sales_item_id,
														'sales_det_qty' => $mar_qty,
														'sales_det_asp' => $mar_asp,
														'sales_det_date' => $date,
														'sales_det_added' => date_now(),
														'sales_det_status' => 1
													);
													$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

													$date = $year . '-04-01';
													//$apr_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
													$qty_column++;
													$apr_asp = check_num($objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue());
													$qty_column++;

													$set_details = array(
														'sales_item_id' => $sales_item_id,
														'sales_det_qty' => $apr_qty,
														'sales_det_asp' => $apr_asp,
														'sales_det_date' => $date,
														'sales_det_added' => date_now(),
														'sales_det_status' => 1
													);
													$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

													$date = $year . '-05-01';
													//$may_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
													$qty_column++;
													$may_asp = check_num($objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue());
													$qty_column++;

													$set_details = array(
														'sales_item_id' => $sales_item_id,
														'sales_det_qty' => $may_qty,
														'sales_det_asp' => $may_asp,
														'sales_det_date' => $date,
														'sales_det_added' => date_now(),
														'sales_det_status' => 1
													);
													$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

													$date = $year . '-06-01';
													//$jun_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
													$qty_column++;
													$jun_asp = check_num($objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue());
													$qty_column++;

													$set_details = array(
														'sales_item_id' => $sales_item_id,
														'sales_det_qty' => $jun_qty,
														'sales_det_asp' => $jun_asp,
														'sales_det_date' => $date,
														'sales_det_added' => date_now(),
														'sales_det_status' => 1
													);
													$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

													$date = $year . '-07-01';
													//$jul_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
													$qty_column++;
													$jul_asp = check_num($objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue());
													$qty_column++;

													$set_details = array(
														'sales_item_id' => $sales_item_id,
														'sales_det_qty' => $jul_qty,
														'sales_det_asp' => $jul_asp,
														'sales_det_date' => $date,
														'sales_det_added' => date_now(),
														'sales_det_status' => 1
													);
													$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

													$date = $year . '-08-01';
													//$aug_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
													$qty_column++;
													$aug_asp = check_num($objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue());
													$qty_column++;
													
													
													$set_details = array(
														'sales_item_id' => $sales_item_id,
														'sales_det_qty' => $aug_qty,
														'sales_det_asp' => $aug_asp,
														'sales_det_date' => $date,
														'sales_det_added' => date_now(),
														'sales_det_status' => 1
													);
													$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

													$date = $year . '-09-01';
													//$sep_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
													$qty_column++;
													$sep_asp = check_num($objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue());
													$qty_column++;

													$set_details = array(
														'sales_item_id' => $sales_item_id,
														'sales_det_qty' => $sep_qty,
														'sales_det_asp' => $sep_asp,
														'sales_det_date' => $date,
														'sales_det_added' => date_now(),
														'sales_det_status' => 1
													);
													$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

													$date = $year . '-10-01';
													//$oct_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
													$qty_column++;
													$oct_asp = check_num($objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue());
													$qty_column++;

													$set_details = array(
														'sales_item_id' => $sales_item_id,
														'sales_det_qty' => $oct_qty,
														'sales_det_asp' => $oct_asp,
														'sales_det_date' => $date,
														'sales_det_added' => date_now(),
														'sales_det_status' => 1
													);
													$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

													$date = $year . '-11-01';
													//$nov_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
													$qty_column++;
													$nov_asp = check_num($objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue());
													$qty_column++;

													$set_details = array(
														'sales_item_id' => $sales_item_id,
														'sales_det_qty' => $nov_qty,
														'sales_det_asp' => $nov_asp,
														'sales_det_date' => $date,
														'sales_det_added' => date_now(),
														'sales_det_status' => 1
													);
													$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);


													$date = $year . '-12-01';
													//$dec_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
													$qty_column++;
													$dec_asp = check_num($objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue());
													$qty_column++;

													$set_details = array(
														'sales_item_id' => $sales_item_id,
														'sales_det_qty' => $dec_qty,
														'sales_det_asp' => $dec_asp,
														'sales_det_date' => $date,
														'sales_det_added' => date_now(),
														'sales_det_status' => 1
													);
													$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);
												}
											}else{
												$this->db->trans_rollback();
												$msg = '<div class="alert alert-danger">Material code (' . $material_code . ') not exist line ' . $b . '!</div>';
												$this->session->set_flashdata('message', $msg);
												redirect('admin/sales-info/' . encode($bc_id));
											}

										}
									}else{
										$this->db->trans_rollback();
										$msg = '<div class="alert alert-danger">Outlet (' . $outlet_code . ') already has a data in column ' . $column_outlet . ' !</div>';
										$this->session->set_flashdata('message', $msg);
										//redirect('admin/sales-info/' . encode($bc_id));
									}
								}else{
									$this->db->trans_rollback();
									$msg = '<div class="alert alert-danger">Outlet not exist column ' . $column_outlet . ' !</div>';
									$this->session->set_flashdata('message', $msg);
									//redirect('admin/sales-info/' . encode($bc_id));
								}
							}else{
								$a = $high + 1;
							}
							
						}
					}else{
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Business Center ('.$bc.') does not exist!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/sales-info/' . encode($bc_id));
					}

					if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/sales-info/' . encode($bc_id));
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success">Budget uploaded!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/sales-info/' . encode($bc_id));
					}
			}
		}else{
			redirect('admin');
		}
	}

	public function download_sales($bc_id, $year){
		ini_set('max_execution_time', 0);
		ini_set('memory_limit','2048M');

		if(!empty($year)){
			$this->load->model('admin_model');
			$info = $this->_require_login();
			$user_id = decode($info['user_id']);

			$bc_id = decode($bc_id);
			$check_bc = $this->admin->check_data('bc_tbl', array('bc_id' => $bc_id, 'bc_status' => 1), TRUE);

			if($check_bc['result'] == TRUE){
				$bc_name = $check_bc['info']->bc_name;
				$check_user = $this->admin->check_data('user_tbl', array('user_id' => $user_id), TRUE);
				if($check_user['result'] == TRUE){
					$name = $check_user['info']->user_lname . ', ' . $check_user['info']->user_fname;
					
				}else{
					exit;
				}
				
			}else{
				exit;
			}


			$this->load->library('excel');

			$spreadsheet = $this->excel;
			$spreadsheet->getProperties()->setCreator('BAVI')
					->setLastModifiedBy('Budgeting System')
					->setTitle('Sales Templates')
					->setSubject('Sales Module')
					->setDescription('Sales Templates');

			
			$styleArray = array(
					'font' 	=> array(
							'bold' => true,
					),
					'alignment' => array(
							'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
							'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
					),
					'borders' => array(
							'top' => array(
									'style' => PHPExcel_Style_Border::BORDER_THIN,
							),
					),
					'fill' => array(
							'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
							'rotation' => 90,
							'startcolor' => array(
									'argb' => 'FFA0A0A0',
							),
							'endcolor' => array(
									'argb' => 'FFFFFFFF',
							),
					),
			);

			foreach(range('A','B') as $columnID) {
				$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
						->setAutoSize(true);
			}

			$style_center = array(
				'font' => array(
					'bold' => true,
					'size' => 20
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				)
			);

			$style_info =  array(
				'font' => array(
					'bold' => true
				)
			);

			$style_border = array(
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				)
			);

			$style_data = array(
				'font' => array(
					'bold' => true
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
				),
			);

			$style_out = array(
				'font' => array(
					'bold' => true,
					'color' => array('rgb' => 'FF0000')
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
				),
			);

			$style_material = array(
				'font' => array(
					'bold' => true
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				)
			);

			$style_mat_code= array(
				'font' => array(
					'bold' => true
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				)
			);

			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Business Center')
				->setCellValue("B1", 'IFS Code')
				->setCellValue("C1", 'Outlet name')
				->setCellValue("D1", 'Brand')
				->setCellValue("E1", 'Material Code')
				->setCellValue("F1", 'Material Description')
				->setCellValue("G1", 'VAT Type')
				->setCellValue("H1", 'Material Group')
				->setCellValue("I1", 'Date')
				->setCellValue("J1", 'Qty')
				->setCellValue("K1", 'Sales Weight')
				->setCellValue("L1", 'ASP')
				->setCellValue("M1", 'Tactical')
				->setCellValue("N1", 'Gross Sales')
				->setCellValue("O1", 'Tactical Discount')
				->setCellValue("P1", 'Output Tax')
				->setCellValue("Q1", 'Sales Unit Equivalent')
				->setCellValue("R1", 'Net Sales')
				;

			$get_sales = $this->admin->get_query('SELECT g.bc_name, d.ifs_code, d.outlet_name, f.brand_name, c.material_code, c.material_desc, i.vat_type_name, j.material_group_name, h.sales_det_date, h.sales_det_qty, h.sales_det_asp, c.material_id,

				IFNULL((SELECT z.sales_tactical_det_price FROM sales_tactical_tbl x, sales_tactical_item_tbl y, sales_tactical_details_tbl z WHERE d.outlet_id = x.outlet_id AND x.sales_tactical_id = y.sales_tactical_id AND b.material_id = y.material_id AND y.sales_tactical_item_id = z.sales_tactical_item_id AND h.sales_det_date = z.sales_tactical_det_date AND x.sales_tactical_status = 1 AND y.sales_tactical_item_status = 1 AND z.sales_tactical_det_status = 1), 0) as tactical,

				IFNULL((SELECT y.sales_live_alw_det_value FROM sales_live_alw_tbl x, sales_live_alw_detail_tbl y WHERE x.sales_live_alw_id = y.sales_live_alw_id AND x.bc_id = g.bc_id AND x.sales_live_alw_status = 1 AND y.sales_live_alw_det_status = 1 AND c.material_code = "9100100" AND x.sales_live_alw_year = ' . $year . ' AND y.sales_live_alw_det_date = h.sales_det_date), 1) as alw ,

				IFNULL((SELECT x.sales_unit_equivalent FROM material_unit_tbl x WHERE c.material_id = x.material_id AND x.material_unit_status = 1 LIMIT 1), 0) as sales_unit

				FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 JOIN `material_tbl` `c` ON `b`.`material_id` = `c`.`material_id` JOIN `outlet_tbl` `d` ON `a`.`outlet_id` = `d`.`outlet_id` JOIN `outlet_brand_tbl` `e` ON `d`.`outlet_id` = `e`.`outlet_id` JOIN `brand_tbl` `f` ON `e`.`brand_id` = `f`.`brand_id` JOIN `bc_tbl` `g` ON `d`.`bc_id` = `g`.`bc_id` JOIN `sales_details_tbl` `h` ON `b`.`sales_item_id` = `h`.`sales_item_id` JOIN vat_type_tbl i ON c.vat_type_id = i.vat_type_id JOIN material_group_tbl j ON c.material_group_id = j.material_group_id AND g.bc_id = ' . $bc_id . ' AND a.sales_year = ' . $year . ' WHERE e.outlet_brand_status = 1');

			$count = 2;

			$weight_arr = array();
			foreach($get_sales as $row_sales){

				$sales_det_qty = $row_sales->sales_det_qty * $row_sales->alw;
				$material_group_name = $row_sales->material_group_name;
				$sales_date = $row_sales->sales_det_date;
				$material_id = $row_sales->material_id;

				$sales_weight = 1;
				if($material_group_name == 'DRESSED'){

					if(!array_key_exists($material_id . $sales_date, $weight_arr)){

						$get_dressed_wt = $this->admin->get_query(
							'SELECT g1.ext_prod_trans_dtl_id, g1.ave_wgt FROM prod_trans_tbl a1, prod_trans_dtl_tbl b1, component_type_tbl c1, material_tbl d1, ext_prod_trans_tbl f1, ext_prod_trans_dtl_tbl g1

							WHERE a1.prod_trans_id = b1.prod_trans_id AND b1.component_type_id = c1.component_type_id AND a1.prod_id = ' . $material_id . ' AND b1.article_id = d1.material_id AND b1.article_type_id = 1 AND a1.prod_trans_status = 3 AND a1.bc_id = ' . $bc_id . ' AND b1.prod_trans_dtl_date = "' . $sales_date . '" AND a1.process_type_id = 5 AND c1.component_type = "COST OF SALES" AND f1.bc_id = a1.bc_id AND f1.ext_prod_trans_id = g1.ext_prod_trans_id AND b1.prod_trans_dtl_date = g1.trans_dtl_date AND d1.material_id = f1.material_id AND f1.ext_prod_trans_status = 1 AND g1.ext_prod_trans_dtl_status = 1
						', TRUE);
						
						if(!empty($get_dressed_wt)){
							$sales_weight = $get_dressed_wt->ave_wgt;
							if($sales_weight > 0){
								$sales_det_qty = $sales_det_qty * $sales_weight;
							}else{
								$sales_weight = 1;
							}
						}

						$weight_arr[$material_id . $sales_date] = $sales_weight;
					}else{
						$sales_weight = $weight_arr[$material_id . $sales_date];
						if($sales_weight > 0){
							$sales_det_qty = $sales_det_qty * $sales_weight;
						}else{
							$sales_weight = 1;
						}
					}
				}

				$gross_sales = $sales_det_qty * $row_sales->sales_det_asp;

				$vat_total = 0;
				if($row_sales->vat_type_name == 'VAT ITEM'){
					$vat_total = $gross_sales / 1.12 * 0.12;
				}

				$tactical_total = $sales_det_qty * $row_sales->tactical;
				$net_sales = $gross_sales - $tactical_total - $vat_total;

				$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A" . $count, $row_sales->bc_name)
					->setCellValue("B" . $count, $row_sales->ifs_code)
					->setCellValue("C" . $count, $row_sales->outlet_name)
					->setCellValue("D" . $count, $row_sales->brand_name)
					->setCellValue("E" . $count, $row_sales->material_code)
					->setCellValue("F" . $count, $row_sales->material_desc)
					->setCellValue("G" . $count, $row_sales->vat_type_name)
					->setCellValue("H" . $count, $row_sales->material_group_name)
					->setCellValue("I" . $count, $row_sales->sales_det_date)
					->setCellValue("J" . $count, $sales_det_qty)
					->setCellValue("K" . $count, $sales_weight)
					->setCellValue("L" . $count, $row_sales->sales_det_asp)
					->setCellValue("M" . $count, $row_sales->tactical)
					->setCellValue("N" . $count, $gross_sales)
					->setCellValue("O" . $count, $tactical_total)
					->setCellValue("P" . $count, $vat_total)
					->setCellValue("Q" . $count, $row_sales->sales_unit)
					->setCellValue("R" . $count, $net_sales)
					;

				$count++;
				//exit;
			}

			$spreadsheet->getActiveSheet()->getStyle("A1:R" . $count)->applyFromArray($style_border);
			foreach(range('A','R') as $columnID) {
				$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
						->setAutoSize(true);
			}	

			$spreadsheet->getActiveSheet()->getStyle('J2:R' . ($count - 1))->getNumberFormat()->setFormatCode('#,##0.00');	

			$spreadsheet->getActiveSheet()->setTitle('Sales data');

			// set right to left direction
			//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

			// Set active sheet index to the first sheet, so Excel opens this as the first sheet
			$spreadsheet->setActiveSheetIndex(0);
			ob_end_clean();
			ob_start();
			// Redirect output to a client’s web browser (Excel2007)
			header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
			header('Content-Disposition: attachment;filename="Budgeting - Sales data .xlsx"');
			header('Cache-Control: max-age=0');

			// If you're serving to IE over SSL, then the following may be needed
			header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
			header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
			header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
			header('Pragma: public'); // HTTP/1.0

			$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
			$writer->save('php://output');
			exit;
		}else{
			echo "Error please try again";
		}
	}

	public function get_bc($id){
		$info = $this->_require_login();
		$region_id = decode($id);

		$check_region = $this->admin->check_data('region_tbl', array('region_id' => $region_id, 'region_status' => 1));


		if($check_region == TRUE){

			$bc = $this->admin->get_data('bc_tbl', array('region_id' => $region_id, 'bc_status' => 1));	
			$bc_data = '';
			foreach($bc as $row):
				$bc_data .= '<option value="' . encode($row->bc_id) . '" selected>' . $row->bc_name . '</option>';
			endforeach;
			$data['result'] = 1;
			$data['info'] = $bc_data;
		}else{
			$data['result'] = 0;
		}
		echo json_encode($data);
	}

	public function get_brand(){
		
		$info = $this->_require_login_prod();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$brand_type_id = decode($this->input->post('id'));
			$check_brand_type = $this->admin->check_data('brand_type_tbl', array('brand_type_id' => $brand_type_id, 'brand_type_status' => 1));
			if($check_brand_type == TRUE){

				$brand = $this->admin->get_data('brand_tbl', array('brand_type_id' => $brand_type_id, 'brand_status' => 1));	
				$bc_brand = '';
				foreach($brand as $row):
					$bc_brand .= '<option value="' . encode($row->brand_id) . '">' . $row->brand_name . '</option>';
				endforeach;
				$data['result'] = 1;
				$data['info'] = $bc_brand;
			}else{
				$data['result'] = 0;
			}
			echo json_encode($data);
		}
	}

	public function outlet_brand($id){
		$info = $this->_require_login();
		$data['id'] = $id;
		$data['title'] = 'Outlet Brand';
		$join = array(
			'outlet_brand_tbl b' => 'a.brand_id = b.brand_id AND b.outlet_brand_status=1 AND b.outlet_id=' . decode($id)
		);

		$data['outlet_brand'] = $this->admin->get_join('brand_tbl a', $join, FALSE,'a.brand_name ASC');
		$data['brand'] = $this->admin->get_data('brand_tbl', array('brand_status' => 1));
		$data['type'] = $this->admin->get_data('brand_type_tbl', array('brand_type_status' => 1));
		$data['content'] = $this->load->view('admin/admin_outlet_brand_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function add_brand_outlet(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$type = decode($this->input->post('type'));
			$brand = $this->input->post('brand');
			if(!empty($type) && !empty($brand)){
				foreach ($brand as $key) {
					$brand_id 	= clean_data(decode($key));
					$check_brand = $this->admin->check_data('outlet_brand_tbl', array('brand_id' => $brand_id, 'outlet_id' => $id, 'outlet_brand_status' => 1));

					if($check_brand == FALSE){

						$set_outlet_brand = array(
							'outlet_id' => $id,
							'brand_id' => $brand_id,
							'outlet_brand_status' => 1
						);
						$result = $this->admin->insert_data('outlet_brand_tbl', $set_outlet_brand);
					}

					$msg = '<div class="alert alert-success">Outlet brand added.</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}
			$this->session->set_flashdata('message', $msg);
			redirect('admin/outlet-brand/' . encode($id));
		}else{
			redirect('admin');
		}
	}

	public function remove_brand_outlet(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			
			if(!empty($id)){
				$check_id = $this->admin->check_data('outlet_brand_tbl', array('outlet_brand_id' => $id), TRUE);

				if($check_id['result'] == TRUE){
					$outlet_id = $check_id['info']->outlet_id;
					$set_outlet_brand = array(
						'outlet_brand_status' => 0
					);

					$where = array('outlet_brand_id' => $id);
					$result = $this->admin->update_data('outlet_brand_tbl', $set_outlet_brand, $where);
					$msg = '<div class="alert alert-success">Outlet brand remove.</div>';
				}else{

				}
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/outlet-brand/' . encode($outlet_id));
		}else{
			redirect('admin');
		}
	}

	public function get_brand_outlet(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$brand_type_id = decode($this->input->post('id'));
			$outlet_id = decode($this->input->post('outlet_id'));
			$check_outlet = $this->admin->check_data('outlet_tbl', array('outlet_id' => $outlet_id));
			if($check_outlet == TRUE){

				$brand = $this->admin->get_query('SELECT brand_tbl.brand_id, brand_tbl.brand_name FROM brand_tbl WHERE brand_tbl.brand_id NOT IN (SELECT outlet_brand_tbl.brand_id FROM outlet_brand_tbl, outlet_tbl WHERE outlet_brand_tbl.outlet_id=outlet_tbl.outlet_id AND outlet_brand_tbl.outlet_brand_status=1 AND outlet_tbl.outlet_id=' . $outlet_id . ') AND brand_tbl.brand_type_id=' . $brand_type_id);
				$bc_brand = '';
				foreach($brand as $row):
					$bc_brand .= '<option value="' . encode($row->brand_id) . '">' . $row->brand_name . '</option>';
				endforeach;
				$data['result'] = 1;
				$data['info'] = $bc_brand;
			}else{
				$data['result'] = 0;
			}
			echo json_encode($data);
		}
	}


	/*Brand Material*/

	public function brand_material(){
		$info = $this->_require_login();
		$data['title'] = 'Brand Material';

		$join = array(
			'brand_type_tbl b' => 'a.brand_type_id = b.brand_type_id AND a.brand_status=1'
		);

		$data['brand'] = $this->admin->get_join('brand_tbl a', $join, FALSE,'a.brand_name ASC');
		$data['content'] = $this->load->view('admin/admin_brand_material_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function view_material($id){
		$info = $this->_require_login();
		$data['title'] = 'View Brand Material';
		$data['id'] = $id;
		$brand_id = decode($id);
		$check_brand = $this->admin->check_data('brand_tbl', array('brand_id' => $brand_id), TRUE);

		if($check_brand['result'] == TRUE){
			$data['brand_name'] = $check_brand['info']->brand_name;
			$join = array(
				'brand_material_tbl b' => 'a.material_id = b.material_id AND b.brand_material_status=1 AND b.brand_id=' . $brand_id
			);

			$data['material'] = $this->admin->get_join('material_tbl a', $join, FALSE,'a.material_code ASC');

			$join = array(
				'brand_material_tbl b' => 'a.material_id = b.material_id AND b.brand_material_status=1 AND b.brand_id=' . $brand_id
			);

			$data['unset_material'] = $this->admin->get_query('SELECT * FROM material_tbl WHERE material_tbl.material_id NOT IN (SELECT brand_material_tbl.material_id FROM brand_material_tbl, brand_tbl WHERE brand_material_tbl.brand_id=brand_tbl.brand_id AND brand_material_tbl.brand_material_status=1 AND brand_tbl.brand_id=' . $brand_id . ')');
			$data['content'] = $this->load->view('admin/admin_view_brand_material_content', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}else{
			redirect('admin');
		}
	}

	public function add_brand_material(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$brand_id = decode($this->input->post('id'));
			$material = $this->input->post('material');
			$check_brand = $this->admin->check_data('brand_tbl', array('brand_id' => $brand_id));
			if($check_brand == TRUE){
				foreach($material as $row):
					$material_id = decode($row);
					$check_material = $this->admin->check_data('brand_material_tbl', array('brand_id' => $brand_id, 'material_id' => $material_id));
					if($check_material == FALSE){

						$set = array(
							'brand_id' => $brand_id,
							'material_id' => $material_id,
							'brand_material_status' => 1
						);
						$result = $this->admin->insert_data('brand_material_tbl', $set);
					}
				endforeach;

				$msg = '<div class="alert alert-success">Brand Material added.</div>';
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}
			$this->session->set_flashdata('message', $msg);
			redirect('admin/view-material/' . encode($brand_id));
		}else{
			redirect('admin');
		}
	}

	public function remove_brand_material(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			
			if(!empty($id)){
				$check_id = $this->admin->check_data('brand_material_tbl', array('brand_material_id' => $id), TRUE);

				if($check_id['result'] == TRUE){
					$brand_id = $check_id['info']->brand_id;
					$set = array(
						'brand_material_status' => 0
					);

					$where = array('brand_material_id' => $id);
					$result = $this->admin->update_data('brand_material_tbl', $set, $where);
					$msg = '<div class="alert alert-success">Brand material remove.</div>';
				}else{

				}
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/view-material/' . encode($brand_id));
		}else{
			redirect('admin');
		}
	}


	/*Brand BC Material*/

	public function brand_bc_material(){
		$info = $this->_require_login();

		$data['year'] = $this->_active_year();
		$data['title'] = 'Brand BC';
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_status' => 1));

		$data['content'] = $this->load->view('admin/admin_brand_bc_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function brand_bc_info($id, $year = null){
		$info = $this->_require_login();
		$data['title'] = 'Brand BC Info';

		if($year == null){
			$year = $this->_active_year();
		}

		$data['year'] = $year;

		$bc_id = decode(clean_data($id));
		$check_bc = $this->admin->check_data('bc_tbl', array('bc_id' => $bc_id, 'bc_status' => 1), TRUE);
		if($check_bc['result'] == TRUE){
			$data['id'] = encode($bc_id);
			$data['bc_name'] = $check_bc['info']->bc_name;

			$join = array(
				'brand_tbl b' => 'a.brand_id = b.brand_id AND a.bc_id = ' . $bc_id . ' AND a.brand_bc_year = ' . $year,
				'brand_type_tbl c' => 'b.brand_type_id = c.brand_type_id AND b.brand_status=1',
			);

			$data['brand_bc'] = $this->admin->get_join('brand_bc_tbl a', $join, FALSE,'b.brand_name ASC');

			$where_brand = 'a.brand_id NOT IN (SELECT x.brand_id FROM brand_bc_tbl x WHERE x.bc_id = ' . $bc_id . ' AND x.brand_bc_year = ' . $year . ')';
			$data['brand'] = $this->admin->get_data('brand_tbl a', $where_brand);
			$data['content'] = $this->load->view('admin/admin_brand_bc_info_content', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}
	}

	public function add_brand_bc(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$bc_id = clean_data(decode($this->input->post('bc')));
			$brand_id = clean_data(decode($this->input->post('brand')));
			$year = $this->input->post('year');

			if(!empty($bc_id) && !empty($year) && !empty($brand_id)){
				$check_brand = $this->admin->check_data('brand_bc_tbl', array('brand_id' => $brand_id, 'bc_id' => $bc_id, 'brand_bc_year' => $year), TRUE);

				if($check_brand['result'] == FALSE){
					
					$set = array(
						'brand_id' => $brand_id,
						'bc_id' => $bc_id,
						'user_id' => $user_id,
						'brand_bc_year' => $year
					);

					$result = $this->admin->insert_data('brand_bc_tbl', $set);
					$msg = '<div class="alert alert-success">Brand BC added.</div>';
				}else{
					$msg = '<div class="alert alert-danger">Error Brand already exist. Please try again!</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect($_SERVER['HTTP_REFERER']);
		}else{
			redirect('admin');
		}
	}

	public function brand_bc_material_info($id){
		$info = $this->_require_login();
		$data['title'] = 'Brand BC Material';

		$brand_bc_id = decode($id);
		
		$join_id = array(
			'brand_tbl b' => 'a.brand_id = b.brand_id AND a.brand_bc_id = ' . $brand_bc_id,
			'bc_tbl c' => 'a.bc_id = c.bc_id'
		);

		$check_id = $this->admin->check_join('brand_bc_tbl a', $join_id, TRUE);
		if($check_id['result'] == TRUE){
			$data['id'] = encode($brand_bc_id);
			$data['bc_id'] = encode($check_id['info']->bc_id);
			$data['bc_name'] = $check_id['info']->bc_name;
			$data['brand_name'] = $check_id['info']->brand_name;
			$data['year'] = $check_id['info']->brand_bc_year;

			$join = array(
				'brand_bc_tbl b' => 'a.brand_bc_id = b.brand_bc_id AND a.brand_bc_material_status = 1 AND a.brand_bc_id = ' . $brand_bc_id,
				'brand_tbl c' => 'b.brand_id = c.brand_id',
				'material_tbl d' => 'a.material_id = d.material_id'
			);

			$data['brand_material'] = $this->admin->get_join('brand_bc_material_tbl a', $join, FALSE,'d.material_desc ASC');

			$where_material = 'a.material_id NOT IN (SELECT x.material_id FROM brand_bc_material_tbl x WHERE x.brand_bc_id = ' . $brand_bc_id . ' AND x.brand_bc_material_status = 1)';

			$data['material'] = $this->admin->get_data('material_tbl a', $where_material);
			$data['content'] = $this->load->view('admin/admin_brand_bc_material_content', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}
	}

	public function add_brand_bc_material(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$material = $this->input->post('material');
			$check_id = $this->admin->check_data('brand_bc_tbl', array('brand_bc_id' => $id));
			if($check_id == TRUE){
				foreach($material as $row):
					$material_id = decode($row);
					$check_material = $this->admin->check_data('brand_bc_material_tbl', array('brand_bc_id' => $id, 'material_id' => $material_id, 'brand_bc_material_status' => 1));
					if($check_material == FALSE){

						$set = array(
							'brand_bc_id' => $id,
							'material_id' => $material_id,
							'user_id' => $user_id,
							'brand_bc_material_added' => date_now(),
							'brand_bc_material_status' => 1
						);
						$result = $this->admin->insert_data('brand_bc_material_tbl', $set);
					}
				endforeach;

				$msg = '<div class="alert alert-success">Brand Material added.</div>';
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}
			$this->session->set_flashdata('message', $msg);
			redirect($_SERVER['HTTP_REFERER']);
		}else{
			redirect('admin');
		}
	}

	public function remove_brand_bc_material(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			
			if(!empty($id)){
				$check_id = $this->admin->check_data('brand_bc_material_tbl', array('brand_bc_material_id' => $id), TRUE);

				if($check_id['result'] == TRUE){

					$set = array(
						'brand_bc_material_status' => 0
					);

					$where = array('brand_bc_material_id' => $id);
					$result = $this->admin->update_data('brand_bc_material_tbl', $set, $where);
					$msg = '<div class="alert alert-success">Brand material remove.</div>';
				}else{

				}
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect($_SERVER['HTTP_REFERER']);
		}else{
			redirect('admin');
		}
	}

	public function material_info(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$outlet_id = decode($this->input->post('ifs'));
			$material_id = decode($this->input->post('id'));
			$qty = clean_data($this->input->post('qty'));
			$asp = clean_data($this->input->post('asp'));
			if(!empty($material_id) || !empty($qty) || !empty($asp)){
				$material_join = array(
					'material_bc_formula_tbl b' => 'a.material_bc_id=b.material_bc_id AND b.material_bc_status=1 AND b.material_id=' . $material_id,
					'material_tbl c' => 'b.material_id=c.material_id',
					'material_type_tbl d' => 'c.material_type_id=d.material_type_id'
				);
				
				$check_material = $this->admin->check_join('material_unit_tbl a', $material_join, TRUE);
				if($check_material['result'] == TRUE){

					$material_type = $check_material['info']->material_type_name;

					if($material_type != 'LIVE SALES' && $material_type != 'SUPERMARKET' && $material_type != 'TRADE DISTRIBUTOR'){

						$material_join = array(
							'material_bc_formula_tbl b' => 'a.material_bc_id=b.material_bc_id AND b.material_bc_status=1 AND b.material_id=' . $material_id 
						);
						$result = $this->admin->check_join('material_unit_tbl a', $material_join, TRUE);

						if($result['result'] == TRUE){
							$sales_unit_id = $result['info']->sales_unit_id;
							$unit_id = $result['info']->unit_id;
							$equivalent_unit = $result['info']->equivalent_unit * $qty;
							if($unit_id == $sales_unit_id){
								$sales = $qty * $asp;
							}else{
								$sales = ($qty * $result['info']->unit_conversation) * $asp;
							}
								$data['result'] = 1;
								$data['info'] = $qty * $result['info']->unit_conversation;
								$data['sales'] = $sales;
								$data['equivalent_unit'] = $equivalent_unit;

						}else{
							$data['result'] = 1;
							$data['info'] = 'N/A';
						}
					}else{
						$material_join = array(
							'material_bc_formula_tbl b' => 'a.material_bc_id=b.material_bc_id AND b.material_bc_status=1 AND b.material_id=' . $material_id 
						);
						$result = $this->admin->check_join('material_unit_tbl a', $material_join, TRUE);

						if($result['result'] == TRUE){
							$sales_unit_id = $result['info']->sales_unit_id;
							$unit_id = $result['info']->unit_id;
							$equivalent_unit = $result['info']->equivalent_unit * $qty;
							if($unit_id == $sales_unit_id){
								$sales = $qty * $asp;
							}else{
								$sales = ($qty * $result['info']->unit_conversation) * $asp;
							}
							$check_outlet = $this->admin->check_data('outlet_tbl', array('outlet_id' => $outlet_id, 'outlet_status_id' => 1), TRUE);
							if($check_outlet['result'] == TRUE ){
								$bc_id = $check_outlet['info']->bc_id;
								$result = $this->admin->check_data('broiler_tbl', array('bc_id' => $bc_id, 'broiler_status' => 1), TRUE);
								$data['result'] = 1;
								$data['info'] = $qty * ($result['info']->live_broiler * $result['info']->carcass);
								$data['sales'] = $sales;
								$data['equivalent_unit'] = $equivalent_unit;
							}
						}else{
							$data['result'] = 1;
							$data['info'] = 'N/A';
						}
					}
				}else{
					$data['result'] = 0;
				}
			}else{
				$data['result'] = 0;
			}
			echo json_encode($data);
		}
	}

	public function asp_info(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$outlet_id = decode($this->input->post('ifs'));
			$material_id = decode($this->input->post('id'));
			$qty = clean_data($this->input->post('qty'));
			$asp = clean_data($this->input->post('asp'));
			if(!empty($material_id) || !empty($qty)){
				$material_join = array(
					'material_bc_formula_tbl b' => 'a.material_bc_id=b.material_bc_id AND b.material_bc_status=1 AND b.material_id=' . $material_id,
					'material_tbl c' => 'b.material_id=c.material_id',
					'material_type_tbl d' => 'c.material_type_id=d.material_type_id'
				);
				
				$check_material = $this->admin->check_join('material_unit_tbl a', $material_join, TRUE);
				if($check_material['result'] == TRUE){
					$material_type = $check_material['info']->material_type_name;

					if($material_type != 'LIVE SALES' && $material_type != 'SUPERMARKET' && $material_type != 'TRADE DISTRIBUTOR'){
						$sales_unit_id = $check_material['info']->sales_unit_id;
						$unit_id = $check_material['info']->unit_id;
						$equivalent_unit = $check_material['info']->equivalent_unit * $qty;

						if($unit_id == $sales_unit_id){
							$sales = $qty * $asp;
							$data['result'] = 1;
							$data['info'] = $sales;
							$data['equivalent_unit'] = $equivalent_unit;
						}else{
							$result = $this->admin->check_data('material_unit_tbl', array('material_id' => $material_id, 'material_unit_status' => 1), TRUE);
							$sales = $qty * $result['info']->unit_conversation;
							$data['result'] = 1;
							$data['info'] = $sales;
							$data['equivalent_unit'] = $equivalent_unit;
						}
					}else{
						$sales_unit_id = $check_material['info']->sales_unit_id;
						$unit_id = $check_material['info']->unit_id;
						$equivalent_unit = $check_material['info']->equivalent_unit * $qty;

						if($unit_id == $sales_unit_id){

							$sales = $qty * $asp;
							$data['result'] = 1;
							$data['info'] = $sales;
							$data['equivalent_unit'] = $equivalent_unit;
						}else{
							$check_outlet = $this->admin->check_data('outlet_tbl', array('outlet_id' => $outlet_id, 'outlet_status_id' => 1), TRUE);
							if($check_outlet['result'] == TRUE ){
								$bc_id = $check_outlet['info']->bc_id;
								$result = $this->admin->check_data('broiler_tbl', array('bc_id' => $bc_id, 'broiler_status' => 1), TRUE);
								$sales = $asp * ($qty *($result['info']->live_broiler * $result['info']->carcass));
								$data['result'] = 1;
								$data['info'] = $sales;
								$data['equivalent_unit'] = $equivalent_unit;
							}
						}
					}
				}else{
					$data['result'] = 0;
				}
			}else{
				$data['result'] = 0;
			}
			echo json_encode($data);
		}
	}

	public function add_budget(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$outlet_id = decode($this->input->post('id'));
			$date = $this->input->post('');
			if(!empty($id)){
				$check_id = $this->admin->check_data('brand_material_tbl', array('brand_material_id' => $id), TRUE);

				if($check_id['result'] == TRUE){
					$brand_id = $check_id['info']->brand_id;
					$set = array(
						'brand_material_status' => 0
					);

					$where = array('brand_material_id' => $id);
					$result = $this->admin->update_data('brand_material_tbl', $set, $where);
					$msg = '<div class="alert alert-success">Brand material remove.</div>';
				}else{

				}
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/view-material/' . encode($brand_id));
		}else{
			redirect('admin');
		}
	}

	public function preview_budget($id){
		$info = $this->_require_login();
		$data['title'] = 'Preview Budget';
		$data['id'] = $id;
		$budget_id = decode($id);
		$join_history = array(
			'outlet_tbl b' => 'a.outlet_id=b.outlet_id AND a.budget_id=' . $budget_id,
			'bc_tbl c' => 'c.bc_id=c.bc_id AND budget_status=1'
		);
		$check_budget = $this->admin->check_join('budget_tbl a', $join_history, TRUE);

		if($check_budget['result'] == TRUE){
			$data['outlet_name'] = $check_budget['info']->outlet_name;
			$data['bc_name'] = $check_budget['info']->bc_name;
			$data['outlet_id'] = encode($check_budget['info']->outlet_id);
			$data['budget_date'] = date('M - Y', strtotime($check_budget['info']->budget_date));
			$data['material'] = $this->admin->get_query("SELECT b.budget_material_id, h.bc_name, c.material_id, c.material_code, c.material_desc, e.ads, b.budget_qty, b.asp_qty, f.unit_name as base_unit_name, f.unit_id as base_unit, d.equivalent_unit, IFNULL((SELECT x.unit_conversation FROM material_unit_tbl as x WHERE x.material_bc_id=d.material_bc_id AND x.material_unit_status=1), 'N/A') as unit_conversation, IFNULL((SELECT x.unit_id FROM material_unit_tbl as x WHERE x.material_bc_id=d.material_bc_id AND x.material_unit_status=1), 'N/A') as second_unit, IFNULL((SELECT z.unit_name FROM material_unit_tbl as x, unit_tbl as z WHERE x.material_bc_id=d.material_bc_id AND x.unit_id=z.unit_id AND x.material_unit_status=1), 'N/A') as second_unit_name, d.sales_unit_id,(SELECT broiler_tbl.live_broiler*broiler_tbl.carcass FROM broiler_tbl WHERE broiler_tbl.bc_id=" . $check_budget['info']->outlet_id . ") as broiler, IF(e.material_type_name='DRESSED - OTHERS' || e.material_type_name='DRESSED - SUPERMARKET' || e.material_type_name='LIVE SALES', 'YES', 'NO') as checker, i.unit_name as sales_unit_name FROM budget_tbl as a, budget_material_tbl as b, material_tbl as c, material_bc_formula_tbl as d, material_type_tbl as e, unit_tbl as f, outlet_tbl as g, bc_tbl as h, unit_tbl as i WHERE a.budget_id=b.budget_id AND b.material_id=c.material_id AND c.material_id=d.material_id AND c.material_type_id=e.material_type_id AND d.unit_id=f.unit_id AND a.outlet_id=g.outlet_id AND g.bc_id=h.bc_id AND d.sales_unit_id=i.unit_id AND a.budget_status=1 AND b.budget_material_status=1 AND d.material_bc_status=1 AND a.budget_id=" . $budget_id);

			//$data['material'] = $this->admin->get_join('material_tbl a', $join, FALSE,'a.material_code ASC');
			$data['content'] = $this->load->view('admin/admin_budget_history_content', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}else{
			redirect('admin');
		}
	}

	/*Live Broiler*/
	public function live_broiler(){
		$info = $this->_require_login();
		$data['title'] = 'Live Broiler';
		$join = array(
			'bc_tbl b' => 'a.bc_id=b.bc_id AND a.broiler_status=1'
		);
		$data['broiler'] = $this->admin->get_join('broiler_tbl a', $join);
		$join_bc = array(
			'broiler_tbl b' => 'a.bc_id!=b.bc_id AND b.broiler_status=1'
		);
		$data['bc'] = $this->admin->get_query('SELECT * FROM bc_tbl WHERE bc_id NOT IN (SELECT bc_id FROM broiler_tbl WHERE broiler_status=1) ORDER BY bc_name ASC');
		$data['content'] = $this->load->view('admin/admin_broiler_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function add_broiler(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$bc_id = decode($this->input->post('bc'));
			$broiler = clean_data($this->input->post('broiler'));
			$carcass = clean_data($this->input->post('carcass'));

			$check_broiler = $this->admin->check_data('broiler_tbl', array('bc_id' =>  $bc_id, 'broiler_status' => 1));
			if($check_broiler == FALSE){
				$set = array(
					'bc_id' => $bc_id,
					'live_broiler' => $broiler,
					'carcass' => $carcass,
					'broiler_status' => 1
				);

				$result = $this->admin->insert_data('broiler_tbl', $set);
				if($result == TRUE){
					$msg = '<div class="alert alert-success">Live Broiler added.</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/live-broiler');
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/live-broiler');
				}
			}else{
				$msg = '<div class="alert alert-danger">Error already exist!</div>';
				$this->session->set_flashdata('message', $msg);
				//redirect('admin/live-broiler');
			}
		}else{
			redirect('admin');
		}
	}

	
	/*Material Type*/

	public function group(){
		$info = $this->_require_login();
		$data['title'] = 'Category';
		$data['group'] = $this->admin->get_data('material_type_tbl', array('material_type_status' => 1));
		$data['content'] = $this->load->view('admin/admin_group_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function add_group(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$group = clean_data($this->input->post('group'));
			$ads = clean_data($this->input->post('ads'));

			$check_name = $this->admin->check_data('material_type_tbl', array('material_type_name' =>  $group));
			if($check_name == FALSE){
				$set = array(
					'material_type_name' => $group,
					'ads' => $ads,
					'material_type_status' => 1
				);

				$result = $this->admin->insert_data('material_type_tbl', $set);
				if($result == TRUE){
					$msg = '<div class="alert alert-success">Material Group added.</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/group');
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/group');
				}
			}else{
				$msg = '<div class="alert alert-danger">Error Material Group already exist!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/group');
			}
		}else{
			redirect('admin');
		}
	}

	public function modal_group(){
		$info = $this->_require_login();
		$id = decode($this->input->post('id'));

		$check_category = $this->admin->check_data('material_type_tbl', array('material_type_id' => $id), TRUE);
		
		if($check_category['result'] == TRUE){
			$data['result'] = 1;
			$data['info'] = array(
				'id' => encode($check_category['info']->material_type_id),
				'group' => $check_category['info']->material_type_name,
				'ads'=> $check_category['info']->ads
			);

			
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_group(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$name = clean_data($this->input->post('group'));
			/*$ads = clean_data($this->input->post('ads'));*/

			$check_name = $this->admin->check_data('material_type_tbl', array('material_type_name' => $name), TRUE);
			if($check_name['result'] == FALSE || $id == $check_name['info']->material_type_id){
				$set = array(
					'material_type_name' => $name,
					/*'ads' => $ads*/
				);

				$where = array('material_type_id' => $id);

				$result = $this->admin->update_data('material_type_tbl', $set, $where);
				if($result == TRUE){
					$msg = '<div class="alert alert-success">Material Group updated.</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/group');
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/group');
				}
			}
		}else{
			redirect('admin');
		}
	}

	public function modal_category($id){
		$info = $this->_require_login();
		$category_id = decode($id);

		$check_category = $this->admin->check_data('category_tbl', array('category_id' => $category_id), TRUE);
		

		if($check_category['result'] == TRUE){
			$data['result'] = 1;
			$data['info'] = array(
				'category_id' => encode($check_category['info']->category_id),
				'category_name' => $check_category['info']->category_name
			);

			
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_category(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$category_name = clean_data($this->input->post('category'));

			$check_name = $this->admin->check_data('category_tbl', array('category_name' => $category_name), TRUE);
			if($check_name['result'] == FALSE || $id == $check_name['info']->category_id){
				$set = array(
					'category_name' => $category_name
				);

				$where = array('category_id' => $id);

				$result = $this->admin->update_data('category_tbl', $set, $where);
				if($result == TRUE){
					$msg = '<div class="alert alert-success">Category updated.</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/category');
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/category');
				}
			}
		}else{
			redirect('admin');
		}
	}


	/*Business Center*/

	public function business_center(){
		$info = $this->_require_login();
		$data['title'] = 'Business Center';
		$data['region'] = $this->admin->get_data('region_tbl', array('region_status' => 1));

		$join_region = array('region_tbl b' => 'a.region_id = b.region_id AND a.bc_status = 1');
		$data['business'] = $this->admin->get_join('bc_tbl a', $join_region, FALSE, FALSE, FALSE, '*, a.cost_center_code as cost_center');
		$data['content'] = $this->load->view('admin/admin_business_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function add_business(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$business_name = clean_data($this->input->post('business'));
			$bc_code = clean_data($this->input->post('bc_code'));
			$cost_center_code = clean_data($this->input->post('cost_center'));
			$region = decode(clean_data($this->input->post('region')));

			$check_name = $this->admin->check_data('bc_tbl', array('bc_name' =>  $business_name));
			if($check_name == FALSE){
				$join_region = array(
					'cost_center_tbl b' => 'a.cost_center_code = b.cost_center_code AND b.cost_center_status = 1 AND a.region_id = ' . $region,
				);

				$check_region = $this->admin->check_join('region_tbl a', $join_region, TRUE);

				if($check_region['result'] == TRUE){
					$parent_id = $check_region['info']->cost_center_id;
					$set = array(
						'region_id' => $region,
						'center_id' => 1,
						'bc_name' => strtoupper($business_name),
						'bc_code' => $bc_code,
						'cost_center_code' => $cost_center_code,
					);

					$result = $this->admin->insert_data('bc_tbl', $set);
					if($result == TRUE){

						$set_cost_center = array(
							'parent_id' => $parent_id,
							'cost_center_type_id' => 1,
							'user_id' => $user_id,
							'cost_center_code' => strtoupper($cost_center_code),
							'cost_center_desc' => strtoupper($business_name),
							'cost_center_added' => date_now(),
							'cost_center_status' => 1
						);

						$insert_cost_center = $this->admin->insert_data('cost_center_tbl', $set_cost_center);
						if($insert_cost_center == TRUE){
							$msg = '<div class="alert alert-success">Business center added.</div>';
							$this->session->set_flashdata('message', $msg);
							redirect('admin/business-center');
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect('admin/business-center');	
						}
					}else{
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/business-center');
					}
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/business-center');
				}
			}else{
				$msg = '<div class="alert alert-danger">Error business center already exist.</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/business-center');
			}
		}else{
			redirect('admin');
		}
	}

	public function modal_business($id){
		$info = $this->_require_login();
		$category_id = decode($id);

		$check_category = $this->admin->check_data('business_center_tbl', array('bc_id' => $category_id), TRUE);
		if($check_category['result'] == TRUE){
			$data['result'] = 1;
			$data['info'] = array(
				'bc_code' => $check_category['info']->bc_code,
				'bc_id' => encode($check_category['info']->bc_id),
				'bc_name' => $check_category['info']->bc_name
			);

			
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_business(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$bc_name = clean_data($this->input->post('business'));
			$bc_code = clean_data($this->input->post('bc_code'));

			$check_name = $this->admin->check_data('business_center_tbl', array('bc_name'  => $bc_name), TRUE);
			if($check_name['result'] == FALSE || $id == $check_name['info']->bc_id){
				$check_code = $this->admin->check_data('business_center_tbl', array('bc_code'  => $bc_code), TRUE);
				if($check_code['result'] == FALSE || $id == $check_code['info']->bc_id){
					$set = array(
						'bc_code' => $bc_code,
						'bc_name' => strtoupper($bc_name)
					);

					$where = array('bc_id' => $id);

					$result = $this->admin->update_data('business_center_tbl', $set, $where);
					if($result == TRUE){
						$msg = '<div class="alert alert-success">Business center updated.</div>';
					}else{
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error Business Center Code already exist!</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error Business Center already exist!</div>';
			}
			$this->session->set_flashdata('message', $msg);
			redirect('admin/business-center');
		}else{
			redirect('admin');
		}
	}


	/*Users*/

	public function users(){
		$info = $this->_require_login();
		$data['title'] = 'Users';
		$data['users'] = $this->admin->get_data('user_tbl a', array('user_type_id ' => 1, 'user_status_id' => 1));

		$join_bc = array(
			'user_bc_tbl b' => 'a.user_id = b.user_id AND b.user_bc_status = 1 AND a.user_status_id = 1',
			'bc_tbl c' => 'b.bc_id = c.bc_id'
		);

		$data['user_bc'] = $this->admin->get_join('user_tbl a', $join_bc); 

		$join_unit = array(
			'user_unit_tbl b' => 'a.user_id = b.user_id AND b.user_unit_status = 1 AND a.user_status_id = 1',
			'company_unit_tbl c' => 'b.company_unit_id = c.company_unit_id',
		);

		$data['user_unit'] = $this->admin->get_join('user_tbl a', $join_unit);

		$join_region = array(
			'user_region_tbl b' => 'a.user_id = b.user_id AND b.user_region_status = 1 AND a.user_status_id = 1',
			'region_tbl c' => 'b.region_id = c.region_id'
		);

		$data['user_region'] = $this->admin->get_join('user_tbl a', $join_region); 

		

		$data['user_national'] = $this->admin->get_data('user_tbl a', array('user_type_id' => 7, 'user_status_id' => 1)); 

		$data['business'] = $this->admin->get_data('bc_tbl', array('bc_status' => 1), FALSE, NULL, 'bc_name ASC');
		$data['region'] = $this->admin->get_data('region_tbl', array('region_status' => 1), FALSE, NULL, 'region_name ASC');
		$data['unit'] = $this->admin->get_data('company_unit_tbl', array('company_unit_status' => 1), FALSE, NULL, 'company_unit_name ASC');

		$data['ahg'] = $this->admin->get_data('user_tbl a', array('user_type_id ' => 4, 'user_status_id' => 1));
		$data['prod'] = $this->admin->get_data('user_tbl a', array('user_type_id ' => 5, 'user_status_id' => 1));

		$data['content'] = $this->load->view('admin/admin_user_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function add_admin_user(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$user_fname = clean_data($this->input->post('fname'));
			$user_lname = clean_data($this->input->post('lname'));
			$user_email = clean_data($this->input->post('email'));
			$user_password = clean_data($this->input->post('password'));
			$emp_id = clean_data($this->input->post('emp_id'));

			if(!empty($user_fname) && !empty($user_lname) && !empty($user_email) && !empty($user_password) && !empty($emp_id)){
				$check_email = $this->admin->check_data('user_tbl', array('user_email' =>  $user_email));
				if($check_email == FALSE){
					$check_empID = $this->admin->check_data('user_tbl', array('employee_no' =>  $emp_id));
					if($check_empID == FALSE){

						$set = array(
							'user_fname' => $user_fname,
							'user_lname' => $user_lname,
							'user_email' => $user_email,
							'user_password' => encode($user_password),
							'employee_no' => $emp_id,
							'user_type_id' => 1
						);

						$result = $this->admin->insert_data('user_tbl', $set, TRUE);

						if($result == TRUE){
							$msg = '<div class="alert alert-success">Admin User successfully added.</div>';
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error employee no. already exist.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error email already exist.</div>';
				}

				
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all fields are fill up.</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/users');
		}else{
			redirect('admin');
		}
	}

	public function add_national_user(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$user_fname = clean_data($this->input->post('fname'));
			$user_lname = clean_data($this->input->post('lname'));
			$user_email = clean_data($this->input->post('email'));
			$user_password = clean_data($this->input->post('password'));
			$emp_id = clean_data($this->input->post('emp_id'));

			if(!empty($user_fname) && !empty($user_lname) && !empty($user_email) && !empty($user_password) && !empty($emp_id)){
				$check_email = $this->admin->check_data('user_tbl', array('user_email' =>  $user_email));
				if($check_email == FALSE){
					$check_empID = $this->admin->check_data('user_tbl', array('employee_no' =>  $emp_id));
					if($check_empID == FALSE){

						$set = array(
							'user_fname' => $user_fname,
							'user_lname' => $user_lname,
							'user_email' => $user_email,
							'user_password' => encode($user_password),
							'employee_no' => $emp_id,
							'user_type_id' => 7,
							'user_reset' => 1
						);

						$result = $this->admin->insert_data('user_tbl', $set, TRUE);

						if($result == TRUE){
							$msg = '<div class="alert alert-success">National User successfully added.</div>';
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error employee no. already exist.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error email already exist.</div>';
				}

				
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all fields are fill up.</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/users');
		}else{
			redirect('admin');
		}
	}

	public function add_bc_user(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$user_fname = clean_data($this->input->post('fname'));
			$user_lname = clean_data($this->input->post('lname'));
			$user_email = clean_data($this->input->post('email'));
			$user_password = clean_data($this->input->post('password'));
			$emp_id = clean_data($this->input->post('emp_id'));
			$bc_id = clean_data(decode($this->input->post('business')));

			if(!empty($user_fname) && !empty($user_lname) && !empty($user_email) && !empty($user_password) && !empty($emp_id) && !empty($bc_id)){
				$check_email = $this->admin->check_data('user_tbl', array('user_email' =>  $user_email));
				if($check_email == FALSE){
					$check_empID = $this->admin->check_data('user_tbl', array('employee_no' =>  $emp_id));
					if($check_empID == FALSE){

						$set = array(
							'user_fname' => $user_fname,
							'user_lname' => $user_lname,
							'user_email' => $user_email,
							'user_password' => encode($user_password),
							'employee_no' => $emp_id,
							'user_reset' => 1,
							'user_type_id' => 2
						);

						$result_user = $this->admin->insert_data('user_tbl', $set, TRUE);
						$user_id = $result_user['id'];
						$set_bc = array(
							'user_id' => $user_id,
							'bc_id' => $bc_id,
							'user_bc_status' => 1
						);

						$result = $this->admin->insert_data('user_bc_tbl', $set_bc);

						if($result == TRUE){
							$msg = '<div class="alert alert-success">Business Center User successfully added.</div>';
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error employee no. already exist.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error email already exist.</div>';
				}

				
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all fields are fill up.</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/users');
		}else{
			redirect('admin');
		}
	}

	public function add_regional_user(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$user_fname = clean_data($this->input->post('fname'));
			$user_lname = clean_data($this->input->post('lname'));
			$user_email = clean_data($this->input->post('email'));
			$user_password = clean_data($this->input->post('password'));
			$emp_id = clean_data($this->input->post('emp_id'));
			$region_id = clean_data(decode($this->input->post('region')));

			if(!empty($user_fname) && !empty($user_lname) && !empty($user_email) && !empty($user_password) && !empty($emp_id) && !empty($region_id)){
				$check_email = $this->admin->check_data('user_tbl', array('user_email' =>  $user_email));
				if($check_email == FALSE){
					$check_empID = $this->admin->check_data('user_tbl', array('employee_no' =>  $emp_id));
					if($check_empID == FALSE){

						$set = array(
							'user_fname' => $user_fname,
							'user_lname' => $user_lname,
							'user_email' => $user_email,
							'user_password' => encode($user_password),
							'employee_no' => $emp_id,
							'user_reset' => 1,
							'user_type_id' => 6
						);

						$result_user = $this->admin->insert_data('user_tbl', $set, TRUE);
						$user_id = $result_user['id'];
						$set_bc = array(
							'user_id' => $user_id,
							'region_id' => $region_id,
							'user_region_status' => 1
						);

						$result = $this->admin->insert_data('user_region_tbl', $set_bc);

						if($result == TRUE){
							$msg = '<div class="alert alert-success">Region User successfully added.</div>';
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error employee no. already exist.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error email already exist.</div>';
				}

				
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all fields are fill up.</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/users');
		}else{
			redirect('admin');
		}
	}

	public function add_unit_user(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$user_fname = clean_data($this->input->post('fname'));
			$user_lname = clean_data($this->input->post('lname'));
			$user_email = clean_data($this->input->post('email'));
			$user_password = clean_data($this->input->post('password'));
			$emp_id = clean_data($this->input->post('emp_id'));
			$unit_id = clean_data(decode($this->input->post('unit')));

			if(!empty($user_fname) && !empty($user_lname) && !empty($user_email) && !empty($user_password) && !empty($emp_id) && !empty($unit_id)){
				$check_email = $this->admin->check_data('user_tbl', array('user_email' =>  $user_email));
				if($check_email == FALSE){
					$check_empID = $this->admin->check_data('user_tbl', array('employee_no' =>  $emp_id));
					if($check_empID == FALSE){

						$set = array(
							'user_fname' => $user_fname,
							'user_lname' => $user_lname,
							'user_email' => $user_email,
							'user_password' => encode($user_password),
							'employee_no' => $emp_id,
							'user_reset' => 1,
							'user_type_id' => 3
						);

						$result_user = $this->admin->insert_data('user_tbl', $set, TRUE);
						$user_id = $result_user['id'];
						$set_unit = array(
							'user_id' => $user_id,
							'company_unit_id' => $unit_id,
							'user_unit_status' => 1
						);

						$result = $this->admin->insert_data('user_unit_tbl', $set_unit);

						if($result == TRUE){
							$msg = '<div class="alert alert-success">Unit User successfully added.</div>';
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error employee no. already exist.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error email already exist.</div>';
				}

				
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all fields are fill up.</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/users');
		}else{
			redirect('admin');
		}
	}

	public function add_ahg_user(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$user_fname = clean_data($this->input->post('fname'));
			$user_lname = clean_data($this->input->post('lname'));
			$user_email = clean_data($this->input->post('email'));
			$user_password = clean_data($this->input->post('password'));
			$emp_id = clean_data($this->input->post('emp_id'));

			if(!empty($user_fname) && !empty($user_lname) && !empty($user_email) && !empty($user_password) && !empty($emp_id)){
				$check_email = $this->admin->check_data('user_tbl', array('user_email' =>  $user_email));
				if($check_email == FALSE){
					$check_empID = $this->admin->check_data('user_tbl', array('employee_no' =>  $emp_id));
					if($check_empID == FALSE){

						$set = array(
							'user_fname' => $user_fname,
							'user_lname' => $user_lname,
							'user_email' => $user_email,
							'user_password' => encode($user_password),
							'employee_no' => $emp_id,
							'user_reset' => 1,
							'user_type_id' => 4
						);

						$result = $this->admin->insert_data('user_tbl', $set, TRUE);

						if($result == TRUE){
							$msg = '<div class="alert alert-success">AHG User successfully added.</div>';
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error employee no. already exist.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error email already exist.</div>';
				}

				
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all fields are fill up.</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/users');
		}else{
			redirect('admin');
		}
	}

	public function add_prod_user(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$user_fname = clean_data($this->input->post('fname'));
			$user_lname = clean_data($this->input->post('lname'));
			$user_email = clean_data($this->input->post('email'));
			$user_password = clean_data($this->input->post('password'));
			$emp_id = clean_data($this->input->post('emp_id'));

			if(!empty($user_fname) && !empty($user_lname) && !empty($user_email) && !empty($user_password) && !empty($emp_id)){
				$check_email = $this->admin->check_data('user_tbl', array('user_email' =>  $user_email));
				if($check_email == FALSE){
					$check_empID = $this->admin->check_data('user_tbl', array('employee_no' =>  $emp_id));
					if($check_empID == FALSE){

						$set = array(
							'user_fname' => $user_fname,
							'user_lname' => $user_lname,
							'user_email' => $user_email,
							'user_password' => encode($user_password),
							'employee_no' => $emp_id,
							'user_reset' => 1,
							'user_type_id' => 5
						);

						$result = $this->admin->insert_data('user_tbl', $set, TRUE);

						if($result == TRUE){
							$msg = '<div class="alert alert-success">Production User successfully added.</div>';
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error employee no. already exist.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error email already exist.</div>';
				}

				
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all fields are fill up.</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/users');
		}else{
			redirect('admin');
		}
	}

	public function modal_user_admin($id){
		$info = $this->_require_login();
		$user_id = decode($id);

		$check_user = $this->admin->check_data('user_tbl', array('user_id' => $user_id), TRUE);

		if($check_user['result'] == TRUE){
			$data['result'] = 1;

			$data['info'] = array(
				'id' => encode($check_user['info']->user_id),
				'fname' => $check_user['info']->user_fname,
				'lname' => $check_user['info']->user_lname,
				'email' => $check_user['info']->user_email,
				'emp_no' => $check_user['info']->employee_no,
			);
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_user_admin(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$user_id = decode($this->input->post('id'));
			$user_fname = clean_data($this->input->post('fname'));
			$user_lname = clean_data($this->input->post('lname'));
			$user_email = clean_data($this->input->post('email'));
			$emp_id = clean_data($this->input->post('emp_id'));
			$bc_id = clean_data(decode($this->input->post('business')));
			$user_type_id = clean_data(decode(clean_data($this->input->post('type'))));

			if(!empty($user_fname) && !empty($user_lname) && !empty($user_email) && !empty($emp_id)){
				$check_email = $this->admin->check_data('user_tbl', array('user_email' =>  $user_email, 'user_id != ' => $user_id), TRUE);
				if($check_email['result'] == FALSE){
					$check_empID = $this->admin->check_data('user_tbl', array('employee_no' =>  $emp_id, 'user_id != ' => $user_id), TRUE);
					if($check_empID['result'] == FALSE){

						$set = array(
							'user_fname' => $user_fname,
							'user_lname' => $user_lname,
							'user_email' => $user_email,
							'employee_no' => $emp_id
						);

						$result = $this->admin->update_data('user_tbl', $set, array('user_id' => $user_id));
						if($result == TRUE){
							$msg = '<div class="alert alert-success">User Updated.</div>';
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error employee no. already exist.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error email already exist.</div>';
				}

				
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all fields are fill up.</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/users');
		}else{
			redirect('admin');
		}
	}

	public function modal_user_bc($id){
		$info = $this->_require_login();
		$user_id = decode($id);

		$join_user = array('user_bc_tbl b' => 'a.user_id = b.user_id AND b.user_bc_status = 1 AND a.user_id = ' . $user_id);
		$check_user = $this->admin->check_join('user_tbl a', $join_user, TRUE);

		if($check_user['result'] == TRUE){
			$data['result'] = 1;

			$business = $this->admin->get_data('bc_tbl', array('bc_status' => 1));
			$bc = '<option value="">Select...</option>';
			foreach($business as $row):
				if($check_user['info']->bc_id == $row->bc_id){
					$bc .= '<option value="' . encode($row->bc_id) . '" selected>' . $row->bc_name . '</option/>';
				}else{
					$bc .= '<option value="' . encode($row->bc_id) . '">' . $row->bc_name . '</option/>';
				}
			endforeach;

			$data['info'] = array(
				'id' => encode($check_user['info']->user_id),
				'fname' => $check_user['info']->user_fname,
				'lname' => $check_user['info']->user_lname,
				'email' => $check_user['info']->user_email,
				'emp_no' => $check_user['info']->employee_no,
				'bc' => $bc
			);

			
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_user_bc(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$user_id = decode($this->input->post('id'));
			$user_fname = clean_data($this->input->post('fname'));
			$user_lname = clean_data($this->input->post('lname'));
			$user_email = clean_data($this->input->post('email'));
			$emp_id = clean_data($this->input->post('emp_id'));
			$bc_id = clean_data(decode($this->input->post('bc')));

			if(!empty($user_fname) && !empty($user_lname) && !empty($user_email) && !empty($emp_id) && !empty($bc_id)){
				$check_email = $this->admin->check_data('user_tbl', array('user_email' =>  $user_email, 'user_id !=' => $user_id), TRUE);
				if($check_email['result'] == FALSE){
					$check_empID = $this->admin->check_data('user_tbl', array('employee_no' =>  $emp_id, 'user_id !=' => $user_id), TRUE);
					if($check_empID['result'] == FALSE){

						$this->db->trans_start();
						$set = array(
							'user_fname' => $user_fname,
							'user_lname' => $user_lname,
							'user_email' => $user_email,
							'employee_no' => $emp_id
						);

						$result = $this->admin->update_data('user_tbl', $set, array('user_id' => $user_id));

						$remove_bc = $this->admin->update_data('user_bc_tbl', array('user_bc_status' => 0), array('user_id' => $user_id));

						$set_user_bc = array(
							'user_id' => $user_id,
							'bc_id' => $bc_id,
							'user_bc_status' => 1
						);

						$insert_user_bc = $this->admin->insert_data('user_bc_tbl', $set_user_bc);
						
						if($result == TRUE){

							if($this->db->trans_status() === FALSE){
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error please try again!</div>';
							}else{
								$this->db->trans_commit();
								$msg = '<div class="alert alert-success">User updated.</div>';
							}
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error employee no. already exist.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error email already exist.</div>';
				}

				
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all fields are fill up.</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/users');
		}else{
			redirect('admin');
		}
	}

	public function modal_user_region($id){
		$info = $this->_require_login();
		$user_id = decode($id);

		$join_user = array('user_region_tbl b' => 'a.user_id = b.user_id AND b.user_region_status = 1 AND a.user_id = ' . $user_id);
		$check_user = $this->admin->check_join('user_tbl a', $join_user, TRUE);

		if($check_user['result'] == TRUE){
			$data['result'] = 1;

			$business = $this->admin->get_data('region_tbl', array('region_status' => 1));
			$region = '<option value="">Select...</option>';
			foreach($business as $row):
				if($check_user['info']->region_id == $row->region_id){
					$region .= '<option value="' . encode($row->region_id) . '" selected>' . $row->region_name . '</option/>';
				}else{
					$region .= '<option value="' . encode($row->region_id) . '">' . $row->region_name . '</option/>';
				}
			endforeach;

			$data['info'] = array(
				'id' => encode($check_user['info']->user_id),
				'fname' => $check_user['info']->user_fname,
				'lname' => $check_user['info']->user_lname,
				'email' => $check_user['info']->user_email,
				'emp_no' => $check_user['info']->employee_no,
				'region' => $region
			);

			
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_user_region(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$user_id = decode($this->input->post('id'));
			$user_fname = clean_data($this->input->post('fname'));
			$user_lname = clean_data($this->input->post('lname'));
			$user_email = clean_data($this->input->post('email'));
			$emp_id = clean_data($this->input->post('emp_id'));
			$region_id = clean_data(decode($this->input->post('region')));

			if(!empty($user_fname) && !empty($user_lname) && !empty($user_email) && !empty($emp_id) && !empty($region_id)){
				$check_email = $this->admin->check_data('user_tbl', array('user_email' =>  $user_email, 'user_id !=' => $user_id), TRUE);
				if($check_email['result'] == FALSE){
					$check_empID = $this->admin->check_data('user_tbl', array('employee_no' =>  $emp_id, 'user_id !=' => $user_id), TRUE);
					if($check_empID['result'] == FALSE){

						$this->db->trans_start();
						$set = array(
							'user_fname' => $user_fname,
							'user_lname' => $user_lname,
							'user_email' => $user_email,
							'employee_no' => $emp_id
						);

						$result = $this->admin->update_data('user_tbl', $set, array('user_id' => $user_id));

						$remove_region = $this->admin->update_data('user_region_tbl', array('user_region_status' => 0), array('user_id' => $user_id));

						$set_user_region = array(
							'user_id' => $user_id,
							'region_id' => $region_id,
							'user_region_status' => 1
						);

						$insert_user_region = $this->admin->insert_data('user_region_tbl', $set_user_region);
						
						if($result == TRUE){

							if($this->db->trans_status() === FALSE){
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error please try again!</div>';
							}else{
								$this->db->trans_commit();
								$msg = '<div class="alert alert-success">User updated.</div>';
							}
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error employee no. already exist.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error email already exist.</div>';
				}

				
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all fields are fill up.</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/users');
		}else{
			redirect('admin');
		}
	}

	public function modal_user_unit($id){
		$info = $this->_require_login();
		$user_id = decode($id);

		$join_user = array('user_unit_tbl b' => 'a.user_id = b.user_id AND b.user_unit_status = 1 AND a.user_id = ' . $user_id);
		$check_user = $this->admin->check_join('user_tbl a', $join_user, TRUE);

		if($check_user['result'] == TRUE){
			$data['result'] = 1;

			$unit = $this->admin->get_data('company_unit_tbl', array('company_unit_status' => 1));
			$unit_data = '<option value="">Select...</option>';
			foreach($unit as $row):
				if($check_user['info']->company_unit_id == $row->company_unit_id){
					$unit_data .= '<option value="' . encode($row->company_unit_id) . '" selected>' . $row->company_unit_name . '</option/>';
				}else{
					$unit_data .= '<option value="' . encode($row->company_unit_id) . '">' . $row->company_unit_name . '</option/>';
				}
			endforeach;

			$data['info'] = array(
				'id' => encode($check_user['info']->user_id),
				'fname' => $check_user['info']->user_fname,
				'lname' => $check_user['info']->user_lname,
				'email' => $check_user['info']->user_email,
				'emp_no' => $check_user['info']->employee_no,
				'unit' => $unit_data
			);

			
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_user_unit(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$user_id = decode($this->input->post('id'));
			$user_fname = clean_data($this->input->post('fname'));
			$user_lname = clean_data($this->input->post('lname'));
			$user_email = clean_data($this->input->post('email'));
			$emp_id = clean_data($this->input->post('emp_id'));
			$unit_id = clean_data(decode($this->input->post('unit')));

			if(!empty($user_fname) && !empty($user_lname) && !empty($user_email) && !empty($emp_id) && !empty($unit_id)){
				$check_email = $this->admin->check_data('user_tbl', array('user_email' =>  $user_email, 'user_id !=' => $user_id), TRUE);
				if($check_email['result'] == FALSE){
					$check_empID = $this->admin->check_data('user_tbl', array('employee_no' =>  $emp_id, 'user_id !=' => $user_id), TRUE);
					if($check_empID['result'] == FALSE){

						$this->db->trans_start();
						$set = array(
							'user_fname' => $user_fname,
							'user_lname' => $user_lname,
							'user_email' => $user_email,
							'employee_no' => $emp_id
						);

						$result = $this->admin->update_data('user_tbl', $set, array('user_id' => $user_id));
						$remove_unit = $this->admin->update_data('user_unit_tbl', array('user_unit_status' => 0), array('user_id' => $user_id));

						$set_user_unit = array(
							'user_id' => $user_id,
							'company_unit_id' => $unit_id,
							'user_unit_status' => 1
						);

						$insert_user_unit = $this->admin->insert_data('user_unit_tbl', $set_user_unit);
						
						if($result == TRUE){
							if($this->db->trans_status() === FALSE){
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error please try again!</div>';
							}else{
								$this->db->trans_commit();
								$msg = '<div class="alert alert-success">User Unit updated.</div>';
							}
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error employee no. already exist.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error email already exist.</div>';
				}

				
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all fields are fill up.</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/users');
		}else{
			redirect('admin');
		}
	}

	public function update_user(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$user_id = decode($this->input->post('id'));
			$user_fname = clean_data($this->input->post('fname'));
			$user_lname = clean_data($this->input->post('lname'));
			$user_email = clean_data($this->input->post('email'));
			$emp_id = clean_data($this->input->post('emp_id'));
			$bc_id = clean_data(decode($this->input->post('business')));
			$user_type_id = clean_data(decode(clean_data($this->input->post('type'))));

			if(!empty($user_fname) && !empty($user_lname) && !empty($user_email) && !empty($emp_id) && !empty($bc_id) && !empty($user_type_id)){
				$check_email = $this->admin->check_data('user_tbl', array('user_email' =>  $user_email), TRUE);
				$check_email['info']->user_id . '|' . $user_id; 
				if($check_email['result'] == FALSE || $user_id == $check_email['info']->user_id){
					$check_empID = $this->admin->check_data('user_tbl', array('emp_no' =>  $emp_id), TRUE);
					print_r($check_empID);
					if($check_empID['result'] == FALSE || $check_empID['info']->emp_no == $emp_id){

						$set = array(
							'user_fname' => $user_fname,
							'user_lname' => $user_lname,
							'user_email' => $user_email,
							'emp_no' => $emp_id,
							'bc_id' => $bc_id,
							'user_type_id' => $user_type_id
						);

						$result = $this->admin->update_data('user_tbl', $set, array('user_id' => $user_id));
						if($result == TRUE){
							$msg = '<div class="alert alert-success">User updated.</div>';
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error employee no. already exist.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error email already exist.</div>';
				}

				
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all fields are fill up.</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/users');
		}else{
			redirect('admin');
		}
	}

	public function update_password(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$password = clean_data($this->input->post('password'));
			$password2 = clean_data($this->input->post('password2'));

			if(!empty($id) && !empty($password) && !empty($password2)){
				if($password == $password2){
					$check_name = $this->admin->check_data('user_tbl', array('user_id' => $id), TRUE);
					if($check_name['result'] == TRUE){
						$set = array(
							'user_password' => encode($password),
							'user_reset' => 1
						);

						$where = array('user_id' => $id);
						$result = $this->admin->update_data('user_tbl', $set, $where);
						if($result == TRUE){
							$msg = '<div class="alert alert-success">User password has been reset.</div>';
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error password didnt match.</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all fields are fill up.</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/users');
		}else{
			redirect('admin');
		}
	}

	public function logs(){
		$info = $this->_require_login();
		$data['title'] = 'Logs';

		$join_logs = array('user_tbl b' => 'a.user_id=b.user_id');
		$data['logs'] = $this->admin->get_join('user_login_tbl a', $join_logs, FALSE, 'a.user_login_date DESC');
		$data['content'] = $this->load->view('admin/admin_logs_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}


	/*Asset Group*/

	public function asset_group(){
		$info = $this->_require_login();
		$data['title'] = 'Asset Group';

		$data['asset_group'] = $this->admin->get_data('asset_group_tbl', 'ag_status=1');

		$join_sub = array('asset_group_tbl b' => 'a.ag_id=b.ag_id');
		$data['sub_group'] = $this->admin->get_join('asset_subgroup_tbl a', $join_sub, FALSE, 'asg_status ASC, ag_name, asg_name');
		$data['content'] = $this->load->view('admin/admin_asset_group_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function add_asset_group(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$asset_group = strtoupper(clean_data($this->input->post('asset_group')));
			$asset_code = strtoupper(clean_data($this->input->post('asset_code')));
			$asset_color = strtoupper(clean_data($this->input->post('asset_color')));

			if(!empty($asset_group) && !empty($asset_code)){
				$check_asset_group = $this->admin->check_data('asset_group_tbl', array('ag_name' => $asset_group));
				if($check_asset_group == FALSE){
					$check_asset_code = $this->admin->check_data('asset_group_tbl', array('ag_gl_code' => $asset_code));
					if($check_asset_group == FALSE){
						$set = array(
							'ag_name' => $asset_group,
							'ag_gl_code' => $asset_code,
							'ag_color' => $asset_color,
							'ag_status' => 1
						);

						$result = $this->admin->insert_data('asset_group_tbl', $set);
						if($result == TRUE){
							$msg = '<div class="alert alert-success">Asset group added.</div>';
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error asset code exist.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error asset group exist.</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all fields are fill up.</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/asset-group');
		}else{
			redirect('admin');
		}
	}

	public function modal_asset_group(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));

			$check_asset = $this->admin->check_data('asset_group_tbl', array('ag_id' => $id), TRUE);
			
			if($check_asset['result'] == TRUE){
				$data['result'] = 1;
				$data['info'] = array(
					'id' => encode($check_asset['info']->ag_id),
					'name' => $check_asset['info']->ag_name,
					'code'=> $check_asset['info']->ag_gl_code,
					'color' => $check_asset['info']->ag_color,
				);			
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_asset_group(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$name = strtoupper(clean_data($this->input->post('asset_group')));
			$code = strtoupper(clean_data($this->input->post('asset_code')));
			$color = strtoupper(clean_data($this->input->post('asset_color')));

			if(!empty($id) && !empty($name) && !empty($code)){
				$check_name = $this->admin->check_data('asset_group_tbl', array('ag_name' => $name, 'ag_id !=' => $id), TRUE);
				if($check_name['result'] == FALSE){
					$set = array(
						'ag_name' => $name,
						'ag_gl_code' => $code,
						'ag_color' => $color
					);

					$where = array('ag_id' => $id);

					$result = $this->admin->update_data('asset_group_tbl', $set, $where);
					if($result == TRUE){
						$msg = '<div class="alert alert-success">Asset Group updated.</div>';
						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}else{
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}
				}else{
					$msg = '<div class="alert alert-danger">Error Asset Group already exist!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure required fields is not empty!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}
		}else{
			redirect('admin');
		}
	}

	public function add_asset_subgroup(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$asset_group = clean_data(decode($this->input->post('asset_group')));
			$asset_subgroup = strtoupper(clean_data($this->input->post('asset_subgroup')));
			$asset_subgroup_price = strtoupper(clean_data($this->input->post('asset_subgroup_price')));
			$asset_useful_life = strtoupper(clean_data($this->input->post('asset_useful_life')));

			if(!empty($asset_group) && !empty($asset_subgroup) && !empty($asset_subgroup_price) && !empty($asset_useful_life)){
				$check_asset_group = $this->admin->check_data('asset_group_tbl', array('ag_id' => $asset_group));
				if($check_asset_group == TRUE){
					$check_subgroup = $this->admin->check_data('asset_subgroup_tbl', array('asg_name' => $asset_subgroup));

					if($check_subgroup == FALSE){
						$set = array(
							'ag_id' => $asset_group,
							'user_id' => $user_id,
							'asg_name' => $asset_subgroup,
							'asg_price' => $asset_subgroup_price,
							'asg_lifespan' => $asset_useful_life,
							'asg_added' => date_now(),
							'asg_status' => 1
						);

						$result = $this->admin->insert_data('asset_subgroup_tbl', $set);
						if($result == TRUE){
							$msg = '<div class="alert alert-success">Asset subgroup added.</div>';
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error asset subgroup exist.</div>';	
					}
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all fields are fill up.</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/asset-group');
		}else{
			redirect('admin');
		}
	}

	public function modal_asset_subgroup(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			
			$check_asset = $this->admin->check_data('asset_subgroup_tbl', array('asg_id' => $id), TRUE);
			
			if($check_asset['result'] == TRUE){
				$ag_id = $check_asset['info']->ag_id;

				$get_ag = $this->admin->get_data('asset_group_tbl', array('ag_status' => 1));
				$ag_data = '<option value="">Select Asset Group</option>';

				foreach($get_ag as $row){
					if($row->ag_id == $ag_id){
						$ag_data .= '<option value="' . encode($row->ag_id) . '" selected>' . $row->ag_name . '</option>';
					}else{
						$ag_data .= '<option value="' . encode($row->ag_id) . '">' . $row->ag_name . '</option>';
					}
				}

				$data['result'] = 1;
				$data['info'] = array(
					'asset_group' => $ag_data,
					'name' => $check_asset['info']->asg_name,
					'price'=> $check_asset['info']->asg_price,
					'lifespan' => $check_asset['info']->asg_lifespan,
				);			
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_asset_subgroup(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$ag_id = clean_data(decode($this->input->post('asset-group')));
			$asg_name = strtoupper(clean_data($this->input->post('asset-subgroup')));
			$price = strtoupper(clean_data($this->input->post('asset-subgroup-price')));
			$useful_life = clean_data($this->input->post('asset-useful-life'));

			if(!empty($id) && !empty($ag_id) && !empty($asg_name) && !empty($price) && !empty($useful_life)){
				$check_id = $this->admin->check_data('asset_subgroup_tbl', array('asg_id' => $id));
				if($check_id == TRUE){
					$check_ag = $this->admin->check_data('asset_group_tbl', array('ag_id' => $ag_id));
					if($check_ag == TRUE){
						$check_name = $this->admin->check_data('asset_subgroup_tbl', array('asg_name' => $asg_name, 'asg_id !=' => $id), TRUE);
						if($check_name['result'] == FALSE){
							$set = array(
								'ag_id' => $ag_id,
								'asg_name' => $asg_name,
								'asg_price' => $price,
								'asg_lifespan' => $useful_life
							);

							$where = array('asg_id' => $id);

							$result = $this->admin->update_data('asset_subgroup_tbl', $set, $where);
							if($result == TRUE){
								$msg = '<div class="alert alert-success">Asset Subgroup updated.</div>';
								$this->session->set_flashdata('message', $msg);
								redirect($_SERVER['HTTP_REFERER']);
							}else{
								$msg = '<div class="alert alert-danger">Error please try again!</div>';
								$this->session->set_flashdata('message', $msg);
								redirect($_SERVER['HTTP_REFERER']);
							}
						}else{
							$msg = '<div class="alert alert-danger">Error Asset Group already exist!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect($_SERVER['HTTP_REFERER']);
						}
					}else{
						$msg = '<div class="alert alert-danger">Error Asset Group not exist!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}
				}else{
					$msg = '<div class="alert alert-danger">Error Asset Subgroup not exist!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure required fields is not empty!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}
		}else{
			redirect($_SERVER['HTTP_REFERER']);
		}
	}


	/*GL Group*/

	public function gl_group(){
		$info = $this->_require_login();
		$data['title'] = 'GL Group';

		$data['gl_group'] = $this->admin->get_data('gl_group_tbl');

		$join_sub = array(
			'gl_group_tbl b' => 'a.gl_group_id=b.gl_group_id',
			'gl_class_tbl c' => 'a.gl_class_id = c.gl_class_id'
		);
		$data['sub_group'] = $this->admin->get_join('gl_subgroup_tbl a', $join_sub);
		$data['content'] = $this->load->view('admin/admin_gl_group_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function add_gl_group(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_group = strtoupper(clean_data($this->input->post('gl_group')));

			if(!empty($gl_group)){
				$check_gl_group = $this->admin->check_data('gl_group_tbl', array('gl_group_name' => $gl_group));
				if($check_gl_group == FALSE){
					
					$set = array(
						'user_id' => $user_id,
						'gl_group_name' => $gl_group,
						'gl_group_added' => date_now(),
						'gl_group_status' => 1
					);

					$result = $this->admin->insert_data('gl_group_tbl', $set);
					if($result == TRUE){
						$msg = '<div class="alert alert-success">GL group added.</div>';
					}else{
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error GL group exist.</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all fields are fill up.</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/gl-group');
		}else{
			redirect('admin');
		}
	}

	public function modal_gl_group(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));

			$check_gl = $this->admin->check_data('gl_group_tbl', array('gl_group_id' => $id), TRUE);
			
			if($check_gl['result'] == TRUE){
				$data['result'] = 1;
				$data['info'] = array(
					'id' => encode($check_gl['info']->gl_group_id),
					'name' => $check_gl['info']->gl_group_name
				);			
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_gl_group(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$name = strtoupper(clean_data($this->input->post('gl-group')));

			if(!empty($id) && !empty($name)){
				$check_id = $this->admin->check_data('gl_group_tbl', array('gl_group_id' => $id));
				if($check_id == TRUE){
					$check_name = $this->admin->check_data('gl_group_tbl', array('gl_group_name' => $name, 'gl_group_id !=' => $id), TRUE);
					if($check_name['result'] == FALSE){
						$set = array('gl_group_name' => $name);
						$where = array('gl_group_id' => $id);

						$result = $this->admin->update_data('gl_group_tbl', $set, $where);
						if($result == TRUE){
							$msg = '<div class="alert alert-success">GL Group updated.</div>';
							$this->session->set_flashdata('message', $msg);
							redirect($_SERVER['HTTP_REFERER']);
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect($_SERVER['HTTP_REFERER']);
						}
					}else{
						$msg = '<div class="alert alert-danger">Error GL Group already exist!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}
				}else{
					$msg = '<div class="alert alert-danger">Error GL Group not exist!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure required fields is not empty!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}
		}else{
			redirect($_SERVER['HTTP_REFERER']);
		}
	}

	public function deactivate_gl_group(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_group_id = decode(clean_data($this->input->post('id')));

			$check_gl_group = $this->admin->check_data('gl_group_tbl a', array('gl_group_id' => $gl_group_id, 'gl_group_status' => 1), TRUE);
			if($check_gl_group['result'] == TRUE){
				$set_gl_group = array('gl_group_status' => 0);
				$where_gl_group = array('gl_group_id' => $gl_group_id);

				$this->admin->update_data('gl_group_tbl', $set_gl_group, $where_gl_group);

				$msg = '<div class="alert alert-success">GL Group deactivated.</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);	
			}else{
				$msg = '<div class="alert alert-danger">Error GL Group not exist. Please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}

			echo json_encode($data);
		}
	}

	public function activate_gl_group(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_group_id = decode(clean_data($this->input->post('id')));
			$check_gl_group = $this->admin->check_data('gl_group_tbl a', array('gl_group_id' => $gl_group_id, 'gl_group_status' => 0), TRUE);
			if($check_gl_group['result'] == TRUE){
				$set_gl_group = array('gl_group_status' => 1);
				$where_gl_group = array('gl_group_id' => $gl_group_id);

				$this->admin->update_data('gl_group_tbl', $set_gl_group, $where_gl_group);

				$msg = '<div class="alert alert-success">GL Group activated.</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);	
			}else{
				$msg = '<div class="alert alert-danger">Error GL Subgroup not exist. Please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}
		}
	}

	public function add_gl_subgroup(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_group = clean_data(decode($this->input->post('gl_group')));
			$gl_subgroup = strtoupper(clean_data($this->input->post('gl_subgroup')));
			$gl_subgroup_code = strtoupper(clean_data($this->input->post('gl_subgroup_code')));

			if(!empty($gl_group) && !empty($gl_subgroup) && !empty($gl_subgroup_code)){
				$check_gl_group = $this->admin->check_data('gl_group_tbl', array('gl_group_id' => $gl_group));
				if($check_gl_group == TRUE){
					/*$check_subgroup = $this->admin->check_data('gl_subgroup_tbl', array('gl_sub_name' => $gl_subgroup));

					if($check_subgroup == FALSE){*/
						$set = array(
							'gl_group_id' => $gl_group,
							'user_id' => $user_id,
							'gl_sub_name' => $gl_subgroup,
							'gl_code' => $gl_subgroup_code,
							'gl_sub_added' => date_now(),
							'gl_sub_status' => 1
						);

						$result = $this->admin->insert_data('gl_subgroup_tbl', $set);
						if($result == TRUE){
							$msg = '<div class="alert alert-success">GL subgroup added.</div>';
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					/*}else{
						$msg = '<div class="alert alert-danger">Error GL subgroup exist.</div>';	
					}*/
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all fields are fill up.</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/gl-group');
		}else{
			redirect('admin');
		}
	}

	public function modal_gl_subgroup(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));

			$join_gl = array('gl_group_tbl b' => 'a.gl_group_id = b.gl_group_id AND a.gl_sub_id = ' . $id);
			$check_gl = $this->admin->check_join('gl_subgroup_tbl a', $join_gl, TRUE);
			if($check_gl['result'] == TRUE){
				$gl_group_id = $check_gl['info']->gl_group_id;

				$get_gl = $this->admin->get_data('gl_group_tbl', array('gl_group_status' => 1));
				$gl_group_data = '<option value="">Select GL Group...</option>';
				foreach($get_gl as $row){
					if($row->gl_group_id == $gl_group_id){
						$gl_group_data .= '<option value="' . encode($row->gl_group_id) . '" selected>' . $row->gl_group_name . '</option>';
					}else{
						$gl_group_data .= '<option value="' . encode($row->gl_group_id) . '">' . $row->gl_group_name . '</option>';
					}
				}

				$data['result'] = 1;
				$data['info'] = array(
					'gl_group' => $gl_group_data,
					'name' => $check_gl['info']->gl_sub_name,
					'code' => $check_gl['info']->gl_code
				);			
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_gl_subgroup(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$gl_group = decode(clean_data($this->input->post('gl-group')));
			$gl_subgroup = strtoupper(clean_data($this->input->post('gl-subgroup')));
			$gl_code = strtoupper(clean_data($this->input->post('gl-subgroup-code')));

			if(!empty($id) && !empty($gl_group) && !empty($gl_subgroup) && !empty($gl_code)){
				$check_id = $this->admin->check_data('gl_subgroup_tbl', array('gl_sub_id' => $id));
				if($check_id == TRUE){
					$check_gl_group = $this->admin->check_data('gl_group_tbl', array('gl_group_id' => $gl_group));
					if($check_gl_group == TRUE){
						$check_name = $this->admin->check_data('gl_subgroup_tbl', array('gl_sub_name' => $name, 'gl_sub_id !=' => $id), TRUE);
						if($check_name['result'] == FALSE){
							$check_code = $this->admin->check_data('gl_subgroup_tbl', array('gl_code' => $gl_code, 'gl_sub_id !=' => $id), TRUE);
							if($check_code['result'] == FALSE){
								$set = array(
									'gl_group_id' => $gl_group,
									'gl_sub_name' => $gl_subgroup,
									'gl_code' => $gl_code
								);
								$where = array('gl_sub_id' => $id);

								$result = $this->admin->update_data('gl_subgroup_tbl', $set, $where);
								if($result == TRUE){
									$msg = '<div class="alert alert-success">GL Subgroup updated.</div>';
									$this->session->set_flashdata('message', $msg);
									redirect($_SERVER['HTTP_REFERER']);
								}else{
									$msg = '<div class="alert alert-danger">Error please try again!</div>';
									$this->session->set_flashdata('message', $msg);
									redirect($_SERVER['HTTP_REFERER']);
								}
							}else{
								$msg = '<div class="alert alert-danger">Error GL Code already exist!</div>';
								$this->session->set_flashdata('message', $msg);
								redirect($_SERVER['HTTP_REFERER']);	
							}
						}else{
							$msg = '<div class="alert alert-danger">Error GL Group already exist!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect($_SERVER['HTTP_REFERER']);
						}
					}else{
						$msg = '<div class="alert alert-danger">Error GL Group not exist!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}
				}else{
					$msg = '<div class="alert alert-danger">Error GL Subgroup not exist!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure required fields is not empty!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}
		}else{
			redirect($_SERVER['HTTP_REFERER']);
		}
	}

	public function deactivate_gl_subgroup(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_sub_id = decode(clean_data($this->input->post('id')));

			$check_gl_sub = $this->admin->check_data('gl_subgroup_tbl a', array('gl_sub_id' => $gl_sub_id, 'gl_sub_status' => 1), TRUE);
			if($check_gl_sub['result'] == TRUE){
				$set_gl_sub = array('gl_sub_status' => 0);
				$where_gl_sub = array('gl_sub_id' => $gl_sub_id);

				$this->admin->update_data('gl_subgroup_tbl', $set_gl_sub, $where_gl_sub);

				$msg = '<div class="alert alert-success">GL Subgroup deactivated.</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);	
			}else{
				$msg = '<div class="alert alert-danger">Error GL Subgroup not exist. Please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}
		}
	}

	public function activate_gl_subgroup(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_sub_id = decode(clean_data($this->input->post('id')));

			$check_gl_sub = $this->admin->check_data('gl_subgroup_tbl a', array('gl_sub_id' => $gl_sub_id, 'gl_sub_status' => 0), TRUE);
			if($check_gl_sub['result'] == TRUE){
				$set_gl_sub = array('gl_sub_status' => 1);
				$where_gl_sub = array('gl_sub_id' => $gl_sub_id);

				$this->admin->update_data('gl_subgroup_tbl', $set_gl_sub, $where_gl_sub);

				$msg = '<div class="alert alert-success">GL Subgroup activated.</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);	
			}else{
				$msg = '<div class="alert alert-danger">Error GL Subgroup not exist. Please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}
		}
	}


	/*CAPEX*/

	public function capex(){
		$info = $this->_require_login();
		$data['title'] = 'CAPEX';
		$data['year'] = $this->_active_year();

		$data['bc'] = $this->admin->get_data('bc_tbl', 'bc_status=1');
		$data['content'] = $this->load->view('admin/admin_capex', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function capex_info($id, $year = null){
		$info = $this->_require_login();
		$cost_center = decode($id);
		$data['title'] = 'CAPEX Info';

		$join_cost_center = array('cost_center_tbl b' => "a.cost_center_code = b.cost_center_code AND a.cost_center_code ='" . $cost_center . "'");
		$check_bc = $this->admin->check_join('bc_tbl a', $join_cost_center, TRUE, FALSE, FALSE, '*, a.bc_id as bc');
		if($check_bc['result'] == TRUE){
			$bc_id = $check_bc['info']->bc;

			if($year == null){
				$year = $this->_active_year();
			}

			$data['year'] = $year;
			$module = 'CAPEX';

			$check_cost = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'cost_center_status' => 1), TRUE);
			$data['id'] = $id;
			if($check_cost['result'] == TRUE){
				$cost_center_id = $check_cost['info']->cost_center_id;
				$cost_center_desc = $check_cost['info']->cost_center_desc;
				$data['cost_center_desc'] = $cost_center_desc;
				$join_cost = array(
					'cost_center_tbl b' => 'a.cost_center_id=b.cost_center_id AND a.ag_trans_status=1 AND b.cost_center_id=' . $cost_center_id . ' AND a.ag_trans_budget_year = ' . $year,
					'asset_group_tbl c' => 'a.ag_id=c.ag_id',
					'user_tbl d' => 'a.user_id=d.user_id'
				);
				$data['asset_group'] = $this->admin->get_join('asset_group_transaction_tbl a', $join_cost);

				$data['capex_asset'] = $this->admin->get_query('

					SELECT ag_name, SUM(capex) as capex, SUM(capex1) as capex1, SUM(capex2) as capex2
					
					FROM
					(
						(SELECT `d`.`ag_name`, `c`.`asg_name`, SUM(a.capex_qty * `f`.`capex_price`) as capex, 0 as capex1, 0 as capex2  FROM `asset_group_transaction_details_tbl` `a` JOIN `asset_group_transaction_item_tbl` `f` ON `a`.`ag_trans_item_id` = `f`.`ag_trans_item_id` AND `f`.`ag_trans_item_status` = 1 JOIN `asset_group_transaction_tbl` `b` ON `f`.`ag_trans_id`=`b`.`ag_trans_id` AND `b`.`ag_trans_status`=1 AND `a`.`ag_trans_det_status`=1 AND `b`.`ag_trans_budget_year` = ' . $year . ' JOIN `asset_subgroup_tbl` `c` ON `f`.`asg_id`=`c`.`asg_id` JOIN `asset_group_tbl` `d` ON `c`.`ag_id` = `d`.`ag_id` JOIN `cost_center_tbl` `e` ON `f`.`cost_center_id` = `e`.`cost_center_id` AND `e`.`cost_center_id` AND `e`.`parent_id`= ' . $cost_center_id . ' GROUP BY `c`.`asg_id` ORDER BY `d`.`ag_name`)

						UNION

						(SELECT y.ag_name, "", 0 as capex, SUM(x.comp_capex_val) as capex1, 0 as capex2 FROM comparative_capex_tbl x, asset_group_tbl y WHERE x.ag_id = y.ag_id AND x.bc_id = ' . $bc_id .' AND x.comp_capex_status = 1 AND x.comp_capex_year = ' . ($year - 1) . ' GROUP BY y.ag_name) 

						UNION

						(SELECT y.ag_name, "", 0 as capex, 0 as capex1, SUM(x.comp_capex_val) as capex2 FROM comparative_capex_tbl x, asset_group_tbl y WHERE x.ag_id = y.ag_id AND x.bc_id = ' . $bc_id .' AND x.comp_capex_status = 1 AND x.comp_capex_year = ' . ($year - 2) . ' GROUP BY y.ag_name) 
					) as capex_data

					GROUP BY ag_name;
				');

				$join_capex = array(
					'asset_group_transaction_item_tbl f' => 'a.ag_trans_item_id = f.ag_trans_item_id AND f.ag_trans_item_status = 1',
					'asset_group_transaction_tbl b' => 'f.ag_trans_id=b.ag_trans_id AND b.ag_trans_status=1 AND a.ag_trans_det_status=1 AND b.ag_trans_budget_year = ' . $year,
					'asset_subgroup_tbl c' => 'f.asg_id=c.asg_id',
					'asset_group_tbl d' => 'c.ag_id = d.ag_id',
					'cost_center_tbl e' => 'f.cost_center_id = e.cost_center_id AND e.cost_center_id AND e.parent_id=' . $cost_center_id
				);

				$data['capex_details'] = $this->admin->get_join('asset_group_transaction_details_tbl a', $join_capex, FALSE, 'd.ag_name', 'c.asg_id', 'd.ag_name, c.asg_name, SUM(a.capex_qty) total_qty, f.capex_price
				');

				$data['cost_center'] = encode($cost_center_id);
				$data['year'] = $year;
				$data['content'] = $this->load->view('admin/admin_capex_info_content', $data , TRUE);
				$this->load->view('admin/templates', $data);
			} else {
				echo 'No cost centers config yet!';
			}
		}else{
			echo 'Incorrect BC config!';
			// $this->load->view('admin/templates', $data);
		}
	}

	public function cancel_capex(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('ag_trans_id' => $id);
			$join_id = array(
				'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id'				
			);
			$check_id = $this->admin->check_join('asset_group_transaction_tbl a', $join_id, TRUE);
			if($check_id['result'] == TRUE){
				$cost_center_code = $check_id['info']->cost_center_code;
				$set = array('ag_trans_status' => 0);
				$remove_capex = $this->admin->update_data('asset_group_transaction_tbl', $set, $where);
				
				if($remove_capex == TRUE){
					$msg = '<div class="alert alert-success">CAPEX successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}
		}
	}

	public function add_capex_item($id){
		$info = $this->_require_login();
		$data['title'] = 'Add CAPEX Item';

		$data['id'] = $id;
		$ag_trans_id = decode($id);
		$join_id = array(
			'asset_group_tbl b' => 'a.ag_id = b.ag_id AND a.ag_trans_status=1 AND a.ag_trans_id = ' . $ag_trans_id,
			'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id'
		);
		$check_id = $this->admin->check_join('asset_group_transaction_tbl a', $join_id, TRUE);

		if($check_id['result'] == TRUE){
			$cost_center_id = $check_id['info']->cost_center_id;
			$cost_center_code = $check_id['info']->cost_center_code;
			$ag_name = $check_id['info']->ag_name;
			$ag_id = $check_id['info']->ag_id;
			$year = $check_id['info']->ag_trans_budget_year;
			$data['year'] = $year;

			$data['ag_name'] = $check_id['info']->ag_name;
			$data['cost_center'] = encode($cost_center_id);
			$data['cost_center_code'] = encode($cost_center_code);
			$data['cost_center_name'] = $check_id['info']->cost_center_desc;
			
			if($ag_name == 'TRANSPORTATION EQUIPMENT'){
				$get_asset = $this->_get_transpo_equip_data($cost_center_id, $ag_name, $ag_id, $year);
			}else{
				$get_asset = $this->_get_ag_data($cost_center_id, $ag_name, $ag_id, $year);
			}

			$data['ag'] = $get_asset['asset'];
			$data['header'] = $get_asset['header'];
			$data['content'] = $this->load->view('admin/admin_capex_add_item', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}else{

		}
	}

	public function add_trans_capex_item(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$ag_trans_id = clean_data(decode($this->input->post('ag_trans_id')));
			$bc_cost_center = clean_data(decode($this->input->post('bc_cost_center')));
			$remarks = clean_data($this->input->post('remarks'));
			$rank = clean_data($this->input->post('rank'));

			if(!empty($ag_trans_id) && !empty($bc_cost_center)){
				$check_cc = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $bc_cost_center, 'cost_center_status' => 1), TRUE);
				if($check_cc['result'] == TRUE){
					$cost_center_id = $check_cc['info']->cost_center_id;

					$join_trans = array(
						'asset_group_tbl b' => 'a.ag_id = b.ag_id AND a.ag_trans_status = 1 AND a.ag_trans_id =' . $ag_trans_id
					);
					$this->db->trans_start();
					$check_trans = $this->admin->check_join('asset_group_transaction_tbl a', $join_trans, TRUE);
					if($check_trans['result'] == TRUE){
						$year = $check_trans['info']->ag_trans_budget_year;
						$id = clean_data($this->input->post('id'));
						$asg_cost_center = clean_data($this->input->post('cost_center'));
						$capex_type = clean_data($this->input->post('capex_type'));
						$capex_category = clean_data($this->input->post('capex_category'));
						$capex = clean_data($this->input->post('capex'));
						$count = 0;
						foreach($id as $row){
							$asg_id = decode($row);
							$capex_remarks = '';
							if(is_array($remarks)){
								$capex_remarks = $remarks[$count];
								$rank_id = decode($rank[$count]);
							}

							$check_asg_id = $this->admin->check_data('asset_subgroup_tbl', array('asg_id' => $asg_id, 'asg_status' => 1), TRUE);
							if($check_asg_id == TRUE){
								$asset_price = $check_asg_id['info']->asg_price;
								$asset_lifespan = $check_asg_id['info']->asg_lifespan;
								$asg_cost_center_id = decode($asg_cost_center[$count]);
								$capex_type_id = decode($capex_type[$count]);
								$capex_category_id = decode($capex_category[$count]);
								$check_asg_cc = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $asg_cost_center_id));
								if($check_asg_cc == TRUE){

									$qty_jan = check_num($capex['jan'][$count]);
									$qty_feb = check_num($capex['feb'][$count]);
									$qty_mar = check_num($capex['mar'][$count]);
									$qty_apr = check_num($capex['apr'][$count]);
									$qty_may = check_num($capex['may'][$count]);
									$qty_jun = check_num($capex['jun'][$count]);
									$qty_jul = check_num($capex['jul'][$count]);
									$qty_aug = check_num($capex['aug'][$count]);
									$qty_sep = check_num($capex['sep'][$count]);
									$qty_oct = check_num($capex['oct'][$count]);
									$qty_nov = check_num($capex['nov'][$count]);
									$qty_dec = check_num($capex['dec'][$count]);

									$total_amount = $qty_jan + $qty_feb + $qty_mar + $qty_apr + $qty_may + $qty_jun + $qty_jul + $qty_aug + $qty_sep + $qty_oct + $qty_nov + $qty_dec;

									if($total_amount > 0){
										$set_item = array(
											'ag_trans_id' => $ag_trans_id,
											'asg_id' => $asg_id,
											'cost_center_id' => $asg_cost_center_id,
											'capex_type_id' => $capex_type_id,
											'capex_category_id' => $capex_category_id,
											'user_id' => $user_id,
											'capex_price' => $asset_price,
											'capex_lifespan' => $asset_lifespan,
											'capex_remarks' => $capex_remarks,
											'ag_trans_item_added' => date_now(),
											'ag_trans_item_status' => 1
										);

										$insert_item = $this->admin->insert_data('asset_group_transaction_item_tbl', $set_item, TRUE);

										if($insert_item['result'] == TRUE){
											$ag_trans_item_id = $insert_item['id'];
											$date = $year . '-' . '01-01';
											$set_asg_trans = array(
												'ag_trans_item_id' => $ag_trans_item_id,
												'capex_qty' => $qty_jan,
												'capex_budget_date' => $date,
												'ag_trans_det_added' => date_now(),
												'ag_trans_det_status' => 1
											);
											$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

											
											$date = $year . '-' . '02-01';
											$set_asg_trans = array(
												'ag_trans_item_id' => $ag_trans_item_id,
												'capex_qty' => $qty_feb,
												'capex_budget_date' => $date,
												'ag_trans_det_added' => date_now(),
												'ag_trans_det_status' => 1
											);
											$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

											
											$date = $year . '-' . '03-01';
											$set_asg_trans = array(
												'ag_trans_item_id' => $ag_trans_item_id,
												'capex_qty' => $qty_mar,
												'capex_budget_date' => $date,
												'ag_trans_det_added' => date_now(),
												'ag_trans_det_status' => 1
											);
											$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

											
											$date = $year . '-' . '04-01';
											$set_asg_trans = array(
												'ag_trans_item_id' => $ag_trans_item_id,
												'capex_qty' => $qty_apr,
												'capex_budget_date' => $date,
												'ag_trans_det_added' => date_now(),
												'ag_trans_det_status' => 1
											);
											$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);
											
											
											$date = $year . '-' . '05-01';
											$set_asg_trans = array(
												'ag_trans_item_id' => $ag_trans_item_id,
												'capex_qty' => $qty_may,
												'capex_budget_date' => $date,
												'ag_trans_det_added' => date_now(),
												'ag_trans_det_status' => 1
											);
											$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

											
											$date = $year . '-' . '06-01';
											$set_asg_trans = array(
												'ag_trans_item_id' => $ag_trans_item_id,
												'capex_qty' => $qty_jun,
												'capex_budget_date' => $date,
												'ag_trans_det_added' => date_now(),
												'ag_trans_det_status' => 1
											);
											$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

											$date = $year . '-' . '07-01';
											$set_asg_trans = array(
												'ag_trans_item_id' => $ag_trans_item_id,
												'capex_qty' => $qty_jul,
												'capex_budget_date' => $date,
												'ag_trans_det_added' => date_now(),
												'ag_trans_det_status' => 1
											);
											$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

											
											$date = $year . '-' . '08-01';
											$set_asg_trans = array(
												'ag_trans_item_id' => $ag_trans_item_id,
												'capex_qty' => $qty_aug,
												'capex_budget_date' => $date,
												'ag_trans_det_added' => date_now(),
												'ag_trans_det_status' => 1
											);
											$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

											
											$date = $year . '-' . '09-01';
											$set_asg_trans = array(
												'ag_trans_item_id' => $ag_trans_item_id,
												'capex_qty' => $qty_sep,
												'capex_budget_date' => $date,
												'ag_trans_det_added' => date_now(),
												'ag_trans_det_status' => 1
											);
											$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

											
											$date = $year . '-' . '10-01';
											$set_asg_trans = array(
												'ag_trans_item_id' => $ag_trans_item_id,
												'capex_qty' => $qty_oct,
												'capex_budget_date' => $date,
												'ag_trans_det_added' => date_now(),
												'ag_trans_det_status' => 1
											);
											$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

											
											$date = $year . '-' . '11-01';
											$set_asg_trans = array(
												'ag_trans_item_id' => $ag_trans_item_id,
												'capex_qty' => $qty_nov,
												'capex_budget_date' => $date,
												'ag_trans_det_added' => date_now(),
												'ag_trans_det_status' => 1
											);
											$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

											
											$date = $year . '-' . '12-01';
											$set_asg_trans = array(
												'ag_trans_item_id' => $ag_trans_item_id,
												'capex_qty' => $qty_dec,
												'capex_budget_date' => $date,
												'ag_trans_det_added' => date_now(),
												'ag_trans_det_status' => 1
											);
											$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

											if(!empty($rank_id)){
												$set_rank = array(
													'ag_trans_item_id' => $ag_trans_item_id,
													'rank_id' => $rank_id,
													'ag_trans_rank_added' => date_now(),
													'ag_trans_rank_status' => 1
												);

												$insert_rank = $this->admin->insert_data('asset_group_transaction_rank_tbl', $set_rank);
											}

											$count++;
										}else{
											$msg = '<div class="alert alert-danger">Error while inserting item transaction!</div>';
											$this->session->set_flashdata('message', $msg);
											redirect('admin/view-capex/' . encode($ag_trans_id));
										}
									}
								}else{
									$this->db->trans_rollback();
									$msg = '<div class="alert alert-danger">Error empty cost center!</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/view-capex/' . encode($ag_trans_id));
								}
							}else{
								$msg = '<div class="alert alert-danger">Error asset subgroup not existing!</div>';
								$this->session->set_flashdata('message', $msg);
								redirect('admin/view-capex/' . encode($ag_trans_id));
							}
						}

						if($this->db->trans_status() === FALSE){
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}else{
							$this->db->trans_commit();
							$msg = '<div class="alert alert-success">CAPEX successfully added.</strong></div>';
						}

						$this->session->set_flashdata('message', $msg);
						redirect('admin/view-capex/' . encode($ag_trans_id));
					}else{
						$msg = '<div class="alert alert-danger">Error transaction not exist please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/view-capex/' . encode($ag_trans_id));
					}
				}else{
					$msg = '<div class="alert alert-danger">Error invalid cost center!</div>';	
					$this->session->set_flashdata('message', $msg);
					redirect('admin/view-capex/' . encode($ag_trans_id));
				}
			}else{
				echo 'wew';
			}
		}
	}


	public function capex_donut($id, $year){
		$info = $this->_require_login();

		$cost_center = decode($id);
		$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center));
		if($check_id == TRUE){
			$donut = $this->admin->get_query('SELECT e.ag_name as asset_group, SUM(b.capex_price * c.capex_qty) as amount, e.ag_color as color FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND f.parent_id=' . $cost_center . ' AND a.ag_trans_status=1 AND b.ag_trans_item_status=1 AND c.ag_trans_det_status=1 AND g.trans_type_id=1 AND a.ag_trans_budget_year = ' . $year . ' GROUP BY d.ag_id ORDER BY amount DESC');
			$data['result'] = 1;
			$data['info'] = $donut;
			
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
		exit();
	}

	public function capex_line($id, $year){
		$info = $this->_require_login();
		
		$get_year = $this->admin->check_data('budget_active_tbl', array('budget_active_status' => 1), TRUE);

		if($get_year['result'] == TRUE){
			$trans_type = $get_year['info']->trans_type_id;
			$previous_year = $year - 1;
			$cost_center = decode($id);
			$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center));
			if($check_id == TRUE){
				$line = $this->admin->get_query('SELECT DATE_FORMAT(c.capex_budget_date, "%b %Y") as budget_date, SUM(b.capex_price * c.capex_qty) as amount FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND f.parent_id=' . $cost_center . ' AND a.ag_trans_status=1 AND b.ag_trans_item_status=1 AND c.ag_trans_det_status=1 AND g.trans_type_id=1 AND a.ag_trans_budget_year = ' . $year . ' GROUP BY YEAR(c.capex_budget_date), MONTH(c.capex_budget_date)');

				/*$line2 = $this->admin->get_query('SELECT DATE_FORMAT(c.capex_budget_date, "%b %Y") as budget_date, SUM(b.capex_price * c.capex_qty) as amount FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND f.parent_id=' . $cost_center . ' AND a.ag_trans_status=1 AND b.ag_trans_item_status=1 AND c.ag_trans_det_status=1 AND g.trans_type_id=2 AND YEAR(c.capex_budget_date)=' . $previous_year . ' GROUP BY YEAR(c.capex_budget_date), MONTH(c.capex_budget_date)');*/

				$line2 = '';

				$capex['first_data'] = $line;
				$capex['second_data'] = $line2;

				$data['result'] = 1;
				$data['info'] = $capex;
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
		exit();
	}

	public function capex_bar($id, $year){
		$info = $this->_require_login();

		$cost_center = decode($id);
		$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center));
		if($check_id == TRUE){
			$bar = $this->admin->get_query('SELECT DATE_FORMAT(c.capex_budget_date, "%b %Y") as budget_date, e.ag_name as asset_group, SUM(b.capex_price * c.capex_qty) as amount, MONTH(c.capex_budget_date) as month, e.ag_color as color FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND f.parent_id=' . $cost_center . ' AND a.ag_trans_status=1 AND b.ag_trans_item_status=1 AND c.ag_trans_det_status=1 AND a.ag_trans_budget_year = ' . $year . ' GROUP BY YEAR(c.capex_budget_date), MONTH(c.capex_budget_date), e.ag_id ORDER BY c.capex_budget_date ASC, amount DESC');
			$arr_budget_date = array();
			$arr_group = array();
			$arr_asset = array();
			$arr_color = array();
			$count = 0;
			foreach($bar as $row){
				$budget_date = $row->budget_date;
				$month = $row->month;
				$amount = $row->amount;
				$asset_group = $row->asset_group;
				$color = $row->color;
				if(!array_key_exists($month, $arr_budget_date)){
					$arr_budget_date[$month] = $budget_date;
				}

				if(!array_key_exists($asset_group, $arr_asset)){
					$arr_asset[$asset_group]['asset'] = $asset_group;
					$arr_asset[$asset_group]['amount'] = array();

					$arr_group[$asset_group] = $asset_group;
					$count++;
				}

				array_push($arr_asset[$asset_group]['amount'], $amount);

				if(!array_key_exists($color, $arr_color)){
					$arr_color[$color] = $color;
				}
			}

			$data['result'] = 1;
			$data['month'] = $arr_budget_date;
			$data['group'] = $arr_group;
			$data['group_amount'] = $arr_asset;
			$data['color'] = $arr_color;
		}else{
			$data['result'] = 0;
		}
		echo json_encode($data);
		exit();
	}

	public function transac_capex($id, $year){
		$info = $this->_require_login();
		$data['title'] = 'Add capex';

		$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => decode($id), 'cost_center_status' => 1), TRUE);
		if($check_id['result'] == TRUE){
			$data['id'] = $id;
			$cost_center_id = $check_id['info']->cost_center_id;
			
			$data['cost_center_name'] = $check_id['info']->cost_center_desc;
			$data['year'] = $year;
			$data['asset_group'] = $this->admin->get_query('SELECT * FROM asset_group_tbl as a WHERE a.ag_id NOT IN (SELECT b.ag_id FROM asset_group_transaction_tbl b, cost_center_tbl c WHERE b.cost_center_id=c.cost_center_id AND b.ag_trans_status=1 AND c.cost_center_id=' . $cost_center_id . ' AND b.ag_trans_budget_year = ' . $year . ')');
			$data['content'] = $this->load->view('admin/admin_transac_capex', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}
	}

	public function get_subgroup(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$ag_id =clean_data(decode($this->input->post('id')));
			$cost_center =clean_data(decode($this->input->post('cost_center')));
			$year =clean_data($this->input->post('year'));
			$check_ag = $this->admin->check_data('asset_group_tbl', array('ag_id' => $ag_id), TRUE);
			if($check_ag['result'] == TRUE){
				$data['name'] = $check_ag['info']->ag_name;
				$ag_name = strtoupper($check_ag['info']->ag_name);
				$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'cost_center_status' => 1), TRUE);

				if($check_cost_center['result'] == TRUE){
					$cost_center_id = $check_cost_center['info']->cost_center_id;

					if($ag_name == 'TRANSPORTATION EQUIPMENT'){
						$get_asset = $this->_get_transpo_equip_data($cost_center_id, $ag_name, $ag_id, $year);

						$data['assets'] = $get_asset['asset'];
						$data['header'] = $get_asset['header'];
					}else{
						$get_asset = $this->_get_ag_data($cost_center_id, $ag_name, $ag_id, $year);

						$data['assets'] = $get_asset['asset'];
						$data['header'] = $get_asset['header'];
					}

					$data['result'] = 1;
				}else{
					$data['result'] = 0;
				}
				
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function _get_ag_data($cost_center_id, $ag_name, $ag_id, $year){
		// $ag_name == 'OUTLET EQUIPMENT' || $ag_name == 'LEASEHOLD IMPROVEMENTS (NEW)'
		if($ag_name == 'STORE EQUIPMENT' || $ag_name == 'KITCHEN EQUIPMENT'){
			$join_cost = array(
				'outlet_tbl b' => 'a.cost_center_code = b.ifs_code AND a.cost_center_type_id = 8 AND cost_center_status = 1 AND a.parent_id = ' . $cost_center_id,
				'outlet_year_tbl c' => 'b.outlet_id = c.outlet_id AND c.outlet_year_status = 1 AND c.outlet_year = ' . $year
			);
			$get_cost_center = $this->admin->get_join('cost_center_tbl a', $join_cost);
		}elseif($ag_name == 'LEASEHOLD IMPROVEMENTS' || $ag_name == 'COMPUTER EQUIPMENT & PARAPHERNALIA'){
			$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_id, 'cost_center_status' => 1));
		}else{
			$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_id, 'cost_center_type_id !=' => 8, 'cost_center_status' => 1));
		}
		$cost_center_data = '<select name="cost_center[]" class="form-control input-sm capex-cost-center" style="width: 200px;">';
		$cost_center_data .= '<option value="">Select cost center...</option>';
		foreach($get_cost_center as $row){
			$cost_center_data .= '<option value="' . encode($row->cost_center_id) . '">' . $row->cost_center_desc . '</option>';
		}
		$cost_center_data .= '</select>';

		$get_capex_type = $this->admin->get_data('capex_type_tbl', array('capex_type_status' => 1));
		$get_capex_category = $this->admin->get_data('capex_category_tbl', array('capex_category_status' => 1));

		$capex_type_data = '<select name="capex_type[]" class="form-control input-sm capex-type" style="width: 200px;">';
		$capex_type_data .= '<option value="">Select capex type...</option>';
		foreach($get_capex_type as $row){
			$capex_type_data .= '<option value="' . encode($row->capex_type_id) . '">' . $row->capex_type_name . '</option>';
		}
		$capex_type_data .= '</select>';

		$capex_category_data = '<select name="capex_category[]" class="form-control input-sm capex-category" style="width: 200px;">';
		$capex_category_data .= '<option value="">Select capex category...</option>';
		foreach($get_capex_category as $row){
			$capex_category_data .= '<option value="' . encode($row->capex_category_id) . '">' . $row->capex_category_name . '</option>';
		}
		$capex_category_data .= '</select>';

		$get_assets = $this->admin->get_data('asset_subgroup_tbl', array('ag_id' => $ag_id, 'asg_status' => 1));
		$asset = '';
		foreach($get_assets as $row){
			$asset .= '<tr><input type="hidden" name="id[]" value="' . encode($row->asg_id) . '"> <input type="hidden" class="asg-price" value="' . $row->asg_price . '">';
			$asset .= '<td width=""><a href="#" class="remove-asg"><i class="fa fa-remove"></i></a>&nbsp;&nbsp;&nbsp;<a href="" class="add-asset-sub" data-id="' . encode($row->asg_id) . '"><i class="fa fa-plus"></i></a>&nbsp;&nbsp;<a href="#" class="show-slider-capex"><span class="fa fa-sliders"></span></a></td>';
			$asset .= '<td style="width:20px;">' . $row->asg_name .'</td>';
			$asset .= '<td width="7%"><div class="form-group">' . $cost_center_data . '</div></td>';
			$asset .= '<td width="7%"><div class="form-group">' . $capex_type_data . '</div></td>';
			$asset .= '<td width="7%"><div class="form-group">' . $capex_category_data . '</div></td>';
			$asset .= '<td class="text-right" width="3%">' . number_format($row->asg_price, 2) . '</td>';
			$asset .= '<td class="text-right" width="3%"><label class="capex-total-price">0</label></td>';
			$asset .= '<td class="text-right" width="3%"><label class="capex-total-qty">0</label></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty jan-qty" name="capex[jan][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty feb-qty" name="capex[feb][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty mar-qty" name="capex[mar][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty apr-qty" name="capex[apr][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty may-qty" name="capex[may][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty jun-qty" name="capex[jun][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty jul-qty" name="capex[jul][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty aug-qty" name="capex[aug][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty sep-qty" name="capex[sep][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty oct-qty" name="capex[oct][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty nov-qty" name="capex[nov][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty dec-qty" name="capex[dec][]" class="form-control input-sm"></td>';
			$asset .= '</tr>';
		}

		$table_head = '
			<tr>
				<th class="text-center" style="background: #03A9F4;color: #fff;"></th>
				<th style="background: #03A9F4;color: #fff; width:20px;">Asset</th>
				<th width="7%" style="background: #03A9F4;color: #fff;">Cost Center</th>
				<th width="7%" style="background: #03A9F4;color: #fff;">Type of CAPEX</th>
				<th width="7%" style="background: #03A9F4;color: #fff;">Maintenance Category</th>
				<th class="text-center" width="3%" style="background: #03A9F4;color: #fff;">Price</th>
				<th class="text-center" width="3%">Total Price</th>
				<th class="text-center" width="3%">Total Qty</th>
				<th class="text-center" width="">Jan</th>
				<th class="text-center" width="">Feb</th>
				<th class="text-center" width="">Mar</th>
				<th class="text-center" width="">Apr</th>
				<th class="text-center" width="">May</th>
				<th class="text-center" width="">Jun</th>
				<th class="text-center" width="">Jul</th>
				<th class="text-center" width="">Aug</th>
				<th class="text-center" width="">Sep</th>
				<th class="text-center" width="">Oct</th>
				<th class="text-center" width="">Nov</th>
				<th class="text-center" width="">Dec</th>
			</tr>';

		$data['asset'] = $asset;
		$data['header'] = $table_head;
		return $data;
	}

	public function _get_transpo_equip_data($cost_center_id, $ag_name, $ag_id, $year){
		
		$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_id, 'cost_center_type_id !=' => 8, 'cost_center_status' => 1));
		$cost_center_data = '<select name="cost_center[]" class="form-control input-sm capex-cost-center" style="width: 200px;">';
		$cost_center_data .= '<option value="">Select cost center...</option>';
		foreach($get_cost_center as $row){
			$cost_center_data .= '<option value="' . encode($row->cost_center_id) . '">' . $row->cost_center_desc . '</option>';
		}
		$cost_center_data .= '</select>';

		$get_capex_type = $this->admin->get_data('capex_type_tbl', array('capex_type_status' => 1));
		$get_capex_category = $this->admin->get_data('capex_category_tbl', array('capex_category_status' => 1));

		$capex_type_data = '<select name="capex_type[]" class="form-control input-sm capex-type" style="width: 200px;">';
		$capex_type_data .= '<option value="">Select capex type...</option>';
		foreach($get_capex_type as $row){
			$capex_type_data .= '<option value="' . encode($row->capex_type_id) . '">' . $row->capex_type_name . '</option>';
		}
		$capex_type_data .= '</select>';

		$capex_category_data = '<select name="capex_category[]" class="form-control input-sm capex-category" style="width: 200px;">';
		$capex_category_data .= '<option value="">Select capex category...</option>';
		foreach($get_capex_category as $row){
			$capex_category_data .= '<option value="' . encode($row->capex_category_id) . '">' . $row->capex_category_name . '</option>';
		}
		$capex_category_data .= '</select>';

		$get_rank = $this->admin->get_data('rank_tbl', array('rank_status' => 1));
		$rank_data = '<select name="rank[]" class="form-control input-sm capex-rank" required>';
		$rank_data .= '<option value="">Select Rank...</option>';
		foreach($get_rank as $row_rank){
			$rank_data .= '<option value="' . encode($row_rank->rank_id) . '">' . $row_rank->rank_name . '</option>';
		}

		$rank_data .= '</select>';		

		$get_assets = $this->admin->get_data('asset_subgroup_tbl', array('ag_id' => $ag_id, 'asg_status' => 1));
		$asset = '';
		foreach($get_assets as $row){
			$asset .= '<tr><input type="hidden" name="id[]" value="' . encode($row->asg_id) . '"> <input type="hidden" class="asg-price" value="' . $row->asg_price . '">';
			$asset .= '<td width=""><a href="#" class="remove-asg"><i class="fa fa-remove"></i></a>&nbsp;&nbsp;&nbsp;<a href="" class="add-asset-sub" data-id="' . encode($row->asg_id) . '"><i class="fa fa-plus"></i></a>&nbsp;&nbsp;<a href="#" class="show-slider-capex"><span class="fa fa-sliders"></span></a></td>';
			$asset .= '<td style="width:20px;">' . $row->asg_name .'</td>';
			$asset .= '<td width="7%"><div class="form-group">' . $cost_center_data . '</div></td>';
			$asset .= '<td width="7%"><div class="form-group">' . $capex_type_data . '</div></td>';
			$asset .= '<td width="7%"><div class="form-group">' . $capex_category_data . '</div></td>';
			$asset .= '<td class="text-right" width="3%">' . number_format($row->asg_price, 2) . '</td>';
			$asset .= '<td class="text-right" width="3%"><label class="capex-total-price">0</label></td>';
			$asset .= '<td class="text-right" width="3%"><label class="capex-total-qty">0</label></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty jan-qty" name="capex[jan][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty feb-qty" name="capex[feb][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty mar-qty" name="capex[mar][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty apr-qty" name="capex[apr][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty may-qty" name="capex[may][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty jun-qty" name="capex[jun][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty jul-qty" name="capex[jul][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty aug-qty" name="capex[aug][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty sep-qty" name="capex[sep][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty oct-qty" name="capex[oct][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty nov-qty" name="capex[nov][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty dec-qty" name="capex[dec][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width="">' . $rank_data . '</td>';
			$asset .= '<td class="text-center" style="width:200px;"><input type="text" class="capex-remarks" name="remarks[]" class="form-control input-sm" style="width:200px;"></td>';
			$asset .= '</tr>';
		}

		$table_head = '
			<tr>
				<th class="text-center" style="background: #03A9F4;color: #fff;"></th>
				<th style="background: #03A9F4;color: #fff; width:20px;">Asset</th>
				<th width="7%" style="background: #03A9F4;color: #fff;">Cost Center</th>
				<th width="7%" style="background: #03A9F4;color: #fff;">Type of CAPEX</th>
				<th width="7%" style="background: #03A9F4;color: #fff;">Maintenance Category</th>
				<th class="text-center" width="3%" style="background: #03A9F4;color: #fff;">Price</th>
				<th class="text-center" width="3%">Total Price</th>
				<th class="text-center" width="3%">Total Qty</th>
				<th class="text-center" width="">Jan</th>
				<th class="text-center" width="">Feb</th>
				<th class="text-center" width="">Mar</th>
				<th class="text-center" width="">Apr</th>
				<th class="text-center" width="">May</th>
				<th class="text-center" width="">Jun</th>
				<th class="text-center" width="">Jul</th>
				<th class="text-center" width="">Aug</th>
				<th class="text-center" width="">Sep</th>
				<th class="text-center" width="">Oct</th>
				<th class="text-center" width="">Nov</th>
				<th class="text-center" width="">Dec</th>
				<th class="text-center" width="">Rank</th>
				<th class="text-center" width="">Remarks</th>
			</tr>'
		;
		$data['asset'] = $asset;
		$data['header'] = $table_head;
		return $data;
	}

	public function get_asset_subgroup(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$asg_id =clean_data(decode($this->input->post('id')));
		$cost_center =clean_data(decode($this->input->post('cost_center')));

		$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'cost_center_status' => 1), TRUE);
		$join_ag = array('asset_group_tbl b' => 'a.ag_id = b.ag_id AND b.ag_status = 1 AND a.asg_status = 1 AND a.asg_id = ' . $asg_id);
		$check_ag = $this->admin->check_join('asset_subgroup_tbl a', $join_ag, TRUE);
		if($check_ag['result'] == TRUE){
			
			$ag_name = strtoupper($check_ag['info']->ag_name);
			if($check_cost_center['result'] == TRUE){
				$cost_center_id = $check_cost_center['info']->cost_center_id;
				if($ag_name == 'STORE EQUIPMENT' || $ag_name == 'KITCHEN EQUIPMENT' || $ag_name == 'LEASEHOLD IMPROVEMENTS' || $ag_name == 'COMPUTER EQUIPMENT & PARAPHERNALIA'){
					$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_id, 'cost_center_type_id' => 8 , 'cost_center_status' => 1));
				}else{
					$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_id, 'cost_center_type_id !=' => 8, 'cost_center_status' => 1));
				}

				$cost_center_data = '<select name="cost_center[]" class="form-control input-sm capex-cost-center" style="width: 200px;">';
				$cost_center_data .= '<option value="">Select cost center...</option>';
				foreach($get_cost_center as $row){
					$cost_center_data .= '<option value="' . encode($row->cost_center_id) . '">' . $row->cost_center_desc . '</option>';
				}
				$cost_center_data .= '</select>';

				$get_capex_type = $this->admin->get_data('capex_type_tbl', array('capex_type_status' => 1));
				$get_capex_category = $this->admin->get_data('capex_category_tbl', array('capex_category_status' => 1));

				$capex_type_data = '<select name="capex_type[]" class="form-control input-sm capex-type" style="width: 200px;">';
				$capex_type_data .= '<option value="">Select capex type...</option>';
				foreach($get_capex_type as $row){
					$capex_type_data .= '<option value="' . encode($row->capex_type_id) . '">' . $row->capex_type_name . '</option>';
				}
				$capex_type_data .= '</select>';

				$capex_category_data = '<select name="capex_category[]" class="form-control input-sm capex-category" style="width: 200px;">';
				$capex_category_data .= '<option value="">Select capex category...</option>';
				foreach($get_capex_category as $row){
					$capex_category_data .= '<option value="' . encode($row->capex_category_id) . '">' . $row->capex_category_name . '</option>';
				}
				$capex_category_data .= '</select>';

				$get_assets = $this->admin->get_data('asset_subgroup_tbl', array('asg_id' => $asg_id, 'asg_status' => 1));
				$asset = '';

				if($ag_name == 'TRANSPORTATION EQUIPMENT'){
					$get_rank = $this->admin->get_data('rank_tbl', array('rank_status' => 1));
					$rank_data = '<select name="rank[]" class="form-control input-sm capex-rank" required>';
					$rank_data .= '<option value="">Select Rank...</option>';
					foreach($get_rank as $row_rank){
						$rank_data .= '<option value="' . encode($row_rank->rank_id) . '">' . $row_rank->rank_name . '</option>';
					}

					$rank_data .= '</select>';	
					foreach($get_assets as $row){
						$asset .= '<tr><input type="hidden" name="id[]" value="' . encode($row->asg_id) . '"> <input type="hidden" class="asg-price" value="' . $row->asg_price . '">';
						$asset .= '<td><a href="#" class="remove-asg"><i class="fa fa-remove"></i></a>&nbsp;&nbsp;&nbsp;<a href="" class="add-asset-sub" data-id="' . encode($row->asg_id) . '"><i class="fa fa-plus"></i></a>&nbsp;&nbsp;<a href="#" class="show-slider-capex"><span class="fa fa-sliders"></span></a></td>';
						$asset .= '<td style="width:20px;">' . $row->asg_name .'</td>';
						$asset .= '<td width="7%">' . $cost_center_data  . '</td>';
						$asset .= '<td width="7%"><div class="form-group">' . $capex_type_data . '</div></td>';
						$asset .= '<td width="7%"><div class="form-group">' . $capex_category_data . '</div></td>';
						$asset .= '<td class="text-right" width="3%">' . number_format($row->asg_price, 2) . '</td>';
						$asset .= '<td class="text-right" width="3%"><label class="capex-total-price">0</label></td>';
						$asset .= '<td class="text-right" width="3%"><label class="capex-total-qty">0</label></td>';
						$asset .= '<td  class="text-center" width=""><input type="text" class="capex-qty jan-qty" name="capex[jan][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty feb-qty" name="capex[feb][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty mar-qty" name="capex[mar][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty apr-qty" name="capex[apr][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty may-qty" name="capex[may][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty jun-qty" name="capex[jun][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty jul-qty" name="capex[jul][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty aug-qty" name="capex[aug][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty sep-qty" name="capex[sep][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty oct-qty" name="capex[oct][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty nov-qty" name="capex[nov][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty dec-qty" name="capex[dec][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width="">' . $rank_data . '</td>';
						$asset .= '<td class="text-center" style="width:200px;"><input type="text" class="capex-remarks" name="remarks[]" class="form-control input-sm" style="width:200px;"></td>';
						$asset .= '</tr>';
					}
				}else{

					foreach($get_assets as $row){
						$asset .= '<tr><input type="hidden" name="id[]" value="' . encode($row->asg_id) . '"> <input type="hidden" class="asg-price" value="' . $row->asg_price . '">';
						$asset .= '<td><a href="#" class="remove-asg"><i class="fa fa-remove"></i></a>&nbsp;&nbsp;&nbsp;<a href="" class="add-asset-sub" data-id="' . encode($row->asg_id) . '"><i class="fa fa-plus"></i></a>&nbsp;&nbsp;<a href="#" class="show-slider-capex"><span class="fa fa-sliders"></span></a></td>';
						$asset .= '<td style="width:20px;">' . $row->asg_name .'</td>';
						$asset .= '<td width="7%">' . $cost_center_data  . '</td>';
						$asset .= '<td width="7%"><div class="form-group">' . $capex_type_data . '</div></td>';
						$asset .= '<td width="7%"><div class="form-group">' . $capex_category_data . '</div></td>';
						$asset .= '<td class="text-right" width="3%">' . number_format($row->asg_price, 2) . '</td>';
						$asset .= '<td class="text-right" width="3%"><label class="capex-total-price">0</label></td>';
						$asset .= '<td class="text-right" width="3%"><label class="capex-total-qty">0</label></td>';
						$asset .= '<td  class="text-center" width=""><input type="text" class="capex-qty jan-qty" name="capex[jan][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty feb-qty" name="capex[feb][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty mar-qty" name="capex[mar][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty apr-qty" name="capex[apr][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty may-qty" name="capex[may][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty jun-qty" name="capex[jun][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty jul-qty" name="capex[jul][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty aug-qty" name="capex[aug][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty sep-qty" name="capex[sep][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty oct-qty" name="capex[oct][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty nov-qty" name="capex[nov][]" class="form-control input-sm"></td>';
						$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty dec-qty" name="capex[dec][]" class="form-control input-sm"></td>';
						$asset .= '</tr>';
					}
				}

				$data['result'] = 1;
				$data['asset'] = $asset;
				
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}
		
		echo json_encode($data);
	}

	public function add_capex(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$asset_group = clean_data(decode($this->input->post('asset_group')));
			$cost_center = clean_data(decode($this->input->post('bc_cost_center')));
			$year = clean_data($this->input->post('year'));
			$remarks = clean_data($this->input->post('remarks'));

			$rank = clean_data($this->input->post('rank'));
			if(!empty($asset_group) && !empty($cost_center) && !empty($year)){
				$check_cc = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'cost_center_status' => 1), TRUE);
				if($check_cc['result'] == TRUE){
					$cost_center_id = $check_cc['info']->cost_center_id;
					$check_duplicate = $this->admin->check_data('asset_group_transaction_tbl', array('ag_id' => $asset_group, 'cost_center_id' => $cost_center_id, 'ag_trans_status' => 1, 'trans_type_id' => 1, 'ag_trans_budget_year' => $year));
					
					if($check_duplicate == FALSE){
						$check_ag = $this->admin->check_data('asset_group_tbl', array('ag_id' => $asset_group, 'ag_status' => 1));
						if($check_ag == TRUE){
							
							$set = array(
								'ag_id' => $asset_group,
								'cost_center_id' => $cost_center_id,
								'user_id' => $user_id,
								'trans_type_id' => 1,
								'ag_trans_budget_year' => $year,
								'ag_trans_added' => date_now(),
								'ag_trans_status' => 1
							);

							$this->db->trans_start();
							$insert_capex_trans = $this->admin->insert_data('asset_group_transaction_tbl', $set, TRUE);
							$ag_trans_id = $insert_capex_trans['id'];
							if($insert_capex_trans == TRUE){
								$id = clean_data($this->input->post('id'));
								$asg_cost_center = clean_data($this->input->post('cost_center'));
								$capex_type = clean_data($this->input->post('capex_type'));
								$capex_category = clean_data($this->input->post('capex_category'));
								$capex = clean_data($this->input->post('capex'));
								$count = 0;
								foreach($id as $row){
									$asg_id = decode($row);
									$capex_remarks = '';
									if(is_array($remarks)){
										$capex_remarks = $remarks[$count];
										$rank_id = decode($rank[$count]);
									}

									$check_asg_id = $this->admin->check_data('asset_subgroup_tbl', array('asg_id' => $asg_id, 'asg_status' => 1), TRUE);
									if($check_asg_id == TRUE){
										$asset_price = $check_asg_id['info']->asg_price;
										$asset_lifespan = $check_asg_id['info']->asg_lifespan;
										$asg_cost_center_id = decode($asg_cost_center[$count]);
										$capex_type_id = decode($capex_type[$count]);
										$capex_category_id = decode($capex_category[$count]);
										$check_asg_cc = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $asg_cost_center_id));
										if($check_asg_cc == TRUE){

											$qty_jan = check_num($capex['jan'][$count]);
											$qty_feb = check_num($capex['feb'][$count]);
											$qty_mar = check_num($capex['mar'][$count]);
											$qty_apr = check_num($capex['apr'][$count]);
											$qty_may = check_num($capex['may'][$count]);
											$qty_jun = check_num($capex['jun'][$count]);
											$qty_jul = check_num($capex['jul'][$count]);
											$qty_aug = check_num($capex['aug'][$count]);
											$qty_sep = check_num($capex['sep'][$count]);
											$qty_oct = check_num($capex['oct'][$count]);
											$qty_nov = check_num($capex['nov'][$count]);
											$qty_dec = check_num($capex['dec'][$count]);

											$total_amount = $qty_jan + $qty_feb + $qty_mar + $qty_apr + $qty_may + $qty_jun + $qty_jul + $qty_aug + $qty_sep + $qty_oct + $qty_nov + $qty_dec;

											if(	$total_amount > 0){
												$set_item = array(
													'ag_trans_id' => $ag_trans_id,
													'asg_id' => $asg_id,
													'cost_center_id' => $asg_cost_center_id,
													'capex_type_id' => $capex_type_id,
													'capex_category_id' => $capex_category_id,
													'user_id' => $user_id,
													'capex_price' => $asset_price,
													'capex_lifespan' => $asset_lifespan,
													'capex_remarks' => $capex_remarks,
													'ag_trans_item_added' => date_now(),
													'ag_trans_item_status' => 1
												);

												$insert_item = $this->admin->insert_data('asset_group_transaction_item_tbl', $set_item, TRUE);

												if($insert_item['result'] == TRUE){
													$ag_trans_item_id = $insert_item['id'];

													
													$date = $year . '-' . '01-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_jan,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '02-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_feb,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '03-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_mar,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '04-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_apr,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);
													
													
													$date = $year . '-' . '05-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_may,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '06-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_jun,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													$date = $year . '-' . '07-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_jul,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '08-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_aug,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '09-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_sep,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '10-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_oct,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '11-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_nov,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '12-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_dec,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);


													if(!empty($rank_id)){
														$set_rank = array(
															'ag_trans_item_id' => $ag_trans_item_id,
															'rank_id' => $rank_id,
															'ag_trans_rank_added' => date_now(),
															'ag_trans_rank_status' => 1
														);

														$insert_rank = $this->admin->insert_data('asset_group_transaction_rank_tbl', $set_rank);
													}

													$count++;
												}else{
													$msg = '<div class="alert alert-danger">Error while inserting item transaction!</div>';
													$this->session->set_flashdata('message', $msg);
													redirect($_SERVER['HTTP_REFERER']);
												}
											}
										}else{
											$this->db->trans_rollback();
											$msg = '<div class="alert alert-danger">Error empty cost center!</div>';
											$this->session->set_flashdata('message', $msg);
											redirect($_SERVER['HTTP_REFERER']);
										}
									}else{
										$msg = '<div class="alert alert-danger">Error asset subgroup not existing!</div>';
										$this->session->set_flashdata('message', $msg);
										redirect($_SERVER['HTTP_REFERER']);
									}
								}
							}else{
								$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
							}

							if($this->db->trans_status() === FALSE){
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error please try again!</div>';
							}else{
								$this->db->trans_commit();
								$msg = '<div class="alert alert-success">CAPEX successfully added.</strong></div>';
							}

							$this->session->set_flashdata('message', $msg);
							redirect($_SERVER['HTTP_REFERER']);
						}else{
							$msg = '<div class="alert alert-danger">Error while checking Asset Group!</div>';
							$this->session->set_flashdata('message', $msg);
						}
					}else{
						$msg = '<div class="alert alert-danger">Error transaction already exist!</div>';	
						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}
				}else{
					$msg = '<div class="alert alert-danger">Error invalid cost center!</div>';	
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}
			}else{
				echo 'Error please try again!';
			}
		}
	}

	public function view_capex($id){
		$info = $this->_require_login();
		$data['title'] = 'View CAPEX';
		$data['id'] = $id;

		$ag_trans_id = decode($id);
		$join_id = array(
			'asset_group_tbl b' => 'a.ag_id = b.ag_id AND a.ag_trans_status=1 AND a.ag_trans_id = ' . $ag_trans_id,
			'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id'
		);
		$check_id = $this->admin->check_join('asset_group_transaction_tbl a', $join_id, TRUE);
		
		if($check_id['result'] == TRUE){
			$data['parent_id']  = $check_id['info']->cost_center_id;
			$data['asset_group'] = $check_id['info']->ag_name;
			$data['cost_center_desc'] = $check_id['info']->cost_center_desc;
			$data['cost_center_code'] = encode($check_id['info']->cost_center_code);
			$year = $check_id['info']->ag_trans_budget_year;
			$data['year'] = $year;

			$data['asset_details'] = $this->admin->get_query('SELECT c.ag_trans_item_id, d.asg_name, g.cost_center_desc, h.capex_type_name, i.capex_category_name, b.capex_price,

				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id) as total_qty, b.capex_remarks, 
				
				(SELECT y.rank_name FROM asset_group_transaction_rank_tbl x, rank_tbl y WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.rank_id = y.rank_id AND x.ag_trans_rank_status = 1) as rank,

				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=1 AND x.ag_trans_det_status=1) as jan,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=2 AND x.ag_trans_det_status=1) as feb,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=3 AND x.ag_trans_det_status=1) as mar,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=4 AND x.ag_trans_det_status=1) as apr,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=5 AND x.ag_trans_det_status=1) as may,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=6 AND x.ag_trans_det_status=1) as jun,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=7 AND x.ag_trans_det_status=1) as jul,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=8 AND x.ag_trans_det_status=1) as aug,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=9 AND x.ag_trans_det_status=1) as sep,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=10 AND x.ag_trans_det_status=1) as oct,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=11 AND x.ag_trans_det_status=1) as nov,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=12 AND x.ag_trans_det_status=1) as december

				FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, transaction_type_tbl f, cost_center_tbl g, capex_type_tbl h, capex_category_tbl i  WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=g.cost_center_id AND a.trans_type_id=f.trans_type_id AND b.cost_center_id=g.cost_center_id AND a.ag_trans_status=1 AND b.ag_trans_item_status=1 AND c.ag_trans_det_status=1 AND b.capex_type_id = h.capex_type_id AND b.capex_category_id = i.capex_category_id AND f.trans_type_name="BUDGET" AND a.ag_trans_budget_year=' . $year . ' AND a.ag_trans_id=' . $ag_trans_id . ' GROUP BY b.ag_trans_item_id');

			$data['content'] = $this->load->view('admin/admin_capex_view', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}else{

		}
	}

	public function remove_capex_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('ag_trans_item_id' => $id);
			$check_id = $this->admin->check_data('asset_group_transaction_item_tbl', $where, TRUE);
			if($check_id['result'] == TRUE){
				$ag_trans_id = $check_id['info']->ag_trans_id;
				$set = array('ag_trans_item_status' => 0);
				$remove_item = $this->admin->update_data('asset_group_transaction_item_tbl', $set, $where);

				if($remove_item == TRUE){
					$msg = '<div class="alert alert-success">Item successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}
		}

	}

	public function get_capex_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$item_id = decode($this->input->post('id'));

			$join_item = array(
				'asset_group_transaction_tbl b' => 'a.ag_trans_id = b.ag_trans_id AND b.ag_trans_status = 1',
				'cost_center_tbl c' => 'b.cost_center_id = c.cost_center_id AND c.cost_center_status = 1 AND a.ag_trans_item_id = ' . $item_id,
				'asset_subgroup_tbl d' => 'a.asg_id = d.asg_id',
				'asset_group_tbl e' => 'd.ag_id = e.ag_id',
				'capex_type_tbl f' => 'a.capex_type_id = f.capex_type_id',
				'capex_category_tbl g' => 'a.capex_category_id = g.capex_category_id'
			);

			$check_id = $this->admin->check_join('asset_group_transaction_item_tbl a', $join_item, TRUE, FALSE, FALSE, '*, c.cost_center_id as cost_center_main, a.cost_center_id cost_center_item, (SELECT x.rank_id FROM asset_group_transaction_rank_tbl x WHERE a.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_rank_status = 1) as rank, f.capex_type_id, g.capex_category_id');

			if($check_id['result'] == TRUE){
				$year = $check_id['info']->ag_trans_budget_year;
				$cost_center_main = $check_id['info']->cost_center_main;
				$cost_center_item = $check_id['info']->cost_center_item;
				$price = $check_id['info']->capex_price;
				$asg_name = $check_id['info']->asg_name;
				$ag_name = $check_id['info']->ag_name;
				$remarks = $check_id['info']->capex_remarks;
				$rank = $check_id['info']->rank;
				$capex_type_id = $check_id['info']->capex_type_id;
				$capex_category_id = $check_id['info']->capex_category_id;

				$get_cost_center = $this->_get_capex_cost_center($cost_center_main, $ag_name, $year);
				$get_capex_type = $this->admin->get_data('capex_type_tbl', array('capex_type_status' => 1));
				$get_capex_category = $this->admin->get_data('capex_category_tbl', array('capex_category_status' => 1));
				
				$cost_center_data = '';
				foreach($get_cost_center as $row){
					$selected = '';
					if($row->cost_center_id == $cost_center_item){
						$selected = ' selected';
					}	
					$cost_center_data .= '<option value="' . encode($row->cost_center_id) . '"' . $selected . '>' . $row->cost_center_desc . '</option>';
				}

				$capex_type_data = '';
				foreach($get_capex_type as $row){
					$selected = '';
					if($row->capex_type_id == $capex_type_id){
						$selected = ' selected';
					}
					$capex_type_data .= '<option value="' . encode($row->capex_type_id) . '"' . $selected . '>' . $row->capex_type_name . '</option>';
				}

				$capex_category_data = '';
				foreach($get_capex_category as $row){
					$selected = '';
					if($row->capex_category_id == $capex_category_id){
						$selected = ' selected';
					}
					$capex_category_data .= '<option value="' . encode($row->capex_category_id) . '"' . $selected . '>' . $row->capex_category_name . '</option>';
				}


				$join_get_item = array(
					'asset_group_transaction_item_tbl b' => 'a.ag_trans_item_id = b.ag_trans_item_id AND b.ag_trans_item_status = 1 AND a.ag_trans_det_status = 1 AND b.ag_trans_item_id = ' . $item_id,
				);
				$get_item = $this->admin->get_join('asset_group_transaction_details_tbl a', $join_get_item, FALSE, 'a.capex_budget_date ASC', FALSE, 'a.capex_qty, MONTHNAME(a.capex_budget_date) as capex_budget_date');

				$month = array(
					'January' => 0,
					'February' => 0,
					'March' => 0,
					'April' => 0,
					'May' => 0, 
					'June' => 0,
					'July' => 0,
					'August' => 0,
					'September' => 0,
					'October' => 0,
					'November' => 0,
					'December' => 0
				);

				$total_qty = 0;
				foreach($get_item as $row_item){
					$month[$row_item->capex_budget_date] += $row_item->capex_qty;
					$total_qty += $row_item->capex_qty;
				}

				$get_rank = $this->admin->get_data('rank_tbl', array('rank_status' => 1));

				$rank_data = '';
				if(count($get_rank) > 1){
					$rank_data = '<select name="rank" class="form-control input-sm" required>';
					foreach($get_rank as $row_rank){
						if($rank == $row_rank->rank_id){
							$rank_data .= '<option value="' . encode($row_rank->rank_id) . '" selected>' . $row_rank->rank_name . '</option>';
						}else{
							$rank_data .= '<option value="' . encode($row_rank->rank_id) . '">' . $row_rank->rank_name . '</option>';
						}
					}

					$rank_data .= '</select>';
				}

				$details = array(
					'asset_group' => $ag_name,
					'asset_name' => $asg_name,
					'price' => $price,
					'total' => $total_qty,
					'cost_center' => $cost_center_data,
					'capex_type' => $capex_type_data,
					'capex_category' => $capex_category_data,
					'month' => $month,
					'rank' => $rank_data,
					'remarks' => $remarks,
				);

				$data['result'] = 1;
				$data['info'] = $details;
			}else{
				$data['result'] = 0;
			}

			echo json_encode($data);
			exit();
		}
	}

	public function update_capex_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = $this->input->post('id');
			$cost_center_id = decode(clean_data($this->input->post('cost_center')));
			$capex_type_id = decode(clean_data($this->input->post('capex_type')));
			$capex_category_id = decode(clean_data($this->input->post('capex_category')));
			$capex = clean_data($this->input->post('capex'));
			$asset_price = clean_data($this->input->post('price'));
			$rank = decode(clean_data($this->input->post('rank')));
			$remarks = clean_data($this->input->post('remarks'));

			$count = 0;
			$this->db->trans_start();
			foreach($id as $row_id){
				$price = $asset_price[$count];
				$item_id = decode($row_id);

				$join_item = array(
					'asset_group_transaction_tbl b' => 'a.ag_trans_id = b.ag_trans_id AND a.ag_trans_item_status = 1 AND a.ag_trans_item_id = ' . $item_id,
					'asset_group_tbl c' => 'b.ag_id = c.ag_id'
				);
				$check_item = $this->admin->check_join('asset_group_transaction_item_tbl a', $join_item, TRUE);
				

				if($check_item['result'] == TRUE){
					$cost_center_db = $check_item['info']->cost_center_id;
					$capex_type_db = $check_item['info']->capex_type_id;
					$capex_category_db = $check_item['info']->capex_category_id;
					$ag_trans_id = $check_item['info']->ag_trans_id;
					$ag_name = $check_item['info']->ag_name;
					
					if($cost_center_db != $cost_center_id){
						$update_cost_center = $this->admin->update_data('asset_group_transaction_item_tbl', array('cost_center_id' => $cost_center_id, 'capex_remarks' => $remarks), array('ag_trans_item_id' => $item_id));
					}
					
					if($capex_type_db != $capex_type_id){
						$update_cost_center = $this->admin->update_data('asset_group_transaction_item_tbl', array('capex_type_id' => $capex_type_id, 'capex_remarks' => $remarks), array('ag_trans_item_id' => $item_id));
					}

					if($capex_category_db != $capex_category_id){
						$update_cost_center = $this->admin->update_data('asset_group_transaction_item_tbl', array('capex_category_id' => $capex_category_id, 'capex_remarks' => $remarks), array('ag_trans_item_id' => $item_id));
					}

					if($ag_name == 'TRANSPORTATION EQUIPMENT'){
						$check_rank = $this->admin->check_data('asset_group_transaction_rank_tbl', array('ag_trans_item_id' => $item_id, 'ag_trans_rank_status' => 1), TRUE);
						if($check_rank['result'] == TRUE){

							$ag_trans_rank_id = $check_rank['info']->ag_trans_rank_id;
							$update_rank = $this->admin->update_data('asset_group_transaction_rank_tbl', array('rank_id' => $rank), array('ag_trans_rank_id' => $ag_trans_rank_id));	

						}else{
							$set_rank = array(
								'ag_trans_item_id' => $item_id,
								'rank_id' => $rank,
								'ag_trans_rank_added' => date_now(),
								'ag_trans_rank_status' => 1
							);
							$insert_rank = $this->admin->insert_data('asset_group_transaction_rank_tbl', $set_rank);
						}
					}

					$update_price = $this->admin->update_data('asset_group_transaction_item_tbl', array('capex_price' => $price), array('ag_trans_item_id' => $item_id));

					$qty = check_num($capex['jan'][$count]);
					$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 1, 'ag_trans_det_status' => 1));
					
					$qty = check_num($capex['feb'][$count]);
					$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 2, 'ag_trans_det_status' => 1));


					$qty = check_num($capex['mar'][$count]);
					$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 3, 'ag_trans_det_status' => 1));


					$qty = check_num($capex['apr'][$count]);
					$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 4, 'ag_trans_det_status' => 1));

					$qty = check_num($capex['may'][$count]);
					$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 5, 'ag_trans_det_status' => 1));
					
					$qty = check_num($capex['jun'][$count]);
					$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 6, 'ag_trans_det_status' => 1));

					$qty = $capex['jul'][$count];
					$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 7, 'ag_trans_det_status' => 1));

					$qty = check_num($capex['aug'][$count]);
					$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 8, 'ag_trans_det_status' => 1));

					$qty = check_num($capex['sep'][$count]);
					$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 9, 'ag_trans_det_status' => 1));
					
					$qty = check_num($capex['oct'][$count]);
					$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 10, 'ag_trans_det_status' => 1));

					$qty = check_num($capex['nov'][$count]);
					$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 11, 'ag_trans_det_status' => 1));

					$qty = check_num($capex['dec'][$count]);
					$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 12, 'ag_trans_det_status' => 1));
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}

				$count++;
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success">CAPEX successfully updated.</strong></div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect($_SERVER['HTTP_REFERER']);
		}
	}

	public function download_capex($cost_center_id, $year){
		$info = $this->_require_login();

		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','2048M');

		$cost_center_id = decode($cost_center_id);
		$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center_id, 'cost_center_status' => 1), TRUE);
		if($check_cost_center['result'] == TRUE){
			$cost_center_name = $check_cost_center['info']->cost_center_desc;

			$qry = 'SELECT c.ag_trans_item_id, d.asg_name, g.cost_center_desc, g.cost_center_code, h.capex_type_name, i.capex_category_name, b.capex_price, a.ag_trans_budget_year, b.capex_lifespan, e.ag_name,

				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id) as total_qty, b.capex_remarks, 
				
				(SELECT y.rank_name FROM asset_group_transaction_rank_tbl x, rank_tbl y WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.rank_id = y.rank_id AND x.ag_trans_rank_status = 1) as rank,

				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=1 AND x.ag_trans_det_status=1) as jan,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=2 AND x.ag_trans_det_status=1) as feb,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=3 AND x.ag_trans_det_status=1) as mar,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=4 AND x.ag_trans_det_status=1) as apr,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=5 AND x.ag_trans_det_status=1) as may,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=6 AND x.ag_trans_det_status=1) as jun,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=7 AND x.ag_trans_det_status=1) as jul,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=8 AND x.ag_trans_det_status=1) as aug,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=9 AND x.ag_trans_det_status=1) as sep,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=10 AND x.ag_trans_det_status=1) as oct,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=11 AND x.ag_trans_det_status=1) as nov,
				(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=12 AND x.ag_trans_det_status=1) as december

				FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, transaction_type_tbl f, cost_center_tbl g, capex_type_tbl h, capex_category_tbl i  WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=g.cost_center_id AND a.trans_type_id=f.trans_type_id AND b.cost_center_id=g.cost_center_id AND a.ag_trans_status=1 AND b.ag_trans_item_status=1 AND c.ag_trans_det_status=1 AND b.capex_type_id = h.capex_type_id AND b.capex_category_id = i.capex_category_id AND f.trans_type_name="BUDGET" AND a.ag_trans_budget_year=' . $year . ' AND g.parent_id=' . $cost_center_id . ' GROUP BY b.ag_trans_item_id';
			
			$asset_details = $this->admin->get_query($qry);

			$this->load->library('excel');

			$spreadsheet = $this->excel;
			$spreadsheet->getProperties()->setCreator('BAVI')
					->setLastModifiedBy('Budgeting System')
					->setTitle('Employees')
					->setSubject('List of Employees')
					->setDescription('List of Employees');

			
			$styleArray = array(
					'font' 	=> array(
							'bold' => true,
					),
					'alignment' => array(
							'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
							'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
					),
					'borders' => array(
							'top' => array(
									'style' => PHPExcel_Style_Border::BORDER_THIN,
							),
					),
					'fill' => array(
							'type' => \PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
							'rotation' => 90,
							'startcolor' => array(
									'argb' => 'FFA0A0A0',
							),
							'endcolor' => array(
									'argb' => 'FFFFFFFF',
							),
					),
			);


			foreach(range('A','J') as $columnID) {
				$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
						->setAutoSize(true);
			}

			$style_center = array(
				'font' => array(
					'bold' => true,
					'size' => 20
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				)
			);

			$style_info =  array(
				'font' => array(
					'bold' => true
				)
			);

			$style_border = array(
				'font' => array(
					'bold' => true
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				)
			);

			$style_data = array(
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				)
			);

			$style_out = array(
				'font' => array(
					'bold' => true,
					'color' => array('rgb' => 'FF0000')
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
				),
			);


			$spreadsheet->getActiveSheet()->getStyle("A1:X1")->applyFromArray($style_border);
			$spreadsheet->getActiveSheet()->getStyle("A1:X1")->applyFromArray($style_info);
			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Location')
				->setCellValue("B1", 'Asset Group')
				->setCellValue("C1", 'Asset')
				->setCellValue("D1", "Cost Center Code")
				->setCellValue("E1", "Cost Center Name")
				->setCellValue("F1", "Type of CAPEX")
				->setCellValue("G1", "Maintenance Category")
				->setCellValue("H1", "Year")
				->setCellValue("I1", "Useful Life (Month)")
				->setCellValue("J1", "CAPEX Amount")
				->setCellValue("K1", "Jan")
				->setCellValue("L1", "Feb")
				->setCellValue("M1", "Mar")
				->setCellValue("N1", "Apr")
				->setCellValue("O1", "May")
				->setCellValue("P1", "Jun")
				->setCellValue("Q1", "Jul")
				->setCellValue("R1", "Aug")
				->setCellValue("S1", "Sep")
				->setCellValue("T1", "Oct")
				->setCellValue("U1", "Nov")
				->setCellValue("V1", "Dec")
				->setCellValue("W1", "Total QTY")
				->setCellValue("X1", "Total Amount")
				;
			// Add some data
			$x= 2;
			$count = 0;
			foreach($asset_details as $row){

				$jan = $row->jan;
				$feb = $row->feb;
				$mar = $row->mar;
				$apr = $row->apr;
				$may = $row->may;
				$jun = $row->jun;
				$jul = $row->jul;
				$aug = $row->aug;
				$sep = $row->sep;
				$oct = $row->oct;
				$nov = $row->nov;
				$december = $row->december;
				$total = $jan + $feb + $mar + $apr + $may + $jun + $jul + $aug + $sep + $oct + $nov + $december;
				$capex_amount = $row->capex_price;
				$capex_total  = $total * $capex_amount;

				$spreadsheet->setActiveSheetIndex(0)
						->setCellValue("A$x",$cost_center_name)
						->setCellValue("B$x",$row->ag_name)
						->setCellValue("C$x",$row->asg_name)
						->setCellValue("D$x",$row->cost_center_code)
						->setCellValue("E$x",$row->cost_center_desc)
						->setCellValue("F$x",$row->capex_type_name)
						->setCellValue("G$x",$row->capex_category_name)
						->setCellValue("H$x",$row->ag_trans_budget_year)
						->setCellValue("I$x",$row->capex_lifespan)
						->setCellValue("J$x",$row->capex_price)
						->setCellValue("K$x",$jan)
						->setCellValue("L$x",$feb)
						->setCellValue("M$x",$mar)
						->setCellValue("N$x",$apr)
						->setCellValue("O$x",$may)
						->setCellValue("P$x",$jun)
						->setCellValue("Q$x",$jul)
						->setCellValue("R$x",$aug)
						->setCellValue("S$x",$sep)
						->setCellValue("T$x",$oct)
						->setCellValue("U$x",$nov)
						->setCellValue("V$x",$december)
						->setCellValue("W$x",$total)
						->setCellValue("X$x",$capex_total)
						;

				$spreadsheet->getActiveSheet()->getStyle("A$x:X$x")->applyFromArray($style_data);
				$x++;
			}

			foreach(range('A','X') as $columnID) {
				$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
						->setAutoSize(true);
			}

			$spreadsheet->getActiveSheet()->getStyle('J2:X' . ($x - 1))->getNumberFormat()->setFormatCode('#,##0.00');
			
			// Rename worksheet
			$spreadsheet->getActiveSheet()->setTitle('OPEX Data - ' . $year);

			// set right to left direction
			//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

			// Set active sheet index to the first sheet, so Excel opens this as the first sheet
			$spreadsheet->setActiveSheetIndex(0);

			// Redirect output to a client’s web browser (Excel2007)
			header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
			$random = generate_random(5);
			header('Content-Disposition: attachment;filename="Budgeting - CAPEX ' . $year . '_' . $random . '.xlsx"');
			header('Cache-Control: max-age=0');
			// If you're serving to IE 9, then the following may be needed
			header('Cache-Control: max-age=1');

			// If you're serving to IE over SSL, then the following may be needed
			header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
			header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
			header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
			header('Pragma: public'); // HTTP/1.0

			$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
			$writer->save('php://output');
			exit;
		}else{
			echo 'Error Cost Center not exist. Please try again!';
		}
	}


	/*OPEX*/

	public function opex(){
		$info = $this->_require_login();
		$data['title'] = 'OPEX';
		$data['active_year'] = $this->_active_year();

		$data['bc'] = $this->admin->get_data('bc_tbl', 'bc_status=1');
		$data['unit'] = $this->admin->get_data('company_unit_tbl', 'company_unit_status=1');
		$data['content'] = $this->load->view('admin/admin_opex', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function opex_info($id, $year = null){
		$info = $this->_require_login();
		$cost_center = decode($id);
		$data['title'] = 'OPEX Info';
		$data['bc_id'] = $id;

		if($year == null){
			$year = $this->_active_year();
		}

		$data['active_year'] = $this->_active_year();
		$data['year'] = $year;

		$join_cost = array(
			'cost_center_type_tbl b' => 'a.cost_center_type_id = b.cost_center_type_id AND a.cost_center_code = "' . $cost_center . '" AND a.cost_center_status = 1',
			'bc_tbl c' => 'a.cost_center_code = c.cost_center_code'
		);
		$check_cost = $this->admin->check_join('cost_center_tbl a', $join_cost, TRUE);
		$data['id'] = $id;
		if($check_cost['result'] == TRUE){
			$cost_center_id = $check_cost['info']->cost_center_id;
			$cost_center_desc = $check_cost['info']->cost_center_desc;
			$bc_id = $check_cost['info']->bc_id;

			$data['cost_center_desc'] =  $cost_center_desc;
			$join_cost = array(
				'cost_center_tbl b' => 'a.cost_center_id=b.cost_center_id AND a.gl_trans_status=1 AND b.cost_center_id=' . $cost_center_id . ' AND a.gl_year = ' . $year,
				'gl_group_tbl c' => 'a.gl_group_id=c.gl_group_id',
				'user_tbl d' => 'a.user_id=d.user_id'
			);

			$data['cost_center'] = encode($cost_center_id);
			$sw_join = array(
				'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.emp_salary_trans_status = 1 AND b.cost_center_id = ' . $cost_center_id . ' AND a.emp_salary_trans_year = ' . $year
			);

			$get_sw_group = $this->admin->get_join('employee_salary_trans_tbl a', $sw_join);
			$data['sw'] = $get_sw_group;
			$data['gl_group'] = $this->admin->get_join('gl_transaction_tbl a', $join_cost);

			$data['direct_labor'] = $this->admin->get_join('rep_gl_transaction_tbl a', $join_cost);

			$opex_gl = $this->admin->get_query('

				SELECT gl_group_name, gl_sub_name, (opex) as opex, (opex1) as opex1, (opex2) as opex2

				FROM 
				(
					(SELECT `e`.`gl_group_name`, `d`.`gl_sub_name`, SUM(a.opex_amount) opex, 0 as opex1, 0 opex2 FROM `gl_transaction_details_tbl` `a` JOIN `gl_transaction_item_tbl` `b` ON `a`.`gl_trans_item_id` = `b`.`gl_trans_item_id` AND `b`.`gl_trans_item_status` = 1 AND `a`.`gl_trans_det_status`=1 JOIN `gl_transaction_tbl` `c` ON `b`.`gl_trans_id`=`c`.`gl_trans_id` AND `c`.`gl_trans_status`=1 AND `c`.`gl_year`= ' . $year . ' JOIN `gl_subgroup_tbl` `d` ON `b`.`gl_sub_id`=`d`.`gl_sub_id` JOIN `gl_group_tbl` `e` ON `d`.`gl_group_id` = `e`.`gl_group_id` AND `e`.`gl_group_show` = 1 JOIN `cost_center_tbl` `f` ON `b`.`cost_center_id` = `f`.`cost_center_id` AND `f`.`parent_id`= '. $cost_center_id . ' GROUP BY `b`.`gl_sub_id` ORDER BY `e`.`gl_group_id`, `d`.`gl_sub_name`, `opex` DESC
					)

					UNION

					(SELECT z.gl_group_name, y.gl_sub_name, 0 as opex, SUM(x.cost) as opex1, 0 as opex2 FROM comparative_opex_gl_tbl x, gl_subgroup_tbl y, gl_group_tbl z WHERE x.gl_sub_id = y.gl_sub_id AND y.gl_group_id = z.gl_group_id AND x.bc_id = ' . $bc_id . ' AND x.comp_opex_gl_status = 1 AND YEAR(x.trans_year) = ' . ($year - 1) . ' AND z.gl_group_name != "DEPRECIATION EXPENSES" GROUP BY z.gl_group_id, y.gl_sub_id
					)

					UNION

					(SELECT z.gl_group_name, y.gl_sub_name, 0 as opex, 0 as opex1, SUM(x.cost) as opex2 FROM comparative_opex_gl_tbl x, gl_subgroup_tbl y, gl_group_tbl z WHERE x.gl_sub_id = y.gl_sub_id AND y.gl_group_id = z.gl_group_id AND x.bc_id = ' . $bc_id . ' AND x.comp_opex_gl_status = 1 AND YEAR(x.trans_year) = ' . ($year - 2) . ' AND z.gl_group_name != "DEPRECIATION EXPENSES" GROUP BY z.gl_group_id, y.gl_sub_id
					)
				) as opex_data


				ORDER BY
					gl_group_name, gl_sub_name

			');


			//Depreciation per asset subgroup

			$depre_sub = $this->get_depreciation_subgroup($cost_center_id, $year, $bc_id);
			/*echo '<pre>';
			print_r($depre_sub);
			echo '</pre>';
			exit;*/
			$depre = "DEPRECIATION EXPENSES";
			foreach($depre_sub as $row_sub){
				$gl_sub_name = $row_sub->gl_sub_name;
				$depre_amount = $row_sub->total;
				$depre_amount1 = $row_sub->total1;
				$depre_amount2 = $row_sub->total2;
				$arr_depre = new stdClass;
				$arr_depre->gl_group_name = $depre;
				$arr_depre->gl_sub_name = $gl_sub_name;
				$arr_depre->opex = $depre_amount;
				$arr_depre->opex1 = $depre_amount1;
				$arr_depre->opex2 = $depre_amount2;
				array_push($opex_gl, $arr_depre);
			}


			$data['opex_gl'] = $opex_gl;
			$data['year'] = $year;
			$data['content'] = $this->load->view('admin/admin_opex_info_content', $data , TRUE);
			$this->load->view('admin/templates', $data);
		} else {
			echo 'No cost centers config yet!';
		}
	}

	public function cancel_opex(){
		$info = $this->_require_login();
		$direct_labor = $this->input->post('direct-labor') ? decode($this->input->post('direct-labor')) : NULL;
		$designated_tbl = $this->_get_designated_tbl(NULL, NULL, $direct_labor);

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('gl_trans_id' => $id);
			$join_id = array(
				'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.gl_trans_id = ' . $id				
			);
			$check_id = $this->admin->check_join($designated_tbl->gl_transaction_tbl.' a', $join_id, TRUE);
			if($check_id['result'] == TRUE){
				$cost_center_code = $check_id['info']->cost_center_code;
				$set = array('gl_trans_status' => 0);
				$remove_opex = $this->admin->update_data($designated_tbl->gl_transaction_tbl, $set, $where);
				
				if($remove_opex == TRUE){
					$msg = '<div class="alert alert-success">Transaction successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}
		}
	}

	public function cancel_sw_opex(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('emp_salary_trans_id' => $id);
			$check_id = $this->admin->check_data('employee_salary_trans_tbl', $join_id);
			if($check_id == TRUE){
				$set = array('emp_salary_trans_status' => 0);
				$remove_opex = $this->admin->update_data('employee_salary_trans_tbl', $set, $where);
				
				if($remove_opex == TRUE){
					$msg = '<div class="alert alert-success">OPEX successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}
		}
	}

	public function get_salary($id, $month = FALSE, $year){
		$info = $this->_require_login();

		$year_active = $year;
		if($month == FALSE){
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id
			);
			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary);
			$grand_total = 0;
			foreach($get_salary as $row_salary){
				$basic_salary = $row_salary->emp_salary_budget;
				$grand_total += $basic_salary;
			}
			return $grand_total;
		}else{
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id
			);
			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary, FALSE, 'MONTH(a.emp_salary_date) ASC', 'MONTH(a.emp_salary_date)', 'SUM(a.emp_salary_budget) as total_salary');

			return $get_salary;
		}
	}

	public function get_salary_hmo($id, $month=FALSE, $year){
		$info = $this->_require_login();

		$year_active = $year;
		if($month == FALSE){
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id,
				'rank_tbl f' => 'b.rank_id = f.rank_id',
			);
			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary);
			$grand_total = 0;
			foreach($get_salary as $row_salary){
				$basic_salary = $row_salary->emp_salary_budget;
				$join_contribution = array(
					'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND b.emp_cont_name='HMO' AND a.emp_config_year = " . $year,
					'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id',
					'employee_config_rank_tbl d' => 'a.emp_config_id = d.emp_config_id AND d.rank_id=' . $row_salary->rank_id
				);
				$check_contribution = $this->admin->check_join('employee_config_tbl a', $join_contribution, TRUE);
				if($check_contribution['result'] == TRUE){
					$contribution = $check_contribution['info']->emp_config_value;
					$contribution_type = $check_contribution['info']->emp_cont_type_name;
					$total_contribution = 0;
					if($contribution_type == 'FIXED'){
						$total_contribution = $contribution;
						$grand_total += $total_contribution;
					}elseif($contribution_type == 'PERCENTAGE'){
						$total_contribution = $basic_salary * $contribution;
						$grand_total += $total_contribution;
					}elseif($contribution_type == 'RANK'){
						$contribution = $check_contribution['info']->emp_config_rank_value;
						$total_contribution = $contribution / 12;
						$grand_total += $total_contribution;
					}
				}
			}

			return $grand_total;	
		}else{
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id,
				'rank_tbl f' => 'b.rank_id = f.rank_id',
				'employee_config_rank_tbl g' => 'b.rank_id = g.rank_id'
			);

			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary, FALSE, 'MONTH(a.emp_salary_date) ASC', 'MONTH(a.emp_salary_date)', '*, SUM(g.emp_config_rank_value / 12) total_hmo');
			return $get_salary;
		}
		
	}

	public function get_salary_pagibig($id, $month = FALSE, $year){
		$info = $this->_require_login();

		$year_active = $year;
		if($month == FALSE){
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id
			);
			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary);
			$grand_total = 0;
			foreach($get_salary as $row_salary){
				$basic_salary = $row_salary->emp_salary_budget;
				$join_contribution = array(
					'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND b.emp_cont_name='PAGIBIG' AND '$basic_salary' BETWEEN a.emp_config_from AND a.emp_config_to",
					'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id AND a.emp_config_year = ' . $year
				);
				$check_contribution = $this->admin->check_join('employee_config_tbl a', $join_contribution, TRUE);
				if($check_contribution['result'] == TRUE){
					$contribution = $check_contribution['info']->emp_config_value;
					$contribution_type = $check_contribution['info']->emp_cont_type_name;
					$total_contribution = 0;
					if($contribution_type == 'FIXED'){
						$total_contribution = $contribution;
						$total_contribution;
						$grand_total += $total_contribution;
					}elseif($contribution_type == 'PERCENTAGE'){
						$total_contribution = $basic_salary * $contribution;
						$grand_total += $total_contribution;
					}
				}
			}
			return $grand_total;
		}else{
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id,
				'employee_config_tbl f' => "a.emp_salary_budget BETWEEN f.emp_config_from AND f.emp_config_to AND f.emp_config_status = 1",
				'employee_contribution_tbl g' => 'f.emp_cont_id = g.emp_cont_id AND g.emp_cont_status=1 AND g.emp_cont_name="PAGIBIG"',
				'employee_contribution_type_tbl h' => 'f.emp_cont_type_id = h.emp_cont_type_id'
			);

			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary, FALSE, 'MONTH(a.emp_salary_date) ASC', FALSE,'(CASE WHEN h.emp_cont_type_name = "FIXED" THEN f.emp_config_value WHEN h.emp_cont_type_name = "PERCENTAGE" THEN a.emp_salary_budget * f.emp_config_value ELSE 0 END) as total_pagibig');
			return $get_salary;
			//echo $this->db->last_query();
		}
	}

	public function get_salary_accident($id, $month = FALSE, $year){
		$info = $this->_require_login();

		$year_active = $year;
		if($month == FALSE){
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id
			);
			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary);
			$grand_total = 0;
			foreach($get_salary as $row_salary){
				$basic_salary = $row_salary->emp_salary_budget;
				$join_contribution = array(
					'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND b.emp_cont_name='ACCIDENT INSURANCE' AND '$basic_salary' BETWEEN a.emp_config_from AND a.emp_config_to",
					'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id AND a.emp_config_year = ' . $year
				);
				$check_contribution = $this->admin->check_join('employee_config_tbl a', $join_contribution, TRUE);
				if($check_contribution['result'] == TRUE){
					$contribution = $check_contribution['info']->emp_config_value;
					$contribution_type = $check_contribution['info']->emp_cont_type_name;
					$total_contribution = 0;
					if($contribution_type == 'FIXED'){
						$total_contribution = $contribution;
						$total_contribution;
						
						$grand_total += $total_contribution;
					}elseif($contribution_type == 'PERCENTAGE'){
						$total_contribution = $basic_salary * $contribution;
						$grand_total += $total_contribution;
					}
				}
			}
			return $grand_total;
		}else{
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id,
				'employee_config_tbl f' => "a.emp_salary_budget BETWEEN f.emp_config_from AND f.emp_config_to AND f.emp_config_status = 1",
				'employee_contribution_tbl g' => "f.emp_cont_id = g.emp_cont_id AND g.emp_cont_status=1 AND g.emp_cont_name='ACCIDENT INSURANCE'",
				'employee_contribution_type_tbl h' => 'f.emp_cont_type_id = h.emp_cont_type_id'
			);

			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary, FALSE, 'MONTH(a.emp_salary_date) ASC', FALSE,'(CASE WHEN h.emp_cont_type_name = "FIXED" THEN f.emp_config_value WHEN h.emp_cont_type_name = "PERCENTAGE" THEN a.emp_salary_budget * f.emp_config_value ELSE 0 END) as total_accident');
			return $get_salary;
		}
	}

	public function get_salary_life($id, $month = FALSE, $year){
		$info = $this->_require_login();

		$year_active = $year;
		if($month == FALSE){
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id
			);
			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary);
			$grand_total = 0;
			foreach($get_salary as $row_salary){
				$basic_salary = $row_salary->emp_salary_budget;
				$join_contribution = array(
					'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND b.emp_cont_name='LIFE INSURANCE' AND '$basic_salary' BETWEEN a.emp_config_from AND a.emp_config_to",
					'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id AND a.emp_config_year = ' . $year
				);
				$check_contribution = $this->admin->check_join('employee_config_tbl a', $join_contribution, TRUE);
				if($check_contribution['result'] == TRUE){
					$contribution = $check_contribution['info']->emp_config_value;
					$contribution_type = $check_contribution['info']->emp_cont_type_name;
					$total_contribution = 0;
					if($contribution_type == 'FIXED'){
						$total_contribution = $contribution;
						$total_contribution;
						
						$grand_total += $total_contribution;
					}elseif($contribution_type == 'PERCENTAGE'){
						$total_contribution = $basic_salary * $contribution;
						$grand_total += $total_contribution;
					}
				}
			}
			return $grand_total;
		}else{
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id,
				'employee_config_tbl f' => "a.emp_salary_budget BETWEEN f.emp_config_from AND f.emp_config_to AND f.emp_config_status = 1",
				'employee_contribution_tbl g' => "f.emp_cont_id = g.emp_cont_id AND g.emp_cont_status=1 AND g.emp_cont_name='LIFE INSURANCE'",
				'employee_contribution_type_tbl h' => 'f.emp_cont_type_id = h.emp_cont_type_id'
			);

			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary, FALSE, 'MONTH(a.emp_salary_date) ASC', FALSE,'(CASE WHEN h.emp_cont_type_name = "FIXED" THEN f.emp_config_value WHEN h.emp_cont_type_name = "PERCENTAGE" THEN a.emp_salary_budget * f.emp_config_value ELSE 0 END) as total_life');
			return $get_salary;
		}
	}

	public function get_salary_philhealth($id, $month = FALSE, $year){
		$info = $this->_require_login();

		$year_active = $year;
		if($month == FALSE){
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id
			);
			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary);
			$grand_total = 0;
			foreach($get_salary as $row_salary){
				$basic_salary = $row_salary->emp_salary_budget;
				$join_contribution = array(
					'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND b.emp_cont_name='PHILHEALTH' AND '$basic_salary' BETWEEN a.emp_config_from AND a.emp_config_to",
					'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id AND a.emp_config_year = ' . $year
				);
				$check_contribution = $this->admin->check_join('employee_config_tbl a', $join_contribution, TRUE);
				if($check_contribution['result'] == TRUE){
					$contribution = $check_contribution['info']->emp_config_value;
					$contribution_type = $check_contribution['info']->emp_cont_type_name;
					$total_contribution = 0;
					if($contribution_type == 'FIXED'){
						$total_contribution = $contribution;
						$total_contribution;

						$grand_total += $total_contribution;
					}elseif($contribution_type == 'PERCENTAGE'){
						$total_contribution = $basic_salary * $contribution;
						$grand_total += $total_contribution;
					}
				}
			}
			return $grand_total;
		}else{
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id,
				'employee_config_tbl f' => "a.emp_salary_budget BETWEEN f.emp_config_from AND f.emp_config_to AND f.emp_config_status = 1",
				'employee_contribution_tbl g' => "f.emp_cont_id = g.emp_cont_id AND g.emp_cont_status=1 AND g.emp_cont_name='PHILHEALTH'",
				'employee_contribution_type_tbl h' => 'f.emp_cont_type_id = h.emp_cont_type_id'
			);

			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary, FALSE, 'MONTH(a.emp_salary_date) ASC', FALSE,'(CASE WHEN h.emp_cont_type_name = "FIXED" THEN f.emp_config_value WHEN h.emp_cont_type_name = "PERCENTAGE" THEN a.emp_salary_budget * f.emp_config_value ELSE 0 END) as total_philhealth');
			return $get_salary;
		}
	}

	public function get_salary_sss($id, $month = FALSE, $year){
		$info = $this->_require_login();

		$year_active = $year;
		if($month == FALSE){
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id
			);

			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary);
			$grand_total = 0;
			foreach($get_salary as $row_salary){
				$basic_salary = $row_salary->emp_salary_budget;
				$join_sss = array(
					'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND '$basic_salary' BETWEEN a.emp_config_from AND a.emp_config_to",
					'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id AND a.emp_config_year = ' . $year
				);
				$check_sss = $this->admin->check_join('employee_config_tbl a', $join_sss, TRUE);
				if($check_sss['result'] == TRUE){
					$contribution = $check_sss['info']->emp_config_value;
					$contribution_type = $check_sss['info']->emp_cont_type_name;
					$total_contribution = 0;
					if($contribution_type == 'FIXED'){
						$total_contribution = $contribution;
						$total_contribution;
						$grand_total += $total_contribution;
					}elseif($contribution_type == 'PERCENTAGE'){
						$total_contribution = $basic_salary * $contribution;
						$grand_total += $total_contribution;
					}
				}
			}
			return $grand_total;
		}else{
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id,
				'employee_config_tbl f' => "a.emp_salary_budget BETWEEN f.emp_config_from AND f.emp_config_to AND f.emp_config_status = 1",
				'employee_contribution_tbl g' => "f.emp_cont_id = g.emp_cont_id AND g.emp_cont_status=1 AND g.emp_cont_name='SSS'",
				'employee_contribution_type_tbl h' => 'f.emp_cont_type_id = h.emp_cont_type_id'
			);

			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary, FALSE, 'MONTH(a.emp_salary_date) ASC', FALSE,'(CASE WHEN h.emp_cont_type_name = "FIXED" THEN f.emp_config_value WHEN h.emp_cont_type_name = "PERCENTAGE" THEN a.emp_salary_budget * f.emp_config_value ELSE 0 END) as total_sss');
			return $get_salary;
		}
	}

	public function opex_donut($id, $year){
		$info = $this->_require_login();

		$cost_center = decode($id);
		$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center));

		if($check_id == TRUE){
			$line = $this->admin->get_query('SELECT e.gl_group_name as gl_group, SUM(c.opex_amount) as amount, e.gl_color as color FROM gl_transaction_tbl a, gl_transaction_item_tbl b, gl_transaction_details_tbl c, gl_subgroup_tbl d, gl_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.gl_trans_id=b.gl_trans_id AND  b.gl_trans_item_id=c.gl_trans_item_id AND b.gl_sub_id=d.gl_sub_id AND d.gl_group_id=e.gl_group_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND f.parent_id=' . $cost_center . ' AND a.gl_trans_status=1 AND b.gl_trans_item_status=1 AND c.gl_trans_det_status=1 AND g.trans_type_id=1 AND e.gl_group_show=1 AND YEAR(c.opex_budget_date)=' . $year . ' GROUP BY e.gl_group_id');
			$data['result'] = 1;

			/*$contribution_sss = $this->get_salary_sss($cost_center, FALSE, $year);
			$contribution_pagibig = $this->get_salary_pagibig($cost_center, FALSE, $year);
			$contribution_philhealth = $this->get_salary_philhealth($cost_center, FALSE, $year);
			$contribution_life = $this->get_salary_life($cost_center, FALSE, $year);
			$contribution_accident = $this->get_salary_accident($cost_center, FALSE, $year);
			$contribution_hmo = $this->get_salary_hmo($cost_center, FALSE, $year);
			$contribution_salary = $this->get_salary($cost_center, FALSE, $year);
			$contribution_13month = $this->get_salary($cost_center, FALSE, $year) / 12;

			$total_sw = $contribution_sss + $contribution_pagibig + $contribution_philhealth + $contribution_life + $contribution_accident + $contribution_hmo + $contribution_salary + $contribution_13month;
			$append_sw = array('gl_group' => 'SALARIES & WAGES', 'amount' => $total_sw, 'color' => '#e25a53');*/

			$get_depreciation = $this->opex_line_capex(encode($cost_center), TRUE, $year);
			$depreciation_amount = 0;

			foreach($get_depreciation['info'] as $row_dep){
				$amount = $row_dep['amount'];
				$depreciation_amount += $amount;
			}

			$append_depreciation = array('gl_group' => 'DEPRECIATION EXPENSES', 'amount' => $depreciation_amount, 'color' => '#f0cee4');


			//array_push($line, $append_sw);
			array_push($line, $append_depreciation);
			$data['info'] = $line;
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
		exit();
	}

	public function opex_line($id, $year){
		$info = $this->_require_login();
		$cost_center = decode($id);
		$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center));
		if($check_id == TRUE){
			$line = $this->admin->get_query('SELECT  DATE_FORMAT(c.opex_budget_date, "%b %Y") as budget_date, SUM(c.opex_amount) as amount FROM gl_transaction_tbl a, gl_transaction_item_tbl b, gl_transaction_details_tbl c, gl_subgroup_tbl d, gl_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.gl_trans_id=b.gl_trans_id AND b.gl_trans_item_id=c.gl_trans_item_id AND b.gl_sub_id=d.gl_sub_id AND d.gl_group_id=e.gl_group_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND f.parent_id=' . $cost_center . ' AND a.gl_trans_status=1 AND b.gl_trans_item_status=1 AND g.trans_type_id=1 AND c.gl_trans_det_status=1 AND e.gl_group_show=1 AND YEAR(c.opex_budget_date)=' . $year . ' GROUP BY YEAR(c.opex_budget_date), MONTH(c.opex_budget_date)');
			
			
			/*$get_salary = $this->get_salary($cost_center, TRUE, $year);
			$get_hmo = $this->get_salary_hmo($cost_center, TRUE, $year);
			$get_pagibig = $this->get_salary_pagibig($cost_center, TRUE, $year);
			$get_accident = $this->get_salary_accident($cost_center, TRUE, $year);
			$get_life = $this->get_salary_life($cost_center, TRUE, $year);
			$get_philhealth = $this->get_salary_philhealth($cost_center, TRUE, $year);
			$get_sss = $this->get_salary_sss($cost_center, TRUE, $year);

			if(isset($get_salary[0])){

				for($a = 0; $a < 12; $a++){
					$line[$a]->amount += $get_salary[$a]->total_salary + $get_hmo[$a]->total_hmo + $get_pagibig[$a]->total_pagibig + $get_accident[$a]->total_accident + $get_life[$a]->total_life + $get_philhealth[$a]->total_philhealth + $get_sss[$a]->total_sss + ($get_salary[$a]->total_salary / 12);
				}
			}*/

			$get_depreciation = $this->opex_line_capex(encode($cost_center), TRUE, $year);
			if(isset($get_depreciation['info'][1])){

				for($a = 0; $a < 12; $a++){
					$line[$a]->amount += $get_depreciation['info'][$a+1]['amount'];
				}
			}

			$data['result'] = 1;
			$data['info'] = $line;
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
		exit();
	}

	public function opex_bar($id, $year){
		$info = $this->_require_login();

		$cost_center = decode($id);
		$join_id = array('bc_tbl b' => 'a.cost_center_code = b.cost_center_code AND a.cost_center_id = ' . $cost_center);
		$check_id = $this->admin->check_join('cost_center_tbl a', $join_id, TRUE);
		if($check_id['result'] == TRUE){
			$bar = $this->admin->get_query('SELECT DATE_FORMAT(c.opex_budget_date, "%b %Y") as budget_date, e.gl_group_name as gl_group, SUM(c.opex_amount) as amount, MONTH(c.opex_budget_date) as month, e.gl_color as color FROM gl_transaction_tbl a, gl_transaction_item_tbl b, gl_transaction_details_tbl c, gl_subgroup_tbl d, gl_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.gl_trans_id=b.gl_trans_id AND b.gl_trans_item_id=c.gl_trans_item_id AND b.gl_sub_id=d.gl_sub_id AND d.gl_group_id=e.gl_group_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND f.parent_id=' . $cost_center . ' AND a.gl_trans_status=1 AND b.gl_trans_item_status=1 AND c.gl_trans_det_status=1 AND e.gl_group_show=1 AND g.trans_type_id=1 AND YEAR(c.opex_budget_date)=' . $year . ' GROUP BY YEAR(c.opex_budget_date), MONTH(c.opex_budget_date), e.gl_group_id ORDER BY c.opex_budget_date ASC');

			$bc_id = $check_id['info']->bc_id;

			$arr_budget_date = array();
			$arr_group = array();
			$arr_gl = array();
			$count = 0;
			foreach($bar as $row){
				$budget_date = $row->budget_date;
				$month = $row->month;
				$amount = $row->amount;
				$gl_group = $row->gl_group;
				$gl_color = $row->color;
				if(!array_key_exists($month, $arr_budget_date)){
					$arr_budget_date[$month] = $budget_date;
				}

				if(!array_key_exists($gl_group, $arr_gl)){
					$arr_gl[$gl_group]['asset'] = $gl_group;
					$arr_gl[$gl_group]['color'] = $gl_color;
					$arr_gl[$gl_group]['amount'] = array();

					$arr_group[$gl_group] = $gl_group;
					$count++;
				}

				array_push($arr_gl[$gl_group]['amount'], $amount);
			}

			$get_depreciation = $this->opex_line_capex(encode($cost_center), TRUE, $year);
			$depre = 'DEPRECIATION EXPENSES';

			$arr_group[$depre] = $depre;

			$arr_gl[$depre]['asset'] = $depre;
			$arr_gl[$depre]['color'] = '#f0cee4';

			//$arr_gl[$sw]['amount'] = array();
			$arr_gl[$depre]['amount'] = array();
			for($a = 0; $a < 12; $a++){

				$total_depreciation = $get_depreciation['info'][$a+1]['amount'];
				array_push($arr_gl[$depre]['amount'], $total_depreciation);
			}

			$data['result'] = 1;
			$data['month'] = $arr_budget_date;
			$data['group'] = $arr_group;
			$data['group_amount'] = $arr_gl;
		}else{
			$data['result'] = 0;
		}
		echo json_encode($data);
		exit();
	}

	public function opex_donut_capex($id, $year){
		$info = $this->_require_login();

		$cost_center = decode($id);
		$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center));
		if($check_id == TRUE){
			$donut = $this->admin->get_query('SELECT d.ag_name as asset_group, SUM(((c.asg_price / c.asg_lifespan) * b.capex_qty) * (13-MONTH(b.capex_budget_date))) as opex_ny FROM asset_group_transaction_tbl a, asset_group_transaction_details_tbl b, asset_subgroup_tbl c, asset_group_tbl d, cost_center_tbl e WHERE a.ag_trans_id=b.ag_trans_id AND b.asg_id=c.asg_id AND c.ag_id=d.ag_id AND b.cost_center_id=e.cost_center_id AND a.ag_trans_status=1 AND b.ag_trans_det_status=1 AND e.parent_id=' . $cost_center . ' AND YEAR(b.capex_budget_date)=' . $year . ' GROUP BY d.ag_id');
			$data['result'] = 1;
			$data['info'] = $donut;
		}else{
			$data['result'] = 0;
		}		
		echo json_encode($data);
		exit();
	}

	public function opex_line_capex($id, $return_type=FALSE, $year){
		$info = $this->_require_login();

		$cost_center = decode($id);
		$join_id = array('bc_tbl b' => 'a.cost_center_code = b.cost_center_code AND a.cost_center_id = ' . $cost_center);
		$check_id = $this->admin->check_join('cost_center_tbl a', $join_id, TRUE);
		if($check_id['result'] == TRUE){
			$bc_id = $check_id['info']->bc_id;

			$line = $this->admin->get_query('
				SELECT e.ag_name as asset_group, (b.capex_price / b.capex_lifespan) as avg_opex, (13-MONTH(c.capex_budget_date)) as remaining_month, MONTH(c.capex_budget_date) as budget_date, c.capex_qty, "DEPRECIATION BUDGET" as depre_type FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND a.ag_trans_status=1 AND b.ag_trans_item_status=1 AND c.ag_trans_det_status=1 AND g.trans_type_id=1 AND f.parent_id=' . $cost_center . ' AND YEAR(c.capex_budget_date)=' . $year);

			$line_actual = $this->admin->get_query('(SELECT "DEPRECIATION EXPENSES", SUM(x.depreciation_bc_amount) as avg_opex, 1 as remaining_month, MONTH(x.depreciation_bc_date) as budget_date, 1 as capex_qty, "DEPRECIATION ACTUAL" as depre_type FROM depreciation_bc_tbl x, gl_subgroup_tbl y, bc_tbl z, gl_group_tbl x1 WHERE x.gl_sub_id = y.gl_sub_id AND x.bc_id = z.bc_id AND y.gl_group_id = x1.gl_group_id AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND z.bc_id = ' . $bc_id . ' AND x.depreciation_bc_status = 1 GROUP BY MONTH(x.depreciation_bc_date))');


			$month = array(
				'1' => 'Jan ' . $year,
				'2' => 'Feb ' . $year,
				'3' => 'Mar ' . $year,
				'4' => 'Apr ' . $year,
				'5' => 'May ' . $year,
				'6' => 'Jun ' . $year,
				'7' => 'Jul ' . $year,
				'8' => 'Aug ' . $year,
				'9' => 'Sep ' . $year,
				'10' => 'Oct ' . $year,
				'11' => 'Nov ' . $year,
				'12' => 'Dec ' . $year,
			);

			$line_data = array(
				'1' => array('month' => 'Jan ' . $year, 'amount' => 0),
				'2' => array('month' => 'Feb ' . $year, 'amount' => 0),
				'3' => array('month' => 'Mar ' . $year, 'amount' => 0),
				'4' => array('month' => 'Apr ' . $year, 'amount' => 0),
				'5' => array('month' => 'May ' . $year, 'amount' => 0),
				'6' => array('month' => 'Jun ' . $year, 'amount' => 0),
				'7' => array('month' => 'Jul ' . $year, 'amount' => 0),
				'8' => array('month' => 'Aug ' . $year, 'amount' => 0),
				'9' => array('month' => 'Sep ' . $year, 'amount' => 0),
				'10' => array('month' => 'Oct ' . $year, 'amount' => 0),
				'11' => array('month' => 'Nov ' . $year, 'amount' => 0),
				'12' => array('month' => 'Dec ' . $year, 'amount' => 0)
			);
			$total = 0;
			foreach($line as $row){
				$budget_date = $row->budget_date;
				$avg_opex = $row->avg_opex;
				$remaining_month = $row->remaining_month;
				$qty = $row->capex_qty;
				$a = 0;
				
				for($a = $budget_date; $a <= 12; $a++){
					$line_data[$a]['amount'] += $avg_opex * $row->capex_qty;
				}
			}

			foreach($line_actual as $row){
				$budget_date = $row->budget_date;
				$avg_opex = $row->avg_opex;
				$line_data[$budget_date]['amount'] += $avg_opex;
			}

			$data['result'] = 1;
			$data['info'] = $line_data;
			$data['total'] = $total;
		}else{
			$data['result'] = 0;
		}

		if($return_type == FALSE){
			echo json_encode($data);
			exit();
		}else{
			return $data;
		}
	}

	public function get_depreciation_subgroup($cost_center, $year, $bc_id){
		$info = $this->_require_login();

		$get_depreciation = $this->admin->get_query('
			SELECT 
				ag_name, asset_group, ag_gl_code, SUM(total) as total, SUM(total1) as total1, SUM(total2) as total2, budget_date, gl_sub_name

				
			FROM
			(

				(
					SELECT e.ag_name, d.asg_name as asset_group, e.ag_gl_code, SUM((b.capex_price / b.capex_lifespan) * (13-MONTH(c.capex_budget_date)) * c.capex_qty) as total, 0 as total1, 0 as total2, MONTH(c.capex_budget_date) as budget_date, h.gl_sub_name FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g, gl_subgroup_tbl h WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND e.ag_gl_code = h.gl_code AND g.trans_type_id = 1 AND a.ag_trans_status = 1 AND b.ag_trans_item_status = 1 AND c.ag_trans_det_status=1 AND f.parent_id=' . $cost_center . ' AND YEAR(c.capex_budget_date)=' . $year . ' GROUP BY h.gl_sub_id
				)

				UNION

				(
					SELECT "", "", y.gl_code, SUM(x.depreciation_bc_amount) as total, 0 as total1, 0 as total2, x.depreciation_bc_date, y.gl_sub_name FROM depreciation_bc_tbl x, gl_subgroup_tbl y WHERE x.gl_sub_id = y.gl_sub_id  AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = "' . $bc_id . '" AND x.depreciation_bc_status = 1 GROUP BY y.gl_sub_id
				)

				UNION


				(
					SELECT "", "", y.gl_code, 0 as total, SUM(x.cost) as total1, 0 as total2, "",  y.gl_sub_name FROM comparative_opex_gl_tbl x, gl_subgroup_tbl y, gl_group_tbl z WHERE x.gl_sub_id = y.gl_sub_id AND y.gl_group_id = z.gl_group_id AND x.bc_id = ' . $bc_id . ' AND x.comp_opex_gl_status = 1 AND YEAR(x.trans_year) = ' . ($year - 1) . ' AND z.gl_group_name = "DEPRECIATION EXPENSES" GROUP BY y.gl_sub_id
				)

				UNION

				(
					SELECT "", "", y.gl_code, 0 as total1, 0 as total1, SUM(x.cost) as total2, "",  y.gl_sub_name FROM comparative_opex_gl_tbl x, gl_subgroup_tbl y, gl_group_tbl z WHERE x.gl_sub_id = y.gl_sub_id AND y.gl_group_id = z.gl_group_id AND x.bc_id = ' . $bc_id . ' AND x.comp_opex_gl_status = 1 AND YEAR(x.trans_year) = ' . ($year - 2) . ' AND z.gl_group_name = "DEPRECIATION EXPENSES" GROUP BY y.gl_sub_id
				)

			)depreciation_bc_tbl


			GROUP BY gl_sub_name
		');

		return $get_depreciation;
	}

	public function transac_opex($id, $year, $gl_transaction_type=NULL, $gl_group_id=NULL, $gl_group_name=NULL, $direct_labor=NULL){
		$info = $this->_require_login();
		$data['id'] = $id;
		$data['year'] = $year;
		
		$data['direct_labor'] = $direct_labor ? $direct_labor : NULL;
		
		$data['trans_label'] = $direct_labor ? 'Direct Labor' : 'Opex Store';
		$data['title'] = 'Add '.$data['trans_label'];

		$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => decode($id), 'cost_center_status' => 1), TRUE);
		
		if($check_id['result'] == TRUE){
			$data['id'] = $id;
			$cost_center_id = $check_id['info']->cost_center_id;
			$data['cost_center_name'] = $check_id['info']->cost_center_desc;
			$data['gl_group'] = $this->admin->get_query('SELECT * FROM gl_group_tbl as a WHERE a.gl_group_id NOT IN (SELECT b.gl_group_id FROM gl_transaction_tbl b, cost_center_tbl c WHERE b.cost_center_id=c.cost_center_id AND b.gl_trans_status=1 AND c.cost_center_id=' . $cost_center_id . ' AND b.gl_year = ' . $year . ') AND a.gl_group_name !="DEPRECIATION EXPENSES" OR a.gl_group_name = "STORE EXPENSES"');

			$sw_join = array(
				'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.emp_salary_trans_status = 1 AND b.cost_center_id = ' . $cost_center_id . ' AND a.emp_salary_trans_year = ' . $year
			);

			$get_sw_group = $this->admin->check_join('employee_salary_trans_tbl a', $sw_join);
			$data['sw'] = $get_sw_group;
			$data['brand'] = $this->admin->get_data('brand_tbl', 'brand_status = 1');
			$data['gl_class'] = $this->admin->get_data('gl_class_tbl', 'gl_class_status = 1');

			$data['gl_group_id'] = $gl_group_id;
			$gl_group_id = $gl_group_id ? decode($gl_group_id) : NULL; 
			$data['gl_group_name'] = $gl_group_name;
			

			$view_file = decode($gl_transaction_type) == 1 ? ($gl_group_id ? 'admin/admin_transac_opex_store_level_specific_group' : 'admin/admin_transac_opex_store_level') : 'admin/admin_transac_opex';
			
			$data['content'] = $this->load->view($view_file, $data , TRUE);
			// $data['content'] = $this->load->view('admin/admin_transac_opex_store_level_specific_group', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}
	}

	public function get_stores(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$brand_id = decode($this->input->post('id'));
			$cost_center = decode($this->input->post('cost_center'));
			$year = clean_data($this->input->post('year'));
			$check_brand = $this->admin->check_data('brand_tbl', array('brand_id' => $brand_id, 'brand_status' => 1));
			if($check_brand == TRUE){
				$check_cc = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'cost_center_status' => 1), TRUE);
				if($check_cc['result'] == TRUE){
					$cost_center_id = $check_cc['info']->cost_center_id;
					$join_outlet = array(
						'outlet_tbl b' => 'a.outlet_id = b.outlet_id AND a.outlet_brand_status = 1 AND a.brand_id = ' . $brand_id,
						'cost_center_tbl c' => 'b.ifs_code = c.cost_center_code AND c.cost_center_status = 1 AND c.cost_center_type_id = 8 AND c.parent_id = ' . $cost_center_id,
						'outlet_year_tbl d' => 'b.outlet_id = d.outlet_id AND d.outlet_year_status = 1 AND d.outlet_year = ' . $year
					);
					$where = 'c.cost_center_id NOT IN (SELECT y.cost_center_id FROM gl_transaction_tbl w, gl_transaction_item_tbl x, cost_center_tbl y, outlet_tbl z, outlet_brand_tbl m  WHERE w.gl_trans_id = x.gl_trans_id AND x.cost_center_id = y.cost_center_id AND y.cost_center_code = z.ifs_code AND z.outlet_id = m.outlet_id AND m.outlet_brand_status = 1 AND m.brand_id=' . $brand_id . ' AND w.gl_year = ' . $year . ' AND w.gl_trans_status = 1 AND x.gl_trans_item_status = 1)';
					$get_outlet = $this->admin->get_join('outlet_brand_tbl a', $join_outlet, FALSE, FALSE, FALSE, FALSE, $where, FALSE);
					
					$outlet = '';
					foreach($get_outlet as $row):
						$outlet .= '<option value="' . encode($row->cost_center_id) . '">' . $row->cost_center_desc . '</option>';
					endforeach;
					$data['result'] = 1;
					$data['info'] = $outlet;
				}else{

				}
			}else{
				$data['result'] = 0;
			}
			echo json_encode($data);
		}
	}

	public function get_gl(){
		$info = $this->_require_login();
		$year = $this->_active_year();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_group_id =clean_data(decode($this->input->post('id')));
			$cost_center =clean_data(decode($this->input->post('cost_center')));
			$check_gl = $this->admin->check_data('gl_group_tbl', array('gl_group_id' => $gl_group_id), TRUE);
			if($check_gl['result'] == TRUE){
				$data['name'] = $check_gl['info']->gl_group_name;
				$gl_name = $check_gl['info']->gl_group_name;
				$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'cost_center_status' => 1), TRUE);

				if($check_cost_center['result'] == TRUE){
					$cost_center_id = $check_cost_center['info']->cost_center_id;
					/*if($gl_name == 'SALARIES & WAGES'){
						$gl = $this->_salary_data($cost_center_id);
					}else{
						$gl = $this->_gl_data($cost_center_id, $gl_group_id, $gl_name);
					}*/

					$gl = $this->_gl_data($cost_center_id, $gl_group_id, $gl_name);

					$data['gl'] = $gl;
					$data['result'] = 1;
				}else{
					$data[''] = 0;
				}
				
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}
	
	public function get_gl_base_on_class($gl_class_id, $cost_center){
		$info = $this->_require_login();
		$year = $this->_active_year();
		if($_SERVER['REQUEST_METHOD'] == 'GET'){
			// $gl_class_id =clean_data(decode($this->input->post('id')));
			// $cost_center =clean_data(decode($this->input->post('cost_center')));
			
			$gl_class_id =clean_data(decode($gl_class_id));
			$cost_center =clean_data(decode($cost_center));
			$check_gl = $this->admin->check_data('gl_class_tbl', array('gl_class_id' => $gl_class_id), TRUE);
			
			if($check_gl['result'] == TRUE){
				// $data['name'] = $check_gl['info']->gl_group_name;
				// $gl_name = $check_gl['info']->gl_group_name;
				$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'cost_center_status' => 1), TRUE);

				if($check_cost_center['result'] == TRUE){
					$cost_center_id = $check_cost_center['info']->cost_center_id;
					/*if($gl_name == 'SALARIES & WAGES'){
						$gl = $this->_salary_data($cost_center_id);
					}else{
						$gl = $this->_gl_data($cost_center_id, $gl_group_id, $gl_name);
					}*/

					// $gl = $this->_gl_data_stores($cost_center_id, $gl_class_id);
					$gl = '';

					$data['gl'] = $gl;
					$data['result'] = 1;
				}else{
					$data[''] = 0;
				}
				
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 3;
		}

		echo json_encode($data);
	}

	public function get_gl_sub(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_sub_id =clean_data(decode($this->input->post('id')));
			$cost_center =clean_data(decode($this->input->post('cost_center')));
			$join_gl = array('gl_group_tbl b' => 'a.gl_group_id = b.gl_group_id AND gl_sub_status = 1 AND a.gl_sub_id = ' . $gl_sub_id);
			$check_gl = $this->admin->check_join('gl_subgroup_tbl a', $join_gl, TRUE);
			if($check_gl['result'] == TRUE){
				$data['name'] = $check_gl['info']->gl_group_name;
				$gl_name = $check_gl['info']->gl_group_name;
				$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'cost_center_status' => 1), TRUE);

				if($check_cost_center['result'] == TRUE){
					$cost_center_id = $check_cost_center['info']->cost_center_id;
					/*if($gl_name == 'SALARIES & WAGES'){
						$gl = $this->_salary_data($cost_center_id);
					}else{*/

					$gl = $this->_gl_data($cost_center_id, null, $gl_name, $gl_sub_id);
					
					$data['gl'] = $gl;
					$data['result'] = 1;
				}else{
					$data[''] = 0;
				}
				
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function _gl_data($cost_center_id, $gl_group_id, $gl_name, $gl_sub_id=null){
		$year = $this->_active_year();
		if($gl_name == 'STORE EXPENSES'){
			$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_id, 'cost_center_type_id' => 8 , 'cost_center_status' => 1));
		}else{
			$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_id, 'cost_center_type_id !=' => 8, 'cost_center_status' => 1));
		}

		$cost_center_data = '<select name="cost_center[]" class="form-control input-sm opex-cost-center">';
		$cost_center_data .= '<option value="">Select...</option>';
		foreach($get_cost_center as $row){
			$cost_center_data .= '<option value="' . encode($row->cost_center_id) . '">' . $row->cost_center_code . ' - ' . $row->cost_center_desc . '</option>';
		}

		$cost_center_data .= '</select>';

		if($gl_sub_id == null){
			$get_gl = $this->admin->get_data('gl_subgroup_tbl', array('gl_group_id' => $gl_group_id, 'gl_sub_status' => 1));
		}else{
			$get_gl = $this->admin->get_data('gl_subgroup_tbl', array('gl_sub_id' => $gl_sub_id, 'gl_sub_status' => 1));
		}
		$gl = '';
		$row_count = 1;
		foreach($get_gl as $row){
			$gl .= '<tr class="row-' . $row_count . '"><input type="hidden" name="id[]" value="' . encode($row->gl_sub_id) . '">';
			$gl .= '<td width="60px;" class="text-center"><a href="#" class="remove-gl-sub remove"><i class="fa fa-remove"></i></a>';

			if($gl_name != 'STORE EXPENSES'){
				$gl .= '&nbsp;&nbsp;&nbsp;<a href="" class="add-gl-sub add" data-id="' . encode($row->gl_sub_id) . '"><i class="fa fa-plus"></i></a>';
			}

			$gl .= '&nbsp;&nbsp;<a href="#" class="slider-add-item slider-opex" data-count="' . $row_count . '"><span class="fa fa-sliders"></span></a></td>';


			$gl .= '<td width="7%">' . $row->gl_sub_name .'</td>';
			$gl .= '<td width="13%">' . $cost_center_data . '</td>';
			$gl .= '<td class="text-right" width="5%"><label class="opex-total-qty">0</label></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty jan-qty" name="opex[jan][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty feb-qty" name="opex[feb][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty mar-qty" name="opex[mar][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty apr-qty" name="opex[apr][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty may-qty" name="opex[may][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty jun-qty" name="opex[jun][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty jul-qty" name="opex[jul][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty aug-qty" name="opex[aug][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty sep-qty" name="opex[sep][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty oct-qty" name="opex[oct][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty nov-qty" name="opex[nov][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty dec-qty" name="opex[dec][]" class="form-control input-sm"></td>';
			$gl .= '</tr>';

			$row_count++;
		}

		return $gl;
	}
	
	public function _gl_data_stores($cost_center_id, $gl_class_id, $gl_sub_id=null){
		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','2048M');
		$year = $this->_active_year();
		// GET THE STORES
		$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_id, 'cost_center_type_id' => 8 , 'cost_center_status' => 1));

		$cost_center_data = '<select name="cost_center[]" class="form-control input-sm opex-cost-center">';
		$cost_center_data .= '<option value="">Select...</option>';
		foreach($get_cost_center as $row){
			$cost_center_data .= '<option value="' . encode($row->cost_center_id) . '">' . $row->cost_center_code . ' - ' . $row->cost_center_desc . '</option>';
		}

		$cost_center_data .= '</select>';

		if($gl_sub_id == null){
			$get_gl = $this->admin->get_data('gl_subgroup_tbl', array('gl_class_id' => $gl_class_id, 'gl_sub_status' => 1));
		}else{
			$get_gl = $this->admin->get_data('gl_subgroup_tbl', array('gl_sub_id' => $gl_sub_id, 'gl_sub_status' => 1));
		}
		$gl = '';
		$row_count = 1;
		if(!empty($get_gl)){
			foreach($get_gl as $row){
				$gl .= '<tr class="row-' . $row_count . '"><input type="hidden" name="id[]" value="' . encode($row->gl_sub_id) . '">';
				$gl .= '<td width="60px;" class="text-center"><a href="#" class="remove-gl-sub remove"><i class="fa fa-remove"></i></a>';
	
				
	
				$gl .= '&nbsp;&nbsp;<a href="#" class="slider-add-item slider-opex" data-count="' . $row_count . '"><span class="fa fa-sliders"></span></a></td>';
	
	
				$gl .= '<td width="7%">' . $row->gl_sub_name .'</td>';
				$gl .= '<td width="13%">' . $cost_center_data . '</td>';
				$gl .= '<td class="text-right" width="5%"><label class="opex-total-qty">0</label></td>';
				$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty jan-qty" name="opex[jan][]" class="form-control input-sm"></td>';
				$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty feb-qty" name="opex[feb][]" class="form-control input-sm"></td>';
				$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty mar-qty" name="opex[mar][]" class="form-control input-sm"></td>';
				$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty apr-qty" name="opex[apr][]" class="form-control input-sm"></td>';
				$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty may-qty" name="opex[may][]" class="form-control input-sm"></td>';
				$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty jun-qty" name="opex[jun][]" class="form-control input-sm"></td>';
				$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty jul-qty" name="opex[jul][]" class="form-control input-sm"></td>';
				$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty aug-qty" name="opex[aug][]" class="form-control input-sm"></td>';
				$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty sep-qty" name="opex[sep][]" class="form-control input-sm"></td>';
				$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty oct-qty" name="opex[oct][]" class="form-control input-sm"></td>';
				$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty nov-qty" name="opex[nov][]" class="form-control input-sm"></td>';
				$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty dec-qty" name="opex[dec][]" class="form-control input-sm"></td>';
				$gl .= '</tr>';
	
				$row_count++;
			}
		}

		return $gl;
	}

	public function _salary_data($cost_center, $exist = FALSE, $year = FALSE){

		if($exist == FALSE){
			$join_emp = array(
				'employee_year_tbl b' => 'a.emp_id = b.emp_id AND b.emp_year_status = 1',
				'cost_center_tbl c' =>  'b.cost_center_id = c.cost_center_id AND c.parent_id=' . $cost_center
			);
			$get_emp = $this->admin->get_join('employee_tbl a', $join_emp);
		}else{
			$join_emp = array(
				'employee_year_tbl b' => 'a.emp_id = b.emp_id',
				'cost_center_tbl c' =>  'b.cost_center_id = c.cost_center_id AND c.parent_id=' . $cost_center
			);

			$where = 'b.emp_year_status = 1 AND a.emp_id NOT IN (SELECT x.emp_id FROM employee_salary_item_tbl x, employee_salary_trans_tbl y WHERE x.emp_salary_trans_id = y.emp_salary_trans_id AND x.emp_salary_item_status = 1 AND y.emp_salary_trans_year = ' . $year . ')';
			$get_emp = $this->admin->get_join('employee_tbl a', $join_emp, FALSE, FALSE, FALSE, FALSE, $where);
		}
		
		$gl = '';
		foreach($get_emp as $row_emp){
			$total_salary = number_format($row_emp->emp_year_salary * 12, 2);
			$gl .= '<tr><input type="hidden" name="id[]" value="' . encode($row_emp->emp_id) . '">';
			$gl .= '<td class="text-center"><a href="#" class="remove-asg"><i class="fa fa-remove"></i></a></td>';
			$gl .= '<td width="7%">' . $row_emp->emp_lname . ', ' . $row_emp->emp_fname . '</td>';
			$gl .= '<td width="7%">' . $row_emp->cost_center_code . '</td>';
			$gl .= '<td class="text-right" width="5%"><label class="total-salary">' . $total_salary . '</label></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="basic-salary jan-salary" name="salary[jan][]" class="form-control input-sm" value="' . $row_emp->emp_year_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty feb-salary" name="salary[feb][]" class="form-control input-sm" value="' . $row_emp->emp_year_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty mar-salary" name="salary[mar][]" class="form-control input-sm" value="' . $row_emp->emp_year_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty apr-salary" name="salary[apr][]" class="form-control input-sm" value="' . $row_emp->emp_year_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty may-salary" name="salary[may][]" class="form-control input-sm" value="' . $row_emp->emp_year_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty jun-salary" name="salary[jun][]" class="form-control input-sm" value="' . $row_emp->emp_year_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty jul-salary" name="salary[jul][]" class="form-control input-sm" value="' . $row_emp->emp_year_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty aug-salary" name="salary[aug][]" class="form-control input-sm" value="' . $row_emp->emp_year_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty sep-salary" name="salary[sep][]" class="form-control input-sm" value="' . $row_emp->emp_year_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty oct-salary" name="salary[oct][]" class="form-control input-sm" value="' . $row_emp->emp_year_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty nov-salary" name="salary[nov][]" class="form-control input-sm" value="' . $row_emp->emp_year_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty dec-salary" name="salary[dec][]" class="form-control input-sm" value="' . $row_emp->emp_year_salary . '"></td>';
			$gl .= '</tr>';
		}

		return $gl;
	}

	public function add_opex(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_group = clean_data(decode($this->input->post('gl_group')));
			$cost_center = clean_data(decode($this->input->post('bc_cost_center')));
			$year = clean_data($this->input->post('year'));
			$id = clean_data($this->input->post('id'));
			if(!empty($gl_group) && !empty($cost_center) && !empty($year)){
				$check_gl = $this->admin->check_data('gl_group_tbl', array('gl_group_id' => $gl_group, 'gl_group_status' => 1), TRUE);
				if($check_gl['result'] == TRUE){
					$gl_name = $check_gl['info']->gl_group_name;
					$check_cc = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'cost_center_status' => 1), TRUE);
					if($check_cc['result'] == TRUE){
						$cost_center_id = $check_cc['info']->cost_center_id;
						$this->db->trans_start();
						/*if($gl_name == 'SALARIES & WAGES'){
							$salary = clean_data($this->input->post('salary'));

							$set_salary = array(
								'cost_center_id' => $cost_center_id,
								'user_id' => $user_id,
								'trans_type_id' => 1,
								'emp_salary_trans_year' => $year,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_status' => 1
							);
							
							$insert_emp = $this->admin->insert_data('employee_salary_trans_tbl', $set_salary, TRUE);
							if($insert_emp['result'] == TRUE){
								$emp_salary_trans_id = $insert_emp['id'];
								$count = 0;
								foreach($id as $emp){
									$emp_id = decode($emp);
									$check_emp = $this->admin->check_data('employee_year_tbl', array('emp_id' => $emp_id, 'emp_year_status' => 1, 'emp_year' => $year), TRUE);

									if($check_emp['result'] == TRUE){

										$emp_cost_center = $check_emp['info']->cost_center_id;
										$rank_id = $check_emp['info']->rank_id;

										$set_item = array(
											'emp_salary_trans_id' => $emp_salary_trans_id,
											'emp_id' => $emp_id,
											'cost_center_id' => $emp_cost_center,
											'rank_id' => $rank_id,
											'emp_salary_item_added' => date_now(),
											'emp_salary_item_status' => 1
										);

										$insert_item = $this->admin->insert_data('employee_salary_item_tbl', $set_item, TRUE);
										$emp_salary_item_id = $insert_item['id'];


										$date = $year . '-01-01';
										$amount_jan = check_num($salary['jan'][$count]);
										$set_emp_jan = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_jan,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jan);

										$date = $year . '-02-01';
										$amount_feb = check_num($salary['feb'][$count]);
										$set_emp_feb = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_feb,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_feb);

										$date = $year . '-03-01';
										$amount_mar = check_num($salary['mar'][$count]);
										$set_emp_mar = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_mar,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_mar);

										$date = $year . '-04-01';
										$amount_apr = check_num($salary['apr'][$count]);
										$set_emp_apr = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_apr,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_apr);

										$date = $year . '-05-01';
										$amount_may = check_num($salary['may'][$count]);
										$set_emp_may = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_may,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_may);

										$date = $year . '-06-01';
										$amount_jun = check_num($salary['jun'][$count]);
										$set_emp_jun = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_jun,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jun);

										$date = $year . '-07-01';
										$amount_jul = check_num($salary['jul'][$count]);
										$set_emp_jul = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_jul,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jul);

										$date = $year . '-08-01';
										$amount_aug = check_num($salary['aug'][$count]);
										$set_emp_aug = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_aug,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_aug);

										$date = $year . '-09-01';
										$amount_sep = check_num($salary['sep'][$count]);
										$set_emp_sep = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_sep,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_sep);

										$date = $year . '-10-01';
										$amount_oct = check_num($salary['oct'][$count]);
										$set_emp_oct = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_oct,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_oct);

										$date = $year . '-11-01';
										$amount_nov = check_num($salary['nov'][$count]);
										$set_emp_nov = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_nov,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_nov);

										$date = $year . '-12-01';
										$amount_dec = check_num($salary['dec'][$count]);
										$set_emp_dec = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_dec,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_dec);
									}else{
										$this->db->trans_rollback();
										$msg = '<div class="alert alert-danger">Error employee is not exist or deactivated. Please try again!</div>';
										$this->session->set_flashdata('message', $msg);
										redirect($_SERVER['HTTP_REFERER']);
									}

									$count++;
								}
							}else{
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
								$this->session->set_flashdata('message', $msg);
								redirect($_SERVER['HTTP_REFERER']);
							}

							if($this->db->trans_status() === FALSE){
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error please try again!</div>';
							}else{
								$this->db->trans_commit();
								$msg = '<div class="alert alert-success">OPEX successfully added.</strong></div>';
							}*/
						
						$set = array(
							'gl_group_id' => $gl_group,
							'trans_type_id' => 1,
							'cost_center_id' => $cost_center_id,
							// 'gl_transaction_type_id' => 2,
							'user_id' => $user_id,
							'gl_year' => $year,
							'gl_trans_added' => date_now(),
							'gl_trans_status' => 1
						);
						
						$insert_opex_trans = $this->admin->insert_data('gl_transaction_tbl', $set, TRUE);
						$gl_trans_id = $insert_opex_trans['id'];
						if($insert_opex_trans['result'] == TRUE){
							
							$gl_cost_center = clean_data($this->input->post('cost_center'));
							$opex = clean_data($this->input->post('opex'));
							$count = 0;
							foreach($id as $row){
								$gl_sub_id = decode($row);
								$check_gl_sub_id = $this->admin->check_data('gl_subgroup_tbl', array('gl_sub_id' => $gl_sub_id, 'gl_sub_status' => 1), TRUE);
								
								if($check_gl_sub_id['result'] == TRUE){
									$gl_cost_center_id = decode($gl_cost_center[$count]);

									$amount_jan = check_num($opex['jan'][$count]);
									$amount_feb = check_num($opex['feb'][$count]);
									$amount_mar = check_num($opex['mar'][$count]);
									$amount_apr = check_num($opex['apr'][$count]);
									$amount_may = check_num($opex['may'][$count]);
									$amount_jun = check_num($opex['jun'][$count]);
									$amount_jul = check_num($opex['jul'][$count]);
									$amount_aug = check_num($opex['aug'][$count]);
									$amount_sep = check_num($opex['sep'][$count]);
									$amount_oct = check_num($opex['oct'][$count]);
									$amount_nov = check_num($opex['nov'][$count]);
									$amount_dec = check_num($opex['dec'][$count]);

									$total_amount = $amount_jan + $amount_feb + $amount_mar + $amount_apr + $amount_may + $amount_jun + $amount_jul + $amount_aug + $amount_sep + $amount_oct + $amount_nov + $amount_dec;

									if($total_amount > 0){

										$set_item = array(
											'gl_trans_id' => $gl_trans_id,
											'gl_sub_id' => $gl_sub_id,
											'cost_center_id' => $gl_cost_center_id,
											'gl_transaction_type_id' => 2,
											'user_id' => $user_id,
											'gl_trans_item_added' => date_now(),
											'gl_trans_item_status' =>	1
										);
										$insert_item = $this->admin->insert_data('gl_transaction_item_tbl', $set_item, TRUE);

										if($insert_item['result'] == TRUE){
											$gl_trans_item_id = $insert_item['id'];
											
											$date = $year . '-' . '01-01';
											$set_gl_trans = array(
												'gl_trans_item_id' => $gl_trans_item_id,
												'opex_amount' => $amount_jan,
												'opex_budget_date' => $date,
												'gl_trans_det_added' => date_now(),
												'gl_trans_det_status' => 1
											);
											$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_trans);

											
											$date = $year . '-' . '02-01';
											$set_gl_det_trans = array(
												'gl_trans_item_id' => $gl_trans_item_id,
												'opex_amount' => $amount_feb,
												'opex_budget_date' => $date,
												'gl_trans_det_added' => date_now(),
												'gl_trans_det_status' => 1
											);
											$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

											
											$date = $year . '-' . '03-01';
											$set_gl_det_trans = array(
												'gl_trans_item_id' => $gl_trans_item_id,
												'opex_amount' => $amount_mar,
												'opex_budget_date' => $date,
												'gl_trans_det_added' => date_now(),
												'gl_trans_det_status' => 1
											);
											$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

											
											$date = $year . '-' . '04-01';
											$set_gl_det_trans = array(
												'gl_trans_item_id' => $gl_trans_item_id,
												'opex_amount' => $amount_apr,
												'opex_budget_date' => $date,
												'gl_trans_det_added' => date_now(),
												'gl_trans_det_status' => 1
											);
											$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);
											
											
											$date = $year . '-' . '05-01';
											$set_gl_det_trans = array(
												'gl_trans_item_id' => $gl_trans_item_id,
												'opex_amount' => $amount_may,
												'opex_budget_date' => $date,
												'gl_trans_det_added' => date_now(),
												'gl_trans_det_status' => 1
											);
											$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

											
											$date = $year . '-' . '06-01';
											$set_gl_det_trans = array(
												'gl_trans_item_id' => $gl_trans_item_id,
												'opex_amount' => $amount_jun,
												'opex_budget_date' => $date,
												'gl_trans_det_added' => date_now(),
												'gl_trans_det_status' => 1
											);
											$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

											$date = $year . '-' . '07-01';
											$set_gl_det_trans = array(
												'gl_trans_item_id' => $gl_trans_item_id,
												'opex_amount' => $amount_jul,
												'opex_budget_date' => $date,
												'gl_trans_det_added' => date_now(),
												'gl_trans_det_status' => 1
											);
											$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
											$date = $year . '-' . '08-01';
											$set_gl_det_trans = array(
												'gl_trans_item_id' => $gl_trans_item_id,
												'opex_amount' => $amount_aug,
												'opex_budget_date' => $date,
												'gl_trans_det_added' => date_now(),
												'gl_trans_det_status' => 1
											);
											$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

											
											$date = $year . '-' . '09-01';
											$set_gl_det_trans = array(
												'gl_trans_item_id' => $gl_trans_item_id,
												'opex_amount' => $amount_sep,
												'opex_budget_date' => $date,
												'gl_trans_det_added' => date_now(),
												'gl_trans_det_status' => 1
											);
											$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

											
											$date = $year . '-' . '10-01';
											$set_gl_det_trans = array(
												'gl_trans_item_id' => $gl_trans_item_id,
												'opex_amount' => $amount_oct,
												'opex_budget_date' => $date,
												'gl_trans_det_added' => date_now(),
												'gl_trans_det_status' => 1
											);
											$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

											
											$date = $year . '-' . '11-01';
											$set_gl_det_trans = array(
												'gl_trans_item_id' => $gl_trans_item_id,
												'opex_amount' => $amount_nov,
												'opex_budget_date' => $date,
												'gl_trans_det_added' => date_now(),
												'gl_trans_det_status' => 1
											);
											$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

											
											$date = $year . '-' . '12-01';
											$set_gl_det_trans = array(
												'gl_trans_item_id' => $gl_trans_item_id,
												'opex_amount' => $amount_dec,
												'opex_budget_date' => $date,
												'gl_trans_det_added' => date_now(),
												'gl_trans_det_status' => 1
											);
											$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);
											$count++;
										}else{
											$this->db->trans_rollback();
											$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
											$this->session->set_flashdata('message', $msg);
											redirect($_SERVER['HTTP_REFERER']);
										}
									}
								}else{
									$this->db->trans_rollback();
									$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
									$this->session->set_flashdata('message', $msg);
									redirect($_SERVER['HTTP_REFERER']);
								} 
							}
						}else{
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect($_SERVER['HTTP_REFERER']);
						}

						if($this->db->trans_status() === FALSE){
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}else{
							$this->db->trans_commit();
							$msg = '<div class="alert alert-success">OPEX successfully added.</strong></div>';
						}

						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}else{
						$msg = '<div class="alert alert-danger">Error please try again!</div>';	
						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';	
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}
			}else{
				echo 'Error please try again!';
			}
		}
	}

	public function add_store_expense(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_group = clean_data(decode($this->input->post('gl_group')));
			$cost_center = clean_data(decode($this->input->post('bc_cost_center')));
			$cost_center_outlet = clean_data(decode($this->input->post('opex_outlet')));
			$year = clean_data($this->input->post('year'));
			$id = clean_data($this->input->post('id'));
			if(!empty($gl_group) && !empty($cost_center) && !empty($cost_center_outlet)){
				$check_gl = $this->admin->check_data('gl_group_tbl', array('gl_group_id' => $gl_group, 'gl_group_status' => 1), TRUE);
				if($check_gl['result'] == TRUE){
					$gl_name = $check_gl['info']->gl_group_name;
					$check_cc = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'cost_center_status' => 1), TRUE);
					if($check_cc['result'] == TRUE){
						$cost_center_id = $check_cc['info']->cost_center_id;
						$this->db->trans_start();
						$check_trans = $this->admin->check_data('gl_transaction_tbl', array('gl_group_id' => $gl_group, 'cost_center_id' => $cost_center_id, 'gl_year' => $year, 'gl_trans_status' => 1), TRUE);
						if($check_trans['result'] == TRUE){
							$gl_trans_id = $check_trans['info']->gl_trans_id;
						}else{
							$set = array(
								'gl_group_id' => $gl_group,
								'trans_type_id' => 1,
								'cost_center_id' => $cost_center_id,
								'user_id' => $user_id,
								'gl_year' => $year,
								'gl_trans_added' => date_now(),
								'gl_trans_status' => 1
							);
							
							$insert_opex_trans = $this->admin->insert_data('gl_transaction_tbl', $set, TRUE);
							if($insert_opex_trans['result'] == TRUE){
								$gl_trans_id = $insert_opex_trans['id'];
							}else{
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
								$this->session->set_flashdata('message', $msg);
								redirect($_SERVER['HTTP_REFERER']);
							}
						}

						
						$opex = clean_data($this->input->post('opex'));
						$count = 0;
						foreach($id as $row){
							$gl_sub_id = decode($row);
							$check_gl_sub_id = $this->admin->check_data('gl_subgroup_tbl', array('gl_sub_id' => $gl_sub_id, 'gl_sub_status' => 1), TRUE);
							
							if($check_gl_sub_id['result'] == TRUE){
								

								$amount_jan = check_num($opex['jan'][$count]);
								$amount_feb = check_num($opex['feb'][$count]);
								$amount_mar = check_num($opex['mar'][$count]);
								$amount_apr = check_num($opex['apr'][$count]);
								$amount_may = check_num($opex['may'][$count]);
								$amount_jun = check_num($opex['jun'][$count]);
								$amount_jul = check_num($opex['jul'][$count]);
								$amount_aug = check_num($opex['aug'][$count]);
								$amount_sep = check_num($opex['sep'][$count]);
								$amount_oct = check_num($opex['oct'][$count]);
								$amount_nov = check_num($opex['nov'][$count]);
								$amount_dec = check_num($opex['dec'][$count]);

								$total_amount = $amount_jan + $amount_feb + $amount_mar + $amount_apr + $amount_may + $amount_jun + $amount_jul + $amount_aug + $amount_sep + $amount_oct + $amount_nov + $amount_dec;

								if($total_amount > 0){
									$set_item = array(
										'gl_trans_id' => $gl_trans_id,
										'gl_sub_id' => $gl_sub_id,
										'cost_center_id' => $cost_center_outlet,
										'gl_transaction_type_id' => 1,
										'user_id' => $user_id,
										'gl_trans_item_added' => date_now(),
										'gl_trans_item_status' =>	1
									);
									$insert_item = $this->admin->insert_data('gl_transaction_item_tbl', $set_item, TRUE);

									if($insert_item['result'] == TRUE){
										$gl_trans_item_id = $insert_item['id'];

										$date = $year . '-' . '01-01';
										$set_gl_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_jan,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_trans);

										
										$date = $year . '-' . '02-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_feb,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '03-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_mar,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '04-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_apr,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);
										
										
										$date = $year . '-' . '05-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_may,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '06-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_jun,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										$date = $year . '-' . '07-01';
										$amount_jul = $opex['jul'][$count];
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_jul,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '08-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_aug,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '09-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_sep,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '10-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_oct,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '11-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_nov,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '12-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_dec,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);
									}else{
										$this->db->trans_rollback();
										$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
										$this->session->set_flashdata('message', $msg);
										redirect($_SERVER['HTTP_REFERER']);
									}
								}

								$count++;
							}else{
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
								$this->session->set_flashdata('message', $msg);
								redirect($_SERVER['HTTP_REFERER']);
							} 
						}

						if($this->db->trans_status() === FALSE){
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}else{
							$this->db->trans_commit();
							$msg = '<div class="alert alert-success">OPEX successfully added.</strong></div>';
						}

						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}else{
						$msg = '<div class="alert alert-danger">Error please try again!</div>';	
						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';	
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}
			}else{
				echo 'Error please try again!';
			}
		}
	}

	public function upload_store_expense(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$year = $this->_active_year();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$this->load->library('excel');
			ini_set('max_execution_time', 0); 
			ini_set('memory_limit','2048M');
			
			$temp_code = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 10);

			$config['upload_path']   = 'assets/store-expense-temp';
	        $config['allowed_types'] = 'xls|xlsx|xlsb';
	        $config['file_name'] = 'tmp_' . $temp_code;
	        $this->load->library('upload', $config);
			
	        if (! $this->upload->do_upload('budget_file')) {
	            $error = array('error' => $this->upload->display_errors());
	            $msg = $this->upload->display_errors();
	            $this->session->set_flashdata('message', $msg);
	            redirect('admin/');
	        }else{

					$data = array('upload_data' => $this->upload->data());
			        $file_name = $data['upload_data']['file_name'];

					$file = 'assets/store-expense-temp/' . $file_name;
					$data['file'] = $file_name;

		        	$this->db->trans_start();

					$objPHPExcel = PHPExcel_IOFactory::load($file);
					//get only the Cell Collection
					$cell_collection = $objPHPExcel->getActiveSheet()->getCellCollection();
					$data['excel_data'] = '';
					
					$bc = $objPHPExcel->getActiveSheet()->getCell('B1')->getValue();

					$direct_labor = clean_data($this->input->post('direct-labor'));
					$direct_labor = $direct_labor ? decode($direct_labor) : NULL;

					$designated_tbl = $this->_get_designated_tbl(NULL, NULL, $direct_labor);

					$check_bc_cost_center_code = $this->admin->check_data('bc_tbl', array('bc_name' => strtoupper($bc), 'bc_status' => 1), TRUE);
					$bc_cost_center_code = $check_bc_cost_center_code['result'] ? $check_bc_cost_center_code['info']->cost_center_code : NULL;
					$check_bc = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => strtoupper($bc_cost_center_code), 'cost_center_status' => 1), TRUE);
					if($check_bc['result'] == TRUE){
						$bc_cost_center_id = $check_bc['info']->cost_center_id;
						$cost_center_code = $check_bc['info']->cost_center_code;
						// $gl_group_id = clean_data(decode($this->input->post('gl_group_id')));
						$high_column = $objPHPExcel->getActiveSheet()->getHighestColumn();
						$high =PHPExcel_Cell::columnIndexFromString($high_column);

						
						$high_row = $objPHPExcel->getActiveSheet(0)->getHighestDataRow();
						for($a = 2; $a <= $high; $a = $a + 12){

							

							$column_outlet = PHPExcel_Cell::stringFromColumnIndex($a);
							$outlet_code = $objPHPExcel->getActiveSheet()->getCell($column_outlet . '6')->getValue();
							
							if(!empty($outlet_code)){
								$check_outlet = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => strtoupper($outlet_code), 'cost_center_status' => 1), TRUE);

								if($check_outlet['result'] == TRUE){
									
									for($b = 8; $b <= $high_row; $b++){
										$qty_column = $column_outlet;
										
										$gl_code_array = $objPHPExcel->getActiveSheet()->getCell('A' . $b)->getValue();
										$gl_code_val = explode('|', $gl_code_array);
										$gl_code = count($gl_code_val) == 2 ? trim($gl_code_val[1]) : NULL;
										$gl_group_id = count($gl_code_val) == 2 ? trim($gl_code_val[0]) : NULL;

										
										// CHECKING OF GL GROUP ID IF EXISTING
										if($gl_code && $gl_group_id){
											$get_gl_group_id = $this->admin->check_data('gl_subgroup_tbl', array('gl_code' => strtoupper($gl_code), 'gl_sub_status' => 1, 'gl_group_id' => $gl_group_id), TRUE);
											$gl_group_id = $get_gl_group_id['result'] ? $get_gl_group_id['info']->gl_group_id : NULL;
										} else {
											$this->db->trans_rollback();
											$msg = '<div class="alert alert-danger">Column A ('.$objPHPExcel->getActiveSheet()->getCell('A' . $b)->getValue().') must not be modified in line ' . $b . '!</div>';
											$this->session->set_flashdata('message', $msg);
											redirect('admin/opex-info/' . encode($cost_center_code));
										}
										

										if($gl_group_id){

											$join_trans = array(
												'gl_group_tbl b' => "a.gl_group_id = b.gl_group_id AND a.gl_trans_status = 1 AND a.gl_year = " . $year . " AND b.gl_group_id = ".$gl_group_id." AND a.cost_center_id = " . $bc_cost_center_id,
											);
					
											$check_gl_trans = $this->admin->check_join($designated_tbl->gl_transaction_tbl.' a', $join_trans, TRUE);
											if($check_gl_trans['result'] == TRUE){
												$gl_trans_id = $check_gl_trans['info']->gl_trans_id;
											}else{
												//Store Expenses ID
												
												$set_trans = array(
													'gl_group_id' => $gl_group_id,
													'cost_center_id' => $bc_cost_center_id,
													'trans_type_id' => 1,
													'user_id' => $user_id,
													'gl_year' => $year,
													'gl_trans_added' => date_now(),
													'gl_trans_status' => 1
												);
					
												$insert_trans = $this->admin->insert_data($designated_tbl->gl_transaction_tbl, $set_trans, TRUE);
												$gl_trans_id = $insert_trans['id'];
											}

											

											$check_code = $this->admin->check_data('gl_subgroup_tbl', array('gl_code' => $gl_code, 'gl_group_id' => $gl_group_id, 'gl_sub_status' => 1), TRUE);
											if($check_code['result'] == TRUE){

												// ADJUSTED VALIDATION
												$cost_center_id = $check_outlet['info']->cost_center_id;
												$join_gl = array(
													$designated_tbl->gl_transaction_tbl.' b' => 'a.gl_trans_id = b.gl_trans_id AND b.gl_trans_status = 1 AND a.gl_sub_id = '.$check_code['info']->gl_sub_id.' AND a.gl_trans_item_status = 1 AND b.gl_year = ' . $year . ' AND a.cost_center_id = ' . $cost_center_id
												);

												$check_gl = $this->admin->check_join($designated_tbl->gl_transaction_item_tbl.' a', $join_gl, TRUE, false, false, false, FALSE);
												
												if($check_gl['result'] == FALSE){
													$insert_new_det = TRUE;
												} else {
													$insert_new_det = FALSE;
													$gl_trans_item_id = $check_gl['info']->gl_trans_item_id;
													
													$where = array(
														'gl_trans_item_id' => $gl_trans_item_id
													);
													$set_details = array(
														'gl_trans_item_status' => 0
													);
													$update_gl_trans_item = $this->admin->update_data($designated_tbl->gl_transaction_item_tbl, $set_details, $where);
												}

												$checker_qty = $qty_column;
												$jan_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
												$checker_qty++;
												$feb_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
												$checker_qty++;
												$mar_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
												$checker_qty++;
												$apr_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
												$checker_qty++;
												$may_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
												$checker_qty++;
												$jun_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
												$checker_qty++;
												$jul_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
												$checker_qty++;
												$aug_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
												$checker_qty++;
												$sep_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
												$checker_qty++;
												$oct_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
												$checker_qty++;
												$nov_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
												$checker_qty++;
												$dec_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();

												$total_qty = $jan_qty + $feb_qty + $mar_qty + $apr_qty + $may_qty + $jun_qty + $jul_qty + $aug_qty + $sep_qty + $oct_qty + $nov_qty + $dec_qty;

												$cell_all_blank = FALSE;
												if($jan_qty == '' && $feb_qty == '' && $mar_qty == '' && $apr_qty == '' && $may_qty == '' && $jun_qty == '' && $jul_qty == '' && $aug_qty == '' && $sep_qty == '' && $oct_qty == '' && $nov_qty == '' && $dec_qty == ''){
													$cell_all_blank = TRUE;
												}

												if($total_qty >= 0 && !$cell_all_blank){

													$gl_sub_id = $check_code['info']->gl_sub_id;
													$set_item = array(
														'gl_trans_id' => $gl_trans_id,
														'gl_sub_id' => $gl_sub_id,
														'cost_center_id' => $cost_center_id,
														'gl_transaction_type_id' => 1,
														'user_id' => $user_id,
														'gl_trans_item_added' => date_now(),
														'gl_trans_item_status' => 1
													);

													$insert_item = $this->admin->insert_data($designated_tbl->gl_transaction_item_tbl, $set_item, TRUE);
													$gl_trans_item_id = $insert_item['id'];

													$date = $year . '-01-01';
													$set_details = array(
														'gl_trans_item_id' => $gl_trans_item_id,
														'opex_amount' => check_num($jan_qty),
														'opex_budget_date' => $date,
														'gl_trans_det_added' => date_now(),
														'gl_trans_det_status' => 1
													);

													$insert_details = $this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_details);


													$date = $year . '-02-01';
													$set_details = array(
														'gl_trans_item_id' => $gl_trans_item_id,
														'opex_amount' => check_num($feb_qty),
														'opex_budget_date' => $date,
														'gl_trans_det_added' => date_now(),
														'gl_trans_det_status' => 1
													);
												
													$insert_details = $this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_details);
													

													$date = $year . '-03-01';
													$set_details = array(
														'gl_trans_item_id' => $gl_trans_item_id,
														'opex_amount' => check_num($mar_qty),
														'opex_budget_date' => $date,
														'gl_trans_det_added' => date_now(),
														'gl_trans_det_status' => 1
													);
												
													$insert_details = $this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_details);


													$date = $year . '-04-01';
													$set_details = array(
														'gl_trans_item_id' => $gl_trans_item_id,
														'opex_amount' => check_num($apr_qty),
														'opex_budget_date' => $date,
														'gl_trans_det_added' => date_now(),
														'gl_trans_det_status' => 1
													);
												
													$insert_details = $this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_details);


													$date = $year . '-05-01';
													$set_details = array(
														'gl_trans_item_id' => $gl_trans_item_id,
														'opex_amount' => check_num($may_qty),
														'opex_budget_date' => $date,
														'gl_trans_det_added' => date_now(),
														'gl_trans_det_status' => 1
													);
												
													$insert_details = $this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_details);


													$date = $year . '-06-01';
													$set_details = array(
														'gl_trans_item_id' => $gl_trans_item_id,
														'opex_amount' => check_num($jun_qty),
														'opex_budget_date' => $date,
														'gl_trans_det_added' => date_now(),
														'gl_trans_det_status' => 1
													);
												
													$insert_details = $this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_details);


													$date = $year . '-07-01';
													$set_details = array(
														'gl_trans_item_id' => $gl_trans_item_id,
														'opex_amount' => check_num($jul_qty),
														'opex_budget_date' => $date,
														'gl_trans_det_added' => date_now(),
														'gl_trans_det_status' => 1
													);
												
													$insert_details = $this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_details);


													$date = $year . '-08-01';
													$set_details = array(
														'gl_trans_item_id' => $gl_trans_item_id,
														'opex_amount' => check_num($aug_qty),
														'opex_budget_date' => $date,
														'gl_trans_det_added' => date_now(),
														'gl_trans_det_status' => 1
													);
												
													$insert_details = $this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_details);


													$date = $year . '-09-01';
													$set_details = array(
														'gl_trans_item_id' => $gl_trans_item_id,
														'opex_amount' => check_num($sep_qty),
														'opex_budget_date' => $date,
														'gl_trans_det_added' => date_now(),
														'gl_trans_det_status' => 1
													);
												
													$insert_details = $this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_details);


													$date = $year . '-10-01';
													$set_details = array(
														'gl_trans_item_id' => $gl_trans_item_id,
														'opex_amount' => check_num($oct_qty),
														'opex_budget_date' => $date,
														'gl_trans_det_added' => date_now(),
														'gl_trans_det_status' => 1
													);
												
													$insert_details = $this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_details);


													$date = $year . '-11-01';
													$set_details = array(
														'gl_trans_item_id' => $gl_trans_item_id,
														'opex_amount' => check_num($nov_qty),
														'opex_budget_date' => $date,
														'gl_trans_det_added' => date_now(),
														'gl_trans_det_status' => 1
													);
												
													$insert_details = $this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_details);


													$date = $year . '-12-01';
													$set_details = array(
														'gl_trans_item_id' => $gl_trans_item_id,
														'opex_amount' => check_num($dec_qty),
														'opex_budget_date' => $date,
														'gl_trans_det_added' => date_now(),
														'gl_trans_det_status' => 1
													);
												
													$insert_details = $this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_details);
												}
												
												// } else {
												// 	$this->db->trans_rollback();
												// 	$msg = '<div class="alert alert-danger">Outlet (' . $outlet_code . ') with GL code ('.$gl_code.') already exist in column ' . $column_outlet . ' and line '.$b.' !</div>';
												// 	$this->session->set_flashdata('message', $msg);
												// 	redirect('admin/opex-info/' . encode($cost_center_code));
												// }

											} else{
												$this->db->trans_rollback();
												$msg = '<div class="alert alert-danger">GL code ('.$gl_code.') does not exist in line ' . $b . '!</div>';
												$this->session->set_flashdata('message', $msg);
												redirect('admin/opex-info/' . encode($cost_center_code));
											}

										} else {
											$this->db->trans_rollback();
											$msg = '<div class="alert alert-danger">GL group for gl code ('.$gl_code.') does not exist in line ' . $b . '!</div>';
											$this->session->set_flashdata('message', $msg);
											redirect('admin/opex-info/' . encode($cost_center_code));
										}

									}

									echo '<br />';
									
								}else{
									$this->db->trans_rollback();
									$msg = '<div class="alert alert-danger">Outlet ('.$outlet_code.') does not exist in column ' . $column_outlet . ' !</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/opex-info/' . encode($cost_center_code));
								}
							}else{
								$a = $high + 1;
							}
							
						}
					}else{
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Business Center not exist!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/opex-info/' . encode($cost_center_code));
					}

					if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/opex-info/' . encode($cost_center_code));
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success">Budget uploaded!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/opex-info/' . encode($cost_center_code));
					}
			}
		}else{
			redirect('admin');
		}
	}

	public function view_opex($id){
		$info = $this->_require_login();
		$data['title'] = 'View OPEX';
		$data['id'] = $id;
		$gl_trans_id = decode($id);
		$join_id = array(
			'gl_group_tbl b' => 'a.gl_group_id = b.gl_group_id AND a.gl_trans_status=1 AND a.gl_trans_id = ' . $gl_trans_id,
			'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id',
			// 'gl_transaction_item_tbl d' => 'a.gl_trans_id = d.gl_trans_id and gl_transaction_type_id = 2'
		);
		$check_id = $this->admin->check_join('gl_transaction_tbl a', $join_id, TRUE);
		$year = $this->_active_year();

		if($check_id['result'] == TRUE){
			$data['cost_center'] = encode($check_id['info']->cost_center_id);
			$data['cost_center_code'] = encode($check_id['info']->cost_center_code);
			$data['gl_group'] = $check_id['info']->gl_group_name;
			$data['year'] = $check_id['info']->gl_year;
			$join_det = array(
				'gl_transaction_item_tbl b' => 'a.gl_trans_item_id = b.gl_trans_item_id AND b.gl_trans_item_status = 1 AND a.gl_trans_det_status = 1 AND b.gl_transaction_type_id = 2 AND b.gl_trans_id=' . $gl_trans_id,
				'gl_transaction_tbl c' => 'b.gl_trans_id = c.gl_trans_id AND c.gl_year = ' . $year,
				'cost_center_tbl d' => 'b.cost_center_id = d.cost_center_id',
				'gl_subgroup_tbl e' => 'b.gl_sub_id=e.gl_sub_id'
				
			);
			
			$data['gl_details'] = $this->admin->get_join('gl_transaction_details_tbl a', $join_det, FALSE, FALSE, 'b.gl_trans_item_id', '*, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND YEAR(x.opex_budget_date)=' . $year . ') as total_qty, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=1 AND YEAR(x.opex_budget_date)=' . $year . ') as jan, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(opex_budget_date)=2 AND YEAR(x.opex_budget_date)=' . $year . ') as feb, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=3 AND YEAR(x.opex_budget_date)=' . $year . ') as mar, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=4 AND YEAR(x.opex_budget_date)=' . $year . ') as apr, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=5 AND YEAR(x.opex_budget_date)=' . $year . ') as may, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=6 AND YEAR(x.opex_budget_date)=' . $year . ') as jun, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=7 AND YEAR(x.opex_budget_date)=' . $year . ') as jul, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=8 AND YEAR(x.opex_budget_date)=' . $year . ') as aug, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=9 AND YEAR(x.opex_budget_date)=' . $year . ') as sep, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=10 AND YEAR(x.opex_budget_date)=' . $year . ') as oct, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=11 AND YEAR(x.opex_budget_date)=' . $year . ') as nov, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=12 AND YEAR(x.opex_budget_date)=' . $year . ') as december');
			$data['content'] = $this->load->view('admin/admin_opex_view', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}else{
			// $this->view_store_expense($id);
			redirect('admin/view_store_expense/'.$id);
		}
	}

	public function view_store_expense($id, $cost_center_code=NULL, $year=NULL, $direct_labor = NULL){
		$info = $this->_require_login();

		$data['direct_labor'] = $direct_labor ? $direct_labor : NULL;
		$direct_labor = $direct_labor ? decode($direct_labor) : NULL;
		$data['add_button'] = $direct_labor ? 'Direct Labor' : 'Opex Store';
		$designated_tbl = $this->_get_designated_tbl(NULL, NULL, $direct_labor);

		ini_set('max_execution_time', 0);
		ini_set('memory_limit','2048M');

		$data['title'] = 'View '.$data['add_button'];
		$data['id'] = $id;
		$data['cost_center_code'] = $cost_center_code;
		$gl_trans_id = decode($id);
		$join_id = array(
			'gl_group_tbl b' => "a.gl_group_id = b.gl_group_id AND a.gl_trans_status=1 AND a.gl_trans_id = " . $gl_trans_id,
			$designated_tbl->gl_transaction_item_tbl.' c' => 'a.gl_trans_id = c.gl_trans_id AND c.gl_trans_item_status = 1',
			'cost_center_tbl d' => 'c.cost_center_id = d.cost_center_id',
			'cost_center_tbl e' => 'a.cost_center_id = e.cost_center_id'
		);
		$check_id = $this->admin->check_join($designated_tbl->gl_transaction_tbl.' a', $join_id, TRUE, FALSE, FALSE, '*, e.cost_center_code as parent_code');

		if($check_id['result'] == TRUE){
			$year = $check_id['info']->gl_year;
			$data['cost_center'] = encode($check_id['info']->cost_center_id);
			$data['parent'] = encode($check_id['info']->parent_code);
			$data['cost_center_code'] = encode($check_id['info']->cost_center_code);
			$data['bc'] = $check_id['info']->cost_center_desc;
			$data['gl_group'] = $check_id['info']->gl_group_name;
			$data['gl_group_id'] = encode($check_id['info']->gl_group_id);
			$join_outlet = array(
				'cost_center_tbl b' => 'a.ifs_code = b.cost_center_code',
				$designated_tbl->gl_transaction_item_tbl.' c' => 'b.cost_center_id = c.cost_center_id AND c.gl_trans_item_status = 1 AND c.gl_transaction_type_id = 1',
				$designated_tbl->gl_transaction_tbl.' d' => 'c.gl_trans_id = d.gl_trans_id AND d.gl_trans_status = 1 AND d.gl_year = ' . $year . ' AND d.gl_trans_id = ' . $gl_trans_id,
			);

			$data['store_expense'] = $this->admin->get_join('outlet_tbl a', $join_outlet, FALSE, FALSE, 'a.outlet_id', '*, c.cost_center_id as cost_center', FALSE, FALSE);
			
			$data['year'] = $year;
			
			$data['content'] = $this->load->view('admin/admin_store_expense_content', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}else{
		}
	}

	public function cancel_store_expense(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			
			$cost_center_id = decode($this->input->post('id'));
			$gl_trans_id = decode($this->input->post('trans_id'));
			$gl_group_id = decode($this->input->post('gl-group-id'));
			$direct_labor = $this->input->post('direct-labor') ? decode($this->input->post('direct-labor')) : NULL;
			$designated_tbl = $this->_get_designated_tbl(NULL, NULL, $direct_labor);
			// echo $designated_tbl->gl_transaction_item_tbl;
			// exit;
			
			$where = array('cost_center_id' => $cost_center_id);
			$check_id = $this->admin->check_data('cost_center_tbl', $where, TRUE);
			if($check_id['result'] == TRUE){
				$set = array('gl_trans_item_status' => 0);
				$where_store_expense = 'gl_sub_id IN (SELECT b.gl_sub_id FROM gl_group_tbl a, gl_subgroup_tbl b WHERE a.gl_group_id = b.gl_group_id) AND gl_transaction_type_id = 1 AND cost_center_id = ' . $cost_center_id . ' AND gl_trans_id ='. $gl_trans_id;
				$remove_item = $this->admin->update_data($designated_tbl->gl_transaction_item_tbl, $set, $where_store_expense);

				if($remove_item == TRUE){
					$msg = '<div class="alert alert-success">Store Expense successfully cancelled.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('admin/view-store-expense/' . encode($gl_trans_id).'/NULL/NULL/'.$this->input->post('direct-labor'));
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/view-store-expense/' . encode($gl_trans_id).'/NULL/NULL/'.$this->input->post('direct-labor'));
			}
		}
	}

	public function view_store_expense_item($id, $year, $direct_labor = NULL){
		$info = $this->_require_login();

		$data['direct_labor'] = $direct_labor ? $direct_labor : NULL;
		$direct_labor = $direct_labor ? decode($direct_labor) : NULL;
		$data['add_button'] = $direct_labor ? 'Direct Labor' : 'Store Expense';
		$designated_tbl = $this->_get_designated_tbl(NULL, NULL, $direct_labor);

		

		$data['title'] = 'View '.$data['add_button'].' Item';
		$data['id'] = $id;
		$cost_center_id = decode($id);
		$join_id = array(
			'gl_group_tbl b' => "a.gl_group_id = b.gl_group_id AND a.gl_trans_status=1",
			$designated_tbl->gl_transaction_item_tbl.' c' => 'a.gl_trans_id = c.gl_trans_id AND a.gl_trans_status = 1 AND gl_trans_item_status = 1 AND c.gl_transaction_type_id = 1',
			'cost_center_tbl d' => 'c.cost_center_id = d.cost_center_id AND d.cost_center_id = ' . $cost_center_id . ' AND a.gl_year = ' . $year,
			'cost_center_tbl e' => 'a.cost_center_id = e.cost_center_id'
		);
		$check_id = $this->admin->check_join($designated_tbl->gl_transaction_tbl.' a', $join_id, TRUE, FALSE, FALSE, '*, e.cost_center_code as parent');

		if($check_id['result'] == TRUE){
			$data['cost_center'] = encode($check_id['info']->cost_center_id);
			$data['cost_center_code'] = encode($check_id['info']->cost_center_code);
			$data['parent'] = encode($check_id['info']->parent);
			$data['gl_group'] = $check_id['info']->gl_group_name;
			$data['gl_trans_id'] = encode($check_id['info']->gl_trans_id);
			$join_det = array(
				$designated_tbl->gl_transaction_item_tbl.' b' => 'a.gl_trans_item_id = b.gl_trans_item_id AND b.gl_trans_item_status = 1 AND a.gl_trans_det_status = 1 AND b.gl_transaction_type_id = 1',
				$designated_tbl->gl_transaction_tbl.' c' => 'b.gl_trans_id = c.gl_trans_id AND c.gl_trans_status = 1 AND c.gl_year = ' . $year,
				'cost_center_tbl d' => 'b.cost_center_id = d.cost_center_id AND d.cost_center_id = ' . $cost_center_id,
				'gl_subgroup_tbl e' => 'b.gl_sub_id=e.gl_sub_id',
				'gl_group_tbl f' => "e.gl_group_id = f.gl_group_id",
			);

			$data['year'] = $year;
			$data['gl_details'] = $this->admin->get_join($designated_tbl->gl_transaction_details_tbl.' a', $join_det, FALSE, FALSE, 'b.gl_trans_item_id', '*, (SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND YEAR(x.opex_budget_date)=' . $year . ') as total_qty, (SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=1 AND YEAR(x.opex_budget_date)=' . $year . ') as jan, (SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(opex_budget_date)=2 AND YEAR(x.opex_budget_date)=' . $year . ') as feb, (SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=3 AND YEAR(x.opex_budget_date)=' . $year . ') as mar, (SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=4 AND YEAR(x.opex_budget_date)=' . $year . ') as apr, (SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=5 AND YEAR(x.opex_budget_date)=' . $year . ') as may, (SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=6 AND YEAR(x.opex_budget_date)=' . $year . ') as jun, (SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=7 AND YEAR(x.opex_budget_date)=' . $year . ') as jul, (SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=8 AND YEAR(x.opex_budget_date)=' . $year . ') as aug, (SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=9 AND YEAR(x.opex_budget_date)=' . $year . ') as sep, (SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=10 AND YEAR(x.opex_budget_date)=' . $year . ') as oct, (SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=11 AND YEAR(x.opex_budget_date)=' . $year . ') as nov, (SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=12 AND YEAR(x.opex_budget_date)=' . $year . ') as december');
			$data['content'] = $this->load->view('admin/admin_store_expense_item', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}else{

		}
	}

	public function update_store_expense_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = $this->input->post('id');
			$opex = clean_data($this->input->post('opex'));
			$direct_labor = clean_data($this->input->post('direct-labor')) ? decode(clean_data($this->input->post('direct-labor'))) : NULL;
			$designated_tbl = $this->_get_designated_tbl(NULL, NULL, $direct_labor);
			
			$count = 0;
			$this->db->trans_start();
			foreach($id as $row_id){
				$item_id = decode($row_id);
				$check_item = $this->admin->check_data($designated_tbl->gl_transaction_item_tbl, array('gl_trans_item_id' => $item_id), TRUE);
				if($check_item['result'] == TRUE){
					$cost_center_db = $check_item['info']->cost_center_id;
					$amount = check_num($opex['jan'][$count]);
					$update_item = $this->admin->update_data($designated_tbl->gl_transaction_details_tbl, array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 1, 'gl_trans_det_status' => 1));
					
					$amount = check_num($opex['feb'][$count]);
					$update_item = $this->admin->update_data($designated_tbl->gl_transaction_details_tbl, array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 2, 'gl_trans_det_status' => 1));


					$amount = check_num($opex['mar'][$count]);
					$update_item = $this->admin->update_data($designated_tbl->gl_transaction_details_tbl, array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 3, 'gl_trans_det_status' => 1));


					$amount = check_num($opex['apr'][$count]);
					$update_item = $this->admin->update_data($designated_tbl->gl_transaction_details_tbl, array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 4, 'gl_trans_det_status' => 1));

					$amount = check_num($opex['may'][$count]);
					$update_item = $this->admin->update_data($designated_tbl->gl_transaction_details_tbl, array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 5, 'gl_trans_det_status' => 1));
					
					$amount = check_num($opex['jun'][$count]);
					$update_item = $this->admin->update_data($designated_tbl->gl_transaction_details_tbl, array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 6, 'gl_trans_det_status' => 1));

					$amount = check_num($opex['jul'][$count]);
					$update_item = $this->admin->update_data($designated_tbl->gl_transaction_details_tbl, array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 7, 'gl_trans_det_status' => 1));

					$amount = check_num($opex['aug'][$count]);
					$update_item = $this->admin->update_data($designated_tbl->gl_transaction_details_tbl, array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 8, 'gl_trans_det_status' => 1));

					$amount = check_num($opex['sep'][$count]);
					$update_item = $this->admin->update_data($designated_tbl->gl_transaction_details_tbl, array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 9, 'gl_trans_det_status' => 1));
					
					$amount = check_num($opex['oct'][$count]);
					$update_item = $this->admin->update_data($designated_tbl->gl_transaction_details_tbl, array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 10, 'gl_trans_det_status' => 1));

					$amount = check_num($opex['nov'][$count]);
					$update_item = $this->admin->update_data($designated_tbl->gl_transaction_details_tbl, array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 11, 'gl_trans_det_status' => 1));

					$amount = check_num($opex['dec'][$count]);
					$update_item = $this->admin->update_data($designated_tbl->gl_transaction_details_tbl, array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 12, 'gl_trans_det_status' => 1));
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}

				$count++;
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success">Transaction successfully updated.</strong></div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect($_SERVER['HTTP_REFERER']);
		}
	}

	public function remove_store_expense_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$direct_labor = clean_data($this->input->post('direct-labor')) ? decode(clean_data($this->input->post('direct-labor'))) : NULL;
			$designated_tbl = $this->_get_designated_tbl(NULL, NULL, $direct_labor);

			$where = array('gl_trans_item_id' => $id);
			$check_id = $this->admin->check_data($designated_tbl->gl_transaction_item_tbl, $where, TRUE);
			if($check_id['result'] == TRUE){
				$cost_center_id = $check_id['info']->cost_center_id;
				$set = array('gl_trans_item_status' => 0);
				$remove_item = $this->admin->update_data($designated_tbl->gl_transaction_item_tbl, $set, $where);

				if($remove_item == TRUE){
					$msg = '<div class="alert alert-success">Item successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}
		}
	}

	public function add_store_expense_item($id, $budget_year, $direct_labor=NULL){
		$info = $this->_require_login();

		$data['direct_labor'] = $direct_labor ? $direct_labor : NULL;
		$direct_labor = $direct_labor ? decode($direct_labor) : NULL;
		$data['trans_label'] = $direct_labor ? 'Direct Labor' : 'Store Expense';
		$designated_tbl = $this->_get_designated_tbl(NULL, NULL, $direct_labor);

		$data['title'] = 'Add '.$data['trans_label'].' Item';

		$data['id'] = $id;
		$cost_center_id = decode($id);
		$year = $budget_year;
		$data['year'] = $year;
		$join_id = array(
			$designated_tbl->gl_transaction_item_tbl.' b' => 'a.gl_trans_id = b.gl_trans_id AND a.gl_trans_status=1 AND b.gl_trans_item_status = 1 AND a.gl_year = ' . $year,
			'gl_group_tbl c' => 'a.gl_group_id = c.gl_group_id and b.gl_transaction_type_id = 1',
			'cost_center_tbl d' => 'b.cost_center_id = d.cost_center_id AND d.cost_center_id = ' . $cost_center_id,
			'cost_center_tbl e' => 'a.cost_center_id = e.cost_center_id'
		);
		$check_id = $this->admin->check_join($designated_tbl->gl_transaction_tbl.' a', $join_id, TRUE, FALSE, FALSE, '*, e.cost_center_code as parent');

		if($check_id['result'] == TRUE){
			/*$cost_center_id = $check_id['info']->cost_center_id;*/
			$cost_center_code = $check_id['info']->cost_center_code;
			$gl_name = $check_id['info']->gl_group_name;
			$gl_group_id = $check_id['info']->gl_group_id;

			$data['gl_group'] = $check_id['info']->gl_group_name;
			$data['cost_center'] = encode($cost_center_id);
			$data['cost_center_code'] = encode($cost_center_code);
			$data['parent'] = encode($check_id['info']->parent);
			$data['cost_center_desc'] = $check_id['info']->cost_center_desc;
			$data['gl_trans_id'] = encode($check_id['info']->gl_trans_id);

			$join_gl = array(
				'gl_group_tbl b' => 'a.gl_group_id = b.gl_group_id AND a.gl_sub_status = 1 AND a.gl_group_id='.$gl_group_id
			);

			$where = 'a.gl_sub_id NOT IN (SELECT y.gl_sub_id FROM '.$designated_tbl->gl_transaction_tbl.' x, '.$designated_tbl->gl_transaction_item_tbl.' y, cost_center_tbl z WHERE x.gl_trans_id = y.gl_trans_id AND y.cost_center_id = z.cost_center_id AND x.gl_trans_status = 1 AND y.gl_trans_item_status = 1 AND x.gl_year = ' . $year . ' AND z.cost_center_id = ' . $cost_center_id . ')';
			$data['gl'] = $this->admin->get_join('gl_subgroup_tbl a' , $join_gl, FALSE, FALSE, FALSE, FALSE, $where);
			$data['content'] = $this->load->view('admin/admin_add_store_expense_item', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}else{

		}
	}

	public function add_trans_store_expense(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$direct_labor = clean_data($this->input->post('direct-labor')) ? decode(clean_data($this->input->post('direct-labor'))) : NULL;
			$designated_tbl = $this->_get_designated_tbl(NULL, NULL, $direct_labor);

			$gl_trans_id = clean_data(decode($this->input->post('gl_trans_id')));
			$id = clean_data($this->input->post('id'));
			$cost_center_id = decode($this->input->post('cost_center'));
			if(!empty($gl_trans_id)){
				$join_trans = array(
					'gl_group_tbl b' => 'a.gl_group_id = b.gl_group_id AND a.gl_trans_status = 1 AND a.gl_trans_id =' . $gl_trans_id
				);
				$check_trans = $this->admin->check_join($designated_tbl->gl_transaction_tbl.' a', $join_trans, TRUE);
				if($check_trans['result'] == TRUE){
					$gl_name = $check_trans['info']->gl_group_name;
					$year = $check_trans['info']->gl_year;
					
					$this->db->trans_start();
					$id = clean_data($this->input->post('id'));
					$opex = clean_data($this->input->post('opex'));
					$count = 0;
					foreach($id as $row){
						$gl_sub_id = decode($row);
						$check_gl_sub_id = $this->admin->check_data('gl_subgroup_tbl', array('gl_sub_id' => $gl_sub_id, 'gl_sub_status' => 1), TRUE);
						
						if($check_gl_sub_id['result'] == TRUE){
							$amount_jan = check_num($opex['jan'][$count]);
							$amount_feb = check_num($opex['feb'][$count]);
							$amount_mar = check_num($opex['mar'][$count]);
							$amount_apr = check_num($opex['apr'][$count]);
							$amount_may = check_num($opex['may'][$count]);
							$amount_jun = check_num($opex['jun'][$count]);
							$amount_jul = check_num($opex['jul'][$count]);
							$amount_aug = check_num($opex['aug'][$count]);
							$amount_sep = check_num($opex['sep'][$count]);
							$amount_oct = check_num($opex['oct'][$count]);
							$amount_nov = check_num($opex['nov'][$count]);
							$amount_dec = check_num($opex['dec'][$count]);

							$total_amount = $amount_jan + $amount_feb + $amount_mar + $amount_apr + $amount_may + $amount_jun + $amount_jul + $amount_aug + $amount_sep + $amount_oct + $amount_nov + $amount_dec;

							if($total_amount > 0){
								$set_item = array(
									'gl_trans_id' => $gl_trans_id,
									'gl_sub_id' => $gl_sub_id,
									'cost_center_id' => $cost_center_id,
									'gl_transaction_type_id' => 1,
									'user_id' => $user_id,
									'gl_trans_item_added' => date_now(),
									'gl_trans_item_status' =>	1
								);
								$insert_item = $this->admin->insert_data($designated_tbl->gl_transaction_item_tbl, $set_item, TRUE);

								if($insert_item['result'] == TRUE){
									$gl_trans_item_id = $insert_item['id'];
									$date = $year . '-' . '01-01';
									$set_gl_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_jan,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_gl_trans);

									
									$date = $year . '-' . '02-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_feb,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_gl_det_trans);

									$date = $year . '-' . '03-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_mar,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_gl_det_trans);

									
									$date = $year . '-' . '04-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_apr,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_gl_det_trans);
									
									
									$date = $year . '-' . '05-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_may,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_gl_det_trans);

									
									$date = $year . '-' . '06-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_jun,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_gl_det_trans);

									$date = $year . '-' . '07-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_jul,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_gl_det_trans);

									
									$date = $year . '-' . '08-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_aug,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_gl_det_trans);

									
									$date = $year . '-' . '09-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_sep,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_gl_det_trans);

									
									$date = $year . '-' . '10-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_oct,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_gl_det_trans);

									
									$date = $year . '-' . '11-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_nov,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_gl_det_trans);

									
									$date = $year . '-' . '12-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_dec,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data($designated_tbl->gl_transaction_details_tbl, $set_gl_det_trans);
								}else{
									$this->db->trans_rollback();
									$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/view-store-expense-item/' . encode($cost_center) . '/' . $year .'/'. $this->input->post('direct-labor'));
								}
							}

							$count++;
						}else{
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect('admin/view-store-expense-item/' . encode($cost_center) . '/' . $year .'/'. $this->input->post('direct-labor'));
						} 
					}
					

					if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success">OPEX successfully added.</strong></div>';
					}

					$this->session->set_flashdata('message', $msg);
					redirect('admin/view-store-expense-item/' . encode($cost_center_id). '/' . $year .'/'. $this->input->post('direct-labor'));
					
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';	
					$this->session->set_flashdata('message', $msg);
					redirect('admin/view-store-expense-item/' . encode($cost_center_id). '/' . $year .'/'. $this->input->post('direct-labor'));
				}
			}else{
				echo 'Error please try again!';
			}
		}
	}

	public function sw_view($id){
		$info = $this->_require_login();
		$data['title'] = 'View (Salaries & Wages)';
		$data['id'] = $id;
		$trans_id = decode($id);
		$join_id = array(
			'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.emp_salary_trans_status = 1 AND a.emp_salary_trans_id = ' . $trans_id
		);
		$check_id = $this->admin->check_join('employee_salary_trans_tbl a', $join_id, TRUE);

		if($check_id['result'] == TRUE){
			$data['cost_center'] = encode($check_id['info']->cost_center_id);
			$data['cost_center_code'] = encode($check_id['info']->cost_center_code);
			$data['cost_desc'] = encode($check_id['info']->cost_center_desc);
			$data['gl_group'] = 'SALARIES & WAGES';
			$join_det = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND c.emp_salary_trans_id = ' . $trans_id,
				'cost_center_tbl d' => 'b.cost_center_id = d.cost_center_id',
				'employee_tbl e' => 'b.emp_id = e.emp_id'
			);

			$year = $check_id['info']->emp_salary_trans_year;
			$data['year'] = $year;
			$data['sw_details'] = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_det, FALSE, FALSE, 'b.emp_salary_item_id', '*, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND YEAR(x.emp_salary_date)=' . $year . ') as total_qty, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=1 AND YEAR(x.emp_salary_date)=' . $year . ') as jan, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(emp_salary_date)=2 AND YEAR(x.emp_salary_date)=' . $year . ') as feb, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=3 AND YEAR(x.emp_salary_date)=' . $year . ') as mar, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=4 AND YEAR(x.emp_salary_date)=' . $year . ') as apr, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=5 AND YEAR(x.emp_salary_date)=' . $year . ') as may, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=6 AND YEAR(x.emp_salary_date)=' . $year . ') as jun, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=7 AND YEAR(x.emp_salary_date)=' . $year . ') as jul, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=8 AND YEAR(x.emp_salary_date)=' . $year . ') as aug, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=9 AND YEAR(x.emp_salary_date)=' . $year . ') as sep, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=10 AND YEAR(x.emp_salary_date)=' . $year . ') as oct, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=11 AND YEAR(x.emp_salary_date)=' . $year . ') as nov, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=12 AND YEAR(x.emp_salary_date)=' . $year . ') as december');
			$data['content'] = $this->load->view('admin/admin_sw_content', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}else{

		}
	}

	public function remove_sw_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('emp_salary_item_id' => $id);
			$check_id = $this->admin->check_data('employee_salary_item_tbl', $where, TRUE);
			if($check_id['result'] == TRUE){
				$emp_salary_trans_id = $check_id['info']->emp_salary_trans_id;
				$set = array('emp_salary_item_status' => 0);
				$remove_item = $this->admin->update_data('employee_salary_item_tbl', $set, $where);

				if($remove_item == TRUE){
					$msg = '<div class="alert alert-success">Item successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('admin/sw-view/' . encode($emp_salary_trans_id));
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/opex/');
			}
		}
	}

	public function remove_opex_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('gl_trans_item_id' => $id);
			$check_id = $this->admin->check_data('gl_transaction_item_tbl', $where, TRUE);
			if($check_id['result'] == TRUE){
				$gl_trans_id = $check_id['info']->gl_trans_id;
				$set = array('gl_trans_item_status' => 0);
				$remove_item = $this->admin->update_data('gl_transaction_item_tbl', $set, $where);

				if($remove_item == TRUE){
					$msg = '<div class="alert alert-success">Item successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('admin/view-opex/' . encode($gl_trans_id));
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/capex/');
			}
		}
	}

	public function get_sw_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_name = 'SALARIES & WAGES';
			$emp_salary_item_id =clean_data(decode($this->input->post('id')));
			$join_sw = array(
				'employee_salary_trans_tbl b' => 'a.emp_salary_trans_id = b.emp_salary_trans_id AND b.emp_salary_trans_status = 1 AND a.emp_salary_item_status = 1 AND a.emp_salary_item_id = ' . $emp_salary_item_id,
				'employee_tbl c' => 'a.emp_id = c.emp_id'
			);
			$check_sw = $this->admin->check_join('employee_salary_item_tbl a', $join_sw, TRUE);
			if($check_sw['result'] == TRUE){
				$emp_name = $check_sw['info']->emp_lname . ', ' . $check_sw['info']->emp_fname;
				$join_get_item = array(
					'employee_salary_item_tbl b' => 'b.emp_salary_item_id = a.emp_salary_item_id AND b.emp_salary_item_status = 1 AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_id = ' . $emp_salary_item_id,
				);
				$get_item = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_get_item, FALSE, 'a.emp_salary_date ASC', FALSE, 'a.emp_salary_budget, MONTHNAME(a.emp_salary_date) as sw_budget_date');

				$month = array(
					'January' => 0,
					'February' => 0,
					'March' => 0,
					'April' => 0,
					'May' => 0, 
					'June' => 0,
					'July' => 0,
					'August' => 0,
					'September' => 0,
					'October' => 0,
					'November' => 0,
					'December' => 0
				);

				$total_qty = 0;
				foreach($get_item as $row_item){
					$month[$row_item->sw_budget_date] += $row_item->emp_salary_budget;
					$total_qty += $row_item->emp_salary_budget;
				}

				$details = array(
					'name' => $emp_name,
					'gl_group' => $gl_name,
					'total' => $total_qty,
					'month' => $month
				);

				$data['result'] = 1;
				$data['info'] = $details;
			}else{
				echo $this->db->last_query();
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_sw_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = $this->input->post('id');
			$opex = clean_data($this->input->post('opex'));
			$count = 0;
			$this->db->trans_start();
			foreach($id as $row_id){
				$item_id = decode($row_id);
				$check_item = $this->admin->check_data('employee_salary_item_tbl', array('emp_salary_item_id' => $item_id, 'emp_salary_item_status' => 1), TRUE);

				if($check_item['result'] == TRUE){
					$emp_salary_trans_id = $check_item['info']->emp_salary_trans_id;

					$amount = $opex['jan'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 1, 'emp_salary_trans_dtl_status' => 1));
					
					$amount = $opex['feb'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 2, 'emp_salary_trans_dtl_status' => 1));


					$amount = $opex['mar'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 3, 'emp_salary_trans_dtl_status' => 1));


					$amount = $opex['apr'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 4, 'emp_salary_trans_dtl_status' => 1));

					$amount = $opex['may'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 5, 'emp_salary_trans_dtl_status' => 1));
					
					$amount = $opex['jun'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id,'MONTH(emp_salary_date)' => 6, 'emp_salary_trans_dtl_status' => 1));

					$amount = $opex['jul'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 7, 'emp_salary_trans_dtl_status' => 1));

					$amount = $opex['aug'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 8, 'emp_salary_trans_dtl_status' => 1));

					$amount = $opex['sep'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 9, 'emp_salary_trans_dtl_status' => 1));
					
					$amount = $opex['oct'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 10, 'emp_salary_trans_dtl_status' => 1));

					$amount = $opex['nov'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 11, 'emp_salary_trans_dtl_status' => 1));

					$amount = $opex['dec'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 12, 'emp_salary_trans_dtl_status' => 1));
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/sw-view/' . encode($emp_salary_trans_id));
				}

				$count++;
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success">CAPEX successfully updated.</strong></div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/sw-view/' . encode($emp_salary_trans_id));
		}
	}

	public function add_sw_item($id){
		$info = $this->_require_login();
		$data['title'] = 'Add Salaries & Wages';

		$data['id'] = $id;
		$emp_salary_trans_id = decode($id);
		$join_id = array(
			'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.emp_salary_trans_id = ' . $emp_salary_trans_id
		);

		$check_id = $this->admin->check_join('employee_salary_trans_tbl a', $join_id, TRUE);
		if($check_id['result'] == TRUE){
			$cost_center_id = $check_id['info']->cost_center_id;
			$cost_center_code = $check_id['info']->cost_center_code;
			$year = $check_id['info']->emp_salary_trans_year;
			$gl_name = 'SALARIES & WAGES';

			$data['cost_center'] = encode($cost_center_id);
			$data['cost_center_code'] = encode($cost_center_code);
			$data['gl_group'] = $gl_name;
			
			$data['gl'] = $this->_salary_data($cost_center_id, TRUE, $year);
			$data['content'] = $this->load->view('admin/admin_sw_add_item', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}else{

		}
	}

	public function add_trans_sw_item(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = clean_data($this->input->post('id'));
			$emp_salary_trans_id = clean_data(decode($this->input->post('emp_salary_trans_id')));
			if(!empty($emp_salary_trans_id) && !empty($id)){
				$check_id = $this->admin->check_data('employee_salary_trans_tbl', array('emp_salary_trans_id' => $emp_salary_trans_id), TRUE);
				if($check_id['result'] == TRUE){
					$year = $check_id['info']->emp_salary_trans_year;

					$gl_name = 'SALARIES & WAGES';
					$this->db->trans_start();
					$salary = clean_data($this->input->post('salary'));
					$count = 0;
					foreach($id as $emp){
						$emp_id = decode($emp);

						$check_emp = $this->admin->check_data('employee_year_tbl', array('emp_id' => $emp_id, 'emp_year_status' => 1, 'emp_year' => $year), TRUE);

						if($check_emp['result'] == TRUE){
							$emp_cost_center = $check_emp['info']->cost_center_id;
							$rank_id = $check_emp['info']->rank_id;

							$set_item = array(
								'emp_salary_trans_id' => $emp_salary_trans_id,
								'emp_id' => $emp_id,
								'cost_center_id' => $emp_cost_center,
								'rank_id' => $rank_id,
								'emp_salary_item_added' => date_now(),
								'emp_salary_item_status' => 1
							);

							$insert_item = $this->admin->insert_data('employee_salary_item_tbl', $set_item, TRUE);
							$emp_salary_item_id = $insert_item['id'];


							$date = $year . '-01-01';
							$amount_jan = $salary['jan'][$count];
							$set_emp_jan = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_jan,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jan);

							$date = $year . '-02-01';
							$amount_feb = $salary['feb'][$count];
							$set_emp_feb = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_feb,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_feb);

							$date = $year . '-03-01';
							$amount_mar = $salary['mar'][$count];
							$set_emp_mar = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_mar,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_mar);

							$date = $year . '-04-01';
							$amount_apr = $salary['apr'][$count];
							$set_emp_apr = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_apr,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_apr);

							$date = $year . '-05-01';
							$amount_may = $salary['may'][$count];
							$set_emp_may = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_may,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_may);

							$date = $year . '-06-01';
							$amount_jun = $salary['jun'][$count];
							$set_emp_jun = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_jun,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jun);

							$date = $year . '-07-01';
							$amount_jul = $salary['jul'][$count];
							$set_emp_jul = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_jul,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jul);

							$date = $year . '-08-01';
							$amount_aug = $salary['aug'][$count];
							$set_emp_aug = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_aug,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_aug);

							$date = $year . '-09-01';
							$amount_sep = $salary['sep'][$count];
							$set_emp_sep = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_sep,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_sep);

							$date = $year . '-10-01';
							$amount_oct = $salary['oct'][$count];
							$set_emp_oct = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_oct,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_oct);

							$date = $year . '-11-01';
							$amount_nov = $salary['nov'][$count];
							$set_emp_nov = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_nov,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_nov);

							$date = $year . '-12-01';
							$amount_dec = $salary['dec'][$count];
							$set_emp_dec = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_dec,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_dec);
						}else{
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect('admin/sw-view/' . encode($emp_salary_trans_id));
						}

						$count++;
					}

					if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success">OPEX successfully added.</strong></div>';
					}
					
					$this->session->set_flashdata('message', $msg);
					redirect('admin/sw-view/' . encode($emp_salary_trans_id));
				}else{

				}
			}else{
				echo 'Error please try again!';
			}
		}
	}

	public function add_opex_item($id){
		$info = $this->_require_login();
		$data['title'] = 'Add OPEX Item';

		$data['id'] = $id;
		$gl_trans_id = decode($id);
		$join_id = array(
			'gl_group_tbl b' => 'a.gl_group_id = b.gl_group_id AND a.gl_trans_status=1 AND a.gl_trans_id = ' . $gl_trans_id,
			'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id'
		);
		$check_id = $this->admin->check_join('gl_transaction_tbl a', $join_id, TRUE);

		if($check_id['result'] == TRUE){

			$data['year'] = $check_id['info']->gl_year;

			$cost_center_id = $check_id['info']->cost_center_id;
			$cost_center_code = $check_id['info']->cost_center_code;
			$gl_name = $check_id['info']->gl_group_name;
			$gl_group_id = $check_id['info']->gl_group_id;

			$data['gl_group'] = $check_id['info']->gl_group_name;
			$data['cost_center'] = encode($cost_center_id);
			$data['cost_center_code'] = encode($cost_center_code);
			$data['gl_group'] = $gl_name;
			
			$data['gl'] = $this->_gl_data($cost_center_id, $gl_group_id, $gl_name);	
			$data['content'] = $this->load->view('admin/admin_opex_add_item', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}else{

		}
	}

	public function add_trans_opex_item(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_trans_id = clean_data(decode($this->input->post('gl_trans_id')));
			$id = clean_data($this->input->post('id'));
			if(!empty($gl_trans_id)){
				$join_trans = array(
					'gl_group_tbl b' => 'a.gl_group_id = b.gl_group_id AND a.gl_trans_status = 1 AND a.gl_trans_id =' . $gl_trans_id
				);
				$check_trans = $this->admin->check_join('gl_transaction_tbl a', $join_trans, TRUE);
				if($check_trans['result'] == TRUE){
					$gl_name = $check_trans['info']->gl_group_name;
					$year = $check_trans['info']->gl_year;
					
					$this->db->trans_start();
					/*if($gl_name == 'SALARIES & WAGES'){
						$salary = clean_data($this->input->post('salary'));

						$set_salary = array(
							'cost_center_id' => $cost_center_id,
							'user_id' => $user_id,
							'trans_type_id' => 1,
							'emp_salary_trans_year' => $year,
							'emp_salary_trans_added' => date_now(),
							'emp_salary_trans_status' => 1
						);
						
						$insert_emp = $this->admin->insert_data('employee_salary_trans_tbl', $set_salary, TRUE);
						if($insert_emp['result'] == TRUE){
							$emp_salary_trans_id = $insert_emp['id'];
							$count = 0;
							foreach($id as $emp){
								$emp_id = decode($emp);
								
								$check_emp = $this->admin->check_data('employee_year_tbl', array('emp_id' => $emp_id, 'emp_year_status' => 1, 'emp_year' => $year), TRUE);

								if($check_emp['result'] == TRUE){

									$emp_cost_center = $check_emp['info']->cost_center_id;
									$rank_id = $check_emp['info']->rank_id;

									$set_item = array(
										'emp_salary_trans_id' => $emp_salary_trans_id,
										'emp_id' => $emp_id,
										'cost_center_id' => $emp_cost_center,
										'rank_id' => $rank_id,
										'emp_salary_item_added' => date_now(),
										'emp_salary_item_status' => 1
									);

									$insert_item = $this->admin->insert_data('employee_salary_item_tbl', $set_item, TRUE);
									$emp_salary_item_id = $insert_item['id'];


									$date = $year . '-01-01';
									$amount_jan = $salary['jan'][$count];
									$set_emp_jan = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_jan,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jan);

									$date = $year . '-02-01';
									$amount_feb = $salary['feb'][$count];
									$set_emp_feb = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_feb,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_feb);

									$date = $year . '-03-01';
									$amount_mar = $salary['mar'][$count];
									$set_emp_mar = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_mar,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_mar);

									$date = $year . '-04-01';
									$amount_apr = $salary['apr'][$count];
									$set_emp_apr = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_apr,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_apr);

									$date = $year . '-05-01';
									$amount_may = $salary['may'][$count];
									$set_emp_may = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_may,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_may);

									$date = $year . '-06-01';
									$amount_jun = $salary['jun'][$count];
									$set_emp_jun = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_jun,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jun);

									$date = $year . '-07-01';
									$amount_jul = $salary['jul'][$count];
									$set_emp_jul = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_jul,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jul);

									$date = $year . '-08-01';
									$amount_aug = $salary['aug'][$count];
									$set_emp_aug = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_aug,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_aug);

									$date = $year . '-09-01';
									$amount_sep = $salary['sep'][$count];
									$set_emp_sep = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_sep,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_sep);

									$date = $year . '-10-01';
									$amount_oct = $salary['oct'][$count];
									$set_emp_oct = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_oct,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_oct);

									$date = $year . '-11-01';
									$amount_nov = $salary['nov'][$count];
									$set_emp_nov = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_nov,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_nov);

									$date = $year . '-12-01';
									$amount_dec = $salary['dec'][$count];
									$set_emp_dec = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_dec,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_dec);
								}else{
									$this->db->trans_rollback();
									$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/transac-opex/' . encode($cost_center));
								}

								$count++;
							}
						}else{
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect('admin/transac-opex/' . encode($cost_center));
						}

						if($this->db->trans_status() === FALSE){
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}else{
							$this->db->trans_commit();
							$msg = '<div class="alert alert-success">OPEX successfully added.</strong></div>';
						}
					}else{*/


					$gl_cost_center = clean_data($this->input->post('cost_center'));
					$id = clean_data($this->input->post('id'));
					$opex = clean_data($this->input->post('opex'));
					$count = 0;
					foreach($id as $row){
						$gl_sub_id = decode($row);
						$check_gl_sub_id = $this->admin->check_data('gl_subgroup_tbl', array('gl_sub_id' => $gl_sub_id, 'gl_sub_status' => 1), TRUE);
						
						if($check_gl_sub_id['result'] == TRUE){
							$gl_cost_center_id = decode($gl_cost_center[$count]);

							$amount_jan = $opex['jan'][$count];
							$amount_feb = $opex['feb'][$count];
							$amount_mar = $opex['mar'][$count];
							$amount_apr = $opex['apr'][$count];
							$amount_may = $opex['may'][$count];
							$amount_jun = $opex['jun'][$count];
							$amount_jul = $opex['jul'][$count];
							$amount_aug = $opex['aug'][$count];
							$amount_sep = $opex['sep'][$count];
							$amount_oct = $opex['oct'][$count];
							$amount_nov = $opex['nov'][$count];
							$amount_dec = $opex['dec'][$count];

							$total_amount = $amount_jan + $amount_feb + $amount_mar + $amount_apr + $amount_may + $amount_jun + $amount_jul + $amount_aug + $amount_sep + $amount_oct + $amount_nov + $amount_dec;

							if($total_amount > 0){

								$set_item = array(
									'gl_trans_id' => $gl_trans_id,
									'gl_sub_id' => $gl_sub_id,
									'cost_center_id' => $gl_cost_center_id,
									'gl_transaction_type_id' => 2,
									'user_id' => $user_id,
									'gl_trans_item_added' => date_now(),
									'gl_trans_item_status' =>	1
								);
								$insert_item = $this->admin->insert_data('gl_transaction_item_tbl', $set_item, TRUE);

								if($insert_item['result'] == TRUE){
									$gl_trans_item_id = $insert_item['id'];
									$date = $year . '-' . '01-01';
									$set_gl_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_jan,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_trans);

									
									$date = $year . '-' . '02-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_feb,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									$date = $year . '-' . '03-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_mar,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									
									$date = $year . '-' . '04-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_apr,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);
									
									
									$date = $year . '-' . '05-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_may,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									
									$date = $year . '-' . '06-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_jun,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									$date = $year . '-' . '07-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_jul,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									
									$date = $year . '-' . '08-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_aug,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									
									$date = $year . '-' . '09-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_sep,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									
									$date = $year . '-' . '10-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_oct,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									
									$date = $year . '-' . '11-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_nov,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									
									$date = $year . '-' . '12-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_dec,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);
									$count++;
								}else{
									$this->db->trans_rollback();
									$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/transac-opex/' . encode($cost_center));	
								}
							}
						}else{
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect('admin/transac-opex/' . encode($cost_center));
						} 
					}
					

					if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success">OPEX successfully added.</strong></div>';
					}

					$this->session->set_flashdata('message', $msg);
					redirect('admin/view-opex/' . encode($gl_trans_id) . '/' . $year);
					
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';	
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}
			}else{
				echo 'Error please try again!';
			}
		}
	}

	public function get_opex_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_item_id =clean_data(decode($this->input->post('id')));
			$cost_center =clean_data(decode($this->input->post('cost_center')));
			$direct_labor = $this->input->post('direct_labor') ? clean_data(decode($this->input->post('direct_labor'))) : NULL;
			
			
			$designated_tbl = $this->_get_designated_tbl(NULL, NULL, $direct_labor);
			
			$join_gl = array(
				$designated_tbl->gl_transaction_item_tbl.' b' => 'a.gl_sub_id = b.gl_sub_id AND b.gl_trans_item_status = 1 AND b.gl_trans_item_id = ' . $gl_item_id,
				'gl_group_tbl c' => 'a.gl_group_id = c.gl_group_id AND a.gl_sub_status = 1',
			);
			$check_gl = $this->admin->check_join('gl_subgroup_tbl a', $join_gl, TRUE);
			if($check_gl['result'] == TRUE){
				$gl_name = $check_gl['info']->gl_group_name;
				$gl_transaction_type_id = $check_gl['info']->gl_transaction_type_id;
				$selected_cost_center = $check_gl['info']->cost_center_id;
				$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center, 'cost_center_status' => 1), TRUE);
				
				if($check_cost_center['result'] == TRUE){
					$cost_center_id = $check_cost_center['info']->cost_center_id;

					if($gl_transaction_type_id == 1){
						$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center, 'cost_center_type_id' => 8 , 'cost_center_status' => 1));
					}else{
						$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center, 'cost_center_type_id !=' => 8, 'cost_center_status' => 1));
					}

					$cost_center_data = '';
					foreach($get_cost_center as $row){
						$selected = '';
						if($selected_cost_center == $row->cost_center_id){
							$selected = ' selected';
						}
						$cost_center_data .= '<option value="' . encode($row->cost_center_id) . '"' . $selected . '>' . $row->cost_center_desc . '</option>';
					}
					
					$join_get_item = array(
						$designated_tbl->gl_transaction_item_tbl.' b' => 'a.gl_trans_item_id = b.gl_trans_item_id AND b.gl_trans_item_status = 1 AND a.gl_trans_det_status = 1 AND b.gl_trans_item_id = ' . $gl_item_id,
					);
					$get_item = $this->admin->get_join($designated_tbl->gl_transaction_details_tbl.' a', $join_get_item, FALSE, 'a.opex_budget_date ASC', FALSE, 'a.opex_amount, MONTHNAME(a.opex_budget_date) as opex_budget_date');

					$month = array(
						'January' => 0,
						'February' => 0,
						'March' => 0,
						'April' => 0,
						'May' => 0, 
						'June' => 0,
						'July' => 0,
						'August' => 0,
						'September' => 0,
						'October' => 0,
						'November' => 0,
						'December' => 0
					);

					$total_qty = 0;
					foreach($get_item as $row_item){
						$month[$row_item->opex_budget_date] += $row_item->opex_amount;
						$total_qty += $row_item->opex_amount;
					}


					$details = array(
						'gl_group' => $gl_name,
						'total' => $total_qty,
						'cost_center' => $cost_center_data,
						'month' => $month
					);

					$data['result'] = 1;
					$data['info'] = $details;					
				}else{
					$data[''] = 0;
				}
				
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_opex_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = $this->input->post('id');
			$cost_center_id = decode(clean_data($this->input->post('cost_center')));
			$opex = clean_data($this->input->post('opex'));
			$count = 0;
			$this->db->trans_start();
			foreach($id as $row_id){
				$item_id = decode($row_id);
				$check_item = $this->admin->check_data('gl_transaction_item_tbl', array('gl_trans_item_id' => $item_id), TRUE);

				if($check_item['result'] == TRUE){
					$cost_center_db = $check_item['info']->cost_center_id;
					$gl_trans_id = $check_item['info']->gl_trans_id;
					if($cost_center_db != $cost_center_id){
						$update_cost_center = $this->admin->update_data('gl_transaction_item_tbl', array('cost_center_id' => $cost_center_id), array('gl_trans_item_id' => $item_id));
					}

					$amount = check_num($opex['jan'][$count]);
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 1, 'gl_trans_det_status' => 1));
					
					$amount = check_num($opex['feb'][$count]);
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 2, 'gl_trans_det_status' => 1));


					$amount = check_num($opex['mar'][$count]);
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 3, 'gl_trans_det_status' => 1));


					$amount = check_num($opex['apr'][$count]);
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 4, 'gl_trans_det_status' => 1));

					$amount = check_num($opex['may'][$count]);
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 5, 'gl_trans_det_status' => 1));
					
					$amount = check_num($opex['jun'][$count]);
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 6, 'gl_trans_det_status' => 1));

					$amount = check_num($opex['jul'][$count]);
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 7, 'gl_trans_det_status' => 1));

					$amount = $opex['aug'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 8, 'gl_trans_det_status' => 1));

					$amount = check_num($opex['sep'][$count]);
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 9, 'gl_trans_det_status' => 1));
					
					$amount = check_num($opex['oct'][$count]);
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 10, 'gl_trans_det_status' => 1));

					$amount = check_num($opex['nov'][$count]);
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 11, 'gl_trans_det_status' => 1));

					$amount = check_num($opex['dec'][$count]);
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 12, 'gl_trans_det_status' => 1));
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/view-opex/' . encode($gl_trans_id));
				}

				$count++;
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success">CAPEX successfully updated.</strong></div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect($_SERVER['HTTP_REFERER']);
		}
	}

	public function download_opex($cost_center_id, $year){
		$info = $this->_require_login();
		$cost_center_id = decode($cost_center_id);
		$bc_id = $this->_get_cost_center_bc($cost_center_id);

		ini_set('max_execution_time', 0);
		ini_set('memory_limit','2048M');

		
		$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center_id, 'cost_center_status' => 1), TRUE);
		if($check_cost_center['result'] == TRUE){
			$cost_center_name = $check_cost_center['info']->cost_center_desc;

			$join_det = array(
				'gl_transaction_item_tbl b' => 'a.gl_trans_item_id = b.gl_trans_item_id AND b.gl_trans_item_status = 1 AND a.gl_trans_det_status = 1',
				'gl_transaction_tbl c' => 'b.gl_trans_id = c.gl_trans_id AND c.gl_trans_status = 1 AND c.gl_year = ' . $year,
				'cost_center_tbl d' => 'b.cost_center_id = d.cost_center_id AND d.parent_id = ' . $cost_center_id,
				'gl_subgroup_tbl e' => 'b.gl_sub_id=e.gl_sub_id',
				'gl_group_tbl f' => 'e.gl_group_id = f.gl_group_id',
				'cost_center_group_tbl g' => 'd.cost_center_group_id = g.cost_center_group_id'
				
			);
				
			$gl_details = $this->admin->get_join('gl_transaction_details_tbl a', $join_det, FALSE, FALSE, 'b.gl_trans_item_id', '*, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND YEAR(x.opex_budget_date)=' . $year . ') as total_qty, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=1 AND YEAR(x.opex_budget_date)=' . $year . ') as jan, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(opex_budget_date)=2 AND YEAR(x.opex_budget_date)=' . $year . ') as feb, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=3 AND YEAR(x.opex_budget_date)=' . $year . ') as mar, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=4 AND YEAR(x.opex_budget_date)=' . $year . ') as apr, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=5 AND YEAR(x.opex_budget_date)=' . $year . ') as may, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=6 AND YEAR(x.opex_budget_date)=' . $year . ') as jun, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=7 AND YEAR(x.opex_budget_date)=' . $year . ') as jul, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=8 AND YEAR(x.opex_budget_date)=' . $year . ') as aug, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=9 AND YEAR(x.opex_budget_date)=' . $year . ') as sep, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=10 AND YEAR(x.opex_budget_date)=' . $year . ') as oct, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=11 AND YEAR(x.opex_budget_date)=' . $year . ') as nov, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=12 AND YEAR(x.opex_budget_date)=' . $year . ') as december', false, false);

			

			$get_depreciation = $this->get_depreciation_monthly($cost_center_id, $year);
			$get_depreciation2 = $this->get_depreciation_monthly2($cost_center_id, $year, $bc_id);

			$this->load->library('excel');

			$spreadsheet = $this->excel;
			$spreadsheet->getProperties()->setCreator('BAVI')
					->setLastModifiedBy('Budgeting System')
					->setTitle('Employees')
					->setSubject('List of Employees')
					->setDescription('List of Employees');

			
			$styleArray = array(
					'font' 	=> array(
							'bold' => true,
					),
					'alignment' => array(
							'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
							'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
					),
					'borders' => array(
							'top' => array(
									'style' => PHPExcel_Style_Border::BORDER_THIN,
							),
					),
					'fill' => array(
							'type' => \PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
							'rotation' => 90,
							'startcolor' => array(
									'argb' => 'FFA0A0A0',
							),
							'endcolor' => array(
									'argb' => 'FFFFFFFF',
							),
					),
			);


			foreach(range('A','H') as $columnID) {
				$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
						->setAutoSize(true);
			}

			$style_center = array(
				'font' => array(
					'bold' => true,
					'size' => 20
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				)
			);

			$style_info =  array(
				'font' => array(
					'bold' => true
				)
			);

			$style_border = array(
				'font' => array(
					'bold' => true
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				)
			);

			$style_data = array(
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				)
			);

			$style_out = array(
				'font' => array(
					'bold' => true,
					'color' => array('rgb' => 'FF0000')
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
				),
			);


			$spreadsheet->getActiveSheet()->getStyle("A1:T1")->applyFromArray($style_border);
			$spreadsheet->getActiveSheet()->getStyle("A1:T1")->applyFromArray($style_info);
			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Location')
				->setCellValue("B1", 'GL Code')
				->setCellValue("C1", "GL Group")
				->setCellValue("D1", "GL Subgroup")
				->setCellValue("E1", "Cost Center Group")
				->setCellValue("F1", "Cost Center Code")
				->setCellValue("G1", "Cost Center Name")
				->setCellValue("H1", "Year")
				->setCellValue("I1", "Jan")
				->setCellValue("J1", "Feb")
				->setCellValue("K1", "Mar")
				->setCellValue("L1", "Apr")
				->setCellValue("M1", "May")
				->setCellValue("N1", "Jun")
				->setCellValue("O1", "Jul")
				->setCellValue("P1", "Aug")
				->setCellValue("Q1", "Sep")
				->setCellValue("R1", "Oct")
				->setCellValue("S1", "Nov")
				->setCellValue("T1", "Dec")
				->setCellValue("U1", "Total")
				;
			// Add some data
			$x= 2;
			$count = 0;
			foreach($gl_details as $row){
				$jan = $row->jan;
				$feb = $row->feb;
				$mar = $row->mar;
				$apr = $row->apr;
				$may = $row->may;
				$jun = $row->jun;
				$jul = $row->jul;
				$aug = $row->aug;
				$sep = $row->sep;
				$oct = $row->oct;
				$nov = $row->nov;
				$december = $row->december;
				$total = $jan + $feb + $mar + $apr + $may + $jun + $jul + $aug + $sep + $oct + $nov + $december;
				$spreadsheet->setActiveSheetIndex(0)
						->setCellValue("A$x",$cost_center_name)
						->setCellValue("B$x",$row->gl_code)
						->setCellValue("C$x",$row->gl_group_name)
						->setCellValue("D$x",$row->gl_sub_name)
						->setCellValue("E$x",$row->cost_center_group_name)
						->setCellValue("F$x",$row->cost_center_code)
						->setCellValue("G$x",$row->cost_center_desc)
						->setCellValue("H$x",$row->gl_year)
						->setCellValue("I$x",$jan)
						->setCellValue("J$x",$feb)
						->setCellValue("K$x",$mar)
						->setCellValue("L$x",$apr)
						->setCellValue("M$x",$may)
						->setCellValue("N$x",$jun)
						->setCellValue("O$x",$jul)
						->setCellValue("P$x",$aug)
						->setCellValue("Q$x",$sep)
						->setCellValue("R$x",$oct)
						->setCellValue("S$x",$nov)
						->setCellValue("T$x",$december)
						->setCellValue("U$x",$total)
						;

				$spreadsheet->getActiveSheet()->getStyle("A$x:U$x")->applyFromArray($style_data);
				$x++;
			}

			foreach($get_depreciation as $row){
				$jan = $row->jan;
				$feb = $row->feb;
				$mar = $row->mar;
				$apr = $row->apr;
				$may = $row->may;
				$jun = $row->jun;
				$jul = $row->jul;
				$aug = $row->aug;
				$sep = $row->sep;
				$oct = $row->oct;
				$nov = $row->nov;
				$december = $row->december;
				$amount = $row->amount;

				$month = array(0 => 0, 1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0, 6 => 0, 7 => 0, 8 => 0, 9 => 0, 10 => 0, 11 => 0);

				for($a = 0; $a < 12; $a++){
					$month[$a] += $jan * $amount;
				}

				for($a = 1; $a < 12; $a++){
					$month[$a] += $feb * $amount;
				}

				for($a = 2; $a < 12; $a++){
					$month[$a] += $mar * $amount;
				}

				for($a = 3; $a < 12; $a++){
					$month[$a] += $apr * $amount;
				}

				for($a = 4; $a < 12; $a++){
					$month[$a] += $may * $amount;
				}

				for($a = 5; $a < 12; $a++){
					$month[$a] += $jun * $amount;
				}

				for($a = 6; $a < 12; $a++){
					$month[$a] += $jul * $amount;
				}

				for($a = 7; $a < 12; $a++){
					$month[$a] += $aug * $amount;
				}

				for($a = 8; $a < 12; $a++){
					$month[$a] += $sep * $amount;
				}

				for($a = 9; $a < 12; $a++){
					$month[$a] += $oct * $amount;
				}

				for($a = 10; $a < 12; $a++){
					$month[$a] += $nov * $amount;
				}

				for($a = 11; $a < 12; $a++){
					$month[$a] += $december * $amount;
				}

				$total = $month[0] + $month[1] + $month[2] + $month[3] + $month[4] + $month[5] + $month[6] + $month[7] + $month[8] + $month[9] + $month[10] + $month[11];
				$spreadsheet->setActiveSheetIndex(0)
						->setCellValue("A$x",$cost_center_name)
						->setCellValue("B$x", $row->ag_gl_code)
						->setCellValue("C$x", 'DEPRECIATION EXPENSES')
						->setCellValue("D$x", $row->ag_gl_name)
						->setCellValue("E$x", $row->cost_center_group_name)
						->setCellValue("F$x", $row->cost_center_code)
						->setCellValue("G$x", $row->cost_center_desc)
						->setCellValue("H$x", $row->ag_trans_budget_year)
						->setCellValue("I$x", $month[0])
						->setCellValue("J$x", $month[1])
						->setCellValue("K$x", $month[2])
						->setCellValue("L$x", $month[3])
						->setCellValue("M$x", $month[4])
						->setCellValue("N$x", $month[5])
						->setCellValue("O$x", $month[6])
						->setCellValue("P$x", $month[7])
						->setCellValue("Q$x", $month[8])
						->setCellValue("R$x", $month[9])
						->setCellValue("S$x", $month[10])
						->setCellValue("T$x", $month[11])
						->setCellValue("U$x",$total)
						;

				$spreadsheet->getActiveSheet()->getStyle("A$x:U$x")->applyFromArray($style_data);
				$x++;
			}

			foreach($get_depreciation2 as $row){
				$jan = $row->jan;
				$feb = $row->feb;
				$mar = $row->mar;
				$apr = $row->apr;
				$may = $row->may;
				$jun = $row->jun;
				$jul = $row->jul;
				$aug = $row->aug;
				$sep = $row->sep;
				$oct = $row->oct;
				$nov = $row->nov;
				$december = $row->december;
				$total = $jan + $feb + $mar + $apr + $may + $jun + $jul + $aug + $sep + $oct + $nov + $december;
				$spreadsheet->setActiveSheetIndex(0)
						->setCellValue("A$x",$cost_center_name)
						->setCellValue("B$x",$row->gl_code)
						->setCellValue("C$x","DEPRECIATION - 2")
						->setCellValue("D$x",$row->gl_sub_name)
						->setCellValue("E$x",$row->brand)
						->setCellValue("F$x",$row->cost_center_code)
						->setCellValue("G$x",$row->cost_center_desc)
						->setCellValue("H$x",$row->gl_year)
						->setCellValue("I$x",$jan)
						->setCellValue("J$x",$feb)
						->setCellValue("K$x",$mar)
						->setCellValue("L$x",$apr)
						->setCellValue("M$x",$may)
						->setCellValue("N$x",$jun)
						->setCellValue("O$x",$jul)
						->setCellValue("P$x",$aug)
						->setCellValue("Q$x",$sep)
						->setCellValue("R$x",$oct)
						->setCellValue("S$x",$nov)
						->setCellValue("T$x",$december)
						->setCellValue("U$x",$total)
						;

				$spreadsheet->getActiveSheet()->getStyle("A$x:W$x")->applyFromArray($style_data);
				$x++;
			}

			foreach(range('A','U') as $columnID) {
				$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
						->setAutoSize(true);
			}

			$spreadsheet->getActiveSheet()->getStyle('K2:W' . ($x - 1))->getNumberFormat()->setFormatCode('#,##0.00');
			
			// Rename worksheet
			$spreadsheet->getActiveSheet()->setTitle('OPEX Data - ' . $year);

			// set right to left direction
			//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

			// Set active sheet index to the first sheet, so Excel opens this as the first sheet
			$spreadsheet->setActiveSheetIndex(0);

			// Redirect output to a client’s web browser (Excel2007)
			header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
			header('Content-Disposition: attachment;filename="Budgeting - OPEX ' . $year . '.xlsx"');
			header('Cache-Control: max-age=0');
			// If you're serving to IE 9, then the following may be needed
			header('Cache-Control: max-age=1');

			// If you're serving to IE over SSL, then the following may be needed
			header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
			header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
			header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
			header('Pragma: public'); // HTTP/1.0

			$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
			$writer->save('php://output');
			exit;
		}else{
			echo 'Error Cost Center not exist. Please try again!';
		}
	}

	public function get_depreciation_monthly($cost_center, $year){
		$info = $this->_require_login();

		$get_depreciation = $this->admin->get_query('SELECT e.ag_name, d.asg_name as asset_group, f.cost_center_code, f.cost_center_desc, a.ag_trans_budget_year, (b.capex_price / b.capex_lifespan) amount, h.cost_center_group_name,

			(SELECT x.gl_sub_name FROM gl_subgroup_tbl x WHERE x.gl_code = e.ag_gl_code) as ag_gl_name,

			(SELECT x.gl_code FROM gl_subgroup_tbl x WHERE x.gl_code = e.ag_gl_code LIMIT 1) as ag_gl_code,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 1) as jan,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 2) as feb,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 3) as mar,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 4) as apr,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 5) as may,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 6) as jun,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 7) as jul,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 8) as aug,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 9) as sep,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 10) as oct,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 11) as nov,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 12) as december

		 FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g, cost_center_group_tbl h WHERE a.ag_trans_id=b.ag_trans_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND f.cost_center_group_id = h.cost_center_group_id AND g.trans_type_id=1 AND a.ag_trans_status=1 AND b.ag_trans_item_status = 1 AND f.parent_id=' . $cost_center . ' AND a.ag_trans_budget_year=' . $year);

		return $get_depreciation;
	}

	public function get_depreciation_monthly2($cost_center, $year, $bc_id){
		$info = $this->_require_login();

		
		$get_depreciation = $this->admin->get_query('

			SELECT n.gl_sub_name, n.gl_code, "DEPRECIATION(OLD)", o.cost_center_code, o.cost_center_desc, "' . $year . '" as gl_year, 1 as amount, q.cost_center_type_name,

				(SELECT z.brand_name FROM outlet_tbl x, outlet_brand_tbl y, brand_tbl z WHERE o.cost_center_code = x.ifs_code AND x.outlet_id = y.outlet_id AND y.brand_id = z.brand_id AND y.outlet_brand_status = 1) as brand,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 1 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  jan,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 2 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  feb,


				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 3 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  mar,


				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 4 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  apr,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 5 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  may,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 6 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  jun,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 7 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  jul,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 8 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  aug,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 9 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  sep,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 10 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  oct,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 11 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  nov,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 12 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  december,

				(SELECT x.cost_center_group_name FROM cost_center_group_tbl x WHERE o.cost_center_group_id = x.cost_center_group_id) as cost_center_group
			
			FROM depreciation_bc_tbl m, gl_subgroup_tbl n, cost_center_tbl o, asset_group_tbl p, cost_center_type_tbl q WHERE m.gl_sub_id = n.gl_sub_id AND m.cost_center_id = o.cost_center_id AND  n.gl_code = p.ag_gl_code AND o.cost_center_type_id = q.cost_center_type_id AND m.depreciation_bc_status = 1 AND YEAR(m.depreciation_bc_date) = ' . $year . ' AND m.bc_id = ' . $bc_id . ' GROUP BY o.cost_center_id, n.gl_sub_id


		');

		return $get_depreciation;
	}


	/*Cost Center*/

	public function cost_center(){
		$info = $this->_require_login();
		$data['title'] = 'Cost/Profit Center';

		$join_cost = array(
			'bc_tbl b, LEFT' => 'a.bc_id = b.bc_id',
			'company_unit_tbl c, LEFT' => 'a.company_unit_id = c.company_unit_id AND a.cost_center_status=1',
			'cost_center_type_tbl d' => 'a.cost_center_type_id=d.cost_center_type_id',
			'cost_center_group_tbl e, LEFT' => 'a.cost_center_group_id=e.cost_center_group_id',
			'cost_center_allocation_tbl f, LEFT' => 'a.cost_center_id = f.cost_center_id AND f.cost_center_allocation_status = 1',
			'allocation_type_tbl g, LEFT' => 'f.allocation_type_id = g.allocation_type_id'
		);

		$data['cost_center'] = $this->admin->get_join('cost_center_tbl a', $join_cost, FALSE, FALSE, 'a.cost_center_id', '*, a.cost_center_code as cost_center, GROUP_CONCAT(g.allocation_type_name) as allocation, a.cost_center_id as id');
		
		$data['cc'] = $this->admin->get_data('cost_center_tbl', array('cost_center_status' => 1));
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_status' => 1));
		$data['cc_group'] = $this->admin->get_data('cost_center_group_tbl', array('cost_center_group_status' => 1));

		$data['unit'] = $this->admin->get_data('company_unit_tbl', 'company_unit_status=1', FALSE, FALSE, 'company_unit_name ASC');
		$data['type'] = $this->admin->get_data('cost_center_type_tbl', 'cost_center_type_status=1', FALSE, FALSE, 'cost_center_type_name ASC');
		$data['allocation'] = $this->admin->get_data('allocation_type_tbl', array('allocation_type_status' => 1));
		$data['content'] = $this->load->view('admin/admin_cost_center', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function add_cost_center(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$cost_center_code = clean_data($this->input->post('cost_code'));
			$cost_center_desc = clean_data($this->input->post('cost_name'));
			$bc = decode(clean_data($this->input->post('bc')));
			$unit = decode(clean_data($this->input->post('unit')));
			$type = decode(clean_data($this->input->post('type')));
			$group = decode(clean_data($this->input->post('group')));
			$parent = decode(clean_data($this->input->post('parent')));
			$allocation = clean_data($this->input->post('allocation'));

			if(!empty($cost_center_code) && !empty($cost_center_desc) && !empty($bc) && !empty($unit) && !empty($type) && !empty($parent) && !empty($group)){
				$check_code = $this->admin->check_data('cost_center_tbl', array('cost_center_code' =>  $cost_center_code));
				if($check_code == FALSE){
					$check_desc = $this->admin->check_data('cost_center_tbl', array('cost_center_desc' =>  $cost_center_desc));
					if($check_desc == FALSE){
						$check_unit = $this->admin->check_data('company_unit_tbl', array('company_unit_id' =>  $cost_center_desc, 'company_unit_status' => 1));
						// echo $group;
						if($check_unit == FALSE){
							$check_group = $this->admin->check_data('cost_center_group_tbl', array('cost_center_group_id' =>  $group, 'cost_center_group_status' => 1));
							if($check_group == TRUE){

								$this->db->trans_start();

								$set = array(
									'bc_id' => $bc,
									'company_unit_id' => $unit,
									'cost_center_type_id' => $type,
									'parent_id' => $parent,
									'user_id' => $user_id,
									'cost_center_group_id' => $group,
									'cost_center_code' => strtoupper($cost_center_code),
									'cost_center_desc' => strtoupper($cost_center_desc),
									'cost_center_added' => date_now(),
									'cost_center_status' => 1
								);

								$result = $this->admin->insert_data('cost_center_tbl', $set, TRUE);
								if($result['result'] == TRUE){
									$cost_center_id = $result['id'];
									foreach($allocation as $row_allocation){
										$allocation_type_id = decode($row_allocation);
										$set_allocation = array(
											'cost_center_id' => $cost_center_id,
											'allocation_type_id' => $allocation_type_id,
											'user_id' => $user_id,
											'cost_center_allocation_added' => date_now(),
											'cost_center_allocation_status' => 1
										);

										$insert_allocation = $this->admin->insert_data('cost_center_allocation_tbl', $set_allocation);
									}

									if($this->db->trans_status() === FALSE){
										$this->db->trans_rollback();
										$msg = '<div class="alert alert-danger">Error please try again!</div>';
										$this->session->set_flashdata('message', $msg);
										redirect($_SERVER['HTTP_REFERER']);
									}else{
										$this->db->trans_commit();
										$msg = '<div class="alert alert-success">Cost center added.</div>';
									}
								}else{
									$msg = '<div class="alert alert-danger">Error please try again!</div>';
								}
							}else{
								$msg = '<div class="alert alert-danger">Error in group please try again!</div>';
							}
						}else{
							$msg = '<div class="alert alert-danger">Error in unit try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error cost center name already exist.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error cost center code already exist.</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/cost-center');
		}else{
			redirect('admin');
		}
	}

	public function modal_cost_center($id){
		$info = $this->_require_login();
		$cost_center_id = decode($id);

		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id AND a.cost_center_id = ' . $cost_center_id,
			'company_unit_tbl c' => 'a.company_unit_id = c.company_unit_id',
			'cost_center_type_tbl d' => 'a.cost_center_type_id = d.cost_center_type_id',
			'cost_center_group_tbl e' => 'a.cost_center_group_id = e.cost_center_group_id'
		);

		$check_cost_center = $this->admin->check_join('cost_center_tbl a', $join, TRUE, FALSE, FALSE, '*, a.cost_center_code as code');
		if($check_cost_center['result'] == TRUE){
			$bc_id = $check_cost_center['info']->bc_id;
			$company_unit = $check_cost_center['info']->company_unit_id;
			$cost_center_type = $check_cost_center['info']->cost_center_type_id;
			$cost_center_group = $check_cost_center['info']->cost_center_group_id;

			$data['result'] = 1;
			$get_bc = $this->admin->get_data('bc_tbl', array('bc_status' => 1));

			$bc_data = '';
			foreach($get_bc as $row_bc):
				$selected = '';
				if($row_bc->bc_id == $bc_id){
					$selected = ' selected';
				}

				$bc_data .= '<option value="' . encode($row_bc->bc_id) . '"' . $selected . '>' . $row_bc->bc_name . '</option>';

			endforeach;

			$get_company_unit = $this->admin->get_data('company_unit_tbl', array('company_unit_status' => 1));	
			
			$company_unit_data = '';
			foreach($get_company_unit as $row_company_unit):

				$selected = '';
				if($row_company_unit->company_unit_id == $company_unit){
					$selected = ' selected';
				}
				
				$company_unit_data .= '<option value="' . encode($row_company_unit->company_unit_id) . '"' . $selected . '>' . $row_company_unit->company_unit_name . '</option>';

			endforeach;

			$get_cost_center_type = $this->admin->get_data('cost_center_type_tbl', array('cost_center_type_status' => 1));	
			
			$cost_center_type_data = '';
			foreach($get_cost_center_type as $row_cost_center_type):

				$selected = '';
				if($row_cost_center_type->cost_center_type_id == $cost_center_type){
					$selected = ' selected';
				}
				
				$cost_center_type_data .= '<option value="' . encode($row_cost_center_type->cost_center_type_id) . '"' . $selected . '>' . $row_cost_center_type->cost_center_type_name . '</option>';

			endforeach;

			$get_cost_center_group  = $this->admin->get_data('cost_center_group_tbl', array('cost_center_group_status' => 1));	
			
			$cost_center_group_data = '';
			foreach($get_cost_center_group as $row_cost_center_group):

				$selected = '';
				if($row_cost_center_group->cost_center_group_id == $cost_center_group){
					$selected = ' selected';
				}
				
				$cost_center_group_data .= '<option value="' . encode($row_cost_center_group->cost_center_group_id) . '"' . $selected . '>' . $row_cost_center_group->cost_center_group_name . '</option>';

			endforeach;

			$get_allocation = $this->admin->get_data('allocation_type_tbl');

			$allocation_data = '<option value="">Select Allocation Type</option>';
			foreach($get_allocation as $row_allocation){
				$check_selected_allocation = $this->admin->check_data('cost_center_allocation_tbl', array('cost_center_id' => $cost_center_id, 'allocation_type_id' => $row_allocation->allocation_type_id, 'cost_center_allocation_status' => 1));
				$selected = '';
				if($check_selected_allocation == TRUE){
					$selected = ' selected';
				}

				$allocation_data .= '<option value="' . encode($row_allocation->allocation_type_id) . '"' . $selected . '>' . $row_allocation->allocation_type_name . '</option>';
			}


			$data['result'] = 1;
			$data['info'] = array(
				'cost_center_name' => $check_cost_center['info']->cost_center_desc,
				'cost_center_code' => $check_cost_center['info']->code,
				'bc' => $bc_data,
				'company_unit' => $company_unit_data,
				'cost_center_type' => $cost_center_type_data,
				'cost_center_group' => $cost_center_group_data,
				'allocation_type' => $allocation_data
			);

			
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}


	public function update_cost_center(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$cost_center_id = decode(clean_data($this->input->post('id')));
			$cost_center_code = clean_data($this->input->post('cost_code'));
			$cost_center_desc = clean_data($this->input->post('cost_name'));
			$bc = decode(clean_data($this->input->post('bc')));
			$unit = decode(clean_data($this->input->post('unit')));
			$type = decode(clean_data($this->input->post('type')));
			$group = decode(clean_data($this->input->post('group')));
			$allocation = clean_data($this->input->post('allocation'));

			if(!empty($cost_center_id) && !empty($cost_center_code) && !empty($cost_center_desc) && !empty($bc) && !empty($unit) && !empty($type) && !empty($group)){
				$check_cost_center_id = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center_id));
				if($cost_center_id == TRUE){
					$check_code = $this->admin->check_data('cost_center_tbl', 'cost_center_code = "' . $cost_center_code . '" AND cost_center_id != ' . $cost_center_id);
					if($check_code == FALSE){
						$check_desc = $this->admin->check_data('cost_center_tbl', 'cost_center_desc = "' . $cost_center_desc . '" AND cost_center_id != ' . $cost_center_id. ' AND cost_center_type_id = '.$type);
						if($check_desc == FALSE){
							$check_unit = $this->admin->check_data('company_unit_tbl', array('company_unit_id' =>  $cost_center_desc, 'company_unit_status' => 1));
							if($check_unit == FALSE){
								$check_group = $this->admin->check_data('cost_center_group_tbl', array('cost_center_group_id' =>  $group, 'cost_center_group_status' => 1));
								if($check_group == TRUE){

									$this->db->trans_start();

									$set = array(
										'bc_id' => $bc,
										'company_unit_id' => $unit,
										'cost_center_type_id' => $type,
										'user_id' => $user_id,
										'cost_center_group_id' => $group,
										'cost_center_code' => strtoupper($cost_center_code),
										'cost_center_desc' => strtoupper($cost_center_desc)
									);
									$where = array('cost_center_id' => $cost_center_id);

									$result = $this->admin->update_data('cost_center_tbl', $set, $where);
									if($result == TRUE){
										print_r($allocation);

										if(count($allocation) > 0 || !empty($allocation)){
											$allocation_data = '';
											$allocation_count = 1;
											foreach($allocation as $row_data){
												$allocation_data .= decode($row_data);
												if(count($allocation) != $allocation_count){
													$allocation_data .= ',';
												}
												
												$allocation_count++;
											}

											if(!empty($allocation_data)){

												$set_remove_allocation = array('cost_center_allocation_status' => 0);
												$where_remove_allocation = 'cost_center_allocation_status = 1 AND cost_center_id = ' . $cost_center_id . ' AND allocation_type_id NOT IN(' . $allocation_data . ')';
												$remove_allocation = $this->admin->update_data('cost_center_allocation_tbl', $set_remove_allocation, $where_remove_allocation);
												foreach($allocation as $row){
													$allocation_type_id = decode($row);
													$check_allocation = $this->admin->check_data('cost_center_allocation_tbl', array('cost_center_id' => $cost_center_id, 'allocation_type_id' => $allocation_type_id, 'cost_center_allocation_status' => 1));
													if($check_allocation == FALSE){
														$set_allocation = array(
															'cost_center_id' => $cost_center_id,
															'allocation_type_id' => $allocation_type_id,
															'user_id' => $user_id,
															'cost_center_allocation_added' => date_now(),
															'cost_center_allocation_status' => 1
														);

														$insert_allocation = $this->admin->insert_data('cost_center_allocation_tbl', $set_allocation);
													}
												}
											}else{
												$set_remove_allocation = array('cost_center_allocation_status' => 0);
												$where_remove_allocation = 'cost_center_allocation_status = 1 AND cost_center_id = ' . $id;
												$remove_allocation = $this->admin->update_data('cost_center_allocation_tbl', $set_remove_allocation, $where_remove_allocation);
											}
										}else{
											$set_remove_allocation = array('cost_center_allocation_status' => 0);
											$where_remove_allocation = 'cost_center_allocation_status = 1 AND cost_center_id = ' . $id;
											$remove_allocation = $this->admin->update_data('cost_center_allocation_tbl', $set_remove_allocation, $where_remove_allocation);
										}

										if($this->db->trans_status() === FALSE){
											$this->db->trans_rollback();
											$msg = '<div class="alert alert-danger">Error please try again!</div>';
											$this->session->set_flashdata('message', $msg);
											redirect($_SERVER['HTTP_REFERER']);
										}else{
											$this->db->trans_commit();
											$msg = '<div class="alert alert-success">Cost center updared.</div>';
										}
									}else{
										$msg = '<div class="alert alert-danger">Error please try again!</div>';
									}
								}else{
									$msg = '<div class="alert alert-danger">Error in group please try again!</div>';
								}
							}else{
								$msg = '<div class="alert alert-danger">Error in unit try again!</div>';
							}
						}else{
							$msg = '<div class="alert alert-danger">Error cost center name already exist.</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error cost center code already exist.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error cost center not exist.</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/cost-center');
		}else{
			redirect('admin');
		}
	}

	/*Employee*/

	public function employees($year = null){
		$info = $this->_require_login();

		if($year == null){
			$year = $this->_active_year();
		}

		$data['year'] = $year;
		$data['title'] = 'Employees';
		$join_emp = array(
			'employee_year_tbl b' => 'a.emp_id = b.emp_id AND b.emp_year = ' . $year,
			'company_unit_tbl c' => 'b.company_unit_id = c.company_unit_id',
			'cost_center_tbl d' => 'b.cost_center_id = d.cost_center_id',
			'employee_type_tbl e' => 'b.emp_type_id = e.emp_type_id',
			'rank_tbl f' => 'b.rank_id = f.rank_id',
		);

		$data['employee'] = $this->admin->get_join('employee_tbl a', $join_emp);
		$data['type'] = $this->admin->get_data('employee_type_tbl', array('emp_type_status' => 1));
		$data['rank'] = $this->admin->get_data('rank_tbl', array('rank_status' => 1));
		$data['unit'] = $this->admin->get_data('company_unit_tbl', array('company_unit_status' => 1));
		$data['content'] = $this->load->view('admin/admin_employee_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function _migrate_employees($year){
		$join_emp = array(
			'company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id',
			'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id',
			'employee_type_tbl d' => 'a.emp_type_id = d.emp_type_id',
			'rank_tbl e' => 'a.rank_id = e.rank_id'
		);

		$employees = $this->admin->get_join('employee_tbl a', $join_emp);

		foreach($employees as $row){
			$emp_id = $row->emp_id;
			$rank_id = $row->rank_id;
			$company_unit_id = $row->company_unit_id;
			$cost_center_id = $row->cost_center_id;
			$emp_type_id = $row->emp_type_id;
			$salary = $row->basic_salary;

			$check_emp = $this->admin->check_data('employee_year_tbl', array('emp_id' => $emp_id, 'emp_year' => $year, 'emp_year_status' => 1));

			if($check_emp == FALSE){
				$set = array(
					'emp_id' => $emp_id,
					'rank_id' => $rank_id,
					'company_unit_id' => $company_unit_id,
					'cost_center_id' => $cost_center_id,
					'emp_type_id' => $emp_type_id,
					'emp_year' => $year,
					'emp_year_salary' => $salary,
					'emp_year_added' => date_now(),
					'emp_year_status' => 1
				);

				$insert_emp = $this->admin->insert_data('employee_year_tbl', $set);
			}
		}

	}

	public function get_new_emp(){
		$where = array('emp_type_id' => 2 , 'emp_status' => 1);
		$count = $this->admin->get_count('employee_tbl', $where) + 1;
		$format = 'NEW-EMP-';
		if($count > 0 && $count < 10){
			$format .= '00' . $count;
		}else if($count >= 10 && $count < 100){
			$format = $format . '0' . $count;
		}else{
			$format = $format . $count;
		}
		$data['result'] = 1;
		$data['info'] = $format;
		
		echo json_encode($data);
	}

	public function get_emp_cost_center(){
		$unit = decode($this->input->post('unit'));

		$where = array('company_unit_id' => $unit , 'cost_center_type_id != ' => 2, 'cost_center_status' => 1);
		$get_cost_center = $this->admin->get_data('cost_center_tbl', $where);
		$cost_center_data = '<option value="">Select...</option>';
		foreach($get_cost_center as $row){
			$cost_center_data .= '<option value="' . encode($row->cost_center_id) . '">' . $row->cost_center_desc . '</option>';
		}

		$data['result'] = 1;
		$data['info'] = $cost_center_data;
		
		echo json_encode($data);
	}

	public function add_employee(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$fname = clean_data($this->input->post('fname'));
			$lname = clean_data($this->input->post('lname'));
			$type = decode(clean_data($this->input->post('type')));
			$emp_no = clean_data($this->input->post('emp_no'));
			$salary = clean_data($this->input->post('salary'));
			$rank = decode(clean_data($this->input->post('rank')));
			$unit = decode(clean_data($this->input->post('unit')));
			$cost_center = decode(clean_data($this->input->post('cost_center')));
			$year = clean_data($this->input->post('year'));

			if(!empty($fname) && !empty($lname) && !empty($type) && !empty($emp_no) && !empty($salary) && !empty($rank) && !empty($unit) && !empty($cost_center) && !empty($year)){

				$check_emp_no = $this->admin->check_data('employee_tbl', array('emp_no' => $emp_no));
				if($check_emp_no == FALSE){
					$check_code = $this->admin->check_data('cost_center_tbl', array('cost_center_id' =>  $cost_center));
					if($check_code == TRUE){
						$check_unit = $this->admin->check_data('company_unit_tbl', array('company_unit_id' =>  $unit, 'company_unit_status' => 1));
						if($check_unit == TRUE){
							$check_rank = $this->admin->check_data('rank_tbl', array('rank_id' =>  $rank, 'rank_status' => 1));
							if($check_rank == TRUE){
								$check_type = $this->admin->check_data('employee_type_tbl', array('emp_type_id' =>  $type, 'emp_type_status' => 1));
								if($check_type == TRUE){

									$this->db->trans_start();

									$set = array(
										'rank_id' => $rank,
										'company_unit_id' => $unit,
										'cost_center_id' => $cost_center,
										'emp_type_id' => $type,
										'emp_fname' => $fname,
										'emp_lname' => $lname,
										'emp_no' => $emp_no,
										'basic_salary' => $salary,
										'emp_added' => date_now(),
										'emp_status' => 1
									);
									$result = $this->admin->insert_data('employee_tbl', $set, TRUE);
									
									if($result['result'] == TRUE){
										$emp_id = $result['id'];

										$set_year = array(
											'emp_id' => $emp_id,
											'rank_id' => $rank,
											'company_unit_id' => $unit,
											'cost_center_id' => $cost_center,
											'emp_type_id' => $type,
											'emp_year' => $year,
											'emp_year_salary' => $salary,
											'emp_year_added' => date_now(),
											'emp_year_status' => 1
										);

										$insert_year = $this->admin->insert_data('employee_year_tbl', $set_year);

										if($this->db->trans_status() === FALSE){
											$this->db->trans_rollback();
											$msg = '<div class="alert alert-danger">Error please try again!</div>';
											$this->session->set_flashdata('message', $msg);
											redirect($_SERVER['HTTP_REFERER']);
										}else{
											$this->db->trans_commit();
											$msg = '<div class="alert alert-success">Employee successfully added.</div>';
											$this->session->set_flashdata('message', $msg);
											redirect($_SERVER['HTTP_REFERER']);
										}
									}else{
										$msg = '<div class="alert alert-danger">Error please try again!</div>';
									}
								}else{
									$msg = '<div class="alert alert-danger">Error in type please try again!</div>';	
								}
							}else{
								$msg = '<div class="alert alert-danger">Error in rank please try again!</div>';
							}
						}else{
							$msg = '<div class="alert alert-danger">Error in unit try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error in cost center.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error Employee no. already exist.</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect($_SERVER['HTTP_REFERER']);
		}else{
			redirect('admin');
		}
	}

	public function get_emp_data($id){
		$emp_id = decode($id);

		$check_emp = $this->admin->check_data('employee_tbl', array('emp_id' => $emp_id), TRUE);
		if($check_emp['result'] == TRUE){
			$fname = $check_emp['info']->emp_fname;
			$lname = $check_emp['info']->emp_lname;
			$emp_no = $check_emp['info']->emp_no;
			$basic_salary = $check_emp['info']->basic_salary;

			$type = $check_emp['info']->emp_type_id;
			$rank = $check_emp['info']->rank_id;
			$cost_center = $check_emp['info']->cost_center_id;
			$unit = $check_emp['info']->company_unit_id;

			$get_type = $this->admin->get_data('employee_type_tbl');
			$type_data = '<option value="">Select...</option>';
			foreach($get_type as $row_type){
				$selected = '';
				if($type == $row_type->emp_type_id){
					$selected = ' selected';
				}

				$type_data .= '<option value="' . encode($row_type->emp_type_id) . '"' . $selected . '">' . $row_type->emp_type_name . '</option>';
			}

			$get_rank = $this->admin->get_data('rank_tbl');
			$rank_data = '<option value="">Select...</option>';
			foreach($get_rank as $row_rank){
				$selected = '';
				if($rank == $row_rank->rank_id){
					$selected = ' selected';
				}

				$type_data .= '<option value="' . encode($row_rank->rank_id) . '"' . $selected . '">' . $row_rank->rank_name . '</option>';
			}

			$get_rank = $this->admin->get_data('rank_tbl');
			$rank_data = '<option value="">Select...</option>';
			foreach($get_rank as $row_rank){
				$selected = '';
				if($rank == $row_rank->rank_id){
					$selected = ' selected';
				}

				$rank_data .= '<option value="' . encode($row_rank->rank_id) . '"' . $selected . '">' . $row_rank->rank_name . '</option>';
			}

			$get_unit = $this->admin->get_data('company_unit_tbl');
			$unit_data = '<option value="">Select...</option>';
			foreach($get_unit as $row_unit){
				$selected = '';
				if($unit == $row_unit->company_unit_id){
					$selected = ' selected';
				}

				$unit_data .= '<option value="' . encode($row_unit->company_unit_id) . '"' . $selected . '">' . $row_unit->company_unit_name . '</option>';
			}

			$where = array('company_unit_id' => $unit , 'cost_center_type_id != ' => 2, 'cost_center_status' => 1);
			$get_cost_center = $this->admin->get_data('cost_center_tbl', $where);
			$cost_center_data = '<option value="">Select...</option>';
			foreach($get_cost_center as $row_cost_center){
				$selected = '';
				if($cost_center == $row_cost_center){
					$selected = ' selected';
				}

				$cost_center_data .= '<option value="' . encode($row_cost_center->cost_center_id) . '"' . $selected . '>' . $row_cost_center->cost_center_desc . '</option>';
			}

			$emp_arr = array(
				'fname' => $fname,
				'lname' => $lname,
				'emp_no' => $emp_no,
				'basic_salary' => $basic_salary,
				'type' => $type_data,
				'rank' => $rank_data,
				'cost_center' => $cost_center_data,
				'unit' => $unit_data
			);

			$data['result'] = 1;
			$data['info'] = $emp_arr;
		}else{
			$data['result'] = 0;
		}
		
		echo json_encode($data);
	}

	public function modal_employee(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$emp_year_id = decode(clean_data($this->input->post('id')));

			$join = array(
				'employee_tbl b' => 'a.emp_id = b.emp_id AND a.emp_year_id = ' . $emp_year_id,
				'company_unit_tbl c' => 'a.company_unit_id = c.company_unit_id',
				'cost_center_tbl d' => 'a.cost_center_id = d.cost_center_id',
				'employee_type_tbl e' => 'a.emp_type_id = e.emp_type_id',
				'rank_tbl f' => 'a.rank_id = f.rank_id',
			);

			$check_emp = $this->admin->check_join('employee_year_tbl a', $join, TRUE);


			if($check_emp['result'] == TRUE){
				$fname = $check_emp['info']->emp_fname;
				$lname = $check_emp['info']->emp_lname;
				$emp_no = $check_emp['info']->emp_no;
				$type_name = $check_emp['info']->emp_type_name;

				$company_unit_id = $check_emp['info']->company_unit_id;
				$cost_center_id = $check_emp['info']->cost_center_id;
				$emp_type_id = $check_emp['info']->emp_type_id;
				$rank_id = $check_emp['info']->rank_id;

				$get_unit = $this->admin->get_data('company_unit_tbl', array('company_unit_status' => 1));	
				$unit_data = '<option value="">Select...</option>';

				foreach($get_unit as $row_unit):

					if($row_unit->company_unit_id == $company_unit_id){
						$unit_data .= '<option value="' . encode($row_unit->company_unit_id) . '" selected>' . $row_unit->company_unit_name . '</option>';
					}else{
						$unit_data .= '<option value="' . encode($row_unit->company_unit_id) . '">' . $row_unit->company_unit_name . '</option>';
					}

				endforeach;


				$get_cost = $this->admin->get_data('cost_center_tbl', array('cost_center_status' => 1));	
				$cost_data = '<option value="">Select...</option>';

				foreach($get_cost as $row_cost):

					if($row_cost->cost_center_id == $cost_center_id){
						$cost_data .= '<option value="' . encode($row_cost->cost_center_id) . '" selected>' . $row_cost->cost_center_desc . '</option>';
					}else{
						$cost_data .= '<option value="' . encode($row_cost->cost_center_id) . '">' . $row_cost->cost_center_desc . '</option>';
					}

				endforeach;

				$get_rank = $this->admin->get_data('rank_tbl', array('rank_status' => 1));	
				$rank_data = '<option valu="">Select...</option>';

				foreach($get_rank as $row_rank):

					if($row_rank->rank_id == $rank_id){
						$rank_data .= '<option value="' . encode($row_rank->rank_id) . '" selected>' . $row_rank->rank_name . '</option>';
					}else{
						$rank_data .= '<option value="' . encode($row_rank->rank_id) . '">' . $row_rank->rank_name . '</option>';
					}

				endforeach;

				$data['result'] = 1;
				$data['info'] = array(
					'fname' => $fname,
					'lname' => $lname,
					'emp_no' => $emp_no,
					'type' => $type_name,
					'unit' => $unit_data,
					'cost_center' => $cost_data,
					'rank' => $rank_data
				);

				
			}else{
				$data['result'] = 0;
			}

			echo json_encode($data);
		}
	}

	public function update_employee(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode(clean_data($this->input->post('id')));
			$fname = clean_data($this->input->post('fname'));
			$lname = clean_data($this->input->post('lname'));
			$emp_no = clean_data($this->input->post('emp_no'));
			$rank = decode(clean_data($this->input->post('rank')));
			$unit = decode(clean_data($this->input->post('unit')));
			$cost_center = decode(clean_data($this->input->post('cost_center')));

			if(!empty($id) && !empty($fname) && !empty($lname) && !empty($emp_no) && !empty($rank) && !empty($unit) && !empty($cost_center)){
				$check_id = $this->admin->check_data('employee_year_tbl', array('emp_year_id' => $id), TRUE);
				if($check_id['result'] == TRUE){
					$emp_id = $check_id['info']->emp_id;
					$check_emp_no = $this->admin->check_data('employee_tbl', array('emp_no' => $emp_no, 'emp_id !=' => $emp_id));
					if($check_emp_no == FALSE){
						$check_code = $this->admin->check_data('cost_center_tbl', array('cost_center_id' =>  $cost_center));
						if($check_code == TRUE){
							$check_unit = $this->admin->check_data('company_unit_tbl', array('company_unit_id' =>  $unit, 'company_unit_status' => 1));
							if($check_unit == TRUE){
								$check_rank = $this->admin->check_data('rank_tbl', array('rank_id' =>  $rank, 'rank_status' => 1));
								if($check_rank == TRUE){
									
									$set = array(
										'emp_fname' => $fname,
										'emp_lname' => $lname,
										'emp_no' => $emp_no
									);
									$where = array('emp_id' => $emp_id);
									$update_emp = $this->admin->update_data('employee_tbl', $set, $where);
									

									$set_year = array(
										'rank_id' => $rank,
										'company_unit_id' => $unit,
										'cost_center_id' => $cost_center,
										'emp_year_added' => date_now(),
										'emp_year_status' => 1
									);

									$where_year = array('emp_year_id' => $id);

									$update_emp_year = $this->admin->update_data('employee_year_tbl', $set_year, $where_year);

									$msg = '<div class="alert alert-success">Employee updated.</div>';
									
								}else{
									$msg = '<div class="alert alert-danger">Error in rank please try again!</div>';
									$this->session->set_flashdata('message', $msg);
									redirect($_SERVER['HTTP_REFERER']);
								}
							}else{
								$msg = '<div class="alert alert-danger">Error in unit try again!</div>';
								$this->session->set_flashdata('message', $msg);
								redirect($_SERVER['HTTP_REFERER']);
							}
						}else{
							$msg = '<div class="alert alert-danger">Error in cost center.</div>';
							$this->session->set_flashdata('message', $msg);
							redirect($_SERVER['HTTP_REFERER']);
						}
					}else{
						$msg = '<div class="alert alert-danger">Error employee no. already exist.</div>';
						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}
				}else{
					$msg = '<div class="alert alert-danger">Error Employee not exist.</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}else{
				$this->db->trans_commit();
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}

		}else{
			redirect($_SERVER['HTTP_REFERER']);
		}
	}

	public function deactivate_employee(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$emp_year_id = decode(clean_data($this->input->post('id')));

			$check_emp = $this->admin->check_data('employee_year_tbl a', array('emp_year_id' => $emp_year_id, 'emp_year_status' => 1), TRUE);
			if($check_emp['result'] == TRUE){
				$set_emp = array('emp_year_status' => 0);
				$where_emp = array('emp_year_id' => $emp_year_id);

				$this->admin->update_data('employee_year_tbl', $set_emp, $where_emp);

				$msg = '<div class="alert alert-success">Employee deactivated.</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);	
			}else{
				$msg = '<div class="alert alert-danger">Error Employee not exist. Please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}

			echo json_encode($data);
		}
	}

	public function activate_employee(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$emp_year_id = decode(clean_data($this->input->post('id')));

			$check_emp = $this->admin->check_data('employee_year_tbl a', array('emp_year_id' => $emp_year_id, 'emp_year_status' => 0), TRUE);
			if($check_emp['result'] == TRUE){
				$set_emp = array('emp_year_status' => 1);
				$where_emp = array('emp_year_id' => $emp_year_id);

				$this->admin->update_data('employee_year_tbl', $set_emp, $where_emp);

				$msg = '<div class="alert alert-success">Employee activated.</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);	
			}else{
				$msg = '<div class="alert alert-danger">Error Employee not exist. Please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($_SERVER['HTTP_REFERER']);
			}

			echo json_encode($data);
		}
	}

	public function upload_employees(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$year = clean_data($this->input->post('year'));
			$this->load->library('excel');
			ini_set('max_execution_time', 0); 
			ini_set('memory_limit','2048M');
			
			$temp_code = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 10);

			$config['upload_path']   = 'assets/employee';
	        $config['allowed_types'] = 'xls|xlsx|xlsb';
	        $config['file_name'] = 'tmp_' . $temp_code;
	        $this->load->library('upload', $config);
			
	        if (! $this->upload->do_upload('employee_file')) {
	            $error = array('error' => $this->upload->display_errors());
	            $msg = $this->upload->display_errors();
	            $this->session->set_flashdata('message', $msg);
	            redirect($_SERVER['HTTP_REFERER']);
	        }else{
				$data = array('upload_data' => $this->upload->data());
		        $file_name = $data['upload_data']['file_name'];
				$file = 'assets/employee/' . $file_name;	   
			   
		    	$this->db->trans_start();
		       
				$objPHPExcel = PHPExcel_IOFactory::load($file);
				//get only the Cell Collection
				$cell_collection = $objPHPExcel->getActiveSheet()->getCellCollection();
			
				$high = $objPHPExcel->getActiveSheet()->getHighestRow();
				for($a = 2; $a <= $high; $a++){
					$fname = $objPHPExcel->getActiveSheet()->getCell('A' . $a)->getValue();
					$lname = $objPHPExcel->getActiveSheet()->getCell('B' . $a)->getValue();
					$type = strtoupper($objPHPExcel->getActiveSheet()->getCell('C' . $a)->getValue());
					$employee_no = $objPHPExcel->getActiveSheet()->getCell('D' . $a)->getValue();
					$salary = $objPHPExcel->getActiveSheet()->getCell('E' . $a)->getValue();
					$rank = strtoupper($objPHPExcel->getActiveSheet()->getCell('F' . $a)->getValue());
					$unit = strtoupper($objPHPExcel->getActiveSheet()->getCell('G' . $a)->getValue());
					$cost_center = strtoupper($objPHPExcel->getActiveSheet()->getCell('H' . $a)->getValue());
					
					$check_type = $this->admin->check_data('employee_type_tbl', array('emp_type_name' => $type, 'emp_type_status' => 1), TRUE);
					if($check_type['result'] == TRUE){
						$emp_type_id = $check_type['info']->emp_type_id;
						$check_rank = $this->admin->check_data('rank_tbl', array('rank_name' => $rank), TRUE);
						if($check_rank['result'] == TRUE){
							$rank_id = $check_rank['info']->rank_id;
							$check_unit = $this->admin->check_data('company_unit_tbl', array('company_unit_name' => $unit), TRUE);
							if($check_unit['result'] == TRUE){
								$company_unit_id = $check_unit['info']->company_unit_id;
								$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'company_unit_id' => $company_unit_id), TRUE);
								if($check_cost_center['result'] == TRUE){
									$cost_center_id = $check_cost_center['info']->cost_center_id;
									$check_employee = $this->admin->check_data('employee_tbl', array('emp_no' => $employee_no), TRUE);
									if($check_employee['result'] == TRUE){
										$emp_id = $check_employee['info']->emp_id;
									}else{
										$set_emp = array(
											'rank_id' => $rank_id,
											'company_unit_id' => $company_unit_id,
											'cost_center_id' => $cost_center_id,
											'emp_type_id' => $emp_type_id,
											'emp_fname' => $fname,
											'emp_lname' => $lname,
											'emp_no' => $employee_no,
											'basic_salary' => $salary,
											'emp_added' => date_now(),
											'emp_status' => 1
										);

										$insert_emp = $this->admin->insert_data('employee_tbl', $set_emp, TRUE);
										if($insert_emp['result'] == TRUE){
											$emp_id = $insert_emp['id'];
										}else{
											$msg = '<div class="alert alert-danger">Error while inserting data line ' . $a . '!</div>';
											$this->session->set_flashdata('message', $msg);
											redirect($_SERVER['HTTP_REFERER']);
										}
									}

									$where_emp_year = array(
										'emp_id' => $emp_id,
										'emp_year' => $year,
										'emp_year_status' => 1
									);
									$check_emp_year = $this->admin->check_data('employee_year_tbl', $where_emp_year, TRUE);
									if($check_emp_year['result'] == TRUE){
										$emp_year_id = $check_emp_year['info']->emp_year_id;
										$set_emp_year = array(
											'rank_id' => $rank_id,
											'company_unit_id' => $company_unit_id,
											'cost_center_id' => $cost_center_id,
											'emp_type_id' => $emp_type_id,
											'emp_year_salary' => $salary,
										);

										$where_emp_year = array('emp_year_id' => $emp_year_id);
										$this->admin->update_data('employee_year_tbl', $set_emp_year, $where_emp_year);
									}else{
										$set_emp_year = array(
											'emp_id' => $emp_id,
											'rank_id' => $rank_id,
											'company_unit_id' => $company_unit_id,
											'cost_center_id' => $cost_center_id,
											'emp_type_id' => $emp_type_id,
											'emp_year' => $year,
											'emp_year_salary' => $salary,
											'emp_year_added' => date_now(),
											'emp_year_status' => 1
										);

										$this->admin->insert_data('employee_year_tbl', $set_emp_year);
									}
								}else{
									$msg = '<div class="alert alert-danger">Error invalid Cost Center line ' . $a . '!</div>';
									$this->session->set_flashdata('message', $msg);
									redirect($_SERVER['HTTP_REFERER']);
								}
							}else{
								$msg = '<div class="alert alert-danger">Error invalid Unit line ' . $a . '!</div>';
								$this->session->set_flashdata('message', $msg);
								redirect($_SERVER['HTTP_REFERER']);
							}
						}else{
							$msg = '<div class="alert alert-danger">Error invalid Rank line ' . $a . '!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect($_SERVER['HTTP_REFERER']);
						}
					}else{
						$msg = '<div class="alert alert-danger">Error invalid Type line ' . $a . '!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}
				}

				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success">Employees uploaded!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}
			}
		}else{
			redirect($_SERVER['HTTP_REFERER']);
		}
	}

	public function download_employees($year){
		$info = $this->_require_login();

		$join_emp = array(
			'employee_year_tbl b' => 'a.emp_id = b.emp_id AND b.emp_year = ' . $year,
			'company_unit_tbl c' => 'b.company_unit_id = c.company_unit_id',
			'cost_center_tbl d' => 'b.cost_center_id = d.cost_center_id',
			'employee_type_tbl e' => 'b.emp_type_id = e.emp_type_id',
			'rank_tbl f' => 'b.rank_id = f.rank_id',
		);

		$employees = $this->admin->get_join('employee_tbl a', $join_emp);

		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('Employees')
				->setSubject('List of Employees')
				->setDescription('List of Employees');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => \PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);


		foreach(range('A','H') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);


		$spreadsheet->getActiveSheet()->getStyle("A1:G1")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A1:G1")->applyFromArray($style_info);
		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'First Name')
				->setCellValue("B1", "Last Name")
				->setCellValue("C1", "Type (NEW OR OLD)")
				->setCellValue("D1", "Employee No.")
				->setCellValue("E1", "Rank")
				->setCellValue("F1", "Unit")
				->setCellValue("G1", "Cost Center");
		// Add some data
		$x= 2;
		$count = 0;
		foreach($employees as $row){
			$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A$x",$row->emp_fname)
					->setCellValue("B$x",$row->emp_lname)
					->setCellValue("C$x",$row->emp_type_name)
					->setCellValue("D$x",$row->emp_no)
					->setCellValue("E$x",$row->rank_name)
					->setCellValue("F$x",$row->company_unit_name)
					->setCellValue("G$x",$row->cost_center_code);

			$spreadsheet->getActiveSheet()->getStyle("A$x:G$x")->applyFromArray($style_data);
			$x++;
		}
		
		// Rename worksheet
		$spreadsheet->getActiveSheet()->setTitle('List of Employees ' . $year);

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);

		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Budgeting - List of Employees ' . $year . '.xlsx"');
		header('Cache-Control: max-age=0');
		// If you're serving to IE 9, then the following may be needed
		header('Cache-Control: max-age=1');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	
	/*Manpower*/

	public function manpower($year = null){
		$info = $this->_require_login();

		if($year == null){
			$year = $this->_active_year();
		}

		$data['year'] = $year;
		$data['title'] = 'Manpower';
		$join_manpower = array(
			'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.manpower_status = 1 AND a.manpower_year = ' . $year,
			'company_unit_tbl c' => 'b.company_unit_id = c.company_unit_id',
			'rank_tbl d' => 'a.rank_id = d.rank_id'
		);

		$select = '*,

		(
			IF(
				b.cost_center_type_id != 9, (SELECT x.bc_name FROM bc_tbl x WHERE b.bc_id = x.bc_id), ""
			)
		)as bc';

		$data['manpower'] = $this->admin->get_join('manpower_tbl a', $join_manpower, FALSE, FALSE, FALSE, $select);
		
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_status' => 1));
		$data['unit'] = $this->admin->get_data('company_unit_tbl', array('company_unit_status' => 1));
		$data['rank'] = $this->admin->get_data('rank_tbl', array('rank_status' => 1));
		$data['content'] = $this->load->view('admin/admin_manpower_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function get_manpower_bc_cost_center(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$bc = decode($this->input->post('bc'));

			$where = array('bc_id' => $bc , 'cost_center_type_id' => 7, 'cost_center_status' => 1);
			$get_cost_center = $this->admin->get_data('cost_center_tbl', $where);
			$cost_center_data = '<option value="">Select...</option>';
			foreach($get_cost_center as $row){
				$cost_center_data .= '<option value="' . encode($row->cost_center_id) . '">' . $row->cost_center_desc . '</option>';
			}

			$data['result'] = 1;
			$data['info'] = $cost_center_data;
			
			echo json_encode($data);
		}
	}

	public function get_manpower_sc_cost_center(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$unit = decode($this->input->post('unit'));

			$where = 'company_unit_id =' . $unit . ' AND cost_center_type_id IN(2, 9) AND cost_center_status = 1';
			$get_cost_center = $this->admin->get_data('cost_center_tbl', $where);
			$cost_center_data = '<option value="">Select...</option>';
			foreach($get_cost_center as $row){
				$cost_center_data .= '<option value="' . encode($row->cost_center_id) . '">' . $row->cost_center_code . ' - ' . $row->cost_center_desc . '</option>';
			}

			$data['result'] = 1;
			$data['info'] = $cost_center_data;
			
			echo json_encode($data);
		}
	}

	public function add_manpower(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$cost_center = decode(clean_data($this->input->post('cost_center')));
			$old = clean_data($this->input->post('old'));
			$new = clean_data($this->input->post('new'));
			$year = clean_data($this->input->post('year'));
			$rank = decode(clean_data($this->input->post('rank')));
			$position = clean_data($this->input->post('position'));
			$remarks = clean_data($this->input->post('remarks'));
			$bc_old = clean_data($this->input->post('bc-old'));
			$bc_new = clean_data($this->input->post('bc-new'));

			if(!empty($cost_center) && !empty($year) && !empty($rank) && !empty($position)){

				$check_code = $this->admin->check_data('cost_center_tbl', array('cost_center_id' =>  $cost_center));
				if($check_code == TRUE){

					$check_rank = $this->admin->check_data('rank_tbl', array('rank_id' => $rank, 'rank_status' => 1));
					if($check_rank == TRUE){
						$set = array(
							'cost_center_id' => $cost_center,
							'rank_id' => $rank,
							'user_id' => $user_id,
							'manpower_position' => $position,
							'manpower_year' => $year,
							'manpower_old' => $old,
							'manpower_new' => $new,
							'manpower_bc_old' => $bc_old,
							'manpower_bc_new' => $bc_new,
							'manpower_added' => date_now(),
							'manpower_status' => 1,
							'manpower_remarks' => $remarks
						);
						$result = $this->admin->insert_data('manpower_tbl', $set);
						
						if($result == TRUE){
							$msg = '<div class="alert alert-success">Manpower successfully added.</div>';
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
						
					}else{
						$msg = '<div class="alert alert-danger">Error Manpower already exist.</div>';
					}
				
				}else{
					$msg = '<div class="alert alert-danger">Error Cost Center not exist.</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect($_SERVER['HTTP_REFERER']);
		}else{
			redirect('admin');
		}
	}

	public function modal_manpower(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$manpower_id = decode(clean_data($this->input->post('id')));

			$join = array(
				'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.manpower_id = ' . $manpower_id
			);

			$check_manpower = $this->admin->check_join('manpower_tbl a', $join, TRUE);


			if($check_manpower['result'] == TRUE){
				$cost_center = $check_manpower['info']->cost_center_desc;
				$manpower_position = $check_manpower['info']->manpower_position;
				$manpower_old = $check_manpower['info']->manpower_old;
				$manpower_new = $check_manpower['info']->manpower_new;
				$manpower_bc_old = $check_manpower['info']->manpower_bc_old;
				$manpower_bc_new = $check_manpower['info']->manpower_bc_new;
				$rank_id = $check_manpower['info']->rank_id;
				$remarks = $check_manpower['info']->manpower_remarks;

				$get_rank = $this->admin->get_data('rank_tbl', array('rank_status' => 1));
				$rank_data = '<option value="">Select Rank...</option>';

				foreach($get_rank as $row_rank){

					if($rank_id == $row_rank->rank_id){
						$rank_data .= '<option value="' . encode($row_rank->rank_id) . '" selected>' . $row_rank->rank_name . '</option>';
					}else{
						$rank_data .= '<option value="' . encode($row_rank->rank_id) . '">' . $row_rank->rank_name . '</option>';
					}
				}

				$data['result'] = 1;
				$data['info'] = array(
					'cost_center' => $cost_center,
					'manpower_position' => $manpower_position,
					'manpower_old' => $manpower_old,
					'manpower_new' => $manpower_new,
					'manpower_bc_old' => $manpower_bc_old,
					'manpower_bc_new' => $manpower_bc_new,
					'rank' => $rank_data,
					'manpower_remarks' => $remarks
				);

				
			}else{
				$data['result'] = 0;
			}

			echo json_encode($data);
		}
	}

	public function update_manpower(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode(clean_data($this->input->post('id')));
			$rank = decode(clean_data($this->input->post('rank')));
			$old = clean_data($this->input->post('old'));
			$new = clean_data($this->input->post('new'));
			$bc_old = clean_data($this->input->post('bc-old'));
			$bc_new = clean_data($this->input->post('bc-new'));
			$position = clean_data($this->input->post('position'));
			$remarks = clean_data($this->input->post('remarks'));

			if(!empty($id) && !empty($old) && !empty($rank) && !empty($position)){
				$check_manpower = $this->admin->check_data('manpower_tbl', array('manpower_id' => $id, 'manpower_status' => 1));
				if($check_manpower == TRUE){

					$set = array(
						'rank_id' => $rank,
						'manpower_position' => $position,
						'manpower_old' => $old,
						'manpower_new' => $new,
						'manpower_bc_old' => $bc_old,
						'manpower_bc_new' => $bc_new,
						'manpower_remarks' => $remarks,
					);
					
					$where = array('manpower_id' => $id);
					$result = $this->admin->update_data('manpower_tbl', $set, $where);
					
					if($result == TRUE){
						$msg = '<div class="alert alert-success">Manpower successfully updated.</div>';
					}else{
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}
					
				}else{
					$msg = '<div class="alert alert-danger">Error Manpower not exist.</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect($_SERVER['HTTP_REFERER']);
		}else{
			redirect('admin');
		}
	}

	public function remove_manpower(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode(clean_data($this->input->post('id')));

			if(!empty($id)){
				$check_manpower = $this->admin->check_data('manpower_tbl', array('manpower_id' => $id, 'manpower_status' => 1));
				if($check_manpower == TRUE){

					$set = array('manpower_status' => 0);
					$where = array('manpower_id' => $id);
					$result = $this->admin->update_data('manpower_tbl', $set, $where);
					
					if($result == TRUE){
						$msg = '<div class="alert alert-success">Manpower successfully removed.</div>';
					}else{
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}
					
				}else{
					$msg = '<div class="alert alert-danger">Error Manpower not exist.</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect($_SERVER['HTTP_REFERER']);
		}else{
			redirect('admin');
		}
	}


	/*ALW*/

	public function live_alw($year = null){
		$info = $this->_require_login();
		$data['title'] = 'ALW for Live Sales';
		
		if($year == null){
			$year = $this->_active_year();
		}

		$data['year'] = $year;

		$join_alw = array(
			'bc_tbl b' => 'b.bc_id = a.bc_id AND a.sales_live_alw_status = 1 AND a.sales_live_alw_year = ' . $year
		);

		$data['alw'] = $this->admin->get_join('sales_live_alw_tbl a', $join_alw, FALSE, FALSE, FALSE, '*, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 1) as alw_jan, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 2) as alw_feb, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 3) as alw_mar, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 4) as alw_apr, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 5) as alw_may, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 6) as alw_jun, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 7) as alw_jul, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 8) as alw_aug, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 9) as alw_sep, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 10) as alw_oct, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 11) as alw_nov, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 12) as alw_dec,');

		$where_bc = 'bc_id NOT IN(SELECT bc_id FROM sales_live_alw_tbl WHERE sales_live_alw_year = ' . $year . ' AND sales_live_alw_status = 1) AND bc_status = 1';
		$data['bc'] = $this->admin->get_data('bc_tbl', $where_bc);
		$data['content'] = $this->load->view('admin/admin_live_alw', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function add_live_alw(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$year = $this->_active_year();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$bc = decode(clean_data($this->input->post('bc')));
			$jan = clean_data($this->input->post('jan_qty'));
			$feb = clean_data($this->input->post('feb_qty'));
			$mar = clean_data($this->input->post('mar_qty'));
			$apr = clean_data($this->input->post('apr_qty'));
			$may = clean_data($this->input->post('may_qty'));
			$jun = clean_data($this->input->post('jun_qty'));
			$jul = clean_data($this->input->post('jul_qty'));
			$aug = clean_data($this->input->post('aug_qty'));
			$sep = clean_data($this->input->post('sep_qty'));
			$oct = clean_data($this->input->post('oct_qty'));
			$nov = clean_data($this->input->post('nov_qty'));
			$dec = clean_data($this->input->post('dec_qty'));

			
			if(!empty($bc) && !empty($jan) && !empty($feb) && !empty($mar) && !empty($apr) && !empty($may) && !empty($jun) && !empty($jul) && !empty($aug) && !empty($sep) && !empty($oct) && !empty($nov) && !empty($dec)){
				$check_bc = $this->admin->check_data('bc_tbl', array('bc_id' =>  $bc));
				if($check_bc == TRUE){

					$check_alw = $this->admin->check_data('sales_live_alw_tbl', array('bc_id' => $bc, 'sales_live_alw_year' => $year, 'sales_live_alw_status' => 1));

					if($check_alw == FALSE){
						$this->db->trans_start();
						$set = array(
							'bc_id' => $bc,
							'user_id' => $user_id,
							'sales_live_alw_year' => $year,
							'sales_live_alw_added' => date_now(),
							'sales_live_alw_status' => 1,
						);
						$insert_trans_alw = $this->admin->insert_data('sales_live_alw_tbl', $set, TRUE);
						
						$id = $insert_trans_alw['id'];

						$date = $year . '-01-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $jan,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-02-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $feb,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-03-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $mar,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-04-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $apr,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-05-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $may,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-06-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $jun,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-07-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $jul,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-08-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $aug,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-09-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $sep,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);



						$date = $year . '-10-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $oct,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);



						$date = $year . '-11-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $nov,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-12-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $dec,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);

						if($this->db->trans_status() === FALSE){
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}else{
							$this->db->trans_commit();
							$msg = '<div class="alert alert-success"><strong>ALW for live sales successfully added.</strong></div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">ALW already exist.</div>';
					}

				}else{
					$msg = '<div class="alert alert-danger">Error in cost center.</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/live-alw');
		}else{
			redirect('admin');
		}
	}

	public function get_alw(){
		$id = decode($this->input->post('id'));
		$check_id = $this->admin->check_data('sales_live_alw_tbl', array('sales_live_alw_id' => $id));
		if($check_id == TRUE){

			$join_alw = array(
				'bc_tbl b' => 'b.bc_id = a.bc_id AND a.sales_live_alw_status = 1 AND a.sales_live_alw_id = ' . $id
			);

			$alw = $this->admin->get_join('sales_live_alw_tbl a', $join_alw, TRUE, FALSE, FALSE, '*, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 1) as alw_jan, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 2) as alw_feb, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 3) as alw_mar, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 4) as alw_apr, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 5) as alw_may, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 6) as alw_jun, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 7) as alw_jul, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 8) as alw_aug, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 9) as alw_sep, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 10) as alw_oct, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 11) as alw_nov, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 12) as alw_dec,');

			$data['result'] = 1;
			$data['info'] = $alw;
		
			echo json_encode($data);
		}
	}

	public function update_live_alw(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$year = $this->_active_year();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode(clean_data($this->input->post('id')));
			$jan = clean_data($this->input->post('jan_qty'));
			$feb = clean_data($this->input->post('feb_qty'));
			$mar = clean_data($this->input->post('mar_qty'));
			$apr = clean_data($this->input->post('apr_qty'));
			$may = clean_data($this->input->post('may_qty'));
			$jun = clean_data($this->input->post('jun_qty'));
			$jul = clean_data($this->input->post('jul_qty'));
			$aug = clean_data($this->input->post('aug_qty'));
			$sep = clean_data($this->input->post('sep_qty'));
			$oct = clean_data($this->input->post('oct_qty'));
			$nov = clean_data($this->input->post('nov_qty'));
			$dec = clean_data($this->input->post('dec_qty'));

			
			if(!empty($id) && !empty($jan) && !empty($feb) && !empty($mar) && !empty($apr) && !empty($may) && !empty($jun) && !empty($jul) && !empty($aug) && !empty($sep) && !empty($oct) && !empty($nov) && !empty($dec)){
				$check_id = $this->admin->check_data('sales_live_alw_tbl', array('sales_live_alw_id' =>  $id , 'sales_live_alw_status' => 1));
				if($check_id == TRUE){

					$this->db->trans_start();
			
					$set_details = array(
						'sales_live_alw_det_value' => $jan
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 1,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $feb
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 2,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $mar
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 3,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);
					

					$set_details = array(
						'sales_live_alw_det_value' => $apr
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 4,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $may
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 5,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $jun
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 6,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $jul
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 7,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $aug
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 8,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $sep
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 9,
						'sales_live_alw_det_status' => 1
					);
					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $oct
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 10,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $nov
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 11,
						'sales_live_alw_det_status' => 1
					);
					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $dec
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 12,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);

					if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success"><strong>ALW for live sales successfully added.</strong></div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error in cost center.</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/live-alw');
		}else{
			redirect('admin');
		}
	}

	public function cancel_live_alw(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('sales_live_alw_id' => $id);
			$check_id = $this->admin->check_data('sales_live_alw_tbl a', $where);
			if($check_id == TRUE){
				$set = array('sales_live_alw_status' => 0);
				$remove_opex = $this->admin->update_data('sales_live_alw_tbl', $set, $where);
				
				if($remove_opex == TRUE){
					$msg = '<div class="alert alert-success">ALW for Live Sales successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('admin/live-alw');
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/live-alw');
			}
		}
	}

	public function download_alw($year){
		$info = $this->_require_login();

		$join_alw = array(
			'bc_tbl b' => 'b.bc_id = a.bc_id AND a.sales_live_alw_status = 1 AND a.sales_live_alw_year = ' . $year
		);

		$alw = $this->admin->get_join('sales_live_alw_tbl a', $join_alw, FALSE, FALSE, FALSE, '*, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 1) as alw_jan, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 2) as alw_feb, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 3) as alw_mar, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 4) as alw_apr, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 5) as alw_may, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 6) as alw_jun, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 7) as alw_jul, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 8) as alw_aug, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 9) as alw_sep, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 10) as alw_oct, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 11) as alw_nov, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 12) as alw_dec,');

		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('ALW')
				->setSubject('ALW for Live Sales')
				->setDescription('ALW for Live Sales');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => \PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);


		foreach(range('A','H') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);


		$spreadsheet->getActiveSheet()->getStyle("A1:M1")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A1:M1")->applyFromArray($style_info);
		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Business Center')
				->setCellValue("B1", "Jan-" . $year)
				->setCellValue("C1", "Feb-" . $year)
				->setCellValue("D1", "Mar-" . $year)
				->setCellValue("E1", "Apr-" . $year)
				->setCellValue("F1", "May-" . $year)
				->setCellValue("G1", "Jun-" . $year)
				->setCellValue("H1", "Jul-" . $year)
				->setCellValue("I1", "Aug-" . $year)
				->setCellValue("J1", "Sep-" . $year)
				->setCellValue("K1", "Oct-" . $year)
				->setCellValue("L1", "Nov-" . $year)
				->setCellValue("M1", "Dec-" . $year);
		// Add some data
		$x= 2;
		$count = 0;
		foreach($alw as $row){
			$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A$x",$row->bc_name)
					->setCellValue("B$x",$row->alw_jan)
					->setCellValue("C$x",$row->alw_feb)
					->setCellValue("D$x",$row->alw_mar)
					->setCellValue("E$x",$row->alw_apr)
					->setCellValue("F$x",$row->alw_may)
					->setCellValue("G$x",$row->alw_jun)
					->setCellValue("H$x",$row->alw_jul)
					->setCellValue("I$x",$row->alw_aug)
					->setCellValue("J$x",$row->alw_sep)
					->setCellValue("K$x",$row->alw_oct)
					->setCellValue("L$x",$row->alw_nov)
					->setCellValue("M$x",$row->alw_dec)

					;

			$spreadsheet->getActiveSheet()->getStyle("A$x:M$x")->applyFromArray($style_data);
			$x++;
		}
		
		// Rename worksheet
		$spreadsheet->getActiveSheet()->setTitle('ALW for Live Sales ' . $year);

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);

		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Budgeting - ALW for Live Sales ' . $year . '.xlsx"');
		header('Cache-Control: max-age=0');
		// If you're serving to IE 9, then the following may be needed
		header('Cache-Control: max-age=1');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	
	/*Tactical Price*/

	public function tactical_price(){
		$info = $this->_require_login();
		$data['title'] = 'Tactical Price';

		$data['bc'] = $this->admin->get_data('bc_tbl', 'bc_status=1');
		$data['content'] = $this->load->view('admin/admin_tactical', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function tactical_info($id, $year = null){
		$info = $this->_require_login();
		$data['title'] = 'Tactical Price Info';
		$cost_center_code = decode($id);
		$data['id'] = $id;

		if($year == null){
			$year = $this->_active_year();
		}

		$data['year'] = $year;
		$join_id = array(
			'bc_tbl b' => 'a.cost_center_code = b.cost_center_code AND a.cost_center_code = "' . $cost_center_code .'"'
		);
		$check_id = $this->admin->check_join('cost_center_tbl a', $join_id, TRUE);

		if($check_id['result'] == TRUE){
			$bc_id = $check_id['info']->bc_id;
			$data['bc_name'] = $check_id['info']->bc_name;

			$join_tactical = array(
				'outlet_tbl b' => 'b.outlet_id = a.outlet_id AND a.sales_tactical_status = 1 AND a.sales_tactical_year = ' . $year . ' AND b.bc_id = ' . $bc_id,
				'outlet_brand_tbl c' => 'b.outlet_id = c.outlet_id AND b.outlet_id = c.outlet_id AND c.outlet_brand_status = 1',
				'brand_tbl d' => 'c.brand_id = d.brand_id'
			);

			$data['tactical'] = $this->admin->get_join('sales_tactical_tbl a', $join_tactical);

			$where_brand = 'brand_type_id = 1 AND brand_status = 1';
			$data['brand'] = $this->admin->get_data('brand_tbl', $where_brand);
			$data['bc_id'] = encode($bc_id);
			$data['content'] = $this->load->view('admin/admin_tactical_info', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}else{
			redirect('admin/tactical-price');
		}
	}

	public function get_tactical_price_store(){
		$bc_code = decode($this->input->post('bc'));
		$brand_id = decode($this->input->post('brand'));
		$year = $this->_active_year();
		$join_id = array(
			'outlet_brand_tbl b' => 'a.outlet_id = b.outlet_id AND b.outlet_brand_status = 1',
			'brand_tbl c' => 'b.brand_id = c.brand_id AND c.brand_status = 1',
			'brand_type_tbl d' => 'c.brand_type_id = d.brand_type_id AND d.brand_type_status = 1'
		);

		$where = 'a.outlet_id NOT IN(SELECT x.outlet_id FROM sales_tactical_tbl x WHERE x.sales_tactical_year = ' . $year . ' AND x.sales_tactical_status = 1)  AND a.bc_id = "' . $bc_code .'" AND a.outlet_status_id = 1 AND d.brand_type_name = "RETAIL" AND c.brand_id = ' . $brand_id;
		$get_outlet = $this->admin->get_join('outlet_tbl a', $join_id, FALSE, FALSE, FALSE, FALSE, $where);
		$outlet_data = '<option value="">Select...</option>';
		foreach($get_outlet as $row){
			$outlet_data .= '<option value="' . encode($row->outlet_id) . '">' . $row->outlet_name . ' - ' . $row->ifs_code . '</option>';
		}

		$join_material = array(
			'brand_bc_material_tbl b' => 'a.material_id = b.material_id AND a.material_status = 1 AND b.brand_bc_material_status = 1',
			'brand_bc_tbl c' => 'b.brand_bc_id = c.brand_bc_id AND c.bc_id = ' . $bc_code . ' AND c.brand_bc_year = ' . $year,
			'brand_tbl d' => 'c.brand_id = d.brand_id AND d.brand_id = ' . $brand_id
		);


		$material = $this->admin->get_join('material_tbl a', $join_material);
		$mat_data = '';
		foreach($material as $row_mat){
			$mat_data .= '<tr>' ;
			$mat_data .= '<td><a href="" class="remove-tactical remove"><span class="fa fa-remove"></span></a>&nbsp;&nbsp;&nbsp;<a href="#" class="slider-tactical" data-count="2"><span class="fa fa-sliders"></span></a></td>';
			$mat_data .= '<td><input type="hidden" name="id[]" value="' . encode($row_mat->material_id) . '">' . $row_mat->material_desc . '</td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[jan][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[feb][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[mar][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[apr][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[may][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[jun][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[jul][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[aug][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[sep][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[oct][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[nov][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[dec][]"></div></td>';
		}
		$info = array('outlet' => $outlet_data, 'material' => $mat_data);
		$data['result'] = 1;
		$data['info'] = $info;
		
		echo json_encode($data);
	}

	public function add_tactical_price(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$outlet_id = decode(clean_data($this->input->post('outlet')));
			$material = clean_data($this->input->post('id'));
			$tactical = clean_data($this->input->post('tactical'));
			$year = clean_data($this->input->post('year'));
			
			if(!empty($outlet_id) && !empty($material) && !empty($tactical) && !empty($year)){

				$join_outlet = array(
					'bc_tbl b' => 'a.bc_id = b.bc_id AND a.outlet_status_id = 1 AND a.outlet_id = ' . $outlet_id
				);

				$check_outlet = $this->admin->check_join('outlet_tbl a', $join_outlet, TRUE);
				if($check_outlet['result'] == TRUE){
					$cost_center_code = $check_outlet['info']->cost_center_code;
					$check_tactical = $this->admin->check_data('sales_tactical_tbl', array('outlet_id' => $outlet_id, 'sales_tactical_year' => $year, 'sales_tactical_status' => 1));

					if($check_tactical == FALSE){

						$this->db->trans_start();
						$set = array(
							'outlet_id' => $outlet_id,
							'user_id' => $user_id,
							'sales_tactical_year' => $year,
							'sales_tactical_added' => date_now(),
							'sales_tactical_status' => 1,
						);
						$insert_trans = $this->admin->insert_data('sales_tactical_tbl', $set, TRUE);
						$sales_tactical_id = $insert_trans['id'];

						$count = 0;
						foreach($material as $row_mat){
							$jan = check_num($tactical['jan'][$count]);
							$feb = check_num($tactical['feb'][$count]);
							$mar = check_num($tactical['mar'][$count]);
							$apr = check_num($tactical['apr'][$count]);
							$may = check_num($tactical['may'][$count]);
							$jun = check_num($tactical['jun'][$count]);
							$jul = check_num($tactical['jul'][$count]);
							$aug = check_num($tactical['aug'][$count]);
							$sep = check_num($tactical['sep'][$count]);
							$oct = check_num($tactical['oct'][$count]);
							$nov = check_num($tactical['nov'][$count]);
							$dec = check_num($tactical['dec'][$count]);

							$total = $jan + $feb + $mar + $apr + $may + $jun + $jul + $aug + $sep + $oct + $nov + $dec;
							if($total > 0){
								$material_id = decode($row_mat);
								$check_material = $this->admin->check_data('material_tbl', array('material_id' => $material_id, 'material_status' => 1));
								if($check_material == TRUE){
									$set_item = array(
										'sales_tactical_id' => $sales_tactical_id,
										'material_id' => $material_id,
										'user_id' => $user_id,
										'sales_tactical_item_added' => date_now(),
										'sales_tactical_item_status' => 1
									);


									$insert_item = $this->admin->insert_data('sales_tactical_item_tbl', $set_item, TRUE);
									$sales_tactical_item_id = $insert_item['id'];

									$date = $year . '-01-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $jan,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-02-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $feb,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-03-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $mar,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-04-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $apr,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-05-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $may,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-06-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $jun,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-07-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $jul,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-08-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $aug,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-09-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $sep,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);



									$date = $year . '-10-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $oct,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);



									$date = $year . '-11-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $nov,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-12-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $dec,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);

								}else{
									$this->db->trans_rollback();
									$msg = '<div class="alert alert-danger">Material not exist.</div>';
									redirect('admin/tactical-info/' . encode($cost_center_code));
								}
							}

							$count++;
						}

						if($this->db->trans_status() === FALSE){
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}else{
							$this->db->trans_commit();
							$msg = '<div class="alert alert-success"><strong>Tactical Price successfully added.</strong></div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Outlet tactical price already exist.</div>';
					}

				}else{
					$msg = '<div class="alert alert-danger">Error in outlet.</div>';
				}
				
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/tactical-info/' . encode($cost_center_code));
		}else{
			redirect('admin');
		}
	}

	public function cancel_tactical_price(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$join = array(
				'outlet_tbl b' => ' a.outlet_id = b.outlet_id AND a.sales_tactical_id = ' . $id,
				'bc_tbl c' => 'b.bc_id = c.bc_id', 
			);

			$check_id = $this->admin->check_join('sales_tactical_tbl a', $join, TRUE);
			if($check_id['result'] == TRUE){
				$cost_center = $check_id['info']->cost_center_code;
				$where = array('sales_tactical_id' => $id);
				$set = array('sales_tactical_status' => 0);
				$remove_opex = $this->admin->update_data('sales_tactical_tbl', $set, $where);
				
				if($remove_opex == TRUE){
					$msg = '<div class="alert alert-success">Tactical price successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('admin/tactical-info/' . encode($cost_center));
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/tactical');
			}
		}
	}

	public function get_tactical(){
		$id = decode($this->input->post('id'));
		$check_id = $this->admin->check_data('sales_tactical_item_tbl', array('sales_tactical_item_id' => $id));
		if($check_id == TRUE){

			$join_tactical = array(
				'sales_tactical_item_tbl b' => 'b.sales_tactical_id = a.sales_tactical_id AND a.sales_tactical_status = 1 AND b.sales_tactical_item_status = 1 AND b.sales_tactical_item_id = ' . $id,
				'material_tbl c' => 'b.material_id = c.material_id',
				'outlet_tbl d' => 'a.outlet_id = d.outlet_id'
			);

			$tactical = $this->admin->get_join('sales_tactical_tbl a', $join_tactical, TRUE, FALSE, FALSE, 'c.material_desc as material, d.outlet_name as outlet, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 1) as tactical_jan, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 2) as tactical_feb, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 3) as tactical_mar, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 4) as tactical_apr, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 5) as tactical_may, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 6) as tactical_jun, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 7) as tactical_jul, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 8) as tactical_aug, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 9) as tactical_sep, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 10) as tactical_oct, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 11) as tactical_nov, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 12) as tactical_dec');

			$data['result'] = 1;
			$data['info'] = $tactical;
		
			echo json_encode($data);
		}
	}

	public function tactical_view($id){
		$info = $this->_require_login();
		$data['title'] = 'View Tactical Price';
		$tactical_id = decode($id);

		$join_id = array(
			'outlet_tbl b' => 'b.outlet_id = a.outlet_id AND a.sales_tactical_status = 1 AND a.sales_tactical_id = ' . $tactical_id,
			'outlet_brand_tbl c' => 'b.outlet_id = c.outlet_id AND b.outlet_id = c.outlet_id AND c.outlet_brand_status = 1',
			'brand_tbl d' => 'c.brand_id = d.brand_id',
			'bc_tbl e' => 'b.bc_id = e.bc_id',
		);
		$check_id = $this->admin->check_join('sales_tactical_tbl a', $join_id, TRUE);

		if($check_id['result'] == TRUE){
			$bc_id = $check_id['info']->bc_id;
			$data['bc_name'] = $check_id['info']->bc_name;
			$data['cost_center_code'] = encode($check_id['info']->cost_center_code);
			$data['outlet_name'] = $check_id['info']->outlet_name;
			$year = $this->_active_year();
			$join_tactical = array(
				'sales_tactical_item_tbl b' => 'b.sales_tactical_id = a.sales_tactical_id AND a.sales_tactical_status = 1 AND b.sales_tactical_item_status = 1 AND a.sales_tactical_id = ' . $tactical_id,
				'material_tbl c' => 'b.material_id = c.material_id'
			);

			$data['details'] = $this->admin->get_join('sales_tactical_tbl a', $join_tactical, FALSE, FALSE, FALSE, '*, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 1) as tactical_jan, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 2) as tactical_feb, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 3) as tactical_mar, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 4) as tactical_apr, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 5) as tactical_may,  (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 6) as tactical_jun, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 7) as tactical_jul, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 8) as tactical_aug, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 9) as tactical_sep, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 10) as tactical_oct, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 11) as tactical_nov, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 12) as tactical_dec, ');

			$where_brand = 'brand_type_id = 1 AND brand_status = 1';
			$data['brand'] = $this->admin->get_data('brand_tbl', $where_brand);
			$data['bc_id'] = encode($bc_id);
			$data['content'] = $this->load->view('admin/admin_tactical_view', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}else{
			redirect('admin/tactical-price');
		}
	}

	public function update_tactical_price(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$year = $this->_active_year();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode(clean_data($this->input->post('id')));
			$jan = check_num(clean_data($this->input->post('jan_qty')));
			$feb = check_num(clean_data($this->input->post('feb_qty')));
			$mar = check_num(clean_data($this->input->post('mar_qty')));
			$apr = check_num(clean_data($this->input->post('apr_qty')));
			$may = check_num(clean_data($this->input->post('may_qty')));
			$jun = check_num(clean_data($this->input->post('jun_qty')));
			$jul = check_num(clean_data($this->input->post('jul_qty')));
			$aug = check_num(clean_data($this->input->post('aug_qty')));
			$sep = check_num(clean_data($this->input->post('sep_qty')));
			$oct = check_num(clean_data($this->input->post('oct_qty')));
			$nov = check_num(clean_data($this->input->post('nov_qty')));
			$dec = check_num(clean_data($this->input->post('dec_qty')));

			
			if(!empty($id) && !empty($jan) && !empty($feb) && !empty($mar) && !empty($apr) && !empty($may) && !empty($jun) && !empty($jul) && !empty($aug) && !empty($sep) && !empty($oct) && !empty($nov) && !empty($dec)){
				$check_id = $this->admin->check_data('sales_tactical_item_tbl', array('sales_tactical_item_id' =>  $id , 'sales_tactical_item_status' => 1), TRUE);
				if($check_id['result'] == TRUE){
					$tactical_id = $check_id['info']->sales_tactical_id;
					$this->db->trans_start();
			
					$set_details = array(
						'sales_tactical_det_price' => $jan
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 1,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $feb
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 2,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);					


					$set_details = array(
						'sales_tactical_det_price' => $mar
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 3,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);
					

					$set_details = array(
						'sales_tactical_det_price' => $apr
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 4,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $may
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 5,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $jun
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 6,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $jul
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 7,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $aug
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 8,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $sep
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 9,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $oct
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 10,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $nov
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 11,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $dec
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 12,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);

					if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success"><strong>Tactical price successfully updated.</strong></div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error in cost center.</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('admin/tactical-view/' . encode($tactical_id));
		}else{
			redirect('admin');
		}
	}

	public function cancel_tactical_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$join = array(
				'sales_tactical_tbl b' => ' a.sales_tactical_id = b.sales_tactical_id AND a.sales_tactical_item_id = ' . $id
			);

			$check_id = $this->admin->check_join('sales_tactical_item_tbl a', $join, TRUE);
			if($check_id['result'] == TRUE){
				$tactical_id = $check_id['info']->sales_tactical_id;
				$where = array('sales_tactical_item_id' => $id);
				$set = array('sales_tactical_item_status' => 0);
				$remove_item = $this->admin->update_data('sales_tactical_item_tbl', $set, $where);
				
				if($remove_item == TRUE){
					$msg = '<div class="alert alert-success">Tactical item successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('admin/tactical-view/' . encode($tactical_id));
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/tactical-price');
			}
		}
	}

	public function download_tactical($id, $year){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$bc_id = decode($id);
		$check_bc = $this->admin->check_data('bc_tbl', array('bc_id' => $bc_id, 'bc_status' => 1), TRUE);

		if($check_bc['result'] == TRUE){
			$bc_name = $check_bc['info']->bc_name;

			$this->load->library('excel');

			$spreadsheet = $this->excel;
			$spreadsheet->getProperties()->setCreator('BAVI')
					->setLastModifiedBy('Budgeting System')
					->setTitle('Tactical Price')
					->setSubject('Tactical Price')
					->setDescription('Tactical Price');

			
			$styleArray = array(
					'font' 	=> array(
							'bold' => true,
					),
					'alignment' => array(
							'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
							'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
					),
					'borders' => array(
							'top' => array(
									'style' => PHPExcel_Style_Border::BORDER_THIN,
							),
					),
					'fill' => array(
							'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
							'rotation' => 90,
							'startcolor' => array(
									'argb' => 'FFA0A0A0',
							),
							'endcolor' => array(
									'argb' => 'FFFFFFFF',
							),
					),
			);

			foreach(range('A','B') as $columnID) {
				$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
						->setAutoSize(true);
			}

			$style_center = array(
				'font' => array(
					'bold' => true,
					'size' => 20
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				)
			);

			$style_info =  array(
				'font' => array(
					'bold' => true
				)
			);

			$style_border = array(
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				)
			);

			$style_data = array(
				'font' => array(
					'bold' => true
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
				),
			);

			$style_out = array(
				'font' => array(
					'bold' => true,
					'color' => array('rgb' => 'FF0000')
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
				),
			);

			$style_material = array(
				'font' => array(
					'bold' => true
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				)
			);

			$style_mat_code= array(
				'font' => array(
					'bold' => true
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				)
			);

			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Outlet Code')
				->setCellValue("B1", 'IFS Code')
				->setCellValue("C1", 'Business Center')
				->setCellValue("D1", 'Material Code')
				->setCellValue("E1", 'Material Description')


				->setCellValue("F1", 'Jan-' . $year)
				->setCellValue("G1", 'Feb-' . $year)
				->setCellValue("H1", 'Mar-' . $year)
				->setCellValue("I1", 'Apr-' . $year)
				->setCellValue("J1", 'May-' . $year)
				->setCellValue("K1", 'Jun-' . $year)
				->setCellValue("L1", 'Jul-' . $year)
				->setCellValue("M1", 'Aug-' . $year)
				->setCellValue("N1", 'Sep-' . $year)
				->setCellValue("O1", 'Oct-' . $year)
				->setCellValue("P1", 'Nov-' . $year)
				->setCellValue("Q1", 'Dec-' . $year);

			$spreadsheet->getActiveSheet()->getStyle("A1:Q1")->applyFromArray($style_info);
			$spreadsheet->getActiveSheet()->getStyle("A1:Q1")->applyFromArray($style_border);

			$join_tactical = array(
				'sales_tactical_item_tbl b' => 'b.sales_tactical_id = a.sales_tactical_id AND a.sales_tactical_status = 1 AND b.sales_tactical_item_status = 1 AND a.sales_tactical_year = ' . $year,
				'material_tbl c' => 'b.material_id = c.material_id',
				'outlet_tbl d' => 'a.outlet_id = d.outlet_id AND d.bc_id = ' . $bc_id,
			);

			$get_tactical = $this->admin->get_join('sales_tactical_tbl a', $join_tactical, FALSE, FALSE, FALSE, '*, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 1) as tactical_jan,

				(SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 2) as tactical_feb,

				(SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 3) as tactical_mar,

				(SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 4) as tactical_apr,

				(SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 5) as tactical_may,
				
				(SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 6) as tactical_jun, 

				(SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 7) as tactical_jul, 

				(SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 8) as tactical_aug, 

				(SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 9) as tactical_sep, 

				(SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 10) as tactical_oct, 

				(SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 11) as tactical_nov, 

				(SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 12) as tactical_dec');
			$start = 2;
			$count = 0;
			foreach($get_tactical as $row){
								
				$spreadsheet->setActiveSheetIndex(0)
					->setCellValue('A' . $start, $row->ifs_code)
					->setCellValue('B' . $start, $row->outlet_name)
					->setCellValue('C' . $start, $bc_name)
					->setCellValue('D' . $start, $row->material_code)
					->setCellValue('E' . $start, $row->material_desc)
					->setCellValue('F' . $start, $row->tactical_jan)
					->setCellValue('G' . $start, $row->tactical_feb)
					->setCellValue('H' . $start, $row->tactical_mar)
					->setCellValue('I' . $start, $row->tactical_apr)
					->setCellValue('J' . $start, $row->tactical_may)
					->setCellValue('K' . $start, $row->tactical_jun)
					->setCellValue('L' . $start, $row->tactical_jul)
					->setCellValue('M' . $start, $row->tactical_aug)
					->setCellValue('N' . $start, $row->tactical_sep)
					->setCellValue('O' . $start, $row->tactical_oct)
					->setCellValue('P' . $start, $row->tactical_nov)
					->setCellValue('Q' . $start, $row->tactical_dec)
					;

				$start++;
			}

			$spreadsheet->getActiveSheet()->getStyle("A2:Q" . ($start-1))->applyFromArray($style_border);

			foreach(range('A','Q') as $columnID) {
				$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
						->setAutoSize(true);
			}

			$spreadsheet->getActiveSheet()->setTitle('Tactical Price ' . $year);

			// set right to left direction
			//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

			// Set active sheet index to the first sheet, so Excel opens this as the first sheet
			$spreadsheet->setActiveSheetIndex(0);
			ob_end_clean();
			ob_start();
			// Redirect output to a client’s web browser (Excel2007)
			header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
			header('Content-Disposition: attachment;filename="Budgeting - Tactical Price ' . $year . '.xlsx"');
			header('Cache-Control: max-age=0');

			// If you're serving to IE over SSL, then the following may be needed
			header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
			header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
			header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
			header('Pragma: public'); // HTTP/1.0

			$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
			$writer->save('php://output');
			exit;
		}else{
			echo 'Error Business Center not exist!';
			exit;
		}
	}

	public function get_comparative_capex(){
		$info = $this->_require_login();

		$data['title'] = 'View Comparative CAPEX';
		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id',
			'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id',
			'company_unit_tbl d' => 'a.company_unit_id = d.company_unit_id',
			'asset_group_tbl e' => 'a.ag_id = e.ag_id'
		);
		$data['comparative'] = $this->admin->get_join('comparative_capex_tbl a', $join, FALSE,'c.cost_center_desc ASC', 'a.ag_id','e.ag_name, sum(a.jan + a.feb + a.mar + a.apr + a.may + a.jun + a.jul + a.aug + a.sep + a.oct + a.nov + a.dec) as total');
		echo "<pre>";
		print_r($data['comparative']);
		echo "</pre>";
	}

	public function config_material($id){
		$info = $this->_require_login_ahg();

		$data['title'] = 'View Material Config';
		$data['id'] = $id;
		$material_id = decode($id);
		$data['content'] = $this->load->view('admin/admin_material_config_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function get_live_sales($bc_id, $year){
		$info = $this->_require_login_prod();
		$sql = "SELECT
				IFNULL(SUM(c.sales_det_qty), 0) as live_sales_qty, 

				IFNULL((
				SELECT y.sales_live_alw_det_value
				FROM sales_live_alw_tbl x, sales_live_alw_detail_tbl y
				WHERE x.sales_live_alw_id = y.sales_live_alw_id AND x.sales_live_alw_status = 1 AND y.sales_live_alw_det_status = 1
				AND x.bc_id = f.bc_id AND y.sales_live_alw_det_date = c.sales_det_date),0
				) as alw_live

				FROM sales_tbl a, sales_item_tbl b, sales_details_tbl c, material_tbl d, outlet_tbl e, bc_tbl f
				WHERE a.sales_id = b.sales_id AND b.sales_item_id = c.sales_item_id AND b.material_id = d.material_id AND a.outlet_id = e.outlet_id AND e.bc_id = f.bc_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND c.sales_det_status = 1 AND YEAR(c.sales_det_date) = ".$year." AND f.bc_id = ".$bc_id." AND d.material_desc = 'LIVE BROILER' GROUP BY YEAR(c.sales_det_date), MONTH(c.sales_det_date) ORDER BY MONTH(c.sales_det_date)";

		return $this->admin->get_query($sql);
	}

	
	/*Upload function*/

	public function upload_uom(){
		$info = $this->_require_login();
		
		$this->load->library('excel');
		ini_set('max_execution_time', 0);
		ini_set('memory_limit','2048M');
		$date = $this->input->post('date');

		$file   = './assets/uom.xlsx';
	   
    	//$this->db->trans_start();
    	
       
		$objPHPExcel = PHPExcel_IOFactory::load($file);
		//get only the Cell Collection
		$cell_collection = $objPHPExcel->getActiveSheet()->getCellCollection();
	
		$high = $objPHPExcel->getActiveSheet()->getHighestRow();
		for($a = 2; $a <= $high; $a++){
			$um_name = $objPHPExcel->getActiveSheet()->getCell('A' . $a)->getValue();
			
			$set = array(
				'um_name' => $um_name
			);

			$this->admin->insert_data('um_tbl', $set);
		}
		
	}

	public function upload_cost_center(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$this->load->library('excel');
			ini_set('max_execution_time', 0); 
			ini_set('memory_limit','2048M');
			$path = 'assets/Production-Config-items/';
			if (!is_dir($path)) {
			    mkdir($path, 0777, TRUE);
			}

			$temp_code = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 10);

			$config['upload_path']   = $path;
	        $config['allowed_types'] = 'xls|xlsx|xlsb';
	        $config['file_name'] = 'tmp_' . $temp_code;
	        $this->load->library('upload', $config);

			if (! $this->upload->do_upload('prod_config_file')) {
	            $error = array('error' => $this->upload->display_errors());
	            $msg = $this->upload->display_errors();
	            $this->session->set_flashdata('message', $msg);
	            redirect($_SERVER['HTTP_REFERER']);
	        }else{

				$data = array('upload_data' => $this->upload->data());
		        $file_name = $data['upload_data']['file_name'];
				$file = $path . $file_name;
				
				$this->db->trans_start();
			
				$objPHPExcel = PHPExcel_IOFactory::load($file);
				//get only the Cell Collection
				$cell_collection = $objPHPExcel->getActiveSheet()->getCellCollection();
			
				$high = $objPHPExcel->getActiveSheet()->getHighestRow();
	
				$exist_count = 0;
				$success_count = 0;
				$update_count = 0;

				$msg_cost_type = '';
				$msg_cost_center_found = '';
				$msg_parent_cost_center = '';
				$msg_allocation = '';
				for($a = 2; $a <= $high; $a++){
					$bc = $objPHPExcel->getActiveSheet()->getCell('A' . $a)->getValue();
					$cost_center_code = $objPHPExcel->getActiveSheet()->getCell('B' . $a)->getValue();
					$cost_center_desc = $objPHPExcel->getActiveSheet()->getCell('C' . $a)->getValue();
					$unit = $objPHPExcel->getActiveSheet()->getCell('D' . $a)->getValue();
					$group = $objPHPExcel->getActiveSheet()->getCell('E' . $a)->getValue();
					$type = $objPHPExcel->getActiveSheet()->getCell('F' . $a)->getValue();
					$parent_cost_center_code = $objPHPExcel->getActiveSheet()->getCell('G' . $a)->getValue();
					$allocation = $objPHPExcel->getActiveSheet()->getCell('H' . $a)->getValue();
					
					if(!empty($cost_center_code) && !empty($cost_center_desc) && !empty($type) ){
						$cost_center_id = NULL;
						$check_code = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center_code, 'cost_center_status' => 1), TRUE);
						$cost_center_id = $check_code['result'] ? $check_code['info']->cost_center_id : NULL;
						

						$unit_id = NULL;
						if($unit){
							$check_unit = $this->admin->check_data('company_unit_tbl', array('company_unit_name' => $unit), TRUE);
							$unit_id = $check_unit['result'] ? $check_unit['info']->company_unit_id : NULL;
						}

						$cost_center_type_id = NULL;
						$check_type = $this->admin->check_data('cost_center_type_tbl', array('cost_center_type_name' => $type), TRUE);
						$cost_center_type_id = $check_type['result'] ? $check_type['info']->cost_center_type_id : NULL;
						
						
						$cost_center_group_id = NULL;
						if($group){
							$check_group = $this->admin->check_data('cost_center_group_tbl', array('cost_center_group_name' => $group), TRUE);
							$cost_center_group_id = $check_group['result'] ? $check_group['info']->cost_center_group_id : NULL;
						}
						
						$parent_id = NULL;
						if($parent_cost_center_code){
							$check_parent = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $parent_cost_center_code, 'cost_center_status' => 1), TRUE);
							$parent_id = $check_parent['result'] ? $check_parent['info']->cost_center_id : NULL;
						}

						if($cost_center_type_id != 5){ // NOT MAIN

							if(!$parent_id){
								if($parent_cost_center_code){
									$msg_parent_cost_center .= '<div class="alert alert-danger">Error! parent cost center code ('.$parent_cost_center_code.') does not exist! Line # :' . $a . '!</div>';
								} else {
									$msg_parent_cost_center .= '<div class="alert alert-danger">Error! parent cost center must not be blank! Line # :' . $a . '!</div>';
								}
								goto bottom_cost_center_loop;
							}
						}

						$bc_id = NULL;
						if($bc){
							
							$check_bc = $this->admin->check_data('bc_tbl', array('bc_name' => $bc), TRUE);
							$bc_id = $check_bc['result'] ? $check_bc['info']->bc_id : NULL;
						}
							
						if($cost_center_type_id){
							
							$set_cost_center = array(
								'bc_id' => $bc_id,
								'company_unit_id' => $unit_id,
								'parent_id' => $parent_id,
								'user_id' => $user_id,
								'cost_center_group_id' => $cost_center_group_id,
								'cost_center_type_id' => $cost_center_type_id,
								'cost_center_code' => $cost_center_code,
								'cost_center_desc' => strtoupper($cost_center_desc),
								'cost_center_added' => date_now(),
								'cost_center_status' => 1
							);
							
							if($cost_center_id){
								$where = array('cost_center_id'=>$cost_center_id);
								$insert_cost_center = $this->admin->update_data('cost_center_tbl', $set_cost_center, $where);
								
								$update_count++;
							} else {
								$insert_cost_center = $this->admin->insert_data('cost_center_tbl', $set_cost_center, TRUE);
								$cost_center_id = $insert_cost_center['id'];
								

								$success_count++;
							}

							$set_remove_allocation = array('cost_center_allocation_status' => 0);
							$where_remove_allocation = array('cost_center_id' => $cost_center_id);
							$this->admin->update_data('cost_center_allocation_tbl', $set_remove_allocation, $where_remove_allocation);

							$split_allocation = explode(',', $allocation);
							foreach($split_allocation as $row_allocation){
								$allocation_type_name = trim($row_allocation);
								
								$check_allocation = $this->admin->check_data('allocation_type_tbl', array('allocation_type_name' => $allocation_type_name, 'allocation_type_status' => 1), TRUE);
								$allocation_type_id = $check_allocation['result'] ? $check_allocation['info']->allocation_type_id : NULL;

								if(!$allocation_type_id){
									if($allocation_type_name){
										$msg_allocation .= '<div class="alert alert-danger">Error! allocation type ('.$allocation_type_name.') does not exist! Line # :' . $a . '!</div>';
									}
								} else {
									$set_allocation = array(
										'cost_center_id' => $cost_center_id,
										'allocation_type_id' => $allocation_type_id,
										'user_id' => $user_id,
										'cost_center_allocation_added' => date_now(),
										'cost_center_allocation_status' => 1
									);

									$insert_allocation = $this->admin->insert_data('cost_center_allocation_tbl', $set_allocation);
								}

							}

							

						} else {
							$msg_cost_type .= '<div class="alert alert-danger">Error! cost center type ('.$type.') dees not exist! Line # :' . $a . '!</div>';
						}

						bottom_cost_center_loop:
	
						$exist_count++;
					}else{
						$a = $high + 1;
					}
				}
	
				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}else{
					$this->db->trans_commit();
					$msg = '';
					$error_msg = $msg_cost_type.$msg_cost_center_found.$msg_parent_cost_center.$msg_allocation;
					if(!empty($error_msg)){
						$msg .= '<div class="alert alert-danger">'.$error_msg.'</div>';
					}
					if($success_count > 0){
						$msg .= '<div class="alert alert-success">Total of ' . $success_count . ' out of ' . $exist_count . ' cost centers successfully added!</div>';
					}
					if($update_count > 0){
						$msg .= '<div class="alert alert-success">Total of ' . $update_count . ' out of ' . $exist_count . ' cost centers successfully updated!</div>';
					}
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}
			}
		
		}
		
	}

	public function upload_asset_group(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$this->load->library('excel');
			ini_set('max_execution_time', 0); 
			ini_set('memory_limit','2048M');
			
			$temp_code = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 10);

			$config['upload_path']   = 'assets/Asset subgroup';
	        $config['allowed_types'] = 'xls|xlsx|xlsb';
	        $config['file_name'] = 'tmp_' . $temp_code;
	        $this->load->library('upload', $config);
			
	        if (! $this->upload->do_upload('asset_file')) {
	            $error = array('error' => $this->upload->display_errors());
	            $msg = $this->upload->display_errors();
	            $this->session->set_flashdata('message', $msg);
	            redirect($_SERVER['HTTP_REFERER']);
	        }else{
				$data = array('upload_data' => $this->upload->data());
		        $file_name = $data['upload_data']['file_name'];
				$file = 'assets/Asset subgroup/' . $file_name;

		    	$this->db->trans_start();
		       
				$objPHPExcel = PHPExcel_IOFactory::load($file);
				//get only the Cell Collection
				$cell_collection = $objPHPExcel->getActiveSheet()->getCellCollection();
			
				$high = $objPHPExcel->getActiveSheet()->getHighestRow();
				for($a = 2; $a <= $high; $a++){
					$ag_name = $objPHPExcel->getActiveSheet()->getCell('A' . $a)->getValue();
					$asg_name = trim($objPHPExcel->getActiveSheet()->getCell('B' . $a)->getValue());
					$lifespan = $objPHPExcel->getActiveSheet()->getCell('C' . $a)->getValue();
					$asg_price = $objPHPExcel->getActiveSheet()->getCell('D' . $a)->getValue();
					$status = strtoupper($objPHPExcel->getActiveSheet()->getCell('E' . $a)->getValue());
					
					if(!empty($ag_name)){
						$check_name = $this->admin->check_data('asset_group_tbl', array('ag_name' => $ag_name), TRUE);
						if($check_name['result'] == TRUE){
							$ag_id = $check_name['info']->ag_id;
							$check_asg_name = $this->admin->check_data('asset_subgroup_tbl', array('asg_name' => strtoupper($asg_name), 'asg_status' => 1), TRUE);
							if($check_asg_name['result'] == FALSE){
								if($status == 'ACTIVE' || empty($status)){
									$set_asg = array(
										'ag_id' => $ag_id,
										'user_id' => $user_id,
										'asg_name' => strtoupper($asg_name),
										'asg_price' => $asg_price,
										'asg_lifespan' => $lifespan,
										'asg_added' => date_now(),
										'asg_status' => 1
									);
									$insert_asg = $this->admin->insert_data('asset_subgroup_tbl', $set_asg);
								}
							}else{
								$asg_id = $check_asg_name['info']->asg_id;

								if($status == 'ACTIVE' || empty($status)){
									$set_asg = array(
										'asg_price' => $asg_price,
										'asg_lifespan' => $lifespan,
										'asg_status' => 1
									);

									$where_asg = array('asg_id' => $asg_id);
									$update_asg = $this->admin->update_data('asset_subgroup_tbl', $set_asg, $where_asg);
								}elseif($status == 'INACTIVE'){
									$set_asg = array('asg_status' => 0);

									$where_asg = array('asg_id' => $asg_id);
									$update_asg = $this->admin->update_data('asset_subgroup_tbl', $set_asg, $where_asg);
								}
							}
						}else{
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Asset Group not exist line ' . $a . '!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect($_SERVER['HTTP_REFERER']);
						}
					}else{
						$a = $high + 1;
					}
				}

				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success">Asset Group uploaded!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}
			}
		}else{
			redirect($_SERVER['HTTP_REFERER']);
		}
	}

	public function upload_gl_subgroup(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$this->load->library('excel');
			ini_set('max_execution_time', 0); 
			ini_set('memory_limit','2048M');
			
			$temp_code = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 10);

			$config['upload_path']   = 'assets/GL subgroup';
	        $config['allowed_types'] = 'xls|xlsx|xlsb';
	        $config['file_name'] = 'tmp_' . $temp_code;
	        $this->load->library('upload', $config);
			
	        if (! $this->upload->do_upload('gl_file')) {
	            $error = array('error' => $this->upload->display_errors());
	            $msg = $this->upload->display_errors();
	            $this->session->set_flashdata('message', $msg);
	            redirect($_SERVER['HTTP_REFERER']);
	        }else{
				$data = array('upload_data' => $this->upload->data());
		        $file_name = $data['upload_data']['file_name'];
				$file = 'assets/GL subgroup/' . $file_name;
			   
		    	$this->db->trans_start();
		       
				$objPHPExcel = PHPExcel_IOFactory::load($file);
				//get only the Cell Collection
				$cell_collection = $objPHPExcel->getActiveSheet()->getCellCollection();
			
				$high = $objPHPExcel->getActiveSheet()->getHighestRow();
				$success_count = 0;
				$total_count = 0;
				for($a = 2; $a <= $high; $a++){
					$gl_code = $objPHPExcel->getActiveSheet()->getCell('A' . $a)->getValue();
					$gl_sub_name = $objPHPExcel->getActiveSheet()->getCell('B' . $a)->getValue();
					$gl_group_name = $objPHPExcel->getActiveSheet()->getCell('C' . $a)->getValue();
					$gl_status = strtoupper($objPHPExcel->getActiveSheet()->getCell('D' . $a)->getValue());
					$gl_class = strtoupper($objPHPExcel->getActiveSheet()->getCell('E' . $a)->getValue());
					
					if(!empty($gl_code)){
						$check_name = $this->admin->check_data('gl_group_tbl', array('gl_group_name' => $gl_group_name), TRUE);
						if($check_name['result'] == TRUE){
							$gl_group_id = $check_name['info']->gl_group_id;
							$check_sub_name = $this->admin->check_data('gl_subgroup_tbl', array('gl_sub_name' => strtoupper($gl_sub_name), 'gl_group_id' => $gl_group_id), TRUE);
							if($check_sub_name['result'] == FALSE){
								$check_gl_class = $this->admin->check_data('gl_class_tbl', array('gl_class_name' => strtoupper($gl_class), 'gl_class_status' => 1), TRUE);
								if($check_gl_class['result'] == TRUE){
									$gl_class_id = $check_gl_class['info']->gl_class_id;

									$set_gl = array(
										'gl_group_id' => $gl_group_id,
										'gl_class_id' => $gl_class_id,
										'user_id' => $user_id,
										'gl_sub_name' => strtoupper($gl_sub_name),
										'gl_code' => $gl_code,
										'gl_sub_added' => date_now(),
										'gl_sub_status' => 1
									);
									$insert_gl = $this->admin->insert_data('gl_subgroup_tbl', $set_gl);
									$success_count++;
								}else{
									$this->db->trans_rollback();
									$msg = '<div class="alert alert-danger">Error! GL Classification ('.$gl_class.') not exist in line ' . $a . '!</div>';
									$this->session->set_flashdata('message', $msg);
									redirect($_SERVER['HTTP_REFERER']);
								}
							}else{
								$gl_sub_id = $check_sub_name['info']->gl_sub_id;
								if($gl_status == 'INACTIVE'){
									$status = 0;
								}elseif($gl_status == 'ACTIVE' || empty($gl_status)){
									$status = 1;
								}

								$check_gl_class = $this->admin->check_data('gl_class_tbl', array('gl_class_name' => strtoupper($gl_class), 'gl_class_status' => 1), TRUE);
								if($check_gl_class['result'] == TRUE){
									$gl_class_id = $check_gl_class['info']->gl_class_id;

									$set_status = array('gl_sub_status' => $status, 'gl_class_id' => $gl_class_id);
									$where_status = array('gl_sub_id' => $gl_sub_id);
									$update_status = $this->admin->update_data('gl_subgroup_tbl', $set_status, $where_status);
								}else{
									$this->db->trans_rollback();
									$msg = '<div class="alert alert-danger">Error! GL Classification ('.$gl_class.') not exist in line ' . $a . '!</div>';
									$this->session->set_flashdata('message', $msg);
									redirect($_SERVER['HTTP_REFERER']);
								}
							}
						}else{
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error! GL Group ('.$gl_group_name.') not exist in line ' . $a . '!</div>';
							$this->session->set_flashdata('message', $msg);
								redirect($_SERVER['HTTP_REFERER']);
						}
						$total_count++;
					}else{
						$a = $high + 1;
					}
				}

				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success">GL Subgroup uploaded total ' . $success_count . ' out of ' . $total_count . '.</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}
			}
		}else{
			redirect($_SERVER['HTTP_REFERER']);
		}
		
	}


	/*Download function*/

	public function download_sales_templates($id, $brand, $year){

		ini_set('max_execution_time', 0);
		ini_set('memory_limit','4048M');

		$this->load->model('admin_model');
		$info = $this->_require_login();

		$user_id = decode($info['user_id']);
		$bc_id = decode($id);
		$brand_id = decode($brand);
		$check_bc = $this->admin->check_data('bc_tbl', array('bc_id' => $bc_id, 'bc_status' => 1), TRUE);

		if($check_bc['result'] == TRUE){
			$bc_name = $check_bc['info']->bc_name;
			$check_user = $this->admin->check_data('user_tbl', array('user_id' => $user_id), TRUE);
			if($check_user['result'] == TRUE){
				$name = $check_user['info']->user_lname . ', ' . $check_user['info']->user_fname;
				$check_brand = $this->admin->check_data('brand_tbl', array('brand_id' => $brand_id), TRUE);
				if($check_brand['result'] == TRUE){
					$brand_name = $check_brand['info']->brand_name;
				}else{
					exit;
				}

			}else{
				exit;
			}
			
		}else{
			exit;
		}


		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('Sales Templates')
				->setSubject('Sales Module')
				->setDescription('Sales Templates');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);

		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_material = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_mat_code= array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$spreadsheet->getActiveSheet()->getStyle("A1:B4")->applyFromArray($style_info);


		/*$spreadsheet->getActiveSheet()->getStyle("A1:I1")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A1:I1")->applyFromArray($style_info);*/
		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1",'Business Center:')
				->setCellValue("B1",$bc_name)

				->setCellValue("A2","Brand:")
				->setCellValue("B2", $brand_name)

				->setCellValue("A3", "Download Date:")
				->setCellValue("B3", date('m-d-Y'))

				->setCellValue("A4", "User: ")
				->setCellValue("B4", $name);

		$join_outlet = array(
			'outlet_brand_tbl b' => 'a.outlet_id = b.outlet_id AND b.outlet_brand_status = 1',
			'brand_tbl c' => 'b.brand_id = c.brand_id AND c.brand_id = ' . $brand_id,
			'bc_tbl d' => 'a.bc_id = d.bc_id AND d.bc_id = ' . $bc_id,
			'outlet_year_tbl e' => 'a.outlet_id = e.outlet_id AND e.outlet_year_status = 1 AND e.outlet_year = ' . $year

		);

		$get_outlet = $this->admin->get_join('outlet_tbl a', $join_outlet, FALSE, FALSE, FALSE, FALSE, 'a.outlet_id NOT IN (SELECT x.outlet_id FROM sales_tbl x WHERE a.outlet_id = x.outlet_id AND x.sales_status = 1 AND x.sales_year = ' . $year . ')');
		$start = 4;
		$num = 5;
		$count = 0;

		if(!empty($get_outlet)){
			foreach($get_outlet as $row_outlet){
				$column_name = PHPExcel_Cell::stringFromColumnIndex($start) . $num;
				$column_code = PHPExcel_Cell::stringFromColumnIndex($start) . ($num + 1);
				$column_date_jan = PHPExcel_Cell::stringFromColumnIndex($start) . ($num + 2);
				$column_date_feb = PHPExcel_Cell::stringFromColumnIndex($start + 2) . ($num + 2);
				$column_date_mar = PHPExcel_Cell::stringFromColumnIndex($start + 4) . ($num + 2);
				$column_date_apr = PHPExcel_Cell::stringFromColumnIndex($start + 6) . ($num + 2);
				$column_date_may = PHPExcel_Cell::stringFromColumnIndex($start + 8) . ($num + 2);
				$column_date_jun = PHPExcel_Cell::stringFromColumnIndex($start + 10) . ($num + 2);
				$column_date_jul = PHPExcel_Cell::stringFromColumnIndex($start + 12) . ($num + 2);
				$column_date_aug = PHPExcel_Cell::stringFromColumnIndex($start + 14) . ($num + 2);
				$column_date_sep = PHPExcel_Cell::stringFromColumnIndex($start + 16) . ($num + 2);
				$column_date_oct = PHPExcel_Cell::stringFromColumnIndex($start + 18) . ($num + 2);
				$column_date_nov = PHPExcel_Cell::stringFromColumnIndex($start + 20) . ($num + 2);
				$column_date_dec = PHPExcel_Cell::stringFromColumnIndex($start + 22) . ($num + 2);


				$qty_jan = PHPExcel_Cell::stringFromColumnIndex($start) . ($num + 3);
				$asp_jan = PHPExcel_Cell::stringFromColumnIndex($start + 1) . ($num + 3);
				$qty_feb = PHPExcel_Cell::stringFromColumnIndex($start + 2) . ($num + 3);
				$asp_feb = PHPExcel_Cell::stringFromColumnIndex($start + 3) . ($num + 3);
				$qty_mar = PHPExcel_Cell::stringFromColumnIndex($start + 4) . ($num + 3);
				$asp_mar = PHPExcel_Cell::stringFromColumnIndex($start + 5) . ($num + 3);
				$qty_apr = PHPExcel_Cell::stringFromColumnIndex($start + 6) . ($num + 3);
				$asp_apr = PHPExcel_Cell::stringFromColumnIndex($start + 7) . ($num + 3);
				$qty_may = PHPExcel_Cell::stringFromColumnIndex($start + 8) . ($num + 3);
				$asp_may = PHPExcel_Cell::stringFromColumnIndex($start + 9) . ($num + 3);
				$qty_jun = PHPExcel_Cell::stringFromColumnIndex($start + 10) . ($num + 3);
				$asp_jun = PHPExcel_Cell::stringFromColumnIndex($start + 11) . ($num + 3);
				$qty_jul = PHPExcel_Cell::stringFromColumnIndex($start + 12) . ($num + 3);
				$asp_jul = PHPExcel_Cell::stringFromColumnIndex($start + 13) . ($num + 3);
				$qty_aug = PHPExcel_Cell::stringFromColumnIndex($start + 14) . ($num + 3);
				$asp_aug = PHPExcel_Cell::stringFromColumnIndex($start + 15) . ($num + 3);
				$qty_sep = PHPExcel_Cell::stringFromColumnIndex($start + 16) . ($num + 3);
				$asp_sep = PHPExcel_Cell::stringFromColumnIndex($start + 17) . ($num + 3);
				$qty_oct = PHPExcel_Cell::stringFromColumnIndex($start + 18) . ($num + 3);
				$asp_oct = PHPExcel_Cell::stringFromColumnIndex($start + 19) . ($num + 3);
				$qty_nov = PHPExcel_Cell::stringFromColumnIndex($start + 20) . ($num + 3);
				$asp_nov = PHPExcel_Cell::stringFromColumnIndex($start + 21) . ($num + 3);
				$qty_dec = PHPExcel_Cell::stringFromColumnIndex($start + 22) . ($num + 3);
				$asp_dec = PHPExcel_Cell::stringFromColumnIndex($start + 23) . ($num + 3);

				$end_column = $asp_dec;
				$end_letter = PHPExcel_Cell::stringFromColumnIndex($start + 23);
				
				$spreadsheet->setActiveSheetIndex(0)
					->setCellValue($column_name, $row_outlet->outlet_name)
					->setCellValue($column_code, $row_outlet->ifs_code)
					->setCellValue($column_date_jan, 'Jan ' . $year)
					->setCellValue($column_date_feb, 'Feb ' . $year)
					->setCellValue($column_date_mar, 'Mar ' . $year)
					->setCellValue($column_date_apr, 'Apr ' . $year)
					->setCellValue($column_date_may, 'May ' . $year)
					->setCellValue($column_date_jun, 'Jun ' . $year)
					->setCellValue($column_date_jul, 'Jul ' . $year)
					->setCellValue($column_date_aug, 'Aug ' . $year)
					->setCellValue($column_date_sep, 'Sep ' . $year)
					->setCellValue($column_date_oct, 'Oct ' . $year)
					->setCellValue($column_date_nov, 'Nov ' . $year)
					->setCellValue($column_date_dec, 'Dec ' . $year)
					;

				$spreadsheet->setActiveSheetIndex(0)
					->setCellValue($qty_jan, 'QTY')
					->setCellValue($asp_jan, 'ASP')
					->setCellValue($qty_feb, 'QTY')
					->setCellValue($asp_feb, 'ASP')
					->setCellValue($qty_mar, 'QTY')
					->setCellValue($asp_mar, 'ASP')
					->setCellValue($qty_apr, 'QTY')
					->setCellValue($asp_apr, 'ASP')
					->setCellValue($qty_may, 'QTY')
					->setCellValue($asp_may, 'ASP')
					->setCellValue($qty_jun, 'QTY')
					->setCellValue($asp_jun, 'ASP')
					->setCellValue($qty_jul, 'QTY')
					->setCellValue($asp_jul, 'ASP')
					->setCellValue($qty_aug, 'QTY')
					->setCellValue($asp_aug, 'ASP')
					->setCellValue($qty_sep, 'QTY')
					->setCellValue($asp_sep, 'ASP')
					->setCellValue($qty_oct, 'QTY')
					->setCellValue($asp_oct, 'ASP')
					->setCellValue($qty_nov, 'QTY')
					->setCellValue($asp_nov, 'ASP')
					->setCellValue($qty_dec, 'QTY')
					->setCellValue($asp_dec, 'ASP')
				;	
				
				$column_outlet =  PHPExcel_Cell::stringFromColumnIndex($start + 23);	

				$merge_name = $column_name . ':' . $column_outlet . $num;
				$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_name);
				
				$merge_code = $column_code . ':' . $column_outlet . ($num + 1);
				$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_code);

				/*January*/
				$start = $start + 1;
				$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);
				$merge_date = $column_date_jan . ':' . $outlet_a . ($num + 2);
				$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

				/*February*/
				$start = $start + 2;
				$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
				$merge_date = $column_date_feb . ':' . $outlet_a . ($num + 2);
				$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

				/*March*/
				$start = $start + 2;
				$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
				$merge_date = $column_date_mar . ':' . $outlet_a . ($num + 2);
				$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);
				
				/*April*/
				$start = $start + 2;
				$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
				$merge_date = $column_date_apr . ':' . $outlet_a . ($num + 2);
				$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

				/*May*/
				$start = $start + 2;
				$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
				$merge_date = $column_date_may . ':' . $outlet_a . ($num + 2);
				$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

				/*June*/
				$start = $start + 2;
				$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
				$merge_date = $column_date_jun . ':' . $outlet_a . ($num + 2);
				$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

				/*July*/
				$start = $start + 2;
				$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
				$merge_date = $column_date_jul . ':' . $outlet_a . ($num + 2);
				$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

				/*August*/
				$start = $start + 2;
				$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
				$merge_date = $column_date_aug . ':' . $outlet_a . ($num + 2);
				$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

				/*September*/
				$start = $start + 2;
				$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
				$merge_date = $column_date_sep . ':' . $outlet_a . ($num + 2);
				$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

				/*October*/
				$start = $start + 2;
				$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
				$merge_date = $column_date_oct . ':' . $outlet_a . ($num + 2);
				$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

				/*November*/
				$start = $start + 2;
				$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
				$merge_date = $column_date_nov . ':' . $outlet_a . ($num + 2);
				$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

				/*December*/
				$start = $start + 2;
				$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
				$merge_date = $column_date_dec . ':' . $outlet_a . ($num + 2);
				$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

				$start = $start + 1;

				//exit;
			}

			$spreadsheet->getActiveSheet()->getStyle("E5:" . $end_column)->applyFromArray($style_border);


			$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A8",'Material Code')
					->setCellValue("B8", 'Material Desc')
					->setCellValue("C8", 'UOM')
					->setCellValue("D8", 'Total')
			;

			$spreadsheet->getActiveSheet()->getStyle("A8:D8")->applyFromArray($style_border);
			// Rename worksheet

			$join_mat = array(
				'brand_bc_material_tbl b' => 'a.material_id = b.material_id AND b.brand_bc_material_status = 1',
				'brand_bc_tbl c' => 'b.brand_bc_id = c.brand_bc_id AND c.bc_id = ' . $bc_id . ' AND c.brand_bc_year = ' . $year,
				'brand_tbl d' => 'c.brand_id = d.brand_id AND d.brand_id = ' . $brand_id,
				'unit_tbl e' => 'a.unit_id = e.unit_id'
			);

			$get_mat = $this->admin->get_join('material_tbl a', $join_mat);
			
			$mat_start = 9;
			foreach($get_mat as $row_mat){
				$mat_code_col = 'A' . $mat_start;
				$mat_desc_col = 'B' . $mat_start;
				$mat_uom_col = 'C' . $mat_start;
				$mat_total_col = 'D' . $mat_start;

				$mat_code = $row_mat->material_code;
				$mat_desc = $row_mat->material_desc;
				$mat_uom = $row_mat->unit_name;
				$mat_total = '=';
				for($a = 4; $a <= $start; $a = $a+2){
					$col_total = PHPExcel_Cell::stringFromColumnIndex($a) . $mat_start;
					
					if($a == $start){
						$mat_total .= $col_total;
					}else{
						$mat_total .= $col_total . '+';
					}
				}

				$mat_total .= '';

				$spreadsheet->setActiveSheetIndex(0)
					->setCellValue($mat_code_col, $mat_code)
					->setCellValue($mat_desc_col, $mat_desc)
					->setCellValue($mat_uom_col, $mat_uom)
					->setCellValue($mat_total_col, $mat_total);
				$mat_start++;
			}

			$spreadsheet->getActiveSheet()->getStyle("C9:" . $end_letter . ($mat_start - 1))->applyFromArray($style_border);
			$spreadsheet->getActiveSheet()->getStyle("B9:" . 'B'. ($mat_start - 1))->applyFromArray($style_material);
			$spreadsheet->getActiveSheet()->getStyle("A9:" . 'A'. ($mat_start - 1))->applyFromArray($style_mat_code);

			$spreadsheet->getActiveSheet()->getColumnDimension('D')->setWidth(15);
			$spreadsheet->getActiveSheet()->getStyle('D9:D' . ($mat_start - 1))->getNumberFormat()->setFormatCode('#,##0.00');
			$spreadsheet->getActiveSheet()->getStyle('D9:D' . ($mat_start - 1))->applyFromArray($style_mat_code);

			$spreadsheet->getActiveSheet()->freezePane('E9');
			
			
			/*$spreadsheet->getActiveSheet()->protectCells('E5:' . $end_letter . '8', 'b@v1-budgeting');
			$spreadsheet->getActiveSheet()->getStyle('E9:' . $end_letter . ($mat_start - 1))->getProtection()->setLocked(PHPExcel_Style_Protection::PROTECTION_UNPROTECTED);
			$spreadsheet->getActiveSheet()->getProtection()->setSelectLockedCells(true);
			$spreadsheet->getActiveSheet()->getProtection()->setPassword('b@v1-budgeting');
			$spreadsheet->getActiveSheet()->getProtection()->setSheet(true);*/
		

			$spreadsheet->getActiveSheet()->setTitle('Sales budget templates');

			// set right to left direction
			//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

			// Set active sheet index to the first sheet, so Excel opens this as the first sheet
			$spreadsheet->setActiveSheetIndex(0);
			ob_end_clean();
			ob_start();
			// Redirect output to a client’s web browser (Excel2007)
			header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
			header('Content-Disposition: attachment;filename="Budgeting - Sales Templates (' . $brand_name . ') .xlsx"');
			header('Cache-Control: max-age=0');

			// If you're serving to IE over SSL, then the following may be needed
			header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
			header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
			header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
			header('Pragma: public'); // HTTP/1.0

			$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
			$writer->save('php://output');
			exit;
		}else{
			echo 'No store available';
		}
	}

	public function download_store_expense($id, $brand, $year, $gl_class_id=0, $gl_group_id=0){

		ini_set('max_execution_time', 0);
		ini_set('memory_limit','4048M');


		$year = $this->_active_year();
		$this->load->model('admin_model');
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$cost_center_code = decode($id);
		$brand_id = decode($brand);
		$gl_class_id = $gl_class_id ? decode($gl_class_id) : NULL;
		$gl_group_id = $gl_group_id ? decode($gl_group_id) : NULL;
		$check_bc = $this->admin->check_data('bc_tbl', array('cost_center_code' => $cost_center_code, 'bc_status' => 1), TRUE);

		if($check_bc['result'] == TRUE){
			$bc_name = $check_bc['info']->bc_name;
			$check_user = $this->admin->check_data('user_tbl', array('user_id' => $user_id), TRUE);
			if($check_user['result'] == TRUE){
				$name = $check_user['info']->user_lname . ', ' . $check_user['info']->user_fname;
				$check_brand = $this->admin->check_data('brand_tbl', array('brand_id' => $brand_id), TRUE);
				if($check_brand['result'] == TRUE){
					$brand_name = $check_brand['info']->brand_name;
				}else{
					exit;
				}

			}else{
				exit;
			}
			
		}else{
			exit;
		}


		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('OPEX Store Expense Templates')
				->setSubject('Store Expense Module')
				->setDescription('Sales Templates');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);

		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_material = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_mat_code= array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$spreadsheet->getActiveSheet()->getStyle("A1:B4")->applyFromArray($style_info);


		/*$spreadsheet->getActiveSheet()->getStyle("A1:I1")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A1:I1")->applyFromArray($style_info);*/
		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1",'Business Center:')
				->setCellValue("B1",$bc_name)

				->setCellValue("A2","Brand:")
				->setCellValue("B2", $brand_name)

				->setCellValue("A3", "Download Date:")
				->setCellValue("B3", date('m-d-Y'))

				->setCellValue("A4", "User: ")
				->setCellValue("B4", $name);

		$join_outlet = array(
			'outlet_brand_tbl b' => 'a.outlet_id = b.outlet_id AND b.outlet_brand_status = 1',
			'brand_tbl c' => 'b.brand_id = c.brand_id AND c.brand_id = ' . $brand_id,
			'bc_tbl d' => 'a.bc_id = d.bc_id AND d.cost_center_code = "' . $cost_center_code . '"',
			'cost_center_tbl e' => 'a.ifs_code = e.cost_center_code AND e.cost_center_status = 1',
			'outlet_year_tbl f' => 'a.outlet_id = f.outlet_id AND f.outlet_year_status = 1 AND f.outlet_year = ' . $year
		);

		if($gl_group_id){
			$sql_select = 'e.cost_center_id NOT IN (SELECT y.cost_center_id FROM gl_transaction_tbl x, gl_transaction_item_tbl y WHERE e.cost_center_id = y.cost_center_id AND x.gl_trans_id = y.gl_trans_id AND x.gl_trans_status = 1 AND y.gl_trans_item_status = 1 AND x.gl_group_id = '.$gl_group_id.' AND x.gl_year = ' . $year . ')';
		} else {
			$sql_select = 'e.cost_center_id NOT IN (SELECT y.cost_center_id FROM gl_transaction_tbl x, gl_transaction_item_tbl y WHERE e.cost_center_id = y.cost_center_id AND x.gl_trans_id = y.gl_trans_id AND x.gl_trans_status = 1 AND y.gl_trans_item_status = 1 AND x.gl_year = ' . $year . ')';
		}

		$get_outlet = $this->admin->get_join('outlet_tbl a', $join_outlet, FALSE, FALSE, FALSE, FALSE, $sql_select);

		$start = 2;
		$num = 5;
		$count = 0;
		if(!empty($get_outlet)){

			foreach($get_outlet as $row_outlet){
				echo $count;
				echo '<br />';
				$count++;
				$column_name = PHPExcel_Cell::stringFromColumnIndex($start) . $num;
				$column_code = PHPExcel_Cell::stringFromColumnIndex($start) . ($num + 1);
				$column_date_jan = PHPExcel_Cell::stringFromColumnIndex($start) . ($num + 2);
				$column_date_feb = PHPExcel_Cell::stringFromColumnIndex($start + 1) . ($num + 2);
				$column_date_mar = PHPExcel_Cell::stringFromColumnIndex($start + 2) . ($num + 2);
				$column_date_apr = PHPExcel_Cell::stringFromColumnIndex($start + 3) . ($num + 2);
				$column_date_may = PHPExcel_Cell::stringFromColumnIndex($start + 4) . ($num + 2);
				$column_date_jun = PHPExcel_Cell::stringFromColumnIndex($start + 5) . ($num + 2);
				$column_date_jul = PHPExcel_Cell::stringFromColumnIndex($start + 6) . ($num + 2);
				$column_date_aug = PHPExcel_Cell::stringFromColumnIndex($start + 7) . ($num + 2);
				$column_date_sep = PHPExcel_Cell::stringFromColumnIndex($start + 8) . ($num + 2);
				$column_date_oct = PHPExcel_Cell::stringFromColumnIndex($start + 9) . ($num + 2);
				$column_date_nov = PHPExcel_Cell::stringFromColumnIndex($start + 10) . ($num + 2);
				$column_date_dec = PHPExcel_Cell::stringFromColumnIndex($start + 11) . ($num + 2);
	
	
				/*$qty_jan = PHPExcel_Cell::stringFromColumnIndex($start) . ($num + 3);
				$qty_feb = PHPExcel_Cell::stringFromColumnIndex($start + 1) . ($num + 3);
				$qty_mar = PHPExcel_Cell::stringFromColumnIndex($start + 2) . ($num + 3);
				$qty_apr = PHPExcel_Cell::stringFromColumnIndex($start + 3) . ($num + 3);
				$qty_may = PHPExcel_Cell::stringFromColumnIndex($sart + 4) . ($num + 3);
				$qty_jun = PHPExcel_Cell::stringFromColumnIndetx($start + 5) . ($num + 3);
				$qty_jul = PHPExcel_Cell::stringFromColumnIndex($start + 6) . ($num + 3);
				$qty_aug = PHPExcel_Cell::stringFromColumnIndex($start + 7) . ($num + 3);
				$qty_sep = PHPExcel_Cell::stringFromColumnIndex($start + 8) . ($num + 3);
				$qty_oct = PHPExcel_Cell::stringFromColumnIndex($start + 9) . ($num + 3);
				$qty_nov = PHPExcel_Cell::stringFromColumnIndex($start + 10) . ($num + 3);
				$qty_dec = PHPExcel_Cell::stringFromColumnIndex($start + 11) . ($num + 3);*/
	
				$end_column = PHPExcel_Cell::stringFromColumnIndex($start + 11) . ($num + 3);
				$end_letter = PHPExcel_Cell::stringFromColumnIndex($start + 11);
				$spreadsheet->setActiveSheetIndex(0)
					->setCellValue($column_name, $row_outlet->outlet_name)
					->setCellValue($column_code, $row_outlet->ifs_code)
					->setCellValue($column_date_jan, 'Jan ' . $year)
					->setCellValue($column_date_feb, 'Feb ' . $year)
					->setCellValue($column_date_mar, 'Mar ' . $year)
					->setCellValue($column_date_apr, 'Apr ' . $year)
					->setCellValue($column_date_may, 'May ' . $year)
					->setCellValue($column_date_jun, 'Jun ' . $year)
					->setCellValue($column_date_jul, 'Jul ' . $year)
					->setCellValue($column_date_aug, 'Aug ' . $year)
					->setCellValue($column_date_sep, 'Sep ' . $year)
					->setCellValue($column_date_oct, 'Oct ' . $year)
					->setCellValue($column_date_nov, 'Nov ' . $year)
					->setCellValue($column_date_dec, 'Dec ' . $year)
					;
	
				$column_outlet =  PHPExcel_Cell::stringFromColumnIndex($start + 11);
	
				$merge_name = $column_name . ':' . $column_outlet . $num;
				$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_name);
				
				$merge_code = $column_code . ':' . $column_outlet . ($num + 1);
				$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_code);
	
				$start = $start + 12;
			}
		} else {
			$end_column = PHPExcel_Cell::stringFromColumnIndex($start + 11) . ($num + 3);
			$end_letter = PHPExcel_Cell::stringFromColumnIndex($start + 11);
		}

		$spreadsheet->getActiveSheet()->getStyle("C5:" . @$end_column)->applyFromArray($style_border);


		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A7",'GL Code')
				->setCellValue("B7", 'GL Name')
		;

		$spreadsheet->getActiveSheet()->getStyle("A7:B7")->applyFromArray($style_border);
		// Rename worksheet

		if($gl_group_id){
			$join_gl = array(
				'gl_group_tbl b' => "a.gl_group_id = b.gl_group_id AND a.gl_sub_status = 1 AND a.gl_group_id = ".$gl_group_id
			);
		} else {
			$join_gl = array(
				'gl_group_tbl b' => "a.gl_group_id = b.gl_group_id AND a.gl_sub_status = 1 AND a.gl_class_id = ".$gl_class_id
			);
		}

		$get_gl = $this->admin->get_join('gl_subgroup_tbl a', $join_gl, false, false, false, false, false, FALSE);
		
		
		$mat_start = 8;
		foreach($get_gl as $row_gl){
			$gl_code_col = 'A' . $mat_start;
			$gl_name_col = 'B' . $mat_start;

			$gl_code = $row_gl->gl_code;
			$gl_group_id = $row_gl->gl_group_id;
			$gl_sub_name = $row_gl->gl_sub_name;

			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue($gl_code_col, $gl_group_id .' | '. $gl_code)
				->setCellValue($gl_name_col, $gl_sub_name)
			;
			$mat_start++;
		}

		$spreadsheet->getActiveSheet()->getStyle("C8:" . $end_letter . ($mat_start - 1))->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("B8:" . 'B'. ($mat_start - 1))->applyFromArray($style_material);
		$spreadsheet->getActiveSheet()->getStyle("A8:" . 'A'. ($mat_start - 1))->applyFromArray($style_mat_code);

		$spreadsheet->getActiveSheet()->freezePane('C8');
		
		/*$spreadsheet->getActiveSheet()->getProtection()->setPassword('b@v1-budgeting');
		$spreadsheet->getActiveSheet()->getProtection()->setSheet(true);
		$spreadsheet->getActiveSheet()->getStyle('C8:' . $end_letter . ($mat_start - 1))->getProtection()->setLocked(PHPExcel_Style_Protection::PROTECTION_UNPROTECTED);*/

	

		$spreadsheet->getActiveSheet()->setTitle('OPEX Store Expenses');


		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Budgeting - Store Expense Templates (' . $brand_name . ').xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function download_test(){

		error_reporting(E_ALL);
		ini_set('display_errors', TRUE);
		ini_set('display_startup_errors', TRUE);
		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('Sales Templates')
				->setSubject('Sales Module')
				->setDescription('Sales Templates');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);

		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_material = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_mat_code= array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$spreadsheet->getActiveSheet()->getStyle("A1:B4")->applyFromArray($style_info);


		/*$spreadsheet->getActiveSheet()->getStyle("A1:I1")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A1:I1")->applyFromArray($style_info);*/
		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1",'Business Center:');

		

		$spreadsheet->getActiveSheet()->setTitle('Sales budget templates');

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Budgeting - Sales Templates.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function download_gl(){
		$info = $this->_require_login();

		$join_sub = array(
			'gl_group_tbl b' => 'a.gl_group_id=b.gl_group_id',
			'gl_class_tbl c' => 'a.gl_class_id = c.gl_class_id'
		);
		$sub_group = $this->admin->get_join('gl_subgroup_tbl a', $join_sub, FALSE, 'b.gl_group_name, a.gl_sub_name');

		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('List of fixed materials ')
				->setSubject('Fixed Materials')
				->setDescription('List of materials');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => \PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);


		foreach(range('A','D') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);


		$spreadsheet->getActiveSheet()->getStyle("A1:E1")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A1:E1")->applyFromArray($style_info);
		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'GL Code')
				->setCellValue("B1", "GL Subgroup")
				->setCellValue("C1", "GL Group")
				->setCellValue("D1", "Status")
				->setCellValue("E1", "Classification")
				;


		// Add some data
		$x= 2;
		$count = 0;
		foreach($sub_group as $row){

			if($row->gl_sub_status == 0){
				$status = 'INACTIVE';
			}elseif($row->gl_sub_status == 1){
				$status = 'ACTIVE';
			}

			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A$x",$row->gl_code)
				->setCellValue("B$x",$row->gl_sub_name)
				->setCellValue("C$x",$row->gl_group_name)
				->setCellValue("D$x",$status)
				->setCellValue("E$x",$row->gl_class_name)
			;

			$spreadsheet->getActiveSheet()->getStyle("A$x:E$x")->applyFromArray($style_data);
			$x++;
		}
		
		// Rename worksheet
		$spreadsheet->getActiveSheet()->setTitle('List of fixed material');

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);

		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Budgeting - List of GL.xlsx"');
		header('Cache-Control: max-age=0');
		// If you're serving to IE 9, then the following may be needed
		header('Cache-Control: max-age=1');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function download_assets(){
		$info = $this->_require_login();

		$join_asset = array('asset_group_tbl b' => 'a.ag_id = b.ag_id');
		$assets = $this->admin->get_join('asset_subgroup_tbl a', $join_asset, FALSE, 'asg_status DESC, b.ag_name, a.asg_name');

		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('List of fixed materials ')
				->setSubject('Fixed Materials')
				->setDescription('List of materials');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => \PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);


		foreach(range('A','E') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);


		$spreadsheet->getActiveSheet()->getStyle("A1:E1")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A1:E1")->applyFromArray($style_info);
		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Asset Group')
				->setCellValue("B1", "Asset Name")
				->setCellValue("C1", "Useful Life (In Month)")
				->setCellValue("D1", "Cost")
				->setCellValue("E1", "Status")
				;


		// Add some data
		$x= 2;
		$count = 0;
		foreach($assets as $row){

			if($row->asg_status == 0){
				$status = 'INACTIVE';
			}elseif($row->asg_status == 1){
				$status = 'ACTIVE';
			}

			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A$x",$row->ag_name)
				->setCellValue("B$x",$row->asg_name)
				->setCellValue("C$x",$row->asg_lifespan)
				->setCellValue("D$x",$row->asg_price)
				->setCellValue("E$x",$status)
			;

			$spreadsheet->getActiveSheet()->getStyle("A$x:E$x")->applyFromArray($style_data);
			$x++;
		}

		$spreadsheet->getActiveSheet()->getStyle('D2:D' . ($x - 1))->getNumberFormat()->setFormatCode('#,##0.00');	
		
		// Rename worksheet
		$spreadsheet->getActiveSheet()->setTitle('List of Assets');

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);

		// Redirect output to a client’s web browser (Excel2007)

		$random = generate_random(5);
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Budgeting - List of Assets_' . $random . '.xlsx"');
		header('Cache-Control: max-age=0');
		// If you're serving to IE 9, then the following may be needed
		header('Cache-Control: max-age=1');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}


	public function download_manpower($year = null){
		$info = $this->_require_login();

		if($year == null){
			$year = $this->_active_year();
		}

		$join_manpower = array(
			'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.manpower_status = 1 AND a.manpower_year = ' . $year,
			'company_unit_tbl c' => 'b.company_unit_id = c.company_unit_id',
			'rank_tbl d' => 'a.rank_id = d.rank_id'
		);

		$select = '*,

		(
			IF(
				b.cost_center_type_id != 9, (SELECT x.bc_name FROM bc_tbl x WHERE b.bc_id = x.bc_id), ""
			)
		)as bc';

		$manpower = $this->admin->get_join('manpower_tbl a', $join_manpower, FALSE, FALSE, FALSE, $select);

		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('List of Manpower')
				->setSubject('Manpower')
				->setDescription('List of Manpower');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => \PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);


		foreach(range('A','D') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);


		$spreadsheet->getActiveSheet()->getStyle("A1:I1")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A1:I1")->applyFromArray($style_info);
		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Business Center')
				->setCellValue("B1", "Unit")
				->setCellValue("C1", "Cost Center Code")
				->setCellValue("D1", "Cost Center Name")
				->setCellValue("E1", "Rank")
				->setCellValue("F1", "Position")
				->setCellValue("G1", "Old")
				->setCellValue("H1", "New")
				->setCellValue("I1", "Year")
				->setCellValue("J1", "Remarks")

				;


		// Add some data
		$x= 2;
		$count = 0;
		foreach($manpower as $row){

			$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A$x",$row->bc)
					->setCellValue("B$x",$row->company_unit_name)
					->setCellValue("C$x",$row->cost_center_code)
					->setCellValue("D$x",$row->cost_center_desc)
					->setCellValue("E$x",$row->rank_name)
					->setCellValue("F$x",$row->manpower_position)
					->setCellValue("G$x",$row->manpower_old)
					->setCellValue("H$x",$row->manpower_new)
					->setCellValue("I$x",$row->manpower_year)
					->setCellValue("J$x",$row->manpower_remarks)
					;

			$spreadsheet->getActiveSheet()->getStyle("A$x:J$x")->applyFromArray($style_data);
			$x++;
		}
		
		// Rename worksheet
		$spreadsheet->getActiveSheet()->setTitle('Manpower - ' . $year);

		foreach(range('A','J') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
						->setAutoSize(true);
		}

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);

		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Budgeting - List of Manpower ' . $year . '.xlsx"');
		header('Cache-Control: max-age=0');
		// If you're serving to IE 9, then the following may be needed
		header('Cache-Control: max-age=1');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	/*Lock Module*/

	public function lock_module(){
		$info = $this->_require_login();
		$data['title'] = 'Lock Module';
		$data['lock_module'] = $this->admin->get_query('
			SELECT a.lock_id, b.module_name, c.lock_type_name, d.bc_name as location_name, a.lock_year, e.lock_status_name FROM lock_tbl a, module_tbl b, lock_type_tbl c, bc_tbl d, lock_status_tbl e WHERE a.module_id = b.module_id AND a.lock_type_id = c.lock_type_id AND a.lock_location_id = d.bc_id AND a.lock_status_id = e.lock_status_id AND e.lock_status_id != 0 AND c.lock_type_name = "Business Center"

			UNION

			SELECT a.lock_id, b.module_name, c.lock_type_name, d.company_unit_name as location_name, a.lock_year, e.lock_status_name FROM lock_tbl a, module_tbl b, lock_type_tbl c, company_unit_tbl d, lock_status_tbl e WHERE a.module_id = b.module_id AND a.lock_type_id = c.lock_type_id AND a.lock_location_id = d.company_unit_id AND a.lock_status_id = e.lock_status_id AND e.lock_status_id != 0 AND c.lock_type_name = "Unit"

			ORDER BY lock_year DESC
		');

		$data['lock_type'] = $this->admin->get_data('lock_type_tbl', array('lock_type_status' => 1));
		$data['module'] = $this->admin->get_data('module_tbl', array('module_status' => 1));

		$data['content'] = $this->load->view('admin/admin_lock_module_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function get_lock_location(){
		$info = $this->_require_login_prod();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$lock_type_id = decode($this->input->post('type'));
			$check_type = $this->admin->check_data('lock_type_tbl', array('lock_type_id' => $lock_type_id, 'lock_type_status' => 1), TRUE);
			if($check_type['result']){
				$type = $check_type['info']->lock_type_name;

				$location = '<option value="">Select...</option>';
				if($type == 'Business Center'){
					$get_location = $this->admin->get_data('bc_tbl', array('bc_status' => 1));

					foreach($get_location as $row_location){
						$location .= '<option value="' . encode($row_location->bc_id) . '">' . $row_location->bc_name . '</option>';
					}
				}elseif($type == 'Unit'){
					$get_location = $this->admin->get_data('company_unit_tbl', array('company_unit_status' => 1));

					foreach($get_location as $row_location){
						$location .= '<option value="' . encode($row_location->company_unit_id) . '">' . $row_location->company_unit_name . '</option>';
					}
				}
				
				$data['result'] = 1;
				$data['info'] = $location;
			}else{
				$data['result'] = 0;
			}
			echo json_encode($data);
		}
	}

	public function add_lock_module(){
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$module = decode($this->input->post('module'));
			$lock_type_id = decode($this->input->post('lock_type'));
			$lock_location = decode($this->input->post('lock_location'));
			$lock_year = $this->input->post('lock_year');

			if(!empty($module) && !empty($lock_type_id) && !empty($lock_location) && !empty($lock_year)){
				$check_module = $this->admin->check_data('module_tbl', array('module_id' => $module, 'module_status' => 1));
				if($check_module == TRUE){
					$check_lock_type = $this->admin->check_data('lock_type_tbl', array('lock_type_id' => $lock_type_id, 'lock_type_status' => 1), TRUE);
					if($check_lock_type == TRUE){
						$lock_type = $check_lock_type['info']->lock_type_name;

						if($lock_type == 'Business Center'){
							$check_location = $this->admin->check_data('bc_tbl', array('bc_id' => $lock_location, 'bc_status' => 1));
						}elseif($lock_type == 'Unit'){
							$check_location = $this->admin->check_data('company_unit_tbl', array('company_unit_id' => $lock_location, 'company_unit_status' => 1));
						}

						if($check_location == TRUE){
							$check_lock_trans = $this->admin->check_data('lock_tbl', array('module_id' => $module, 'lock_type_id' => $lock_type_id, 'lock_location_id' => $lock_location, 'lock_year' => $lock_year, 'lock_status_id !=' => 0));

							if($check_lock_trans == FALSE){
								$set = array(
									'module_id' => $module,
									'lock_type_id' => $lock_type_id,
									'lock_location_id' => $lock_location,
									'user_id' => $user_id,
									'lock_year' => $lock_year,
									'lock_added' => date_now(),
									'lock_status_id' => 1
								);

								$insert_lock = $this->admin->insert_data('lock_tbl', $set);

								if($insert_lock == TRUE){
									$msg = '<div class="alert alert-success">Lock Module successfully added!</div>';
									$this->session->set_flashdata('message', $msg);
								}else{
									$msg = '<div class="alert alert-danger">Error please try again!</div>';
									$this->session->set_flashdata('message', $msg);
								}
							}else{
								$msg = '<div class="alert alert-danger">Error lock module already exist!</div>';
								$this->session->set_flashdata('message', $msg);
							}
						}else{
							$msg = '<div class="alert alert-danger">Error in lock location, please try again!</div>';
							$this->session->set_flashdata('message', $msg);
						}
					}else{
						$msg = '<div class="alert alert-danger">Error in lock type, please try again!</div>';
						$this->session->set_flashdata('message', $msg);
					}
				}else{
					$msg = '<div class="alert alert-danger">Error in module, please try again!</div>';
					$this->session->set_flashdata('message', $msg);
				}
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
			}

			redirect('admin/lock-module');
		}
	}

	public function update_lock_module(){
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$lock_id = decode($this->input->post('id'));
			$check_lock = $this->admin->check_data('lock_tbl', array('lock_id' => $lock_id));
			if($check_lock == TRUE){
				$set = array('lock_status_id' => 2);
				$where = array('lock_id' => $lock_id);

				$update_data = $this->admin->update_data('lock_tbl', $set, $where);
				if($update_data == TRUE){
					$msg = '<div class="alert alert-success">Module now successfully locked!</div>';
					$this->session->set_flashdata('message', $msg);
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
				}
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
			}

			redirect('admin/lock-module');
		}
	}

	public function update_unlock_module(){
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$lock_id = decode($this->input->post('id'));
			$check_lock = $this->admin->check_data('lock_tbl', array('lock_id' => $lock_id));
			if($check_lock == TRUE){
				$set = array('lock_status_id' => 1);
				$where = array('lock_id' => $lock_id);

				$update_data = $this->admin->update_data('lock_tbl', $set, $where);
				if($update_data == TRUE){
					$msg = '<div class="alert alert-success">Module now successfully locked!</div>';
					$this->session->set_flashdata('message', $msg);
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
				}
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
			}

			redirect('admin/lock-module');
		}
	}

	/*PDF Report*/

	public function header($pdf) {
		$image_file = 'assets/img/bavi-logo.png';
        $pdf->setJPEGQuality(100);
	    $pdf->SetLineStyle(array('width' => 1, 'cap' => 'butt', 'join' => 'miter', 'dash' => 0, 'color' => array(255,255,255)));
	    $pdf->Image($image_file, 145, 10, 50, 14.31, 'PNG', '', '', true, 150, '', false, false, 1, false, false, false);
        // Set font
        
        // Page number
        
    }

    public function header_landscape($pdf) {
		$image_file = 'assets/img/bavi-logo.png';
        $pdf->setJPEGQuality(100);
	    $pdf->SetLineStyle(array('width' => 1, 'cap' => 'butt', 'join' => 'miter', 'dash' => 0, 'color' => array(255,255,255)));
	    $pdf->Image($image_file, 230, 10, 50, 14.31, 'PNG', '', '', true, 150, '', false, false, 1, false, false, false);
        // Set font
        
        // Page number
        
    }

    public function footer($pdf) {
        // Position at 15 mm from bottom
        // Set font
    }

    public function watermark($pdf){
    	// get the current page break margin
		$bMargin = $pdf->getBreakMargin();
		// get current auto-page-break mode
		$auto_page_break = $pdf->getAutoPageBreak();
		// disable auto-page-break
		$pdf->SetAutoPageBreak(false, 0);
		// set bacground image
		$img_file = 'assets/img/confidential.png';
		$pdf->Image($img_file, 10, 50, '', '', '', '', '', false, 300, '', false, false, 0);
		// restore auto-page-break status
		$pdf->SetAutoPageBreak($auto_page_break, $bMargin);
		// set the starting point for the page content
		$pdf->setPageMark();
    }

    public function watermark_landscape($pdf){
    	// get the current page break margin
		$bMargin = $pdf->getBreakMargin();
		// get current auto-page-break mode
		$auto_page_break = $pdf->getAutoPageBreak();
		// disable auto-page-break
		$pdf->SetAutoPageBreak(false, 0);
		// set bacground image
		$img_file = 'assets/img/confidential.png';
		$pdf->Image($img_file, 50, 50, '', '', '', '', '', false, 300, '', false, false, 0);
		// restore auto-page-break status
		$pdf->SetAutoPageBreak($auto_page_break, $bMargin);
		// set the starting point for the page content
		$pdf->setPageMark();
    }

	public function download_pdf($year = null){
		$info = $this->_require_login();
 		$bc_name = "NATIONAL";

		if($year == null){
			$year = $this->_active_year();
		}
		
		$this->load->library("Pdf");
			  
	    // create new PDF document
	    $pdf = new TCPDF('P', PDF_UNIT, 'A4', true, 'UTF-8', false);
	  
	    // set document information

	    $pdf->SetCreator(PDF_CREATOR);
	    $pdf->SetAuthor('Bounty Agro Venture, Inc.');
	    $pdf->SetTitle('BAVI Budgeting Report');
	    $pdf->SetSubject('BAVI Budgeting Report');
	    $pdf->SetKeywords('BAVI, Budgeting, Report');   
	  
	    // set default header data

	    $title = "Bounty Agro Venture, Inc.";

	    $pdf->setPrintHeader(false);
	    $pdf->setPrintFooter(false);

	    $pdf->SetAutoPageBreak(true);
	  
	    // set some language-dependent strings (optional)
	    if (@file_exists(dirname(__FILE__).'/lang/eng.php')) {
	        require_once(dirname(__FILE__).'/lang/eng.php');
	        $pdf->setLanguageArray($l);
	    }
	    
	  
	    // Add a page
	    // This method has several options, check the source code documentation for more information.
	    $pdf->AddPage();
	    $this->header($pdf);

	    $pdf->SetFont('arial', 'B', 52);
	    $pdf->SetTextColor(0,0,0);
	    $pdf->Text(20, 100, $bc_name);
	    $pdf->Text(20, 120, 'BUDGET');
	    $pdf->SetTextColor(255,51,0);
	    $pdf->Text(20, 140, $year);

	    $pdf->SetFont('arial', 'B', 8);
	    $pdf->SetTextColor(0,0,0);
	    $pdf->Text(15, 280, 'BOUNTY AGRO VENTURES INC. | Unit 1008, The Taipan Place Condo, F. Ortigas Jr. Ave, Ortigas');
	    $pdf->Text(15, 285, 'Center, Pasig City');


	    //Table of Contents
	    $pdf->AddPage();
	    $this->header($pdf);

	    $pdf->SetFont('arial', 'B', 16);
	    
	    $pdf->SetTextColor(255,51,0);
	    $pdf->Text(20, 50, 'TABLE OF');
	    $pdf->SetTextColor(0,0,0);
	    $pdf->Text(49, 50, 'CONTENTS');
	    $pdf->SetTextColor(0,0,0);

	    $pdf->SetFont('arial', 'B', 9);
	    $pdf->Text(18, 80, 'EXECUTIVE SUMMARY  ........................................................................................................................................  3');
	    $pdf->Text(18, 90, 'HARVESTABLE VOLUME  .....................................................................................................................................  4');

	    $pdf->Text(18, 100, 'PROFIT & LOSS STATEMENT');

	    $pdf->Text(20, 110, 'Schedule 1: Comparative Profit and Loss  ............................................................................................................  5');

	    $pdf->Text(20, 120, 'Schedule 2: Monthly NOI Summary  .....................................................................................................................  6');

	    $pdf->Text(20, 130, 'Schedule 3: Net Operating Income per Segment  .................................................................................................  7');

	    $pdf->Text(20, 140, 'Schedule 4: Monthly NOI Summary - COMMODITY  ...........................................................................................  8');

	    $pdf->Text(20, 150, 'Schedule 5: Monthly NOI Summary - CHOOKS TO GO  .....................................................................................  9');

	    $pdf->Text(20, 160, 'Schedule 6: Monthly NOI Summary - ULING ROASTERS  ................................................................................  10');

	    $pdf->Text(20, 170, 'Schedule 7: Monthly NOI Summary - RESELLER  .............................................................................................  11');

	    $pdf->Text(20, 180, 'Schedule 8: Monthly Selling Prices  ...............................................................................................................  12-14');

	    $pdf->Text(20, 190, 'Schedule 9: Comparative Operating Expenses per Cost Center  .......................................................................  15');

	    $pdf->Text(20, 200, 'Schedule 10: Comparative Operating Expenses per Account  ......................................................................  16-17');

	    $pdf->Text(18, 210, 'CAPITAL EXPENDITURE (CAPEX)  ...............................................................................................................  18-19');

	    $pdf->Text(18, 220, 'MANPOWER HEAD COUNT  ...............................................................................................................................  21');

	    $pdf->AddPage();

	    $pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $bc_name);
	    $pdf->Text(20, 46, 'EXECUTIVE SUMMARY');
	    $pdf->Text(20, 52, 'Budget ' . $year);


	    /*Broiler Report*/
	    $get_broiler = $this->_get_broiler_report_tbl($year, 3);
	    $data['broiler_tbl'] = $get_broiler['tbl'];
	    $harvested_heads = $get_broiler['harvested_heads'];
	    $harvested_dif1 = $get_broiler['harvested_dif1'];
	    $harvested_percent1 = $get_broiler['harvested_percent1'];
	    $harvested_condition1 = $get_broiler['harvested_condition1'];
	    $harvested_heads1 = $get_broiler['harvested_heads1'];

	    $harvested_heads2 = $get_broiler['harvested_heads2'];
	    $harvested_dif2 = $get_broiler['harvested_dif2'];
	    $harvested_percent2 = $get_broiler['harvested_percent2'];
	    $harvested_condition2 = $get_broiler['harvested_condition2'];;

	    $harvest_report = "Harvestable birds is " . convert_num($harvested_heads) . " which is " . number_format($harvested_percent1) ."% " . $harvested_condition1 . " than " . ($year - 1) . "'s " . convert_num($harvested_heads1) ." and " . number_format($harvested_percent2) . "% " . $harvested_condition2 . " " . ($year - 2) . " of " . convert_num($harvested_heads2) . "";

	    $pdf->SetMargins(20, 20, 20, true);

	    $pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 70, $harvest_report);

	    /*Sales Unit Report*/
	    $get_sales = $this->_get_sales_unit_report($year);
	    $sales_unit = $get_sales['total_sales_unit'];


	    /*NOI Query*/

	    $select_noi = 'SUM(dashboard_bc_summary_noi) as dashboard_bc_summary_noi, SUM(dashboard_bc_summary_net_sales) as dashboard_bc_summary_net_sales, SUM(dashboard_bc_summary_variable_cost) as dashboard_bc_summary_variable_cost, SUM(dashboard_bc_summary_period_cost) as dashboard_bc_summary_period_cost, (SELECT SUM(dashboard_opex_unit_amount) FROM dashboard_opex_unit_tbl WHERE dashboard_opex_unit_status = 1 AND YEAR(dashboard_opex_unit_date) = ' . $year . ') as unit_period_cost';
	   	$check_noi = $this->admin->check_data('dashboard_bc_summary_tbl', array('dashboard_bc_summary_year' => $year, 'dashboard_bc_summary_status' => 1), TRUE, $select_noi);

	   	$select_noi1 = '*, (SELECT SUM(cost) FROM comparative_opex_dept_tbl WHERE comp_opex_dept_status = 1 AND YEAR(trans_year) = ' . ($year - 1) . ') as unit_period_cost';
	    $check_noi1 = $this->admin->check_data('comparative_pnl_tbl', array('comp_pnl_year' => ($year - 1), 'comp_pnl_status' => 1), TRUE, $select_noi1);

	    $select_noi2 = '*, (SELECT SUM(cost) FROM comparative_opex_dept_tbl WHERE comp_opex_dept_status = 1 AND YEAR(trans_year) = ' . ($year - 2) . ') as unit_period_cost';
	    $check_noi2 = $this->admin->check_data('comparative_pnl_tbl', array('comp_pnl_year' => ($year - 2), 'comp_pnl_status' => 1), TRUE, $select_noi2);
	    if($check_noi['result'] == TRUE){
	    	$net_sales = $check_noi['info']->dashboard_bc_summary_net_sales;

	    	$noi = $check_noi['info']->dashboard_bc_summary_noi;
	    	$noi_percent = 0;
	    	$noi_condition = '';

	    	$noi1 = 0;
	    	$noi_percent1 = 0;
	    	$noi_condition1 = '';

	    	$noi2 = 0;
	    	$noi_percent1 = 0;
	    	$noi_condition1 = '';

	    	$noi_unit = $sales_unit > 0 ? $noi / $sales_unit : 0;

	    	$noi_percent = number_format($net_sales > 0 ? ($noi / $net_sales) * 100 : 0);

	    	$variable_cost = $check_noi['info']->dashboard_bc_summary_variable_cost;

	    	$variable_cost_unit = $sales_unit > 0 ? $variable_cost / $sales_unit : 0;

	    	$margin = $net_sales - $variable_cost;

	    	$margin_unit = $sales_unit > 0 ?  $margin / $sales_unit : 0;

	    	$margin_percent = $net_sales > 0 ? ($margin / $net_sales) * 100 : 0;


	    	$period_cost = $check_noi['info']->dashboard_bc_summary_period_cost + $check_noi['info']->unit_period_cost;

	    	$period_cost_unit = $sales_unit > 0 ? $period_cost / $sales_unit : 0;

	    }else{
	    	$noi = '';
	    	$noi = '';
	    	$noi_percent = '';
	    	$noi_condition = '';

	    	$noi1 = '';
	    	$noi_percent1 = '';
	    	$noi_condition1 = '';
	    }


	    $net_sales1 = 0;
    	$sales_unit1 = 0;
    	$variable_cost1 = 0;
    	$period_cost1 = 0;
    	$margin1 = 0;
    	$cm_percent1 = 0;
    	$noi1 = 0;
    	$noi_unit1 = 0;
    	$noi_percent1 = 0;
	    if($check_noi1['result'] == TRUE){
	    	$net_sales1 = $check_noi1['info']->comp_pnl_net_sales;
	    	$sales_unit1 = $check_noi1['info']->comp_pnl_sales_volume;
	    	$variable_cost1 = $check_noi1['info']->comp_pnl_variable_cost;
	    	$period_cost1 = $check_noi1['info']->comp_pnl_period_cost + $check_noi1['info']->unit_period_cost;
	    	$margin1 = $net_sales1 - $variable_cost1;
	    	$cm_percent1 = $net_sales1 > 0 ? ($margin1 / $net_sales1) * 100 : 0;
	    	$noi1 = $margin1 - $period_cost1;
	    	$noi_unit1 = $sales_unit1 > 0 ? ($noi1 / $sales_unit1) : 0;
	    	$noi_percent1 = $net_sales1 > 0 ? ($noi1 / $net_sales1) * 100 : 0;
	    }

	    $net_sales2 = 0;
    	$sales_unit2 = 0;
    	$variable_cost2 = 0;
    	$period_cost2 = 0;
    	$margin2 = 0;
    	$cm_percent2 = 0;
    	$noi2 = 0;
    	$noi_unit2 = 0;
    	$noi_percent2 = 0;
	    if($check_noi2['result'] == TRUE){
	    	$net_sales2 = $check_noi2['info']->comp_pnl_net_sales;
	    	$sales_unit2 = $check_noi2['info']->comp_pnl_sales_volume;
	    	$variable_cost2 = $check_noi2['info']->comp_pnl_variable_cost;
	    	$period_cost2 = $check_noi2['info']->comp_pnl_period_cost + $check_noi2['info']->unit_period_cost;
	    	$margin2 = $net_sales2 - $variable_cost2;
	    	$cm_percent2 = $net_sales2 > 0 ? ($margin2 / $net_sales2) * 100 : 0;
	    	$noi2 = $margin2 - $period_cost2;
	    	$noi_unit2 = $sales_unit2 > 0 ? ($noi2 / $sales_unit2) : 0;
	    	$noi_percent2 = $net_sales2 > 0 ? ($noi2 / $net_sales2) * 100 : 0;
	    }


    	$nsp = $sales_unit > 0 ? $net_sales/$sales_unit : 0;
    	$nsp1 = $sales_unit1 > 0 ? $net_sales1/$sales_unit1 : 0;
    	$nsp2 = $sales_unit2 > 0 ? $net_sales2/$sales_unit2 : 0;

    	$variable_cost_unit1 = $sales_unit1 > 0 ? $variable_cost1 / $sales_unit1 : 0;
    	$variable_cost_unit2 = $sales_unit2 > 0 ? $variable_cost2 / $sales_unit2 : 0;

    	$margin1 = $net_sales1 - $variable_cost1;
    	$margin2 = $net_sales2 - $variable_cost2;

    	$margin_unit1 = $sales_unit1 > 0 ?  $margin1 / $sales_unit1 : 0;
    	$margin_unit2 = $sales_unit2 > 0 ?  $margin2 / $sales_unit2 : 0;

    	$margin_percent1 = $net_sales1 > 0 ? ($margin1 / $net_sales1) * 100 : 0;
    	$margin_percent2 = $net_sales2 > 0 ? ($margin2 / $net_sales2) * 100 : 0;

    	$period_cost_unit1 = $sales_unit1 > 0 ? $period_cost1 / $sales_unit1 : 0;
    	$period_cost_unit2 = $sales_unit2 > 0 ? $period_cost2 / $sales_unit2 : 0;

    	$net_sales_dif1 = $net_sales - $net_sales1;
    	$net_sales_dif2 = $net_sales - $net_sales2;
    	$net_sales_percent1 = $net_sales1 > 0 ? ($net_sales_dif1 / $net_sales1) * 100 : 0;
    	$net_sales_percent2 = $net_sales2 > 0 ? ($net_sales_dif2 / $net_sales2) * 100 : 0;

    	$net_sales_condition1 = $net_sales_dif1 > 0 ? 'higher' :  'lower';
    	$net_sales_condition2 = $net_sales_dif2 > 0 ? 'higher' :  'lower';

    	$nsp_dif1 = $nsp - $nsp1;
    	$nsp_dif2 = $nsp - $nsp2;
    	$nsp_percent1 = $nsp1 > 0 ? ($nsp_dif1 / $nsp1) * 100 : 0;
    	$nsp_percent2 = $nsp2 > 0 ? ($nsp_dif2 / $nsp2) * 100 : 0;

    	$sales_unit_dif1 = $sales_unit - $sales_unit1;
    	$sales_unit_dif2 = $sales_unit - $sales_unit2;
    	$sales_unit_percent1 = $sales_unit1 > 0 ? ($sales_unit_dif1 / $sales_unit1) * 100 : 0;
    	$sales_unit_percent2 = $sales_unit2 > 0 ? ($sales_unit_dif2 / $sales_unit2) * 100 : 0;
    	$sales_unit_condition1 = $sales_unit_dif1 > 0 ? 'higher' :  'lower';
    	$sales_unit_condition2 = $sales_unit_dif2 > 0 ? 'higher' :  'lower';

    	$variable_cost_dif1 = $variable_cost - $variable_cost1;
    	$variable_cost_dif2 = $variable_cost - $variable_cost2;
    	$variable_cost_percent1 = $variable_cost1 > 0 ? ($variable_cost_dif1 / $variable_cost1) * 100 : 0;
    	$variable_cost_percent2 = $variable_cost2 > 0 ? ($variable_cost_dif2 / $variable_cost2) * 100 : 0;

    	$variable_cost_unit_dif1 = $variable_cost_unit - $variable_cost_unit1;
    	$variable_cost_unit_dif2 = $variable_cost_unit - $variable_cost_unit2;
    	$varialbe_cost_unit_percent1 = $variable_cost_unit1 > 0 ? ($variable_cost_unit_dif1 / $variable_cost_unit1) * 100 : 0;
    	$varialbe_cost_unit_percent2 = $variable_cost_unit1 > 0 ? ($variable_cost_unit_dif2 / $variable_cost_unit1) * 100 : 0;

    	$margin_dif1 = $margin - $margin1;
    	$margin_dif2 = $margin - $margin2;
    	$margin_percent1 = $margin1 > 0 ? ($margin_dif1 / $margin1) * 100 : 0;
    	$margin_percent2 = $margin2 > 0 ? ($margin_dif2 / $margin2) * 100 : 0;

    	$margin_unit_dif1 = $margin_unit - $margin_unit1;
    	$margin_unit_dif2 = $margin_unit - $margin_unit2;
    	$margin_unit_percent1 = $margin_unit1 > 0 ? ($margin_unit_dif1 / $margin_unit1) * 100 : 0;
    	$margin_unit_percent2 = $margin_unit2 > 0 ? ($margin_unit_dif2 / $margin_unit2) * 100 : 0;

    	$cm_percent_dif1 = $margin_percent - $cm_percent1;
    	$cm_percent_dif2 = $margin_percent - $cm_percent2;
    	$cm_percent_dif_percent1 = $cm_percent1 > 0 ? ($cm_percent_dif1 / $cm_percent1) * 100 : 0;
    	$cm_percent_dif_percent2 = $cm_percent2 > 0 ? ($cm_percent_dif2 / $cm_percent2) * 100 : 0;

    	$period_cost_dif1 = $period_cost - $period_cost1;
    	$period_cost_dif2 = $period_cost - $period_cost2;
    	$period_cost_percent1 = $period_cost1 > 0 ? ($period_cost_dif1 / $period_cost1) * 100 : 0;
    	$period_cost_percent2 = $period_cost2 > 0 ? ($period_cost_dif2 / $period_cost2) * 100 : 0;

    	$period_cost_unit_dif1 = $period_cost_unit - $period_cost_unit1;
    	$period_cost_unit_dif2 = $period_cost_unit - $period_cost_unit2;
    	$period_cost_unit_percent1 = $period_cost_unit1 > 0 ? ($period_cost_unit_dif1 / $period_cost_unit1) * 100 : 0;
    	$period_cost_unit_percent2 = $period_cost_unit2 > 0 ? ($period_cost_unit_dif2 / $period_cost_unit2) * 100 : 0;

    	$noi_dif1 = $noi - $noi1;
    	$noi_dif2 = $noi - $noi2;
    	$noi_dif_percent1 = $noi1 != 0 ? ($noi_dif1 / $noi1) * 100 : 0;
    	$noi_dif_percent2 = $noi2 != 0 ? ($noi_dif2 / $noi2) * 100 : 0;
    	$noi_condition1 = $noi_dif1 > 0 ? 'higher' :  'lower';
    	$noi_condition2 = $noi_dif2 > 0 ? 'higher' :  'lower';

    	$noi_unit_dif1 = $noi_unit - $noi_unit1;
    	$noi_unit_dif2 = $noi_unit - $noi_unit2;
    	$noi_unit_percent1 = $noi_unit1 > 0 ? ($noi_unit_dif1 / $noi_unit1) * 100 : 0;
    	$noi_unit_percent2 = $noi_unit2 > 0 ? ($noi_unit_dif2 / $noi_unit2) * 100 : 0;

    	$noi_percent_dif1 = $noi_percent - $noi_percent1;
    	$noi_percent_dif2 = $noi_percent - $noi_percent2;
    	$noi_percent_percent1 = $noi_percent1 > 0 ? ($noi_percent_dif1 / $noi_percent1) * 100 : 0;
    	$noi_percent_percent2 = $noi_percent2 > 0 ? ($noi_percent_dif2 / $noi_percent2) * 100 : 0;

    	//$noi_percent2 = $net_sales2 != 0 ? ($noi2 / $net_sales2) * 100 : 0;


	    /*Net Sales Report*/
	    /*$get_net_sales = $this->_get_net_sales_report($year, $bc_id);*/

	    $net_sales_report = "Net sales is ₱" . convert_num($net_sales) . " which is " . number_format($net_sales_percent1) ."% " . $net_sales_condition1 . " than " . ($year - 1) . "'s ₱" . convert_num($net_sales1) ." and " . number_format($net_sales_percent2) . "% " . $net_sales_condition1 . " than " . ($year - 2) . " of ₱" . convert_num($net_sales2);

	    $sales_report = "Total Sales Units is " . convert_num($sales_unit) . " which is " . number_format($sales_unit_percent1) ."% " . $sales_unit_condition1 . " than " . ($year - 1) . "'s " . convert_num($sales_unit1) ." and " . number_format($sales_unit_percent2) . "% " . $sales_unit_condition2 . " than " . ($year - 2) . " of " . convert_num($sales_unit2);


	    $pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 80, $sales_report);

	    $pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 90, $net_sales_report);


	    $pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 110, 'SALES MIX (%)');

	    $get_sales_mix = $this->_get_sales_mix_report($year);

	    $sales_mix_arr = array();
	    $total_sales_mix = 0;
	    foreach($get_sales_mix as $row_mix){
	    	$sales_name = $row_mix->report_sales_mix_name;
	    	$sales_mix = $row_mix->total_sales_mix;
	    	$sales_mix1 = $row_mix->total_sales_mix1;
	    	$sales_mix2 = $row_mix->total_sales_mix2;
	    	$total_sales_mix += $sales_mix;

	    	$mix_arr = array(
	    		'sales_name' => $sales_name,
	    		'sales_mix' => $sales_mix,
	    		'sales_mix1' => $sales_mix1,
	    		'sales_mix2' => $sales_mix2,
	    	);

	    	array_push($sales_mix_arr, $mix_arr);
	    }

	    $sales_mix_data = '';
	    foreach($sales_mix_arr as $row_mix_arr){
	    	$percent = $total_sales_mix > 0 ? ($row_mix_arr['sales_mix'] / $total_sales_mix) * 100 : 0;
	    	$salesmix1 = $row_mix_arr['sales_mix1'];
	    	$salesmix2 = $row_mix_arr['sales_mix2'];
	    	$sales_mix_data .= '
	    		<tr>
	    			<td>' . $row_mix_arr['sales_name'] . '</td>
	    			<td align="center">' . number_format($percent) . '%</td>
	    			<td align="center">' . number_format($salesmix1) . '%</td>
	    			<td align="center">' . number_format($salesmix2) . '%</td>
	    		</tr>

	    	';
	    }

	    $sales_mix = '<br /><br /><br />
	    	<table border="1" cellpadding="15">
	    		<tr>
	    			<th align="center"><strong>SEGMENT</strong></th>
	    			<th align="center"><strong>' . $year . ' BUDGET</strong></th>
	    			<th align="center"><strong>' . ($year - 1) . '</strong></th>
	    			<th align="center"><strong>' . ($year - 2) . '</strong></th>
	    		</tr>
	    		' . $sales_mix_data . '	    		
	    	</table>
	    ';
	    $pdf->SetFont('arial', '', 10);
	    $pdf->writeHTML($sales_mix, true, false, true, false, '');

	    /*Get NOI*/

	    $noi_report = "NOI is ₱" . convert_num($noi) . " which is " . number_format($noi_dif_percent1) . "% " . $noi_condition1 . " than " . ($year - 1) . "'s ₱" . convert_num($noi1) ." and " . number_format($noi_dif_percent2) . "% " . $noi_condition2 . " than " . ($year - 2) . " of ₱" . convert_num($noi2);

	    $pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 215, $noi_report);

	    /*Outlet Report*/
	    $get_outlet = $this->_get_outlet_report($year);
	    $outlet_new = $get_outlet['outlet_new'];
	    $outlet_old = $get_outlet['outlet_old'];
	    $outlet_total = $get_outlet['outlet_total'];

	    $outlet_report = 'Open ' . $outlet_new . ' outlets to end with ' . $outlet_total . ' in ' . $year .'.';
	    $pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 225, $outlet_report);


	    /*Broiler Cost*/
	    $broiler_cost = $get_broiler['broiler_cost'];
	    $broiler_cost_dif1 = $get_broiler['broiler_cost_dif1'];
	    $broiler_cost_condition1 = $get_broiler['broiler_cost_condition1'];

	    $broiler_cost1 = $get_broiler['broiler_cost1'];
	    $broiler_cost_dif2 = $get_broiler['broiler_cost_dif2'];
	    $broiler_cost_condition2 = $get_broiler['broiler_cost_condition2'];

	    $broiler_cost2 = $get_broiler['broiler_cost2'];

	    $broiler_cost_report = 'Broiler cost is ₱' . number_format($broiler_cost, 2) . ' per kilo, ₱' . number_format($broiler_cost_dif1, 2) . ' per kilo ' . $broiler_cost_condition1 . ' than ' . ($year - 1) . '\'s ₱' . number_format($broiler_cost1, 2) . ' and ₱' . number_format($broiler_cost_dif2, 2) . ' ' . $broiler_cost_condition2 . ' than ' . ($year - 2) . ' ₱' . number_format($broiler_cost2, 2) . '.'; 

	    $pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 235, $broiler_cost_report);

	    /*Manpower Report*/

	    $get_manpower = $this->_get_manpower_report($year);
	    $manpower_old = $get_manpower['manpower_old'];
	    $manpower_new = $get_manpower['manpower_new'];
	    $manpower_total = $manpower_old + $manpower_new;

	    $manpower_report = 'Manpower will increase by ' . $manpower_new . ' from ' . $manpower_old . ' to ' . $manpower_total . ' in ' . $year;
	    $pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 245, $manpower_report);

	    
	    /*CAPEX Report*/
	    $get_capex = $this->_get_capex_report($year);
	    $capex = $get_capex['capex'];
	    $capex1 = $get_capex['capex1'];
	    $capex2 = $get_capex['capex2'];
	    $capex_dif1 = $get_capex['capex_dif1'];
	    $capex_dif2 = $get_capex['capex_dif2'];
	    $capex_condition1 = $get_capex['capex_condition1'];
	    $capex_condition2 = $get_capex['capex_condition2'];

	    $capex_report = 'CAPEX is ' . convert_num($capex) . ', ' . $capex_condition1 . ' by ' . convert_num($capex_dif1) . ' vs ' . ($year - 1) . ' AND ' . $capex_condition2 . ' by ' . convert_num($capex_dif2) . ' vs ' . ($year - 2);
	    $pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 255, $capex_report);


	     // get the current page break margin
		$bMargin = $pdf->getBreakMargin();
		// get current auto-page-break mode
		$auto_page_break = $pdf->getAutoPageBreak();
		// disable auto-page-break
		$pdf->SetAutoPageBreak(false, 0);
		// set bacground image
		$img_file = 'assets/img/confidential.png';
		$pdf->Image($img_file, 10, 50, '', '', '', '', '', false, 300, '', false, false, 0);
		// restore auto-page-break status
		$pdf->SetAutoPageBreak($auto_page_break, $bMargin);
		// set the starting point for the page content
		$pdf->setPageMark();

		$this->header($pdf);


	    /*HARVESTABLE VOLUME PAGE*/

	    $pdf->AddPage();

	    $pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $bc_name);
	    $pdf->Text(20, 46, 'HARVESTABLE VOLUME');
	    $pdf->Text(20, 52, 'Budget ' . $year);

	    $pdf->SetFont('arial', '', 9);

	    /*$budget_broiler = $get_broiler['budget_harvested_heads'];*/
	    $harvest_broiler_data = $get_broiler['tbl'];

	    $harvest_tbl = '<br /><br /><br />
	    	<table border="1" cellpadding="10">
	    		<tr>
	    			<th align="center" rowspan="2"><strong>MONTH</strong></th>
	    			<th align="center" colspan="3"><strong>HARVESTABLE BIRDS</strong></th>
	    			<th align="center" colspan="3"><strong>BROILER COST/KILO</strong></th>
	    		</tr>

	    		<tr>
                    <th align="center"><strong>' . $year . '</strong></th>
                    <th align="center"><strong>' . ($year - 1) . '</strong></th>
                    <th align="center"><strong>' . ($year - 2) . '</strong></th>

                    <th align="center"><strong>' . $year . '</strong></th>
                    <th align="center"><strong>' . ($year - 1) . '</strong></th>
                    <th align="center"><strong>' . ($year - 2) . '</strong></th>
                </tr>

                ' . $harvest_broiler_data . '
	    			    		
	    	</table>
	    ';

	    $pdf->writeHTML($harvest_tbl, true, false, true, false, '');


	    $this->watermark($pdf);
		$this->header($pdf);

		/*PNL PAGE*/

		$pdf->AddPage();

	    $pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $bc_name);
	    $pdf->Text(20, 46, 'PROFIT & LOSS STATEMENT');
	    $pdf->Text(20, 52, 'Budget ' . $year);

	    $pdf->SetFont('arial', '', 8);


	    $nsp = $sales_unit > 0 ? $net_sales / $sales_unit : 0;
	    $nsp1 = $sales_unit1 > 0 ? $net_sales1 / $sales_unit1 : 0;
	    $nsp2 = $sales_unit2 > 0 ? $net_sales2 / $sales_unit2 : 0;
	    $pnl_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="6">
	    		<tr>
	    			<th align="center" valign="bottom" rowspan="2"><strong>(In Thousands)</strong></th>
	    			<th align="center" valign="bottom" rowspan="2"><strong>BUDGET</strong></th>
	    			<th align="center" colspan="2"><strong>ACTUAL</strong></th>
	    			<th align="center" colspan="4"><strong>VARIANCE</strong></th>
	    		</tr>

	    		<tr>
                    <th align="center"><strong>' . ($year - 1) . '</strong></th>
                    <th align="center"><strong>' . ($year - 2) . '</strong></th>
                    <th align="center"><strong>BUDGET VS ' . ($year - 1) . '</strong></th>
                    <th align="center"><strong>%</strong></th>
                    <th align="center"><strong>BUDGET VS ' . ($year - 2) . '</strong></th>
                    <th align="center"><strong>%</strong></th>
                </tr>

                <tr>
	    			<td>Sales Volume, in Unit</td>
	    			<td align="right">' . number_format($sales_unit/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit1/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit2/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit_dif1/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit_percent1) . '%</td>
	    			<td align="right">' . number_format($sales_unit_dif2/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit_percent2) . '%</td>

	    		</tr>

	    		<tr>
	    			<td>NET SALES</td>
	    			<td align="right">' . number_format($net_sales/1000) . '</td>
	    			<td align="right">' . number_format($net_sales1/1000) . '</td>
	    			<td align="right">' . number_format($net_sales2/1000) . '</td>
	    			<td align="right">' . number_format($net_sales_dif1/1000) . '</td>
	    			<td align="right">' . number_format($net_sales_percent1) . '%</td>
	    			<td align="right">' . number_format($net_sales_dif2/1000) . '</td>
	    			<td align="right">' . number_format($net_sales_percent2) . '%</td>
	    		</tr>


	    		<tr>
	    			<td>NSP per Unit (P)</td>
	    			<td align="right">' . number_format($nsp, 2) . '</td>
	    			<td align="right">' . number_format($nsp1, 2) . '</td>
	    			<td align="right">' . number_format($nsp2, 2) . '</td>
	    			<td align="right">' . number_format($nsp_dif1, 2) . '</td>
	    			<td align="right">' . number_format($nsp_percent1) . '%</td>
	    			<td align="right">' . number_format($nsp_dif2, 2) . '</td>
	    			<td align="right">' . number_format($nsp_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td>Variable Cost</td>
	    			<td align="right">' . number_format($variable_cost/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost1/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost2/1000) . '</td>
	    			<td align="right">' . number_format(($variable_cost_dif1/1000) * -1) . '</td>
	    			<td align="right">' . number_format($variable_cost_percent1 * -1) . '%</td>
	    			<td align="right">' . number_format(($variable_cost_dif2/1000) * -1) . '</td>
	    			<td align="right">' . number_format($variable_cost_percent2 * -1) . '%</td>
	    		</tr>

	    		<tr>
	    			<td>Var. Cost per Unit (P)</td>
	    			<td align="right">' . number_format($variable_cost_unit, 2) . '</td>
	    			<td align="right">' . number_format($variable_cost_unit1, 2) . '</td>
	    			<td align="right">' . number_format($variable_cost_unit2, 2) . '</td>
	    			<td align="right">' . number_format(($variable_cost_unit_dif1 * -1), 2) . '</td>
	    			<td align="right">' . number_format($varialbe_cost_unit_percent1 * -1) . '%</td>
	    			<td align="right">' . number_format(($variable_cost_unit_dif2 * -1), 2) . '</td>
	    			<td align="right">' . number_format($varialbe_cost_unit_percent2 * -1) . '%</td>
	    		</tr>

	    		<tr>
	    			<td>Contribution Margin</td>
	    			<td align="right">' . number_format($margin/1000) . '</td>
	    			<td align="right">' . number_format($margin1/1000) . '</td>
	    			<td align="right">' . number_format($margin2/1000) . '</td>
	    			<td align="right">' . number_format($margin_dif1/1000) . '</td>
	    			<td align="right">' . number_format($margin_percent1) . '%</td>
	    			<td align="right">' . number_format($margin_dif2/1000) . '</td>
	    			<td align="right">' . number_format($margin_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td>CM per Unit (P)</td>
	    			<td align="right">' . number_format($margin_unit, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit1, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit2, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit_dif1, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit_percent1) . '%</td>
	    			<td align="right">' . number_format($margin_unit_dif2, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td>CM %</td>
	    			<td align="right">' . number_format($margin_percent) . '%</td>
	    			<td align="right">' . number_format($cm_percent1) . '%</td>
	    			<td align="right">' . number_format($cm_percent2) . '%</td>
	    			<td align="right">' . number_format($cm_percent_dif1) . '%</td>
	    			<td align="right">' . number_format($cm_percent_dif_percent1) . '%</td>
	    			<td align="right">' . number_format($cm_percent_dif2) . '%</td>
	    			<td align="right">' . number_format($cm_percent_dif_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td>Period Cost</td>
	    			<td align="right">' . number_format($period_cost/1000) . '</td>
	    			<td align="right">' . number_format($period_cost1/1000) . '</td>
	    			<td align="right">' . number_format($period_cost2/1000) . '</td>
	    			<td align="right">' . number_format(($period_cost_dif1/1000) * -1) . '</td>
	    			<td align="right">' . number_format($period_cost_percent1 * -1) . '%</td>
	    			<td align="right">' . number_format(($period_cost_dif2/1000) * -1) . '</td>
	    			<td align="right">' . number_format($period_cost_percent2 * -1). '%</td>
	    		</tr>

	    		<tr>
	    			<td>Period Cost per Unit (P)</td>
	    			<td align="right">' . number_format($period_cost_unit, 2) . '</td>
	    			<td align="right">' . number_format($period_cost_unit1, 2) . '</td>
	    			<td align="right">' . number_format($period_cost_unit2, 2) . '</td>
	    			<td align="right">' . number_format(($period_cost_unit_dif1 * -1), 2) . '</td>
	    			<td align="right">' . number_format(($period_cost_unit_percent1) * -1) . '%</td>
	    			<td align="right">' . number_format(($period_cost_unit_dif2 * -1), 2) . '</td>
	    			<td align="right">' . number_format(($period_cost_unit_percent2) * -1) . '%</td>
	    		</tr>

	    		<tr>
	    			<td>Other Income/Expenses</td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    		</tr>

	    		<tr>
	    			<td>Others per Unit (P)</td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    		</tr>

	    		<tr>
	    			<td>Net Operating Income</td>
	    			<td align="right">' . number_format($noi/1000) . '</td>
	    			<td align="right">' . number_format($noi1/1000) . '</td>
	    			<td align="right">' . number_format($noi2/1000) . '</td>
	    			<td align="right">' . number_format($noi_dif1/1000) . '</td>
	    			<td align="right">' . number_format($noi_dif_percent1) . '%</td>
	    			<td align="right">' . number_format($noi_dif2/1000) . '</td>
	    			<td align="right">' . number_format($noi_dif_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td>NOI per Unit (P)</td>
	    			<td align="right">' . number_format($noi_unit, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit1, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit2, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit_dif1, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit_percent1) . '%</td>
	    			<td align="right">' . number_format($noi_unit_dif2, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td>NOI to Sales</td>
	    			<td align="right">' . number_format($noi_percent) . '%</td>
	    			<td align="right">' . number_format($noi_percent1) . '%</td>
	    			<td align="right">' . number_format($noi_percent2) . '%</td>
	    			<td align="right">' . number_format($noi_percent_dif1) . '%</td>
	    			<td align="right">' . number_format($noi_percent_percent1) . '%</td>
	    			<td align="right">' . number_format($noi_percent_dif2) . '%</td>
	    			<td align="right">' . number_format($noi_percent_percent2) . '%</td>
	    		</tr>
	    	</table>
	    ';

	    $pdf->writeHTML($pnl_tbl, true, false, true, false, '');

	    $this->watermark($pdf);
		$this->header($pdf);
		
		/*MONTHLY NOI SUMMARY PAGE*/

		$pdf->SetMargins(20, 20, 20, true);
		$pdf->AddPage('L');

		$pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $bc_name);
	    $pdf->Text(20, 46, 'MONTHLY NOI SUMMARY');
	    $pdf->Text(20, 52, 'Budget ' . $year);

	    $pdf->SetFont('arial', '', 9);


	    $nsp = $sales_unit > 0 ? $net_sales / $sales_unit : 0;
	    $nsp1 = $sales_unit1 > 0 ? $net_sales1 / $sales_unit1 : 0;
	    $nsp2 = $sales_unit2 > 0 ? $net_sales1 / $sales_unit2 : 0;

	    $get_pnl_month = $this->admin->get_query('
	    	SELECT dashboard_month_bc_summary_date, SUM(dashboard_month_bc_summary_sales_unit) as dashboard_month_bc_summary_sales_unit, SUM(dashboard_month_bc_summary_net_sales) as dashboard_month_bc_summary_net_sales, SUM(dashboard_month_bc_summary_variable_cost) as dashboard_month_bc_summary_variable_cost, (SELECT SUM(x.dashboard_opex_unit_amount) FROM dashboard_opex_unit_tbl x WHERE a.dashboard_month_bc_summary_date = x.dashboard_opex_unit_date AND x.dashboard_opex_unit_status = 1 AND YEAR(x.dashboard_opex_unit_date) = ' . $year . ') as unit_period_cost FROM dashboard_month_bc_summary_tbl a WHERE a.dashboard_month_bc_summary_year = ' . $year . ' AND a.dashboard_month_bc_summary_status = 1 GROUP BY dashboard_month_bc_summary_date ORDER BY dashboard_month_bc_summary_date ASC
	    ');

	    $sales_unit_td = '';
	    $nsp_unit_td = '';

	    $net_sales_td = '';

	    $variable_cost_td = '';
	    $variable_cost_unit_td = '';

	    $margin_td = '';
	    $margin_unit_td = '';
	    $margin_percent_td = '';

	    $period_cost_td = '';
	    $period_cost_unit_td = '';
	    $period_cost_percent_td = '';

	    $noi_td = '';
	    $noi_unit_td = '';
	    $noi_percent_td = '';

	    $count = 1;

	    foreach($get_pnl_month as $row_pnl){

	    	$pnl_month_date = $row_pnl->dashboard_month_bc_summary_date;

	    	$sales_unit_month = $row_pnl->dashboard_month_bc_summary_sales_unit;
	    	$sales_unit_arr[$count] = $sales_unit_month;

	    	$net_sales_month = $row_pnl->dashboard_month_bc_summary_net_sales;
	    	$net_sales_arr[$count] = $net_sales_month;

	    	$variable_cost_month = $row_pnl->dashboard_month_bc_summary_variable_cost + $row_pnl->unit_period_cost;
	    	$variable_cost_arr[$count] = $variable_cost_month;

	    	$variable_cost_unit_month = $sales_unit_month > 0 ? $variable_cost_month / $sales_unit_month : 0;

	    	$nsp_unit_month = $sales_unit_month > 0 ? $net_sales_month / $sales_unit_month : 0;

	    	$margin_month = $net_sales_month - $variable_cost_month;
	    	$margin_unit_month = $sales_unit_month > 0 ? $margin_month / $sales_unit_month : 0;
	    	$margin_percent_month = $net_sales_month > 0 ? ($margin_month / $net_sales_month) * 100 : 0;

	    	$other_expense_month = 0;

	    	

	    	$check_pnl_period_cost = $this->admin->check_data('dashboard_opex_tbl', array('dashboard_opex_date' => $pnl_month_date, 'dashboard_opex_status' => 1), TRUE, 'SUM(dashboard_opex_amount) as period_cost_month');

	    	$period_cost_month = 0;
	    	if($check_pnl_period_cost['result'] == TRUE){
	    		$period_cost_month = $check_pnl_period_cost['info']->period_cost_month;
	    	}

	    	$period_cost_arr[$count] = $period_cost_month;

	    	$period_cost_unit_month = $sales_unit_month > 0 ? $period_cost_month / $sales_unit_month : 0;
	    	$period_cost_percent_month = $net_sales_month > 0 ? ($period_cost_month / $net_sales_month) * 100 : 0;

	    	$noi_month = $margin_month - $period_cost_month - $other_expense_month;
	    	$noi_unit_month = $net_sales_month > 0 ? ($noi_month / $net_sales_month) * 100 : 0;
	    	$noi_percent_month = $net_sales_month > 0 ? ($noi_month / $net_sales_month) * 100 : 0;

	    	
	    	$sales_unit_td .= '<td align="right">' . number_format($sales_unit_month/1000) . '</td>';

	    	$net_sales_td .= '<td align="right">' . number_format($net_sales_month/1000) . '</td>';

	    	$nsp_unit_td .= '<td align="right">' . number_format($nsp_unit_month, 2) . '</td>';

	    	$variable_cost_td .= '<td align="right">' . number_format($variable_cost_month/1000) . '</td>';

	    	$variable_cost_unit_td .= '<td align="right">' . number_format($variable_cost_unit_month, 2) . '</td>';

	    	$margin_td .= '<td align="right">' . number_format($margin_month/1000) . '</td>';
	    	$margin_unit_td .= '<td align="right">' . number_format($margin_unit_month, 2) . '</td>';
	    	$margin_percent_td .= '<td align="right">' . number_format($margin_percent_month) . '%</td>';

	    	$period_cost_td .= '<td align="right">' . number_format($period_cost_month/1000) . '</td>';
	    	$period_cost_unit_td .= '<td align="right">' . number_format($period_cost_unit_month, 2) . '</td>';
	    	$period_cost_percent_td .= '<td align="right">' . number_format($period_cost_percent_month) . '%</td>';

	    	$noi_td .= '<td align="right">' . number_format($noi_month/1000) . '</td>';
	    	$noi_unit_td .= '<td align="right">' . number_format($noi_unit_month, 2) . '</td>';
	    	$noi_percent_td .= '<td align="right">' . number_format($noi_percent_month) . '%</td>';

	    	$count++;
	    }

	    $pnl_monthly_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="13%"></th>
	    			<th align="center" width="7%"><strong>TOTAL</strong></th>
	    			<th align="center" width="5%"><strong>JAN</strong></th>
	    			<th align="center" width="6.6%"><strong>FEB</strong></th>
	    			<th align="center" width="6.6%"><strong>MAR</strong></th>
	    			<th align="center" width="6.6%"><strong>APR</strong></th>
	    			<th align="center" width="6.6%"><strong>MAY</strong></th>
	    			<th align="center" width="6.6%"><strong>JUN</strong></th>
	    			<th align="center" width="6.6%"><strong>JUL</strong></th>
	    			<th align="center" width="6.6%"><strong>AUG</strong></th>
	    			<th align="center" width="6.6%"><strong>SEP</strong></th>
	    			<th align="center" width="6.6%"><strong>OCT</strong></th>
	    			<th align="center" width="6.6%"><strong>NOV</strong></th>
	    			<th align="center" width="6.6%"><strong>DEC</strong></th>
	    		</tr>

	    		<tr>
	    			<td align="left">Sales Volume, in Unit</td>
	    			<td align="right">' . number_format($sales_unit/1000) . '</td>
	    			' . $sales_unit_td . '
	    		</tr>

	    		<tr>
	    			<td align="">NET SALES</td>
	    			<td align="right">' . number_format($net_sales/1000) . '</td>
	    			' . $net_sales_td . '
	    		</tr>

	    		<tr>
	    			<td align="">NSP per Unit</td>
	    			<td align="right">' . number_format($nsp, 2) . '</td>
	    			' . $nsp_unit_td . '
	    		</tr>

	    		<tr>
	    			<td align="">Variable Cost</td>
	    			<td align="right">' . number_format($variable_cost/1000) . '</td>
	    			' . $variable_cost_td . '
	    		</tr>

	    		<tr>
	    			<td align="">Var. Cost/Unit</td>
	    			<td align="right">' . number_format($variable_cost_unit, 2) . '</td>
	    			' . $variable_cost_unit_td . '
	    		</tr>

	    		<tr>
	    			<td align="">Contribution Margin</td>
	    			<td align="right">' . number_format($margin/1000) . '</td>
	    			' . $margin_td . '
	    		</tr>

	    		<tr>
	    			<td align="">CM Per Unit</td>
	    			<td align="right">' . number_format($margin_unit, 2) . '</td>
	    			' . $margin_unit_td . '
	    		</tr>

	    		<tr>
	    			<td align="">CM (%)</td>
	    			<td align="right">' . number_format($margin_percent) . '%</td>
	    			' . $margin_percent_td . '
	    		</tr>

	    		<tr>
	    			<td align="">Period Cost</td>
	    			<td align="right">' . number_format($period_cost/1000) . '</td>
	    			' . $period_cost_td . '
	    		</tr>

	    		<tr>
	    			<td align="">Period Cost/Unit</td>
	    			<td align="right">' . number_format($period_cost_unit, 2) . '</td>
	    			' . $period_cost_unit_td . '
	    		</tr>

	    		<tr>
	    			<td align="">Other Income/Expenses</td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    		</tr>

	    		<tr>
	    			<td align="">Others - Per Unit</td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    		</tr>

	    		<tr>
	    			<td align="">NOI</td>
	    			<td align="right">' . number_format($noi/1000) . '</td>
	    			' . $noi_td . '
	    		</tr>

	    		<tr>
	    			<td align="">NOI per unit</td>
	    			<td align="right">' . number_format($noi_unit, 2) . '</td>
	    			' . $noi_unit_td . '
	    		</tr>

	    		<tr>
	    			<td align="">% NOI to Net Sales</td>
	    			<td align="right">' . number_format($noi_percent) . '%</td>
	    			' . $noi_percent_td . '
	    		</tr>
	    	</table>
	    ';

	    $pdf->writeHTML($pnl_monthly_tbl, true, false, true, false, '');

	    $this->watermark_landscape($pdf);
		$this->header_landscape($pdf);


		/*PNL PER SEGMENT PAGE*/

		$pdf->AddPage('P');

		$pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $bc_name);
	    $pdf->Text(20, 46, 'NET OPERATING INCOME PER SEGMENT');
	    $pdf->Text(20, 52, 'Budget ' . $year);
	    $pdf->Text(20, 58, '(In Thousands)');

	    $pdf->SetFont('arial', '', 8);

	    $select_summary = 'SUM(dashboard_brand_summary_sales_unit) as sales_unit, SUM(dashboard_brand_summary_net_sales) as net_sales, SUM(dashboard_brand_summary_variable_cost) as variable_cost';

	    $get_brand_summary_com = $this->admin->check_data('dashboard_brand_summary_tbl', 'brand_id IN (2, 10, 11, 12, 14, 16, 17)  AND YEAR(dashboard_brand_summary_date) = ' .  $year . ' AND dashboard_brand_summary_status = 1', TRUE, $select_summary);

	    $com_net_sales = 0;
	    $com_variable_cost = 0;
	    $com_sales_unit = 0;
	    $com_nsp = 0;
	    $com_variable_unit = 0;
	    $com_margin = 0;
	    $com_margin_unit = 0;
	    $com_margin_percent = 0;
	    if($get_brand_summary_com['result'] == TRUE){
	    	$com_net_sales = $get_brand_summary_com['info']->net_sales;
	    	$com_sales_unit = $get_brand_summary_com['info']->sales_unit;
	    	$com_variable_cost = $get_brand_summary_com['info']->variable_cost;
	    	$com_nsp = $com_sales_unit > 0 ? $com_net_sales / $com_sales_unit : 0;
	    	$com_variable_unit = $com_sales_unit > 0 ? $com_variable_cost / $com_sales_unit : 0;
	    	$com_margin = $com_net_sales - $com_variable_cost;
	    	$com_margin_unit = $com_sales_unit > 0 ?  $com_margin / $com_sales_unit : 0;
	    	$com_margin_percent = $com_net_sales > 0 ? ($com_margin / $com_net_sales) * 100 : 0;
	    }

	    $select_com_summary_period = 'SUM(dashboard_opex_amount) + (SELECT SUM(x.dashboard_opex_unit_amount) FROM dashboard_opex_unit_tbl x, cost_center_group_tbl y WHERE x.cost_center_group_id = y.cost_center_group_id AND x.dashboard_opex_unit_status = 1 AND y.cost_center_group_name = "COM" AND YEAR(x.dashboard_opex_unit_date) = ' . $year . ') as total_period_cost';

	    $get_brand_period_com = $this->admin->check_data('dashboard_opex_tbl', array('cost_center_group_id' => 1, 'YEAR(dashboard_opex_date)' => $year, 'dashboard_opex_status' => 1), TRUE, $select_com_summary_period);

	    $com_period = 0;
	    $com_period_unit = 0;
	    if($get_brand_period_com['result'] == TRUE){
	    	$com_period = $get_brand_period_com['info']->total_period_cost;
	    	$com_period_unit = $com_sales_unit > 0 ?  $com_period / $com_sales_unit : 0;
	    }

	    $com_noi = $com_margin - $com_period;
	    $com_noi_unit = $com_sales_unit > 0 ? $com_noi / $com_sales_unit: 0;
	    $com_noi_percent = $com_net_sales > 0 ? ($com_noi / $com_net_sales) * 100 : 0;


	    $get_brand_summary_ctg = $this->admin->check_data('dashboard_brand_summary_tbl', array('brand_id' => 1, 'YEAR(dashboard_brand_summary_date)' => $year, 'dashboard_brand_summary_status' => 1), TRUE, $select_summary);

	    $ctg_net_sales = 0;
	    $ctg_variable_cost = 0;
	    $ctg_sales_unit = 0;
	    $ctg_nsp = 0;
	    $ctg_variable_unit = 0;
	    $ctg_margin = 0;
	    $ctg_margin_unit = 0;
	    $ctg_margin_percent = 0;
	    if($get_brand_summary_ctg['result'] == TRUE){
	    	$ctg_net_sales = $get_brand_summary_ctg['info']->net_sales;
	    	$ctg_sales_unit = $get_brand_summary_ctg['info']->sales_unit;
	    	$ctg_variable_cost = $get_brand_summary_ctg['info']->variable_cost;
	    	$ctg_nsp = $ctg_sales_unit > 0 ? $ctg_net_sales / $ctg_sales_unit : 0;
	    	$ctg_variable_unit = $ctg_sales_unit > 0 ? $ctg_variable_cost / $ctg_sales_unit : 0;
	    	$ctg_margin = $ctg_net_sales - $ctg_variable_cost;
	    	$ctg_margin_unit = $ctg_sales_unit > 0 ?  $ctg_margin / $ctg_sales_unit : 0;
	    	$ctg_margin_percent = $ctg_net_sales > 0 ? ($ctg_margin / $ctg_net_sales) * 100 : 0;
	    }

	    $select_ctg_summary_period = 'SUM(dashboard_opex_amount) + (SELECT SUM(x.dashboard_opex_unit_amount) FROM dashboard_opex_unit_tbl x, cost_center_group_tbl y WHERE x.cost_center_group_id = y.cost_center_group_id AND x.dashboard_opex_unit_status = 1 AND y.cost_center_group_name = "CTG" AND YEAR(x.dashboard_opex_unit_date) = ' . $year . ') as total_period_cost';
	    $get_brand_period_ctg = $this->admin->check_data('dashboard_opex_tbl', array('cost_center_group_id' => 2, 'YEAR(dashboard_opex_date)' => $year, 'dashboard_opex_status' => 1), TRUE, $select_ctg_summary_period);


	    $ctg_period = 0;
	    $ctg_period_unit = 0;
	    if($get_brand_period_ctg['result'] == TRUE){
	    	$ctg_period = $get_brand_period_ctg['info']->total_period_cost;
	    	$ctg_period_unit = $ctg_sales_unit > 0 ?  $ctg_period / $ctg_sales_unit : 0;
	    }

	    $ctg_noi = $ctg_margin - $ctg_period;
	    $ctg_noi_unit = $ctg_sales_unit > 0 ? $ctg_noi / $ctg_sales_unit: 0;
	    $ctg_noi_percent = $ctg_net_sales > 0 ? ($ctg_noi / $ctg_net_sales) * 100 : 0;


	    $get_brand_summary_ur = $this->admin->check_data('dashboard_brand_summary_tbl', array('brand_id' => 5, 'YEAR(dashboard_brand_summary_date)' => $year, 'dashboard_brand_summary_status' => 1), TRUE, $select_summary);

	    $ur_net_sales = 0;
	    $ur_sales_unit = 0;
	    $ur_variable_cost = 0;
	    $ur_nsp = 0;
	    $ur_variable_unit = 0;
	    $ur_margin = 0;
	    $ur_margin_unit = 0;
	    $ur_margin_percent = 0;
	    if($get_brand_summary_ur['result'] == TRUE){
	    	$ur_net_sales = $get_brand_summary_ur['info']->net_sales;
	    	$ur_sales_unit = $get_brand_summary_ur['info']->sales_unit;
	    	$ur_variable_cost = $get_brand_summary_ur['info']->variable_cost;
	    	$ur_nsp = $ur_sales_unit > 0 ? $ur_net_sales / $ur_sales_unit : 0;
	    	$ur_variable_unit = $ur_sales_unit > 0 ? $ur_variable_cost / $ur_sales_unit : 0;
	    	$ur_margin = $ur_net_sales - $ur_variable_cost;
	    	$ur_margin_unit = $ur_sales_unit > 0 ?  $ur_margin / $ur_sales_unit : 0;
	    	$ur_margin_percent = $ur_net_sales > 0 ? ($ur_margin / $ur_net_sales) * 100 : 0;
	    }

	    $select_ur_summary_period = 'SUM(dashboard_opex_amount) + (SELECT SUM(x.dashboard_opex_unit_amount) FROM dashboard_opex_unit_tbl x, cost_center_group_tbl y WHERE x.cost_center_group_id = y.cost_center_group_id AND x.dashboard_opex_unit_status = 1 AND y.cost_center_group_name = "UR" AND YEAR(x.dashboard_opex_unit_date) = ' . $year . ') as total_period_cost';

	    $get_brand_period_ur = $this->admin->check_data('dashboard_opex_tbl', array('cost_center_group_id' => 3, 'YEAR(dashboard_opex_date)' => $year, 'dashboard_opex_status' => 1), TRUE, $select_ur_summary_period);

	    $ur_period = 0;
	    $ur_period_unit = 0;
	    if($get_brand_period_ur['result'] == TRUE){
	    	$ur_period = $get_brand_period_ur['info']->total_period_cost;
	    	$ur_period_unit = $ur_sales_unit > 0 ?  $ur_period / $ur_sales_unit : 0;
	    }

	    $ur_noi = $ur_margin - $ur_period;
	    $ur_noi_unit = $ur_sales_unit > 0 ? $ur_noi / $ur_sales_unit: 0;
	    $ur_noi_percent = $ur_net_sales > 0 ? ($ur_noi / $ur_net_sales) * 100 : 0;


	    $get_brand_summary_rsl = $this->admin->check_data('dashboard_brand_summary_tbl', array('brand_id' => 15, 'YEAR(dashboard_brand_summary_date)' => $year, 'dashboard_brand_summary_status' => 1), TRUE, $select_summary);

	    $rsl_net_sales = 0;
	    $rsl_sales_unit = 0;
	    $rsl_variable_cost = 0;
	    $rsl_nsp = 0;
	    $rsl_variable_unit = 0;
	    $rsl_margin = 0;
	    $rsl_margin_unit = 0;
	    $rsl_margin_percent = 0;
	    if($get_brand_summary_rsl['result'] == TRUE){
	    	$rsl_net_sales = $get_brand_summary_rsl['info']->net_sales;
	    	$rsl_sales_unit = $get_brand_summary_rsl['info']->sales_unit;
	    	$rsl_variable_cost = $get_brand_summary_rsl['info']->variable_cost;
	    	$rsl_nsp = $rsl_sales_unit > 0 ? $rsl_net_sales / $rsl_sales_unit : 0;
	    	$rsl_variable_unit = $rsl_sales_unit > 0 ? $rsl_variable_cost / $rsl_sales_unit : 0;
	    	$rsl_margin = $rsl_net_sales - $rsl_variable_cost;
	    	$rsl_margin_unit = $rsl_sales_unit > 0 ?  $rsl_margin / $rsl_sales_unit : 0;
	    	$rsl_margin_percent = $rsl_net_sales > 0 ? ($rsl_margin / $rsl_net_sales) * 100 : 0;
	    }

	    $select_rsl_summary_period = 'SUM(dashboard_opex_amount) + (SELECT SUM(x.dashboard_opex_unit_amount) FROM dashboard_opex_unit_tbl x, cost_center_group_tbl y WHERE x.cost_center_group_id = y.cost_center_group_id AND x.dashboard_opex_unit_status = 1 AND y.cost_center_group_name = "RSL" AND YEAR(x.dashboard_opex_unit_date) = ' . $year . ') as total_period_cost';
	    $get_brand_period_rsl = $this->admin->check_data('dashboard_opex_tbl', array('cost_center_group_id' => 7, 'YEAR(dashboard_opex_date)' => $year, 'dashboard_opex_status' => 1), TRUE, $select_rsl_summary_period);

	    $rsl_period = 0;
	    $rsl_period_unit = 0;
	    if($get_brand_period_rsl['result'] == TRUE){
	    	$rsl_period = $get_brand_period_rsl['info']->total_period_cost;
	    	$rsl_period_unit = $rsl_sales_unit > 0 ?  $rsl_period / $rsl_sales_unit : 0;
	    }

	    $rsl_noi = $rsl_margin - $rsl_period;
	    $rsl_noi_unit = $rsl_sales_unit > 0 ? $rsl_noi / $rsl_sales_unit: 0;
	    $rsl_noi_percent = $rsl_net_sales > 0 ? ($rsl_noi / $rsl_net_sales) * 100 : 0;

	    $pnl_segment_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center"></th>
	    			<th align="center"><strong>TOTAL</strong></th>
	    			<th align="center"><strong>COM</strong></th>
	    			<th align="center"><strong>CTG</strong></th>
	    			<th align="center"><strong>URL</strong></th>
	    			<th align="center"><strong>RSL</strong></th>
	    		</tr>

	    		<tr>
	    			<td>Sales Volume, in Unit</td>
	    			<td align="right">' . number_format($sales_unit/1000) . '</td>
	    			<td align="right">' . number_format($com_sales_unit/1000) . '</td>
	    			<td align="right">' . number_format($ctg_sales_unit/1000) . '</td>
	    			<td align="right">' . number_format($ur_sales_unit/1000) . '</td>
	    			<td align="right">' . number_format($rsl_sales_unit/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>NET SALES</td>
	    			<td align="right">' . number_format($net_sales/1000) . '</td>
	    			<td align="right">' . number_format($com_net_sales/1000) . '</td>
	    			<td align="right">' . number_format($ctg_net_sales/1000) . '</td>
	    			<td align="right">' . number_format($ur_net_sales/1000) . '</td>
	    			<td align="right">' . number_format($rsl_net_sales/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>NSP per Unit (P)</td>
	    			<td align="right">' . number_format($nsp, 2) . '</td>
	    			<td align="right">' . number_format($com_nsp, 2) . '</td>
	    			<td align="right">' . number_format($ctg_nsp, 2) . '</td>
	    			<td align="right">' . number_format($ur_nsp, 2) . '</td>
	    			<td align="right">' . number_format($rsl_nsp, 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Variable Cost</td>
	    			<td align="right">' . number_format($variable_cost/1000) . '</td>
	    			<td align="right">' . number_format($com_variable_cost/1000) . '</td>
	    			<td align="right">' . number_format($ctg_variable_cost/1000) . '</td>
	    			<td align="right">' . number_format($ur_variable_cost/1000) . '</td>
	    			<td align="right">' . number_format($rsl_variable_cost/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Var. Cost per Unit (P)</td>
	    			<td align="right">' . number_format($variable_cost_unit, 2) . '</td>
	    			<td align="right">' . number_format($com_variable_unit, 2) . '</td>
	    			<td align="right">' . number_format($ctg_variable_unit, 2) . '</td>
	    			<td align="right">' . number_format($ur_variable_unit, 2) . '</td>
	    			<td align="right">' . number_format($rsl_variable_unit, 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Contribution Margin</td>
	    			<td align="right">' . number_format($margin/1000) . '</td>
	    			<td align="right">' . number_format($com_margin/1000) . '</td>
	    			<td align="right">' . number_format($ctg_margin/1000) . '</td>
	    			<td align="right">' . number_format($ur_margin/1000) . '</td>
	    			<td align="right">' . number_format($rsl_margin/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>CM per Unit (P)</td>
	    			<td align="right">' . number_format($margin_unit, 2) . '</td>
	    			<td align="right">' . number_format($com_margin_unit, 2) . '</td>
	    			<td align="right">' . number_format($ctg_margin_unit, 2) . '</td>
	    			<td align="right">' . number_format($ur_margin_unit, 2) . '</td>
	    			<td align="right">' . number_format($rsl_margin_unit, 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>CM %</td>
	    			<td align="right">' . number_format($margin_percent) . '%</td>
	    			<td align="right">' . number_format($com_margin_percent) . '%</td>
	    			<td align="right">' . number_format($ctg_margin_percent) . '%</td>
	    			<td align="right">' . number_format($ur_margin_percent) . '%</td>
	    			<td align="right">' . number_format($rsl_margin_percent) . '%</td>
	    		</tr>

	    		<tr>
	    			<td>Period Cost</td>
	    			<td align="right">' . number_format($period_cost/1000) . '</td>
	    			<td align="right">' . number_format($com_period/1000) . '</td>
	    			<td align="right">' . number_format($ctg_period/1000) . '</td>
	    			<td align="right">' . number_format($ur_period/1000) . '</td>
	    			<td align="right">' . number_format($rsl_period/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Period Cost per Unit (P)</td>
	    			<td align="right">' . number_format($period_cost_unit, 2) . '</td>
	    			<td align="right">' . number_format($com_period_unit, 2) . '</td>
	    			<td align="right">' . number_format($ctg_period_unit, 2) . '</td>
	    			<td align="right">' . number_format($ur_period_unit, 2) . '</td>
	    			<td align="right">' . number_format($rsl_period_unit, 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Other Income/Expenses</td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    		</tr>

	    		<tr>
	    			<td>Others per Unit (P)</td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    		</tr>

	    		<tr>
	    			<td>Net Operating Income</td>
	    			<td align="right">' . number_format($noi/1000) . '</td>
	    			<td align="right">' . number_format($com_noi/1000) . '</td>
	    			<td align="right">' . number_format($ctg_noi/1000) . '</td>
	    			<td align="right">' . number_format($ur_noi/1000) . '</td>
	    			<td align="right">' . number_format($rsl_noi/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>NOI per Unit</td>
	    			<td align="right">' . number_format($noi_unit, 2) . '</td>
	    			<td align="right">' . number_format($com_noi_unit, 2) . '</td>
	    			<td align="right">' . number_format($ctg_noi_unit, 2) . '</td>
	    			<td align="right">' . number_format($ur_noi_unit, 2) . '</td>
	    			<td align="right">' . number_format($rsl_noi_unit, 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>NOI to Sales</td>
	    			<td align="right">' . number_format($noi_percent) . '%</td>
	    			<td align="right">' . number_format($com_noi_percent) . '%</td>
	    			<td align="right">' . number_format($ctg_noi_percent) . '%</td>
	    			<td align="right">' . number_format($ur_noi_percent) . '%</td>
	    			<td align="right">' . number_format($rsl_noi_percent) . '%</td>
	    		</tr>
	    	</table>

	    ';

	    $pdf->writeHTML($pnl_segment_tbl, true, false, true, false, '');


	    $this->watermark($pdf);
		$this->header($pdf);


		/*Monthly NOI Summary - Commodity*/

		$pdf->SetMargins(20, 20, 20, true);
		$pdf->AddPage('L');

		$pdf->SetTextColor(0,0,0);

	    $pdf->SetFont('arialb', '', 12);
	    $pdf->Text(20, 30, $bc_name);
	    $pdf->Text(20, 36, 'MONTHLY NOI SUMMARY - COMMODITY');
	    $pdf->Text(20, 42, 'Budget ' . $year);
	    $pdf->Text(20, 48, '(In Thousands)');

	    $pdf->SetFont('arial', '', 8);

	    $com_data['net_sales'] = $com_net_sales;
	    $com_data['variable_cost'] = $com_variable_cost;
	    $com_data['sales_unit'] = $com_sales_unit;
	    $com_data['nsp'] = $com_nsp;
	    $com_data['variable_unit'] = $com_variable_unit;
	    $com_data['margin'] = $com_margin;
	    $com_data['margin_unit'] = $com_margin_unit;
	    $com_data['margin_percent'] = $com_margin_percent;
	    $com_data['period'] = $get_brand_period_com['info']->total_period_cost;
	    $com_data['period_unit'] = $com_sales_unit > 0 ?  $com_period / $com_sales_unit : 0;

	    $com_data['noi'] = $com_margin - $com_period;
	    $com_data['noi_unit'] = $com_sales_unit > 0 ? $com_noi / $com_sales_unit: 0;
	    $com_data['noi_percent'] = $com_net_sales > 0 ? ($com_noi / $com_net_sales) * 100 : 0;

	    $brand_list = '(2, 10, 11, 12, 14, 16, 17)';
	    $cost_group = 1;
	    $noi_com_data = $this->_get_noi_segment_month($year, $com_data, $brand_list, $cost_group);

	    $noi_com_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="10%"><strong>COMMODITY</strong></th>
	    			<th align="center"><strong>TOTAL</strong></th>
	    			<th align="center"><strong>JAN</strong></th>
	    			<th align="center"><strong>FEB</strong></th>
	    			<th align="center"><strong>MAR</strong></th>
	    			<th align="center"><strong>APR</strong></th>
	    			<th align="center"><strong>MAY</strong></th>
	    			<th align="center"><strong>JUN</strong></th>
	    			<th align="center"><strong>JUL</strong></th>
	    			<th align="center"><strong>AUG</strong></th>
	    			<th align="center"><strong>SEP</strong></th>
	    			<th align="center"><strong>OCT</strong></th>
	    			<th align="center"><strong>NOV</strong></th>
	    			<th align="center"><strong>DEC</strong></th>
	    		</tr>

	    		 ' . $noi_com_data . '

	   		</table>
	    ';


	    $pdf->writeHTML($noi_com_tbl, true, false, true, false, '');

	    $this->watermark_landscape($pdf);
		$this->header_landscape($pdf);


		/*Monthly NOI Summary - CTG*/
		$pdf->SetMargins(20, 20, 20, true);
		$pdf->AddPage('L');

		$pdf->SetTextColor(0,0,0);

	    $pdf->SetFont('arialb', '', 12);
	    $pdf->Text(20, 30, $bc_name);
	    $pdf->Text(20, 36, 'MONTHLY NOI SUMMARY - CHOOKS-TO-GO');
	    $pdf->Text(20, 42, 'Budget ' . $year);
	    $pdf->Text(20, 48, '(In Thousands)');

	    $pdf->SetFont('arial', '', 8);

	    $ctg_data['net_sales'] = $ctg_net_sales;
	    $ctg_data['variable_cost'] = $ctg_variable_cost;
	    $ctg_data['sales_unit'] = $ctg_sales_unit;
	    $ctg_data['nsp'] = $ctg_nsp;
	    $ctg_data['variable_unit'] = $ctg_variable_unit;
	    $ctg_data['margin'] = $ctg_margin;
	    $ctg_data['margin_unit'] = $ctg_margin_unit;
	    $ctg_data['margin_percent'] = $ctg_margin_percent;
	    $ctg_data['period'] = $ctg_period;
	    $ctg_data['period_unit'] = $ctg_sales_unit > 0 ?  $ctg_period / $ctg_sales_unit : 0;

	    $ctg_data['noi'] = $ctg_margin - $ctg_period;
	    $ctg_data['noi_unit'] = $ctg_sales_unit > 0 ? $ctg_noi / $ctg_sales_unit: 0;
	    $ctg_data['noi_percent'] = $ctg_net_sales > 0 ? ($ctg_noi / $ctg_net_sales) * 100 : 0;

	    $brand_list = '(1)';
	    $cost_group = 2;
	    $noi_ctg_data = $this->_get_noi_segment_month($year, $ctg_data, $brand_list, $cost_group);

	    $noi_ctg_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="10%"><strong>CHOOKS-TO-GO</strong></th>
	    			<th align="center"><strong>TOTAL</strong></th>
	    			<th align="center"><strong>JAN</strong></th>
	    			<th align="center"><strong>FEB</strong></th>
	    			<th align="center"><strong>MAR</strong></th>
	    			<th align="center"><strong>APR</strong></th>
	    			<th align="center"><strong>MAY</strong></th>
	    			<th align="center"><strong>JUN</strong></th>
	    			<th align="center"><strong>JUL</strong></th>
	    			<th align="center"><strong>AUG</strong></th>
	    			<th align="center"><strong>SEP</strong></th>
	    			<th align="center"><strong>OCT</strong></th>
	    			<th align="center"><strong>NOV</strong></th>
	    			<th align="center"><strong>DEC</strong></th>
	    		</tr>

	    		 ' . $noi_ctg_data . '

	   		</table>
	    ';

	    $pdf->writeHTML($noi_ctg_tbl, true, false, true, false, '');

	    $this->watermark_landscape($pdf);
		$this->header_landscape($pdf);


	    /*Monthly NOI Summary - UR*/
	    $pdf->SetMargins(20, 20, 20, true);
		$pdf->AddPage('L');

		$pdf->SetTextColor(0,0,0);

	    $pdf->SetFont('arialb', '', 12);
	    $pdf->Text(20, 30, $bc_name);
	    $pdf->Text(20, 36, 'MONTHLY NOI SUMMARY - ULING ROASTERS');
	    $pdf->Text(20, 42, 'Budget ' . $year);
	    $pdf->Text(20, 48, '(In Thousands)');

	    $pdf->SetFont('arial', '', 8);

	    $ur_data['net_sales'] = $ur_net_sales;
	    $ur_data['variable_cost'] = $ur_variable_cost;
	    $ur_data['sales_unit'] = $ur_sales_unit;
	    $ur_data['nsp'] = $ur_nsp;
	    $ur_data['variable_unit'] = $ur_variable_unit;
	    $ur_data['margin'] = $ur_margin;
	    $ur_data['margin_unit'] = $ur_margin_unit;
	    $ur_data['margin_percent'] = $ur_margin_percent;
	    $ur_data['period'] = $ur_period;
	    $ur_data['period_unit'] = $ur_sales_unit > 0 ?  $ur_period / $ur_sales_unit : 0;

	    $ur_data['noi'] = $ur_margin - $ur_period;
	    $ur_data['noi_unit'] = $ur_sales_unit > 0 ? $ur_noi / $ur_sales_unit: 0;
	    $ur_data['noi_percent'] = $ur_net_sales > 0 ? ($ur_noi / $ur_net_sales) * 100 : 0;

	    $brand_list = '(5)';
	    $cost_group = 3;
	    $noi_ur_data = $this->_get_noi_segment_month($year, $ur_data, $brand_list, $cost_group);

	    $noi_ur_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="10%"><strong>ULING ROASTERS</strong></th>
	    			<th align="center"><strong>TOTAL</strong></th>
	    			<th align="center"><strong>JAN</strong></th>
	    			<th align="center"><strong>FEB</strong></th>
	    			<th align="center"><strong>MAR</strong></th>
	    			<th align="center"><strong>APR</strong></th>
	    			<th align="center"><strong>MAY</strong></th>
	    			<th align="center"><strong>JUN</strong></th>
	    			<th align="center"><strong>JUL</strong></th>
	    			<th align="center"><strong>AUG</strong></th>
	    			<th align="center"><strong>SEP</strong></th>
	    			<th align="center"><strong>OCT</strong></th>
	    			<th align="center"><strong>NOV</strong></th>
	    			<th align="center"><strong>DEC</strong></th>
	    		</tr>

	    		 ' . $noi_ur_data . '

	   		</table>
	    ';

	    $pdf->writeHTML($noi_ur_tbl, true, false, true, false, '');

	    $this->watermark_landscape($pdf);
		$this->header_landscape($pdf);


		/*Monthly NOI Summary - Reseller*/

		$pdf->SetMargins(20, 20, 20, true);
		$pdf->AddPage('L');

		$pdf->SetTextColor(0,0,0);

	    $pdf->SetFont('arialb', '', 12);
	    $pdf->Text(20, 30, $bc_name);
	    $pdf->Text(20, 36, 'MONTHLY NOI SUMMARY - RESELLERS');
	    $pdf->Text(20, 42, 'Budget ' . $year);
	    $pdf->Text(20, 48, '(In Thousands)');

	    $pdf->SetFont('arial', '', 8);

	    $rsl_data['net_sales'] = $rsl_net_sales;
	    $rsl_data['variable_cost'] = $rsl_variable_cost;
	    $rsl_data['sales_unit'] = $rsl_sales_unit;
	    $rsl_data['nsp'] = $rsl_nsp;
	    $rsl_data['variable_unit'] = $rsl_variable_unit;
	    $rsl_data['margin'] = $rsl_margin;
	    $rsl_data['margin_unit'] = $rsl_margin_unit;
	    $rsl_data['margin_percent'] = $rsl_margin_percent;
	    $rsl_data['period'] = $rsl_period;
	    $rsl_data['period_unit'] = $rsl_sales_unit > 0 ?  $rsl_period / $rsl_sales_unit : 0;

	    $rsl_data['noi'] = $rsl_margin - $rsl_period;
	    $rsl_data['noi_unit'] = $rsl_sales_unit > 0 ? $rsl_noi / $rsl_sales_unit: 0;
	    $rsl_data['noi_percent'] = $rsl_net_sales > 0 ? ($rsl_noi / $rsl_net_sales) * 100 : 0;

	    $brand_list = '(15)';
	    $cost_group = 7;
	    $noi_rsl_data = $this->_get_noi_segment_month($year, $rsl_data, $brand_list, $cost_group);

	    $noi_rsl_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="10%"><strong>RESELLERS</strong></th>
	    			<th align="center"><strong>TOTAL</strong></th>
	    			<th align="center"><strong>JAN</strong></th>
	    			<th align="center"><strong>FEB</strong></th>
	    			<th align="center"><strong>MAR</strong></th>
	    			<th align="center"><strong>APR</strong></th>
	    			<th align="center"><strong>MAY</strong></th>
	    			<th align="center"><strong>JUN</strong></th>
	    			<th align="center"><strong>JUL</strong></th>
	    			<th align="center"><strong>AUG</strong></th>
	    			<th align="center"><strong>SEP</strong></th>
	    			<th align="center"><strong>OCT</strong></th>
	    			<th align="center"><strong>NOV</strong></th>
	    			<th align="center"><strong>DEC</strong></th>
	    		</tr>

	    		 ' . $noi_rsl_data . '

	   		</table>
	    ';

	    $pdf->writeHTML($noi_rsl_tbl, true, false, true, false, '');

	    $this->watermark_landscape($pdf);
		$this->header_landscape($pdf);


		/*Monthly Selling Price Page*/

		$pdf->SetMargins(20, 20, 20, true);
		$pdf->AddPage('L');

		$pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $bc_name);
	    $pdf->Text(20, 46, 'MONTHLY SELLING PRICES');
	    $pdf->Text(20, 52, 'Budget ' . $year);
	    $pdf->Text(20, 58, '(In Thousands)');

	    $pdf->SetFont('arial', '', 8);

	    $monthly_price_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center"><strong>SEGMENT</strong></th>
	    			<th align="center" width="50px;"><strong>PRODUCT</strong></th>
	    			<th align="center"><strong>YEAR</strong></th>
	    			<th align="center"><strong>JAN</strong></th>
	    			<th align="center"><strong>FEB</strong></th>
	    			<th align="center"><strong>MAR</strong></th>
	    			<th align="center"><strong>APR</strong></th>
	    			<th align="center"><strong>MAY</strong></th>
	    			<th align="center"><strong>JUN</strong></th>
	    			<th align="center"><strong>JUL</strong></th>
	    			<th align="center"><strong>AUG</strong></th>
	    			<th align="center"><strong>SEP</strong></th>
	    			<th align="center"><strong>OCT</strong></th>
	    			<th align="center"><strong>NOV</strong></th>
	    			<th align="center"><strong>DEC</strong></th>
	    		</tr>
	    ';


	    $data['price'] = $this->price_assumption_report($year);
	    $data['year'] = $year;
	    $monthly_price = $this->load->view('bc/bc_dashboard_price_content', $data, TRUE);
	    $arr_month_price = explode('||', $monthly_price);
	    $count_price = 1;
	    $price_content = '';
	    foreach($arr_month_price as $row_price){
	    	$monthly_price_tbl .= $row_price;

	    	if($count_price%12 == 0 && count($arr_month_price) != $count_price){
	    		$monthly_price_tbl .= '</table>';
	    		$pdf->writeHTML($monthly_price_tbl, true, false, true, false, '');

		    	$this->watermark_landscape($pdf);
				$this->header_landscape($pdf);

				$pdf->SetMargins(20, 20, 20, true);
				$pdf->AddPage('L');

				$pdf->SetTextColor(0,0,0);

			    $pdf->setFont('arialb', '', 12);
			    $pdf->Text(20, 40, $bc_name);
			    $pdf->Text(20, 46, 'MONTHLY SELLING PRICES');
			    $pdf->Text(20, 52, 'Budget ' . $year);
			    $pdf->Text(20, 58, '(In Thousands)');

			    $pdf->SetFont('arial', '', 8);

				$monthly_price_tbl = '<br /><br /><br /><br />
			    	<table border="1" cellpadding="3">
			    		<tr>
			    			<th align="center"><strong>SEGMENT</strong></th>
			    			<th align="center" width="50px;"><strong>PRODUCT</strong></th>
			    			<th align="center"><strong>YEAR</strong></th>
			    			<th align="center"><strong>JAN</strong></th>
			    			<th align="center"><strong>FEB</strong></th>
			    			<th align="center"><strong>MAR</strong></th>
			    			<th align="center"><strong>APR</strong></th>
			    			<th align="center"><strong>MAY</strong></th>
			    			<th align="center"><strong>JUN</strong></th>
			    			<th align="center"><strong>JUL</strong></th>
			    			<th align="center"><strong>AUG</strong></th>
			    			<th align="center"><strong>SEP</strong></th>
			    			<th align="center"><strong>OCT</strong></th>
			    			<th align="center"><strong>NOV</strong></th>
			    			<th align="center"><strong>DEC</strong></th>
			    		</tr>
			    ';

			}elseif(count($arr_month_price) == $count_price){
				$monthly_price_tbl .= '</table>';
	    		$pdf->writeHTML($monthly_price_tbl, true, false, true, false, '');

		    	$this->watermark_landscape($pdf);
				$this->header_landscape($pdf);
			}

			$count_price++;
	    }
	
		/*COMPARATIVE OPERATING EXPENSES PER COST CENTER Page*/

		$pdf->AddPage('L');

		$pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $bc_name);
	    $pdf->Text(20, 46, 'COMPARATIVE OPERATING EXPENSES PER COST CENTER');
	    $pdf->Text(20, 52, 'Budget ' . $year);

	    $pdf->SetFont('arial', '', 8);

	    $opex_cost_center_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th rowspan="2" align="center" width="30%;"><strong>DEPARTMENT</strong></th>
	    			<th align="center" width="10%"><strong>BUDGET</strong></th>
	    			<th colspan="2" align="center" width="20%"><strong>ACTUAL</strong></th>
	    			<th colspan="4" align="center" width="40%"><strong>VARIANCE</strong></th>
	    		</tr>

	    		<tr>
	    			<td align="center"><strong>' . $year . '</strong></td>
	    			<td align="center"><strong>' . ($year - 1) . '</strong></td>
	    			<td align="center"><strong>' . ($year - 2) . '</strong></td>
	    			<td align="center"><strong>' . $year  . ' vs ' . ($year - 1) . '</strong></td>
	    			<td align="center"><strong>%</strong></td>
	    			<td align="center"><strong>' . $year . ' vs ' . ($year - 2) . '</strong></td>
	    			<td align="center"><strong>%</strong></td>
	    		</tr>
	    ';

	    $opex_per_cost_center = $this->_opex_per_cost_center($year);
	    
	    $count_opex_cost_center = 1;
	    $ctg_sales = 0;
	    $com_sales = 0;
	    $ur_sales = 0;
	    $rsl_sales = 0;
	    foreach($opex_per_cost_center as $row_opex){
	    	$cost_center = $row_opex['cost_center_desc'];
	    	$opex_total_cost_center = $row_opex['total_amount'];
	    	$opex_total_cost_center1 = $row_opex['total_amount1'];
	    	$opex_total_cost_center2 = $row_opex['total_amount2'];
	    	$cost_center_group_name = $row_opex['cost_center_group_name'];
	    	$cost_center_type_id = $row_opex['cost_center_type_id'];
	    	if($cost_center_group_name == 'CTG' && $cost_center_type_id == 8){
	    		$join_cost_sales = array(
	    			'cost_center_group_tbl b' => 'a.cost_center_group_id = b.cost_center_group_id AND a.cost_center_type_id = 10 AND b.cost_center_group_name = "' . $cost_center_group_name . '" AND a.cost_center_status = 1'
	    		);
	    		$get_cost_sales = $this->admin->check_join('cost_center_tbl a', $join_cost_sales, TRUE);

	    		if($get_cost_sales['result'] == TRUE){
	    			$sales_cost_center = $get_cost_sales['info']->cost_center_desc;
	    			if(array_key_exists($sales_cost_center, $opex_per_cost_center)){
	    				
	    				$opex_per_cost_center[$sales_cost_center]['total_amount'] += $opex_total_cost_center;
	    				$opex_per_cost_center[$sales_cost_center]['total_amount1'] += $opex_total_cost_center1;
	    				$opex_per_cost_center[$sales_cost_center]['total_amount2'] += $opex_total_cost_center2;
	    			}
	    		}
	    	}elseif($cost_center_group_name == 'COM' && $cost_center_type_id == 8){
	    		$join_cost_sales = array(
	    			'cost_center_group_tbl b' => 'a.cost_center_group_id = b.cost_center_group_id AND a.cost_center_type_id = 10 AND b.cost_center_group_name = "' . $cost_center_group_name . '" AND a.cost_center_status = 1'
	    		);
	    		$get_cost_sales = $this->admin->check_join('cost_center_tbl a', $join_cost_sales, TRUE);

	    		if($get_cost_sales['result'] == TRUE){
	    			$sales_cost_center = $get_cost_sales['info']->cost_center_desc;
	    			if(array_key_exists($sales_cost_center, $opex_per_cost_center)){
	    				
	    				$opex_per_cost_center[$sales_cost_center]['total_amount'] += $opex_total_cost_center;
	    				$opex_per_cost_center[$sales_cost_center]['total_amount1'] += $opex_total_cost_center1;
	    				$opex_per_cost_center[$sales_cost_center]['total_amount2'] += $opex_total_cost_center2;
	    			}
	    		}
	    	}elseif($cost_center_group_name == 'UR' && $cost_center_type_id == 8){
	    		$join_cost_sales = array(
	    			'cost_center_group_tbl b' => 'a.cost_center_group_id = b.cost_center_group_id AND a.cost_center_type_id = 10 AND b.cost_center_group_name = "' . $cost_center_group_name . '" AND a.cost_center_status = 1'
	    		);
	    		$get_cost_sales = $this->admin->check_join('cost_center_tbl a', $join_cost_sales, TRUE);

	    		if($get_cost_sales['result'] == TRUE){
	    			$sales_cost_center = $get_cost_sales['info']->cost_center_desc;
	    			if(array_key_exists($sales_cost_center, $opex_per_cost_center)){
	    				$opex_per_cost_center[$sales_cost_center]['total_amount'] += $opex_total_cost_center;
	    				$opex_per_cost_center[$sales_cost_center]['total_amount1'] += $opex_total_cost_center1;
	    				$opex_per_cost_center[$sales_cost_center]['total_amount2'] += $opex_total_cost_center2;
	    			}else{

	    				$opex_per_cost_center[$sales_cost_center]['cost_center_desc'] = $sales_cost_center;
	    				$opex_per_cost_center[$sales_cost_center]['cost_center_group_name'] = $cost_center_group_name;
	    				$opex_per_cost_center[$sales_cost_center]['cost_center_type_id'] = 10;
	    				$opex_per_cost_center[$sales_cost_center]['total_amount'] = $opex_total_cost_center;
	    				$opex_per_cost_center[$sales_cost_center]['total_amount1'] = $opex_total_cost_center1;
	    				$opex_per_cost_center[$sales_cost_center]['total_amount2'] = $opex_total_cost_center2;
	    			}
	    		}
	    	}elseif($cost_center_group_name == 'RSL' && $cost_center_type_id == 8){
	    		$join_cost_sales = array(
	    			'cost_center_group_tbl b' => 'a.cost_center_group_id = b.cost_center_group_id AND a.cost_center_type_id = 10 AND b.cost_center_group_name = "' . $cost_center_group_name . '" AND a.cost_center_status = 1'
	    		);
	    		$get_cost_sales = $this->admin->check_join('cost_center_tbl a', $join_cost_sales, TRUE);

	    		if($get_cost_sales['result'] == TRUE){
	    			$sales_cost_center = $get_cost_sales['info']->cost_center_desc;
	    			if(array_key_exists($sales_cost_center, $opex_per_cost_center)){
	    				
	    				$opex_per_cost_center[$sales_cost_center]['total_amount'] += $opex_total_cost_center;
	    				$opex_per_cost_center[$sales_cost_center]['total_amount1'] += $opex_total_cost_center1;
	    				$opex_per_cost_center[$sales_cost_center]['total_amount2'] += $opex_total_cost_center2;
	    			}
	    		}
	    	}else{
	    		/*echo $cost_center . ' - ' . $cost_center_group_name . ' - ' . $cost_center_type_id . ' - ' . $opex_total_cost_center1;
	    		echo '<br />';*/
	    	}

	    }

	    $opex_total_per_cc = 0;
	    $opex_total_per_cc1 = 0;
	    $opex_total_per_cc2 = 0;
	    $count_opex = 1;
	    $count_overall_opex = 1;
	    foreach($opex_per_cost_center as $row_opex){
	    	$cost_center = $row_opex['cost_center_desc'];
	    	$opex_total_cost_center = $row_opex['total_amount'];
	    	$opex_total_cost_center1 = $row_opex['total_amount1'];
	    	$opex_total_cost_center2 = $row_opex['total_amount2'];
	    	$cost_center_group_name = $row_opex['cost_center_group_name'];
	    	$cost_center_type_id = $row_opex['cost_center_type_id'];
	    	if($cost_center_group_name == 'CTG' && $cost_center_type_id == 8){
	    		$ctg_sales += $opex_total_cost_center;
	    	}elseif($cost_center_group_name == 'COM' && $cost_center_type_id == 8){
	    		$com_sales += $opex_total_cost_center;
	    	}elseif($cost_center_group_name == 'UR' && $cost_center_type_id == 8){
	    		$ur_sales += $opex_total_cost_center;
	    	}elseif($cost_center_group_name == 'RSL' && $cost_center_type_id == 8){
	    		$rsl_sales += $opex_total_cost_center;
	    	}else{

	    		$opex_total_per_cc += $opex_total_cost_center;
		    	$opex_total_per_cc1 += $opex_total_cost_center1;
		    	$opex_total_per_cc2 += $opex_total_cost_center2;

	    		$opex_total_cost_center_dif1 = $opex_total_cost_center - $opex_total_cost_center1;
	    		$opex_total_cost_center_dif2 = $opex_total_cost_center - $opex_total_cost_center2;
	    		$opex_total_cost_center_percent1 = $opex_total_cost_center1 != 0 ? ($opex_total_cost_center_dif1 / $opex_total_cost_center1) * 100 : 100;
	    		$opex_total_cost_center_percent2 = $opex_total_cost_center2 != 0 ? ($opex_total_cost_center_dif2 / $opex_total_cost_center2) * 100 : 100;

	    		$opex_cost_center_tbl .= '
			    	<tr>
		    			<td align="">' . $cost_center . '</td>
		    			<td align="right">' . number_format($opex_total_cost_center/1000) . '</td>
		    			<td align="right">' . number_format($opex_total_cost_center1/1000) . '</td>
		    			<td align="right">' . number_format($opex_total_cost_center2/1000) . '</td>
		    			<td align="right">' . number_format(($opex_total_cost_center_dif1/1000) * -1)  . '</td>
		    			<td align="right">' . number_format($opex_total_cost_center_percent1 * -1) . '%</td>
		    			<td align="right">' . number_format(($opex_total_cost_center_dif2/1000) * -1) . '</td>
		    			<td align="right">' . number_format($opex_total_cost_center_percent2 * -1) . '%</td>
		    		</tr>
		    	';

	    		if($count_opex%20 == 0){
	    			$opex_cost_center_tbl .= '</table>';
					$pdf->writeHTML($opex_cost_center_tbl, true, false, true, false, '');

					$this->watermark_landscape($pdf);
					$this->header_landscape($pdf);

					$pdf->AddPage('L');

					$pdf->SetTextColor(0,0,0);

				    $pdf->setFont('arialb', '', 12);
				    $pdf->Text(20, 40, $bc_name);
				    $pdf->Text(20, 46, 'COMPARATIVE OPERATING EXPENSES PER COST CENTER');
				    $pdf->Text(20, 52, 'Budget ' . $year);

				    $pdf->SetFont('arial', '', 8);

				    $opex_cost_center_tbl = '<br /><br /><br /><br />
				    	<table border="1" cellpadding="3">
				    		<tr>
				    			<th rowspan="2" align="center" width="30%;"><strong>DEPARTMENT</strong></th>
				    			<th align="center" width="10%"><strong>BUDGET</strong></th>
				    			<th colspan="2" align="center" width="20%"><strong>ACTUAL</strong></th>
				    			<th colspan="4" align="center" width="40%"><strong>VARIANCE</strong></th>
				    		</tr>

				    		<tr>
				    			<td align="center"><strong>' . $year . '</strong></td>
				    			<td align="center"><strong>' . ($year - 1) . '</strong></td>
				    			<td align="center"><strong>' . ($year - 2) . '</strong></td>
				    			<td align="center"><strong>' . $year  . ' vs ' . ($year - 1) . '</strong></td>
				    			<td align="center"><strong>%</strong></td>
				    			<td align="center"><strong>' . $year . ' vs ' . ($year - 2) . '</strong></td>
				    			<td align="center"><strong>%</strong></td>
				    		</tr>
				    ';
		    	}

	    		$count_opex++;
	    	}

	    	if(count($opex_per_cost_center) == $count_overall_opex){
	    		$opex_sales_unit_per_cc = $sales_unit != 0 ? ($opex_total_per_cc / $sales_unit) * 100 : 100;
			    $opex_sales_unit_per_cc1 = $sales_unit1 != 0 ? ($opex_total_per_cc1 / $sales_unit1) * 100 : 100;
			    $opex_sales_unit_per_cc2 = $sales_unit2 != 0 ? ($opex_total_per_cc2 / $sales_unit2) * 100 : 100;
			    $opex_sales_unit_dif_per_cc1 = $opex_sales_unit_per_cc - $opex_sales_unit_per_cc1;
			    $opex_sales_unit_dif_per_cc2 = $opex_sales_unit_per_cc - $opex_sales_unit_per_cc2;
			    $opex_sales_unit_percent_cc1 = $opex_sales_unit_per_cc1 != 0 ? ($opex_sales_unit_dif_per_cc1 / $opex_sales_unit_per_cc1) * 100 : 100;
			    $opex_sales_unit_percent_cc2 = $opex_sales_unit_per_cc2 != 0 ? ($opex_sales_unit_dif_per_cc2 / $opex_sales_unit_per_cc2) * 100 : 100;

			    $opex_total_dif_per_cc1 = $opex_total_per_cc - $opex_total_per_cc1;
			    $opex_total_dif_per_cc2 = $opex_total_per_cc - $opex_total_per_cc2;
			    $opex_sales_percent_cc1 = $opex_total_per_cc1 != 0 ? ($opex_total_dif_per_cc1 / $opex_total_per_cc1) * 100 : 100;
			    $opex_sales_percent_cc2 = $opex_total_per_cc2 != 0 ? ($opex_total_dif_per_cc2 / $opex_total_per_cc2) * 100 : 100;

		    	$opex_cost_center_tbl .= '
			    	<tr>
		    			<td align=""><strong>Total</strong></td>
		    			<td align="right"><strong>' . number_format($opex_total_per_cc/1000) . '</strong></td>
		    			<td align="right"><strong>' . number_format($opex_total_per_cc1/1000) . '</strong></td>
		    			<td align="right"><strong>' . number_format($opex_total_per_cc2/1000) . '</strong></td>
		    			<td align="right"><strong>' . number_format(($opex_total_dif_per_cc1/1000) * -1) . '</strong></td>
		    			<td align="right"><strong>' . number_format(($opex_sales_percent_cc1) * -1) . '%</strong></td>
		    			<td align="right"><strong>' . number_format(($opex_total_dif_per_cc2/1000) * -1) . '</strong></td>
		    			<td align="right"><strong>' . number_format(($opex_sales_percent_cc2) * -1) . '%</strong></td>
		    		</tr>
		    	';

		    	$opex_cost_center_tbl .= '
			    	<tr>
		    			<td align=""><strong>Ave. Cost/Unit</strong></td>
		    			<td align="right"><strong>' . number_format($opex_sales_unit_per_cc, 2) . '</strong></td>
		    			<td align="right"><strong>' . number_format($opex_sales_unit_per_cc1, 2) . '</strong></td>
		    			<td align="right"><strong>' . number_format($opex_sales_unit_per_cc2, 2) . '</strong></td>
		    			<td align="right"><strong>' . number_format($opex_sales_unit_dif_per_cc1 * -1, 2) . '</strong></td>
		    			<td align="right"><strong>' . number_format($opex_sales_unit_percent_cc1 * -1) . '%</strong></td>
		    			<td align="right"><strong>' . number_format($opex_sales_unit_dif_per_cc2 * -1, 2) . '</strong></td>
		    			<td align="right"><strong>' . number_format($opex_sales_unit_percent_cc2 * -1) . '%</strong></td>
		    		</tr>
		    	';

			    $opex_cost_center_tbl .= '</table>';
				$pdf->writeHTML($opex_cost_center_tbl, true, false, true, false, '');

				$this->watermark_landscape($pdf);
				$this->header_landscape($pdf);
	    	}

	    	$count_overall_opex++;
	    }

	    

	    


		/*COMPARATIVE OPERATING EXPENSES PER ACCOUNT Page*/

		$pdf->AddPage('L');

		$pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $bc_name);
	    $pdf->Text(20, 46, 'COMPARATIVE OPERATING EXPENSES PER ACCOUNT');
	    $pdf->Text(20, 52, 'Budget ' . $year);

	    $pdf->SetFont('arial', '', 8);

	    $get_opex_account = $this->_get_opex_per_account($year);

	    $opex_per_account_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th rowspan="2" align="center" width="30%"><strong>GL DESCRIPTION</strong></th>
	    			<th align="center" width="10%"><strong>BUDGET</strong></th>
	    			<th colspan="2" align="center" width="20%"><strong>ACTUAL</strong></th>
	    			<th colspan="4" align="center" width="40%"><strong>VARIANCE</strong></th>
	    		</tr>

	    		<tr>
	    			<td align="center"><strong>' . $year . '</strong></td>
	    			<td align="center"><strong>' . ($year - 1) . '</strong></td>
	    			<td align="center"><strong>' . ($year - 2) . '</strong></td>
	    			<td align="center"><strong>' . $year  . ' vs ' . ($year - 1) . '</strong></td>
	    			<td align="center"><strong>%</strong></td>
	    			<td align="center"><strong>' . ($year - 1) . ' vs ' . ($year - 2) . '</strong></td>
	    			<td align="center"><strong>%</strong></td>
	    		</tr>
	    ';

	    /*echo '<pre>';
	    print_r($get_opex_account);
	    echo '</pre>';
	    exit;*/

	    $count_opex_account = 1;
	    $opex_acc_overall = 0;
	    $opex_acc_overall1 = 0;
	    $opex_acc_overall2 = 0;
	    foreach($get_opex_account as $row_opex_acc){
	    	$opex_acc_total = $row_opex_acc->total;
	    	$opex_acc_total1 = $row_opex_acc->total1;
	    	$opex_acc_total2 = $row_opex_acc->total2;

	    	$opex_acc_overall += $opex_acc_total;
	    	$opex_acc_overall1 += $opex_acc_total1;
	    	$opex_acc_overall2 += $opex_acc_total2;

	    	$opex_acc_dif1 = ($opex_acc_total - $opex_acc_total1);
	    	$opex_acc_dif2 = ($opex_acc_total - $opex_acc_total2);
	    	$opex_acc_per1 = $opex_acc_total1 != 0 ? ($opex_acc_dif1/$opex_acc_total1) * 100 : 100;
	    	$opex_acc_per2 = $opex_acc_total2 != 0 ? ($opex_acc_dif2/$opex_acc_total2) * 100 : 100;

	    	$opex_per_account_tbl .= '
	    		<tr>
	    			<td>' . $row_opex_acc->gl_sub_name . '</td>
	    			<td align="right">' . number_format($opex_acc_total/1000) . '</td>
	    			<td align="right">' . number_format($opex_acc_total1/1000) . '</td>
	    			<td align="right">' . number_format($opex_acc_total2/1000) . '</td>
	    			<td align="right">' . number_format(($opex_acc_dif1/1000) * -1) . '</td>
	    			<td align="right">' . number_format($opex_acc_per1 * -1) . '%</td>
	    			<td align="right">' . number_format(($opex_acc_dif2/1000) * -1) . '</td>
	    			<td align="right">' . number_format($opex_acc_per2 * -1) . '%</td>
	    		</tr>

	    	';

	    	if($count_opex_account%19 == 0 && count($get_opex_account) != $count_opex_account){
	    		$opex_per_account_tbl .= '</table>';
	    		$pdf->writeHTML($opex_per_account_tbl, true, false, true, false, '');

	    		$this->watermark_landscape($pdf);
				$this->header_landscape($pdf);

				$pdf->AddPage('L');
				$pdf->SetTextColor(0,0,0);

			    $pdf->setFont('arialb', '', 12);
			    $pdf->Text(20, 40, $bc_name);
			    $pdf->Text(20, 46, 'COMPARATIVE OPERATING EXPENSES PER ACCOUNT');
			    $pdf->Text(20, 52, 'Budget ' . $year);

			    $pdf->SetFont('arial', '', 8);

		    	$opex_per_account_tbl = '<br /><br /><br /><br />
			    	<table border="1" cellpadding="3">
			    		<tr>
			    			<th rowspan="2" align="center" width="30%"><strong>GL DESCRIPTION</strong></th>
			    			<th align="center" width="10%"><strong>BUDGET</strong></th>
			    			<th colspan="2" align="center" width="20%"><strong>ACTUAL</strong></th>
			    			<th colspan="4" align="center" width="40%"><strong>VARIANCE</strong></th>
			    		</tr>

			    		<tr>
			    			<td align="center"><strong>' . $year . '</strong></td>
			    			<td align="center"><strong>' . ($year - 1) . '</strong></td>
			    			<td align="center"><strong>' . ($year - 2) . '</strong></td>
			    			<td align="center"><strong>' . $year  . ' vs ' . ($year - 1) . '</strong></td>
			    			<td align="center"><strong>%</strong></td>
			    			<td align="center"><strong>' . ($year - 1) . ' vs ' . ($year - 2) . '</strong></td>
			    			<td align="center"><strong>%</strong></td>
			    		</tr>
			    ';
		    }elseif(count($get_opex_account) == $count_opex_account){

		    	$opex_acc_overall_dif1 = $opex_acc_overall - $opex_acc_overall1;
		    	$opex_acc_overall_dif2 = $opex_acc_overall - $opex_acc_overall2;
		    	$opex_acc_overall_per1 = $opex_acc_overall1 != 0 ? ($opex_acc_overall_dif1/$opex_acc_overall1) * 100 : 100;
		    	$opex_acc_overall_per2 = $opex_acc_overall2 != 0 ? ($opex_acc_overall_dif2/$opex_acc_overall2) * 100 : 100;
		    	$opex_per_account_tbl .= '
		    		<tr>
		    			<td><strong>Total:</strong></td>
		    			<td align="right"><strong>' . number_format($opex_acc_overall/1000) . '</strong></td>
		    			<td align="right"><strong>' . number_format($opex_acc_overall1/1000) . '</strong></td>
		    			<td align="right"><strong>' . number_format($opex_acc_overall2/1000) . '</strong></td>
		    			<td align="right"><strong>' . number_format(($opex_acc_overall_dif1/1000) * -1) . '</strong></td>
		    			<td align="right"><strong>' . number_format($opex_acc_overall_per1 * -1) . '%</strong></td>
		    			<td align="right"><strong>' . number_format(($opex_acc_overall_dif2/1000) * -1) . '</strong></td>
		    			<td align="right"><strong>' . number_format($opex_acc_overall_per2 * -1) . '%</strong></td>
		    		</tr>

		    	';

		    	$opex_per_account_tbl .= '</table>';
	    		$pdf->writeHTML($opex_per_account_tbl, true, false, true, false, '');

	    		$this->watermark_landscape($pdf);
				$this->header_landscape($pdf);
		    }

		    $count_opex_account++;
	    }

	    /*$opex_per_account_tbl .= '</table>';
	    $pdf->writeHTML($opex_per_account_tbl, true, false, true, false, '');*/




	    $this->watermark_landscape($pdf);
		$this->header_landscape($pdf);


		/*CAPITAL EXPENDITURES SUMMARY PER CATEGORY Page*/

		$pdf->AddPage('P');

		$pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);


	    $pdf->Text(20, 40, $bc_name);
	    $pdf->Text(20, 46, 'CAPITAL EXPENDITURES SUMMARY PER CATEGORY');
	    $pdf->Text(20, 52, 'Budget ' . $year);

	    $pdf->SetFont('arial', '', 8);

	    $get_capex_category = $this->_get_capex_category_report($year);

	    $capex_category_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="30%"><strong>ASSET TYPE</strong></th>
	    			<th align="center" width="10%"><strong>' . $year .'</strong></th>
	    			<th align="center" width="10%"><strong>' . ($year - 1) . '</strong></th>
	    			<th align="center" width="10%"><strong>' . ($year - 2) . '</strong></th>
	    			<th align="center" width="10%"><strong>Fav/(UnFav)</strong></th>
	    			<th align="center" width="10%"><strong>%</strong></th>
	    			<th align="center" width="10%"><strong>Fav/(UnFav)</strong></th>
	    			<th align="center" width="10%"><strong>%</strong></th>
	    		</tr>
	    ';
	    $capex_grand_total = 0;
	    $capex_grand_total1 = 0;
	    $capex_grand_total2 = 0;

	    foreach($get_capex_category['capex_group'] as $row_capex_cat){
	    	$capex_total = $row_capex_cat['capex_total'];
	    	$capex_total1 = $row_capex_cat['capex_total1'];
	    	$capex_total2 = $row_capex_cat['capex_total2'];

	    	$capex_grand_total += $capex_total;
	    	$capex_grand_total1 += $capex_total1;
	    	$capex_grand_total2 += $capex_total2;

	    	$capex_dif1 = $capex_total - $capex_total1;
	    	$capex_dif2 = $capex_total - $capex_total2;
	    	$capex_per1 = $capex_total1 != 0 ? ($capex_dif1/$capex_total1) * 100 : 0;
	    	$capex_per2 = $capex_total2 != 0 ? ($capex_dif2/$capex_total2) * 100 : 0;

	    	$capex_category_tbl .= '
	    		<tr>
	    			<td>' . $row_capex_cat['ag_name'] . '</td>
	    			<td align="right">' . number_format($capex_total/1000) . '</td>
	    			<td align="right">' . number_format($capex_total1/1000) . '</td>
	    			<td align="right">' . number_format($capex_total2/1000) . '</td>
	    			<td align="right">' . number_format($capex_dif1/1000) . '</td>
	    			<td align="right">' . number_format($capex_per1) . '%</td>
	    			<td align="right">' . number_format($capex_dif2/1000) . '</td>
	    			<td align="right">' . number_format($capex_per2) . '%</td>
	    		</tr>

	    	';
	    }

	    $capex_total_dif1 = $capex_grand_total - $capex_grand_total1;
	    $capex_total_dif2 = $capex_grand_total - $capex_grand_total2;
	    $capex_total_per1 = $capex_grand_total1 != 0 ? ($capex_total_dif1/$capex_grand_total1) * 100 : 0;
	    $capex_total_per2 = $capex_grand_total2 != 0 ? ($capex_total_dif2/$capex_grand_total2) * 100 : 0;

	    $capex_category_tbl .= '
	    	<tr>
	    		<td><strong>TOTAL</strong></td>
	    		<td align="right"><strong>' . number_format($capex_grand_total/1000) . '</strong></td>
	    		<td align="right"><strong>' . number_format($capex_grand_total1/1000) . '</strong></td>
	    		<td align="right"><strong>' . number_format($capex_grand_total2/1000) . '</strong></td>
	    		<td align="right"><strong>' . number_format($capex_total_dif1/1000) . '</strong></td>
	    		<td align="right"><strong>' . number_format($capex_total_per1/1000) . '%</strong></td>
	    		<td align="right"><strong>' . number_format($capex_total_dif2/1000) . '</strong></td>
	    		<td align="right"><strong>' . number_format($capex_total_per2	/1000) . '%</strong></td>
	    	</tr>
	    ';

	    $capex_category_tbl .= '</table>';


	    $pdf->writeHTML($capex_category_tbl, true, false, true, false, '');


	    $this->watermark($pdf);
		$this->header($pdf);


		/*CAPITAL EXPENDITURES Page*/

		$pdf->AddPage('P');

		$pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $bc_name);
	    $pdf->Text(20, 46, 'CAPITAL EXPENDITURES');
	    $pdf->Text(20, 52, 'Budget ' . $year);

	    $pdf->SetFont('arial', '', 10);

	    $get_capex = $this->_get_capex_category_report($year);

	    $capex_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="30%"><strong>ASSET GROUP</strong></th>
	    			<th align="center" width="30%"><strong>ITEM DESCRIPTION</strong></th>
	    			<th align="center" width="12%"><strong>QTY</strong></th>
	    			<th align="center" width="13%"><strong>COST</strong></th>
	    			<th align="center" width="15%"><strong>AMOUNT</strong></th>
	    		</tr>
	    ';
	    $count_capex = 1;
	    $total_capex = 0;
	    foreach($get_capex['capex_subgroup'] as $row_capex){

	    	$total_capex += $row_capex->capex_total;

	    	$capex_tbl .= '
	    		<tr>
	    			<td>' . $row_capex->ag_name . '</td>
	    			<td>' . $row_capex->asg_name . '</td>
	    			<td align="right">' . number_format($row_capex->total_qty) . '</td>
	    			<td align="right">' . number_format($row_capex->capex_price) . '</td>
	    			<td align="right">' . number_format($row_capex->capex_total) . '</td>
	    		</tr>
	    	';

	    	if($count_capex%16 == 0 && count($get_capex['capex_subgroup']) != $count_capex){
	    		$capex_tbl .= '</table>';
	    		$pdf->writeHTML($capex_tbl, true, false, true, false, '');

	    		$this->watermark($pdf);
				$this->header($pdf);

				$pdf->AddPage('P');

				$pdf->SetTextColor(0,0,0);

			    $pdf->setFont('arialb', '', 12);
			    $pdf->Text(20, 40, $bc_name);
			    $pdf->Text(20, 46, 'CAPITAL EXPENDITURES');
			    $pdf->Text(20, 52, 'Budget ' . $year);

			    $pdf->SetFont('arial', '', 10);

			    $capex_tbl = '<br /><br /><br /><br />
			    	<table border="1" cellpadding="3">
			    		<tr>
			    			<th align="center" width="30%"><strong>ASSET GROUP</strong></th>
			    			<th align="center" width="30%"><strong>ITEM DESCRIPTION</strong></th>
			    			<th align="center" width="12%"><strong>QTY</strong></th>
			    			<th align="center" width="13%"><strong>COST</strong></th>
			    			<th align="center" width="15%"><strong>AMOUNT</strong></th>
			    		</tr>
			    ';
		    }elseif(count($get_capex['capex_subgroup']) == $count_capex){
		    	$capex_tbl .= '<tr><td align="right" colspan="5"><strong>' . number_format($total_capex) .'</strong></td></tr>';
		    	$capex_tbl .= '</table>';
	    		$pdf->writeHTML($capex_tbl, true, false, true, false, '');

	    		$this->watermark($pdf);
				$this->header($pdf);
		    }

		    $count_capex++;
	    }

		/*CAPITAL EXPENDITURES Page*/

		$pdf->AddPage();

		$pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $bc_name);
	    $pdf->Text(20, 46, 'MANPOWER SUMMARY');
	    $pdf->Text(20, 52, 'Budget ' . $year);

	    $pdf->SetFont('arial', '', 8);

	    $manpower_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center"><strong>DEPARTMENT</strong></th>
	    			<th align="center"><strong>POSITION</strong></th>
	    			<th align="center"><strong>RANK</strong></th>
	    			<th align="center"><strong>' . ($year - 1) . '</strong></th>
	    			<th align="center"><strong>ADDL</strong></th>
	    			<th align="center"><strong>' . $year . '</strong></th>
	    		</tr>
	    ';

	     $join_manpower = array(
			'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.manpower_status = 1 AND a.manpower_year = ' . $year,
			'company_unit_tbl c' => 'b.company_unit_id = c.company_unit_id',
			'rank_tbl d' => 'a.rank_id = d.rank_id'
		);

	    $get_manpower = $this->admin->get_join('manpower_tbl a', $join_manpower);
	    $manpower_grandtotal = 0;
	    $manpower_old_total = 0;
	    $manpower_new_total = 0;
	    $count_manpower = 1;
	    foreach($get_manpower as $row_manpower){
	    	$manpower_old = $row_manpower->manpower_old;
	    	$manpower_new = $row_manpower->manpower_new;
	    	$manpower_total = $manpower_old + $manpower_new;

	    	$manpower_old_total += $manpower_old;
	    	$manpower_new_total += $manpower_new;
	    	$manpower_grandtotal += $manpower_total;
	    	$manpower_tbl .= '
	    		<tr>
	    			<td>' . $row_manpower->company_unit_name . '</td>
	    			<td>' . $row_manpower->manpower_position . '</td>
	    			<td>' . $row_manpower->rank_name . '</td>
	    			<td align="center">' . $manpower_old . '</td>
	    			<td align="center">' . $manpower_new . '</td>
	    			<td align="center">' . $manpower_total . '</td>
	    		</tr>
	    	';

	    	if($count_manpower%20 == 0 && count($get_manpower) != $count_manpower){

	    		$manpower_tbl .= '</table>';
			    $pdf->writeHTML($manpower_tbl, true, false, true, false, '');

			    $this->watermark($pdf);
				$this->header($pdf);

	    		$pdf->AddPage();

				$pdf->SetTextColor(0,0,0);

			    $pdf->setFont('arialb', '', 12);
			    $pdf->Text(20, 40, $bc_name);
			    $pdf->Text(20, 46, 'MANPOWER SUMMARY');
			    $pdf->Text(20, 52, 'Budget ' . $year);

			    $pdf->SetFont('arial', '', 8);

			    $manpower_tbl = '<br /><br /><br /><br />
			    	<table border="1" cellpadding="3">
			    		<tr>
			    			<th align="center"><strong>DEPARTMENT</strong></th>
			    			<th align="center"><strong>POSITION</strong></th>
			    			<th align="center"><strong>RANK</strong></th>
			    			<th align="center"><strong>' . ($year - 1) . '</strong></th>
			    			<th align="center"><strong>ADDL</strong></th>
			    			<th align="center"><strong>' . $year . '</strong></th>
			    		</tr>
			    ';

			     $join_manpower = array(
					'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.manpower_status = 1 AND a.manpower_year = ' . $year,
					'company_unit_tbl c' => 'b.company_unit_id = c.company_unit_id',
					'rank_tbl d' => 'a.rank_id = d.rank_id'
				);
	    	}elseif(count($get_manpower) == $count_manpower){
	    		$manpower_tbl .= '
			    	<tr>
			    		<td></td>
			    		<td></td>
			    		<td></td>
			    		<td align="center"><strong>' . $manpower_old_total . '</strong></td>
			    		<td align="center"><strong>' . $manpower_new_total . '</strong></td>
			    		<td align="center"><strong>' . $manpower_grandtotal . '</strong></td>
			    	</tr>
			    ';

			    $manpower_tbl .= '</table>';
			    $pdf->writeHTML($manpower_tbl, true, false, true, false, '');

			    $this->watermark($pdf);
				$this->header($pdf);

	    	}

	    	$count_manpower++;
	    }
	    

	    //$this->footer($pdf);

	    

	    //$this->header($pdf);
	    //$this->footer($pdf);

   		$pdf->Output('BAVI National Budget 2022' . date('Y/m/d'). '.pdf', 'I');   	
	}

	public function _get_broiler_report($year){ //SAMPLE BICOL BC

		$trans_year = encode($year);
		$doctype = encode('trans');
		$join = array('bc_tbl b' => 'a.bc_id = b.bc_id');
 		$harvested_actual_data = $this->admin->get_join('broiler_amount_summary_tbl a', $join, false, false, false, 'a.broiler_line_item_id, trans_qty',  array('trans_type_id' => 2, 'YEAR(a.trans_date)' =>	$year - 1, 'a.trans_status !='	=> 5));

 		$i = 1;
 		$kilo = 1;
 		$feeds = 1;
 		$cg_fee = 1;
 		$medicines = 1;
 		$vaccines = 1;
 		$doc = 1;
		
		$actual_harvested_heads = array();
		$actual_harvested_kilo = array();
		$actual_feeds_amount = array();
		$actual_cg_fee_amount = array();
		$actual_medicines_amount = array();
		$actual_vaccines_amount = array();
		$actual_doc_amount = array();
 		if(!empty($harvested_actual_data)){
	 		foreach ($harvested_actual_data as $r) {
	 			if($r->broiler_line_item_id == 7){
		 			$actual_harvested_heads[$i] = $r->trans_qty;
		 			$i++;
	 			}
	 			if($r->broiler_line_item_id == 6){
	 				$actual_harvested_kilo[$kilo] = $r->trans_qty;
		 			$kilo++;
	 			}
	 			if($r->broiler_line_item_id == 5){
	 				$actual_feeds_amount[$feeds] = $r->trans_qty;
		 			$feeds++;
	 			}
	 			if($r->broiler_line_item_id == 4){
	 				$actual_cg_fee_amount[$cg_fee] = $r->trans_qty;
		 			$cg_fee++;
	 			}
	 			if($r->broiler_line_item_id == 3){
	 				$actual_medicines_amount[$medicines] = $r->trans_qty;
		 			$medicines++;
	 			}
	 			if($r->broiler_line_item_id == 2){
	 				$actual_vaccines_amount[$vaccines] = $r->trans_qty;
		 			$vaccines++;
	 			}
	 			if($r->broiler_line_item_id == 1){
	 				$actual_doc_amount[$doc] = $r->trans_qty;
		 			$doc++;
	 			}
	 		}

	 		$actual_harvested_heads = @$actual_harvested_heads;
	 		$actual_harvested_kilo = @$actual_harvested_kilo;
	 		$actual_feeds_amount = @$actual_feeds_amount;
	 		$actual_cg_fee_amount = @$actual_cg_fee_amount;
	 		$actual_medicines_amount = @$actual_medicines_amount;
	 		$actual_vaccines_amount = @$actual_vaccines_amount;
	 		$actual_doc_amount = @$actual_doc_amount;
 		} else {
 			
 			$actual_harvested_heads = 0;
 			$actual_harvested_kilo = 0;
	 		$actual_feeds_amount = 0;
	 		$actual_cg_fee_amount = 0;
	 		$actual_medicines_amount = 0;
	 		$actual_vaccines_amount = 0;
	 		$actual_doc_amount = 0;
 		}

 		$join = array('bc_tbl b' => 'a.bc_id = b.bc_id');
 		$previous_harvested_actual_data = $this->admin->get_join('broiler_amount_summary_tbl a', $join, false, false, false, 'a.broiler_line_item_id, trans_qty',  array('trans_type_id' => 2, 'YEAR(a.trans_date)' =>	$year - 2, 'a.trans_status !='	=> 5));

 		$i = 1;
 		$kilo = 1;
 		$feeds = 1;
 		$cg_fee = 1;
 		$medicines = 1;
 		$vaccines = 1;
 		$doc = 1;
		
		$previous_actual_harvested_heads= array();
		$previous_actual_harvested_kilo= array();
		$previous_actual_feeds_amount= array();
		$previous_actual_cg_fee_amount= array();
		$previous_actual_medicines_amount= array();
		$previous_actual_vaccines_amount= array();
		$previous_actual_doc_amount= array();
 		if(!empty($previous_harvested_actual_data)){
 			foreach ($previous_harvested_actual_data as $r) {
	 			
	 			if($r->broiler_line_item_id == 7){
		 			$previous_actual_harvested_heads[$i] = $r->trans_qty;
		 			$i++;
	 			}
	 			if($r->broiler_line_item_id == 6){
	 				$previous_actual_harvested_kilo[$kilo] = $r->trans_qty;
		 			$kilo++;
	 			}
	 			if($r->broiler_line_item_id == 5){
	 				$previous_actual_feeds_amount[$feeds] = $r->trans_qty;
		 			$feeds++;
	 			}
	 			if($r->broiler_line_item_id == 4){
	 				$previous_actual_cg_fee_amount[$cg_fee] = $r->trans_qty;
		 			$cg_fee++;
	 			}
	 			if($r->broiler_line_item_id == 3){
	 				$previous_actual_medicines_amount[$medicines] = $r->trans_qty;
		 			$medicines++;
	 			}
	 			if($r->broiler_line_item_id == 2){
	 				$previous_actual_vaccines_amount[$vaccines] = $r->trans_qty;
		 			$vaccines++;
	 			}
	 			if($r->broiler_line_item_id == 1){
	 				$previous_actual_doc_amount[$doc] = $r->trans_qty;
		 			$doc++;
	 			}
	 		}
	 		$previous_actual_harvested_heads = @$previous_actual_harvested_heads;
	 		$previous_actual_harvested_kilo = @$previous_actual_harvested_kilo;
	 		$previous_actual_feeds_amount = @$previous_actual_feeds_amount;
	 		$previous_actual_cg_fee_amount = @$previous_actual_cg_fee_amount;
	 		$previous_actual_medicines_amount = @$previous_actual_medicines_amount;
	 		$previous_actual_vaccines_amount = @$previous_actual_vaccines_amount;
	 		$previous_actual_doc_amount = @$previous_actual_doc_amount;
 		} else {
 			$previous_actual_harvested_heads = 0;
 			$previous_actual_harvested_kilo = 0;
	 		$previous_actual_feeds_amount = 0;
	 		$previous_actual_cg_fee_amount = 0;
	 		$previous_actual_medicines_amount = 0;
	 		$previous_actual_vaccines_amount = 0;
	 		$previous_actual_doc_amount = 0;
	 	}

	 	$join = array(
			'broiler_summary_item_tbl b' => 'a.broiler_summary_item_id = b.broiler_summary_item_id and YEAR(a.trans_date) = '.$year.' and a.trans_type_id = 1 and a.broiler_summary_status = 1'
		);
		$broiler_summary = $this->admin->get_join('broiler_summary_tbl a', $join, false, 'b.order_count, MONTH(a.trans_date)', false, false, false, false);

		$i = 1;
		if(!empty($broiler_summary)){
			foreach ($broiler_summary as $broiler_summary_row) {
				if($broiler_summary_row->broiler_summary_item_id == 33){
					$budgeted_harvested_heads[$i] = $broiler_summary_row->trans_qty;
		 			$i++;

		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 34){
					$budgeted_harvested_kilo[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 35){
					$budgeted_doc_cost_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 1){
					$budgeted_growers_fee_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 37){
					$budgeted_feed_cost_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 45){
					$budgeted_vaccines_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 42){
					$budgeted_medicine_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 43){
					$budgeted_disinfectant_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				}
			}
			$budgeted_harvested_heads = @$budgeted_harvested_heads;
			$budgeted_harvested_kilo = @$budgeted_harvested_kilo;
			$budgeted_doc_cost_amount = @$budgeted_doc_cost_amount;
			$budgeted_growers_fee_amount = @$budgeted_growers_fee_amount;
			$budgeted_feed_cost_amount = @$budgeted_feed_cost_amount;
			$budgeted_vaccines_amount = @$budgeted_vaccines_amount;
			$budgeted_medicine_amount = @$budgeted_medicine_amount;
			$budgeted_disinfectant_amount = @$budgeted_disinfectant_amount;

		} else {
			$budgeted_harvested_heads = 0;
			$budgeted_harvested_kilo = 0;
			$budgeted_doc_cost_amount = 0;
			$budgeted_growers_fee_amount = 0;
			$budgeted_feed_cost_amount = 0;
			$budgeted_vaccines_amount = 0;
			$budgeted_medicine_amount = 0;
			$budgeted_disinfectant_amount = 0;
		}


		$total_actual_harvested_heads = 0;
		$total_actual_doc = 0;
		$total_actual_feeds = 0;
		$total_actual_cg = 0;
		$total_actual_medicines = 0;
		$total_actual_vaccines = 0;
		$total_actual_harvested_kilo = 0;

		$total_previous_actual_harvested_heads = 0;
		$total_previous_actual_doc = 0;
		$total_previous_actual_feeds = 0;
		$total_previous_actual_cg = 0;
		$total_previous_actual_medicines = 0;
		$total_previous_actual_vaccines = 0;
		$total_previous_actual_harvested_kilo = 0;

		$harvested_heads = 0;
		$harvested_kilo = 0;
		$growers_fee_amount = 0;
		$feed_cost_amount = 0;
		$vaccines_amount = 0;
		$medicine_amount = 0;
		$disinfectant_amount = 0;
		$doc_cost_amount = 0;

		$table = '<table border=1>';
		for ($i=1; $i <=12 ; $i++) {
			//BUDGET BROILER
			$harvested_heads = $harvested_heads + $budgeted_harvested_heads[$i];
			$harvested_kilo = $harvested_kilo + $budgeted_harvested_kilo[$i];
			$doc_cost_amount = $doc_cost_amount + $budgeted_doc_cost_amount[$i];
			$growers_fee_amount = $growers_fee_amount + $budgeted_growers_fee_amount[$i];
			$feed_cost_amount = $feed_cost_amount + $budgeted_feed_cost_amount[$i];
			$vaccines_amount = $vaccines_amount + $budgeted_vaccines_amount[$i];
			$medicine_amount = $medicine_amount + $budgeted_medicine_amount[$i];
			$disinfectant_amount = $disinfectant_amount + $budgeted_disinfectant_amount[$i];

			$doc_ave = $harvested_kilo == 0 ? 0 : $doc_cost_amount/$harvested_kilo;
			$growers_fee_ave = $harvested_kilo == 0 ? 0 : $growers_fee_amount/$harvested_kilo;
			$feed_cost_ave = $harvested_kilo == 0 ? 0 : $feed_cost_amount/$harvested_kilo;
			$vaccines_ave = $harvested_kilo == 0 ? 0 : $vaccines_amount/$harvested_kilo;
			$total = $disinfectant_amount + $medicine_amount;
			$medicine_ave = $harvested_kilo == 0 ? 0 : $total/$harvested_kilo;
			$month = date('F', strtotime($year.'-'.$i.'-01'));

			$total_actual_harvested_heads = $total_actual_harvested_heads + $actual_harvested_heads[$i];

			$total_previous_actual_harvested_heads = $total_previous_actual_harvested_heads + $previous_actual_harvested_heads[$i];


			$actual_doc[$i] = $actual_harvested_kilo[$i] <= 0 ? 0 : $actual_doc_amount[$i]/$actual_harvested_kilo[$i];
			$actual_feeds[$i] = $actual_harvested_kilo[$i] <= 0 ? 0 : $actual_feeds_amount[$i]/$actual_harvested_kilo[$i];
			$actual_cg[$i] = $actual_harvested_kilo[$i] <= 0 ? 0 : $actual_cg_fee_amount[$i]/$actual_harvested_kilo[$i];
			$actual_medicines[$i] = $actual_harvested_kilo[$i] <= 0 ? 0 : $actual_medicines_amount[$i]/$actual_harvested_kilo[$i];
			$actual_vaccines[$i] = $actual_harvested_kilo[$i] <= 0 ? 0 : $actual_vaccines_amount[$i]/$actual_harvested_kilo[$i];
			$actual_broiler_cost[$i] = $actual_doc[$i] + $actual_feeds[$i] + $actual_cg[$i] + $actual_medicines[$i] + $actual_vaccines[$i];

			$total_actual_doc = $total_actual_doc + $actual_doc_amount[$i];
			$total_actual_feeds = $total_actual_feeds + $actual_feeds_amount[$i];
			$total_actual_cg = $total_actual_cg + $actual_cg_fee_amount[$i];
			$total_actual_medicines = $total_actual_medicines + $actual_medicines_amount[$i];
			$total_actual_vaccines = $total_actual_vaccines + $actual_vaccines_amount[$i];
			$total_actual_harvested_kilo = $total_actual_harvested_kilo + $actual_harvested_kilo[$i];

			$previous_actual_doc[$i] = $previous_actual_harvested_kilo[$i] <= 0 ? 0 : $previous_actual_doc_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_feeds[$i] = $previous_actual_harvested_kilo[$i] <= 0 ? 0 : $previous_actual_feeds_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_cg[$i] = $previous_actual_harvested_kilo[$i] <= 0 ? 0 : $previous_actual_cg_fee_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_medicines[$i] = $previous_actual_harvested_kilo[$i] <= 0 ? 0 : $previous_actual_medicines_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_vaccines[$i] = $previous_actual_harvested_kilo[$i] <= 0 ? 0 : $previous_actual_vaccines_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_broiler_cost[$i] = $previous_actual_doc[$i] + $previous_actual_feeds[$i] + $previous_actual_cg[$i] + $previous_actual_medicines[$i] + $previous_actual_vaccines[$i];

			$total_previous_actual_doc = $total_previous_actual_doc + $previous_actual_doc_amount[$i];
			$total_previous_actual_feeds = $total_previous_actual_feeds + $previous_actual_feeds_amount[$i];
			$total_previous_actual_cg = $total_previous_actual_cg + $previous_actual_cg_fee_amount[$i];
			$total_previous_actual_medicines = $total_previous_actual_medicines + $previous_actual_medicines_amount[$i];
			$total_previous_actual_vaccines = $total_previous_actual_vaccines + $previous_actual_vaccines_amount[$i];
			$total_previous_actual_harvested_kilo = $total_previous_actual_harvested_kilo + $previous_actual_harvested_kilo[$i];

			$table .= '<tr>
				<td class="text-left">'.$month.'</td>
				<td class="text-right">'.number_format($budgeted_harvested_heads[$i],0,'.',',').'</td>
				<td class="text-right">'.number_format($actual_harvested_heads[$i],0,'.',',').'</td>
				<td class="text-right">'.number_format($previous_actual_harvested_heads[$i],0,'.',',').'</td>

				<td class="text-right">'.number_format(get_broiler_cost(encode(-1), $trans_year, $i, $doctype),dec_places_dis(),'.',',').'</td>
				<td class="text-right">'.number_format($actual_broiler_cost[$i],dec_places_dis(),'.',',').'</td>
				<td class="text-right">'.number_format($previous_actual_broiler_cost[$i],dec_places_dis(),'.',',').'</td>
			</tr>';
		}

		$broiler_cost_ave = $medicine_ave + $doc_ave + $growers_fee_ave + $feed_cost_ave + $vaccines_ave;
		$total_actual_broiler_cost = $total_actual_doc + $total_actual_feeds + $total_actual_cg + $total_actual_vaccines + $total_actual_medicines;
		$total_actual_broiler_cost = $total_actual_harvested_kilo <= 0 ? 0 : $total_actual_broiler_cost/$total_actual_harvested_kilo;

		$total_previous_actual_broiler_cost = $total_previous_actual_doc + $total_previous_actual_feeds + $total_previous_actual_cg + $total_previous_actual_vaccines + $total_previous_actual_medicines;
		$total_previous_actual_broiler_cost = $total_previous_actual_harvested_kilo <= 0 ? 0 : $total_previous_actual_broiler_cost/$total_previous_actual_harvested_kilo;
		$table .= '<tr>
				<td class="text-left">TOTAL</td>
				<td class="text-right">'.number_format($harvested_heads,0,'.',',').'</td>
				<td class="text-right">'.number_format($total_actual_harvested_heads,0,'.',',').'</td>
				<td class="text-right">'.number_format($total_previous_actual_harvested_heads,0,'.',',').'</td>
				<td class="text-right">'.number_format($broiler_cost_ave,dec_places_dis(),'.',',').'</td>
				<td class="text-right">'.number_format($total_actual_broiler_cost,dec_places_dis(),'.',',').'</td>
				<td class="text-right">'.number_format($total_previous_actual_broiler_cost,dec_places_dis(),'.',',').'</td>
			</tr></table>';
		

		return $table;
	}
	
	public function _get_broiler_report_tbl($year){ //SAMPLE BICOL BC

		$trans_year = encode($year);
		$doctype = encode('trans');
		$join = array('bc_tbl b' => 'a.bc_id = b.bc_id');
 		$harvested_actual_data = $this->admin->get_join('broiler_amount_summary_tbl a', $join, false, false, false, 'a.broiler_line_item_id, trans_qty',  array('trans_type_id' => 2, 'YEAR(a.trans_date)' =>	$year - 1, 'a.trans_status !='	=> 5));

 		$i = 1;
 		$kilo = 1;
 		$feeds = 1;
 		$cg_fee = 1;
 		$medicines = 1;
 		$vaccines = 1;
 		$doc = 1;
 		if(!empty($harvested_actual_data)){
	 		foreach ($harvested_actual_data as $r) {
	 			if($r->broiler_line_item_id == 7){
		 			$actual_harvested_heads[$i] = $r->trans_qty;
		 			$i++;
	 			}
	 			if($r->broiler_line_item_id == 6){
	 				$actual_harvested_kilo[$kilo] = $r->trans_qty;
		 			$kilo++;
	 			}
	 			if($r->broiler_line_item_id == 5){
	 				$actual_feeds_amount[$feeds] = $r->trans_qty;
		 			$feeds++;
	 			}
	 			if($r->broiler_line_item_id == 4){
	 				$actual_cg_fee_amount[$cg_fee] = $r->trans_qty;
		 			$cg_fee++;
	 			}
	 			if($r->broiler_line_item_id == 3){
	 				$actual_medicines_amount[$medicines] = $r->trans_qty;
		 			$medicines++;
	 			}
	 			if($r->broiler_line_item_id == 2){
	 				$actual_vaccines_amount[$vaccines] = $r->trans_qty;
		 			$vaccines++;
	 			}
	 			if($r->broiler_line_item_id == 1){
	 				$actual_doc_amount[$doc] = $r->trans_qty;
		 			$doc++;
	 			}
	 		}

	 		$actual_harvested_heads = $actual_harvested_heads;
	 		$actual_harvested_kilo = $actual_harvested_kilo;
	 		$actual_feeds_amount = $actual_feeds_amount;
	 		$actual_cg_fee_amount = $actual_cg_fee_amount;
	 		$actual_medicines_amount = $actual_medicines_amount;
	 		$actual_vaccines_amount = $actual_vaccines_amount;
	 		$actual_doc_amount = $actual_doc_amount;
 		} else {
 			
 			$actual_harvested_heads = 0;
 			$actual_harvested_kilo = 0;
	 		$actual_feeds_amount = 0;
	 		$actual_cg_fee_amount = 0;
	 		$actual_medicines_amount = 0;
	 		$actual_vaccines_amount = 0;
	 		$actual_doc_amount = 0;
 		}

 		$join = array('bc_tbl b' => 'a.bc_id = b.bc_id');
 		$previous_harvested_actual_data = $this->admin->get_join('broiler_amount_summary_tbl a', $join, false, false, false, 'a.broiler_line_item_id, trans_qty',  array('trans_type_id' => 2, 'YEAR(a.trans_date)' =>	$year - 2, 'a.trans_status !='	=> 5));

 		$i = 1;
 		$kilo = 1;
 		$feeds = 1;
 		$cg_fee = 1;
 		$medicines = 1;
 		$vaccines = 1;
 		$doc = 1;
 		if(!empty($previous_harvested_actual_data)){
 			foreach ($previous_harvested_actual_data as $r) {
	 			
	 			if($r->broiler_line_item_id == 7){
		 			$previous_actual_harvested_heads[$i] = $r->trans_qty;
		 			$i++;
	 			}
	 			if($r->broiler_line_item_id == 6){
	 				$previous_actual_harvested_kilo[$kilo] = $r->trans_qty;
		 			$kilo++;
	 			}
	 			if($r->broiler_line_item_id == 5){
	 				$previous_actual_feeds_amount[$feeds] = $r->trans_qty;
		 			$feeds++;
	 			}
	 			if($r->broiler_line_item_id == 4){
	 				$previous_actual_cg_fee_amount[$cg_fee] = $r->trans_qty;
		 			$cg_fee++;
	 			}
	 			if($r->broiler_line_item_id == 3){
	 				$previous_actual_medicines_amount[$medicines] = $r->trans_qty;
		 			$medicines++;
	 			}
	 			if($r->broiler_line_item_id == 2){
	 				$previous_actual_vaccines_amount[$vaccines] = $r->trans_qty;
		 			$vaccines++;
	 			}
	 			if($r->broiler_line_item_id == 1){
	 				$previous_actual_doc_amount[$doc] = $r->trans_qty;
		 			$doc++;
	 			}
	 		}
	 		$previous_actual_harvested_heads = $previous_actual_harvested_heads;
	 		$previous_actual_harvested_kilo = $previous_actual_harvested_kilo;
	 		$previous_actual_feeds_amount = $previous_actual_feeds_amount;
	 		$previous_actual_cg_fee_amount = $previous_actual_cg_fee_amount;
	 		$previous_actual_medicines_amount = $previous_actual_medicines_amount;
	 		$previous_actual_vaccines_amount = $previous_actual_vaccines_amount;
	 		$previous_actual_doc_amount = $previous_actual_doc_amount;
 		} else {
 			$previous_actual_harvested_heads = 0;
 			$previous_actual_harvested_kilo = 0;
	 		$previous_actual_feeds_amount = 0;
	 		$previous_actual_cg_fee_amount = 0;
	 		$previous_actual_medicines_amount = 0;
	 		$previous_actual_vaccines_amount = 0;
	 		$previous_actual_doc_amount = 0;
	 	}

	 	$join = array(
			'broiler_summary_item_tbl b' => 'a.broiler_summary_item_id = b.broiler_summary_item_id and YEAR(a.trans_date) = '.$year.' and a.trans_type_id = 1 and a.broiler_summary_status = 1'
		);
		$broiler_summary = $this->admin->get_join('broiler_summary_tbl a', $join, false, 'b.order_count, MONTH(a.trans_date)', false, false, false, false);

		$i = 1;
		if(!empty($broiler_summary)){
			foreach ($broiler_summary as $broiler_summary_row) {
				if($broiler_summary_row->broiler_summary_item_id == 33){
					$budgeted_harvested_heads[$i] = $broiler_summary_row->trans_qty;
		 			$i++;

		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 34){
					$budgeted_harvested_kilo[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 35){
					$budgeted_doc_cost_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 1){
					$budgeted_growers_fee_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 37){
					$budgeted_feed_cost_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 45){
					$budgeted_vaccines_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 42){
					$budgeted_medicine_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 43){
					$budgeted_disinfectant_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				}
			}
			$budgeted_harvested_heads = @$budgeted_harvested_heads;
			$budgeted_harvested_kilo = @$budgeted_harvested_kilo;
			$budgeted_doc_cost_amount = @$budgeted_doc_cost_amount;
			$budgeted_growers_fee_amount = @$budgeted_growers_fee_amount;
			$budgeted_feed_cost_amount = @$budgeted_feed_cost_amount;
			$budgeted_vaccines_amount = @$budgeted_vaccines_amount;
			$budgeted_medicine_amount = @$budgeted_medicine_amount;
			$budgeted_disinfectant_amount = @$budgeted_disinfectant_amount;

		} else {
			$budgeted_harvested_heads = 0;
			$budgeted_harvested_kilo = 0;
			$budgeted_doc_cost_amount = 0;
			$budgeted_growers_fee_amount = 0;
			$budgeted_feed_cost_amount = 0;
			$budgeted_vaccines_amount = 0;
			$budgeted_medicine_amount = 0;
			$budgeted_disinfectant_amount = 0;
		}


		$total_actual_harvested_heads = 0;
		$total_actual_doc = 0;
		$total_actual_feeds = 0;
		$total_actual_cg = 0;
		$total_actual_medicines = 0;
		$total_actual_vaccines = 0;
		$total_actual_harvested_kilo = 0;

		$total_previous_actual_harvested_heads = 0;
		$total_previous_actual_doc = 0;
		$total_previous_actual_feeds = 0;
		$total_previous_actual_cg = 0;
		$total_previous_actual_medicines = 0;
		$total_previous_actual_vaccines = 0;
		$total_previous_actual_harvested_kilo = 0;

		$harvested_heads = 0;
		$harvested_kilo = 0;
		$growers_fee_amount = 0;
		$feed_cost_amount = 0;
		$vaccines_amount = 0;
		$medicine_amount = 0;
		$disinfectant_amount = 0;
		$doc_cost_amount = 0;

		$table = '';
		for ($i=1; $i <=12 ; $i++) {
			//BUDGET BROILER
			$harvested_heads = $harvested_heads + $budgeted_harvested_heads[$i];
			$harvested_kilo = $harvested_kilo + $budgeted_harvested_kilo[$i];
			$doc_cost_amount = $doc_cost_amount + $budgeted_doc_cost_amount[$i];
			$growers_fee_amount = $growers_fee_amount + $budgeted_growers_fee_amount[$i];
			$feed_cost_amount = $feed_cost_amount + $budgeted_feed_cost_amount[$i];
			$vaccines_amount = $vaccines_amount + $budgeted_vaccines_amount[$i];
			$medicine_amount = $medicine_amount + $budgeted_medicine_amount[$i];
			$disinfectant_amount = $disinfectant_amount + $budgeted_disinfectant_amount[$i];

			$doc_ave = $harvested_kilo == 0 ? 0 : $doc_cost_amount/$harvested_kilo;
			$growers_fee_ave = $harvested_kilo == 0 ? 0 : $growers_fee_amount/$harvested_kilo;
			$feed_cost_ave = $harvested_kilo == 0 ? 0 : $feed_cost_amount/$harvested_kilo;
			$vaccines_ave = $harvested_kilo == 0 ? 0 : $vaccines_amount/$harvested_kilo;
			$total = $disinfectant_amount + $medicine_amount;
			$medicine_ave = $harvested_kilo == 0 ? 0 : $total/$harvested_kilo;
			$month = date('M', strtotime($year.'-'.$i.'-01'));

			$total_actual_harvested_heads = $total_actual_harvested_heads + $actual_harvested_heads[$i];

			$total_previous_actual_harvested_heads = $total_previous_actual_harvested_heads + $previous_actual_harvested_heads[$i];


			$actual_doc[$i] = $actual_harvested_kilo[$i] <= 0 ? 0 : $actual_doc_amount[$i]/$actual_harvested_kilo[$i];
			$actual_feeds[$i] = $actual_harvested_kilo[$i] <= 0 ? 0 : $actual_feeds_amount[$i]/$actual_harvested_kilo[$i];
			$actual_cg[$i] = $actual_harvested_kilo[$i] <= 0 ? 0 : $actual_cg_fee_amount[$i]/$actual_harvested_kilo[$i];
			$actual_medicines[$i] = $actual_harvested_kilo[$i] <= 0 ? 0 : $actual_medicines_amount[$i]/$actual_harvested_kilo[$i];
			$actual_vaccines[$i] = $actual_harvested_kilo[$i] <= 0 ? 0 : $actual_vaccines_amount[$i]/$actual_harvested_kilo[$i];
			$actual_broiler_cost[$i] = $actual_doc[$i] + $actual_feeds[$i] + $actual_cg[$i] + $actual_medicines[$i] + $actual_vaccines[$i];

			$total_actual_doc = $total_actual_doc + $actual_doc_amount[$i];
			$total_actual_feeds = $total_actual_feeds + $actual_feeds_amount[$i];
			$total_actual_cg = $total_actual_cg + $actual_cg_fee_amount[$i];
			$total_actual_medicines = $total_actual_medicines + $actual_medicines_amount[$i];
			$total_actual_vaccines = $total_actual_vaccines + $actual_vaccines_amount[$i];
			$total_actual_harvested_kilo = $total_actual_harvested_kilo + $actual_harvested_kilo[$i];

			$previous_actual_doc[$i] = $previous_actual_harvested_kilo[$i] <= 0 ? 0 : $previous_actual_doc_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_feeds[$i] = $previous_actual_harvested_kilo[$i] <= 0 ? 0 : $previous_actual_feeds_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_cg[$i] = $previous_actual_harvested_kilo[$i] <= 0 ? 0 : $previous_actual_cg_fee_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_medicines[$i] = $previous_actual_harvested_kilo[$i] <= 0 ? 0 : $previous_actual_medicines_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_vaccines[$i] = $previous_actual_harvested_kilo[$i] <= 0 ? 0 : $previous_actual_vaccines_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_broiler_cost[$i] = $previous_actual_doc[$i] + $previous_actual_feeds[$i] + $previous_actual_cg[$i] + $previous_actual_medicines[$i] + $previous_actual_vaccines[$i];

			$total_previous_actual_doc = $total_previous_actual_doc + $previous_actual_doc_amount[$i];
			$total_previous_actual_feeds = $total_previous_actual_feeds + $previous_actual_feeds_amount[$i];
			$total_previous_actual_cg = $total_previous_actual_cg + $previous_actual_cg_fee_amount[$i];
			$total_previous_actual_medicines = $total_previous_actual_medicines + $previous_actual_medicines_amount[$i];
			$total_previous_actual_vaccines = $total_previous_actual_vaccines + $previous_actual_vaccines_amount[$i];
			$total_previous_actual_harvested_kilo = $total_previous_actual_harvested_kilo + $previous_actual_harvested_kilo[$i];

			$table .= '<tr>
				<td>'.$month.'</td>
				<td align="right">'.number_format($budgeted_harvested_heads[$i],0,'.',',').'</td>
				<td align="right">'.number_format($actual_harvested_heads[$i],0,'.',',').'</td>
				<td align="right">'.number_format($previous_actual_harvested_heads[$i],0,'.',',').'</td>

				<td align="right">'.number_format(get_broiler_cost(encode(-1), $trans_year, $i, $doctype),dec_places_dis(),'.',',').'</td>
				<td align="right">'.number_format($actual_broiler_cost[$i],dec_places_dis(),'.',',').'</td>
				<td align="right">'.number_format($previous_actual_broiler_cost[$i],dec_places_dis(),'.',',').'</td>
			</tr>';
		}

		$broiler_cost_ave = $medicine_ave + $doc_ave + $growers_fee_ave + $feed_cost_ave + $vaccines_ave;
		$total_actual_broiler_cost = $total_actual_doc + $total_actual_feeds + $total_actual_cg + $total_actual_vaccines + $total_actual_medicines;
		$total_actual_broiler_cost = $total_actual_harvested_kilo <= 0 ? 0 : $total_actual_broiler_cost/$total_actual_harvested_kilo;

		$total_previous_actual_broiler_cost = $total_previous_actual_doc + $total_previous_actual_feeds + $total_previous_actual_cg + $total_previous_actual_vaccines + $total_previous_actual_medicines;
		$total_previous_actual_broiler_cost = $total_previous_actual_harvested_kilo <= 0 ? 0 : $total_previous_actual_broiler_cost/$total_previous_actual_harvested_kilo;
		$table .= '<tr>
				<td align="right">TOTAL</td>
				<td align="right">'.number_format($harvested_heads,0,'.',',').'</td>
				<td align="right">'.number_format($total_actual_harvested_heads,0,'.',',').'</td>
				<td align="right">'.number_format($total_previous_actual_harvested_heads,0,'.',',').'</td>
				<td align="right">'.number_format($broiler_cost_ave,dec_places_dis(),'.',',').'</td>
				<td align="right">'.number_format($total_actual_broiler_cost,dec_places_dis(),'.',',').'</td>
				<td align="right">'.number_format($total_previous_actual_broiler_cost,dec_places_dis(),'.',',').'</td>
			</tr>';
		
		$harvested_dif1 = $harvested_heads - $total_actual_harvested_heads;
		$harvested_dif2 = $harvested_heads - $total_previous_actual_harvested_heads;
		$harvested_percent1 = $total_actual_harvested_heads > 0 ? ($harvested_dif1 / $total_actual_harvested_heads) * 100 : 0;
		$harvested_percent2 = $total_previous_actual_harvested_heads > 0 ? ($harvested_dif2 / $total_previous_actual_harvested_heads) * 100 : 0;

 		$harvested_condition1 = '';
 		$harvested_indicator1 = '';
 		if($harvested_heads > $total_actual_harvested_heads){
 			$harvested_condition1 = 'higher';
 			$harvested_indicator1 = 'fa fa-long-arrow-up';
 		}elseif($harvested_heads < $total_actual_harvested_heads){
 			$harvested_condition1 = 'lower';
 			$harvested_indicator1 = 'fa fa-long-arrow-down';
 		}

 		$harvested_condition2 = '';
 		$harvested_indicator2 = '';
 		if($harvested_heads > $total_previous_actual_harvested_heads){
 			$harvested_condition2 = 'higher';
 			$harvested_indicator2 = 'fa fa-long-arrow-up';
 		}elseif($harvested_heads < $total_previous_actual_harvested_heads){
 			$harvested_condition2 = 'lower';
 			$harvested_indicator2 = 'fa fa-long-arrow-down';
 		}

		$broiler_cost_dif1 = round($broiler_cost_ave, 2) - round($total_actual_broiler_cost, 2);
		$broiler_cost_dif2 = round($broiler_cost_ave, 2) - round($total_previous_actual_broiler_cost, 2);
		$broilder_cost_percent1 = $broiler_cost_ave > 0 ? ($broiler_cost_dif1 / $broiler_cost_ave) * 100 : 0;
		$broilder_cost_percent2 = $broiler_cost_ave > 0 ? ($broiler_cost_dif1 / $broiler_cost_ave) * 100 : 0;

		$broiler_cost_condition1 = '';
 		$broiler_cost_indicator1 = '';
 		if($broiler_cost_ave > $total_actual_broiler_cost){
 			$broiler_cost_condition1 = 'higher';
 			$broiler_cost_indicator1 = 'fa fa-long-arrow-up';
 		}elseif($broiler_cost_ave < $total_actual_broiler_cost){
 			$broiler_cost_condition1 = 'lower';
 			$broiler_cost_indicator1 = 'fa fa-long-arrow-down';
 		}

 		$broiler_cost_condition2 = '';
 		$broiler_cost_indicator2 = '';
 		if($broiler_cost_ave > $total_previous_actual_broiler_cost){
 			$broiler_cost_condition2 = 'higher';
 			$broiler_cost_indicator2 = 'fa fa-long-arrow-up';
 		}elseif($broiler_cost_ave < $total_previous_actual_broiler_cost){
 			$broiler_cost_condition2 = 'lower';
 			$broiler_cost_indicator2 = 'fa fa-long-arrow-down';
 		}

		$data['harvested_heads'] = $harvested_heads;
		$data['harvested_heads1'] = $total_actual_harvested_heads;
		$data['harvested_heads2'] = $total_previous_actual_harvested_heads;
		$data['harvested_dif1'] = $harvested_dif1;
		$data['harvested_dif2'] = $harvested_dif2;
		$data['harvested_percent1'] = $harvested_percent1;
		$data['harvested_percent2'] = $harvested_percent2;
		$data['harvested_condition1'] = $harvested_condition1;
		$data['harvested_condition2'] = $harvested_condition2;
		$data['harvested_indicator1'] = $harvested_indicator1;
		$data['harvested_indicator2'] = $harvested_indicator2;


		$data['broiler_cost'] = $broiler_cost_ave;
		$data['broiler_cost1'] = $total_actual_broiler_cost;
		$data['broiler_cost2'] = $total_previous_actual_broiler_cost;
		$data['broiler_cost_dif1'] = $broiler_cost_dif1;
		$data['broiler_cost_dif2'] = $broiler_cost_dif2;
		$data['broilder_cost_percent1'] = $broilder_cost_percent1;
		$data['broilder_cost_percent2'] = $broilder_cost_percent2;
		$data['broiler_cost_condition1'] = $broiler_cost_condition1;
		$data['broiler_cost_condition2'] = $broiler_cost_condition2;
		$data['broiler_cost_indicator1'] = $broiler_cost_indicator1;
		$data['broiler_cost_indicator2'] = $broiler_cost_indicator2;

		$data['tbl'] = $table;
		return $data;
	}

	public function _get_sales_unit_report($year){
		/*Sales Unit*/
 		$sales_unit = $this->sales_unit($year);
 		$total_sales_unit = 0;
 		foreach($sales_unit as $row_unit){
 			$total_sales_unit += $row_unit->total_sales_unit;
 		}

 		$get_comparative_sales = $this->get_comparative_net_sales($year);
 		$total_net_sales1 = 0;
 		$total_sales_unit1 = 0;

 		foreach($get_comparative_sales as $row){
 			$total_net_sales1 += $row['net_sales'];
 			$total_sales_unit1 += $row['sales_unit'];
 		}

 		/*echo 'Total Net Sales: ' . number_format($total_net_sales1, 2);
 		echo '<br />';
 		echo 'Total Sales Unit: ' . number_format($total_sales_unit, 2);
 		exit;*/

 		$total_sales_unit_old = $total_sales_unit1;
		$sales_unit_percentage = $total_sales_unit != 0 ? 100 - (($total_sales_unit_old / $total_sales_unit) * 100) : 0; 

		$sales_unit_condition = '';
 		$sales_unit_indicator = '';
 		if($total_sales_unit > $total_sales_unit_old){
 			$sales_unit_condition = 'higher';
 			$sales_unit_indicator = 'fa fa-long-arrow-up';
 		}elseif($total_sales_unit < $total_sales_unit_old){
 			$sales_unit_condition = 'lower';
 			$sales_unit_indicator = 'fa fa-long-arrow-down';
 		}

 		$data['total_sales_unit'] = $total_sales_unit;
 		$data['total_sales_unit_old'] = $total_sales_unit_old;
 		$data['sales_unit_percentage'] = $sales_unit_percentage;
 		$data['sales_unit_condition'] = $sales_unit_condition;
 		$data['sales_unit_indicator'] = $sales_unit_indicator;

 		return $data;
	}

	public function _get_net_sales_report($year, $bc_id){
		$join_net_sales = array(
 			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
 			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
 			'outlet_tbl d' => 'a.outlet_id = d.outlet_id AND d.bc_id = ' . $bc_id . ' AND a.sales_year = ' . $year,
 			'material_tbl e' => 'b.material_id = e.material_id',
 		);

 		$net_sales_data = $this->admin->get_join('sales_tbl a', $join_net_sales, TRUE, FALSE, FALSE, 'c.sale_det_id, d.outlet_name, e.material_desc, c.sales_det_date, SUM(c.sales_det_qty * (c.sales_det_asp - IFNULL((SELECT z.sales_tactical_det_price FROM sales_tactical_tbl x, sales_tactical_item_tbl y, sales_tactical_details_tbl z WHERE x.sales_tactical_id=y.sales_tactical_id AND y.sales_tactical_item_id=z.sales_tactical_item_id AND d.outlet_id = x.outlet_id AND y.material_id=e.material_id AND c.sales_det_date = z.sales_tactical_det_date AND x.sales_tactical_status = 1 AND y.sales_tactical_item_status = 1 AND x.sales_tactical_status = 1 AND YEAR(x.sales_tactical_year) = ' . $year . '), 0))) as net_sales');


 		$net_sales = $net_sales_data->net_sales;

 		$get_comparative_sales = $this->get_comparative_net_sales($bc_id, $year);

 		$total_net_sales1 = $get_comparative_sales['net_sales1'];
 		$total_net_sales2 = $get_comparative_sales['net_sales2'];
 		$total_sales_unit1 = $get_comparative_sales['sales_unit1'];
 		$total_sales_unit2 = $get_comparative_sales['sales_unit2'];


 		foreach($get_comparative_sales as $row){
 			$total_net_sales1 += $row->net_sales;
 		}

 		$net_sales_old = $total_net_sales1;
 		$net_sales_percentage = $net_sales_old > 0 ? (($net_sales - $net_sales_old) / $net_sales_old) * 100 : 0;

 		$net_sales_condition = '';
 		$net_sales_indicator = '';
 		if($net_sales > $net_sales_old){
 			$net_sales_condition = 'higher';
 			$net_sales_indicator = 'fa fa-long-arrow-up';
 		}elseif($net_sales < $net_sales_old){
 			$net_sales_condition = 'lower';
 			$net_sales_indicator = 'fa fa-long-arrow-down';
 		}

 		$data['net_sales'] = $net_sales;
 		$data['net_sales_old'] = $net_sales_old;
 		$data['net_sales_percentage'] = $net_sales_percentage;
 		$data['net_sales_condition'] = $net_sales_condition;
 		$data['net_sales_indicator'] = $net_sales_indicator;

 		return $data;
	}

	public function _get_sales_mix_report($year){

		$info = $this->_require_login();
		$join = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b. sales_item_status AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_unit_tbl e' => 'd.material_id = e.material_id AND e.material_unit_status = 1',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
 			'brand_tbl h' => 'g.brand_id = h.brand_id',
 			'report_sales_mix_brand_tbl i' => 'h.brand_id = i.brand_id AND i.report_sales_mix_brand_status = 1',
 			'report_sales_mix_tbl j' => 'i.report_sales_mix_id = j.report_sales_mix_id',
 			'material_group_tbl k' => "d.material_group_id = k.material_group_id AND k.material_group_name != 'BY-PRODUCTS'"
		);

		$sales_mix = $this->admin->get_join('sales_tbl a', $join, FALSE, FALSE, 'j.report_sales_mix_id', 'j.report_sales_mix_name, e.sales_unit_equivalent as sales_unit,

			SUM(
				IF(d.material_code = "9100100", 
					IFNULL((SELECT y.sales_live_alw_det_value FROM sales_live_alw_tbl x, sales_live_alw_detail_tbl y WHERE f.bc_id = x.bc_id AND x.sales_live_alw_id = y.sales_live_alw_id AND x.sales_live_alw_status = 1 AND y.sales_live_alw_det_status = 1 AND x.sales_live_alw_year = ' . $year . ' AND y.sales_live_alw_det_date = c.sales_det_date), 1) * sales_det_qty,

				c.sales_det_qty)
				 * (c.sales_det_asp - IFNULL((SELECT z.sales_tactical_det_price FROM sales_tactical_tbl x, sales_tactical_item_tbl y, sales_tactical_details_tbl z WHERE x.sales_tactical_id=y.sales_tactical_id AND y.sales_tactical_item_id=z.sales_tactical_item_id AND f.outlet_id = x.outlet_id AND y.material_id=e.material_id AND c.sales_det_date = z.sales_tactical_det_date AND x.sales_tactical_status = 1 AND y.sales_tactical_item_status = 1 AND z.sales_tactical_det_status = 1 AND YEAR(x.sales_tactical_year) = ' . $year . '), 0))) as total_sales_mix,

			IFNULL(
				(SELECT SUM(x.sales_mix_perc) as total_sales_mix1 FROM comparative_net_sales_tbl x WHERE j.report_sales_mix_name = x.segment AND x.comp_net_sales_status = 1 AND x.trans_year = ' . ($year - 1) . ')
			, 0) as total_sales_mix1,

			IFNULL(
				(SELECT SUM(x.sales_mix_perc) as total_sales_mix1 FROM comparative_net_sales_tbl x WHERE j.report_sales_mix_name = x.segment AND x.comp_net_sales_status = 1 AND x.trans_year = ' . ($year - 2) . ')

			, 0)as total_sales_mix2
			');

		return $sales_mix;
	}

	public function _get_outlet_report($year){
		$join_new_outlet = array(
 			'outlet_brand_tbl b' => 'a.outlet_id = b.outlet_id AND a.outlet_status_id = 1 AND b.outlet_brand_status = 1',
 			'brand_tbl c' => 'b.brand_id = c.brand_id',
 			'brand_type_tbl d' => 'c.brand_type_id = d.brand_type_id AND d.brand_type_name = "RETAIL" AND c.brand_name !="RESELLER"',
 			'outlet_type_tbl e' => 'a.outlet_type_id = e.outlet_type_id AND e.outlet_type_id = 2',
 			'outlet_year_tbl f' => 'a.outlet_id = f.outlet_id AND f.outlet_year_status = 1 AND f.outlet_year = ' . $year
 		);

 		$get_new_outlet = $this->admin->get_join('outlet_tbl a', $join_new_outlet, TRUE, FALSE, FALSE, 'COUNT(a.outlet_id) as outlet_new');
 		$new_outlet_data = $get_new_outlet->outlet_new;

 		$join_old_outlet = array(
 			'outlet_brand_tbl b' => 'a.outlet_id = b.outlet_id AND a.outlet_status_id = 1 AND b.outlet_brand_status = 1',
 			'brand_tbl c' => 'b.brand_id = c.brand_id',
 			'brand_type_tbl d' => 'c.brand_type_id = d.brand_type_id AND d.brand_type_name = "RETAIL" AND c.brand_name !="RESELLER"',
 			'outlet_type_tbl e' => 'a.outlet_type_id = e.outlet_type_id AND e.outlet_type_id = 1',
 			'outlet_year_tbl f' => 'a.outlet_id = f.outlet_id AND f.outlet_year_status = 1 AND f.outlet_year = ' . $year
 		);

 		$get_old_outlet = $this->admin->get_join('outlet_tbl a', $join_old_outlet, TRUE, FALSE, FALSE, 'COUNT(a.outlet_id) as outlet_old');
 		$old_outlet_data = $get_old_outlet->outlet_old;

 		$data['outlet_new'] = $new_outlet_data;
 		$data['outlet_old'] = $old_outlet_data;
 		$data['outlet_total'] = $new_outlet_data + $old_outlet_data;
 		return $data;
	}

	public function _get_manpower_report($year){
		$join_manpower = array('cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id');
		$where = array('a.manpower_status' => 1, 'a.manpower_year' => $year);
		$select = 'SUM(a.manpower_old) as manpower_old, SUM(a.manpower_new) as manpower_new';
		$get_manpower = $this->admin->get_join('manpower_tbl a', $join_manpower, TRUE, FALSE, FALSE, $select, $where);
		$manpower_old = $get_manpower->manpower_old;
		$manpower_new = $get_manpower->manpower_new;

		$data['manpower_old'] = $manpower_old;
		$data['manpower_new'] = $manpower_new;

		return $data;
	}

	public function _get_capex_report($year){

		$capex = $this->capex_report($year);
 		$capex_data = $capex->total_capex;
 		$capex_data1 = $capex->total_capex1;
 		$capex_data2 = $capex->total_capex2;
 		$last_year = $year - 1;

 		$get_capex_old = $this->admin->get_query('SELECT comp_capex_budget_val FROM comparative_capex_budget_tbl WHERE comp_capex_budget_year = ' . $last_year, TRUE);

 		$capex_old = 0;
 		if(!empty(check_count($get_capex_old))){
 			$capex_old = $get_capex_old->comp_capex_budget_val;
 		}

 		$capex_condition1 = '';
 		$capex_indicator1 = '';
 		if($capex_data > $capex_data1){
 			$capex_condition1 = 'higher';
 			$capex_indicator1 = 'fa fa-long-arrow-up';
 			$capex_dif1 = $capex_data - $capex_data1;
 		}elseif($capex_data < $capex_data1){
 			$capex_condition1 = 'lower';
 			$capex_indicator1 = 'fa fa-long-arrow-down';
 			$capex_dif1 = $capex_data1 - $capex_data;
 		}

 		$capex_condition2 = '';
 		$capex_indicator2 = '';
 		if($capex_data > $capex_data2){
 			$capex_condition2 = 'higher';
 			$capex_indicator2 = 'fa fa-long-arrow-up';
 			$capex_dif2 = $capex_data - $capex_data2;
 		}elseif($capex_data < $capex_data2){
 			$capex_condition2 = 'lower';
 			$capex_indicator2 = 'fa fa-long-arrow-down';
 			$capex_dif2 = $capex_data2 - $capex_data;
 		}

 		$data['capex'] = $capex_data;
 		$data['capex1'] = $capex_data1;
 		$data['capex2'] = $capex_data2;
 		$data['capex_condition1'] = $capex_condition1;
 		$data['capex_condition2'] = $capex_condition2;
 		$data['capex_indicator1'] = $capex_indicator1;
 		$data['capex_indicator2'] = $capex_indicator2;
 		$data['capex_dif1'] = $capex_dif1;
 		$data['capex_dif2'] = $capex_dif2;

 		return $data;
	}

	public function _get_harvested_tbl($year, $budget_harvested){

		$tbl = '';
		$total_harvest = 0;
		$total_harvest1 = 0;
		$total_harvest2 = 0;

		$total_broiler = 0;
		$total_broiler1 = 0;
		$total_broiler2 = 0;
		for ($i=1; $i <=12 ; $i++) {
			$month = date('M', strtotime($year.'-'.$i.'-01'));
			$harvested_heads = $budget_harvested[$i];
			$harvested_heads1 = 0;
			$harvested_heads2 = 0;

			$broiler_cost = 0;
			$broiler_cost1 = 0;
			$broiler_cost2 = 0;

			$tbl .='
				<tr>
					<td>' . $month . '</td>
					<td align="right">' . number_format($harvested_heads) . '</td>
					<td align="right">' . number_format($harvested_heads1) . '</td>
					<td align="right">' . number_format($harvested_heads2) . '</td>
					<td align="right">' . number_format($broiler_cost, 2) . '</td>
					<td align="right">' . number_format($broiler_cost1, 2) . '</td>
					<td align="right">' . number_format($broiler_cost2, 2) . '</td>
				</tr>
			';

			$total_harvest += $harvested_heads;
			$total_harvest1 += $harvested_heads1;
			$total_harvest2 += $harvested_heads2;

			$total_broiler += $broiler_cost;
			$total_broiler1 += $broiler_cost1;
			$total_broiler2 += $broiler_cost2;
		}

		$tbl .= '
			<tr>
				<td><strong>Total</strong></td>
				<td align="right"><strong>' . number_format($total_harvest) . '</strong></td>
				<td align="right"><strong>' . number_format($total_harvest1) . '</strong></td>
				<td align="right"><strong>' . number_format($total_harvest2) . '</strong></td>
				<td align="right"><strong>' . number_format($total_broiler, 2) . '</strong></td>
				<td align="right"><strong>' . number_format($total_broiler1, 2) . '</strong></td>
				<td align="right"><strong>' . number_format($total_broiler2, 2) . '</strong></td>
			</tr>
		';

		return $tbl;
	}

	public function _get_opex_per_account($year){

		$opex_gl = $this->admin->get_query('

			SELECT opex.gl_group_name, opex.gl_sub_name, opex.gl_code, SUM(total) as total, SUM(total1) as total1, SUM(total2) as total2 
			FROM(

				(SELECT `e`.`gl_group_name`, `d`.`gl_sub_name`, d.gl_code, SUM(a.opex_amount) total, 0 as total1, 0 as total2

				FROM `gl_transaction_details_tbl` `a` JOIN `gl_transaction_item_tbl` `b` ON `a`.`gl_trans_item_id` = `b`.`gl_trans_item_id` AND `b`.`gl_trans_item_status` = 1 AND `a`.`gl_trans_det_status`=1 JOIN `gl_transaction_tbl` `c` ON `b`.`gl_trans_id`=`c`.`gl_trans_id` AND `c`.`gl_trans_status`=1 AND `c`.`gl_year`= ' . $year . ' JOIN `gl_subgroup_tbl` `d` ON `b`.`gl_sub_id`=`d`.`gl_sub_id` JOIN `gl_group_tbl` `e` ON `d`.`gl_group_id` = `e`.`gl_group_id` AND `e`.`gl_group_show` = 1 JOIN `cost_center_tbl` `f` ON `b`.`cost_center_id` = `f`.`cost_center_id` AND `f`.`cost_center_id` GROUP BY `d`.`gl_code` ORDER BY `e`.`gl_group_name`
				)

				UNION

				(SELECT comp_tbl.gl_group_name, comp_tbl.gl_sub_name, comp_tbl.gl_code, SUM(comp_tbl.total) as total, SUM(comp_tbl.total1) as total1, SUM(comp_tbl.total2) as total2

				FROM
					(	
						SELECT comp1.gl_group_name, comp1.gl_sub_name, comp1.gl_code, SUM(comp1.total) as total, SUM(comp1.total1) as total1, SUM(comp1.total2) as total2
						
						FROM
							(SELECT z.gl_group_name, y.gl_sub_name, y.gl_code, 0 as total, SUM(x.cost) as total1, 0 as total2 FROM comparative_opex_gl_tbl x, gl_subgroup_tbl y, gl_group_tbl z WHERE x.gl_sub_id = y.gl_sub_id AND y.gl_group_id = z.gl_group_id AND x.comp_opex_gl_status = 1 AND YEAR(x.trans_year) = '  . ($year - 1) . ' GROUP BY y.gl_code

							UNION

							SELECT z.gl_group_name, y.gl_sub_name, y.gl_code, 0 as total, SUM(x.cost) as total1, 0 as total2 FROM comparative_opex_dept_tbl x, gl_subgroup_tbl y, gl_group_tbl z WHERE x.gl_sub_id = y.gl_sub_id AND y.gl_group_id = z.gl_group_id AND x.comp_opex_dept_status = 1 AND YEAR(x.trans_year) = '  . ($year - 1) . ' GROUP BY y.gl_code
							)
						as comp1 GROUP BY comp1.gl_code



					UNION
						SELECT comp2.gl_group_name, comp2.gl_sub_name, comp2.gl_code, SUM(comp2.total) as total, SUM(comp2.total1) as total1, SUM(comp2.total2) as total2
						
						FROM

							(SELECT z.gl_group_name, y.gl_sub_name, y.gl_code, 0 as total, 0 as total1, SUM(x.cost) as total2 FROM comparative_opex_gl_tbl x, gl_subgroup_tbl y, gl_group_tbl z WHERE x.gl_sub_id = y.gl_sub_id AND y.gl_group_id = z.gl_group_id AND x.comp_opex_gl_status = 1 AND YEAR(x.trans_year) = '  . ($year - 2) . ' GROUP BY y.gl_code

							UNION

							SELECT z.gl_group_name, y.gl_sub_name, y.gl_code, 0 as total, 0 as total1, SUM(x.cost) as total2 FROM comparative_opex_dept_tbl x, gl_subgroup_tbl y, gl_group_tbl z WHERE x.gl_sub_id = y.gl_sub_id AND y.gl_group_id = z.gl_group_id AND x.comp_opex_dept_status = 1 AND YEAR(x.trans_year) = '  . ($year - 2) . ' GROUP BY y.gl_code
							)
						as comp2 GROUP BY comp2.gl_code
					) as comp_tbl

				GROUP BY comp_tbl.gl_code
				)
				) as opex
			GROUP BY opex.gl_code

		');

		$depre_sub = $this->get_depreciation_subgroup($year);
		$depre = "DEPRECIATION EXPENSES";
		foreach($depre_sub as $row_sub){
			$gl_sub_name = $row_sub->gl_sub_name;
			$depre_amount = $row_sub->total;
			$arr_depre = new stdClass;
			$arr_depre->gl_group_name = $depre;
			$arr_depre->gl_sub_name = $gl_sub_name;
			$arr_depre->total = $depre_amount;
			$arr_depre->total1 = 0;
			$arr_depre->total2 = 0;
			array_push($opex_gl, $arr_depre);
		}

		return $opex_gl;
	}

	public function _get_capex_category_report($year){
		$join_capex = array(
			'asset_group_transaction_item_tbl f' => 'a.ag_trans_item_id = f.ag_trans_item_id AND f.ag_trans_item_status = 1',
			'asset_group_transaction_tbl b' => 'f.ag_trans_id=b.ag_trans_id AND b.ag_trans_status=1 AND a.ag_trans_det_status=1 AND b.ag_trans_budget_year = ' . $year,
			'asset_subgroup_tbl c' => 'f.asg_id=c.asg_id',
			'asset_group_tbl d' => 'c.ag_id = d.ag_id',
			'cost_center_tbl e' => 'f.cost_center_id = e.cost_center_id'
		);

		$capex_asset = $this->admin->get_join('asset_group_transaction_details_tbl a', $join_capex, FALSE, 'd.ag_name', 'c.asg_id', 'd.ag_id , d.ag_name, c.asg_name, SUM(a.capex_qty) total_qty, f.capex_price, SUM(a.capex_qty * f.capex_price) as capex_total,

			(
				(SELECT SUM(x.comp_capex_val) FROM comparative_capex_tbl x WHERE d.ag_id = x.ag_id AND x.comp_capex_status = 1 AND x.comp_capex_year = ' . ($year - 1) . ') + (SELECT SUM(x.comp_capex_unit_val) FROM comparative_capex_unit_tbl x WHERE d.ag_id = x.ag_id AND x.comp_capex_unit_status = 1 AND x.comp_capex_unit_year = ' . ($year - 1) . ')
			)as capex_total1, 

			(
				(SELECT SUM(x.comp_capex_val) FROM comparative_capex_tbl x WHERE d.ag_id = x.ag_id AND x.comp_capex_status = 1 AND x.comp_capex_year = ' . ($year - 2) . ') + (SELECT SUM(x.comp_capex_unit_val) FROM comparative_capex_unit_tbl x WHERE d.ag_id = x.ag_id AND x.comp_capex_unit_status = 1 AND x.comp_capex_unit_year = ' . ($year - 2) . ')
			)as capex_total2,

			
		'
		);

		$capex_group_arr = array();
		foreach($capex_asset as $row){
			$ag_id = $row->ag_id;
			$asset_group_name = $row->ag_name;
			$capex_total = $row->capex_total;
			$capex_total1 = $row->capex_total1;
			$capex_total2 = $row->capex_total2;
			if(!array_key_exists($ag_id, $capex_group_arr)){
				$capex_group_arr[$ag_id]['ag_name'] = $asset_group_name;
				$capex_group_arr[$ag_id]['capex_total'] = $capex_total;
				$capex_group_arr[$ag_id]['capex_total1'] = $capex_total1;
				$capex_group_arr[$ag_id]['capex_total2'] = $capex_total2;
			}else{
				$capex_group_arr[$ag_id]['capex_total'] += $capex_total;
				$capex_group_arr[$ag_id]['capex_total1'] += $capex_total1;
				$capex_group_arr[$ag_id]['capex_total2'] += $capex_total2;
			}
			
		}

		$data['capex_group'] = $capex_group_arr;
		$data['capex_subgroup'] = $capex_asset;
		return $data;
	}

	public function _get_noi_segment_month($year, $com_data, $brand_list, $cost_center_group_id){
		$select_noi_com = 'SUM(dashboard_brand_summary_sales_unit) as sales_unit, SUM(dashboard_brand_summary_net_sales) as net_sales, SUM(dashboard_brand_summary_variable_cost) as variable_cost';


	    /*Commodity January*/

	    for($a = 1; $a <= 12; $a++){
	    	$month = $year . '-' . $a .'-01';
		    $get_noi = $this->admin->check_data('dashboard_brand_summary_tbl', 'brand_id IN ' . $brand_list . ' AND dashboard_brand_summary_date = "' .  $month . '" AND dashboard_brand_summary_status = 1', TRUE, $select_noi_com);

		    $sales_unit[$a] = 0;
		    $net_sales[$a]= 0;
		    $variable_cost[$a] = 0;
		    $nsp[$a] = 0;
		    $variable_unit[$a] = 0;
		    $margin[$a] = 0;
		    $margin_unit[$a] = 0;
		    $margin_percent[$a] = 0;
		    if($get_noi['result'] == TRUE){
		    	$sales_unit[$a] = $get_noi['info']->sales_unit;
		    	$net_sales[$a] = $get_noi['info']->net_sales;
		    	$variable_cost[$a] = $get_noi['info']->variable_cost;
		    	$nsp[$a] = $sales_unit[$a] > 0 ? $net_sales[$a] / $sales_unit[$a] : 0;
		    	$variable_unit[$a] = $sales_unit[$a] > 0 ? $variable_cost[$a] / $sales_unit[$a] : 0;

		    	$margin[$a] = $net_sales[$a] - $variable_cost[$a];
		    	$margin_unit[$a] = $net_sales[$a] > 0 ?  $margin[$a] / $sales_unit[$a] : 0;
		    	$margin_percent[$a] = $net_sales[$a] > 0 ? ($margin[$a] / $net_sales[$a]) * 100 : 0;
		    }

		    $select_summary_period = 'SUM(dashboard_opex_amount) + (SELECT SUM(x.dashboard_opex_unit_amount) FROM dashboard_opex_unit_tbl x, cost_center_group_tbl y WHERE x.cost_center_group_id = y.cost_center_group_id AND x.dashboard_opex_unit_status = 1 AND y.cost_center_group_id = ' . $cost_center_group_id . ' AND x.dashboard_opex_unit_date = "' . $month . '") as total_period_cost';
		    $get_brand_period = $this->admin->check_data('dashboard_opex_tbl', array('cost_center_group_id' => $cost_center_group_id, 'dashboard_opex_date' => $month, 'dashboard_opex_status' => 1), TRUE, $select_summary_period);

		    $period[$a] = 0;
		    $period_unit[$a] = 0;
		    if($get_brand_period['result'] == TRUE){
		    	$period[$a] = $get_brand_period['info']->total_period_cost;
		    	$period_unit[$a] = $sales_unit[$a] > 0 ?  $period[$a] / $sales_unit[$a] : 0;
		    }

		    $noi[$a] = $margin[$a] - $period[$a];
		    $noi_unit[$a] = $sales_unit[$a] > 0 ? $noi[$a] / $sales_unit[$a]: 0;
		    $noi_percent[$a] = $net_sales[$a] > 0 ? ($noi[$a] / $net_sales[$a]) * 100 : 0;
	    }

	    $noi_com_tbl = '
	    		<tr>
	    			<td>Sale Volume, in Unit</td>
	    			<td align="right">' . number_format($com_data['sales_unit']/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[1]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[2]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[3]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[4]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[5]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[6]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[7]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[8]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[9]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[10]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[11]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[12]/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>NET SALES</td>
	    			<td align="right">' . number_format($com_data['net_sales']/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[1]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[2]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[3]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[4]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[5]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[6]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[7]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[8]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[9]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[10]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[11]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[12]/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>NSP per Unit</td>
	    			<td align="right">' . number_format($com_data['nsp'], 2) . '</td>
	    			<td align="right">' . number_format($nsp[1], 2) . '</td>
	    			<td align="right">' . number_format($nsp[2], 2) . '</td>
	    			<td align="right">' . number_format($nsp[3], 2) . '</td>
	    			<td align="right">' . number_format($nsp[4], 2) . '</td>
	    			<td align="right">' . number_format($nsp[5], 2) . '</td>
	    			<td align="right">' . number_format($nsp[6], 2) . '</td>
	    			<td align="right">' . number_format($nsp[7], 2) . '</td>
	    			<td align="right">' . number_format($nsp[8], 2) . '</td>
	    			<td align="right">' . number_format($nsp[9], 2) . '</td>
	    			<td align="right">' . number_format($nsp[10], 2) . '</td>
	    			<td align="right">' . number_format($nsp[11], 2) . '</td>
	    			<td align="right">' . number_format($nsp[12], 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Variable Cost</td>
	    			<td align="right">' . number_format($com_data['variable_cost']/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[1]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[2]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[3]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[4]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[5]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[6]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[7]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[8]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[9]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[10]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[11]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[12]/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Var. Cost/Unit</td>
	    			<td align="right">' . number_format($com_data['variable_unit'], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[1], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[2], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[3], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[4], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[5], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[6], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[7], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[8], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[9], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[10], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[11], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[12], 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Contribution Margin</td>
	    			<td align="right">' . number_format($com_data['margin']/1000) . '</td>
	    			<td align="right">' . number_format($margin[1]/1000) . '</td>
	    			<td align="right">' . number_format($margin[2]/1000) . '</td>
	    			<td align="right">' . number_format($margin[3]/1000) . '</td>
	    			<td align="right">' . number_format($margin[4]/1000) . '</td>
	    			<td align="right">' . number_format($margin[5]/1000) . '</td>
	    			<td align="right">' . number_format($margin[6]/1000) . '</td>
	    			<td align="right">' . number_format($margin[7]/1000) . '</td>
	    			<td align="right">' . number_format($margin[8]/1000) . '</td>
	    			<td align="right">' . number_format($margin[9]/1000) . '</td>
	    			<td align="right">' . number_format($margin[10]/1000) . '</td>
	    			<td align="right">' . number_format($margin[11]/1000) . '</td>
	    			<td align="right">' . number_format($margin[12]/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>CM Per Unit</td>
	    			<td align="right">' . number_format($com_data['margin_unit'], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[1], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[2], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[3], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[4], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[5], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[6], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[7], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[8], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[9], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[10], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[11], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[12], 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>CM (%)</td>
	    			<td align="right">' . number_format($com_data['margin_percent']) . '%</td>
	    			<td align="right">' . number_format($margin_percent[1]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[2]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[3]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[4]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[5]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[6]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[7]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[8]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[9]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[10]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[11]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[12]) . '%</td>
	    		</tr>

	    		<tr>
	    			<td>Period Cost</td>
	    			<td align="right">' . number_format($com_data['period']/1000) . '</td>
	    			<td align="right">' . number_format($period[1]/1000) . '</td>
	    			<td align="right">' . number_format($period[2]/1000) . '</td>
	    			<td align="right">' . number_format($period[3]/1000) . '</td>
	    			<td align="right">' . number_format($period[4]/1000) . '</td>
	    			<td align="right">' . number_format($period[5]/1000) . '</td>
	    			<td align="right">' . number_format($period[6]/1000) . '</td>
	    			<td align="right">' . number_format($period[7]/1000) . '</td>
	    			<td align="right">' . number_format($period[8]/1000) . '</td>
	    			<td align="right">' . number_format($period[9]/1000) . '</td>
	    			<td align="right">' . number_format($period[10]/1000) . '</td>
	    			<td align="right">' . number_format($period[11]/1000) . '</td>
	    			<td align="right">' . number_format($period[12]/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Period Cost/ Unit</td>
	    			<td align="right">' . number_format($com_data['period_unit'], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[1], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[2], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[3], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[4], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[5], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[6], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[7], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[8], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[9], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[10], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[11], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[12], 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Other Income/Expenses</td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    		</tr>

	    		<tr>
	    			<td>Others - Per Unit</td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    		</tr>

	    		<tr>
	    			<td>NOI</td>
	    			<td align="right">' . number_format($com_data['noi']/1000) . '</td>
	    			<td align="right">' . number_format($noi[1]/1000) . '</td>
	    			<td align="right">' . number_format($noi[2]/1000) . '</td>
	    			<td align="right">' . number_format($noi[3]/1000) . '</td>
	    			<td align="right">' . number_format($noi[4]/1000) . '</td>
	    			<td align="right">' . number_format($noi[5]/1000) . '</td>
	    			<td align="right">' . number_format($noi[6]/1000) . '</td>
	    			<td align="right">' . number_format($noi[7]/1000) . '</td>
	    			<td align="right">' . number_format($noi[8]/1000) . '</td>
	    			<td align="right">' . number_format($noi[9]/1000) . '</td>
	    			<td align="right">' . number_format($noi[10]/1000) . '</td>
	    			<td align="right">' . number_format($noi[11]/1000) . '</td>
	    			<td align="right">' . number_format($noi[12]/1000) . '</td>
	    		</tr>


	    		<tr>
	    			<td>NOI per Unit</td>
	    			<td align="right">' . number_format($com_data['noi_unit'], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[1], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[2], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[3], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[4], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[5], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[6], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[7], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[8], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[9], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[10], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[11], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[12], 2) . '</td>
	    		</tr>


	    		<tr>
	    			<td>% NOI to Net Sales</td>
	    			<td align="right">' . number_format($com_data['noi_percent']) . '%</td>
	    			<td align="right">' . number_format($noi_percent[1]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[2]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[3]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[4]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[5]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[6]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[7]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[8]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[9]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[10]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[11]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[12]) . '%</td>
	    		</tr>
	    ';

	    return $noi_com_tbl;
	}

	public function compute_bom_material($bc_id, $year, $material_id, $brand_id){
		$info = $this->_require_login();

		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','12048M');
		
		
		$get_jan_noi = $this->bom_summary_material($bc_id, $year . '-01-01', $year, $material_id, $brand_id);

		$get_feb_noi = $this->bom_summary_material($bc_id, $year . '-02-01', $year, $material_id, $brand_id);

		$get_mar_noi = $this->bom_summary_material($bc_id, $year . '-03-01', $year, $material_id, $brand_id);

		$get_apr_noi = $this->bom_summary_material($bc_id, $year . '-04-01', $year, $material_id, $brand_id);

		$get_may_noi = $this->bom_summary_material($bc_id, $year . '-05-01', $year, $material_id, $brand_id);

		$get_jun_noi = $this->bom_summary_material($bc_id, $year . '-06-01', $year, $material_id, $brand_id);

		$get_jul_noi = $this->bom_summary_material($bc_id, $year . '-07-01', $year, $material_id, $brand_id);

		$get_aug_noi = $this->bom_summary_material($bc_id, $year . '-08-01', $year, $material_id, $brand_id);

		$get_sep_noi = $this->bom_summary_material($bc_id, $year . '-09-01', $year, $material_id, $brand_id);

		$get_oct_noi = $this->bom_summary_material($bc_id, $year . '-10-01', $year, $material_id, $brand_id);

		$get_nov_noi = $this->bom_summary_material($bc_id, $year . '-11-01', $year, $material_id, $brand_id);

		$get_dec_noi = $this->bom_summary_material($bc_id, $year . '-12-01', $year, $material_id, $brand_id);
	}

	public function bom_summary_material($bc_id, $date, $year, $material_id, $brand_id){
		$info = $this->_require_login();

 		$year = date('Y', strtotime($date));
 		$this->db->trans_start();

		//Check BOM Summary table
		$where_bom = array('material_id' => $material_id, 'brand_id' => $brand_id, 'bc_id' => $bc_id, 'bom_summary_year' => $year, 'bom_summary_status' => 1);
		$check_summary = $this->admin->check_data('bom_summary_tbl', $where_bom, TRUE);

		if($check_summary['result'] == TRUE){
			$bom_summary_id = $check_summary['info']->bom_summary_id;
		}else{

			//Insert Summary
			$set_bom = array(
				'material_id' => $material_id,
				'brand_id' => $brand_id,
				'bc_id' => $bc_id,
				'bom_summary_year' => $year,
				'bom_summary_added' => date_now(),
				'bom_summary_status' => 1
			);

			$insert_summary = $this->admin->insert_data('bom_summary_tbl', $set_bom, TRUE);
			$bom_summary_id = $insert_summary['id'];
		}

		
		//Get SKU costing base on generated above and get raw materials
		$check_sku = $this->admin->get_query("SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= " . $material_id . " AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = " . $bc_id . " AND b.prod_trans_dtl_date = '" . $date . "' AND a.brand_id = " . $brand_id . " AND a.process_type_id = 5 AND c.component_type = 'COST OF SALES'", TRUE);
		if(!empty($check_sku)){
			
			$get_bom = $this->db->query('
				SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details, b.rate, b.cost, b.amount_type_id FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= ' . $material_id . ' AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND b.prod_trans_dtl_status <> 5 AND a.brand_id = ' . $brand_id . ' AND a.process_type_id = 5 AND b.prod_trans_dtl_status <> 5 AND c.component_type != \'COST OF SALES\' AND c.component_type != \'SALES REVENUE\'

					UNION ALL

					SELECT e.service_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.service_desc as mat_details, b.rate, b.cost, b.amount_type_id FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, services_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= ' . $material_id . ' AND a.prod_id = d.material_id AND b.article_id = e.service_id AND b.article_type_id = 2 AND a.prod_trans_status = 3 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND b.prod_trans_dtl_status <> 5 AND b.prod_trans_dtl_status <> 5 AND a.brand_id = ' . $brand_id . ' AND a.process_type_id = 5 AND e.service_desc != "PERCENT MARKUP"
			')->result();
			
			$bom_total = 0;
			$bom_multiplier = 1;
			$sales_commision = 0;
			$amount_type = 0;
			foreach($get_bom as $row_bom){
				$bom_cost = $row_bom->cost;
				$bom_rate = $row_bom->rate;

				$bom_multiplier = 1;
				if($row_bom->component_type == "COST OF SALES" && $rate > 0){
					$bom_multiplier = $rate;

				}elseif($row_bom->component_type == 'SALES COMMISSION'){
					$amount_type = $row_bom->amount_type_id;
					$sales_commision += $bom_cost;
				}else{
					if($bom_rate > 0){
						$bom_total = $bom_total + ($bom_cost / $bom_rate);
					}else{
						$bom_total = $bom_total + $bom_cost;
					}
				}
			}
		}else{

			$sales_commision = 0;
			$amount_type = 0;
			$bom_multiplier = 1;
			$bom_total = 0;
		}

		$where_det = array('bom_summary_id' => $bom_summary_id, 'bom_summary_det_date' => $date, 'bom_summary_det_status' => 1);
		$check_bom_det = $this->admin->check_data('bom_summary_details_tbl', $where_det, TRUE);
		if($check_bom_det['result'] == TRUE){
			$bom_summary_det_id = $check_bom_det['info']->bom_summary_det_id;

			$set_det_total = array(
				'bom_summary_det_total' => $bom_total,
				'bom_summary_det_multi' => $bom_multiplier,
				'bom_summary_det_commision' => $sales_commision,
				'amount_type_id' => $amount_type,
			);
			$where_det_total = array('bom_summary_det_id' => $bom_summary_det_id);
			$update_det_total = $this->admin->update_data('bom_summary_details_tbl', $set_det_total, $where_det_total);
		}else{
			$set_det = array(
				'bom_summary_id' => $bom_summary_id,
				'bom_summary_det_total' => $bom_total,
				'bom_summary_det_multi' => $bom_multiplier,
				'bom_summary_det_commision' => $sales_commision,
				'amount_type_id' => $amount_type,
				'bom_summary_det_date' => $date,
				'bom_summary_det_added' => date_now(),
				'bom_summary_det_status' => 1
			);

			$insert_bom_det = $this->admin->insert_data('bom_summary_details_tbl', $set_det);
		}


		if($this->db->trans_status() === FALSE){
			$this->db->trans_rollback();
			$msg = '<div class="alert alert-danger">Error please try again!</div>';
		}else{
			$this->db->trans_commit();
			$msg = '<div class="alert alert-success">Price successfully adjusted.</strong></div>';
		}

	}

	public function download_sales_bom($bc_id, $year){
		$info = $this->_require_login();
		echo $bc_id = decode($bc_id);
		$check_bc = $this->admin->check_data('bc_tbl', array('bc_id' => $bc_id), TRUE);
		if($check_bc['result'] == TRUE){

	 		$bc_name = $check_bc['info']->bc_name;

	 		$this->load->library('excel');

			$spreadsheet = $this->excel;
			$spreadsheet->getProperties()->setCreator('BAVI')
					->setLastModifiedBy('Budgeting System')
					->setTitle('Sales BOM')
					->setSubject('Sales BOM')
					->setDescription('Sales BOM');

			
			$styleArray = array(
					'font' 	=> array(
							'bold' => true,
					),
					'alignment' => array(
							'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
							'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
					),
					'borders' => array(
							'top' => array(
									'style' => PHPExcel_Style_Border::BORDER_THIN,
							),
					),
					'fill' => array(
							'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
							'rotation' => 90,
							'startcolor' => array(
									'argb' => 'FFA0A0A0',
							),
							'endcolor' => array(
									'argb' => 'FFFFFFFF',
							),
					),
			);

			foreach(range('A','B') as $columnID) {
				$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
						->setAutoSize(true);
			}

			$style_center = array(
				'font' => array(
					'bold' => true,
					'size' => 20
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				)
			);

			$style_info =  array(
				'font' => array(
					'bold' => true
				)
			);

			$style_border = array(
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				)
			);

			$style_data = array(
				'font' => array(
					'bold' => true
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
				),
			);

			$style_out = array(
				'font' => array(
					'bold' => true,
					'color' => array('rgb' => 'FF0000')
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
				),
			);

			$style_material = array(
				'font' => array(
					'bold' => true
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				)
			);

			$style_mat_code= array(
				'font' => array(
					'bold' => true
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				)
			);

			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Date')
				->setCellValue("B1", 'Business Center')
				->setCellValue("C1", 'Material Code')
				->setCellValue("D1", 'Material Description')
				->setCellValue("E1", 'Brand')
				->setCellValue("F1", 'Item')
				->setCellValue("G1", 'Component')
				->setCellValue("H1", 'Rate')
				->setCellValue("I1", 'Cost/Price')
				->setCellValue("J1", 'BOM Total')
				->setCellValue("K1", 'Sales QTY')
			;

			$join_material = array(
				'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
				'material_tbl c' => 'b.material_id = c.material_id',
				'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
				'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
				'brand_tbl f' => 'e.brand_id = f.brand_id',
				'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = "' . $bc_id . '"',
				'vat_type_tbl h' => 'c.vat_type_id = h.vat_type_id',
				'material_group_tbl i' => 'c.material_group_id = i.material_group_id',
				'sales_details_tbl j' => 'b.sales_item_id = j.sales_item_id AND j.sales_det_status = 1' 
			);
			$get_material = $this->admin->get_join('sales_tbl a', $join_material, FALSE, FALSE, 'c.material_id, e.brand_id, d.bc_id, j.sales_det_date', '*,
				SUM(j.sales_det_qty *
					(IF(
						c.material_group_id = 1,
						IFNULL((SELECT y.sales_live_alw_det_value FROM sales_live_alw_tbl x, sales_live_alw_detail_tbl y WHERE x.sales_live_alw_id = y.sales_live_alw_id AND x.sales_live_alw_status = 1 AND y.sales_live_alw_det_status = 1 AND y.sales_live_alw_det_date = j.sales_det_date AND x.bc_id = ' . $bc_id . '), 1)
						, IF(c.material_group_id = 2,
							IFNULL((SELECT b1.ave_wgt FROM prod_trans_tbl a1, prod_trans_dtl_tbl b1 WHERE a1.prod_trans_id = b1.prod_trans_id AND a1.prod_trans_status = 3 AND a1.process_type_id != 5 AND b1.article_type_id = 1 AND b1.component_type_id = 1 AND b1.prod_trans_dtl_status = 1 AND a1.bc_id = ' . $bc_id . ' AND b1.prod_trans_dtl_date = j.sales_det_date AND a1.prod_id = c.material_id), 1)
						, 1)		
					)
				)
			) as sales_qty
			');

			$count = 2;

			foreach($get_material as $row_sales){
				$material_id = $row_sales->material_id;
				$qty = $row_sales->sales_qty;
				$brand_id = $row_sales->brand_id;
				$date = $row_sales->sales_det_date;

				$check_bom = $this->admin->check_query("SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_code, d.material_id, e.material_desc as mat_details, b.prod_trans_dtl_date, f.brand_name

				FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e, brand_tbl f WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id = d.material_id AND 	b.article_id = e.material_id AND a.brand_id = f.brand_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = " . $bc_id . " AND b.prod_trans_dtl_date = '" . $date . "' AND b.prod_trans_dtl_status <> 5 AND a.process_type_id = 5 AND c.component_type = 'COST OF SALES' AND d.material_id = " . $material_id . " AND f.brand_id = " . $brand_id . " ORDER BY d.material_desc, d.material_id", TRUE);

				if($check_bom['result'] == TRUE){
					$sku_name = $check_bom['info']->material_desc;
					$sku_code = $check_bom['info']->material_code;
					$brand_name = $check_bom['info']->brand_name;
					$bom_id = $check_bom['info']->prod_trans_id;
					$sales_qty = $qty;

					$get_bom = $this->db->query('
						SELECT *

						FROM
							(SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details, b.rate, b.cost, b.amount_type_id, b.prod_trans_dtl_date FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.process_type_id = 5 AND c.component_type != \'COST OF SALES\' AND c.component_type != \'SALES REVENUE\' AND a.prod_trans_id = ' . $bom_id . ' AND b.prod_trans_dtl_date = "' . $date . '"

							UNION ALL

							SELECT e.service_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.service_desc as mat_details, b.rate, b.cost, b.amount_type_id, b.prod_trans_dtl_date FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, services_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id = d.material_id AND b.article_id = e.service_id AND b.article_type_id = 2 AND a.prod_trans_status = 3 AND a.process_type_id = 5 AND a.prod_trans_id = ' . $bom_id . ' AND b.prod_trans_dtl_date = "' . $date . '"
						) as bom

						ORDER BY prod_trans_dtl_date
					')->result();
					
					$bom_total = 0;
					$bom_multiplier = 1;
					$sales_commision = 0;
					$amount_type = 0;
					
					foreach($get_bom as $row_bom){
						$bom_cost = $row_bom->cost;
						$bom_rate = $row_bom->rate;

						$mat_details = $row_bom->mat_details;
						$component = $row_bom->component_type;
						$date = $row_bom->prod_trans_dtl_date;

						$bom_multiplier = 1;
						if($row_bom->component_type == "COST OF SALES" && $rate > 0){
							$bom_multiplier = $rate;

						}elseif($row_bom->component_type == 'SALES COMMISSION'){
							$amount_type = $row_bom->amount_type_id;
							$sales_commision += $bom_cost;
							$bom_total = $bom_cost;
						}else{
							if($bom_rate > 0){
								$bom_total = $bom_cost / $bom_rate;
							}else{
								$bom_total = $bom_cost;
							}
						}


						$spreadsheet->setActiveSheetIndex(0)
							->setCellValue("A" . $count, $date)
							->setCellValue("B" . $count, $bc_name)
							->setCellValue("C" . $count, $sku_code)
							->setCellValue("D" . $count, $sku_name)
							->setCellValue("E" . $count, $brand_name)
						
							->setCellValue("F" . $count, $mat_details)
							->setCellValue("G" . $count, $component)
							->setCellValue("H" . $count, $bom_rate)
							->setCellValue("I" . $count, $bom_cost)
							->setCellValue("J" . $count, $bom_total)
							->setCellValue("K" . $count, $sales_qty)
						;

						$bom_total = 0;
						$count++;
					}
				}else{

				}
			}

			$spreadsheet->getActiveSheet()->getStyle("A1:K" . $count)->applyFromArray($style_border);
			foreach(range('A','K') as $columnID) {
				$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
						->setAutoSize(true);
			}

			$spreadsheet->getActiveSheet()->setTitle('Sales BOM');

			// set right to left direction
			//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

			// Set active sheet index to the first sheet, so Excel opens this as the first sheet
			$spreadsheet->setActiveSheetIndex(0);
			ob_end_clean();
			ob_start();
			// Redirect output to a client’s web browser (Excel2007)
			header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
			$random = generate_random(5);
			header('Content-Disposition: attachment;filename="Budgeting - Sales BOM ' . $bc_name . '_' . $random . '.xlsx"');
			header('Cache-Control: max-age=0');

			// If you're serving to IE over SSL, then the following may be needed
			header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
			header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
			header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
			header('Pragma: public'); // HTTP/1.0

			$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
			$writer->save('php://output');
			exit;
		}
	}


	/* codes to update start here*/

	/*Boiler Cost Module*/

	public function broiler_cost(){
		ini_set('max_execution_time', 0);
		ini_set('memory_limit','2048M');

		
		$info = $this->_require_login_ahg();
		$join_broiler_group = array(
			'user_tbl c' => 'a.created_by = c.user_id'
		);
		$data['broiler_group'] = $this->admin->get_join('broiler_group_tbl a', $join_broiler_group, FALSE,'a.broiler_group_name ASC', FALSE);


		$join_broiler_config = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id',
			'user_tbl c' => 'a.created_by = c.user_id'
		);
		$data['broiler_config'] = $this->admin->get_join('broiler_config_tbl a', $join_broiler_config, FALSE,'a.broiler_subgroup_name ASC', FALSE);

		$data['year'] = $this->_active_year();
		$data['bc'] = $this->admin->get_data('bc_tbl', 'bc_status=1');
		$data['title'] = 'Broiler Cost';
		$data['content'] = $this->load->view('admin/admin_broiler_cost_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function view_broiler_group($id){
		$info = $this->_require_login_ahg();
		$data['broiler_group_id'] = decode($id);
		$broiler_group_id = decode($id);
		/*$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');*/
		$data['title'] = 'Broiler Cost';

		$join_broiler_group = array(
			'broiler_subgroup_tbl b' => 'a.broiler_group_id = b.broiler_group_id and b.broiler_group_id ='.$broiler_group_id,
			'amount_type_tbl c' => 'c.amount_type_id = b.amount_type_id',
			'status_tbl d' => 'd.status_id = a.broiler_group_status and a.broiler_group_status = 1'
		);
		$data['broiler_subgroup'] = $this->admin->get_join('broiler_group_tbl a', $join_broiler_group, FALSE,'b.broiler_subgroup_name ASC');

		$data['content'] = $this->load->view('admin/admin_view_broiler_group_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function _check_lock_status($filter, $load_location = false){
		$lock_status = $this->admin->check_data('lock_tbl', $filter, TRUE);
		$msg = '<div class="alert alert-danger"><strong>Module already locked.</strong></div>';
		if($load_location){
			if($lock_status['result']){
				return $lock_status['result'];
			} else {
				$this->session->set_flashdata('message', $msg);
				redirect($load_location);
			}
		} else {
			if($lock_status['result']){
				return $lock_status['result'];
			} else {
				return false;
			}
		}
	}

	public function view_broiler_config($id){
		$info = $this->_require_login_ahg();
		$data['bc_id'] = decode($id);
		$data['year'] = $this->_active_year();
		$bc_id = decode($id);
		$data['pending_lock_status'] = $this->_check_lock_status(array('module_id'	=>	1,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$this->_active_year()));

		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$data['title'] = 'Broiler Cost';


		$join_broiler_config = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id and a.bc_id ='.$bc_id.' and YEAR(a.config_date) = '.$this->_active_year(),
			'user_tbl c' => 'a.created_by = c.user_id',
			'status_tbl d' => 'd.status_id = a.broiler_config_status and a.broiler_config_status = 1'
		);

		$data['broiler_config'] = $this->admin->get_join('broiler_config_tbl a', $join_broiler_config, FALSE,'a.broiler_subgroup_name ASC', 'a.broiler_subgroup_name');

		$data['content'] = $this->load->view('admin/admin_broiler_config_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function get_broiler_config(){
		$info = $this->_require_login_ahg();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$year =clean_data($this->input->post('broiler_config_date'));
			$bc_id =clean_data(decode($this->input->post('bc_id')));
			$pending_lock_status = $this->_check_lock_status(array('module_id'	=>	1,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$year));
			if($year){
				$join_broiler_config = array(
					'bc_tbl b' => 'a.bc_id = b.bc_id and a.bc_id ='.$bc_id.' and YEAR(a.config_date) = '.$year,
					'user_tbl c' => 'a.created_by = c.user_id',
					'status_tbl d' => 'd.status_id = a.broiler_config_status and a.broiler_config_status = 1'
				);

				$broiler_config = $this->admin->get_join('broiler_config_tbl a', $join_broiler_config, FALSE,'a.broiler_subgroup_name ASC', 'a.broiler_subgroup_name', false, false, false);
				
				$broiler_config_item = '';
				if(count($broiler_config)){
					foreach($broiler_config as $row){
						$broiler_config_item .= '<tr><th>'.$row->broiler_subgroup_name.'</th>';
						$broiler_config_item .= '<th>'.$row->bc_name.'</th>';
						$broiler_config_item .= '<th>'.$row->status_name.'</th>';
						$broiler_config_item .= '<td class="text-center"><a href="'.base_url('admin/edit-broiler-config/' . encode($row->broiler_subgroup_name).'/'.encode($row->bc_id).'/'.$year).'" class="btn-xs glyphicon glyphicon-pencil edit-broiler-config"></a></td>';
						$broiler_config_item .= '</tr>';
					}
					$data['broiler_config_item'] = $broiler_config_item;
					$data['pending_lock_status'] = $pending_lock_status;
					$data['result'] = 1;
				} else {
					$data['result'] = 1;
					$data['pending_lock_status'] = $pending_lock_status;
				}
			} else {
				$data['result'] = 0;
			}
			
				
		} else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function new_broiler_amount_summary($id, $year){
		$info = $this->_require_login_ahg();
		$data['bc_id'] = $id;
		$bc_id = decode($id);


		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$data['title'] = 'Broiler Cost';
		//$year = $this->_active_year() - 1;
		$data['year'] = $year;
		$sql = 'SELECT
					*
				FROM
					broiler_line_item_tbl a
				WHERE
					a.broiler_line_item_id NOT IN (
						SELECT
							broiler_line_item_id
						FROM
							broiler_amount_summary_tbl
						WHERE
							trans_status != 5
						AND trans_type_id = 2
						AND bc_id = '.$bc_id.'
						AND YEAR (trans_date) = '.$year.'
					)';
		$data['broiler_line_item'] = $this->admin->get_query($sql);
		$data['content'] = $this->load->view('admin/admin_new_broiler_amount_summary_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function get_broiler_amount(){
		$info = $this->_require_login_ahg();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$year =clean_data($this->input->post('trans_date'));
			$bc_id =clean_data(decode($this->input->post('bc_id')));
			
			if($year){
				$sql = 'SELECT
							*
						FROM
							broiler_line_item_tbl a
						WHERE
							a.broiler_line_item_id NOT IN (
								SELECT
									broiler_line_item_id
								FROM
									broiler_amount_summary_tbl
								WHERE
									trans_status != 5
								AND trans_type_id = 2
								AND bc_id = '.$bc_id.'
								AND YEAR (trans_date) = '.$year.'
							)';
				$get_broiler_line_item = $this->admin->get_query($sql);
				$broiler_line_item = '';
				if($get_broiler_line_item){
					foreach($get_broiler_line_item as $row){
						$broiler_line_item .= '<tr><input type="hidden" name="broiler_line_item_id[]" value="'.encode($row->broiler_line_item_id).'">';
						$broiler_line_item .= '<td class="text-center"><a href="#" class="slider-broiler"><span class="fa fa-sliders"></span></td>';
						$broiler_line_item .= '<td>'.$row->broiler_line_item.'</td>';
						for ($i=1; $i <= 12 ; $i++){
							$month = date('M', strtotime($year.'-'.$i.'-01'));
							$broiler_line_item .= '<td><input type="text" name="trans_qty['.$month.'][]" class="form-control input-sm" size="10"></td>';
						}
						$broiler_line_item .= '</tr>';
					}
					$data['broiler_line_item'] = $broiler_line_item;
					$data['result'] = 1;
				} else {
					
					$data['result'] = 1;
				}
			} else {
				$data['result'] = 0;
			}
			
				
		} else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function get_broiler_amount_summary(){
		$info = $this->_require_login_ahg();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$year =clean_data($this->input->post('year'));
			$bc_id =clean_data(decode($this->input->post('bc_id')));
			$pending_lock_status = $this->_check_lock_status(array('module_id'	=>	1,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$year));
			if($year){
				$join = array(
					'bc_tbl b' => 'a.bc_id = b.bc_id and a.bc_id ='.$bc_id,
					'status_tbl d' => 'd.status_id = a.trans_status and a.trans_status != 5',
					'broiler_line_item_tbl e' => 'a.broiler_line_item_id = e.broiler_line_item_id and a.trans_type_id = 2 and YEAR(a.trans_date) = "'.$year.'"'
				);
				$broiler_amount_summary = $this->admin->get_join('broiler_amount_summary_tbl a', $join, FALSE,'YEAR(a.trans_date) DESC', 'a.broiler_line_item_id, YEAR(a.trans_date)');
				
				$broiler_amount_item = '';
				if(count($broiler_amount_summary)){
					foreach($broiler_amount_summary as $row){
						$trans_year_2 = date('Y', strtotime($row->trans_date));

						$broiler_amount_item .= '<tr><th>'.$row->broiler_line_item.'</th>';
						$broiler_amount_item .= '<th>'.$trans_year_2.'</th>';

						if($row->status_id == 3){
							if($pending_lock_status){
								$broiler_amount_item .= '<td class="text-center"><a href="'.base_url('admin/edit-broiler-amount-summary/' . encode($row->broiler_line_item_id).'/'.encode($trans_year_2).'/'.encode($bc_id)).'" class="brn btn-xs glyphicon glyphicon-pencil" title="Edit"></a>&nbsp;&nbsp;<a href="#" data-id="'.encode($row->broiler_line_item_id).'" data-bc_id="'.encode($row->bc_id).'" data-year="'.encode($trans_year_2).'" class="brn btn-xs btn-xs glyphicon glyphicon-remove cancel-broiler-amount-summary" title="Cancel"></a></td>';
							} else {
								$broiler_amount_item .= '<td class="text-center"><a href="'.base_url('admin/edit-broiler-amount-summary/' . encode($row->broiler_line_item_id).'/'.encode($trans_year_2).'/'.encode($bc_id)).'" class="brn btn-xs glyphicon glyphicon-pencil" title="Edit"></a></td>';
							}
						} else {
							$broiler_amount_item .= '<td></td>';
						}
						
						$broiler_amount_item .= '</tr>';
					}
					$data['broiler_amount_item'] = $broiler_amount_item;
					$data['pending_lock_status'] = $pending_lock_status;
					$data['result'] = 1;
				} else {
					$data['result'] = 1;
					$data['pending_lock_status'] = $pending_lock_status;
				}
			} else {
				$data['result'] = 0;
			}
			
				
		} else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function add_broiler_amount_summary(){
		$info = $this->_require_login_ahg();
		$user_id = decode($info['user_id']);
		$status = 3;
		
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$bc_id = clean_data(decode($this->input->post('bc_id')));
			$year = clean_data($this->input->post('year'));
			
			if(!empty($bc_id) && !empty($year)){
				$id = clean_data($this->input->post('broiler_line_item_id'));
				$trans_qty = clean_data($this->input->post('trans_qty'));
				$count = 0;
				$this->db->trans_start();
				foreach($id as $row){

					$broiler_line_item_id = decode($row);

					$sql = 'SELECT
								a.broiler_line_item_id
							FROM
								broiler_amount_summary_tbl a
							
							WHERE
								trans_status != 5
							AND YEAR (`a`.`trans_date`) = '.$year.'
							AND a.bc_id = '.$bc_id.'
							AND a.trans_type_id = 2
							AND a.broiler_line_item_id = '.$broiler_line_item_id.'
							GROUP BY
								a.broiler_line_item_id';
					$get_broiler_amount_summary = $this->admin->check_query($sql);
					if(!$get_broiler_amount_summary){
						
						for ($i=1; $i <= 12 ; $i++) {
							$month = date('M', strtotime($year.'-'.$i.'-01'));
							$trans_qty_amount = $trans_qty[$month][$count];
							$date = $year . '-' .$i.'-01';
							
							$insert = array(
								'trans_type_id' => 2,
								'broiler_line_item_id' => $broiler_line_item_id,
								'bc_id' => $bc_id,
								'trans_date' =>$date,
								'trans_qty' =>$trans_qty_amount,
								'trans_status' => 3
							);
							$this->admin->insert_data('broiler_amount_summary_tbl', $insert, true);
							
						}
						$count++;
					} else {
						$msg = '<div class="alert alert-danger">Notice! Data Already exist!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/broiler-trans/' . encode($bc_id));
					}
				}

				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success"><strong>Production Transaction successfully added.</strong></div>';
				}
				
				$this->session->set_flashdata('message', $msg);
				redirect('admin/broiler-trans/' . encode($bc_id));
					
			}else{
				echo 'Something wrong';
			}
		}
	}

	public function edit_broiler_amount_summary($id, $year, $bc_id){
		$info = $this->_require_login_ahg();
		$data['broiler_line_item_id'] = $id;
		$data['bc_id'] = $bc_id;
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => decode($bc_id)), true, 'bc_name');
		$data['year'] = $year;
		$year = decode($year);
		$data['pending_lock_status'] = $this->_check_lock_status(array('module_id'	=>	1,	'lock_type_id' => 1, 'lock_location_id'	=>	decode($bc_id),	'lock_status_id'	=>	1, 'lock_year'	=>	$year));
		
		$broiler_line_item_id = decode($id);
		
		$join = array(
			'broiler_line_item_tbl e' => 'a.broiler_line_item_id = e.broiler_line_item_id and a.broiler_line_item_id = '.$broiler_line_item_id.' and a.bc_id ='.decode($bc_id).' and YEAR(a.trans_date) = '.$year
		);
		$data['broiler_amount_summary'] = $this->admin->get_join('broiler_amount_summary_tbl a', $join, false, false, 'a.broiler_line_item_id');

		$data['title'] = 'Broiler Cost';
		$data['content'] = $this->load->view('admin/admin_edit_broiler_amount_summary_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function update_broiler_amount_summary(){
		/*echo '<pre>';
		print_r($_POST);
		echo '</pre>';
		exit();*/
		$info = $this->_require_login_ahg();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$bc_id = clean_data(decode($this->input->post('bc_id')));
			$year = clean_data(decode($this->input->post('year')));
			
			if(!empty($bc_id) && !empty($year)){
				$id = clean_data($this->input->post('broiler_line_item_id'));
				$trans_qty = clean_data($this->input->post('trans_qty'));
				$count = 0;
				$this->db->trans_start();
				foreach($id as $row){

					$broiler_line_item_id = decode($row);

					for ($i=1; $i <= 12 ; $i++) {
						
						$trans_qty_amount = $trans_qty[$i][$count];
						$date = $year . '-' .$i.'-01';
						
						$update = array(
							'trans_qty' =>$trans_qty_amount,
						);
						$where = array(
							'broiler_line_item_id' => $broiler_line_item_id,
							'bc_id' => $bc_id,
							'trans_type_id' => 2,
							'MONTH(trans_date)' => $i,
							'YEAR(trans_date)' => $year,
						);
						$this->admin->update_data('broiler_amount_summary_tbl', $update, $where);
					}
					$count++;
				}
				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success"><strong>Production Transaction successfully added.</strong></div>';
				}
				
				$this->session->set_flashdata('message', $msg);
				redirect('admin/broiler-trans/' . encode($bc_id));
			} else {
				echo 'Something wrong on bc';
			}
		} else{
			echo 'Something wrong';
		}
	}

	public function cancel_broiler_amount_summary(){
		/*echo "<pre>";
		print_r($_POST);
		echo "</pre>";
		exit();*/
		$info = $this->_require_login_ahg();
		$user_id = decode($info['user_id']);

		$broiler_line_item_id = clean_data(decode($this->input->post('broiler_line_item_id')));
		$trans_status = clean_data($this->input->post('trans_status'));
		$year = clean_data(decode($this->input->post('year')));
		$bc_id = clean_data(decode($this->input->post('bc_id')));
		
		if($trans_status == 'cancel'){
			$trans_status = 5;
			$status = 'cancelled';
		}

		
		$this->db->trans_start();
		$update_data = array(
			'trans_status' => $trans_status
		);
		$where = array(
			'broiler_line_item_id' => $broiler_line_item_id,
			'trans_type_id' => 2,
			'bc_id' => $bc_id,
			'YEAR(trans_date)' => $year
		);
		$this->admin->update_data('broiler_amount_summary_tbl', $update_data, $where);

		if($this->db->trans_status() === FALSE){
			$this->db->trans_rollback();
			$msg = '<div class="alert alert-danger">Error please try again!</div>';
		}else{
			$this->db->trans_commit();
			$msg = '<div class="alert alert-success"><strong>Actual Data successfully '.$status.'.</strong></div>';
		}
		$this->session->set_flashdata('message', $msg);
		
		redirect('admin/broiler-trans/'.encode($bc_id));
	}

	public function new_broiler_config($id, $year){
		$info = $this->_require_login_ahg();
		$data['bc_id'] = $id;
		//$year = $this->_active_year();
		$bc_id = decode($id);
		$data['year'] = $year;

		$this->_check_lock_status( array('module_id'	=>	1,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$year), 'Admin/broiler-cost' );

		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$data['title'] = 'Broiler Cost';
		$sql = 'SELECT
					*
				FROM
					broiler_subgroup_tbl a
				INNER JOIN broiler_group_tbl b ON a.broiler_group_id = b.broiler_group_id
				AND b.broiler_group_status = 1
				AND a.config_show = 1
				WHERE
					broiler_subgroup_name NOT IN (
						SELECT
							broiler_subgroup_name
						FROM
							broiler_config_tbl
						WHERE
							broiler_config_status = 1
						AND bc_id = '.$bc_id.'
						AND YEAR (config_date) = '.$year.'
						GROUP BY
							broiler_subgroup_name
					)';
		
		$data['config_subgroup'] = $this->admin->get_query($sql);
		$data['content'] = $this->load->view('admin/admin_add_broiler_config_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function edit_broiler_config($item_name, $bc_id, $year){
		$info = $this->_require_login_ahg();
		$broiler_subgroup_name = decode($item_name);
		$data['bc_id'] = $bc_id;
		$bc_id = decode($bc_id);

		$data['pending_lock_status'] = $this->_check_lock_status(array('module_id'	=>	1,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$year));

		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$data['title'] = 'Broiler Cost';
		$data['year'] = $year;
		//$year = $this->_active_year();
		$data['config_subgroup'] = $this->admin->get_query("SELECT
											broiler_config_id,
											broiler_subgroup_name,
											(
												SELECT
													a.config_qty
												FROM
													broiler_config_tbl a
												WHERE
													a.broiler_subgroup_name = '$broiler_subgroup_name'
												AND a.bc_id = ".$bc_id."
												AND MONTH (a.config_date) = 1
												AND YEAR (a.config_date) = ".$year."
												AND a.broiler_config_status = 1
											) AS jan,
											(
												SELECT
													a.config_qty
												FROM
													broiler_config_tbl a
												WHERE
													a.broiler_subgroup_name = '$broiler_subgroup_name'
												AND a.bc_id = ".$bc_id."
												AND MONTH (a.config_date) = 2
												AND YEAR (a.config_date) = ".$year."
												AND a.broiler_config_status = 1
											) AS feb,
											(
												SELECT
													a.config_qty
												FROM
													broiler_config_tbl a
												WHERE
													a.broiler_subgroup_name = '$broiler_subgroup_name'
												AND a.bc_id = ".$bc_id."
												AND MONTH (a.config_date) = 3
												AND YEAR (a.config_date) = ".$year."
												AND a.broiler_config_status = 1
											) AS mar,
											(
												SELECT
													a.config_qty
												FROM
													broiler_config_tbl a
												WHERE
													a.broiler_subgroup_name = '$broiler_subgroup_name'
												AND a.bc_id = ".$bc_id."
												AND MONTH (a.config_date) = 4
												AND YEAR (a.config_date) = ".$year."
												AND a.broiler_config_status = 1
											) AS apr,
											(
												SELECT
													a.config_qty
												FROM
													broiler_config_tbl a
												WHERE
													a.broiler_subgroup_name = '$broiler_subgroup_name'
												AND a.bc_id = ".$bc_id."
												AND MONTH (a.config_date) = 5
												AND YEAR (a.config_date) = ".$year."
												AND a.broiler_config_status = 1
											) AS may,
											(
												SELECT
													a.config_qty
												FROM
													broiler_config_tbl a
												WHERE
													a.broiler_subgroup_name = '$broiler_subgroup_name'
												AND a.bc_id = ".$bc_id."
												AND MONTH (a.config_date) = 6
												AND YEAR (a.config_date) = ".$year."
												AND a.broiler_config_status = 1
											) AS jun,
											(
												SELECT
													a.config_qty
												FROM
													broiler_config_tbl a
												WHERE
													a.broiler_subgroup_name = '$broiler_subgroup_name'
												AND a.bc_id = ".$bc_id."
												AND MONTH (a.config_date) = 7
												AND YEAR (a.config_date) = ".$year."
												AND a.broiler_config_status = 1
											) AS jul,
											(
												SELECT
													a.config_qty
												FROM
													broiler_config_tbl a
												WHERE
													a.broiler_subgroup_name = '$broiler_subgroup_name'
												AND a.bc_id = ".$bc_id."
												AND MONTH (a.config_date) = 8
												AND YEAR (a.config_date) = ".$year."
												AND a.broiler_config_status = 1
											) AS aug,
											(
												SELECT
													a.config_qty
												FROM
													broiler_config_tbl a
												WHERE
													a.broiler_subgroup_name = '$broiler_subgroup_name'
												AND a.bc_id = ".$bc_id."
												AND MONTH (a.config_date) = 9
												AND YEAR (a.config_date) = ".$year."
												AND a.broiler_config_status = 1
											) AS sep,
											(
												SELECT
													a.config_qty
												FROM
													broiler_config_tbl a
												WHERE
													a.broiler_subgroup_name = '$broiler_subgroup_name'
												AND a.bc_id = ".$bc_id."
												AND MONTH (a.config_date) = 10
												AND YEAR (a.config_date) = ".$year."
												AND a.broiler_config_status = 1
											) AS oct,
											(
												SELECT
													a.config_qty
												FROM
													broiler_config_tbl a
												WHERE
													a.broiler_subgroup_name = '$broiler_subgroup_name'
												AND a.bc_id = ".$bc_id."
												AND MONTH (a.config_date) = 11
												AND YEAR (a.config_date) = ".$year."
												AND a.broiler_config_status = 1
											) AS nov,
											(
												SELECT
													a.config_qty
												FROM
													broiler_config_tbl a
												WHERE
													a.broiler_subgroup_name = '$broiler_subgroup_name'
												AND a.bc_id = ".$bc_id."
												AND MONTH (a.config_date) = 12
												AND YEAR (a.config_date) = ".$year."
												AND a.broiler_config_status = 1
											) AS decem
										FROM
											`broiler_config_tbl` `a`
										where a. broiler_subgroup_name = '$broiler_subgroup_name'
										GROUP BY
											broiler_subgroup_name");
		$data['content'] = $this->load->view('admin/admin_edit_broiler_config_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function add_broiler_config(){
		$info = $this->_require_login_ahg();
		$user_id = decode($info['user_id']);

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$bc_id = clean_data(decode($this->input->post('bc_id')));
			$year = clean_data(decode($this->input->post('year')));
			$this->_check_lock_status( array('module_id'	=>	1,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$year), 'Admin/broiler-cost' );

			if(!empty($bc_id)){
				$id = clean_data($this->input->post('broiler_subgroup_id'));
				$config_qty = clean_data($this->input->post('config_qty'));
				$count = 0;
				$this->db->trans_start();
				foreach($id as $row){

					$broiler_subgroup_id = decode($row);
					$check_broiler_subgroup_info = $this->admin->check_data('broiler_subgroup_tbl', array('broiler_subgroup_id' => $broiler_subgroup_id), TRUE);
					if($check_broiler_subgroup_info['result'] == TRUE){
						$broiler_subgroup_name = $check_broiler_subgroup_info['info']->broiler_subgroup_name;
						$amount_type_id = $check_broiler_subgroup_info['info']->amount_type_id;
					} else {
						$msg = '<div class="alert alert-danger">Error! Please try again!</div>';	
						$this->session->set_flashdata('message', $msg);
						redirect('admin/view-broiler-config/' . encode($bc_id));
					}

					$check_broiler_subgroup_name = $this->admin->check_data('broiler_config_tbl', array('broiler_subgroup_name' => $broiler_subgroup_name, 'broiler_config_status' => 1,	'bc_id'	=>	$bc_id, 'YEAR(config_date)' => $year), TRUE);
					if($check_broiler_subgroup_name['result'] != TRUE){
						
						
						$qty_jan = $config_qty['jan'][$count];
						$date = $year . '-' . '01-01';
						$insert_broiler_config = array(
							'broiler_subgroup_name' => $broiler_subgroup_name,
							'bc_id' =>$bc_id,
							'config_date' => $date,
							'config_qty' => $qty_jan,
							'broiler_config_status' => 1,
							'amount_type_id' => $amount_type_id,
							'created_by' => $user_id,
							'created_ts' => date_now(),
							'trans_type_id' => 1
						);
						$this->admin->insert_data('broiler_config_tbl', $insert_broiler_config);

						
						$qty_feb = $config_qty['feb'][$count];
						$date = $year . '-' . '02-01';
						$insert_broiler_config = array(
							'broiler_subgroup_name' => $broiler_subgroup_name,
							'bc_id' =>$bc_id,
							'config_date' => $date,
							'config_qty' => $qty_feb,
							'broiler_config_status' => 1,
							'amount_type_id' => $amount_type_id,
							'created_by' => $user_id,
							'created_ts' => date_now(),
							'trans_type_id' => 1
						);
						$this->admin->insert_data('broiler_config_tbl', $insert_broiler_config);

						
						$qty_mar = $config_qty['mar'][$count];
						$date = $year . '-' . '03-01';
						$insert_broiler_config = array(
							'broiler_subgroup_name' => $broiler_subgroup_name,
							'bc_id' =>$bc_id,
							'config_date' => $date,
							'config_qty' => $qty_mar,
							'broiler_config_status' => 1,
							'amount_type_id' => $amount_type_id,
							'created_by' => $user_id,
							'created_ts' => date_now(),
							'trans_type_id' => 1
						);
						$this->admin->insert_data('broiler_config_tbl', $insert_broiler_config);

						
						$qty_apr = $config_qty['apr'][$count];
						$date = $year . '-' . '04-01';
						$insert_broiler_config = array(
							'broiler_subgroup_name' => $broiler_subgroup_name,
							'bc_id' =>$bc_id,
							'config_date' => $date,
							'config_qty' => $qty_apr,
							'broiler_config_status' => 1,
							'amount_type_id' => $amount_type_id,
							'created_by' => $user_id,
							'created_ts' => date_now(),
							'trans_type_id' => 1
						);
						$this->admin->insert_data('broiler_config_tbl', $insert_broiler_config);

						
						$qty_may = $config_qty['may'][$count];
						$date = $year . '-' . '05-01';
						$insert_broiler_config = array(
							'broiler_subgroup_name' => $broiler_subgroup_name,
							'bc_id' =>$bc_id,
							'config_date' => $date,
							'config_qty' => $qty_may,
							'broiler_config_status' => 1,
							'amount_type_id' => $amount_type_id,
							'created_by' => $user_id,
							'created_ts' => date_now(),
							'trans_type_id' => 1
						);
						$this->admin->insert_data('broiler_config_tbl', $insert_broiler_config);

						
						$qty_jun = $config_qty['jun'][$count];
						$date = $year . '-' . '06-01';
						$insert_broiler_config = array(
							'broiler_subgroup_name' => $broiler_subgroup_name,
							'bc_id' =>$bc_id,
							'config_date' => $date,
							'config_qty' => $qty_jun,
							'broiler_config_status' => 1,
							'amount_type_id' => $amount_type_id,
							'created_by' => $user_id,
							'created_ts' => date_now(),
							'trans_type_id' => 1
						);
						$this->admin->insert_data('broiler_config_tbl', $insert_broiler_config);

						
						$qty_jul = $config_qty['jul'][$count];
						$date = $year . '-' . '07-01';
						$insert_broiler_config = array(
							'broiler_subgroup_name' => $broiler_subgroup_name,
							'bc_id' =>$bc_id,
							'config_date' => $date,
							'config_qty' => $qty_jul,
							'broiler_config_status' => 1,
							'amount_type_id' => $amount_type_id,
							'created_by' => $user_id,
							'created_ts' => date_now(),
							'trans_type_id' => 1
						);
						$this->admin->insert_data('broiler_config_tbl', $insert_broiler_config);

						
						$qty_aug = $config_qty['may'][$count];
						$date = $year . '-' . '08-01';
						$insert_broiler_config = array(
							'broiler_subgroup_name' => $broiler_subgroup_name,
							'bc_id' =>$bc_id,
							'config_date' => $date,
							'config_qty' => $qty_aug,
							'broiler_config_status' => 1,
							'amount_type_id' => $amount_type_id,
							'created_by' => $user_id,
							'created_ts' => date_now(),
							'trans_type_id' => 1
						);
						$this->admin->insert_data('broiler_config_tbl', $insert_broiler_config);

						
						$qty_sep = $config_qty['sep'][$count];
						$date = $year . '-' . '09-01';
						$insert_broiler_config = array(
							'broiler_subgroup_name' => $broiler_subgroup_name,
							'bc_id' =>$bc_id,
							'config_date' => $date,
							'config_qty' => $qty_sep,
							'broiler_config_status' => 1,
							'amount_type_id' => $amount_type_id,
							'created_by' => $user_id,
							'created_ts' => date_now(),
							'trans_type_id' => 1
						);
						$this->admin->insert_data('broiler_config_tbl', $insert_broiler_config);

						
						$qty_oct = $config_qty['oct'][$count];
						$date = $year . '-' . '10-01';
						$insert_broiler_config = array(
							'broiler_subgroup_name' => $broiler_subgroup_name,
							'bc_id' =>$bc_id,
							'config_date' => $date,
							'config_qty' => $qty_oct,
							'broiler_config_status' => 1,
							'amount_type_id' => $amount_type_id,
							'created_by' => $user_id,
							'created_ts' => date_now(),
							'trans_type_id' => 1
						);
						$this->admin->insert_data('broiler_config_tbl', $insert_broiler_config);

						
						$qty_nov = $config_qty['nov'][$count];
						$date = $year . '-' . '11-01';
						$insert_broiler_config = array(
							'broiler_subgroup_name' => $broiler_subgroup_name,
							'bc_id' =>$bc_id,
							'config_date' => $date,
							'config_qty' => $qty_nov,
							'broiler_config_status' => 1,
							'amount_type_id' => $amount_type_id,
							'created_by' => $user_id,
							'created_ts' => date_now(),
							'trans_type_id' => 1
						);
						$this->admin->insert_data('broiler_config_tbl', $insert_broiler_config);

						
						$qty_dec = $config_qty['dec'][$count];
						$date = $year . '-' . '12-01';
						$insert_broiler_config = array(
							'broiler_subgroup_name' => $broiler_subgroup_name,
							'bc_id' =>$bc_id,
							'config_date' => $date,
							'config_qty' => $qty_dec,
							'broiler_config_status' => 1,
							'amount_type_id' => $amount_type_id,
							'created_by' => $user_id,
							'created_ts' => date_now(),
							'trans_type_id' => 1
						);
						$this->admin->insert_data('broiler_config_tbl', $insert_broiler_config);
						$count++;
					} else {
						/*$msg = '<div class="alert alert-danger">Notice! Config already exists!</div>';	
						$this->session->set_flashdata('message', $msg);
						redirect('admin/view-broiler-config/' . encode($bc_id));*/
						continue;
					}
				}
				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success"><strong>Broiler Config successfully added.</strong></div>';
				}
				$this->session->set_flashdata('message', $msg);
				redirect('admin/view-broiler-config/' . encode($bc_id));
			}else{
				echo 'Something wrong';
			}
		}
	}

	public function update_broiler_config(){
		$info = $this->_require_login_ahg();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$bc_id = clean_data(decode($this->input->post('bc_id')));
			$year = clean_data(decode($this->input->post('year')));

			$this->_check_lock_status( array('module_id'	=>	1,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$year), 'Admin/broiler-cost' );

			if(!empty($bc_id)){
				$id = clean_data($this->input->post('broiler_subgroup_name'));
				$config_qty = clean_data($this->input->post('config_qty'));
				$count = 0;
				$this->db->trans_start();
				foreach($id as $row){

					$broiler_subgroup_name = decode($row);

					$qty_jan = $config_qty['jan'][$count];
					$update_broiler_config = array(
						'config_qty' => $qty_jan,
						'modified_by' => $user_id,
						'modified_ts' => date_now()
					);
					$where = array(
						'broiler_subgroup_name' => $broiler_subgroup_name,
						'bc_id' =>$bc_id,
						'MONTH(config_date)' => 1,
						'YEAR(config_date)' => $year,
						'broiler_config_status' => 1
					);
					$this->admin->update_data('broiler_config_tbl', $update_broiler_config, $where);

					$qty_feb = $config_qty['feb'][$count];
					$update_broiler_config = array(
						'config_qty' => $qty_feb,
						'modified_by' => $user_id,
						'modified_ts' => date_now()
					);
					$where = array(
						'broiler_subgroup_name' => $broiler_subgroup_name,
						'bc_id' =>$bc_id,
						'MONTH(config_date)' => 2,
						'YEAR(config_date)' => $year,
						'broiler_config_status' => 1
					);
					$this->admin->update_data('broiler_config_tbl', $update_broiler_config, $where);

					$qty_mar = $config_qty['mar'][$count];
					$update_broiler_config = array(
						'config_qty' => $qty_mar,
						'modified_by' => $user_id,
						'modified_ts' => date_now()
					);
					$where = array(
						'broiler_subgroup_name' => $broiler_subgroup_name,
						'bc_id' =>$bc_id,
						'MONTH(config_date)' => 3,
						'YEAR(config_date)' => $year,
						'broiler_config_status' => 1
					);
					$this->admin->update_data('broiler_config_tbl', $update_broiler_config, $where);

					$qty_apr = $config_qty['apr'][$count];
					$update_broiler_config = array(
						'config_qty' => $qty_apr,
						'modified_by' => $user_id,
						'modified_ts' => date_now()
					);
					$where = array(
						'broiler_subgroup_name' => $broiler_subgroup_name,
						'bc_id' =>$bc_id,
						'MONTH(config_date)' => 4,
						'YEAR(config_date)' => $year,
						'broiler_config_status' => 1
					);
					$this->admin->update_data('broiler_config_tbl', $update_broiler_config, $where);

					$qty_may = $config_qty['may'][$count];
					$update_broiler_config = array(
						'config_qty' => $qty_may,
						'modified_by' => $user_id,
						'modified_ts' => date_now()
					);
					$where = array(
						'broiler_subgroup_name' => $broiler_subgroup_name,
						'bc_id' =>$bc_id,
						'MONTH(config_date)' => 5,
						'YEAR(config_date)' => $year,
						'broiler_config_status' => 1
					);
					$this->admin->update_data('broiler_config_tbl', $update_broiler_config, $where);

					$qty_jun = $config_qty['jun'][$count];
					$update_broiler_config = array(
						'config_qty' => $qty_jun,
						'modified_by' => $user_id,
						'modified_ts' => date_now()
					);
					$where = array(
						'broiler_subgroup_name' => $broiler_subgroup_name,
						'bc_id' =>$bc_id,
						'MONTH(config_date)' => 6,
						'YEAR(config_date)' => $year,
						'broiler_config_status' => 1
					);
					$this->admin->update_data('broiler_config_tbl', $update_broiler_config, $where);

					$qty_jul = $config_qty['jul'][$count];
					$update_broiler_config = array(
						'config_qty' => $qty_jul,
						'modified_by' => $user_id,
						'modified_ts' => date_now()
					);
					$where = array(
						'broiler_subgroup_name' => $broiler_subgroup_name,
						'bc_id' =>$bc_id,
						'MONTH(config_date)' => 7,
						'YEAR(config_date)' => $year,
						'broiler_config_status' => 1
					);
					$this->admin->update_data('broiler_config_tbl', $update_broiler_config, $where);

					$qty_aug = $config_qty['aug'][$count];
					$update_broiler_config = array(
						'config_qty' => $qty_aug,
						'modified_by' => $user_id,
						'modified_ts' => date_now()
					);
					$where = array(
						'broiler_subgroup_name' => $broiler_subgroup_name,
						'bc_id' =>$bc_id,
						'MONTH(config_date)' => 8,
						'YEAR(config_date)' => $year,
						'broiler_config_status' => 1
					);
					$this->admin->update_data('broiler_config_tbl', $update_broiler_config, $where);

					$qty_sep = $config_qty['sep'][$count];
					$update_broiler_config = array(
						'config_qty' => $qty_sep,
						'modified_by' => $user_id,
						'modified_ts' => date_now()
					);
					$where = array(
						'broiler_subgroup_name' => $broiler_subgroup_name,
						'bc_id' =>$bc_id,
						'MONTH(config_date)' => 9,
						'YEAR(config_date)' => $year,
						'broiler_config_status' => 1
					);
					$this->admin->update_data('broiler_config_tbl', $update_broiler_config, $where);

					$qty_oct = $config_qty['oct'][$count];
					$update_broiler_config = array(
						'config_qty' => $qty_oct,
						'modified_by' => $user_id,
						'modified_ts' => date_now()
					);
					$where = array(
						'broiler_subgroup_name' => $broiler_subgroup_name,
						'bc_id' =>$bc_id,
						'MONTH(config_date)' => 10,
						'YEAR(config_date)' => $year,
						'broiler_config_status' => 1
					);
					$this->admin->update_data('broiler_config_tbl', $update_broiler_config, $where);

					$qty_nov = $config_qty['nov'][$count];
					$update_broiler_config = array(
						'config_qty' => $qty_nov,
						'modified_by' => $user_id,
						'modified_ts' => date_now()
					);
					$where = array(
						'broiler_subgroup_name' => $broiler_subgroup_name,
						'bc_id' =>$bc_id,
						'MONTH(config_date)' => 11,
						'YEAR(config_date)' => $year,
						'broiler_config_status' => 1
					);
					$this->admin->update_data('broiler_config_tbl', $update_broiler_config, $where);

					$qty_dec = $config_qty['dec'][$count];
					$update_broiler_config = array(
						'config_qty' => $qty_dec,
						'modified_by' => $user_id,
						'modified_ts' => date_now()
					);
					$where = array(
						'broiler_subgroup_name' => $broiler_subgroup_name,
						'bc_id' =>$bc_id,
						'MONTH(config_date)' => 12,
						'YEAR(config_date)' => $year,
						'broiler_config_status' => 1
					);
					$this->admin->update_data('broiler_config_tbl', $update_broiler_config, $where);
					$count++;
				}
				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success"><strong>Broiler Config successfully updated.</strong></div>';
				}
				$this->session->set_flashdata('message', $msg);
				redirect('admin/view-broiler-config/' . encode($bc_id));
			}else{
				echo 'Something wrong';
			}
		}
	}

	public function broiler_trans($id, $year = false){

		$info = $this->_require_login_ahg();
		$data['bc_id'] = decode($id);
		$bc_id = decode($id);
		if(!$year){
			$year = $this->_active_year();
		}
		$data['pending_lock_status'] = $this->_check_lock_status(array('module_id'	=>	1,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$year));

		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$data['title'] = 'Broiler Cost';
		
		$data['trans_year'] = encode($year);
		$data['year'] = $year;

		$join_broiler_trans = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id and a.bc_id ='.$bc_id,
			'user_tbl c' => 'a.created_by = c.user_id',
			'status_tbl d' => 'd.status_id = a.broiler_trans_status and a.broiler_trans_status != 5',
			'broiler_subgroup_tbl e' => 'a.broiler_subgroup_id = e.broiler_subgroup_id',
			'broiler_group_tbl f' => 'e.broiler_group_id = f.broiler_group_id',
			'broiler_trans_dtl_tbl g' => 'a.broiler_trans_id = g.broiler_trans_id and YEAR(g.broiler_trans_date)='.$year,
		);
		$data['broiler_trans'] = $this->admin->get_join('broiler_trans_tbl a', $join_broiler_trans, FALSE,'f.broiler_group_name ASC', 'f.broiler_group_id, YEAR(g.broiler_trans_date)');

		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id and a.bc_id ='.$bc_id,
			'status_tbl d' => 'd.status_id = a.trans_status and a.trans_status != 5',
			'broiler_line_item_tbl e' => 'a.broiler_line_item_id = e.broiler_line_item_id and a.trans_type_id = 2 and YEAR(a.trans_date) = '.$year
		);
		$data['broiler_amount_summary'] = $this->admin->get_join('broiler_amount_summary_tbl a', $join, FALSE,'YEAR(a.trans_date) DESC', 'a.broiler_line_item_id, YEAR(a.trans_date)');

		$join = array('bc_tbl b' => 'a.bc_id = b.bc_id');
 		$harvested_actual_data = $this->admin->get_join('broiler_amount_summary_tbl a', $join, false, false, false, 'a.broiler_line_item_id, trans_qty',  array('trans_type_id' => 2, 'YEAR(a.trans_date)' =>	$year - 1,	'a.bc_id'	=>	$bc_id, 'a.trans_status !='	=> 5));

 		$i = 1;
 		$kilo = 1;
 		$feeds = 1;
 		$cg_fee = 1;
 		$medicines = 1;
 		$vaccines = 1;
 		$doc = 1;

		$actual_harvested_heads = array();
		$actual_harvested_kilo = array();
		$actual_feeds_amount = array();
		$actual_cg_fee_amount = array();
		$actual_medicines_amount = array();
		$actual_vaccines_amount = array();
		$actual_doc_amount = array();
 		if(!empty($harvested_actual_data)){
	 		foreach ($harvested_actual_data as $r) {
	 			if($r->broiler_line_item_id == 7){
		 			$actual_harvested_heads[$i] = $r->trans_qty;
		 			$i++;
	 			}
	 			if($r->broiler_line_item_id == 6){
	 				$actual_harvested_kilo[$kilo] = $r->trans_qty;
		 			$kilo++;
	 			}
	 			if($r->broiler_line_item_id == 5){
	 				$actual_feeds_amount[$feeds] = $r->trans_qty;
		 			$feeds++;
	 			}
	 			if($r->broiler_line_item_id == 4){
	 				$actual_cg_fee_amount[$cg_fee] = $r->trans_qty;
		 			$cg_fee++;
	 			}
	 			if($r->broiler_line_item_id == 3){
	 				$actual_medicines_amount[$medicines] = $r->trans_qty;
		 			$medicines++;
	 			}
	 			if($r->broiler_line_item_id == 2){
	 				$actual_vaccines_amount[$vaccines] = $r->trans_qty;
		 			$vaccines++;
	 			}
	 			if($r->broiler_line_item_id == 1){
	 				$actual_doc_amount[$doc] = $r->trans_qty;
		 			$doc++;
	 			}
	 		}

	 		$data['actual_harvested_heads'] = @$actual_harvested_heads;
	 		$data['actual_harvested_kilo'] = @$actual_harvested_kilo;
	 		$data['actual_feeds_amount'] = @$actual_feeds_amount;
	 		$data['actual_cg_fee_amount'] = @$actual_cg_fee_amount;
	 		$data['actual_medicines_amount'] = @$actual_medicines_amount;
	 		$data['actual_vaccines_amount'] = @$actual_vaccines_amount;
	 		$data['actual_doc_amount'] = @$actual_doc_amount;
 		}

 		$join = array('bc_tbl b' => 'a.bc_id = b.bc_id');
 		$previous_harvested_actual_data = $this->admin->get_join('broiler_amount_summary_tbl a', $join, false, false, false, 'a.broiler_line_item_id, trans_qty',  array('trans_type_id' => 2, 'YEAR(a.trans_date)' =>	$year - 2,	'a.bc_id'	=>	$bc_id, 'a.trans_status !='	=> 5));

 		$i = 1;
 		$kilo = 1;
 		$feeds = 1;
 		$cg_fee = 1;
 		$medicines = 1;
 		$vaccines = 1;
 		$doc = 1;

		$previous_actual_harvested_heads = array();
		$previous_actual_harvested_kilo = array();
		$previous_actual_feeds_amount = array();
		$previous_actual_cg_fee_amount = array();
		$previous_actual_medicines_amount = array();
		$previous_actual_vaccines_amount = array();
		$previous_actual_doc_amount = array();
 		if(!empty($previous_harvested_actual_data)){
 			foreach ($previous_harvested_actual_data as $r) {
	 			
	 			if($r->broiler_line_item_id == 7){
		 			$previous_actual_harvested_heads[$i] = $r->trans_qty;
		 			$i++;
	 			}
	 			if($r->broiler_line_item_id == 6){
	 				$previous_actual_harvested_kilo[$kilo] = $r->trans_qty;
		 			$kilo++;
	 			}
	 			if($r->broiler_line_item_id == 5){
	 				$previous_actual_feeds_amount[$feeds] = $r->trans_qty;
		 			$feeds++;
	 			}
	 			if($r->broiler_line_item_id == 4){
	 				$previous_actual_cg_fee_amount[$cg_fee] = $r->trans_qty;
		 			$cg_fee++;
	 			}
	 			if($r->broiler_line_item_id == 3){
	 				$previous_actual_medicines_amount[$medicines] = $r->trans_qty;
		 			$medicines++;
	 			}
	 			if($r->broiler_line_item_id == 2){
	 				$previous_actual_vaccines_amount[$vaccines] = $r->trans_qty;
		 			$vaccines++;
	 			}
	 			if($r->broiler_line_item_id == 1){
	 				$previous_actual_doc_amount[$doc] = $r->trans_qty;
		 			$doc++;
	 			}
	 		}
	 		$data['previous_actual_harvested_heads'] = @$previous_actual_harvested_heads;
	 		$data['previous_actual_harvested_kilo'] = @$previous_actual_harvested_kilo;
	 		$data['previous_actual_feeds_amount'] = @$previous_actual_feeds_amount;
	 		$data['previous_actual_cg_fee_amount'] = @$previous_actual_cg_fee_amount;
	 		$data['previous_actual_medicines_amount'] = @$previous_actual_medicines_amount;
	 		$data['previous_actual_vaccines_amount'] = @$previous_actual_vaccines_amount;
	 		$data['previous_actual_doc_amount'] = @$previous_actual_doc_amount;
 		}

	 	$join = array(
			'broiler_summary_item_tbl b' => 'a.broiler_summary_item_id = b.broiler_summary_item_id and a.bc_id ='.$bc_id.' and YEAR(a.trans_date) = '.$year.' and a.trans_type_id = 1 and a.broiler_summary_status = 1'
		);
		$broiler_summary = $this->admin->get_join('broiler_summary_tbl a', $join, false, 'b.order_count, MONTH(a.trans_date)', false, false, false, false);

		$i = 1;
		$budgeted_harvested_heads = array();
		$budgeted_harvested_kilo = array();
		$budgeted_doc_cost_amount = array();
		$budgeted_growers_fee_amount = array();
		$budgeted_feed_cost_amount = array();
		$budgeted_vaccines_amount = array();
		$budgeted_medicine_amount = array();
		$budgeted_disinfectant_amount = array();
		if(!empty($broiler_summary)){
			foreach ($broiler_summary as $broiler_summary_row) {
				if($broiler_summary_row->broiler_summary_item_id == 33){
					$budgeted_harvested_heads[$i] = $broiler_summary_row->trans_qty;
		 			$i++;

		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 34){
					$budgeted_harvested_kilo[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 35){
					$budgeted_doc_cost_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 1){
					$budgeted_growers_fee_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 37){
					$budgeted_feed_cost_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 45){
					$budgeted_vaccines_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 42){
					$budgeted_medicine_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 43){
					$budgeted_disinfectant_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				}
			}
			$data['budgeted_harvested_heads'] = @$budgeted_harvested_heads;
			$data['budgeted_harvested_kilo'] = @$budgeted_harvested_kilo;
			$data['budgeted_doc_cost_amount'] = @$budgeted_doc_cost_amount;
			$data['budgeted_growers_fee_amount'] = @$budgeted_growers_fee_amount;
			$data['budgeted_feed_cost_amount'] = @$budgeted_feed_cost_amount;
			$data['budgeted_vaccines_amount'] = @$budgeted_vaccines_amount;
			$data['budgeted_medicine_amount'] = @$budgeted_medicine_amount;
			$data['budgeted_disinfectant_amount'] = @$budgeted_disinfectant_amount;

		}

	 	$year = $year-1;
	 	$data['industry_year'] = $year;

	 	$sql = 'SELECT
					*
				FROM
					(
						SELECT
							a.*, c.industry_name, c.industry_id as industry_order
						FROM
							`industry_trans_tbl` `a`
						JOIN `industry_trans_dtl_tbl` `b` ON `a`.`industry_trans_id` = `b`.`industry_trans_id`
						AND `a`.`bc_id` = '.$bc_id.'
						AND `a`.`trans_status` != 5
						AND YEAR (b.capacity_year) = '.$year.'
						JOIN `industry_tbl` `c` ON `a`.`industry_id` = `c`.`industry_id`
						AND `c`.`industry_status` = 1
					) AS dataone
				INNER JOIN (
					SELECT
						a.industry_trans_id,
						b.industry_capacity AS beginning_capacity
					FROM
						`industry_trans_tbl` `a`
					JOIN `industry_trans_dtl_tbl` `b` ON `a`.`industry_trans_id` = `b`.`industry_trans_id`
					AND `a`.`bc_id` = '.$bc_id.'
					AND `a`.`trans_status` != 5
					AND YEAR (b.capacity_year) = '.$year.'
					AND b.season_id = 1
					JOIN `industry_tbl` `c` ON `a`.`industry_id` = `c`.`industry_id`
					AND `c`.`industry_status` = 1
				) AS datatwo ON dataone.industry_trans_id = datatwo.industry_trans_id
				INNER JOIN (
					SELECT
						a.industry_trans_id,
						b.industry_capacity AS current_capacity
					FROM
						`industry_trans_tbl` `a`
					JOIN `industry_trans_dtl_tbl` `b` ON `a`.`industry_trans_id` = `b`.`industry_trans_id`
					AND `a`.`bc_id` = '.$bc_id.'
					AND `a`.`trans_status` != 5
					AND YEAR (b.capacity_year) = '.$year.'
					AND b.season_id = 2
					JOIN `industry_tbl` `c` ON `a`.`industry_id` = `c`.`industry_id`
					AND `c`.`industry_status` = 1
				) AS datathree ON datatwo.industry_trans_id = datathree.industry_trans_id
				INNER JOIN (
					SELECT
						a.industry_trans_id,
						b.industry_capacity AS ending_capacity
					FROM
						`industry_trans_tbl` `a`
					JOIN `industry_trans_dtl_tbl` `b` ON `a`.`industry_trans_id` = `b`.`industry_trans_id`
					AND `a`.`bc_id` = '.$bc_id.'
					AND `a`.`trans_status` != 5
					AND YEAR (b.capacity_year) = '.$year.'
					AND b.season_id = 3
					JOIN `industry_tbl` `c` ON `a`.`industry_id` = `c`.`industry_id`
					AND `c`.`industry_status` = 1
				) AS datafour ON datathree.industry_trans_id = datafour.industry_trans_id
				GROUP BY dataone.industry_trans_id
				order by datathree.current_capacity DESC';

		$data['industry_trans'] = $this->admin->get_query($sql);

		$join = array(
			'industry_trans_dtl_tbl b' => 'a.industry_trans_id = b.industry_trans_id and a.bc_id ='.$bc_id.' and a.trans_status != 5 and YEAR(b.capacity_year) = '.$year,
			'industry_tbl c'	=>	'a.industry_id = c.industry_id and c.industry_status = 1'
		);
		$data['industry_total'] = $this->admin->get_join('industry_trans_tbl a', $join, false, false, 'b.season_id', 'sum(b.industry_capacity) as industry_sum, b.season_id');

		$data['content'] = $this->load->view('admin/admin_broiler_trans_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
 		
	}

	

	public function new_broiler_trans($id, $pick_year){
		$info = $this->_require_login_ahg();
		$data['bc_id'] = decode($id);
		$bc_id = decode($id);
		$data['pick_year'] = $pick_year;
		
		$this->_check_lock_status( array('module_id'	=>	1,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$pick_year), 'Admin/broiler-cost' );

		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$data['title'] = 'Broiler Cost';

		$join_broiler_subgroup = array(
			'broiler_group_tbl b' => 'a.broiler_group_id = b.broiler_group_id AND b.broiler_group_status = 1 AND a.config_show = 1',
		);
		$data['broiler_subgroup'] = $this->admin->get_join('broiler_subgroup_tbl a', $join_broiler_subgroup, FALSE,'a.broiler_subgroup_id ASC', FALSE);

		$data['broiler_group'] = $this->admin->get_data('broiler_group_tbl a', 'broiler_group_status=1');
		$data['content'] = $this->load->view('admin/admin_new_broiler_trans_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function get_broiler_subgroup(){
		$info = $this->_require_login_ahg();
		
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$broiler_group_id =clean_data(decode($this->input->post('id')));
			$year = clean_data($this->input->post('pick_year'));
			$bc_id =clean_data(decode($this->input->post('bc_id')));
			if($broiler_group_id){
				$sql = 'SELECT
							broiler_subgroup_tbl.*, broiler_group_tbl.broiler_group_name
						FROM
							broiler_subgroup_tbl
						INNER JOIN broiler_group_tbl ON broiler_subgroup_tbl.broiler_group_id = broiler_group_tbl.broiler_group_id
						WHERE
							broiler_group_tbl.broiler_group_id = '.$broiler_group_id.'
						AND broiler_subgroup_tbl.show = 1
						AND broiler_subgroup_id NOT IN (
							SELECT
								a.broiler_subgroup_id
							FROM
								broiler_trans_tbl a
							INNER JOIN broiler_trans_dtl_tbl b ON a.broiler_trans_id = b.broiler_trans_id
							INNER JOIN broiler_subgroup_tbl c ON a.broiler_subgroup_id = c.broiler_subgroup_id
							WHERE
								broiler_trans_status != 5
							AND YEAR (b.broiler_trans_date) = '.$year.'
							AND a.bc_id = '.$bc_id.'
							AND c.broiler_group_id = '.$broiler_group_id.'
							GROUP BY
								broiler_subgroup_id
						)';
				$get_broiler_subgroup = $this->admin->get_query($sql);
				$broiler_group = '';
				if($get_broiler_subgroup){
					foreach($get_broiler_subgroup as $row){
						$broiler_group .= '<tr><input type="hidden" name="broiler_subgroup_id[]" value="' . encode($row->broiler_subgroup_id) . '">
						<input type="hidden" name="broiler_group_id" value="' . encode($row->broiler_group_id) . '">
						<input type="hidden" name="broiler_group_name" value="' . encode($row->broiler_group_name) . '">';
						$broiler_group .= '<td class="text-center"><a href="#" class="slider-broiler"><span class="fa fa-sliders"></span></td>';
						$broiler_group .= '<td>' . $row->broiler_subgroup_name .'</td>';
						$broiler_group .= '<td class="text-center"><input type="text" name="broiler_budget_qty[jan][]" class="form-control input-sm broiler-cost-input" size="6"></td>';
						$broiler_group .= '<td class="text-center"><input type="text" name="broiler_budget_qty[feb][]" class="form-control input-sm broiler-cost-input" size="6"></td>';
						$broiler_group .= '<td class="text-center"><input type="text" name="broiler_budget_qty[mar][]" class="form-control input-sm broiler-cost-input" size="6"></td>';
						$broiler_group .= '<td class="text-center"><input type="text" name="broiler_budget_qty[apr][]" class="form-control input-sm broiler-cost-input" size="6"></td>';
						$broiler_group .= '<td class="text-center"><input type="text" name="broiler_budget_qty[may][]" class="form-control input-sm broiler-cost-input" size="6"></td>';
						$broiler_group .= '<td class="text-center"><input type="text" name="broiler_budget_qty[jun][]" class="form-control input-sm broiler-cost-input" size="6"></td>';
						$broiler_group .= '<td class="text-center"><input type="text" name="broiler_budget_qty[jul][]" class="form-control input-sm broiler-cost-input" size="6"></td>';
						$broiler_group .= '<td class="text-center"><input type="text" name="broiler_budget_qty[aug][]" class="form-control input-sm broiler-cost-input" size="6"></td>';
						$broiler_group .= '<td class="text-center"><input type="text" name="broiler_budget_qty[sep][]" class="form-control input-sm broiler-cost-input" size="6"></td>';
						$broiler_group .= '<td class="text-center"><input type="text" name="broiler_budget_qty[oct][]" class="form-control input-sm broiler-cost-input" size="6"></td>';
						$broiler_group .= '<td class="text-center"><input type="text" name="broiler_budget_qty[nov][]" class="form-control input-sm broiler-cost-input" size="6"></td>';
						$broiler_group .= '<td class="text-center"><input type="text" name="broiler_budget_qty[dec][]" class="form-control input-sm broiler-cost-input" size="6"></td>';
						$broiler_group .= '</tr>';
					}
					$data['broiler_group'] = $broiler_group;
					$data['result'] = 1;
				} else {
					$data['broiler_group'] = 'No data';
					$data['result'] = 1;
				}
			} else {
				$data['result'] = 0;
			}
			
				
		} else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function add_broiler_trans(){
		$info = $this->_require_login_ahg();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$bc_id = clean_data(decode($this->input->post('bc_id')));
			$year = clean_data($this->input->post('pick_year'));
			$broiler_group_id = clean_data(decode($this->input->post('broiler_group_id')));
			$broiler_group_name = clean_data(decode($this->input->post('broiler_group_name')));
			
			$this->_check_lock_status( array('module_id'	=>	1,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$year), 'Admin/broiler-cost' );

			if(!empty($bc_id)){
				$id = clean_data($this->input->post('broiler_subgroup_id'));
				$broiler_budget_qty = clean_data($this->input->post('broiler_budget_qty'));
				$count = 0;
				$this->db->trans_start();
				foreach($id as $row){

					$broiler_subgroup_id = decode($row);
					$check_broiler_subgroup_info = $this->admin->check_data('broiler_subgroup_tbl', array('broiler_subgroup_id' => $broiler_subgroup_id), TRUE);
					if($check_broiler_subgroup_info['result'] == TRUE){
						$broiler_subgroup_name = $check_broiler_subgroup_info['info']->broiler_subgroup_name;
						$amount_type_id = $check_broiler_subgroup_info['info']->amount_type_id;
					} else {
						$msg = '<div class="alert alert-danger">Error! Please try again!</div>';	
						$this->session->set_flashdata('message', $msg);
						redirect('admin/broiler-trans/' . encode($bc_id));
					}
					
					
					$join_broiler_trans = array(
						'broiler_trans_dtl_tbl b' => 'a.broiler_trans_id = b.broiler_trans_id AND a.broiler_subgroup_id = '.$broiler_subgroup_id.' AND a.broiler_trans_status != 5 and a.bc_id = '.$bc_id.' and YEAR(b.broiler_trans_date) = '.$year
					);
					$check_broiler_trans = $this->admin->check_join('broiler_trans_tbl a', $join_broiler_trans, TRUE);
					if($check_broiler_trans['result'] == TRUE){
						$broiler_trans_id = $check_broiler_trans['info']->broiler_trans_id;
						$check_broiler_trans_dtl = $this->admin->check_data('broiler_trans_dtl_tbl a', array('a.broiler_trans_id' => $broiler_trans_id, 'YEAR(a.broiler_trans_date) !=' => $year), TRUE);
					}

					if($check_broiler_trans['result'] != TRUE){
						
						$qty_jan = $broiler_budget_qty['jan'][$count];
						$date = $year . '-' . '01-01';
						$insert_broiler_trans = array(
							'broiler_subgroup_id' => $broiler_subgroup_id,
							'bc_id' =>$bc_id,
							'broiler_trans_status' => 3,
							'created_by' => $user_id,
							'created_ts' => date_now(),
							'trans_type_id' => 1
						);
						$insert_trans = $this->admin->insert_data('broiler_trans_tbl', $insert_broiler_trans, true);

						$insert_broiler_trans_dtl = array(
							'broiler_trans_id' => $insert_trans['id'],
							'broiler_trans_date' =>$date,
							'broiler_budget_qty' => $qty_jan,
							'amount_type_id' => $amount_type_id
						);
						$this->admin->insert_data('broiler_trans_dtl_tbl', $insert_broiler_trans_dtl, true);

						$year = $this->_active_year();
						$qty_feb = $broiler_budget_qty['feb'][$count];
						$date = $year . '-' . '02-01';
						$insert_broiler_trans_dtl = array(
							'broiler_trans_id' => $insert_trans['id'],
							'broiler_trans_date' =>$date,
							'broiler_budget_qty' => $qty_feb,
							'amount_type_id' => $amount_type_id
						);
						$this->admin->insert_data('broiler_trans_dtl_tbl', $insert_broiler_trans_dtl, true);

						$year = $this->_active_year();
						$qty_mar = $broiler_budget_qty['mar'][$count];
						$date = $year . '-' . '03-01';
						$insert_broiler_trans_dtl = array(
							'broiler_trans_id' => $insert_trans['id'],
							'broiler_trans_date' =>$date,
							'broiler_budget_qty' => $qty_mar,
							'amount_type_id' => $amount_type_id
						);
						$this->admin->insert_data('broiler_trans_dtl_tbl', $insert_broiler_trans_dtl, true);

						$year = $this->_active_year();
						$qty_apr = $broiler_budget_qty['apr'][$count] == '' ? 0 : $broiler_budget_qty['apr'][$count];
						$date = $year . '-' . '04-01';
						$insert_broiler_trans_dtl = array(
							'broiler_trans_id' => $insert_trans['id'],
							'broiler_trans_date' =>$date,
							'broiler_budget_qty' => $qty_apr,
							'amount_type_id' => $amount_type_id
						);
						$this->admin->insert_data('broiler_trans_dtl_tbl', $insert_broiler_trans_dtl, true);

						$year = $this->_active_year();
						$qty_may = $broiler_budget_qty['may'][$count];
						$date = $year . '-' . '05-01';
						$insert_broiler_trans_dtl = array(
							'broiler_trans_id' => $insert_trans['id'],
							'broiler_trans_date' =>$date,
							'broiler_budget_qty' => $qty_may,
							'amount_type_id' => $amount_type_id
						);
						$this->admin->insert_data('broiler_trans_dtl_tbl', $insert_broiler_trans_dtl, true);

						$year = $this->_active_year();
						$qty_jun = $broiler_budget_qty['jun'][$count];
						$date = $year . '-' . '06-01';
						$insert_broiler_trans_dtl = array(
							'broiler_trans_id' => $insert_trans['id'],
							'broiler_trans_date' =>$date,
							'broiler_budget_qty' => $qty_jun,
							'amount_type_id' => $amount_type_id
						);
						$this->admin->insert_data('broiler_trans_dtl_tbl', $insert_broiler_trans_dtl, true);

						$year = $this->_active_year();
						$qty_jul = $broiler_budget_qty['jul'][$count];
						$date = $year . '-' . '07-01';
						$insert_broiler_trans_dtl = array(
							'broiler_trans_id' => $insert_trans['id'],
							'broiler_trans_date' =>$date,
							'broiler_budget_qty' => $qty_jul,
							'amount_type_id' => $amount_type_id
						);
						$this->admin->insert_data('broiler_trans_dtl_tbl', $insert_broiler_trans_dtl, true);

						$year = $this->_active_year();
						$qty_aug = $broiler_budget_qty['aug'][$count];
						$date = $year . '-' . '08-01';
						$insert_broiler_trans_dtl = array(
							'broiler_trans_id' => $insert_trans['id'],
							'broiler_trans_date' =>$date,
							'broiler_budget_qty' => $qty_aug,
							'amount_type_id' => $amount_type_id
						);
						$this->admin->insert_data('broiler_trans_dtl_tbl', $insert_broiler_trans_dtl, true);

						$year = $this->_active_year();
						$qty_sep = $broiler_budget_qty['sep'][$count];
						$date = $year . '-' . '09-01';
						$insert_broiler_trans_dtl = array(
							'broiler_trans_id' => $insert_trans['id'],
							'broiler_trans_date' =>$date,
							'broiler_budget_qty' => $qty_sep,
							'amount_type_id' => $amount_type_id
						);
						$this->admin->insert_data('broiler_trans_dtl_tbl', $insert_broiler_trans_dtl, true);

						$year = $this->_active_year();
						$qty_oct = $broiler_budget_qty['oct'][$count];
						$date = $year . '-' . '10-01';
						$insert_broiler_trans_dtl = array(
							'broiler_trans_id' => $insert_trans['id'],
							'broiler_trans_date' =>$date,
							'broiler_budget_qty' => $qty_oct,
							'amount_type_id' => $amount_type_id
						);
						$this->admin->insert_data('broiler_trans_dtl_tbl', $insert_broiler_trans_dtl, true);

						$year = $this->_active_year();
						$qty_nov = $broiler_budget_qty['nov'][$count];
						$date = $year . '-' . '11-01';
						$insert_broiler_trans_dtl = array(
							'broiler_trans_id' => $insert_trans['id'],
							'broiler_trans_date' =>$date,
							'broiler_budget_qty' => $qty_nov,
							'amount_type_id' => $amount_type_id
						);
						$this->admin->insert_data('broiler_trans_dtl_tbl', $insert_broiler_trans_dtl, true);

						$year = $this->_active_year();
						$qty_dec = $broiler_budget_qty['dec'][$count];
						$date = $year . '-' . '12-01';
						$insert_broiler_trans_dtl = array(
							'broiler_trans_id' => $insert_trans['id'],
							'broiler_trans_date' =>$date,
							'broiler_budget_qty' => $qty_dec,
							'amount_type_id' => $amount_type_id
						);
						$this->admin->insert_data('broiler_trans_dtl_tbl', $insert_broiler_trans_dtl, true);
						$count++;
					} else {
						$msg = '<div class="alert alert-danger">Notice! Broiler Transaction already exists!</div>';	
						$this->session->set_flashdata('message', $msg);
						redirect('admin/broiler-trans/' . encode($bc_id));
						
					}
				}

				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success"><strong>Broiler Transaction successfully added.</strong></div>';
					$this->compute_broiler_summary($this->input->post('bc_id'), encode($year), $broiler_group_id, $broiler_group_name, true);
				}
				$this->session->set_flashdata('message', $msg);
				redirect('admin/broiler-trans/' . encode($bc_id));
			}else{
				echo 'Something wrong';
			}
		}
	}

	public function view_broiler_trans($bc_id, $broiler_group_id, $broiler_group_name, $trans_year){
		$info = $this->_require_login_ahg();

		$data['bc_id'] = $bc_id;
		$data['trans_year'] = $trans_year;
		$data['broiler_group_name'] = decode($broiler_group_name);
		$data['broiler_group_id'] = decode($broiler_group_id);
		$bc_id = decode($bc_id);
		$trans_year = decode($trans_year);
		$data['pending_lock_status'] = $this->_check_lock_status(array('module_id'	=>	1,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$trans_year));

		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$broiler_group_id = decode($broiler_group_id);
		

		$join_broiler_trans = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id and a.bc_id ='.$bc_id,
			'status_tbl d' => 'd.status_id = a.broiler_trans_status and a.broiler_trans_status != 5',
			'broiler_subgroup_tbl e' => 'a.broiler_subgroup_id = e.broiler_subgroup_id',
			'broiler_group_tbl f' => 'e.broiler_group_id = f.broiler_group_id and f.broiler_group_id = '.$broiler_group_id,
			'broiler_trans_dtl_tbl g'	=>	'a.broiler_trans_id = g.broiler_trans_id and YEAR(g.broiler_trans_date) = '.$trans_year
		);
		$data['broiler_trans'] = $this->admin->get_join('broiler_trans_tbl a', $join_broiler_trans, FALSE,'f.broiler_group_name ASC', 'a.broiler_trans_id', 'a.broiler_trans_id, e.broiler_subgroup_name, g.broiler_trans_dtl_id, b.bc_id, f.broiler_group_id, f.broiler_group_name, d.status_id');

		$join = array(
			'broiler_summary_item_tbl b' => 'a.broiler_summary_item_id = b.broiler_summary_item_id and a.bc_id ='.$bc_id.' and YEAR(a.trans_date) = '.$trans_year.' and a.trans_type_id = 1 and a.broiler_summary_status = 1'
		);
		$data['broiler_summary'] = $this->admin->get_join('broiler_summary_tbl a', $join, false, 'b.order_count, MONTH(a.trans_date)', false, false, false, false);
		

		$data['title'] = 'Broiler Cost';
		$data['content'] = $this->load->view('admin/admin_view_broiler_trans_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function compute_broiler_summary($bc_id, $trans_year, $broiler_group_id, $broiler_group_name, $no_redirect = false){
		//encoded bc_id, trans_year
		/*echo $bc_id.'<br>';
		echo $trans_year.'<br>';
		echo $broiler_group_id.'<br>';
		echo $broiler_group_name.'<br>';
		exit();*/
		$doctype = encode('trans');
		if($broiler_group_id == 1){
			doc($bc_id, $trans_year, $doctype);
		} else if($broiler_group_id == 2){
			growers_fee($bc_id, $trans_year,  $doctype);
		} else if($broiler_group_id == 3){
			feed_cost($bc_id, $trans_year,  $doctype);
		} else if($broiler_group_id == 4){
			vaccines($bc_id, $trans_year, $doctype);
		} else if($broiler_group_id == 5){
			medicines ($bc_id, $trans_year, $doctype);
		} else {
			doc($bc_id, $trans_year, $doctype);
			growers_fee($bc_id, $trans_year,  $doctype);
			feed_cost($bc_id, $trans_year,  $doctype);
			vaccines($bc_id, $trans_year, $doctype);
			medicines ($bc_id, $trans_year, $doctype);
		}


		if(!$no_redirect){
			
			if($broiler_group_id == -1){
				$this->view_broiler_summary($bc_id, $trans_year);
			} else if($broiler_group_id){
				$broiler_group_id = encode($broiler_group_id);
				$broiler_group_name = encode($broiler_group_name);

				$this->view_broiler_trans($bc_id, $broiler_group_id, $broiler_group_name, $trans_year);
			} else  {
				$this->broiler_trans($bc_id);
			}
		}

	}

	public function edit_broiler_trans($id, $broiler_subgroup_name, $bc_id, $broiler_group_id, $broiler_group_name, $trans_year = false){
		$info = $this->_require_login_ahg();
		$data['broiler_trans_id'] = $id;
		$data['bc_id'] = $bc_id;
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => decode($bc_id)), true, 'bc_name');
		$bc_id = decode($bc_id);
		$trans_year = decode($trans_year);
		$this->_check_lock_status( array('module_id'	=>	1,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$trans_year), 'Admin/broiler-cost' );
		$data['broiler_group_id'] = $broiler_group_id;
		$data['broiler_group_name'] = $broiler_group_name;
		$data['broiler_subgroup_name'] = decode($broiler_subgroup_name);
		$broiler_trans_id = decode($id);
		
		$join_broiler_trans = array(
			'broiler_subgroup_tbl e' => 'a.broiler_subgroup_id = e.broiler_subgroup_id',
			'broiler_group_tbl f' => 'e.broiler_group_id = f.broiler_group_id',
			'broiler_trans_dtl_tbl g'	=>	'a.broiler_trans_id = g.broiler_trans_id and a.broiler_trans_id = '.$broiler_trans_id,
		);
		$data['broiler_trans'] = $this->admin->get_join('broiler_trans_tbl a', $join_broiler_trans, FALSE, false, 'a.broiler_trans_id');

		$data['title'] = 'Broiler Cost';
		$data['content'] = $this->load->view('admin/admin_edit_broiler_trans_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function update_broiler_trans(){

		$info = $this->_require_login_ahg();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$bc_id = clean_data(decode($this->input->post('bc_id')));
			$year = clean_data(decode($this->input->post('broiler_trans_year')));

			$broiler_group_id = clean_data($this->input->post('broiler_group_id'));
			$broiler_group_name = clean_data($this->input->post('broiler_group_name'));

			$this->_check_lock_status( array('module_id'	=>	1,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$year), 'Admin/broiler-cost' );

			
			if(!empty($bc_id)){
				$id = clean_data($this->input->post('broiler_trans_id'));
				$broiler_budget_qty = clean_data($this->input->post('broiler_budget_qty'));
				$count = 0;
				$this->db->trans_start();
				foreach($id as $row){

					$broiler_trans_id = decode($row);

					//update header transaction
					$update_broiler_trans = array(
						'modified_by' => $user_id,
						'modified_ts' => date_now()
					);
					$where = array(
						'broiler_trans_id' => $broiler_trans_id
					);
					$this->admin->update_data('broiler_trans_tbl', $update_broiler_trans, $where);

					//update dtl trans
					$qty_jan = $broiler_budget_qty['jan'][$count];
					$update_broiler_trans = array(
						'broiler_budget_qty' => $qty_jan
					);
					$where = array(
						'broiler_trans_id' => $broiler_trans_id,
						'MONTH(broiler_trans_date)' => 1,
						'YEAR(broiler_trans_date)' => $year,
					);
					$this->admin->update_data('broiler_trans_dtl_tbl', $update_broiler_trans, $where);

					$qty_feb = $broiler_budget_qty['feb'][$count];
					$update_broiler_trans = array(
						'broiler_budget_qty' => $qty_feb
					);
					$where = array(
						'broiler_trans_id' => $broiler_trans_id,
						'MONTH(broiler_trans_date)' => 2,
						'YEAR(broiler_trans_date)' => $year,
					);

					$this->admin->update_data('broiler_trans_dtl_tbl', $update_broiler_trans, $where);

					$qty_mar = $broiler_budget_qty['mar'][$count];
					$update_broiler_trans = array(
						'broiler_budget_qty' => $qty_mar
					);
					$where = array(
						'broiler_trans_id' => $broiler_trans_id,
						'MONTH(broiler_trans_date)' => 3,
						'YEAR(broiler_trans_date)' => $year,
					);
					$this->admin->update_data('broiler_trans_dtl_tbl', $update_broiler_trans, $where);

					$qty_apr = $broiler_budget_qty['apr'][$count];
					$update_broiler_trans = array(
						'broiler_budget_qty' => $qty_apr
					);
					$where = array(
						'broiler_trans_id' => $broiler_trans_id,
						'MONTH(broiler_trans_date)' => 4,
						'YEAR(broiler_trans_date)' => $year,
					);
					$this->admin->update_data('broiler_trans_dtl_tbl', $update_broiler_trans, $where);

					$qty_may = $broiler_budget_qty['may'][$count];
					$update_broiler_trans = array(
						'broiler_budget_qty' => $qty_may
					);
					$where = array(
						'broiler_trans_id' => $broiler_trans_id,
						'MONTH(broiler_trans_date)' => 5,
						'YEAR(broiler_trans_date)' => $year,
					);
					$this->admin->update_data('broiler_trans_dtl_tbl', $update_broiler_trans, $where);

					$qty_jun = $broiler_budget_qty['jun'][$count];
					$update_broiler_trans = array(
						'broiler_budget_qty' => $qty_jun
					);
					$where = array(
						'broiler_trans_id' => $broiler_trans_id,
						'MONTH(broiler_trans_date)' => 6,
						'YEAR(broiler_trans_date)' => $year,
					);
					$this->admin->update_data('broiler_trans_dtl_tbl', $update_broiler_trans, $where);

					$qty_jul = $broiler_budget_qty['jul'][$count];
					$update_broiler_trans = array(
						'broiler_budget_qty' => $qty_jul
					);
					$where = array(
						'broiler_trans_id' => $broiler_trans_id,
						'MONTH(broiler_trans_date)' => 7,
						'YEAR(broiler_trans_date)' => $year,
					);
					$this->admin->update_data('broiler_trans_dtl_tbl', $update_broiler_trans, $where);

					$qty_aug = $broiler_budget_qty['aug'][$count];
					$update_broiler_trans = array(
						'broiler_budget_qty' => $qty_aug
					);
					$where = array(
						'broiler_trans_id' => $broiler_trans_id,
						'MONTH(broiler_trans_date)' => 8,
						'YEAR(broiler_trans_date)' => $year,
					);
					$this->admin->update_data('broiler_trans_dtl_tbl', $update_broiler_trans, $where);

					$qty_sep = $broiler_budget_qty['sep'][$count];
					$update_broiler_trans = array(
						'broiler_budget_qty' => $qty_sep
					);
					$where = array(
						'broiler_trans_id' => $broiler_trans_id,
						'MONTH(broiler_trans_date)' => 9,
						'YEAR(broiler_trans_date)' => $year,
					);
					$this->admin->update_data('broiler_trans_dtl_tbl', $update_broiler_trans, $where);

					$qty_oct = $broiler_budget_qty['oct'][$count];
					$update_broiler_trans = array(
						'broiler_budget_qty' => $qty_oct
					);
					$where = array(
						'broiler_trans_id' => $broiler_trans_id,
						'MONTH(broiler_trans_date)' => 10,
						'YEAR(broiler_trans_date)' => $year,
					);
					$this->admin->update_data('broiler_trans_dtl_tbl', $update_broiler_trans, $where);

					$qty_nov = $broiler_budget_qty['nov'][$count];
					$update_broiler_trans = array(
						'broiler_budget_qty' => $qty_nov
					);
					$where = array(
						'broiler_trans_id' => $broiler_trans_id,
						'MONTH(broiler_trans_date)' => 11,
						'YEAR(broiler_trans_date)' => $year,
					);
					$this->admin->update_data('broiler_trans_dtl_tbl', $update_broiler_trans, $where);

					$qty_dec = $broiler_budget_qty['dec'][$count];
					$update_broiler_trans = array(
						'broiler_budget_qty' => $qty_dec
					);
					$where = array(
						'broiler_trans_id' => $broiler_trans_id,
						'MONTH(broiler_trans_date)' => 12,
						'YEAR(broiler_trans_date)' => $year,
					);
					$this->admin->update_data('broiler_trans_dtl_tbl', $update_broiler_trans, $where);
					$count++;
				}
				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success"><strong>Broiler Transaction successfully updated.</strong></div>';
					$this->compute_broiler_summary($this->input->post('bc_id'), $this->input->post('broiler_trans_year'), decode($broiler_group_id), decode($broiler_group_name));
				}
				$this->session->set_flashdata('message', $msg);
				redirect('admin/view-broiler-trans/' . encode($bc_id) .'/'. $broiler_group_id .'/'. $broiler_group_name .'/'. encode($year));
			} else {
				echo 'Something wrong on bc';
			}
		} else{
			echo 'Something wrong';
		}
	}

	public function post_broiler_trans(){
		
		$info = $this->_require_login_ahg();
		$user_id = decode($info['user_id']);

		$id = clean_data($this->input->post('broiler_trans_id'));
		$bc_id = clean_data($this->input->post('bc_id'));
		$broiler_group_id = clean_data($this->input->post('broiler_group_id'));
		$broiler_group_name = clean_data($this->input->post('broiler_group_name'));
		$trans_year = clean_data($this->input->post('trans_year'));
		$trans_status = clean_data($this->input->post('broiler_trans_status'));
		if($trans_status == 'post'){
			$broiler_trans_status = 4;
			$status = 'posted';
		} else {
			$broiler_trans_status = 5;
			$status = 'cancelled';
		}

		$data['broiler_trans_id'] = $id;
		$broiler_trans_id = decode($id);
		$this->db->trans_start();
		$update_broiler_trans = array(
			'broiler_trans_status' => $broiler_trans_status,
			'modified_by' => $user_id,
			'modified_ts' => date_now()
		);
		$where = array(
			'broiler_trans_id' => $broiler_trans_id,
		);
		echo $this->admin->update_data('broiler_trans_tbl', $update_broiler_trans, $where);

		if($this->db->trans_status() === FALSE){
			$this->db->trans_rollback();
			$msg = '<div class="alert alert-danger">Error please try again!</div>';
		}else{
			$this->db->trans_commit();
			$msg = '<div class="alert alert-success"><strong>Broiler Transaction Detail successfully '.$status.'.</strong></div>';
		}
		$this->session->set_flashdata('message', $msg);
		redirect('admin/view-broiler-trans/' . $bc_id .'/'. $broiler_group_id .'/'. $broiler_group_name .'/'. $trans_year);
	}

	public function cancel_broiler_trans($id, $bc_id, $broiler_group_id, $broiler_group_name, $trans_year){
		$info = $this->_require_login_ahg();
		$this->_check_lock_status( array('module_id'	=>	1,	'lock_type_id' => 1, 'lock_location_id'	=>	decode($bc_id),	'lock_status_id'	=>	1, 'lock_year'	=>	decode($trans_year)), 'Admin/broiler-cost' );

		$data['broiler_trans_id'] = $id;
		$broiler_trans_id = decode($id);
		$this->db->trans_start();
		$update_broiler_trans = array(
			'broiler_trans_status' => 5
		);
		$where = array(
			'broiler_trans_id' => $broiler_trans_id,
		);
		$this->admin->update_data('broiler_trans_tbl', $update_broiler_trans, $where);

		if($this->db->trans_status() === FALSE){
			$this->db->trans_rollback();
			$msg = '<div class="alert alert-danger">Error please try again!</div>';
		}else{
			$this->db->trans_commit();
			$msg = '<div class="alert alert-success"><strong>Broiler Transaction Detail successfully removed.</strong></div>';
		}
		$this->session->set_flashdata('message', $msg);
		redirect('admin/view-broiler-trans/' . $bc_id .'/'. $broiler_group_id .'/'. $broiler_group_name .'/'. $trans_year);
	}

	public function get_broiler_trans(){
		$info = $this->_require_login_ahg();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$broiler_trans_date =clean_data($this->input->post('broiler_trans_date'));
			$bc_id =clean_data(decode($this->input->post('bc_id')));

			$pending_lock_status = $this->_check_lock_status(array('module_id'	=>	1,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$broiler_trans_date ));
			
			if($broiler_trans_date){

				$join_broiler_trans = array(
					'bc_tbl b' => 'a.bc_id = b.bc_id and a.bc_id ='.$bc_id,
					'user_tbl c' => 'a.created_by = c.user_id',
					'status_tbl d' => 'd.status_id = a.broiler_trans_status and a.broiler_trans_status != 5',
					'broiler_subgroup_tbl e' => 'a.broiler_subgroup_id = e.broiler_subgroup_id',
					'broiler_group_tbl f' => 'e.broiler_group_id = f.broiler_group_id',
					'broiler_trans_dtl_tbl g' => 'a.broiler_trans_id = g.broiler_trans_id and YEAR(g.broiler_trans_date)='.$broiler_trans_date
				);
				$get_broiler_trans_yearly = $this->admin->get_join('broiler_trans_tbl a', $join_broiler_trans, FALSE,'f.broiler_group_name ASC', 'f.broiler_group_id, YEAR(g.broiler_trans_date)');
				$broiler_trans = '';
				if($get_broiler_trans_yearly){
					foreach($get_broiler_trans_yearly as $row){
					
						$broiler_trans .= '<tr><td>' . $row->broiler_group_name .'</td>';
						$broiler_trans .= '<td>' . $row->bc_name .'</td>';
						$broiler_trans .= '<td>' . $row->user_fname.' '.$row->user_lname .'</td>';
						if($row->status_id == 1){
							$broiler_trans .= '<td class="text-center"><a href="'.base_url('admin/view-broiler-trans/' . encode($row->bc_id).'/'. encode($row->broiler_group_id).'/'.encode($row->broiler_group_name) . '/' . encode(date( 'Y', strtotime($row->broiler_trans_date)))).'" class="brn btn-xs glyphicon glyphicon-file edit-broiler-config" title="View"></a>&nbsp;&nbsp;<a href="'.base_url('admin/post-broiler-trans/' . encode($row->broiler_trans_id).'/'.encode($row->bc_id).'/'.encode($row->broiler_group_id).'/'.encode($row->broiler_group_name)).'" class="brn btn-xs btn-xs glyphicon glyphicon-lock edit-broiler-config" title="Post"></a></td>';
						} else {
							$broiler_trans .= '<td class="text-center"><a href="'.base_url('admin/view-broiler-trans/' . encode($row->bc_id).'/'. encode($row->broiler_group_id).'/'.encode($row->broiler_group_name) . '/' . encode(date( 'Y', strtotime($row->broiler_trans_date)))).'" class="brn btn-xs btn-success edit-broiler-config">View</a></td>';
						}
						$broiler_trans .= '</tr>';
					}
					$data['broiler_trans'] = $broiler_trans;
					$data['result'] = 1;
					$data['pending_lock_status'] = $pending_lock_status;
				} else {
					$data['result'] = 1;
					$data['pending_lock_status'] = $pending_lock_status;
				}
			} else {
				$data['result'] = 0;
			}
				
		} else {
			$data['result'] = 0;
		}

		echo json_encode($data);
			
	}

	public function view_broiler_summary($bc_id, $trans_year = false, $year = false){
		$info = $this->_require_login_ahg();
		$data['bc_id'] = $bc_id;
		$data['trans_year'] = $trans_year;
		$id = decode($bc_id);
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $id), true, 'bc_name');
		if(!$trans_year){
			$year = $year;
		} else {
			$year = decode($trans_year);
		}
		$data['pick_year'] = $year;
		$join_broiler_cost_summary = array(
			'broiler_cost_summary_tbl b' => 'a.broiler_group_id = b.broiler_group_id and b.bc_id ='.$id.' and YEAR(b.trans_date) = '.$year
		);
		$data['broiler_group'] = $this->admin->get_join('broiler_group_tbl a', $join_broiler_cost_summary, FALSE,'a.broiler_group_name ASC', 'a.broiler_group_id');

		$join = array(
			'broiler_summary_item_tbl b' => 'a.broiler_summary_item_id = b.broiler_summary_item_id and a.bc_id ='.$id.' and YEAR(a.trans_date) = '.$year.' and a.trans_type_id = 1 and a.broiler_summary_status = 1'
		);
		$broiler_summary = $this->admin->get_join('broiler_summary_tbl a', $join, false, 'b.order_count, MONTH(a.trans_date)', false, false, false, false);

		$i = 1;
		if(count($broiler_summary)){
			foreach ($broiler_summary as $broiler_summary_row) {
				if($broiler_summary_row->broiler_summary_item_id == 33){
					$budgeted_harvested_heads[$i] = $broiler_summary_row->trans_qty;
		 			$i++;

		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 34){
					$budgeted_harvested_kilo[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 35){
					$budgeted_doc_cost_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 1){
					$budgeted_growers_fee_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 37){
					$budgeted_feed_cost_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 45){
					$budgeted_vaccines_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 42){
					$budgeted_medicine_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 43){
					$budgeted_disinfectant_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				}
			}
			$data['budgeted_harvested_heads'] = @$budgeted_harvested_heads;
			$data['budgeted_harvested_kilo'] = @$budgeted_harvested_kilo;
			$data['budgeted_doc_cost_amount'] = @$budgeted_doc_cost_amount;
			$data['budgeted_growers_fee_amount'] = @$budgeted_growers_fee_amount;
			$data['budgeted_feed_cost_amount'] = @$budgeted_feed_cost_amount;
			$data['budgeted_vaccines_amount'] = @$budgeted_vaccines_amount;
			$data['budgeted_medicine_amount'] = @$budgeted_medicine_amount;
			$data['budgeted_disinfectant_amount'] = @$budgeted_disinfectant_amount;

		} else {
			$data['budgeted_harvested_heads'] = 0;
			$data['budgeted_harvested_kilo'] = 0;
			$data['budgeted_doc_cost_amount'] = 0;
			$data['budgeted_growers_fee_amount'] = 0;
			$data['budgeted_feed_cost_amount'] = 0;
			$data['budgeted_vaccines_amount'] = 0;
			$data['budgeted_medicine_amount'] = 0;
			$data['budgeted_disinfectant_amount'] = 0;
		}

		$data['title'] = 'Broiler Cost';
		$data['content'] = $this->load->view('admin/admin_view_broiler_cost_summary_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}


	// COMMISSARY PRODUCTION MODULE
	public function commi_production_cost(){
		
		$info = $this->_require_login_prod();

		$data['year'] = $this->_active_year();
		$join = array(
			'material_tbl b' => 'a.prod_id = b.material_id',
			'user_tbl c' => 'a.created_by = c.user_id',
			'component_type_tbl d' => 'a.component_type_id = d.component_type_id',
			'process_type_tbl e' => 'a.process_type_id = e.process_type_id and e.process_type_id = 9 and a.config_prod_status != 5'
		);
		$data['config_prod'] = $this->admin->get_join('config_prod_tbl a', $join, FALSE,'e.process_type_id, b.material_desc', FALSE);

		$join = array(
			'material_group_tbl b' => 'a.material_group_id = b.material_group_id and a.material_status = 1 and a.material_group_id < 17'
		);
		$data['material'] = $this->admin->get_join('material_tbl a', $join, FALSE,'a.material_desc ASC','a.material_code');

		$data['process_type'] = $this->admin->get_data('process_type_tbl', array('process_type_status'	=>	1, 'process_type_id >='	=>	9));

		$data['component_type'] = $this->admin->get_data('component_type_tbl', array('component_type_status'	=>	1));

		// $data['bc'] = $this->admin->get_data('bc_tbl', 'bc_status=1');
		// $data['commissary'] = $this->admin->get_data('commissary_tbl', 'commissary_status=1');
		$join = array(
			'cost_center_tbl b' => 'a.commissary_cost_center_code = b.cost_center_code and a.commissary_status=1',
			'company_unit_tbl c' => 'b.company_unit_id = c.company_unit_id and c.company_unit_status=1'
		);
		$data['commissary'] = $this->admin->get_join('commissary_tbl a', $join, FALSE);
		
		
		$join = array(
			'cost_center_tbl b, LEFT' => 'a.commissary_cost_center_code = b.cost_center_code and a.commissary_status=1',
			'company_unit_tbl c, LEFT' => 'b.company_unit_id = c.company_unit_id and c.company_unit_status=1'
		);
		$select = "
		a.*, c.company_unit_name,
		(SELECT GROUP_CONCAT(DISTINCT c.bc_name ORDER BY c.bc_name ASC SEPARATOR ', ') from commi_bc_tbl b, bc_tbl c where b.bc_id = c.bc_id and a.commissary_id = b.commissary_id and b.commi_bc_status=1) as bc_names,
		(SELECT GROUP_CONCAT(b.commissary_capacity ORDER BY b.commi_cap_date ASC SEPARATOR ', ') from commi_cap_tbl b WHERE a.commissary_id = b.commissary_id and b.commi_cap_status=1 and YEAR(b.commi_cap_date) = '".$this->_active_year()."') as commi_capacities,
		(SELECT CONCAT(d.user_fname,' ',d.user_lname) as fullname from user_tbl d where d.user_id = a.commissary_created_by) as creator";
		$data['commissary_mnt'] = $this->admin->get_join('commissary_tbl a', $join, FALSE, FALSE, FALSE, $select);


		$data['title'] = 'Commissary Prod Cost';
		$data['content'] = $this->load->view('admin/admin_commi_prod_cost_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function _check_lock_commi($commissary_id, $link=false, $year=false){
		$active_year = $year ? $year : $this->_active_year();
		$get_bc = $this->admin->get_data('commi_bc_tbl', array('commissary_id' => $commissary_id));
		if(!empty($get_bc)){
			$unlock = false;
			foreach($get_bc as $r){
				$filter = array(
					'module_id'	=>	2,
					'lock_type_id' => 1,
					'lock_location_id'	=>	$r->bc_id,
					'lock_status_id'	=>	1,
					'lock_year'	=>	$active_year );

				if($link){
					$check_lock = $this->_check_lock_status($filter, $link);
					if($check_lock){
						$unlock = true;
					}
				} else {
					$check_lock = $this->_check_lock_status($filter);
					if($check_lock){
						$unlock = true;
					}
				}
			}
		}

		return $unlock;
	}
	
	public function commi_mat_cost($id){
		$info = $this->_require_login_prod();
		$data['commissary_id'] = $id;
		$commissary_id = decode($id);
		
		$data['pending_lock_status'] = $this->_check_lock_commi($commissary_id);
		

		$data['title'] = 'Commissary Prod Cost';
		$data['commissary'] = $this->admin->get_data('commissary_tbl', array('commissary_id' => $commissary_id), true, 'commissary_name');
		$data['year'] = $this->_active_year();
		

		$join = array(
			'material_group_tbl b' => 'a.material_group_id = b.material_group_id and a.material_status = 1'
		);
		$data['material'] = $this->admin->get_join('material_tbl a', $join, FALSE,'a.material_desc ASC','a.material_code');

		$join = array(
			'commi_mat_cost_dtl_tbl b' => 'a.commi_mat_cost_id = b.commi_mat_cost_id and a.commissary_id ='.$commissary_id.' and YEAR(b.commi_mat_cost_date)= '.$this->_active_year(),
			'user_tbl c' => 'a.commi_mat_cost_created_by = c.user_id',
			'status_tbl d' => 'd.status_id = a.commi_mat_cost_status and a.commi_mat_cost_status != 5',
			'material_tbl f' => 'a.material_id = f.material_id'
		);
		$data['commi_mat_cost'] = $this->admin->get_join('commi_mat_cost_tbl a', $join, FALSE,'f.material_desc ASC', 'a.commi_mat_cost_id', '*, a.commi_mat_cost_created_ts, a.commi_mat_cost_modified_ts');

		$data['content'] = $this->load->view('admin/admin_commi_mat_cost_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function add_commi_mat_cost(){
		/*echo '<pre>';
		print_r($_POST);
		exit();*/
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$commissary_id = decode($this->input->post('commissary_id'));
			$material = $this->input->post('material_id');
			if(!empty($commissary_id)){
				$this->db->trans_start();
				foreach ($material as $key) {
					$material_id = clean_data(decode($key));
					$tbl = 'commi_mat_cost_tbl';

					$check_ext_prod = $this->admin->check_data($tbl, array('material_id' =>  $material_id,	'commissary_id'	=>	$commissary_id));
					if($check_ext_prod == FALSE){
						$set = array(
							'material_id'	=>	$material_id,
							'commissary_id'	=>	$commissary_id,
							'commi_mat_cost_status'	=>	1,
							'commi_mat_cost_created_by' => $user_id,
							'commi_mat_cost_created_ts'	=>	date_now(),
							'commi_mat_cost_modified_ts'	=>	date_now(),
						);
						$result = $this->admin->insert_data($tbl, $set, TRUE);

					} else {
						$msg = '<div class="alert alert-danger">Error! Material(s) already exist!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/commi-mat-cost/' . encode($commissary_id));
					}
				}

			} else {
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/commi-mat-cost/' . encode($commissary_id));
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success"><strong>Material(s) successfully added. You can view it by Adding Configuration</strong></div>';
			}
			$this->session->set_flashdata('message', $msg);
			redirect('admin/commi-mat-cost/' . encode($commissary_id));
		} else {
			redirect('admin/commi-mat-cost/' . encode($commissary_id));
		}
	}

	public function new_commi_mat_cost($id, $pick_year){

		$info = $this->_require_login_prod();
		$data['commissary_id'] = $id;
		$data['year'] = $pick_year;
 		$year = $pick_year;
		$commissary_id = decode($id);

		$data['pending_lock_status'] = $this->_check_lock_commi($commissary_id, false, $year);

		$data['commissary'] = $this->admin->get_data('commissary_tbl', array('commissary_id' => $commissary_id), true, 'commissary_name');
		

		$data['title'] = 'Commissary Prod Cost';
		$sql = 'SELECT
					a.*,
					b.material_desc, b.material_code
				FROM
					commi_mat_cost_tbl a
				INNER JOIN material_tbl b ON a.material_id = b.material_id
				AND b.material_status = 1
				
				and a.commissary_id = '.$commissary_id.'
				WHERE
					commi_mat_cost_id NOT IN (
						SELECT
							a.commi_mat_cost_id
						FROM
							commi_mat_cost_dtl_tbl a
						JOIN commi_mat_cost_tbl b on a.commi_mat_cost_id = b.commi_mat_cost_id
						WHERE
							commi_mat_cost_dtl_status = 1
						and b.commissary_id = '.$commissary_id.'
						AND YEAR (commi_mat_cost_date) = '.$year.'
						GROUP BY
							commi_mat_cost_id
					)
				GROUP BY a.material_id';
		
		$data['commi_mat_cost'] = $this->admin->get_query($sql);
		$data['content'] = $this->load->view('admin/admin_new_commi_mat_cost_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function add_commi_mat_cost_dtl(){
		
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$commi_mat_cost_id_array = $this->input->post('commi_mat_cost_id');
			$year = decode($this->input->post('year'));
			$commissary_id = decode($this->input->post('commissary_id'));

			$this->_check_lock_commi($commissary_id, 'Admin/prod-trans/'.encode($commissary_id), $year);
			// $this->_check_lock_status(array('module_id'	=>	2,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$year), 'Admin/prod-trans/'.encode($bc_id));

			// $ave_wgt = clean_data($this->input->post('ave_wgt'));
			$cost = clean_data($this->input->post('cost'));
			if(!empty($commi_mat_cost_id_array) && !empty($year) && !empty($commissary_id)){
				$this->db->trans_start();
				$count = 0;
				foreach ($commi_mat_cost_id_array as $key) {

					$commi_mat_cost_id = clean_data(decode($key));

					$check_mat_cost_dtl = $this->admin->check_data('commi_mat_cost_dtl_tbl', array('commi_mat_cost_id' =>  $commi_mat_cost_id,	'commi_mat_cost_dtl_status !='	=>	5, 'YEAR(commi_mat_cost_date)' => $year));
					if($check_mat_cost_dtl == FALSE){
						$update_data = array(
							'commi_mat_cost_status' => 1,
							'commi_mat_cost_modified_ts' => date_now()
						);
						$where = array(
							'commi_mat_cost_id' => $commi_mat_cost_id
						);
						$this->admin->update_data('commi_mat_cost_tbl', $update_data, $where);

						
						for ($i=1; $i <= 12 ; $i++) {
							$month = date('M', strtotime($year.'-'.$i.'-01'));
							$date = $year . '-' .$i.'-01';
							//$ave_wgt_amount = count($ave_wgt) <= 1 ? 0 : $ave_wgt[$month][$count];
							// $ave_wgt_amount = empty(@$ave_wgt[$month][$count]) ? 0 : $ave_wgt[$month][$count];
							$cost_amount = $cost[$month][$count];

							$insert_trans_dtl = array(
								'commi_mat_cost_id' => $commi_mat_cost_id,
								'commi_mat_cost_date' =>$date,
								'commi_mat_cost' => $cost_amount,
								'commi_mat_cost_dtl_status' => 1
							);
							$this->admin->insert_data('commi_mat_cost_dtl_tbl', $insert_trans_dtl, true);
						}
						$count++;
					} else {
						$msg = '<div class="alert alert-danger">Error! Material(s) already exist!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/commi-mat-cost#/' . encode($commissary_id));
					}
				}

			} else {
				$msg = '<div class="alert alert-danger">Error please try againssss!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/commi-mat-cost/' . encode($commissary_id));
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success"><strong>Config successfully added.</strong></div>';
			}
			$this->session->set_flashdata('message', $msg);
			redirect('admin/commi-mat-cost/' . encode($commissary_id));
		} else {
			redirect('admin/commi-mat-cost/' . encode($commissary_id));
		}
	}

	public function edit_commi_mat_cost($id, $commissary_id, $pick_year){

		$info = $this->_require_login_prod();
		$data['commi_mat_cost_id'] = $id;
		$data['commissary_id'] = $commissary_id;
		$commissary_id = decode($commissary_id);
		$data['pending_lock_status'] = $this->_check_lock_commi($commissary_id);
		

		$data['commissary'] = $this->admin->get_data('commissary_tbl', array('commissary_id' => $commissary_id), true, 'commissary_name');
		$commi_mat_cost_id = decode($id);
		$data['year'] = $pick_year;
		$join = array(
			'commi_mat_cost_dtl_tbl b' => 'a.commi_mat_cost_id = b.commi_mat_cost_id and b.commi_mat_cost_dtl_status != 5 and a.commi_mat_cost_id ='.$commi_mat_cost_id,
			'material_tbl f' => 'a.material_id = f.material_id'
		);
		$data['commi_mat_cost'] = $this->admin->get_join('commi_mat_cost_tbl a', $join, FALSE,'f.material_desc ASC', 'a.commi_mat_cost_id');

		$data['title'] = 'Commissary Prod Cost';
		$data['content'] = $this->load->view('admin/admin_edit_commi_mat_cost_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function update_commi_mat_cost(){
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$commissary_id = clean_data(decode($this->input->post('commissary_id')));
			$year = clean_data($this->input->post('year'));
			$this->_check_lock_status(array('module_id'	=>	2,	'lock_type_id' => 1, 'lock_location_id'	=>	$commissary_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$year), 'Admin/prod-trans/'.encode($commissary_id));
			
			if(!empty($commissary_id) && !empty($year)){
				$id = clean_data($this->input->post('commi_mat_cost_id'));
			
				$cost = clean_data($this->input->post('cost'));
				$count = 0;
				$this->db->trans_start();
				
				foreach($id as $row){

					$commi_mat_cost_id = decode($row);

					//update header transaction
					$update_prod_trans = array(
						'commi_mat_cost_modified_by' => $user_id,
						'commi_mat_cost_modified_ts' => date_now()
					);
					$where = array(
						'commi_mat_cost_id' => $commi_mat_cost_id

					);
					$this->admin->update_data('commi_mat_cost_tbl', $update_prod_trans, $where);
					
					for ($i=1; $i <= 12 ; $i++) {

						
						$cost_amount = $cost[$i][$count];
						
						$update_trans_dtl = array(
							'commi_mat_cost' =>$cost_amount
						);
						
						
						$where = array(
							'commi_mat_cost_id' => $commi_mat_cost_id,
							'MONTH(commi_mat_cost_date)' => $i,
							'commi_mat_cost_dtl_status !=' => 5
						);
						$this->admin->update_data('commi_mat_cost_dtl_tbl', $update_trans_dtl, $where);
					}
					$count++;
				}
				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success"><strong>Transaction successfully updated.</strong></div>';
				}
				
				$this->session->set_flashdata('message', $msg);
				redirect('admin/commi-mat-cost/'.encode($commissary_id));
			} else {
				echo 'Something wrong on bc';
			}
		} else{
			echo 'Something wrong';
		}
	}

	public function cancel_commi_mat_cost(){
		// echo "<pre>";
		// print_r($_POST);
		// echo "</pre>";
		// exit();
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);

		$commi_mat_cost_id = clean_data(decode($this->input->post('commi_mat_cost_id')));
		$commissary_id = clean_data($this->input->post('commissary_id'));
		$trans_status = clean_data($this->input->post('trans_status'));
		
		
		if($trans_status == 'cancel'){
			$commi_mat_cost_status = 5;
			$status = 'cancelled';
		}

		
		$this->db->trans_start();
		$update_data = array(
			'commi_mat_cost_status' => $commi_mat_cost_status,
			'commi_mat_cost_modified_by' => $user_id,
			'commi_mat_cost_modified_ts' => date_now()
		);
		$where = array(
			'commi_mat_cost_id' => $commi_mat_cost_id,
		);
		$this->admin->update_data('commi_mat_cost_tbl', $update_data, $where);

		$update_data = array(
			'commi_mat_cost_dtl_status' => $commi_mat_cost_status
		);
		$where = array(
			'commi_mat_cost_id' => $commi_mat_cost_id,
		);
		$this->admin->update_data('commi_mat_cost_dtl_tbl', $update_data, $where);

		if($this->db->trans_status() === FALSE){
			$this->db->trans_rollback();
			$msg = '<div class="alert alert-danger">Error please try again!</div>';
		}else{
			$this->db->trans_commit();
			$msg = '<div class="alert alert-success"><strong>Config successfully '.$status.'.</strong></div>';
		}
		$this->session->set_flashdata('message', $msg);
		
		redirect('admin/commi-mat-cost/' . $commissary_id);
	}

	public function view_commi_mat_cost($id, $pick_year){

		$info = $this->_require_login_prod();
		$data['commissary_id'] = $id;
		$data['year'] = $pick_year;
 		$year = $pick_year;
		$commissary_id = decode($id);
		$data['title'] = 'Commissary Prod Cost';
		$data['commissary'] = $this->admin->get_data('commissary_tbl', array('commissary_id' => $commissary_id), true, 'commissary_name');
		$sql = 'SELECT
					a.*,
					b.material_desc, b.material_code
				FROM
					commi_mat_cost_tbl a
				INNER JOIN material_tbl b ON a.material_id = b.material_id
				INNER JOIN commi_mat_cost_dtl_tbl c ON a.commi_mat_cost_id = c.commi_mat_cost_id
				and YEAR(c.commi_mat_cost_date) = '.$year.'
				AND b.material_status = 1
				and a.commi_mat_cost_status = 1
				and a.commissary_id = '.$commissary_id.'
				GROUP BY a.commi_mat_cost_id
				';
		
		$data['commi_mat_cost'] = $this->admin->get_query($sql);
		$data['content'] = $this->load->view('admin/admin_view_commi_mat_cost_content', $data , TRUE);
		$this->load->view('admin/templates', $data);

	}

	public function batch_cancel_commi_mat_cost(){
		// echo "<pre>";
		// print_r($_POST);
		// echo "</pre>";
		// exit();
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);

		$commi_mat_cost = clean_data($this->input->post('commi_mat_cost_id'));
		$commissary_id = clean_data( $this->input->post('commissary_id'));
		
		$commi_mat_cost_status = 5;
		$status = 'cancelled';

		if(!empty($commi_mat_cost)){
			$this->db->trans_start();
			foreach($commi_mat_cost as $r){
				$commi_mat_cost_id = decode($r);

				
				$update_data = array(
					'commi_mat_cost_status' => $commi_mat_cost_status,
					'commi_mat_cost_modified_by' => $user_id,
					'commi_mat_cost_modified_ts' => date_now()
				);
				$where = array(
					'commi_mat_cost_id' => $commi_mat_cost_id,
				);
				$this->admin->update_data('commi_mat_cost_tbl', $update_data, $where);
				
				$update_data = array(
					'commi_mat_cost_dtl_status' => $commi_mat_cost_status
				);
				$where = array(
					'commi_mat_cost_id' => $commi_mat_cost_id,
				);
				$this->admin->update_data('commi_mat_cost_dtl_tbl', $update_data, $where);
			}
		}

		
		if($this->db->trans_status() === FALSE){
			$this->db->trans_rollback();
			$msg = '<div class="alert alert-danger">Error please try again!</div>';
		}else{
			$this->db->trans_commit();
			$msg = '<div class="alert alert-success"><strong>Transaction(s) successfully '.$status.'.</strong></div>';
		}
		$this->session->set_flashdata('message', $msg);
		redirect('admin/commi-mat-cost/' . $commissary_id);
	}

	public function get_commi_mat_cost_materials(){
		$info = $this->_require_login_prod();

		$commissary_id = clean_data( decode( $this->input->post('commissary_id') ) );
		$year = clean_data( $this->input->post( 'year' ) );

		$join = array(
			'commi_mat_cost_dtl_tbl b' => 'a.commi_mat_cost_id = b.commi_mat_cost_id and a.commissary_id ='.$commissary_id.' and YEAR(b.commi_mat_cost_date)= '.$year,
			'status_tbl d' => 'd.status_id = a.commi_mat_cost_status and a.commi_mat_cost_status != 5',
			'material_tbl f' => 'a.material_id = f.material_id'
		);
		$commi_mat_cost = $this->admin->get_join('commi_mat_cost_tbl a', $join, FALSE,'f.material_desc ASC', 'a.commi_mat_cost_id', '*, a.commi_mat_cost_created_ts, a.commi_mat_cost_modified_ts');

		$list_materials = '<option value="">Select...</option>';
		if(!empty($commi_mat_cost)){
			foreach($commi_mat_cost as $row){
				$list_materials .= '<option value="' . encode($row->commi_mat_cost_id) .'">'. $row->material_code .' - '. $row->material_desc . '</option>';
			}

			$data['result'] = 1;
			$data['info'] = $list_materials;
		} else {
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function download_commi_mat_cost_temp(){
		$info = $this->_require_login_prod();
		
		$commissary = $this->admin->get_data('commissary_tbl', array('commissary_status' => 1), false);
		$join = array(
			'material_group_tbl b' => 'a.material_group_id = b.material_group_id'
		);
		$row_type=FALSE;
		$order='b.material_group_name, a.material_code';
		$group='a.material_id';
		$select=FALSE;
		$materials = $this->admin->get_join('material_tbl a', $join, $row_type, $order, $group, $select, array('material_status' => 1), false);

		
		
		$this->load->library('excel');
		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Commi Mat Cost Temp')
				->setDescription('Commi Mat Cost Temp');
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_left = array(
			
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		
		$spreadsheet->setActiveSheetIndex(0)
				->setTitle("External Materials")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(false);

		$reportTitle = 'Commi Mat Cost Temp';
		$reportTitle .= "\nRun Date : ".date_now();

		$spreadsheet->getActiveSheet()->getStyle("A2:H2")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A2:H2")->applyFromArray($style_info);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle);


		$spreadsheet->getActiveSheet()->setCellValue('A2', 'Material Code');
		$spreadsheet->getActiveSheet()->mergeCells('A2:A3');
		$spreadsheet->getActiveSheet()->setCellValue('B2', 'Material Name');
		$spreadsheet->getActiveSheet()->mergeCells('B2:B3');

		$spreadsheet->getActiveSheet()->setCellValue('C2', 'Jan');
		$spreadsheet->getActiveSheet()->setCellValue('C3', 'Cost');

		$spreadsheet->getActiveSheet()->setCellValue('D2', 'Feb');
		$spreadsheet->getActiveSheet()->setCellValue('D3', 'Cost');

		$spreadsheet->getActiveSheet()->setCellValue('E2', 'Mar');
		$spreadsheet->getActiveSheet()->setCellValue('E3', 'Cost');

		$spreadsheet->getActiveSheet()->setCellValue('F2', 'Apr');
		$spreadsheet->getActiveSheet()->setCellValue('F3', 'Cost');
		
		$spreadsheet->getActiveSheet()->setCellValue('G2', 'May');
		$spreadsheet->getActiveSheet()->setCellValue('G3', 'Cost');
		
		$spreadsheet->getActiveSheet()->setCellValue('H2', 'Jun');
		$spreadsheet->getActiveSheet()->setCellValue('H3', 'Cost');
		
		$spreadsheet->getActiveSheet()->setCellValue('I2', 'Jul');
		$spreadsheet->getActiveSheet()->setCellValue('I3', 'Cost');
		
		$spreadsheet->getActiveSheet()->setCellValue('J2', 'Aug');
		$spreadsheet->getActiveSheet()->setCellValue('J3', 'Cost');
		
		$spreadsheet->getActiveSheet()->setCellValue('K2', 'Sep');
		$spreadsheet->getActiveSheet()->setCellValue('K3', 'Cost');
		
		$spreadsheet->getActiveSheet()->setCellValue('L2', 'Oct');
		$spreadsheet->getActiveSheet()->setCellValue('L3', 'Cost');
		
		$spreadsheet->getActiveSheet()->setCellValue('M2', 'Nov');
		$spreadsheet->getActiveSheet()->setCellValue('M3', 'Cost');
		
		$spreadsheet->getActiveSheet()->setCellValue('N2', 'Dec');
		$spreadsheet->getActiveSheet()->setCellValue('N3', 'Cost');
		
		

		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);
		$spreadsheet->getActiveSheet()->getStyle("A2:N3")->applyFromArray($style_hdr);

		foreach(range('A','Z') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$spreadsheet->getActiveSheet()->getColumnDimension('B')->setAutoSize( false );
		$spreadsheet->getActiveSheet()->getColumnDimension('B')->setWidth(30);
		

		//SHEET 2
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(1)
				->setTitle("Material")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Material Group',
			'Material Code',
			'Material Name',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($materials as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->material_group_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->material_code);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, $row->material_desc);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(3 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:D1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','D') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		

		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Commi Material Cost Temp.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function upload_commi_mat_cost(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$user_id = decode($info['user_id']);
			//$this->load->library('excel');
			$this->load->library('excel_v2');
			ini_set('max_execution_time', 0);
			ini_set('memory_limit','2048M');

			$path = 'assets/commi-mat-cost/';
			if (!is_dir($path)) {
			    mkdir($path, 0777, TRUE);
			}


			$trans_year = clean_data($this->input->post('commi-mat-cost-year'));
			$commissary_id = clean_data($this->input->post('commissary_id'));

			$config['upload_path'] = $path;
			$config['allowed_types'] = 'xlsx|xls';
			$config['remove_spaces'] = TRUE;
			$this->load->library('upload', $config);
			$this->upload->initialize($config);            
			if (!$this->upload->do_upload('commi-mat-cost-file')) {
				$error = array('error' => $this->upload->display_errors());
			} else {
				$data = array('upload_data' => $this->upload->data());
			}

			if(empty($error)){
				if (!empty($data['upload_data']['file_name'])) {
					$import_xls_file = $data['upload_data']['file_name'];
				} else {
					$import_xls_file = 0;
				}

				$inputFileName = $path . $import_xls_file;
				try {
					$inputFileType = PHPExcel_IOFactory::identify($inputFileName);
					$objReader = PHPExcel_IOFactory::createReader($inputFileType);
					$objPHPExcel = $objReader->load($inputFileName);
					$allDataInSheet = $objPHPExcel->getActiveSheet()->toArray(null, true, false, true);
					$flag = true;
					$i=2; //dating 4
					
					$added = 0;
					
					
		        	$totalKgs = 0;
		        	$overAllTotal = 0;
		        	$msg = '';
		        	$this->db->trans_start();

		        	
		        	foreach ($allDataInSheet as $value) {
	        			if($added < 3){ //dating 3
	        				if($added == 2){
				        		if(
					        		
									!empty($value['O'])
				        		){
				        			$msg = '<div class="alert alert-danger">Error, Invalid Template! Please download the latest one.</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/commi-mat-cost/' . $commissary_id);
				        		}
				        	}
		                  	goto end_commi_mat_cost_upload;
		                }

		                
			        	$material_code		= strtoupper(clean_data(trim(@$value['A'])));
			        	

						$cost = array(
							'1' => clean_data(trim(@$value['C'])),
							'2' => clean_data(trim(@$value['D'])),
							'3' => clean_data(trim(@$value['E'])),
							'4' => clean_data(trim(@$value['F'])),
							'5' => clean_data(trim(@$value['G'])),
							'6' => clean_data(trim(@$value['H'])),
							'7' => clean_data(trim(@$value['I'])),
							'8' => clean_data(trim(@$value['J'])),
							'9' => clean_data(trim(@$value['K'])),
							'10' => clean_data(trim(@$value['L'])),
							'11' => clean_data(trim(@$value['M'])),
							'12' => clean_data(trim(@$value['N']))
						);
						
						


			        	$i++;
						

						$check_material = $this->admin->check_data('material_tbl', array('material_code' => $material_code), TRUE, 'material_id');
			        	if($check_material['result'] == TRUE){
							$material_id = $check_material['info']->material_id;
						}else{
							$material_id = '';
							
							$msg .= '<div class="alert alert-danger">Material Code ('.$material_code.') does not exist! Line number '.$i.'.</div>';
							goto end_commi_mat_cost_upload;
							
						}



						$sql = 'UPDATE commi_mat_cost_tbl a
						INNER JOIN commi_mat_cost_dtl_tbl b ON a.commi_mat_cost_id = b.commi_mat_cost_id
						set a.commi_mat_cost_status = 5,
						b.commi_mat_cost_dtl_status = 5
						where a.commissary_id= '.decode($commissary_id).' and a.material_id = '.$material_id.' and YEAR(b.commi_mat_cost_date) = '.$trans_year;
						
						$this->db->query($sql);


			        	if(!empty($commissary_id)){
							$set = array(
								
								'material_id' => $material_id,
								'commissary_id' 	=> decode($commissary_id),
								'commi_mat_cost_status'	=> 1,
								'commi_mat_cost_created_ts'	=> date_now(),
								'commi_mat_cost_modified_ts'	=>	date_now(),
								'commi_mat_cost_created_by' => $user_id
								
							);
							$result =  $this->admin->insert_data('commi_mat_cost_tbl', $set, TRUE);
							for($month = 1; $month <= 12; $month++){	
								$set = array(
									'commi_mat_cost_id' => $result['id'],
									'commi_mat_cost_date'	=> $trans_year.'-'.$month.'-01',
									'commi_mat_cost' => $cost[$month],
									'commi_mat_cost_dtl_status'	=> 1
								);
								$result_dtl =  $this->admin->insert_data('commi_mat_cost_dtl_tbl', $set, TRUE);
							}
						}
		                
						end_commi_mat_cost_upload:
		                $added++;
		            }
		            if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg .= '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/commi-mat-cost/' . $commissary_id);
					}else{
						$this->db->trans_commit();
						$msg .= '<div class="alert alert-success">Data uploaded successfully!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/commi-mat-cost/' . $commissary_id);
					}

		        } catch (Exception $e) {
					die('Error loading file "' . pathinfo($inputFileName, PATHINFO_BASENAME)
		                  . '": ' .$e->getMessage());

				}
					
			} else {
				$msg = '<div class="alert alert-danger">'.$this->upload->display_errors().'</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/commi-mat-cost/' . $commissary_id);
			}
		} else {
			$msg = '<div class="alert alert-danger">Please contact system administrator!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/commi-mat-cost/' . $commissary_id);
		}

		
	}

	public function view_commi_config_prod($id, $process_type_id){

		$info = $this->_require_login_prod();
		$data['config_prod_id'] = $id;
		$config_prod_id = decode($id);
		$data['process_type_id'] = $process_type_id;
		$sql = 'SELECT
					*
				FROM
					(
						SELECT
							a.*, b.material_code,
							b.material_desc,
							b.material_id,
							c.user_id,
							c.user_fname,
							c.user_lname,
							d.component_type,
							d.order_base,
							f.amount_type_name,
							g.unit_name,
							IF(a.amount_type_id = 2, IF(ISNULL(a.config_prod_dtl_rate),"",FORMAT(a.config_prod_dtl_rate,2)), CONCAT(FORMAT(a.config_prod_dtl_rate,2),"%")) as rate,
							IF(ISNULL(a.config_prod_dtl_qty), "", a.config_prod_dtl_qty) as qty
						FROM
							`config_prod_dtl_tbl` `a`
						JOIN `material_tbl` `b` ON `a`.`article_id` = `b`.`material_id`
						AND `a`.`article_type_id` = 1
						JOIN `user_tbl` `c` ON `a`.`created_by` = `c`.`user_id`
						JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
						JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
						AND `a`.`config_prod_id` = '.$config_prod_id.'
						left join `unit_tbl` `g` ON `a`.`unit_id` = `g`.`unit_id`
						UNION ALL
							SELECT
								a.*, b.service_code,
								b.service_desc,
								b.service_id,
								c.user_id,
								c.user_fname,
								c.user_lname,
								d.component_type,
								d.order_base,
								f.amount_type_name,
								null as unit_name,
								IF(a.amount_type_id = 2, IF(ISNULL(a.config_prod_dtl_rate),"",FORMAT(a.config_prod_dtl_rate,2)), CONCAT(FORMAT(a.config_prod_dtl_rate,2),"%")) as rate,
								IF(ISNULL(a.config_prod_dtl_qty), "", a.config_prod_dtl_qty) as qty
							FROM
								`config_prod_dtl_tbl` `a`
							JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
							AND `a`.`article_type_id` = 2
							JOIN `user_tbl` `c` ON `a`.`created_by` = `c`.`user_id`
							JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
							JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
							AND `a`.`config_prod_id` = '.$config_prod_id.'
					) z
				where z.config_prod_dtl_status != 5
				order by z.order_base, z.material_desc';
		
		$data['config_prod'] = $this->admin->get_query($sql);

		$join = array(
			'material_group_tbl b' => 'a.material_group_id = b.material_group_id and a.material_status = 1'
		);
		$data['material'] = $this->admin->get_join('material_tbl a', $join, FALSE,'a.material_desc ASC','a.material_code');

		$data['article_type'] = $this->admin->get_data('article_type_tbl', 'article_type_status=1');

		$filter = array(
			'component_type_status'	=>	1,
			'is_for_commi'			=>	1,
			'component_classification'	=>	1
		);
		$data['mat_component_type'] = $this->admin->get_data('component_type_tbl', $filter);
		$filter = array(
			'component_type_status'	=>	1,
			'is_for_commi'			=>	1,
			'component_classification'	=>	2
		);
		$data['svc_component_type'] = $this->admin->get_data('component_type_tbl', $filter);
		$data['unit'] = $this->admin->get_data('unit_tbl', 'unit_status=1');
		$data['services'] = $this->admin->get_data('services_tbl', 'service_status=1');
		$data['amount_type'] = $this->admin->get_data('amount_type_tbl', 'amount_type_status=1');

		$data['title'] = 'Commissary Prod Cost';
		$data['content'] = $this->load->view('admin/admin_view_commi_config_prod_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function add_commissary(){

		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$commissary_name						= strtoupper($this->input->post('commissary_name'));
			$commissary_location					= strtoupper($this->input->post('commissary_location'));
			// $commissary_capacity					= strtoupper($this->input->post('commissary_capacity'));
			$commissary_cost_center_code			= strtoupper($this->input->post('commissary_cost_center_code'));
			$commissary_address						= strtoupper($this->input->post('commissary_address'));
			$bc_id_array							= $this->input->post('bc_id');
			$capacity_array							= $this->input->post('commissary_capacity');
			


			if( !empty($commissary_name) && !empty($commissary_address) && !empty($commissary_location) && !empty($bc_id_array) && !empty($capacity_array) ){
				$this->db->trans_start();

				$check_name = $this->admin->check_data('commissary_tbl', array('commissary_name' => $commissary_name), TRUE);
				if($check_name['result'] == TRUE){
					$msg = '<div class="alert alert-danger">Error, Commissary name ('.$commissary_name.') already exists</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/commi-production-cost#commi-tab');
				}
				
				$check_cost_center = $this->admin->check_data('commissary_tbl', array('commissary_cost_center_code' => $commissary_cost_center_code), TRUE);
				if($check_cost_center['result'] == TRUE){
					$msg = '<div class="alert alert-danger">Error, Commissary cost center ('.$commissary_cost_center_code.') already exists</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/commi-production-cost#commi-tab');
				}

				$set = array(
					'commissary_name'					=> $commissary_name,
					'commissary_location'				=> $commissary_location,
					// 'commissary_capacity'				=> $commissary_capacity, 
					'commissary_cost_center_code'		=> $commissary_cost_center_code, 
					'commissary_address'				=> $commissary_address,
					'commissary_status'					=> 1,
					'commissary_created_by'				=> $user_id
				);

				$result = $this->admin->insert_data('commissary_tbl', $set, TRUE);
				$commissary_id = $result['id'];

				foreach ($bc_id_array as $r) {
					$bc_id = clean_data(decode($r));

					$set = array(
						'commissary_id'					=> $commissary_id,
						'bc_id'							=> $bc_id,
						'commi_bc_status'				=> 1,
						'commi_bc_created_by'			=> $user_id
					);

					$result = $this->admin->insert_data('commi_bc_tbl', $set, TRUE);

				}

				foreach($capacity_array as $r){
					$set = array(
						'commissary_id'					=> $commissary_id,
						'commissary_capacity'			=> $r,
						'commi_cap_status'				=> 1,
						'commi_cap_created_by'			=> $user_id,
						'commi_cap_date'				=> $this->_active_year().'-'.$i.'-01'
					);

					$result = $this->admin->insert_data('commi_cap_tbl', $set, TRUE);
				}


			}else{
				$msg = '<div class="alert alert-danger">Error, please input required fields!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/commi-production-cost#commi-tab');
				
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success"><strong>Commissary successfully added.</strong></div>';
			}
			$this->session->set_flashdata('message', $msg);
			
			redirect('admin/commi-production-cost#commi-tab');
				
		}else{
			redirect('admin/commi-production-cost#commi-tab');
		}
	}
	
	public function update_commissary(){

		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$commissary_id							= decode($this->input->post('commissary_id'));
			$commissary_name						= strtoupper($this->input->post('commissary_name'));
			$commissary_location					= strtoupper($this->input->post('commissary_location'));
			// $commissary_capacity					= strtoupper($this->input->post('commissary_capacity'));
			$commissary_cost_center_code			= strtoupper($this->input->post('commissary_cost_center_code'));
			$commissary_address						= strtoupper($this->input->post('commissary_address'));
			$bc_id_array							= $this->input->post('bc_id');
			$capacity_array							= $this->input->post('commissary_capacity');
			


			if( !empty($commissary_id) && !empty($commissary_name) && !empty($commissary_address) && !empty($commissary_location) && !empty($bc_id_array) && !empty($capacity_array) ){
				$check_name = $this->admin->check_data('commissary_tbl', array('commissary_name' => $commissary_name, 'commissary_id !=' => $commissary_id), TRUE);
				if($check_name['result'] == TRUE){
					$msg = '<div class="alert alert-danger">Error, Commissary name ('.$commissary_name.') already exists</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/commi-production-cost#commi-tab');
				}
				
				$check_cost_center = $this->admin->check_data('commissary_tbl', array('commissary_cost_center_code' => $commissary_cost_center_code, 'commissary_id !=' => $commissary_id), TRUE);
				if($check_cost_center['result'] == TRUE){
					$msg = '<div class="alert alert-danger">Error, Commissary cost center ('.$commissary_cost_center_code.') already exists</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/commi-production-cost#commi-tab');
				}

				$this->db->trans_start();

				$set = array(
					'commissary_name'							=> $commissary_name,
					'commissary_location'						=> $commissary_location,
					// 'commissary_capacity'						=> $commissary_capacity,
					'commissary_cost_center_code'				=> $commissary_cost_center_code,
					'commissary_address'						=> $commissary_address,
					'commissary_modified_by'					=> $user_id
				);

				$filter = array(
					'commissary_id' => $commissary_id
				);
				$result = $this->admin->update_data('commissary_tbl', $set, $filter);
				
				$this->admin->update_data('commi_bc_tbl', ['commi_bc_status'=> 5], ['commissary_id'=> $commissary_id]);

				foreach ($bc_id_array as $r) {
					$bc_id = clean_data(decode($r));
					$where = array(
						'a.bc_id' => $bc_id,
						'a.commissary_id'		=> $commissary_id,
					);
					$commi_bc = $this->admin->get_data('commi_bc_tbl a', $where, TRUE);

					
					if(!empty($commi_bc)){
						if($commi_bc->commi_bc_status == 5){
							$set = array(
								'commi_bc_status'				=> 1,
								'commi_bc_modified_by'			=> $user_id
							);
							$filter = array(
								'commi_bc_id' => $commi_bc->commi_bc_id
							);

							$result = $this->admin->update_data('commi_bc_tbl', $set, $filter);
						}


					} else {
						$set = array(
							'commissary_id'					=> $commissary_id,
							'bc_id'							=> $bc_id,
							'commi_bc_status'				=> 1,
							'commi_bc_created_by'			=> $user_id
						);
						$result = $this->admin->insert_data('commi_bc_tbl', $set, TRUE);
					}
				}

				$where = array(
					'a.commissary_id'			=> $commissary_id,
					'YEAR(commi_cap_date)'		=> $this->_active_year()
				);
				$set = array(
					'commi_cap_status'				=> 2,
					'commi_cap_modified_by'			=> $user_id
				);
				$this->admin->update_data('commi_cap_tbl a', $set, $where);

				$i = 1;
				foreach($capacity_array as $r){

					$set = array(
						'commissary_id'					=> $commissary_id,
						'commissary_capacity'			=> $r,
						'commi_cap_status'				=> 1,
						'commi_cap_created_by'			=> $user_id,
						'commi_cap_date'				=> $this->_active_year().'-'.$i.'-01'
					);

					$result = $this->admin->insert_data('commi_cap_tbl', $set, TRUE);

					$i++;
				}

			}else{
				$msg = '<div class="alert alert-danger">Error, please input required fields!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/commi-production-cost#commi-tab');
				
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success"><strong>Commissary successfully updated.</strong></div>';
			}
			$this->session->set_flashdata('message', $msg);
			
			redirect('admin/commi-production-cost#commi-tab');
				
		}else{
			redirect('admin/commi-production-cost#commi-tab');
		}
	}

	public function cancel_commissary (){
		// echo "<pre>";
		// print_r($_POST);
		// echo "</pre>";
		// exit();
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);

		$commissary_id = clean_data(decode($this->input->post('commissary_id')));
		$trans_status = clean_data($this->input->post('trans_status'));
		
		
		if($trans_status == 'cancel'){
			$trans_status = 5;
			$status = 'deactivated';
		}
		if($trans_status == 'activate'){
			$trans_status = 1;
			$status = 'activated';
		}


		
		$this->db->trans_start();
		$update_data = array(
			'commissary_status' => $trans_status,
			'commissary_modified_by' => $user_id,
			'commissary_modified_ts' => date_now()
		);
		$where = array(
			'commissary_id' => $commissary_id
		);
		$this->admin->update_data('commissary_tbl', $update_data, $where);

		$update_data = array(
			'commi_bc_status' => $trans_status
		);
		$where = array(
			'commissary_id' => $commissary_id
		);
		$this->admin->update_data('commi_bc_tbl', $update_data, $where);

		if($this->db->trans_status() === FALSE){
			$this->db->trans_rollback();
			$msg = '<div class="alert alert-danger">Error please try again!</div>';
		}else{
			$this->db->trans_commit();
			$msg = '<div class="alert alert-success"><strong>Commissary successfully '.$status.'.</strong></div>';
		}
		$this->session->set_flashdata('message', $msg);
		
		redirect('admin/commi-production-cost#commi-tab');
		
	}

	public function get_commissary(){
		// echo "<pre>";
		// print_r($commissary);
		// echo "</pre>";
		// exit();
		$info = $this->_require_login_prod();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$commissary_id = decode($this->input->post('commissary_id'));
			$commissary = $this->admin->get_data('commissary_tbl', 'commissary_status=1 and commissary_id='.$commissary_id, TRUE);
			
			if(!empty($commissary)){
				
				$where = array(
					'a.commi_bc_status' => 1,
					'a.commissary_id'		=> $commissary_id,
				);
				$commi_bc = $this->admin->get_data('commi_bc_tbl a', $where);
				$commi_bc_id = array();
				if(!empty($commi_bc)){
					foreach($commi_bc as $r){
						array_push($commi_bc_id,$r->bc_id);
					}
				}
				$bc = $this->admin->get_data('bc_tbl', 'bc_status=1');

				$data_bc	= '';
				if(!empty($bc)){
					foreach($bc as $row){
						$selected = in_array($row->bc_id, $commi_bc_id) ? 'selected' : '';
						$data_bc .= '<option value="' .encode($row->bc_id) .'" ' . $selected. '>'. $row->bc_name . '</option>';
					}
				}

				$where = array(
					'a.commi_cap_status' => 1,
					'a.commissary_id'		=> $commissary_id,
					'YEAR(commi_cap_date)'	=> $this->_active_year()
				);
				$commi_cap = $this->admin->get_data('commi_cap_tbl a', $where, false, false, 'commi_cap_date');
				$data_commi_cap = '';
				if(!empty($commi_cap)){
					$i=1;
					foreach($commi_cap as $row){
						
						$date = $this->_active_year().'-'.$i.'-01';
						$data_commi_cap .= '
							<div class="col-sm-3">
								<label>Capacity ('.date_display($date, 'M').'):</label>
								<input type="number" id="commi-cap-'.$i.'" required step="any" value="'.$row->commissary_capacity.'" name="commissary_capacity[]" class="form-control text-right">
							</div>';
						$i++;
					}
				} else {
					$where = array(
						'a.commi_cap_status' => 1,
						'a.commissary_id'		=> $commissary_id,
						'YEAR(commi_cap_date)'	=> $this->_active_year()-1
					);
					$commi_cap = $this->admin->get_data('commi_cap_tbl a', $where, false, false, 'commi_cap_date');
					$data_commi_cap = '';
					if(!empty($commi_cap)){
						$i=1;
						foreach($commi_cap as $row){
							
							$date = $this->_active_year().'-'.$i.'-01';
							$data_commi_cap .= '
								<div class="col-sm-3">
									<label>Capacity ('.date_display($date, 'M').'):</label>
									<input type="number" id="commi-cap-'.$i.'" required step="any" value="'.$row->commissary_capacity.'" name="commissary_capacity[]" class="form-control text-right">
								</div>';
							$i++;
						}
					} else {
						for($i=1; $i <= 12; $i++){
							$date = $this->_active_year().'-'.$i.'-01';
	
							$data_commi_cap .= '
								<div class="col-sm-3">
									<label>Capacity ('.date_display($date, 'M').'):</label>
									<input type="number" id="commi-cap-'.$i.'" required step="any" name="commissary_capacity[]" class="form-control text-right">
								</div>';
						}
					}
				}


				$data['info'] = [
					'commissary_name'	=> $commissary->commissary_name,
					'commissary_location'	=> $commissary->commissary_location,
					'commissary_address'	=> $commissary->commissary_address,
					// 'commissary_capacity'	=> $commissary->commissary_capacity,
					'commissary_cost_center_code'	=> $commissary->commissary_cost_center_code,
					'data_bc'	=> $data_bc,
					'data_commi_cap'	=> $data_commi_cap,
				];
				$data['result'] = 1;
			} else {
				$data['result'] = 1;
			}


			echo json_encode($data);
		}
	}

	public function commi_prod_trans($id){
		$info = $this->_require_login_prod();
		$data['commissary_id'] = $id;
		$commissary_id = decode($id);

		$data['pending_lock_status'] = $this->_check_lock_commi($commissary_id);

		$data['title'] = 'Commissary Prod Cost';
		// $data['commissary'] = $this->admin->get_data('commissary_tbl', array('commissary_id' => $commissary_id), true, 'commissary_name');
		$join = array(
			'cost_center_tbl b' => 'a.commissary_cost_center_code = b.cost_center_code and a.commissary_id='.$commissary_id,
		);
		$data['commissary'] = $this->admin->get_join('commissary_tbl a', $join, TRUE, false, false, 'commissary_name, company_unit_id');

		$data['year'] = $this->_active_year();
		$join = array(
			'commissary_tbl b' => 'a.commissary_id = b.commissary_id and a.commissary_id ='.$commissary_id,
			'user_tbl c' => 'a.created_by = c.user_id',
			'status_tbl d' => 'd.status_id = a.prod_trans_status and a.prod_trans_status != 5',
			'prod_trans_dtl_tbl e' => 'a.prod_trans_id = e.prod_trans_id and YEAR(e.prod_trans_dtl_date)= '.$this->_active_year(),
			'material_tbl f' => 'a.prod_id = f.material_id',
			'process_type_tbl g' => 'a.process_type_id = g.process_type_id and g.process_type_id != 5',
			'brand_tbl h' => 'a.brand_id = h.brand_id'
		);
		$data['prod_trans'] = $this->admin->get_join('prod_trans_tbl a', $join, FALSE,'f.material_desc ASC', 'a.prod_trans_id', '*, a.created_ts, a.modified_ts');

		$join = array(
			'material_group_tbl b' => 'a.material_group_id = b.material_group_id and a.material_status = 1 and a.material_group_id <= 15'
		);
		$data['material'] = $this->admin->get_join('material_tbl a', $join, FALSE,'a.material_desc ASC','a.material_code');

		$data['content'] = $this->load->view('admin/admin_commi_prod_trans_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function new_commi_prod_trans($id, $pick_year){
		$info = $this->_require_login_prod();
		$data['commissary_id'] = $id;
		$data['year'] = $pick_year;
		$commissary_id = decode($id);

		$this->_check_lock_commi($commissary_id, 'Admin/commi-prod-trans/'.encode($commissary_id), $pick_year);

		$data['commissary'] = $this->admin->get_data('commissary_tbl', array('commissary_id' => $commissary_id), true, 'commissary_name');
		$data['title'] = 'Commissary Prod Cost';

		$join = array(
			'material_tbl b' => 'a.prod_id = b.material_id',
			'process_type_tbl c' => 'a.process_type_id = c.process_type_id and c.process_type_id != 5 and a.config_prod_status != 5'
		);
		$where = 'c.process_type_id = 9 and a.config_prod_id NOT IN (SELECT a.config_prod_id from prod_trans_tbl a INNER JOIN prod_trans_dtl_tbl b ON a.prod_trans_id = b.prod_trans_id where a.commissary_id = '.$commissary_id.' and a.process_type_id = 9 and a.prod_trans_status != 5 and YEAR(b.prod_trans_dtl_date) = "'.$pick_year.'" GROUP BY a.config_prod_id)';

		$data['config_prod'] = $this->admin->get_join('config_prod_tbl a', $join, FALSE,'c. process_type_id, b.material_desc ASC', false, false, $where);
		$data['type'] = $this->admin->get_data('brand_type_tbl', array('brand_type_status' => 1));
		$data['brand'] = $this->admin->get_data('brand_tbl', array('brand_status' => 1));
		$data['content'] = $this->load->view('admin/admin_new_commi_prod_trans_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function add_commi_prod_trans(){
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		$status = 3;
		/*echo '<pre>';
		print_r($_POST);
		echo '</pre>';
		exit();*/
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			
			$commissary_id = clean_data(decode($this->input->post('commissary_id')));
			$year = clean_data(decode($this->input->post('year')));
			$config_prod = clean_data(decode($this->input->post('config_prod')));
			$process_type_name = clean_data($this->input->post('process_type_name'));
			$brand_id = clean_data(decode($this->input->post('brand_id')));

			
			
			$module_id = 2;
			$load_location = 'Admin/commi-prod-trans/'.encode($commissary_id);

			$this->_check_lock_commi($commissary_id, $load_location, $year);
			

			if(!empty($commissary_id)){
				$id = clean_data($this->input->post('config_prod_dtl_id'));
				$rate = clean_data($this->input->post('rate'));
				$cost = clean_data($this->input->post('cost'));

				if($id == ''){
					$msg = '<div class="alert alert-danger">Error! Empty form submitted, Cannot process transaction!</div>';
					$this->session->set_flashdata('message', $msg);
					
					redirect( $load_location );
				}
				
				$count = 0;
				//FIND THE DATA IN CONFIG PROD HDR
				$config_tbl_data = $this->admin->get_data('config_prod_tbl', array('config_prod_id' => $config_prod), true);
				//find the dtl that was not display on transaction		
				$config_dtl_tbl_data_hidden = $this->admin->get_data('config_prod_dtl_tbl', array('config_prod_id' => $config_prod, 'show_on_trans'	=>	2, 'config_prod_dtl_status' =>	1));

				$this->db->trans_start();

				
				//SEARCH THE PROD TRANS IF CONFIG PROD IS EXISTING
				$sql = 'SELECT
							b.config_prod_id,
							b.prod_trans_id
						FROM
							prod_trans_dtl_tbl a
						JOIN prod_trans_tbl b ON a.prod_trans_id = b.prod_trans_id
						WHERE
							prod_trans_dtl_status != 5
						AND b.process_type_id = '.$config_tbl_data->process_type_id.'
						AND YEAR (`a`.`prod_trans_dtl_date`) = '.$year.'
						AND b.commissary_id = '.$commissary_id.'
						AND b.config_prod_id = '.$config_prod.'
						AND b.brand_id = '.$brand_id.'
						GROUP BY
							b.config_prod_id';
				$get_config = $this->admin->get_query($sql, true);
				if($get_config){
					$insert_trans['id'] = $get_config->prod_trans_id;
					//SKIP THE HIDDEN CONFIG AND INSERT THE DISPLAYED CONFIG INTO THE EXISTING TRANSACTION
					goto insert_displayed_trans;

				} else {
					$insert_prod_trans = array(
						'config_prod_id' => $config_prod,
						'prod_id' => $config_tbl_data->prod_id,
						'process_type_id' => $config_tbl_data->process_type_id,
						'component_type_id' => $config_tbl_data->component_type_id,
						'brand_id' => $brand_id,
						'commissary_id' =>$commissary_id,
						'prod_trans_status' => $status,
						'created_by' => $user_id,
						'created_ts' => date_now(),
						'trans_type_id' => 1
					);
					$insert_trans = $this->admin->insert_data('prod_trans_tbl', $insert_prod_trans, true);
				}

				$prod_trans_id = $insert_trans['id'];
				
				//LOOP THE RESULT OF HIDDEN CONFIG
				foreach ($config_dtl_tbl_data_hidden as $row) {
					//LOOP TO INSERT PER MONTH
					for ($i=1; $i <= 12 ; $i++) {
						//$rate_amount = $rate[$i][$count];
						//$cost_amount = $cost[$i][$count];
						$date = $year . '-' .$i.'-01';
						$cost = 0;
						
						$insert_prod_trans_dtl = array(
							'prod_trans_id' => $insert_trans['id'],
							'config_prod_dtl_id' => $row->config_prod_dtl_id,
							'article_id' => $row->article_id,
							'article_type_id' => $row->article_type_id,
							'component_type_id' => $row->component_type_id,
							'unit_id' => $row->unit_id,
							'amount_type_id' => $row->amount_type_id,
							'show_on_trans' => $row->show_on_trans,
							'qty' => $row->config_prod_dtl_qty,
							'rate' => $row->config_prod_dtl_rate,
							'cost' => $cost,
							'initial_cost' => $cost,
							'prod_trans_dtl_date' =>$date,
							'prod_trans_dtl_status' => 1
						);

						
						$this->admin->insert_data('prod_trans_dtl_tbl', $insert_prod_trans_dtl, true);
					}
				}

				insert_displayed_trans:
				$count = 0;
				$cost = clean_data($this->input->post('cost'));
				foreach($id as $row){

					$config_prod_dtl_id = decode($row);

					$sql = 'SELECT
								a.config_prod_dtl_id
							FROM
								prod_trans_dtl_tbl a
							JOIN prod_trans_tbl b ON a.prod_trans_id = b.prod_trans_id
							WHERE
								a.prod_trans_dtl_status != 5
							AND b.prod_trans_status != 5
							AND b.process_type_id = '.$config_tbl_data->process_type_id.'
							AND YEAR (`a`.`prod_trans_dtl_date`) = '.$year.'
							AND b.commissary_id = '.$commissary_id.'
							AND b.brand_id = '.$brand_id.'
							AND a.config_prod_dtl_id = '.$config_prod_dtl_id.'
							GROUP BY
								a.config_prod_dtl_id';
					$get_config_prod = $this->admin->check_query($sql);
					if(!$get_config_prod){
						
						//FIND THE DATA IN THE CONFIG THAT WAS DISPLAYED IN THE TRANSACTION
						$config_dtl_tbl_data = $this->admin->get_data('config_prod_dtl_tbl', array('config_prod_dtl_id' => $config_prod_dtl_id), true);
						for ($i=1; $i <= 12 ; $i++) {
							$month = date('M', strtotime($year.'-'.$i.'-01'));
							$rate_amount = $rate[$month][$count];
							$cost_amount = $cost[$month][$count];
							$date = $year . '-' .$i.'-01';

							
							
							$insert_prod_trans_dtl = array(
								'config_prod_dtl_id' => $config_prod_dtl_id,
								'prod_trans_id' => $insert_trans['id'],
								'article_id' => $config_dtl_tbl_data->article_id,
								'article_type_id' => $config_dtl_tbl_data->article_type_id,
								'component_type_id' => $config_dtl_tbl_data->component_type_id,
								'unit_id' => $config_dtl_tbl_data->unit_id,
								'amount_type_id' => $config_dtl_tbl_data->amount_type_id,
								'show_on_trans' => $config_dtl_tbl_data->show_on_trans,
								'qty'	=> $config_dtl_tbl_data->config_prod_dtl_qty,
								'rate' =>$rate_amount,
								'cost' =>$cost_amount,
								'initial_cost' =>$cost_amount,
								'prod_trans_dtl_date' =>$date,
								'prod_trans_dtl_status' => 1
							);

							
							$this->admin->insert_data('prod_trans_dtl_tbl', $insert_prod_trans_dtl, true);
						}
						$count++;
					} else {
						$msg = '<div class="alert alert-danger">Notice! Already exist material group transaction!</div>';
						$this->session->set_flashdata('message', $msg);
						
						redirect( $load_location );
					}
				}

				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success"><strong>Commissary Production Transaction successfully added.</strong></div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect( $load_location );
					
			}else{
				echo 'Something wrong';
			}
		}
	}

	public function _get_commi_rawmats_cost_on_prod($commissary_id, $article_id, $date, $bc_id=NULL){
		// THIS IS FOR COMMISSARY PRODUCTION COSTING
		$info = $this->_require_login_prod();

		if($bc_id){
			$join = array(
				'prod_trans_tbl b' => 'a.prod_trans_id = b.prod_trans_id',
				'commi_bc_tbl c' => 'b.commissary_id = c.commissary_id'
			);

			$where = array(
				'c.bc_id' 							=> $bc_id,
				'b.prod_trans_status !=' 			=> 5,
				'a.article_id' 						=> $article_id,
				'a.cost >' 							=> 0,
				'YEAR(a.prod_trans_dtl_date)' 		=> $date,
				'a.prod_trans_dtl_status !=' 		=> 5,
				'a.component_type_id'				=> 1,
				'b.process_type_id'					=> 9, //COMMISSARY PRODUCTION
			);
		} else {
			$join = array(
				'prod_trans_tbl b' => 'a.prod_trans_id = b.prod_trans_id'
			);
			$where = array(
				'b.commissary_id' 					=> $commissary_id,
				'b.prod_trans_status !=' 			=> 5,
				'a.article_id' 						=> $article_id,
				'a.cost >' 							=> 0,
				'YEAR(a.prod_trans_dtl_date)' 		=> $date,
				'a.prod_trans_dtl_status !=' 		=> 5,
				'a.component_type_id'				=> 1,
				'b.process_type_id'					=> 9, //COMMISSARY PRODUCTION
			);
		}
		
		
		$check_item_cost = $this->admin->get_join('prod_trans_dtl_tbl a', $join, $row_type=FALSE, $order='a.prod_trans_dtl_date', $group=FALSE, $select = 'a.*, b.process_type_id', $where);

		$item_cost = array();
		if(!empty($check_item_cost)){
			foreach($check_item_cost as $r){
				$item_cost[ date('n', strtotime($r->prod_trans_dtl_date)) ] = $r->cost;
			}
		}
		return $item_cost;
	}

	public function _get_commi_rawmats_cost($commissary_id, $article_id, $date, $bc_id=NULL){ // THIS IS ON SUPPLIER COSTING
		$info = $this->_require_login_prod();

		if($bc_id){
			$join = array(
				'commi_mat_cost_dtl_tbl b' => 'a.commi_mat_cost_id = b.commi_mat_cost_id',
				'commi_bc_tbl c' => 'a.commissary_id = c.commissary_id'
			);
			$where = array(
				'c.bc_id' 								=> $bc_id,
				'a.commi_mat_cost_status !=' 			=> 5,
				'a.material_id' 						=> $article_id,
				'b.commi_mat_cost >' 					=> 0,
				'YEAR(b.commi_mat_cost_date)' 			=> $date,
				'b.commi_mat_cost_dtl_status !=' 		=> 5
			);
		} else {
			$join = array(
				'commi_mat_cost_dtl_tbl b' => 'a.commi_mat_cost_id = b.commi_mat_cost_id'
			);
			$where = array(
				'a.commissary_id' 						=> $commissary_id,
				'a.commi_mat_cost_status !=' 			=> 5,
				'a.material_id' 						=> $article_id,
				'b.commi_mat_cost >' 					=> 0,
				'YEAR(b.commi_mat_cost_date)' 			=> $date,
				'b.commi_mat_cost_dtl_status !=' 		=> 5
			);
		}
		
		$check_item_cost = $this->admin->get_join('commi_mat_cost_tbl a', $join, $row_type=FALSE, $order='b.commi_mat_cost_date', $group=FALSE, $select = 'a.*, b.*', $where);

		$item_cost = array();
		if(!empty($check_item_cost)){
			foreach($check_item_cost as $r){
				$item_cost[ date('n', strtotime($r->commi_mat_cost_date)) ] = $r->commi_mat_cost;
			}
		}
		return $item_cost;
	}

	public function _get_rawmats_cost_on_external($bc_id, $article_id, $year){
		$info = $this->_require_login_prod();

		$check_mat_group = $this->admin->get_data('material_tbl a', array('material_id' => $article_id), true, 'a.material_group_id');
		$material_group_id = 0;
		if(!empty($check_mat_group)){
			$material_group_id = $check_mat_group->material_group_id;
		}
		
		$join = array(
			'ext_prod_trans_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id'
		);
		$where = array(
			'b.bc_id' => $bc_id,
			'b.ext_prod_trans_status !=' => 5,
			'b.material_id' => $article_id,
			'YEAR(a.trans_dtl_date)' => $year,
			'a.ext_prod_trans_dtl_status !=' => 5,
			'a.cost >' => 0
		);
		$check_item_ext = $this->admin->get_join('ext_prod_trans_dtl_tbl a', $join, $row_type=FALSE, $order=false, $group=FALSE, $select = 'a.*', $where);

		$item_cost = array();
		if(!empty($check_item_ext)){
			foreach($check_item_ext as $r){
				$item_cost[ date('n', strtotime($r->trans_dtl_date)) ] = $r->cost;
			}
		}

		return $item_cost;
	}

	public function _find_commi_rawmats_cost($article_type_id=FALSE, $component_type_id=FALSE, $material_id=FALSE, $commissary_id=FALSE, $date=FALSE){
		$get_rawmats_cost = array();
		$cost = array(
			1 => '',
			2 => '',
			3 => '',
			4 => '',
			5 => '',
			6 => '',
			7 => '',
			8 => '',
			9 => '',
			10 => '',
			11 => '',
			12 => ''
		);
		
		if($article_type_id == 1){ //GOODS
			if($component_type_id == 2 || $component_type_id == 5) { //RAW MATERIALS OR PACKAGING
				$get_rawmats_cost = $this->_get_commi_rawmats_cost_on_prod($commissary_id, $material_id, $date);
				if(empty($get_rawmats_cost)){
					$get_rawmats_cost = $this->_get_commi_rawmats_cost($commissary_id, $material_id, $date);
				}
			}
		}
		
		$data = empty($get_rawmats_cost) ? $cost : $get_rawmats_cost;
		return $data;
	}

	public function _find_bom_rawmats_cost_on_commi_prod($article_type_id=FALSE, $component_type_id=FALSE, $material_id=FALSE, $bc_id=FALSE, $date=FALSE){
		$get_rawmats_cost = array();

		$cost = array(
			1 => '',
			2 => '',
			3 => '',
			4 => '',
			5 => '',
			6 => '',
			7 => '',
			8 => '',
			9 => '',
			10 => '',
			11 => '',
			12 => ''
		);
		
		if($article_type_id == 1){ //GOODS
			if($component_type_id == 21) { //COST OF SALES
				$get_rawmats_cost = $this->_get_rawmats_cost_on_external($bc_id, $material_id, $date);
				if(empty($get_rawmats_cost)){
					$get_rawmats_cost = $this->_get_commi_rawmats_cost_on_prod(NULL, $material_id, $date, $bc_id);
				}
			}
		}

		$data = empty($get_rawmats_cost) ? $cost : $get_rawmats_cost;
		
		return $data;
	}

	public function get_commi_prod_trans(){
		
		$info = $this->_require_login_prod();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$prod_trans_dtl_date =clean_data($this->input->post('prod_trans_date'));
			$commissary_id = clean_data(decode($this->input->post('commissary_id')));

			
			$pending_lock_status = $this->_check_lock_commi($commissary_id, false, $prod_trans_dtl_date);
			
			if($prod_trans_dtl_date){
				$join = array(
					'commissary_tbl b' => 'a.commissary_id = b.commissary_id and a.commissary_id ='.$commissary_id,
					'user_tbl c' => 'a.created_by = c.user_id',
					'status_tbl d' => 'd.status_id = a.prod_trans_status and a.prod_trans_status != 5',
					'prod_trans_dtl_tbl e' => 'a.prod_trans_id = e.prod_trans_id and YEAR(e.prod_trans_dtl_date)= '.$prod_trans_dtl_date,
					'material_tbl f' => 'a.prod_id = f.material_id',
					'process_type_tbl g' => 'a.process_type_id = g.process_type_id and g.process_type_id != 5',
					'brand_tbl h' => 'a.brand_id = h.brand_id'
				);
				$get_prod_trans_yearly = $this->admin->get_join('prod_trans_tbl a', $join, FALSE,'f.material_desc ASC', 'a.prod_trans_id');
				$prod_trans = '';
				if($get_prod_trans_yearly){
					foreach($get_prod_trans_yearly as $row){
						if($row->prod_trans_status != 5){
							
							$prod_trans .= '<tr><td class="text-center"><a href="" class="remove-prod-trans" data-id="'.encode($row->prod_trans_id).'" data-commissary_id="'.$commissary_id.'" data-mat_desc="'.encode($row->material_desc).'"><i class="fa fa-remove"></i></a></td>';
						}
						//$cost_sheet_stat = $row->cost_sheet_stat == 1 ? 'PROCESSED' : 'NOT PROCESSED';
						$cost_sheet_stat = $row->cost_sheet_stat == 1 ? time_stamp_display($row->modified_ts).' | PROCESSED' : 'NOT PROCESSED';
						$prod_trans .= '<td>' . $row->process_type_name .'</td>';
						$prod_trans .= '<td>' . $row->material_code.' - '. $row->material_desc .'</td>';
						
						$prod_trans .= '<td>' . $row->user_fname.' '.$row->user_lname .'</td>';
						$prod_trans .= '<td>' . date( 'm/d/Y', strtotime($row->created_ts)) .'</td>';
						$prod_trans .= '<td>' .$cost_sheet_stat.' </td>';
						$prod_trans .= '<td class="text-center"><a href="'.base_url('admin/view-commi-prod-trans/' . encode($row->prod_trans_id).'/'.encode($commissary_id).'/'.encode($row->process_type_id).'/'. encode($prod_trans_dtl_date)).'" class="btn btn-xs btn-success">View</a>&nbsp;&nbsp;<a href="'.base_url('admin/view-commi-cost-sheet/' . encode($row->prod_trans_id).'/'.encode($commissary_id).'/'.encode(date('Y', strtotime($row->prod_trans_dtl_date))).'/'.encode($row->process_type_id).'/'.encode($row->material_id)).'" class="btn btn-xs btn-primary">Cost Sheet</a></td>';
						$prod_trans .= '</tr>';
					}
					$data['prod_trans'] = $prod_trans;
					$data['result'] = 1;
					$data['pending_lock_status'] = $pending_lock_status;
				} else {
					$data['result'] = 1;
					$data['pending_lock_status'] = $pending_lock_status;
				}

			} else {
				$data['result'] = 0;
			}
		}
		echo json_encode($data);
	}

	public function view_commi_prod_trans($id, $commissary_id, $process_type_id, $pick_year){
		$info = $this->_require_login_prod();
		$data['prod_trans_id'] = $id;
		$data['process_type_id'] = $process_type_id;
		$data['commissary_id'] = $commissary_id;
		$data['commissary'] = $this->admin->get_data('commissary_tbl', array('commissary_id' => decode($commissary_id)), true, 'commissary_name');
		$data['title'] = 'Commissary Prod Cost';
		$module_id = 2;			
		
		$prod_trans_id = decode($id);
		$data['year'] = decode($pick_year);

		$data['pending_lock_status'] = $this->_check_lock_commi(decode($commissary_id), false, decode($pick_year));
		
		$sql = 'SELECT
					*
				FROM
					(
						SELECT
							a.*, b.material_code,
							b.material_desc,
							b.material_id,
							d.component_type,
							d.order_base,
							f.amount_type_name,
							g.unit_name,
							h.process_type_id,
							h.config_prod_id,
							i.brand_name,
							j.material_desc as prod_group_name,
							j.material_code as prod_group_code
						FROM
							`prod_trans_dtl_tbl` `a`
						JOIN `material_tbl` `b` ON `a`.`article_id` = `b`.`material_id`
						AND `a`.`article_type_id` = 1
						JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
						JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
						AND `a`.`prod_trans_dtl_status` <> 5 AND `a`.`prod_trans_id` = '.$prod_trans_id.'
						AND `a`.`show_on_trans` = 1 AND `a`.`prod_trans_dtl_status` = 1
						left join `unit_tbl` `g` ON `a`.`unit_id` = `g`.`unit_id`
						JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id`
						JOIN `brand_tbl` `i` ON `h`.`brand_id` = `i`.`brand_id`
						JOIN `material_tbl` `j` ON `h`.`prod_id` = `j`.`material_id`
						UNION ALL
							SELECT
								a.*, b.service_code,
								b.service_desc,
								b.service_code,
								d.component_type,
								d.order_base,
								f.amount_type_name,
								null as unit_name,
								h.process_type_id,
								h.config_prod_id,
								i.brand_name,
								j.material_desc as prod_group_name,
								j.material_code as prod_group_code
							FROM
								`prod_trans_dtl_tbl` `a`
							JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
							AND `a`.`article_type_id` = 2
							JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
							JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
							AND `a`.`prod_trans_dtl_status` <> 5 AND `a`.`prod_trans_id` = '.$prod_trans_id.'
							AND `a`.`show_on_trans` = 1 AND `a`.`prod_trans_dtl_status` = 1
							JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id`
							JOIN `brand_tbl` `i` ON `h`.`brand_id` = `i`.`brand_id`
							JOIN `material_tbl` `j` ON `h`.`prod_id` = `j`.`material_id`
					) z
				group by z.config_prod_dtl_id
				order by z.order_base';
		$data['prod_trans'] = $this->admin->get_query($sql);

		$data['config_prod_id'] = $data['prod_trans'][0]->config_prod_id;
		
		
		$join = array(
			'material_group_tbl b' => 'a.material_group_id = b.material_group_id and a.material_status = 1'
		);
		$data['material'] = $this->admin->get_join('material_tbl a', $join, FALSE,'a.material_desc ASC','a.material_code');
		$data['article_type'] = $this->admin->get_data('article_type_tbl', 'article_type_status=1');
		$data['amount_type'] = $this->admin->get_data('amount_type_tbl', 'amount_type_status=1');

		$filter = array(
			'component_type_status'	=>	1,
			'is_for_commi'			=>	1,
			'component_classification'	=>	1
		);
		$data['mat_component_type'] = $this->admin->get_data('component_type_tbl', $filter);
		$filter = array(
			'component_type_status'	=>	1,
			'is_for_commi'			=>	1,
			'component_classification'	=>	2
		);
		$data['svc_component_type'] = $this->admin->get_data('component_type_tbl', $filter);
		

		$data['content'] = $this->load->view('admin/admin_view_commi_prod_trans_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function resync_commi_prod_trans_dtl($config_prod_id=0, $prod_trans_id=0, $year=null, $commissary_id=null, $process_type_id=null){
		$info = $this->_require_login_prod();

		$config_prod_id = decode($config_prod_id);
		$prod_trans_id = decode($prod_trans_id);
		$year = decode($year);

		//echo $config_prod_id.' | '.$prod_trans_id.' | '.$year;
		//echo 'admin/view-prod-trans/' . encode($prod_trans_id).'/'. $commissary_id .'/' .$process_type_id .'/'. encode($year);
		
		$check_config = $this->admin->get_data('config_prod_dtl_tbl', array('config_prod_id' =>  $config_prod_id));
		if(!empty($check_config)){
			
			foreach($check_config as $row){
				$sync = $this->_auto_add_prod_trans_dtl($row->config_prod_dtl_id, $prod_trans_id, $year, decode($commissary_id));
				$config_prod_id = $row->config_prod_id;
			}

			$sql = "UPDATE prod_trans_dtl_tbl set prod_trans_dtl_status = 5 WHERE prod_trans_id = ".$prod_trans_id." and YEAR(prod_trans_dtl_date) = '".$year."' and config_prod_dtl_id NOT IN (SELECT config_prod_dtl_id FROM config_prod_dtl_tbl where config_prod_id = ".$config_prod_id." and config_prod_dtl_status = 1)";
			$this->db->query($sql);
		}

		if($sync > 0){
			$msg = '<div class="alert alert-success">Config items already synced!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/view-commi-prod-trans/' . encode($prod_trans_id).'/'. $commissary_id .'/' .$process_type_id .'/'. encode($year));
		} else {
			$msg = '<div class="alert alert-danger">No Config item needed to sync!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/view-commi-prod-trans/' . encode($prod_trans_id).'/'. $commissary_id .'/' .$process_type_id .'/'. encode($year));
		}
	}

	public function edit_commi_prod_trans($prod_trans_id, $config_prod_dtl_id, $commissary_id, $year, $process_type_id){
		$info = $this->_require_login_prod();
		$data['prod_trans_id'] = $prod_trans_id;
		$data['config_prod_dtl_id'] = $config_prod_dtl_id;
		$data['commissary_id'] = $commissary_id;
		$data['commissary'] = $this->admin->get_data('commissary_tbl', array('commissary_id' => decode($commissary_id)), true, 'commissary_name');
		$data['year'] = $year;
		$data['process_type_id'] = $process_type_id;
		
		$data['title'] = 'Commissary Prod Cost';
		$module_id = 2;
		$load_location = 'Admin/commi-prod-trans/'.$commissary_id;

		

		$this->_check_lock_commi(decode($commissary_id), false, decode($year), $load_location);

		$prod_trans_id = decode($prod_trans_id);
		$config_prod_dtl_id = decode($config_prod_dtl_id);
		
		$sql = 'SELECT
					*
				FROM
					(
						SELECT
							a.*, b.material_code,
							b.material_desc,
							b.material_id,
							d.component_type,
							f.amount_type_name,
							g.unit_name,
							h.process_type_id,
							j.material_desc as prod_group_name,
							j.material_code as prod_group_code,
							i.brand_name
						FROM
							`prod_trans_dtl_tbl` `a`
						JOIN `material_tbl` `b` ON `a`.`article_id` = `b`.`material_id`
						AND `a`.`article_type_id` = 1
						JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
						JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
						
						AND `a`.`prod_trans_dtl_status` <> 5 AND `a`.`prod_trans_id` = '.$prod_trans_id.' and `a`.`config_prod_dtl_id` = '.$config_prod_dtl_id.'
						left join `unit_tbl` `g` ON `a`.`unit_id` = `g`.`unit_id`
						JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id`
						JOIN `brand_tbl` `i` ON `h`.`brand_id` = `i`.`brand_id`
						JOIN `material_tbl` `j` ON `h`.`prod_id` = `j`.`material_id`
						UNION ALL
							SELECT
								a.*, b.service_code,
								b.service_desc,
								b.service_code,
								d.component_type,
								f.amount_type_name,
								null as unit_name,
								h.process_type_id,
								j.material_desc as prod_group_name,
								j.material_code as prod_group_code,
								i.brand_name
							FROM
								`prod_trans_dtl_tbl` `a`
							JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
							AND `a`.`article_type_id` = 2
							JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
							JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
							AND `a`.`prod_trans_dtl_status` <> 5 AND `a`.`prod_trans_id` = '.$prod_trans_id.' and `a`.`config_prod_dtl_id` = '.$config_prod_dtl_id.'
							JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id`
							JOIN `brand_tbl` `i` ON `h`.`brand_id` = `i`.`brand_id`
							JOIN `material_tbl` `j` ON `h`.`prod_id` = `j`.`material_id`
					) z
				group by z.config_prod_dtl_id';

		$data['prod_trans'] = $this->admin->get_query($sql);

		$data['content'] = $this->load->view('admin/admin_edit_commi_prod_trans_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function update_commi_prod_trans(){
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$commissary_id = clean_data(decode($this->input->post('commissary_id')));
			
			$year = clean_data(decode($this->input->post('year')));
			$process_type_id = clean_data(decode($this->input->post('process_type_id')));
			$prod_trans_id = clean_data(decode($this->input->post('prod_trans_id')));
			

			
			$module_id = 2;
			$load_location = 'Admin/commi-prod-trans/'.encode($commissary_id);

			$this->_check_lock_commi($commissary_id, $load_location, $year);

			if(!empty($commissary_id) && !empty($prod_trans_id)){
				$id = clean_data($this->input->post('config_prod_dtl_id'));
				$rate = clean_data($this->input->post('rate'));
				$cost = clean_data($this->input->post('cost'));
				$article_id = clean_data($this->input->post('article_id'));
				$component_type_id = clean_data($this->input->post('component_type_id'));
				$count = 0;
				$this->db->trans_start();
				foreach($id as $row){

					$config_prod_dtl_id = decode($row);

					$config_dtl_tbl_data = $this->admin->get_data('config_prod_dtl_tbl', array('config_prod_dtl_id' => $config_prod_dtl_id), true);

					//update header transaction
					$update_prod_trans = array(
						'modified_by' => $user_id,
						'modified_ts' => date_now()
					);
					$where = array(
						'prod_trans_id' => $prod_trans_id
					);
					$this->admin->update_data('prod_trans_tbl', $update_prod_trans, $where);

					for ($i=1; $i <= 12 ; $i++) {
						
						$rate_amount = $rate[$i][$count];
						$cost_amount = $cost[$i][$count];


						$date = $year . '-' .$i.'-01';

						$update_prod_trans_dtl = array(
							'rate' =>$rate_amount,
							'cost' =>$cost_amount,
							'initial_cost' =>$cost_amount,
							'qty'	=> @$config_dtl_tbl_data->config_prod_dtl_qty
						); //MUST BE CHANGED TO ALW DYNAMIC

						$where = array(
							'config_prod_dtl_id' => $config_prod_dtl_id,
							'prod_trans_id' => $prod_trans_id,
							'MONTH(prod_trans_dtl_date)' => $i,
							'YEAR(prod_trans_dtl_date)' => $year,
						);
						$this->admin->update_data('prod_trans_dtl_tbl', $update_prod_trans_dtl, $where);
					}
					$count++;
				}

				

				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success"><strong>Production Transaction successfully updated.</strong></div>';
				}
				
				$this->session->set_flashdata('message', $msg);
				redirect('admin/view-commi-prod-trans/' . encode($prod_trans_id) .'/'. encode($commissary_id) .'/'. encode($process_type_id).'/'. encode($year));
			} else {
				echo 'Something wrong on commissary';
			}
		} else{
			echo 'Something wrong';
		}
	}

	public function cancel_commi_prod_trans (){
		/*echo "<pre>";
		print_r($_POST);
		echo "</pre>";
		exit();*/
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);

		$prod_trans_id = clean_data(decode($this->input->post('prod_trans_id')));
		$material_desc = clean_data(decode($this->input->post('material_desc')));
		$commissary_id = clean_data($this->input->post('commissary_id'));
		$trans_status = clean_data($this->input->post('trans_status'));
		
		if($trans_status == 'cancel'){
			$prod_trans_status = 5;
			$status = 'cancelled';
		}

		
		$this->db->trans_start();
		$update_data = array(
			'prod_trans_status' => $prod_trans_status,
			'modified_by' => $user_id,
			'modified_ts' => date_now()
		);
		$where = array(
			'prod_trans_id' => $prod_trans_id,
		);
		$this->admin->update_data('prod_trans_tbl', $update_data, $where);

		$update_data = array(
			'prod_trans_dtl_status' => $prod_trans_status
		);
		$where = array(
			'prod_trans_id' => $prod_trans_id,
		);
		$this->admin->update_data('prod_trans_dtl_tbl', $update_data, $where);

		if($this->db->trans_status() === FALSE){
			$this->db->trans_rollback();
			$msg = '<div class="alert alert-danger">Error please try again!</div>';
		}else{
			$this->db->trans_commit();
			$msg = '<div class="alert alert-success"><strong>Transaction successfully '.$status.'.</strong></div>';
		}
		$this->session->set_flashdata('message', $msg);
		redirect('admin/commi-prod-trans/' . $commissary_id);
	}

	public function copy_commi_prod_trans(){
		$info = $this->_require_login_prod();

		$year_to_copy = clean_data($this->input->post('copy-year-from'));
		$destination_year = clean_data($this->input->post('copy-year-to'));
		$commissary_id = decode(clean_data($this->input->post('commissary_id')));
		$trans_module = decode(clean_data($this->input->post('module')));
		
		
		$process_type_filter = ' and a.process_type_id = 9 ';
		$redirect_url = 'Admin/commi-prod-trans/'.encode($commissary_id);
		$prefix_string = 'Commissary Production Transaction';

		

		$join = array(
			
			'prod_trans_dtl_tbl e' => 'a.prod_trans_id = e.prod_trans_id and YEAR(e.prod_trans_dtl_date)= '.$year_to_copy.' and a.commissary_id ='.$commissary_id. $process_type_filter .' and a.trans_type_id = 1 and a.prod_trans_status = 3'
			
		);
		$get_prod_trans_yearly = $this->admin->get_join('prod_trans_tbl a', $join, FALSE,'a.prod_trans_id ASC', 'e.prod_trans_dtl_id');
		$prod_trans_id = 0;

		

		if(!empty($get_prod_trans_yearly)){
			$hdr_inserted = 0;
			$has_existing_prod = false;
			$bom_summary_arr = array();
			foreach ($get_prod_trans_yearly as $r) {
				if($prod_trans_id != $r->prod_trans_id){

					
					$join = array(
						'prod_trans_dtl_tbl e' => 'a.prod_trans_id = e.prod_trans_id and YEAR(e.prod_trans_dtl_date)= '.$destination_year.' and a.commissary_id ='.$commissary_id.' and a.trans_type_id = 1 and a.prod_trans_status = 3 and a.prod_id = '.$r->prod_id
					);
					$group_by = 'a.prod_id';
					$check_prod_id = $this->admin->check_join('prod_trans_tbl a', $join, true, false, $group_by);

					if($check_prod_id['result']){
						$has_existing_prod = true;
					} else {
						$has_existing_prod = false;
					}

					if (!$has_existing_prod) {
						$insert_prod_trans = array(
							
							'commissary_id' => $r->commissary_id,
							'config_prod_id' => $r->config_prod_id,
							'prod_id' => $r->prod_id,
							'brand_id' => $r->brand_id,
							'process_type_id' => $r->process_type_id,
							'component_type_id' => $r->component_type_id,
							'trans_type_id' => 1,
							'cost_sheet_stat' => $r->cost_sheet_stat,
							'prod_trans_status' => 3,
							'created_by' =>decode($info['user_id']),
							'created_ts' => date_now(),
						);

						$bom_summary_arr[] = array(
							'commissary_id' => $r->commissary_id,
							'prod_id' => $r->prod_id,
							'brand_id' => $r->brand_id,
							'year' => $destination_year
						);

						$insert_trans = $this->admin->insert_data('prod_trans_tbl', $insert_prod_trans, true);
						$hdr_inserted++;
					}
				}

				$new_id = @$insert_trans['id'];
				$new_date = $destination_year.date('-m-d', strtotime($r->prod_trans_dtl_date));

				if (!$has_existing_prod) {
					$insert_prod_trans_dtl = array(
						'prod_trans_id' => $new_id,
						'config_prod_dtl_id' => $r->config_prod_dtl_id,
						'article_id' => $r->article_id,
						'article_type_id' => $r->article_type_id,
						'component_type_id' => $r->component_type_id,
						'unit_id' => $r->unit_id,
						'show_on_trans' => $r->show_on_trans,
						'amount_type_id' => $r->amount_type_id,
						'show_on_trans' => $r->show_on_trans,
						'rate' => $r->rate,
						'qty' => $r->qty,
						'wgt' => $r->wgt,
						'ave_wgt' => $r->ave_wgt,
						'cost' => $r->cost,
						'initial_cost' =>$r->initial_cost,
						'total_cost' => $r->total_cost,
						'prod_trans_dtl_date' =>$new_date,
						'prod_trans_dtl_status' => 1
					);
					$this->admin->insert_data('prod_trans_dtl_tbl', $insert_prod_trans_dtl, true);
				}

				$prod_trans_id = $r->prod_trans_id;
			}
			
			
			

			//$this->compute_bom_material($commissary_id, $year, $material_id, $brand_id);

			$msg = '<div class="alert alert-success"><strong>'.$hdr_inserted.' '.$prefix_string.' of Budget year '.$year_to_copy.' were successfully copied to Budget year '.$destination_year.'.</strong></div>';
			$this->session->set_flashdata('message', $msg);
			redirect( $redirect_url );

		} else {
			$msg = '<div class="alert alert-danger"><strong>'.$prefix_string.' of Budget year '.$year_to_copy.' was not successfully copied to Budget year '.$destination_year.'. No transaction found on Budget Year '.$year_to_copy.'.</strong></div>';
			$this->session->set_flashdata('message', $msg);
			redirect( $redirect_url );
		}
	}

	public function view_commi_cost_sheet($prod_trans_id, $commissary_id, $year, $process_type_id, $mat_id, $company_unit_id=NULL){
		ini_set('max_execution_time', 0);
		ini_set('memory_limit','2048M');
		$info = $this->_require_login_prod();
		$data['prod_trans_id'] = $prod_trans_id;
		$data['process_type_id'] = $process_type_id;
		$prod_trans_id = decode($prod_trans_id);
		$data['commissary_id'] = $commissary_id;
		$data['year'] = $year;
		
		$company_unit_id = decode($company_unit_id);
		$data['title'] = 'Commissary Prod Cost';
		$process_type_id = decode($process_type_id);
		$commissary_id = decode($commissary_id);
		$mat_id = decode($mat_id);
		
		$data['commissary'] = $this->admin->get_data('commissary_tbl', array('commissary_id' => $commissary_id), true, 'commissary_name');

		if($process_type_id == 9){
			$data['cost_sheet'] = $this->commi_cost_sheet_computation($commissary_id, $mat_id, $prod_trans_id, $process_type_id, $year, FALSE, $company_unit_id);
			
			$data['content'] = $this->load->view('admin/admin_view_commi_cost_sheet_content', $data , TRUE);
			$this->load->view('admin/templates', $data);
		}
	}

	public function get_commi_cost_sheet_materials(){
		$info = $this->_require_login_prod();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			
			$commissary_id = decode($this->input->post('commissary_id'));
			$year = $this->input->post('year');
			$cost_sheet_stat = decode($this->input->post('id'));
			$cost_sheet_stat = $cost_sheet_stat == 2 ? NULL : $cost_sheet_stat;

			$where = array(
				'a.cost_sheet_stat' => $cost_sheet_stat,
				'a.prod_trans_status !='=> 5,
				
				'YEAR(c.prod_trans_dtl_date)'=> $year,
				'a.commissary_id'=> $commissary_id
			);
			$join = array(
				'material_tbl b' => 'a.prod_id = b.material_id',
				'prod_trans_dtl_tbl c' => 'a.prod_trans_id = c.prod_trans_id and a.process_type_id IN (9)',
				'process_type_tbl d' => 'a.process_type_id = d.process_type_id'
			);

			$prod_trans = $this->admin->get_join('prod_trans_tbl a', $join, false, 'a.process_type_id', 'a.prod_trans_id', 'a.prod_trans_id, a.prod_id, a.process_type_id, a.created_ts, a.modified_ts, b.material_desc, b.material_code, d.process_type_name, YEAR(c.prod_trans_dtl_date) as tyear', $where);
			if(!empty($prod_trans)){
				$list_materials = '';
				$group = 0;
				foreach($prod_trans as $row){
					if($cost_sheet_stat == 1){
						$modification_time = ' | Modification TS : ' .time_stamp_display($row->modified_ts) ;
					} else {
						$modification_time = ' | Entry TS : ' .time_stamp_display($row->created_ts) ;
					}

					if($group == 0 || $group != $row->process_type_id){
						if($group != 0){
							$list_materials .= '</optgroup>';
						}
						$list_materials .= '<optgroup label="'.$row->process_type_name.'">';
						$list_materials .= '<option value="' . $row->prod_trans_id . '~'.$row->prod_id.'~'.$row->process_type_id.'">'. $row->material_code .' - '. $row->material_desc . $modification_time . '</option>';
					} else {
						$list_materials .= '<option value="' . $row->prod_trans_id . '~'.$row->prod_id.'~'.$row->process_type_id.'">'. $row->material_code .' - '. $row->material_desc . $modification_time . '</option>';
					}

					$group = $row->process_type_id;
				}
				$list_materials .= '</optgroup>';

				$data['result'] = 1;
				$data['info'] = $list_materials;
			} else {
				$data['result'] = 0;
			}

			
			echo json_encode($data);
		}
	}

	public function commi_cost_sheet_batch_computation(){
		$info = $this->_require_login_prod();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$commissary_id = decode($this->input->post('commissary_id'));
			$company_unit_id = decode($this->input->post('company_unit_id'));
			$year = $this->input->post('year');
			$prod_trans_array = $this->input->post('prod_trans');
			
			if(!empty($prod_trans_array)){
				foreach($prod_trans_array as $prod_trans){
					$prod_trans_val = explode('~', $prod_trans);
					$prod_trans_id = decode($prod_trans_val[0]);
					$mat_id = $prod_trans_val[1];
					$process_type_id = $prod_trans_val[2];

					$this->commi_cost_sheet_computation($commissary_id, $mat_id, $prod_trans_id, $process_type_id, encode($year), TRUE, $company_unit_id);
				}
			}
			$msg = '<div class="alert alert-success"><strong>Batch of cost sheet successfully computed.</strong></div>';
			$this->session->set_flashdata('message', $msg);
			
			redirect('admin/commi-prod-trans/' . encode($commissary_id));
		}
	}

	public function commi_cost_sheet_computation($commissary_id, $mat_id, $prod_trans_id, $process_type_id, $year, $no_display=FALSE, $company_unit_id=NULL){
		
		$data['process_type_id'] = $process_type_id;
		$data['prod_trans_id'] = $prod_trans_id;
		//$year = $this->_active_year();
		$year = decode($year);
		
		$commissary = $commissary_id;

		$r = $mat_id;

		$get_mat = $this->admin->get_data('material_tbl', array('material_id' => $mat_id), true, 'IFNULL(material_weight, 0) AS material_weight');
		$material_weight = !empty($get_mat) ? $get_mat->material_weight : 0;

		$get_commi = $this->admin->get_data('commissary_tbl', array('commissary_id' => $commissary_id), true, 'commissary_cost_center_code');
		$commi_cost_center_code = !empty($get_commi) ? $get_commi->commissary_cost_center_code : NULL;
		// $commi_capacity = !empty($get_commi) ? $get_commi->commissary_capacity : 0;

		
		
		
		

		$cost_center_id = 0;
		if($commi_cost_center_code){
			$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $commi_cost_center_code, 'cost_center_status' => 1), TRUE);
			if($check_cost_center['result'] == TRUE){
				$cost_center_id = $check_cost_center['info']->cost_center_id;
			}
		}

		$get_commi_total_opex_per_month = $this->_get_commi_total_opex_per_month($cost_center_id, $year, $commissary_id, $company_unit_id);
		// echo '<pre>';
		// print_r( $get_commi_total_opex_per_month );
		// echo '</pre>';
		// exit;

		$table = '';
		$classification_table = '';
		$cutting_table = '';
		$individual_packaging_table = '';
		$cutsup_packaging_table = '';
		$neckless_table = '';
		for ($i=1; $i <=12 ; $i++) {
			$date = $year.'-'.$i.'-01';
			//echo $date;
			//exit();

			
		
			$prod_id = $mat_id;
			
			
			if($process_type_id == 9){
				$get_prod_det = $this->admin->get_query("SELECT * FROM (SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.qty, b.rate, IF(b.amount_type_id = 2, IF(ISNULL(b.rate),'',FORMAT(b.rate,2)), CONCAT(FORMAT(b.rate,2),'%')) as custom_rate, b.initial_cost as cost, c.material_desc, c.material_code, c.vat_type_id, b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, g.unit_name as mat_det_unit, h.unit_name as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f, unit_tbl g, unit_tbl h
				WHERE  a.prod_id = " . $prod_id . " AND a.commissary_id = " . $commissary . " AND a.prod_trans_status = 3 AND b.prod_trans_dtl_status = 1 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND c.unit_id = g.unit_id AND b.unit_id = h.unit_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_id = '" . $process_type_id . "'
	
					UNION ALL
	
					SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.qty, b.rate, IF(b.amount_type_id = 2, IF(ISNULL(b.rate),'',FORMAT(b.rate,2)), CONCAT(FORMAT(b.rate,2),'%')) as custom_rate, b.initial_cost as cost, c.service_desc, '', 0, b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, '' as mat_det_unit, '' as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.commissary_id = " . $commissary . " AND a.prod_trans_status = 3 AND b.prod_trans_dtl_status = 1 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_id = '" . $process_type_id . "') as a order by a.order_base", false);
					
				
	
				$individual_packaging_table .= '<div class="col-lg-12"><div class="table-responsive">
				<table class="table table-hover table-bordered table-stripe" id="tbl-view-cost-sheet-'.$i.'">
				<thead>
					<tr><th colspan="8" class="text-center">'.date('F Y', strtotime($date)).'</th></tr>
					<tr>
						<th  width="20%">Item Name</th>
						<th  width="auto">Base Unit</th>
						<th  width="auto">Val. Unit</th>
						<th  width="auto">Component Type</th>
						<th  width="auto">Rate</th>
						<th  width="auto">Qty</th>
						
						<th  width="auto">Cost</th>
						<th  width="auto">Amount</th>
					</tr>
				</thead>
				<tbody>';
	
				if(!isset($total_kgs)){$total_kgs=0;}
				if(!isset($total_qty)){$total_qty=0;}
				if(!isset($total_cost_amount)){$total_cost_amount=0;}
				$packaging_total_amt = 0;
				$rawmats_total_amount = 0;
				$packaging_loss_total_amount = 0;
				$toll_fee_internal_total_amount = 0;
				$toll_fee_external_total_amount = 0;
				$finished_goods_total_amount = 0;
				$conversion_cost_total_amount = 0;
				
				
				foreach($get_prod_det as $row_det){
	
					
	
					$components = $row_det->det_component;
					$mat_details = $row_det->material_desc;
					$vat_type_id = $row_det->vat_type_id;
					
					$cost = $row_det->cost;
					if($components == 'RAW MATERIALS' || $components == 'MARINADES'){
	
						$qty = $row_det->qty;
						$kgs = 0;
						$alw = 0;
						$cost = $vat_type_id == 1 ? $row_det->cost/1.12 : $row_det->cost;
						$uom = $row_det->val_unit;
						$material_code = $row_det->material_code;
						$amount = round($qty * $cost, 3);
						$rawmats_total_amount = $rawmats_total_amount + $amount;


						$display_rate = "";
						$display_kgs = "";
						$display_alw = "";
						$display_qty = $qty > 0 ? number_format($qty,3,'.',',') : "";
						$display_cost = $cost > 0 ? number_format($cost,2,'.',',') : "";
						$display_amount = $amount > 0 ? number_format($amount,2,'.',',') : "";

					}elseif($components == "PACKAGING"){
						$qty = $row_det->qty;
						$kgs = 0;
						$alw = 0;
						$cost = $vat_type_id == 1 ? $row_det->cost/1.12 : $row_det->cost;
						$uom = $row_det->val_unit;
						$material_code = $row_det->material_code;
						$amount = round($qty * $cost, 3);
						$packaging_total_amt = $packaging_total_amt + $amount;


						$display_rate = "";
						$display_kgs = "";
						$display_alw = "";
						$display_qty = $qty > 0 ? number_format($qty,3,'.',',') : "";
						$display_cost = $cost > 0 ? number_format($cost,2,'.',',') : "";
						$display_amount = $amount > 0 ? number_format($amount,2,'.',',') : "";
						
					}elseif($components == "PACKAGING LOSS"){
						$qty = 0;
						$kgs = 0;
						$alw = 0;
						$cost = 0;
						$uom = '';
						$material_code = '';
						// $rate = $row_det->rate;
						$rate = amount_type($row_det->rate, $row_det->amount_type);
						$amount = round($rate * $packaging_total_amt, 3);
						$packaging_loss_total_amount = $amount;


						$display_qty = "";
						$display_kgs = "";
						$display_alw = "";
						$display_cost = "";
						$display_rate = $rate > 0 ? $row_det->custom_rate : "";
						$display_amount = $amount > 0 ? number_format($amount,2,'.',',') : "";
						
					}elseif($components == "TOLL FEE - INTERNAL"){

						$qty = $material_weight/1000;
						$cost = $get_commi_total_opex_per_month['commi_cap'][$i] > 0 ?
						( $get_commi_total_opex_per_month['child_opex'][$i] / $get_commi_total_opex_per_month['commi_cap'][$i] ) +
						( $get_commi_total_opex_per_month['mother_opex'][$i] / $get_commi_total_opex_per_month['overall_commi_cap'][$i] ) : 0;
						$amount = $qty * $cost;
						$toll_fee_internal_total_amount = $toll_fee_internal_total_amount + $amount;

						$display_rate = "";
						$display_kgs = "";
						$display_alw = "";
						$display_qty = $qty > 0 ? number_format($qty,3,'.',',') : "";
						$display_cost = $cost > 0 ? number_format($cost,2,'.',',') : "";
						$display_amount = $amount > 0 ? number_format($amount,2,'.',',') : "";
						
					}elseif($components == "TOLL FEE - EXTERNAL"){

						// $qty = $material_weight/1000;
						$qty = 0;
						$cost = $vat_type_id == 1 ? $row_det->cost/1.12 : $row_det->cost;
						$amount = $cost;
						$toll_fee_external_total_amount = $toll_fee_external_total_amount + $amount;

						$display_rate = "";
						$display_kgs = "";
						$display_alw = "";
						$display_qty = $qty > 0 ? number_format($qty,3,'.',',') : "";
						$display_cost = $cost > 0 ? number_format($cost,2,'.',',') : "";
						$display_amount = $amount > 0 ? number_format($amount,2,'.',',') : "";
						
					}elseif($components == "FINISHED GOODS"){
						$finished_goods_total_amount = $rawmats_total_amount + $packaging_total_amt + $packaging_loss_total_amount + $toll_fee_external_total_amount + $toll_fee_internal_total_amount;
						$amount = $finished_goods_total_amount;
						$cost = $amount;

						$display_rate = "";
						$display_qty = "";
						$display_kgs = "";
						$display_alw = "";
						$display_cost = "";
						$display_amount = $amount > 0 ? number_format($amount,2,'.',',') : "";
					}
	
					if($amount > 0){
						if($i == 1){
						}
						$update_data = array(
							
							'cost_sheet_stat' => 1,
							'modified_ts' => date_now()
						);
						$where = array(
							'prod_trans_id' => $row_det->prod_trans_id
						);
						$this->admin->update_data('prod_trans_tbl', $update_data, $where);
	
						$update_data = array(
							'qty' => @$qty,
							'Wgt' => @$kgs,
							'ave_wgt' => @$alw,
							'cost' => @$cost,
							'total_cost' => @$amount
	
						);
						$where = array(
							'prod_trans_dtl_id' => $row_det->prod_trans_dtl_id
						);
						$this->admin->update_data('prod_trans_dtl_tbl', $update_data, $where);
	
						
						$val_unit = $row_det->val_unit;
						$mat_det_unit = $row_det->mat_det_unit;
						$mat_details = $row_det->material_code == '' ? $mat_details : $row_det->material_code.' - '.$mat_details;
	
						
	
						$individual_packaging_table .= "<tr><td>".$mat_details."</td>";
						$individual_packaging_table .= "<td>".$mat_det_unit."</td>";
						$individual_packaging_table .= "<td>".$val_unit."</td>";
						$individual_packaging_table .= "<td>".$row_det->det_component."</td>";
						$individual_packaging_table .= "<td align='right'>". $display_rate ."</td>";
						$individual_packaging_table .= "<td align='right'>". $display_qty ."</td>";
						// $individual_packaging_table .= "<td>". $display_kgs ."</td>";
						// $individual_packaging_table .= "<td>". $display_alw ."</td>";
						$individual_packaging_table .= "<td align='right'>". $display_cost ."</td>";
						$individual_packaging_table .= "<td align='right'>". $display_amount ."</td>";
						$individual_packaging_table .= "</tr>";
					}
				}
	
				
				
			}
		}

		$individual_packaging_table .= '</tbody></table></div></div>';


		if ($process_type_id == 9){
			if($no_display){
				return TRUE;
			} else {
				return $individual_packaging_table;
			}
		} else {
			return FALSE;
		}
		
	}

	public function _get_commi_total_opex_per_month($cost_center_id, $year, $commissary_id, $company_unit_id){
		
		$info = $this->_require_login_prod();
		

		$check_cost_center = $this->admin->check_data('cost_center_tbl', array('company_unit_id' => $company_unit_id, 'cost_center_nat' => 1), TRUE);
		$national_cost_center_id = 0;
		if($check_cost_center['result']){
			$national_cost_center_id = $check_cost_center['info']->cost_center_id;
		}

		
		
		$month = array(
			1 => 0,
			2 => 0,
			3 => 0,
			4 => 0,
			5 => 0,
			6 => 0,
			7 => 0,
			8 => 0,
			9 => 0,
			10 => 0,
			11 => 0,
			12 => 0
		);
		
		$mother_opex = array(
			1 => 0,
			2 => 0,
			3 => 0,
			4 => 0,
			5 => 0,
			6 => 0,
			7 => 0,
			8 => 0,
			9 => 0,
			10 => 0,
			11 => 0,
			12 => 0
		);
		
		$commi_cap = array(
			1 => 0,
			2 => 0,
			3 => 0,
			4 => 0,
			5 => 0,
			6 => 0,
			7 => 0,
			8 => 0,
			9 => 0,
			10 => 0,
			11 => 0,
			12 => 0
		);
		
		$overall_commi_cap = array(
			1 => 0,
			2 => 0,
			3 => 0,
			4 => 0,
			5 => 0,
			6 => 0,
			7 => 0,
			8 => 0,
			9 => 0,
			10 => 0,
			11 => 0,
			12 => 0
		);

		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','2048M');

		$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center_id, 'cost_center_status' => 1), TRUE);
		if($check_cost_center['result'] == TRUE){

			$cost_center_name = $check_cost_center['info']->cost_center_desc;

			$get_commi_opex = $this->get_commi_opex_monthly($cost_center_id, $year, $company_unit_id);
			$get_depreciation = $this->get_commi_total_depreciation_monthly($cost_center_id, $year, $company_unit_id);
			$get_depreciation2 = $this->get_commi_total_depreciation_monthly2($company_unit_id, $year, $cost_center_id);
			
			$get_nat_commi_opex = $this->get_commi_opex_monthly($national_cost_center_id, $year, $company_unit_id);
			$get_nat_depreciation = $this->get_commi_total_depreciation_monthly($national_cost_center_id, $year, $company_unit_id);
			$get_nat_depreciation2 = $this->get_commi_total_depreciation_monthly2($company_unit_id, $year, $national_cost_center_id);
			
			$filter = array(
				'commissary_id' => $commissary_id,
				'YEAR(commi_cap_date)' => $year,
				'commi_cap_status'	=> 1
			);
			$select = 'SUM(commissary_capacity) as commissary_capacity';
			$group_by = 'commi_cap_date';
			$get_commi_cap = $this->admin->get_data('commi_cap_tbl', $filter, false, $select, 'commi_cap_date', $group_by);
			
			$filter = array(
				'YEAR(commi_cap_date)' => $year,
				'commi_cap_status'	=> 1
			);
			$get_overall_commi_cap = $this->admin->get_data('commi_cap_tbl', $filter, false, $select, 'commi_cap_date', $group_by);
			
			
			// OWN COST CENTER EXPENSE
			if(!empty($get_commi_opex)){
				foreach($get_commi_opex as $r){
					$month[1] += $r->jan;
					$month[2] += $r->feb;
					$month[3] += $r->mar;
					$month[4] += $r->apr;
					$month[5] += $r->may;
					$month[6] += $r->jun;
					$month[7] += $r->jul;
					$month[8] += $r->aug;
					$month[9] += $r->sep;
					$month[10] += $r->oct;
					$month[11] += $r->nov;
					$month[12] += $r->december;
				}
			}

			if(!empty($get_depreciation)){
				foreach($get_depreciation as $r){
					$month[1] += $r->jan_amount;
					$month[2] += $r->feb_amount;
					$month[3] += $r->mar_amount;
					$month[4] += $r->apr_amount;
					$month[5] += $r->may_amount;
					$month[6] += $r->jun_amount;
					$month[7] += $r->jul_amount;
					$month[8] += $r->aug_amount;
					$month[9] += $r->sep_amount;
					$month[10] += $r->oct_amount;
					$month[11] += $r->nov_amount;
					$month[12] += $r->december_amount;
				}
			}

			if(!empty($get_depreciation2)){
				$i = 1;
				foreach($get_depreciation2 as $r){
					$month[$i] += $r->depreciation_unit_amount;
					$i++;
				}
			}



			if(!empty($get_nat_commi_opex)){
				foreach($get_nat_commi_opex as $r){
					$mother_opex[1] += $r->jan;
					$mother_opex[2] += $r->feb;
					$mother_opex[3] += $r->mar;
					$mother_opex[4] += $r->apr;
					$mother_opex[5] += $r->may;
					$mother_opex[6] += $r->jun;
					$mother_opex[7] += $r->jul;
					$mother_opex[8] += $r->aug;
					$mother_opex[9] += $r->sep;
					$mother_opex[10] += $r->oct;
					$mother_opex[11] += $r->nov;
					$mother_opex[12] += $r->december;
				}
			}

			if(!empty($get_nat_depreciation)){
				foreach($get_nat_depreciation as $r){
					$mother_opex[1] += $r->jan_amount;
					$mother_opex[2] += $r->feb_amount;
					$mother_opex[3] += $r->mar_amount;
					$mother_opex[4] += $r->apr_amount;
					$mother_opex[5] += $r->may_amount;
					$mother_opex[6] += $r->jun_amount;
					$mother_opex[7] += $r->jul_amount;
					$mother_opex[8] += $r->aug_amount;
					$mother_opex[9] += $r->sep_amount;
					$mother_opex[10] += $r->oct_amount;
					$mother_opex[11] += $r->nov_amount;
					$mother_opex[12] += $r->december_amount;
				}
			}
			if(!empty($get_nat_depreciation2)){
				$i = 1;
				foreach($get_nat_depreciation2 as $r){
					$mother_opex[$i] += $r->depreciation_unit_amount;
					$i++;
				}
			}




			if(!empty($get_commi_cap)){
				$i = 1;
				foreach($get_commi_cap as $r){
					$commi_cap[$i] = $r->commissary_capacity;
					$i++;
				}
			}
			
			if(!empty($get_overall_commi_cap)){
				$i = 1;
				foreach($get_overall_commi_cap as $r){
					$overall_commi_cap[$i] = $r->commissary_capacity;
					$i++;
				}
			}

		}

		$data['child_opex'] = $month;
		$data['mother_opex'] = $mother_opex;
		$data['commi_cap'] = $commi_cap;
		$data['overall_commi_cap'] = $overall_commi_cap;

		return $data;
	}

	public function get_commi_opex_monthly($cost_center_id, $year, $company_unit_id){

		$info = $this->_require_login_prod();

		$designated_tbl = $this->_get_designated_tbl($company_unit_id);

		$join_det = array(
			$designated_tbl->gl_transaction_item_tbl.' b' => 'a.gl_trans_item_id = b.gl_trans_item_id AND b.gl_trans_item_status = 1 AND a.gl_trans_det_status = 1',
			$designated_tbl->gl_transaction_tbl.' c' => 'b.gl_trans_id = c.gl_trans_id AND c.gl_trans_status = 1 AND c.gl_year = ' . $year,
			'cost_center_tbl d' => 'b.cost_center_id = d.cost_center_id AND (d.parent_id = ' . $cost_center_id . ' OR d.cost_center_id = ' . $cost_center_id . ')',
			'gl_subgroup_tbl e' => 'b.gl_sub_id=e.gl_sub_id',
			'gl_group_tbl f' => 'e.gl_group_id = f.gl_group_id'	
		);
		$sql = 'd.cost_center_code, d.cost_center_desc,
		(SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x INNER JOIN '.$designated_tbl->gl_transaction_item_tbl.' y ON x.gl_trans_item_id = y.gl_trans_item_id WHERE b.cost_center_id=y.cost_center_id AND YEAR(x.opex_budget_date)=' . $year . ') as total_qty,
		
		(SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x INNER JOIN '.$designated_tbl->gl_transaction_item_tbl.' y ON x.gl_trans_item_id = y.gl_trans_item_id WHERE b.cost_center_id=y.cost_center_id AND MONTH(x.opex_budget_date)=1 AND YEAR(x.opex_budget_date)=' . $year . ') as jan,
		
		(SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x INNER JOIN '.$designated_tbl->gl_transaction_item_tbl.' y ON x.gl_trans_item_id = y.gl_trans_item_id WHERE b.cost_center_id=y.cost_center_id AND MONTH(opex_budget_date)=2 AND YEAR(x.opex_budget_date)=' . $year . ') as feb,
		
		(SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x INNER JOIN '.$designated_tbl->gl_transaction_item_tbl.' y ON x.gl_trans_item_id = y.gl_trans_item_id WHERE b.cost_center_id=y.cost_center_id AND MONTH(x.opex_budget_date)=3 AND YEAR(x.opex_budget_date)=' . $year . ') as mar,
		
		(SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x INNER JOIN '.$designated_tbl->gl_transaction_item_tbl.' y ON x.gl_trans_item_id = y.gl_trans_item_id WHERE b.cost_center_id=y.cost_center_id AND MONTH(x.opex_budget_date)=4 AND YEAR(x.opex_budget_date)=' . $year . ') as apr,
		
		(SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x INNER JOIN '.$designated_tbl->gl_transaction_item_tbl.' y ON x.gl_trans_item_id = y.gl_trans_item_id WHERE b.cost_center_id=y.cost_center_id AND MONTH(x.opex_budget_date)=5 AND YEAR(x.opex_budget_date)=' . $year . ') as may,
		
		(SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x INNER JOIN '.$designated_tbl->gl_transaction_item_tbl.' y ON x.gl_trans_item_id = y.gl_trans_item_id WHERE b.cost_center_id=y.cost_center_id AND MONTH(x.opex_budget_date)=6 AND YEAR(x.opex_budget_date)=' . $year . ') as jun,
		
		(SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x INNER JOIN '.$designated_tbl->gl_transaction_item_tbl.' y ON x.gl_trans_item_id = y.gl_trans_item_id WHERE b.cost_center_id=y.cost_center_id AND MONTH(x.opex_budget_date)=7 AND YEAR(x.opex_budget_date)=' . $year . ') as jul,
		
		(SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x INNER JOIN '.$designated_tbl->gl_transaction_item_tbl.' y ON x.gl_trans_item_id = y.gl_trans_item_id WHERE b.cost_center_id=y.cost_center_id AND MONTH(x.opex_budget_date)=8 AND YEAR(x.opex_budget_date)=' . $year . ') as aug,
		
		(SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x INNER JOIN '.$designated_tbl->gl_transaction_item_tbl.' y ON x.gl_trans_item_id = y.gl_trans_item_id WHERE b.cost_center_id=y.cost_center_id AND MONTH(x.opex_budget_date)=9 AND YEAR(x.opex_budget_date)=' . $year . ') as sep,
		
		(SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x INNER JOIN '.$designated_tbl->gl_transaction_item_tbl.' y ON x.gl_trans_item_id = y.gl_trans_item_id WHERE b.cost_center_id=y.cost_center_id AND MONTH(x.opex_budget_date)=10 AND YEAR(x.opex_budget_date)=' . $year . ') as oct,
		
		(SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x INNER JOIN '.$designated_tbl->gl_transaction_item_tbl.' y ON x.gl_trans_item_id = y.gl_trans_item_id WHERE b.cost_center_id=y.cost_center_id AND MONTH(x.opex_budget_date)=11 AND YEAR(x.opex_budget_date)=' . $year . ') as nov,
		
		(SELECT SUM(x.opex_amount) FROM '.$designated_tbl->gl_transaction_details_tbl.' x INNER JOIN '.$designated_tbl->gl_transaction_item_tbl.' y ON x.gl_trans_item_id = y.gl_trans_item_id WHERE b.cost_center_id=y.cost_center_id AND MONTH(x.opex_budget_date)=12 AND YEAR(x.opex_budget_date)=' . $year . ') as december';

		
		
		$gl_details = $this->admin->get_join(''.$designated_tbl->gl_transaction_details_tbl.' a', $join_det, FALSE, FALSE, 'd.cost_center_id', $sql);

		return $gl_details;
	}

	public function get_commi_total_depreciation_monthly($cost_center, $year, $company_unit_id){
		$info = $this->_require_login_prod();
		$designated_tbl = $this->_get_designated_tbl($company_unit_id);
		$sql = '
		SELECT
			ax.cost_center_id,
			ax.amount,
			SUM(ax.amount * ax.jan) as jan_amount,
			SUM( (ax.amount * ax.jan) + (ax.amount * ax.feb) ) as feb_amount,
			SUM( (ax.amount * ax.jan) + (ax.amount * ax.feb) + (ax.amount * ax.mar) ) as mar_amount,
			SUM( (ax.amount * ax.jan) + (ax.amount * ax.feb) + (ax.amount * ax.mar) + (ax.amount * ax.apr) ) as apr_amount,
			SUM( (ax.amount * ax.jan) + (ax.amount * ax.feb) + (ax.amount * ax.mar) + (ax.amount * ax.apr) + (ax.amount * ax.may) ) as may_amount,
			SUM( (ax.amount * ax.jan) + (ax.amount * ax.feb) + (ax.amount * ax.mar) + (ax.amount * ax.apr) + (ax.amount * ax.may) + (ax.amount * ax.jun) ) as jun_amount,
			SUM( (ax.amount * ax.jan) + (ax.amount * ax.feb) + (ax.amount * ax.mar) + (ax.amount * ax.apr) + (ax.amount * ax.may) + (ax.amount * ax.jun) + (ax.amount * ax.jul) ) as jul_amount,
			SUM( (ax.amount * ax.jan) + (ax.amount * ax.feb) + (ax.amount * ax.mar) + (ax.amount * ax.apr) + (ax.amount * ax.may) + (ax.amount * ax.jun) + (ax.amount * ax.jul) + (ax.amount * ax.aug) ) as aug_amount,
			SUM( (ax.amount * ax.jan) + (ax.amount * ax.feb) + (ax.amount * ax.mar) + (ax.amount * ax.apr) + (ax.amount * ax.may) + (ax.amount * ax.jun) + (ax.amount * ax.jul) + (ax.amount * ax.aug) + (ax.amount * ax.sep) ) as sep_amount,
			SUM( (ax.amount * ax.jan) + (ax.amount * ax.feb) + (ax.amount * ax.mar) + (ax.amount * ax.apr) + (ax.amount * ax.may) + (ax.amount * ax.jun) + (ax.amount * ax.jul) + (ax.amount * ax.aug) + (ax.amount * ax.sep) + (ax.amount * ax.oct) ) as oct_amount,
			SUM( (ax.amount * ax.jan) + (ax.amount * ax.feb) + (ax.amount * ax.mar) + (ax.amount * ax.apr) + (ax.amount * ax.may) + (ax.amount * ax.jun) + (ax.amount * ax.jul) + (ax.amount * ax.aug) + (ax.amount * ax.sep) + (ax.amount * ax.oct) + (ax.amount * ax.nov) ) as nov_amount,
			SUM( (ax.amount * ax.jan) + (ax.amount * ax.feb) + (ax.amount * ax.mar) + (ax.amount * ax.apr) + (ax.amount * ax.may) + (ax.amount * ax.jun) + (ax.amount * ax.jul) + (ax.amount * ax.aug) + (ax.amount * ax.sep) + (ax.amount * ax.oct) + (ax.amount * ax.nov) + (ax.amount * ax.december) ) as december_amount
		FROM (
			SELECT e.ag_name, d.asg_name as asset_group, f.cost_center_id, f.cost_center_code, f.cost_center_desc, a.ag_trans_budget_year, (b.capex_price / b.capex_lifespan) amount,

			(SELECT x.capex_qty FROM '.$designated_tbl->asset_group_transaction_details_tbl.' x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 1) as jan,

			(SELECT x.capex_qty FROM '.$designated_tbl->asset_group_transaction_details_tbl.' x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 2) as feb,

			(SELECT x.capex_qty FROM '.$designated_tbl->asset_group_transaction_details_tbl.' x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 3) as mar,

			(SELECT x.capex_qty FROM '.$designated_tbl->asset_group_transaction_details_tbl.' x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 4) as apr,

			(SELECT x.capex_qty FROM '.$designated_tbl->asset_group_transaction_details_tbl.' x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 5) as may,

			(SELECT x.capex_qty FROM '.$designated_tbl->asset_group_transaction_details_tbl.' x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 6) as jun,

			(SELECT x.capex_qty FROM '.$designated_tbl->asset_group_transaction_details_tbl.' x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 7) as jul,

			(SELECT x.capex_qty FROM '.$designated_tbl->asset_group_transaction_details_tbl.' x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 8) as aug,

			(SELECT x.capex_qty FROM '.$designated_tbl->asset_group_transaction_details_tbl.' x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 9) as sep,

			(SELECT x.capex_qty FROM '.$designated_tbl->asset_group_transaction_details_tbl.' x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 10) as oct,

			(SELECT x.capex_qty FROM '.$designated_tbl->asset_group_transaction_details_tbl.' x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 11) as nov,

			(SELECT x.capex_qty FROM '.$designated_tbl->asset_group_transaction_details_tbl.' x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 12) as december

			FROM '.$designated_tbl->asset_group_transaction_tbl.' a, '.$designated_tbl->asset_group_transaction_item_tbl.' b, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.ag_trans_id=b.ag_trans_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND g.trans_type_id=1 AND a.ag_trans_status=1 AND b.ag_trans_item_status = 1 AND (f.parent_id=' . $cost_center . ' OR f.cost_center_id = ' . $cost_center . ') AND a.ag_trans_budget_year=' . $year .'
		) AS ax GROUP BY ax.cost_center_id';
		// return $sql;
		$get_depreciation = $this->admin->get_query($sql);

		return $get_depreciation;
	}

	public function get_commi_total_depreciation_monthly2($company_unit_id, $year, $cost_center_id){
		$info = $this->_require_login_prod();
		$designated_tbl = $this->_get_designated_tbl($company_unit_id);
		$sql = '
		SELECT
		z.depreciation_unit_date,
		z.cost_center_id,
		z.cost_center_desc,
		SUM( z.depreciation_unit_amount ) AS depreciation_unit_amount
		FROM
		(
			SELECT d.cost_center_id, d.cost_center_desc, a.depreciation_unit_date, YEAR(a.depreciation_unit_date) as gl_year, SUM(a.depreciation_unit_amount) as depreciation_unit_amount
			FROM '.$designated_tbl->depreciation_unit_tbl.' a, gl_subgroup_tbl b, gl_group_tbl c, cost_center_tbl d WHERE a.gl_sub_id = b.gl_sub_id AND b.gl_group_id = c.gl_group_id AND a.cost_center_id = d.cost_center_id AND c.gl_group_name = "DEPRECIATION EXPENSES" AND depreciation_unit_status = 1 AND a.company_unit_id = ' . $company_unit_id . ' AND a.cost_center_id = '.$cost_center_id.' AND YEAR(a.depreciation_unit_date) = ' . $year . ' GROUP BY a.cost_center_id, a.gl_sub_id, a.depreciation_unit_date ORDER BY a.cost_center_id, a.gl_sub_id, a.depreciation_unit_date ASC
		) as z
		GROUP BY z.depreciation_unit_date, z.cost_center_id';

		// return $sql;
		
		$get_depreciation = $this->admin->get_query( $sql );

		return $get_depreciation;
	}

	public function view_commi_cost_sheet_report($commissary_id, $year, $process_type_id = 9){
		$info = $this->_require_login_prod();
		$data['commissary_id'] = $commissary_id;
		$data['year'] = $year;
		$data['commissary'] = $this->admin->get_data('commissary_tbl', array('commissary_id' => decode($commissary_id)), true, 'commissary_name');
		$data['process_type_id'] = encode($process_type_id);
		$data['title'] = 'List of Cost Sheet';

		$prod_trans = $this->_get_all_commi_cost_sheet($commissary_id, $year);
		
		
		$table = '
		<div class="col-lg-12">
			<div class="table-responsive">
				<table class="table table-hover table-bordered table-stripe nowrap tbl-cost-sheet-report">
					<thead class="bg-primary">
						<tr>
							<th rowspan="2" class="text-center bg-primary">Process Type</th>
							<th rowspan="2" class="text-center bg-primary">Item Name</th>
							<th rowspan="2" class="text-center">Base Unit</th>
							<th rowspan="2" class="text-center">Val Unit</th>
							<th rowspan="2" class="text-center">Component Type</th>';

		for ($i=1; $i <= 12 ; $i++){
			$new_date = $year.'-'.$i.'-01';
			$table .='<th colspan="4" class="text-center">'.date('F Y', strtotime($new_date)).'</th>';
		}
		$table .='<tr>';
		for ($i=1; $i <= 12 ; $i++){
			$table .='<th class="text-center">Rate</th>';
			$table .='<th class="text-center">Qty</th>';
			// $table .='<th class="text-center">Wgt</th>';
			// $table .='<th class="text-center">Ave. Wgt</th>';
			$table .='<th class="text-center">Cost</th>';
			$table .='<th class="text-center">Amount</th>';
		}
		$table .= '</tr></thead><tbody>';
		$new_item = false;
		if(!empty($prod_trans)){
			foreach ($prod_trans as $r) {

				if($r->trans_month == 1){
					if($r->component_type_id == 1){
						$new_item = true;
					}

					if($new_item){
						$added_class = 'bg-info';
						$table .='<tr class="'.$added_class.'"><td class="text-left '.$added_class.'">'.$r->process_type_name.'</td>';
						$table .='<td class="text-left '.$added_class.'">'.$r->material_desc.'</td>';
						$table .='<td class="text-center">'.$r->buom_unit.'</td>';
						$table .='<td class="text-center">'.$r->unit_name.'</td>';
						$table .='<td class="text-left">'.$r->component_type.'</td>';
					} else {
						$added_class = '';
						$table .='<tr><td class="text-center nowrap"> -- '.$r->process_type_name.' </td>';
						$table .='<td class="text-left nowrap">'.$r->material_desc.'</td>';
						$table .='<td class="text-center">'.$r->buom_unit.'</td>';
						$table .='<td class="text-center">'.$r->unit_name.'</td>';
						$table .='<td class="text-left">'.$r->component_type.'</td>';
					}
				}
				$new_item = false;
				$table .='<td class="'.$added_class.' text-right">'.$r->rate.'</td>';
				$table .='<td class="'.$added_class.' text-right">'.decimal_format($r->qty, 4).'</td>';
				// $table .='<td class="'.$added_class.' text-right">'.decimal_format($r->wgt, 2).'</td>';
				// $table .='<td class="'.$added_class.' text-right">'.$r->ave_wgt.'</td>';
				$table .='<td class="'.$added_class.' text-right">'.decimal_format($r->cost, 2).'</td>';
				$table .='<td class="'.$added_class.' text-right">'.decimal_format($r->total_cost, 2).'</td>';

				if($r->trans_month == 12){
					$table.= '</tr>';
				}
			}
		} else {
			$table .='<tr><td class="text-center nowrap" colspan="77"> No data available in table </td></tr>';
		}

		$table .= '</tbody></table></div></div>';

		$data['report'] = $table;
		$data['content'] = $this->load->view('admin/admin_view_commi_cost_sheet_report_content', $data , TRUE);
		$this->load->view('admin/templates', $data);

	}

	public function download_commi_cost_sheet_report($commissary_id, $year, $process_type_id = 1){
		$info = $this->_require_login_prod();
		$data['commissary_id'] = $commissary_id;
		$data['year'] = $year;
		$data['commissary'] = $this->admin->get_data('commissary_tbl', array('commissary_id' => decode($commissary_id)), true, 'commissary_name');
		$data['process_type_id'] = $process_type_id;

		$prod_trans = $this->_get_all_cost_sheet($commissary_id, $year);
		
		$this->load->library('excel');
		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Cost Sheets')
				->setDescription('Cost Sheets');
		
		$spreadsheet->setActiveSheetIndex(0)
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		foreach(range('A','I') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$reportTitle = 'List of All Commissary Processed Cost Sheet of '.$data['commissary']->commissary_name;
		$reportTitle .= "\nRun Date : ".date_now();

		$spreadsheet->getActiveSheet()->getStyle("A2:BA3")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A2:BA3")->applyFromArray($style_info);
		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle)
				->setCellValue("A2",'Process Type')
				->mergeCells('A2:A3')
				->setCellValue("B2","Item Name")
				->mergeCells('B2:B3')
				->setCellValue("C2", "Base Unit")
				->mergeCells('C2:C3')
				->setCellValue("D2", "Val Unit")
				->mergeCells('D2:D3')
				->setCellValue("E2", "Component Type")
				->mergeCells('E2:E3')
				->setCellValue("F2", "January ".$year)
				->mergeCells('F2:I2')

				->setCellValue("J2", "February ".$year)
				->mergeCells('J2:M2')
				->setCellValue("N2", "March ".$year)
				->mergeCells('N2:Q2')
				->setCellValue("R2", "April ".$year)
				->mergeCells('R2:U2')
				->setCellValue("V2", "April ".$year)
				->mergeCells('V2:Y2')
				->setCellValue("Z2", "June ".$year)
				->mergeCells('Z2:AC2')
				->setCellValue("AD2", "July ".$year)
				->mergeCells('AD2:AG2')
				->setCellValue("AH2", "August ".$year)
				->mergeCells('AH2:AK2')
				->setCellValue("AL2", "September ".$year)
				->mergeCells('AL2:AO2')
				->setCellValue("AP2", "October ".$year)
				->mergeCells('AP2:AS2')
				->setCellValue("AT2", "November ".$year)
				->mergeCells('AT2:AW2')
				->setCellValue("AX2", "December ".$year)
				->mergeCells('AX2:BA2');

		

		$col = 5;
		$row = 3;
		for ($i=1; $i <= 12 ; $i++){
			
			$spreadsheet->setActiveSheetIndex(0)
				->setCellValueByColumnAndRow($col++ , $row , 'Rate')
				->setCellValueByColumnAndRow($col++ , $row , 'Qty')
				
				->setCellValueByColumnAndRow($col++ , $row , 'Cost')
				->setCellValueByColumnAndRow($col++ , $row , 'Amount');
		}

		$spreadsheet->getActiveSheet()->getStyle("A2:BA3")->applyFromArray($style_hdr);
		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);

		$prod_trans = $this->_get_all_commi_cost_sheet($commissary_id, $year);
		// Add some data
		$x= 2;
		$count = 0;
		$col = 0;
		$row = 4;
		$new_item = false;
		if(!empty($prod_trans)){
			foreach($prod_trans as $r){
				if($r->trans_month == 1){
					if($r->component_type_id == 1){
						$new_item = true;
					}

					if($new_item){

						$spreadsheet->getActiveSheet()->getStyle("A$row:BA$row")->applyFromArray($style_highlight_row);

						$spreadsheet->setActiveSheetIndex(0)
							->setCellValueByColumnAndRow($col++ , $row , $r->process_type_name)
							->setCellValueByColumnAndRow($col++ , $row , $r->material_desc)
							->setCellValueByColumnAndRow($col++ , $row , $r->buom_unit)
							->setCellValueByColumnAndRow($col++ , $row , $r->unit_name)
							->setCellValueByColumnAndRow($col++ , $row , $r->component_type);
					} else {
						
						$spreadsheet->setActiveSheetIndex(0)
							->setCellValueByColumnAndRow($col++ , $row , '-- '.$r->process_type_name)
							->setCellValueByColumnAndRow($col++ , $row , $r->material_desc)
							->setCellValueByColumnAndRow($col++ , $row , $r->buom_unit)
							->setCellValueByColumnAndRow($col++ , $row , $r->unit_name)
							->setCellValueByColumnAndRow($col++ , $row , $r->component_type);
					}
				}
				$new_item = false;
				
				$spreadsheet->setActiveSheetIndex(0)
					->setCellValueByColumnAndRow($col++ , $row , $r->rate)
					->setCellValueByColumnAndRow($col++ , $row , decimal_format($r->qty, 4))
					// ->setCellValueByColumnAndRow($col++ , $row , decimal_format($r->wgt, 2))
					// ->setCellValueByColumnAndRow($col++ , $row , $r->ave_wgt)
					->setCellValueByColumnAndRow($col++ , $row , decimal_format($r->cost, 2))
					->setCellValueByColumnAndRow($col++ , $row , decimal_format($r->total_cost, 2) );

				if($r->trans_month == 12){
					
					$col = 0;
					$row++;
				}



				//$spreadsheet->getActiveSheet()->getStyle("A$row:BY$row")->applyFromArray($style_data);
				
			}
			$end_row = $row-1;
			$spreadsheet->getActiveSheet()->getStyle("A4:A$end_row")->applyFromArray($style_border);
			$spreadsheet->getActiveSheet()->getStyle("B4:B$end_row")->applyFromArray($style_border_bold);
			$spreadsheet->getActiveSheet()->getStyle("C4:BA$end_row")->applyFromArray($style_border_normal);
			$spreadsheet->getActiveSheet()->getStyle("F4:BA$end_row")->applyFromArray($style_data_right);
		} else {

		}
		
		// Rename worksheet
		$spreadsheet->getActiveSheet()->setTitle('Cost Sheet');

		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Cost - Sheet.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;

	}

	public function _get_all_commi_cost_sheet($commissary_id, $year){
		$info = $this->_require_login_prod();

		$order_by = " z.prod_trans_id,
			z.order_base,
			z.material_code,
			z.trans_month";

		$sql = "SELECT
					*
				FROM
					(
						SELECT
							a.*, b.material_code,
							b.material_desc,
							b.material_id,
							d.component_type,
							d.order_base,
							d.order_base_sales,
							f.amount_type_name,
							g.unit_name,
							i.process_type_id,
							i.process_type_name,
							MONTH (a.prod_trans_dtl_date) AS trans_month,
							j.unit_name as buom_unit,
							k.material_code as fg_mat_code
						FROM
							`prod_trans_dtl_tbl` `a`
						JOIN `material_tbl` `b` ON `a`.`article_id` = `b`.`material_id`
						AND `a`.`article_type_id` = 1
						JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
						JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
							AND `a`.`prod_trans_dtl_status` <> 5
							and YEAR(`a`.`prod_trans_dtl_date`)= ".$year."
						LEFT JOIN `unit_tbl` `g` ON `a`.`unit_id` = `g`.`unit_id`
						JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id` and `h`.`commissary_id` =".decode($commissary_id)." and `h`.`trans_type_id` = 1 and `h`.`prod_trans_status` = 3 and `h`.`cost_sheet_stat` = 1 and h.process_type_id = 9
						JOIN `process_type_tbl` `i` ON `h`.`process_type_id` = `i`.`process_type_id`
						JOIN `unit_tbl` `j` ON `b`.`unit_id` = `j`.`unit_id`
						INNER JOIN `material_tbl` `k` ON `h`.`prod_id` = `k`.`material_id` 
						UNION ALL
							SELECT
								a.*, b.service_id,
								b.service_desc,
								b.service_code,
								d.component_type,
								d.order_base,
								d.order_base_sales,
								f.amount_type_name,
								NULL AS unit_name,
								i.process_type_id,
								i.process_type_name,
								MONTH (a.prod_trans_dtl_date) AS trans_month,
								NULL as buom_unit,
								k.material_code as fg_mat_code
							FROM
								`prod_trans_dtl_tbl` `a`
							JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
							AND `a`.`article_type_id` = 2
							JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
							JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
							AND `a`.`prod_trans_dtl_status` <> 5
							AND YEAR(`a`.`prod_trans_dtl_date`)= ".$year."
							JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id` and `h`.`commissary_id` =".decode($commissary_id)." and `h`.`trans_type_id` = 1 and `h`.`prod_trans_status` = 3 and `h`.`cost_sheet_stat` = 1 and h.process_type_id = 9
							JOIN `process_type_tbl` `i` ON `h`.`process_type_id` = `i`.`process_type_id`
							INNER JOIN `material_tbl` `k` ON `h`.`prod_id` = `k`.`material_id`
					) z ";

		$sql .= "ORDER BY".$order_by;

		
		return $this->admin->get_query($sql);
	}

	

	/*production module*/

	public function production_cost(){

		
		$info = $this->_require_login_prod();
		$join = array(
			'material_tbl b' => 'a.prod_id = b.material_id',
			'user_tbl c' => 'a.created_by = c.user_id',
			'component_type_tbl d' => 'a.component_type_id = d.component_type_id',
			'process_type_tbl e' => 'a.process_type_id = e.process_type_id and e.process_type_id != 5 and a.config_prod_status != 5'
		);
		$data['config_prod'] = $this->admin->get_join('config_prod_tbl a', $join, FALSE,'e.process_type_id, b.material_desc', FALSE);

		$join = array(
			'material_group_tbl b' => 'a.material_group_id = b.material_group_id and a.material_status = 1 and a.material_group_id < 14'
		);
		$data['material'] = $this->admin->get_join('material_tbl a', $join, FALSE,'a.material_desc ASC','a.material_code');

		$data['process_type'] = $this->admin->get_data('process_type_tbl', array('process_type_status'	=>	1, 'process_type_id !='	=>	5));

		$data['component_type'] = $this->admin->get_data('component_type_tbl', array('component_type_status'	=>	1));

		$data['bc'] = $this->admin->get_data('bc_tbl', 'bc_status=1');
		$data['title'] = 'Production Cost';
		$data['content'] = $this->load->view('admin/admin_production_cost_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function add_config_prod(){

		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$prod= $this->input->post('prod_id');
			$process_type_id = decode($this->input->post('process_type_id'));
			$component_type_id = 1;


			if(!empty($prod) && !empty($process_type_id) && !empty($component_type_id)){
				$this->db->trans_start();

				foreach ($prod as $key) {
					$prod_id = clean_data(decode($key));
					//$check_config = $this->admin->check_data('config_prod_tbl', array('prod_id' =>  $prod_id,	'process_type_id'	=>	$process_type_id,	'config_prod_status'	=>	1));
					if($process_type_id != 5){
						$check_config = $this->admin->check_data('config_prod_tbl', array('prod_id' =>  $prod_id,	'process_type_id !='	=>	5,	'config_prod_status'	=>	1));
					} elseif($process_type_id == 5 || $process_type_id == 9) {
						$check_config = $this->admin->check_data('config_prod_tbl', array('prod_id' =>  $prod_id,	'process_type_id'	=>	$process_type_id,	'config_prod_status'	=>	1));
					}
					
					if($check_config == FALSE){
						$set = array(
							'prod_id' => $prod_id,
							'process_type_id' => $process_type_id,
							'component_type_id' => $component_type_id,
							'config_prod_status' => 1,
							'created_by' => $user_id
						);

						$result = $this->admin->insert_data('config_prod_tbl', $set, TRUE);

					}else{
						if($process_type_id != 5){
							$msg = '<div class="alert alert-danger">Error! Production Group already exist!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect('admin/production-cost');
						} else {
							$msg = '<div class="alert alert-danger">Error! Sales BOM already exist!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect('admin/sales-bom');
						}
					}
				}
			}else{
				if($process_type_id != 5){
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/production-cost');
				} else {
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/sales-bom');
				}
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success"><strong>Config successfully added.</strong></div>';
			}
			$this->session->set_flashdata('message', $msg);
			if($process_type_id == 5){
				redirect('admin/sales-bom#prod-group-tab');
			}elseif($process_type_id == 9){
				redirect('admin/commi-production-cost#prod-group-tab');
			}else {
				redirect('admin/production-cost#prod-group-tab');
			}
				
		}else{
			redirect('admin/production-cost');
		}
	}

	public function cancel_config_prod (){
		// echo "<pre>";
		// print_r($_POST);
		// echo "</pre>";
		// exit();
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);

		$config_prod_id = clean_data(decode($this->input->post('config_prod_id')));
		$trans_status = clean_data($this->input->post('trans_status'));
		$process_type_id = clean_data(decode($this->input->post('process_type_id')));
		
		if($trans_status == 'cancel'){
			$trans_status = 5;
			$status = 'cancelled';
		}

		
		$this->db->trans_start();
		$update_data = array(
			'config_prod_status' => $trans_status,
			'modified_by' => $user_id,
			'modified_ts' => date_now()
		);
		$where = array(
			'config_prod_id' => $config_prod_id
		);
		$this->admin->update_data('config_prod_tbl', $update_data, $where);

		$update_data = array(
			'config_prod_dtl_status' => $trans_status
		);
		$where = array(
			'config_prod_id' => $config_prod_id
		);
		$this->admin->update_data('config_prod_dtl_tbl', $update_data, $where);

		if($this->db->trans_status() === FALSE){
			$this->db->trans_rollback();
			$msg = '<div class="alert alert-danger">Error please try again!</div>';
		}else{
			$this->db->trans_commit();
			$msg = '<div class="alert alert-success"><strong>Config successfully '.$status.'.</strong></div>';
		}
		$this->session->set_flashdata('message', $msg);
		if($process_type_id == 5){
			redirect('admin/sales-bom#prod-group-tab');
		} elseif($process_type_id == 9){
			redirect('admin/commi-production-cost#prod-group-tab');
		} else {
			redirect('admin/production-cost#prod-group-tab');
		}
		
	}

	public function view_config_prod($id, $process_type_id){

		$info = $this->_require_login_prod();
		$data['config_prod_id'] = $id;
		$config_prod_id = decode($id);
		$data['process_type_id'] = $process_type_id;
		$sql = 'SELECT
					*
				FROM
					(
						SELECT
							a.*, b.material_code,
							b.material_desc,
							b.material_id,
							c.user_id,
							c.user_fname,
							c.user_lname,
							d.component_type,
							d.order_base,
							f.amount_type_name,
							g.unit_name
						FROM
							`config_prod_dtl_tbl` `a`
						JOIN `material_tbl` `b` ON `a`.`article_id` = `b`.`material_id`
						AND `a`.`article_type_id` = 1
						JOIN `user_tbl` `c` ON `a`.`created_by` = `c`.`user_id`
						JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
						JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
						AND `a`.`config_prod_id` = '.$config_prod_id.'
						left join `unit_tbl` `g` ON `a`.`unit_id` = `g`.`unit_id`
						UNION ALL
							SELECT
								a.*, b.service_code,
								b.service_desc,
								b.service_id,
								c.user_id,
								c.user_fname,
								c.user_lname,
								d.component_type,
								d.order_base,
								f.amount_type_name,
								null as unit_name
							FROM
								`config_prod_dtl_tbl` `a`
							JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
							AND `a`.`article_type_id` = 2
							JOIN `user_tbl` `c` ON `a`.`created_by` = `c`.`user_id`
							JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
							JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
							AND `a`.`config_prod_id` = '.$config_prod_id.'
					) z
				where z.config_prod_dtl_status != 5
				order by z.order_base, z.material_desc';
		$data['config_prod'] = $this->admin->get_query($sql);

		$join = array(
			'material_group_tbl b' => 'a.material_group_id = b.material_group_id and a.material_status = 1'
		);
		$data['material'] = $this->admin->get_join('material_tbl a', $join, FALSE,'a.material_desc ASC','a.material_code');

		$data['article_type'] = $this->admin->get_data('article_type_tbl', 'article_type_status=1');

		$data['component_type'] = $this->admin->get_data('component_type_tbl', array('component_type_status'	=>	1));
		$data['unit'] = $this->admin->get_data('unit_tbl', 'unit_status=1');
		$data['services'] = $this->admin->get_data('services_tbl', 'service_status=1');
		$data['amount_type'] = $this->admin->get_data('amount_type_tbl', 'amount_type_status=1');

		$data['title'] = 'Production Cost';
		$data['content'] = $this->load->view('admin/admin_view_config_prod_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function add_config_prod_dtl(){
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$config_prod_id = decode($this->input->post('config_prod_id'));
			$article = $this->input->post('article_id');
			$article_type_id = decode($this->input->post('article_type_id'));
			$component_type_id = decode($this->input->post('component_type_id'));
			$unit_id = decode($this->input->post('unit_id'));
			$amount_type_id = decode($this->input->post('amount_type_id'));
			$show_on_trans = decode($this->input->post('show_on_trans'));
			$process_type_id = $this->input->post('process_type_id');
			$qty = $this->input->post('qty');
			$rate = $this->input->post('rate');

			
			
			$for_sales_bom_auto_add = decode($this->input->post('for_sales_bom_auto_add'));
			$prod_trans_id = decode($this->input->post('prod_trans_id'));
			$year = $this->input->post('year');
			$bc_id = $this->input->post('bc_id');
			$commissary_id = $this->input->post('commissary_id');

			$redirect = 'admin/view-config-prod/' . encode($config_prod_id).'/'. $process_type_id;
			if(decode($process_type_id) == 9){

				if($article_type_id == 1){
					$rate = 1;
				}
				$redirect = 'admin/view-commi-config-prod/' . encode($config_prod_id).'/'. $process_type_id;
			}

			

			if(!empty($config_prod_id) && !empty($article) && !empty($article_type_id) && !empty($component_type_id) && !empty($amount_type_id)){
				if($for_sales_bom_auto_add != 'auto_add'){
					$this->db->trans_start();
				}
				foreach ($article as $key) {
					$article_id = clean_data(decode($key));
					if($article_type_id == 1){
						$join = array(
							'material_unit_tbl b' => 'a.material_id = b.material_id and a.material_id ='.$article_id.' and a.material_status = 1',
						);
						$material_unit_checking = $this->admin->check_join('material_tbl a', $join, TRUE);
						if($material_unit_checking['result']){
							$valuation_unit = $material_unit_checking['info']->valuation_unit;
						} else {
							$valuation_unit = NULL;
						}
					} else {
						$valuation_unit = NULL;
					}
					
					//IF ITEM IS COST OF SALES OR SALES REVENUE, CHECK THE ITEM ID AND THE COMPONENDT ID IF EXISTING
					if($component_type_id == 21 || $component_type_id == 20){
						$check_config_dtl = $this->admin->check_data('config_prod_dtl_tbl', array('article_id' =>  $article_id,	'article_type_id'	=>	$article_type_id,	'config_prod_dtl_status !='	=>	5,	'config_prod_id'	=> $config_prod_id, 'component_type_id'	=>	$component_type_id));

						
						if($check_config_dtl == FALSE){
							$set = array(
								
								'config_prod_id' => $config_prod_id,
								'article_id' => $article_id,
								'article_type_id' => $article_type_id,
								'component_type_id' => strtoupper($component_type_id),
								'unit_id' => $valuation_unit,// serves now the valuation unit
								'amount_type_id' => $amount_type_id,
								'config_prod_dtl_status' => 1,
								'show_on_trans' => $show_on_trans,
								'config_prod_dtl_qty' => $qty,
								'config_prod_dtl_rate' => $rate,
								'created_by' => $user_id
							);

							$result = $this->admin->insert_data('config_prod_dtl_tbl', $set, TRUE);

							if($for_sales_bom_auto_add == 'auto_add'){
								if($result['result']){
									$this->_auto_add_prod_trans_dtl($result['id'], $prod_trans_id, decode($year), decode($commissary_id));
									$sql = "UPDATE prod_trans_dtl_tbl set prod_trans_dtl_status = 5 WHERE prod_trans_id = ".$prod_trans_id." and YEAR(prod_trans_dtl_date) = '".decode($year)."' and config_prod_dtl_id NOT IN (SELECT config_prod_dtl_id FROM config_prod_dtl_tbl where config_prod_id = ".$config_prod_id." and config_prod_dtl_status = 1)";
									$this->db->query($sql);
	
									$msg = '<div class="alert alert-success"><strong>Config successfully added.</strong></div>';
									$this->session->set_flashdata('message', $msg);
									$custom_redirect = 'admin/view-prod-trans/' . encode($prod_trans_id).'/'. $bc_id .'/' .$process_type_id .'/'. $year;
									if($commissary_id){
										$custom_redirect = 'admin/view-commi-prod-trans/' . encode($prod_trans_id).'/'. $commissary_id .'/' .$process_type_id .'/'. $year;
									}
									redirect( $custom_redirect );
								}
							}

						}else{
							if($for_sales_bom_auto_add == 'auto_add'){

								$msg = '<div class="alert alert-danger">Error! Config item already exist! Please re-sync config</div>';
								$this->session->set_flashdata('message', $msg);
								$custom_redirect = 'admin/view-prod-trans/' . encode($prod_trans_id).'/'. $bc_id .'/' .$process_type_id .'/'. $year;
								if($commissary_id){
									$custom_redirect = 'admin/view-commi-prod-trans/' . encode($prod_trans_id).'/'. $commissary_id .'/' .$process_type_id .'/'. $year;
								}
								redirect( $custom_redirect );
							}

							$msg = '<div class="alert alert-danger">Error! Config item already exist!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect( $redirect );
						}
					} else {
						$check_config_dtl = $this->admin->check_data('config_prod_dtl_tbl', array('article_id' =>  $article_id,	'article_type_id'	=>	$article_type_id,	'config_prod_dtl_status !='	=>	5,	'config_prod_id'	=> $config_prod_id));

						
						if($check_config_dtl == FALSE){
							$set = array(
								
								'config_prod_id' => $config_prod_id,
								'article_id' => $article_id,
								'article_type_id' => $article_type_id,
								'component_type_id' => strtoupper($component_type_id),
								'unit_id' => $valuation_unit,// serves now the valuation unit
								'amount_type_id' => $amount_type_id,
								'config_prod_dtl_status' => 1,
								'show_on_trans' => $show_on_trans,
								'config_prod_dtl_qty' => $qty,
								'config_prod_dtl_rate' => $rate,
								'created_by' => $user_id
							);

							$result = $this->admin->insert_data('config_prod_dtl_tbl', $set, TRUE);

							if($for_sales_bom_auto_add == 'auto_add'){

								if($result['result']){
									$this->_auto_add_prod_trans_dtl($result['id'], $prod_trans_id, decode($year), decode($commissary_id));

									$sql = "UPDATE prod_trans_dtl_tbl set prod_trans_dtl_status = 5 WHERE prod_trans_id = ".$prod_trans_id." and YEAR(prod_trans_dtl_date) = '".decode($year)."' and config_prod_dtl_id NOT IN (SELECT config_prod_dtl_id FROM config_prod_dtl_tbl where config_prod_id = ".$config_prod_id." and config_prod_dtl_status = 1)";
									$this->db->query($sql);

									$custom_redirect = 'admin/view-prod-trans/' . encode($prod_trans_id).'/'. $bc_id .'/' .$process_type_id .'/'. $year;
									if($commissary_id){
										$custom_redirect = 'admin/view-commi-prod-trans/' . encode($prod_trans_id).'/'. $commissary_id .'/' .$process_type_id .'/'. $year;
									}
	
									$msg = '<div class="alert alert-success"><strong>Config successfully added.</strong></div>';
									$this->session->set_flashdata('message', $msg);
									redirect( $custom_redirect );
								
								}
							}

						}else{
							if($for_sales_bom_auto_add == 'auto_add'){
								
								$msg = '<div class="alert alert-danger">Error! Config item already exist! Please re-sync config</div>';
								$this->session->set_flashdata('message', $msg);
								$custom_redirect = 'admin/view-prod-trans/' . encode($prod_trans_id).'/'. $bc_id .'/' .$process_type_id .'/'. $year;
								if($commissary_id){
									$custom_redirect = 'admin/view-commi-prod-trans/' . encode($prod_trans_id).'/'. $commissary_id .'/' .$process_type_id .'/'. $year;
								}
								redirect( $custom_redirect );
							}

							$msg = '<div class="alert alert-danger">Error! Config item already exist!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect( $redirect	);
						}
					}
						
				}
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect($redirect);
			}
			
			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success"><strong>Config successfully added.</strong></div>';
			}			
			$this->session->set_flashdata('message', $msg);
			redirect($redirect);
		}else{
			redirect('admin/production_cost');
		}
	}

	public function upload_config_prod_dtl(){
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$this->load->library('excel');
			ini_set('max_execution_time', 0); 
			ini_set('memory_limit','2048M');
			$path = 'assets/Production-Config-items/';
			if (!is_dir($path)) {
			    mkdir($path, 0777, TRUE);
			}

			$temp_code = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 10);

			$config['upload_path']   = $path;
	        $config['allowed_types'] = 'xls|xlsx|xlsb';
	        $config['file_name'] = 'tmp_' . $temp_code;
	        $this->load->library('upload', $config);

			if (! $this->upload->do_upload('prod_config_file')) {
	            $error = array('error' => $this->upload->display_errors());
	            $msg = $this->upload->display_errors();
	            $this->session->set_flashdata('message', $msg);
	            redirect($_SERVER['HTTP_REFERER']);
	        }else{
				$data = array('upload_data' => $this->upload->data());
		        $file_name = $data['upload_data']['file_name'];
				$file = $path . $file_name;

		    	$this->db->trans_start();
				$objPHPExcel = PHPExcel_IOFactory::load($file);
				//get only the Cell Collection
				$cell_collection = $objPHPExcel->getActiveSheet()->getCellCollection();
			
				$high = $objPHPExcel->getActiveSheet()->getHighestRow();
				$exist_count = 1;
				$added_success_count = 0;
				$updated_success_count = 0;

				$config_prod_id = decode($this->input->post('config_prod_id'));
				$process_type_id = $this->input->post('process_type_id');

				// $redirect = 'admin/view-config-prod/' . encode($config_prod_id).'/'. $process_type_id;
				// if(decode($process_type_id) == 9){

				// 	if($article_type_id == 1){
				// 		$rate = 1;
				// 	}
				// 	$redirect = 'admin/view-commi-config-prod/' . encode($config_prod_id).'/'. $process_type_id;
				// }

				$msg_article = '';
				$msg_component_type = '';
				$msg_amount_type = '';
				$msg_article_type = '';
				$msg_show_on_trans = '';

				for($a = 3; $a <= $high; $a++){
					
					$config_type = $objPHPExcel->getActiveSheet()->getCell('A' . $a)->getValue();
					$component_type = $objPHPExcel->getActiveSheet()->getCell('B' . $a)->getValue();
					$material_code = $objPHPExcel->getActiveSheet()->getCell('C' . $a)->getValue();
					$material_desc = $objPHPExcel->getActiveSheet()->getCell('D' . $a)->getValue();
					$config_prod_dtl_qty = $objPHPExcel->getActiveSheet()->getCell('E' . $a)->getValue();
					$amount_type = $objPHPExcel->getActiveSheet()->getCell('F' . $a)->getValue();
					$config_prod_dtl_rate = $objPHPExcel->getActiveSheet()->getCell('G' . $a)->getValue();
					$show_on_trans = $objPHPExcel->getActiveSheet()->getCell('H' . $a)->getValue();

					if(!empty($config_type)){

						$article_type_id = ($config_type == 'SERVICES' ? 2 : ($config_type == 'MATERIALS' ? 1 : NULL));
						if($article_type_id !== NULL){
							$msg_article_type .= '';
						} else {
							$msg_article_type .= '<div class="alert alert-danger">Error! Config type : '.$config_type.' in Line #: ' . $a . ' does not exist!</div>';
							goto bottom_loop;
						}
	
						$show_on_trans = ($show_on_trans == 'YES' ? 1 : ($show_on_trans == 'NO' ? 2 : NULL));
						if($show_on_trans !== NULL){
							$msg_show_on_trans .= '';
						} else {
							$msg_show_on_trans .= '<div class="alert alert-danger">Error! Show on Transaction : '.$show_on_trans.' in Line #: ' . $a . ' does not exist!</div>';
							goto bottom_loop;
						}
	
						$check_amount_type = $this->admin->check_data('amount_type_tbl', array('amount_type_name' =>  $amount_type,	'amount_type_status'	=>	1), TRUE);
						$amount_type_id = $check_amount_type['result'] ? $check_amount_type['info']->amount_type_id : NULL ;
						if($amount_type_id !== NULL){
							$msg_amount_type .= '';
						} else {
							$msg_amount_type .= '<div class="alert alert-danger">Error! Amount type : '.$amount_type.' in Line #: ' . $a . ' does not exist!</div>';
							goto bottom_loop;
						}
	
						$filter = array('component_type' =>  $component_type,	'component_type_status'	=>	1);
						if(decode($process_type_id) == 9){
							$filter['is_for_commi'] = 1;
						}
						$check_component_type = $this->admin->check_data('component_type_tbl', $filter, TRUE);
						$component_type_id = $check_component_type['result'] ? $check_component_type['info']->component_type_id : NULL ;
						if($component_type_id !== NULL){
							$msg_component_type .= '';
						} else {
							$msg_component_type .= '<div class="alert alert-danger">Error! Component type : '.$component_type.' in Line #: ' . $a . ' does not exist!</div>';
							goto bottom_loop;
						}
	
						
						if($article_type_id == 1){
							$check_material = $this->admin->check_data('material_tbl', array('material_code' =>  $material_code,	'material_status'	=>	1), TRUE);
							$article_id = $check_material['result'] ? $check_material['info']->material_id : NULL;
						} else if($article_type_id == 2){
							$check_material = $this->admin->check_data('services_tbl', array('service_desc' =>  $material_desc,	'service_status'	=>	1), TRUE);
							$article_id = $check_material['result'] ? $check_material['info']->service_id : NULL;
						}
	
						if($article_id !== NULL){
							$msg_article .= '';
						} else {
							$msg_article .= '<div class="alert alert-danger">Error! Item : '.$material_desc.' in Line #: ' . $a . ' does not exist!</div>';
							goto bottom_loop;
						}
	
						
	
						if($article_type_id == 1){
							$join = array(
								'material_unit_tbl b' => 'a.material_id = b.material_id and a.material_id ='.$article_id.' and a.material_status = 1',
							);
							$material_unit_checking = $this->admin->check_join('material_tbl a', $join, TRUE);
							if($material_unit_checking['result']){
								$valuation_unit = $material_unit_checking['info']->valuation_unit;
							} else {
								$valuation_unit = NULL;
							}
						} else {
							$valuation_unit = NULL;
						}
						
						
						//IF ITEM IS COST OF SALES OR SALES REVENUE, CHECK THE ITEM ID AND THE COMPONENDT ID IF EXISTING
						if($component_type_id == 21 || $component_type_id == 20){
							$check_config_dtl = $this->admin->check_data('config_prod_dtl_tbl', array('article_id' =>  $article_id,	'article_type_id'	=>	$article_type_id,	'config_prod_dtl_status !='	=>	5,	'config_prod_id'	=> $config_prod_id, 'component_type_id'	=>	$component_type_id));
	
							
							if($check_config_dtl == FALSE){
								$set = array(
									
									'config_prod_id' => $config_prod_id,
									'article_id' => $article_id,
									'article_type_id' => $article_type_id,
									'component_type_id' => $component_type_id,
									'unit_id' => $valuation_unit,// serves now the valuation unit
									'amount_type_id' => $amount_type_id,
									'config_prod_dtl_status' => 1,
									'show_on_trans' => $show_on_trans,
									'config_prod_dtl_qty' => $config_prod_dtl_qty,
									'config_prod_dtl_rate' => $config_prod_dtl_rate,
									'created_by' => $user_id
								);
	
								$result = $this->admin->insert_data('config_prod_dtl_tbl', $set, TRUE);
								$added_success_count++;
	
	
							}else{
	
								// UPDATE EXISTING CONNFIG
								$set = array(
									
									'config_prod_id' => $config_prod_id,
									'article_id' => $article_id,
									'article_type_id' => $article_type_id,
									'component_type_id' => strtoupper($component_type_id),
									'unit_id' => $valuation_unit,// serves now the valuation unit
									'amount_type_id' => $amount_type_id,
									'show_on_trans' => $show_on_trans,
									'config_prod_dtl_qty' => $config_prod_dtl_qty,
									'config_prod_dtl_rate' => $config_prod_dtl_rate,
									'created_by' => $user_id
								);
								$where = array(
									'config_prod_dtl_id'	=> $check_config_dtl['info']->config_prod_dtl_id
								);
	
								$result = $this->admin->update_data('config_prod_dtl_tbl', $set, $where);
								$updated_success_count++;
	
								// $msg = '<div class="alert alert-danger">Error! Config item already exist!</div>';
								// $this->session->set_flashdata('message', $msg);
								// redirect( $redirect );
							}
						} else {
							$check_config_dtl = $this->admin->check_data('config_prod_dtl_tbl', array('article_id' =>  $article_id,	'article_type_id'	=>	$article_type_id,	'config_prod_dtl_status !='	=>	5,	'config_prod_id'	=> $config_prod_id), TRUE);
	
							
							if($check_config_dtl['result'] == FALSE){
								$set = array(
									
									'config_prod_id' => $config_prod_id,
									'article_id' => $article_id,
									'article_type_id' => $article_type_id,
									'component_type_id' => strtoupper($component_type_id),
									'unit_id' => $valuation_unit,// serves now the valuation unit
									'amount_type_id' => $amount_type_id,
									'config_prod_dtl_status' => 1,
									'show_on_trans' => $show_on_trans,
									'config_prod_dtl_qty' => $config_prod_dtl_qty,
									'config_prod_dtl_rate' => $config_prod_dtl_rate,
									'created_by' => $user_id
								);
	
								$result = $this->admin->insert_data('config_prod_dtl_tbl', $set, TRUE);
	
								$added_success_count++;
	
							}else{
								// UPDATE EXISTING CONNFIG
								$set = array(
									
									'config_prod_id' => $config_prod_id,
									'article_id' => $article_id,
									'article_type_id' => $article_type_id,
									'component_type_id' => strtoupper($component_type_id),
									'unit_id' => $valuation_unit,// serves now the valuation unit
									'amount_type_id' => $amount_type_id,
									'show_on_trans' => $show_on_trans,
									'config_prod_dtl_qty' => $config_prod_dtl_qty,
									'config_prod_dtl_rate' => $config_prod_dtl_rate,
									'created_by' => $user_id
								);
								$where = array(
									'config_prod_dtl_id'	=> $check_config_dtl['info']->config_prod_dtl_id
								);
	
								$result = $this->admin->update_data('config_prod_dtl_tbl', $set, $where);
								$updated_success_count++;
	
								// $msg = '<div class="alert alert-danger">Error! Config item already exist!</div>';
								// $this->session->set_flashdata('message', $msg);
								// redirect( $redirect	);
							}
						}

						bottom_loop:
	
						$exist_count++;
					}else {
						$a = $high + 1;
					}

				}

				$total_count = $exist_count - 1;

				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}else{
					$this->db->trans_commit();
					$msg = '';

					$error_msg = $msg_article.$msg_component_type.$msg_amount_type.$msg_article_type.$msg_show_on_trans;
					if($error_msg){
						$msg .= $error_msg;
					}

					if($added_success_count > 0){
						$msg .= '<div class="alert alert-success">Total of ' . $added_success_count . ' out of ' . $total_count . ' config items successfully added!</div>';
					}
					if($updated_success_count > 0){
						$msg .= '<div class="alert alert-success">Total of ' . $updated_success_count . ' out of ' . $total_count . ' config items successfully updated!</div>';
					}

					$this->session->set_flashdata('message', $msg);
					redirect($_SERVER['HTTP_REFERER']);
				}
			}
		}else{
			$msg = '<div class="alert alert-success">Error please try again!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect($_SERVER['HTTP_REFERER']);
		}
	}

	public function _get_config_item_details($commi_prod){

		if($commi_prod == 1){
			
			$sql = "SELECT
				* 
			FROM
				(
					
					SELECT
						'FINISHED GOODS' AS config_type,
						a.material_code AS item_code,
						a.material_desc as item_name,
						b.material_group_name as item_group
					FROM
						material_tbl a
						INNER JOIN material_group_tbl b ON a.material_group_id = b.material_group_id 
					WHERE
						a.material_group_id NOT IN ( 14, 16, 17, 18, 19 ) 
						AND a.material_status = 1 
					UNION ALL
					
					SELECT
						'RAW MATERIALS' AS config_type,
						a.material_code AS item_code,
						a.material_desc as item_name,
						b.material_group_name as item_group
					FROM
						material_tbl a
						INNER JOIN material_group_tbl b ON a.material_group_id = b.material_group_id 
					WHERE
						a.material_group_id NOT IN ( 14, 16, 17, 18, 19 ) 
						AND a.material_status = 1 
					
					UNION ALL
					
					SELECT
						'PACKAGING' AS config_type,
						a.material_code AS item_code,
						a.material_desc as item_name,
						b.material_group_name as item_group
					FROM
						material_tbl a
						INNER JOIN material_group_tbl b ON a.material_group_id = b.material_group_id 
					WHERE
						a.material_group_id = 16 
						AND a.material_status = 1
						
					UNION ALL
					
					SELECT
						'MARINADES' AS config_type,
						a.material_code AS item_code,
						a.material_desc as item_name,
						b.material_group_name as item_group
					FROM
						material_tbl a
						INNER JOIN material_group_tbl b ON a.material_group_id = b.material_group_id 
					WHERE
						a.material_group_id = 16 
						AND a.material_status = 1
						
					UNION ALL
					
					SELECT
						'PACKAGING LOSS' AS 'Config Type',
						a.service_code AS 'Item Code',
						a.service_desc as 'Item Name',
						b.service_group_name as 'Item Group'
					FROM
						services_tbl a
						INNER JOIN services_group_tbl b ON a.service_group_id = b.service_group_id 
					WHERE
						a.service_group_id = 8
						AND a.service_status = 1
						
					UNION ALL
					
					SELECT
						'TOLL FEE - INTERNAL' AS 'Config Type',
						a.service_code AS 'Item Code',
						a.service_desc as 'Item Name',
						b.service_group_name as 'Item Group'
					FROM
						services_tbl a
						INNER JOIN services_group_tbl b ON a.service_group_id = b.service_group_id 
					WHERE
						a.service_group_id = 9
						AND a.service_status = 1 
						
					UNION ALL
					
					SELECT
						'TOLL FEE - EXTERNAL' AS 'Config Type',
						a.service_code AS 'Item Code',
						a.service_desc as 'Item Name',
						b.service_group_name as 'Item Group'
					FROM
						services_tbl a
						INNER JOIN services_group_tbl b ON a.service_group_id = b.service_group_id 
					WHERE
						a.service_group_id = 10
						AND a.service_status = 1
				
				) a";
		} else {
			$sql = "SELECT
				* 
			FROM
				(
					
					SELECT
						'SALES REVENUE' AS config_type,
						a.material_code AS item_code,
						a.material_desc as item_name,
						b.material_group_name as item_group
					FROM
						material_tbl a
						INNER JOIN material_group_tbl b ON a.material_group_id = b.material_group_id 
					WHERE
						a.material_group_id NOT IN ( 14, 16, 17, 18, 19 ) 
						AND a.material_status = 1

					UNION ALL
					SELECT
						'COST OF SALES' AS config_type,
						a.material_code AS item_code,
						a.material_desc as item_name,
						b.material_group_name as item_group
					FROM
						material_tbl a
						INNER JOIN material_group_tbl b ON a.material_group_id = b.material_group_id 
					WHERE
						a.material_group_id NOT IN ( 14, 16, 17, 18, 19 ) 
						AND a.material_status = 1

					UNION ALL
					SELECT
						'DO-VARIABLE' AS config_type,
						a.material_code AS item_code,
						a.material_desc as item_name,
						b.material_group_name as item_group
					FROM
						material_tbl a
						INNER JOIN material_group_tbl b ON a.material_group_id = b.material_group_id 
					WHERE
						a.material_group_id NOT IN ( 14, 16, 17, 18, 19 ) 
						AND a.material_status = 1
						
					UNION ALL
					SELECT
						'DO-FACTORY SUPPLIES-VARIABLE' AS config_type,
						a.material_code AS item_code,
						a.material_desc as item_name,
						b.material_group_name as item_group
					FROM
						material_tbl a
						INNER JOIN material_group_tbl b ON a.material_group_id = b.material_group_id 
					WHERE
						a.material_group_id = 18
						AND a.material_status = 1
						
					UNION ALL
					SELECT
						'DO-PACKAGING SUPPLIES' AS config_type,
						a.material_code AS item_code,
						a.material_desc as item_name,
						b.material_group_name as item_group
					FROM
						material_tbl a
						INNER JOIN material_group_tbl b ON a.material_group_id = b.material_group_id 
					WHERE
						a.material_group_id = 19
						AND a.material_status = 1
						
					UNION ALL
					SELECT
						b.service_group_name AS 'Config Type',
						a.service_code AS 'Item Code',
						a.service_desc as 'Item Name',
						b.service_group_name as 'Item Group'
					FROM
						services_tbl a
						INNER JOIN services_group_tbl b ON a.service_group_id = b.service_group_id 
					WHERE
						a.service_group_id IN (8, 9, 10)
						AND a.service_status = 1
				
				) a";
		}

		return $this->admin->get_query($sql);
	}

	public function download_prod_config_guide($commi_prod=1){
		$info = $this->_require_login_prod();
		
		
		$configs = $this->_get_config_item_details($commi_prod);
		
		
		$this->load->library('excel');
		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Production Config Details')
				->setDescription('Production Config Details');
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_left = array(
			
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		
		$spreadsheet->setActiveSheetIndex(0)
				->setTitle("Config Details")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(false);

		$reportTitle = 'Config Details';
		$reportTitle .= "\nRun Date : ".date_now();

		$spreadsheet->getActiveSheet()->getStyle("A1:D1")->applyFromArray($style_border);
		// $spreadsheet->getActiveSheet()->getStyle("A2:H2")->applyFromArray($style_info);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle);


		$spreadsheet->getActiveSheet()->setCellValue('A1', 'Component Type');
		$spreadsheet->getActiveSheet()->setCellValue('B1', 'Item Code');
		$spreadsheet->getActiveSheet()->setCellValue('C1', 'Item Name');
		$spreadsheet->getActiveSheet()->setCellValue('D1', 'Item Group');

		

		$spreadsheet->getActiveSheet()->getStyle("A1:D1")->applyFromArray($style_hdr);

		foreach(range('A','Z') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$body = 2;
		foreach($configs as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->config_type);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->item_code);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, $row->item_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(3 ,$body, $row->item_group);

			$body++;
		}


		

		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Production Config Details.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function resync_prod_trans_dtl($config_prod_id=0, $prod_trans_id=0, $year=null, $bc_id=null, $process_type_id=null){
		$info = $this->_require_login_prod();

		$config_prod_id = decode($config_prod_id);
		$prod_trans_id = decode($prod_trans_id);
		$year = decode($year);

		//echo $config_prod_id.' | '.$prod_trans_id.' | '.$year;
		//echo 'admin/view-prod-trans/' . encode($prod_trans_id).'/'. $bc_id .'/' .$process_type_id .'/'. encode($year);
		
		$check_config = $this->admin->get_data('config_prod_dtl_tbl', array('config_prod_id' =>  $config_prod_id));
		if(!empty($check_config)){
			
			foreach($check_config as $row){
				$sync = $this->_auto_add_prod_trans_dtl($row->config_prod_dtl_id, $prod_trans_id, $year, NULL, decode($bc_id));
				$config_prod_id = $row->config_prod_id;
			}

			$sql = "UPDATE prod_trans_dtl_tbl set prod_trans_dtl_status = 5 WHERE prod_trans_id = ".$prod_trans_id." and YEAR(prod_trans_dtl_date) = '".$year."' and config_prod_dtl_id NOT IN (SELECT config_prod_dtl_id FROM config_prod_dtl_tbl where config_prod_id = ".$config_prod_id." and config_prod_dtl_status = 1)";
			$this->db->query($sql);
		}

		if($sync > 0){
			$msg = '<div class="alert alert-success">Config items already synced!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/view-prod-trans/' . encode($prod_trans_id).'/'. $bc_id .'/' .$process_type_id .'/'. encode($year));
		} else {
			$msg = '<div class="alert alert-danger">No Config item needed to sync!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/view-prod-trans/' . encode($prod_trans_id).'/'. $bc_id .'/' .$process_type_id .'/'. encode($year));
		}
	}

	public function _auto_add_prod_trans_dtl($config_prod_dtl_id=0, $prod_trans_id=0, $year=null, $commissary_id=null, $bc_id=NULL){
		$info = $this->_require_login_prod();
		
		$has_insert = 0;
		$check_config_dtl = $this->admin->check_data('config_prod_dtl_tbl', array('config_prod_dtl_id' =>  $config_prod_dtl_id), TRUE);
		if($check_config_dtl['result']){
			$config_prod_id = $check_config_dtl['info']->config_prod_id;
			if($prod_trans_id != 0){

				$article_type_id = $check_config_dtl['info']->article_type_id;
				$article_id = $check_config_dtl['info']->article_id;
				$component_type_id = $check_config_dtl['info']->component_type_id;

				if($bc_id){
					$commi_rawmats_cost = $this->_find_bom_rawmats_cost_on_commi_prod($article_type_id, $component_type_id, $article_id, $bc_id, $year);
				} else {
					$commi_rawmats_cost = $this->_find_commi_rawmats_cost($article_type_id, $component_type_id, $article_id, $commissary_id, $year);
				}
				
				for($i=1; $i<=12; $i++){

					$prod_trans_dtl_date = $year.'-'.$i.'-01';
					$filter = array(
						'config_prod_dtl_id' =>  $config_prod_dtl_id,
						'prod_trans_id' => $prod_trans_id,
						'prod_trans_dtl_date' => $prod_trans_dtl_date
					);
					$check_prod_trans_dtl = $this->admin->check_data('prod_trans_dtl_tbl', $filter, TRUE);

					
					if(!$check_prod_trans_dtl['result']){

						$set = array(
							'prod_trans_id' => $prod_trans_id,
							'config_prod_dtl_id' => $config_prod_dtl_id,
							'article_id' => $check_config_dtl['info']->article_id,
							'article_type_id' => $check_config_dtl['info']->article_type_id,
							'component_type_id' => $check_config_dtl['info']->component_type_id,
							'show_on_trans' => $check_config_dtl['info']->show_on_trans,
							'unit_id' => $check_config_dtl['info']->unit_id,
							'amount_type_id' => $check_config_dtl['info']->amount_type_id,
							'prod_trans_dtl_date' => $prod_trans_dtl_date,
							'prod_trans_dtl_status' => 1,
							'rate'	=> $check_config_dtl['info']->config_prod_dtl_rate,
							'qty'	=> $check_config_dtl['info']->config_prod_dtl_qty,
							'cost'	=> @$commi_rawmats_cost[$i],
							'initial_cost'	=> @$commi_rawmats_cost[$i]
						);
	
						$row = $this->admin->insert_data('prod_trans_dtl_tbl', $set, TRUE);
						
						$has_insert++;
					} else {
						$set = array(
							'article_id' => $check_config_dtl['info']->article_id,
							'article_type_id' => $check_config_dtl['info']->article_type_id,
							'component_type_id' => $check_config_dtl['info']->component_type_id,
							'show_on_trans' => $check_config_dtl['info']->show_on_trans,
							'unit_id' => $check_config_dtl['info']->unit_id,
							'amount_type_id' => $check_config_dtl['info']->amount_type_id,
							'rate'	=> $check_config_dtl['info']->config_prod_dtl_rate,
							'qty'	=> $check_config_dtl['info']->config_prod_dtl_qty,
							'cost'	=> @$commi_rawmats_cost[$i],         
							'initial_cost'	=> @$commi_rawmats_cost[$i]         
						);
						$row = $this->admin->update_data('prod_trans_dtl_tbl', $set, $filter);
						//$has_insert++;
					}
					
				}
			}
		}

		

		return $has_insert;
	}

	public function prod_trans($id){
		$info = $this->_require_login_prod();
		$data['bc_id'] = $id;
		$bc_id = decode($id);
		$data['pending_lock_status'] = $this->_check_lock_status(array('module_id'	=>	2,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$this->_active_year()));

		$data['title'] = 'Production Cost';
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$data['year'] = $this->_active_year();
		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id and a.bc_id ='.$bc_id,
			'user_tbl c' => 'a.created_by = c.user_id',
			'status_tbl d' => 'd.status_id = a.prod_trans_status and a.prod_trans_status != 5',
			'prod_trans_dtl_tbl e' => 'a.prod_trans_id = e.prod_trans_id and YEAR(e.prod_trans_dtl_date)= '.$this->_active_year(),
			'material_tbl f' => 'a.prod_id = f.material_id',
			'process_type_tbl g' => 'a.process_type_id = g.process_type_id and g.process_type_id != 5',
			'brand_tbl h' => 'a.brand_id = h.brand_id'
		);
		$data['prod_trans'] = $this->admin->get_join('prod_trans_tbl a', $join, FALSE,'f.material_desc ASC', 'a.prod_trans_id', '*, a.created_ts, a.modified_ts');

		$join = array(
			'material_group_tbl b' => 'a.material_group_id = b.material_group_id and a.material_status = 1 and a.material_group_id NOT IN (16, 17, 18, 19)'
		);
		$data['material'] = $this->admin->get_join('material_tbl a', $join, FALSE,'a.material_desc ASC','a.material_code');

		$join = array(
			'ext_prod_trans_dtl_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id and a.bc_id ='.$bc_id.' and YEAR(b.trans_dtl_date)= '.$this->_active_year(),
			'user_tbl c' => 'a.created_by = c.user_id',
			'status_tbl d' => 'd.status_id = a.ext_prod_trans_status and a.ext_prod_trans_status != 5',
			'material_tbl f' => 'a.material_id = f.material_id'
		);
		$data['ext_prod_trans'] = $this->admin->get_join('ext_prod_trans_tbl a', $join, FALSE,'f.material_desc ASC', 'a.ext_prod_trans_id', '*, a.created_ts, a.modified_ts');

		$data['content'] = $this->load->view('admin/admin_prod_trans_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function copy_prod_trans(){
		$info = $this->_require_login_prod();

		$year_to_copy = clean_data($this->input->post('copy-year-from'));
		$destination_year = clean_data($this->input->post('copy-year-to'));
		$bc_id = decode(clean_data($this->input->post('bc_id')));
		$trans_module = decode(clean_data($this->input->post('module')));

		if($trans_module == 'sales_bom'){
			$process_type_filter = ' and a.process_type_id = 5 ';
			$redirect_url = 'admin/sales-bom-trans/';
			$prefix_string = 'Sales BOM Transaction';
		} else {
			$process_type_filter = ' and a.process_type_id <> 5 ';
			$redirect_url = 'admin/prod-trans/';
			$prefix_string = 'Production Transaction';
		}

		$join = array(
			
			'prod_trans_dtl_tbl e' => 'a.prod_trans_id = e.prod_trans_id and YEAR(e.prod_trans_dtl_date)= '.$year_to_copy.' and a.bc_id ='.$bc_id. $process_type_filter .' and a.trans_type_id = 1 and a.prod_trans_status = 3'
			
		);
		$get_prod_trans_yearly = $this->admin->get_join('prod_trans_tbl a', $join, FALSE,'a.prod_trans_id ASC', 'e.prod_trans_dtl_id');
		$prod_trans_id = 0;

		if(!empty($get_prod_trans_yearly)){
			$hdr_inserted = 0;
			$has_existing_prod = false;
			$bom_summary_arr = array();
			foreach ($get_prod_trans_yearly as $r) {
				if($prod_trans_id != $r->prod_trans_id){

					
					$join = array(
						'prod_trans_dtl_tbl e' => 'a.prod_trans_id = e.prod_trans_id and YEAR(e.prod_trans_dtl_date)= '.$destination_year.' and a.bc_id ='.$bc_id.' and a.trans_type_id = 1 and a.prod_trans_status = 3 and a.prod_id = '.$r->prod_id
					);
					$group_by = 'a.prod_id';
					$check_prod_id = $this->admin->check_join('prod_trans_tbl a', $join, true, false, $group_by);

					if($check_prod_id['result']){
						$has_existing_prod = true;
					} else {
						$has_existing_prod = false;
					}

					if (!$has_existing_prod) {
						$insert_prod_trans = array(
							
							'bc_id' => $r->bc_id,
							'config_prod_id' => $r->config_prod_id,
							'prod_id' => $r->prod_id,
							'brand_id' => $r->brand_id,
							'process_type_id' => $r->process_type_id,
							'component_type_id' => $r->component_type_id,
							'trans_type_id' => 1,
							'cost_sheet_stat' => $r->cost_sheet_stat,
							'prod_trans_status' => 3,
							'created_by' =>decode($info['user_id']),
							'created_ts' => date_now(),
						);

						$bom_summary_arr[] = array(
							'bc_id' => $r->bc_id,
							'prod_id' => $r->prod_id,
							'brand_id' => $r->brand_id,
							'year' => $destination_year
						);

						$insert_trans = $this->admin->insert_data('prod_trans_tbl', $insert_prod_trans, true);
						$hdr_inserted++;
					}
				}

				$new_id = @$insert_trans['id'];
				$new_date = $destination_year.date('-m-d', strtotime($r->prod_trans_dtl_date));

				if (!$has_existing_prod) {
					$insert_prod_trans_dtl = array(
						'prod_trans_id' => $new_id,
						'config_prod_dtl_id' => $r->config_prod_dtl_id,
						'article_id' => $r->article_id,
						'article_type_id' => $r->article_type_id,
						'component_type_id' => $r->component_type_id,
						'unit_id' => $r->unit_id,
						'show_on_trans' => $r->show_on_trans,
						'amount_type_id' => $r->amount_type_id,
						'show_on_trans' => $r->show_on_trans,
						'rate' => $r->rate,
						'qty' => $r->qty,
						'wgt' => $r->wgt,
						'ave_wgt' => $r->ave_wgt,
						'cost' => $r->cost,
						'initial_cost' => $r->initial_cost,
						'total_cost' => $r->total_cost,
						'prod_trans_dtl_date' =>$new_date,
						'prod_trans_dtl_status' => 1
					);
					$this->admin->insert_data('prod_trans_dtl_tbl', $insert_prod_trans_dtl, true);
				}

				$prod_trans_id = $r->prod_trans_id;
			}
			
			if(!empty($bom_summary_arr)){
				foreach ($bom_summary_arr as $row){
					
					//echo $row['bc_id'].'<br>';
					//echo $row['year'].'<br>';
					//echo $row->brand_id.'<br>';
					//echo $row->year.'<br>';
					$this->compute_bom_material($row['bc_id'], $row['year'], $row['prod_id'], $row['brand_id']);
				}
			}
			

			//$this->compute_bom_material($bc_id, $year, $material_id, $brand_id);

			$msg = '<div class="alert alert-success"><strong>'.$hdr_inserted.' '.$prefix_string.' of Budget year '.$year_to_copy.' were successfully copied to Budget year '.$destination_year.'.</strong></div>';
			$this->session->set_flashdata('message', $msg);
			redirect($redirect_url . encode($bc_id));

		} else {
			$msg = '<div class="alert alert-danger"><strong>'.$prefix_string.' of Budget year '.$year_to_copy.' was not successfully copied to Budget year '.$destination_year.'. No transaction found on Budget Year '.$year_to_copy.'.</strong></div>';
			$this->session->set_flashdata('message', $msg);
			redirect($redirect_url . encode($bc_id));
		}
	}

	public function _get_all_cost_sheet($bc_id, $year){
		$info = $this->_require_login_prod();

		$order_by = " z.prod_trans_id,
			z.order_base,
			z.material_code,
			z.trans_month";

		$sql = "SELECT
					*
				FROM
					(
						SELECT
							a.*, b.material_code,
							b.material_desc,
							b.material_id,
							d.component_type,
							d.order_base,
							d.order_base_sales,
							f.amount_type_name,
							g.unit_name,
							i.process_type_id,
							i.process_type_name,
							MONTH (a.prod_trans_dtl_date) AS trans_month,
							j.unit_name as buom_unit,
							k.material_code as fg_mat_code
						FROM
							`prod_trans_dtl_tbl` `a`
						JOIN `material_tbl` `b` ON `a`.`article_id` = `b`.`material_id`
						AND `a`.`article_type_id` = 1
						JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
						JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
							AND `a`.`prod_trans_dtl_status` <> 5
							and YEAR(`a`.`prod_trans_dtl_date`)= ".$year."
						LEFT JOIN `unit_tbl` `g` ON `a`.`unit_id` = `g`.`unit_id`
						JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id` and `h`.`bc_id` =".decode($bc_id)." and `h`.`trans_type_id` = 1 and `h`.`prod_trans_status` = 3 and `h`.`cost_sheet_stat` = 1 and h.process_type_id != 5
						JOIN `process_type_tbl` `i` ON `h`.`process_type_id` = `i`.`process_type_id`
						JOIN `unit_tbl` `j` ON `b`.`unit_id` = `j`.`unit_id`
						INNER JOIN `material_tbl` `k` ON `h`.`prod_id` = `k`.`material_id` 
						UNION ALL
							SELECT
								a.*, b.service_id,
								b.service_desc,
								b.service_code,
								d.component_type,
								d.order_base,
								d.order_base_sales,
								f.amount_type_name,
								NULL AS unit_name,
								i.process_type_id,
								i.process_type_name,
								MONTH (a.prod_trans_dtl_date) AS trans_month,
								NULL as buom_unit,
								k.material_code as fg_mat_code
							FROM
								`prod_trans_dtl_tbl` `a`
							JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
							AND `a`.`article_type_id` = 2
							JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
							JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
							AND `a`.`prod_trans_dtl_status` <> 5
							AND YEAR(`a`.`prod_trans_dtl_date`)= ".$year."
							JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id` and `h`.`bc_id` =".decode($bc_id)." and `h`.`trans_type_id` = 1 and `h`.`prod_trans_status` = 3 and `h`.`cost_sheet_stat` = 1 and h.process_type_id != 5
							JOIN `process_type_tbl` `i` ON `h`.`process_type_id` = `i`.`process_type_id`
							INNER JOIN `material_tbl` `k` ON `h`.`prod_id` = `k`.`material_id`
					) z ";

		$sql .= "ORDER BY".$order_by;

		
		return $this->admin->get_query($sql);
	}

	public function view_cost_sheet_report($bc_id, $year, $process_type_id = 1){
		$info = $this->_require_login_prod();
		$data['bc_id'] = $bc_id;
		$data['year'] = $year;
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => decode($bc_id)), true, 'bc_name');
		$data['process_type_id'] = encode($process_type_id);
		$data['title'] = 'List of Cost Sheet';

		$prod_trans = $this->_get_all_cost_sheet($bc_id, $year);
		
		
		$table = '
		<div class="col-lg-12">
			<div class="table-responsive">
				<table class="table table-hover table-bordered table-stripe nowrap tbl-cost-sheet-report">
					<thead class="bg-primary">
						<tr>
							<th rowspan="2" class="text-center bg-primary">Process Type</th>
							<th rowspan="2" class="text-center bg-primary">Item Name</th>
							<th rowspan="2" class="text-center">Base Unit</th>
							<th rowspan="2" class="text-center">Val Unit</th>
							<th rowspan="2" class="text-center">Component Type</th>';

		for ($i=1; $i <= 12 ; $i++){
			$new_date = $year.'-'.$i.'-01';
			$table .='<th colspan="6" class="text-center">'.date('F Y', strtotime($new_date)).'</th>';
		}
		$table .='<tr>';
		for ($i=1; $i <= 12 ; $i++){
			$table .='<th class="text-center">Rate</th>';
			$table .='<th class="text-center">Qty</th>';
			$table .='<th class="text-center">Wgt</th>';
			$table .='<th class="text-center">Ave. Wgt</th>';
			$table .='<th class="text-center">Cost/Price</th>';
			$table .='<th class="text-center">Amount</th>';
		}
		$table .= '</tr></thead><tbody>';
		$new_item = false;
		if(!empty($prod_trans)){
			foreach ($prod_trans as $r) {

				if($r->trans_month == 1){
					if($r->component_type_id == 1){
						$new_item = true;
					}

					if($new_item){
						$added_class = 'bg-info';
						$table .='<tr class="'.$added_class.'"><td class="text-left '.$added_class.'">'.$r->process_type_name.'</td>';
						$table .='<td class="text-left '.$added_class.'">'.$r->material_desc.'</td>';
						$table .='<td class="text-center">'.$r->buom_unit.'</td>';
						$table .='<td class="text-center">'.$r->unit_name.'</td>';
						$table .='<td class="text-left">'.$r->component_type.'</td>';
					} else {
						$added_class = '';
						$table .='<tr><td class="text-center nowrap"> -- '.$r->process_type_name.' </td>';
						$table .='<td class="text-left nowrap">'.$r->material_desc.'</td>';
						$table .='<td class="text-center">'.$r->buom_unit.'</td>';
						$table .='<td class="text-center">'.$r->unit_name.'</td>';
						$table .='<td class="text-left">'.$r->component_type.'</td>';
					}
				}
				$new_item = false;
				$table .='<td class="'.$added_class.' text-right">'.$r->rate.'</td>';
				$table .='<td class="'.$added_class.' text-right">'.decimal_format($r->qty, 2).'</td>';
				$table .='<td class="'.$added_class.' text-right">'.decimal_format($r->wgt, 2).'</td>';
				$table .='<td class="'.$added_class.' text-right">'.$r->ave_wgt.'</td>';
				$table .='<td class="'.$added_class.' text-right">'.decimal_format($r->cost, 2).'</td>';
				$table .='<td class="'.$added_class.' text-right">'.decimal_format($r->total_cost, 2).'</td>';

				if($r->trans_month == 12){
					$table.= '</tr>';
				}
			}
		} else {
			$table .='<tr><td class="text-center nowrap" colspan="77"> No data available in table </td></tr>';
		}

		$table .= '</tbody></table></div></div>';

		$data['report'] = $table;
		$data['content'] = $this->load->view('admin/admin_view_cost_sheet_report_content', $data , TRUE);
		$this->load->view('admin/templates', $data);

	}

	public function download_cost_sheet_report($bc_id, $year, $process_type_id = 1){
		$info = $this->_require_login_prod();
		$data['bc_id'] = $bc_id;
		$data['year'] = $year;
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => decode($bc_id)), true, 'bc_name');
		$data['process_type_id'] = $process_type_id;

		$prod_trans = $this->_get_all_cost_sheet($bc_id, $year);
		
		$this->load->library('excel');
		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Cost Sheets')
				->setDescription('Cost Sheets');
		
		$spreadsheet->setActiveSheetIndex(0)
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		foreach(range('A','I') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$reportTitle = 'List of All Processed Cost Sheet of '.$data['bc']->bc_name;
		$reportTitle .= "\nRun Date : ".date_now();

		$spreadsheet->getActiveSheet()->getStyle("A2:BY3")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A2:BY3")->applyFromArray($style_info);
		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle)
				->setCellValue("A2",'Process Type')
				->mergeCells('A2:A3')
				->setCellValue("B2","Item Name")
				->mergeCells('B2:B3')
				->setCellValue("C2", "Base Unit")
				->mergeCells('C2:C3')
				->setCellValue("D2", "Val Unit")
				->mergeCells('D2:D3')
				->setCellValue("E2", "Component Type")
				->mergeCells('E2:E3')
				->setCellValue("F2", "January ".$year)
				->mergeCells('F2:K2')

				->setCellValue("L2", "February ".$year)
				->mergeCells('L2:Q2')
				->setCellValue("R2", "March ".$year)
				->mergeCells('R2:W2')
				->setCellValue("X2", "April ".$year)
				->mergeCells('X2:AC2')
				->setCellValue("AD2", "April ".$year)
				->mergeCells('AD2:AI2')
				->setCellValue("AJ2", "June ".$year)
				->mergeCells('AJ2:AO2')
				->setCellValue("AP2", "July ".$year)
				->mergeCells('AP2:AU2')
				->setCellValue("AV2", "August ".$year)
				->mergeCells('AV2:BA2')
				->setCellValue("BB2", "September ".$year)
				->mergeCells('BB2:BG2')
				->setCellValue("BH2", "October ".$year)
				->mergeCells('BH2:BM2')
				->setCellValue("BN2", "November ".$year)
				->mergeCells('BN2:BS2')
				->setCellValue("BT2", "December ".$year)
				->mergeCells('BT2:BY2');

		

		$col = 5;
		$row = 3;
		for ($i=1; $i <= 12 ; $i++){
			
			$spreadsheet->setActiveSheetIndex(0)
				->setCellValueByColumnAndRow($col++ , $row , 'Rate')
				->setCellValueByColumnAndRow($col++ , $row , 'Qty')
				->setCellValueByColumnAndRow($col++ , $row , 'Wgt')
				->setCellValueByColumnAndRow($col++ , $row , 'Ave. Wgt')
				->setCellValueByColumnAndRow($col++ , $row , 'Cost/Price')
				->setCellValueByColumnAndRow($col++ , $row , 'Total Cost');
		}

		$spreadsheet->getActiveSheet()->getStyle("A2:BY3")->applyFromArray($style_hdr);
		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);

		$prod_trans = $this->_get_all_cost_sheet($bc_id, $year);
		// Add some data
		$x= 2;
		$count = 0;
		$col = 0;
		$row = 4;
		$new_item = false;
		if(!empty($prod_trans)){
			foreach($prod_trans as $r){
				if($r->trans_month == 1){
					if($r->component_type_id == 1){
						$new_item = true;
					}

					if($new_item){

						$spreadsheet->getActiveSheet()->getStyle("A$row:BY$row")->applyFromArray($style_highlight_row);

						$spreadsheet->setActiveSheetIndex(0)
							->setCellValueByColumnAndRow($col++ , $row , $r->process_type_name)
							->setCellValueByColumnAndRow($col++ , $row , $r->material_desc)
							->setCellValueByColumnAndRow($col++ , $row , $r->buom_unit)
							->setCellValueByColumnAndRow($col++ , $row , $r->unit_name)
							->setCellValueByColumnAndRow($col++ , $row , $r->component_type);
					} else {
						
						$spreadsheet->setActiveSheetIndex(0)
							->setCellValueByColumnAndRow($col++ , $row , '-- '.$r->process_type_name)
							->setCellValueByColumnAndRow($col++ , $row , $r->material_desc)
							->setCellValueByColumnAndRow($col++ , $row , $r->buom_unit)
							->setCellValueByColumnAndRow($col++ , $row , $r->unit_name)
							->setCellValueByColumnAndRow($col++ , $row , $r->component_type);
					}
				}
				$new_item = false;
				
				$spreadsheet->setActiveSheetIndex(0)
					->setCellValueByColumnAndRow($col++ , $row , $r->rate)
					->setCellValueByColumnAndRow($col++ , $row , decimal_format($r->qty, 2))
					->setCellValueByColumnAndRow($col++ , $row , decimal_format($r->wgt, 2))
					->setCellValueByColumnAndRow($col++ , $row , $r->ave_wgt)
					->setCellValueByColumnAndRow($col++ , $row , decimal_format($r->cost, 2))
					->setCellValueByColumnAndRow($col++ , $row , decimal_format($r->total_cost, 2) );

				if($r->trans_month == 12){
					
					$col = 0;
					$row++;
				}



				//$spreadsheet->getActiveSheet()->getStyle("A$row:BY$row")->applyFromArray($style_data);
				
			}
			$end_row = $row-1;
			$spreadsheet->getActiveSheet()->getStyle("A4:A$end_row")->applyFromArray($style_border);
			$spreadsheet->getActiveSheet()->getStyle("B4:B$end_row")->applyFromArray($style_border_bold);
			$spreadsheet->getActiveSheet()->getStyle("C4:BY$end_row")->applyFromArray($style_border_normal);
			$spreadsheet->getActiveSheet()->getStyle("F4:BY$end_row")->applyFromArray($style_data_right);
		} else {

		}
		
		// Rename worksheet
		$spreadsheet->getActiveSheet()->setTitle('Cost Sheet');

		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Cost - Sheet.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;

	}


	public function download_cost_sheet_report_customized($bc_id, $year, $process_type_id = 1){
		$info = $this->_require_login_prod();
		$data['bc_id'] = $bc_id;
		$data['year'] = $year;
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => decode($bc_id)), true, 'bc_name');
		$data['process_type_id'] = $process_type_id;

		$prod_trans = $this->_get_all_cost_sheet($bc_id, $year);
		
		$this->load->library('excel');
		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Cost Sheets')
				->setDescription('Cost Sheets');
		
		$spreadsheet->setActiveSheetIndex(0)
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		foreach(range('A','I') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$reportTitle = 'List of All Processed Cost Sheet of '.$data['bc']->bc_name.' (Customized)';
		$reportTitle .= "\nRun Date : ".date_now();

		$spreadsheet->getActiveSheet()->getStyle("A2:BY3")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A2:BY3")->applyFromArray($style_info);
		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle)
				->setCellValue("A2",'Process Type')
				->mergeCells('A2:A3')
				->setCellValue("B2",'FG Material')
				->mergeCells('B2:B3')
				->setCellValue("C2",'Item Material')
				->mergeCells('C2:C3')
				->setCellValue("D2","Item Name")
				->mergeCells('D2:D3')
				->setCellValue("E2", "Base Unit")
				->mergeCells('E2:E3')
				->setCellValue("F2", "Val Unit")
				->mergeCells('F2:F3')
				->setCellValue("G2", "Component Type")
				->mergeCells('G2:G3')

				->setCellValue("H2", "January ".$year)
				->mergeCells('H2:M2')
				->setCellValue("N2", "February ".$year)
				->mergeCells('N2:S2')
				->setCellValue("T2", "March ".$year)
				->mergeCells('T2:Y2')
				->setCellValue("Z2", "April ".$year)
				->mergeCells('Z2:AE2')
				->setCellValue("AF2", "April ".$year)
				->mergeCells('AF2:AK2')
				->setCellValue("AL2", "June ".$year)
				->mergeCells('AL2:AQ2')
				->setCellValue("AR2", "July ".$year)
				->mergeCells('AR2:AW2')
				->setCellValue("AX2", "August ".$year)
				->mergeCells('AX2:BC2')
				->setCellValue("BD2", "September ".$year)
				->mergeCells('BD2:BI2')
				->setCellValue("BJ2", "October ".$year)
				->mergeCells('BJ2:BO2')
				->setCellValue("BP2", "November ".$year)
				->mergeCells('BP2:BU2')
				->setCellValue("BV2", "December ".$year)
				->mergeCells('BV2:CA2');

		

		$col = 7;
		$row = 3;
		for ($i=1; $i <= 12 ; $i++){
			
			$spreadsheet->setActiveSheetIndex(0)
				->setCellValueByColumnAndRow($col++ , $row , 'Rate')
				->setCellValueByColumnAndRow($col++ , $row , 'Qty')
				->setCellValueByColumnAndRow($col++ , $row , 'Wgt')
				->setCellValueByColumnAndRow($col++ , $row , 'Ave. Wgt')
				->setCellValueByColumnAndRow($col++ , $row , 'Cost/Price')
				->setCellValueByColumnAndRow($col++ , $row , 'Total Cost');
		}

		$spreadsheet->getActiveSheet()->getStyle("A2:CA3")->applyFromArray($style_hdr);
		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);

		$prod_trans = $this->_get_all_cost_sheet($bc_id, $year);
		// Add some data
		$x= 2;
		$count = 0;
		$col = 0;
		$row = 4;
		$new_item = false;
		if(!empty($prod_trans)){
			foreach($prod_trans as $r){
				if($r->trans_month == 1){
					if($r->component_type_id == 1){
						$new_item = true;
					}

					$item_mat_code = $r->article_type_id == 2 ? $r->material_desc : $r->material_code;

					if($new_item){

						$spreadsheet->getActiveSheet()->getStyle("A$row:BY$row")->applyFromArray($style_highlight_row);

						$spreadsheet->setActiveSheetIndex(0)
							->setCellValueByColumnAndRow($col++ , $row , $r->process_type_name)
							->setCellValueByColumnAndRow($col++ , $row , $r->fg_mat_code)
							->setCellValueByColumnAndRow($col++ , $row , $item_mat_code)
							->setCellValueByColumnAndRow($col++ , $row , $r->material_desc)
							->setCellValueByColumnAndRow($col++ , $row , $r->buom_unit)
							->setCellValueByColumnAndRow($col++ , $row , $r->unit_name)
							->setCellValueByColumnAndRow($col++ , $row , $r->component_type);
					} else {
						
						$spreadsheet->setActiveSheetIndex(0)
							->setCellValueByColumnAndRow($col++ , $row , '-- '.$r->process_type_name)
							->setCellValueByColumnAndRow($col++ , $row , $r->fg_mat_code)
							->setCellValueByColumnAndRow($col++ , $row , $item_mat_code)
							->setCellValueByColumnAndRow($col++ , $row , $r->material_desc)
							->setCellValueByColumnAndRow($col++ , $row , $r->buom_unit)
							->setCellValueByColumnAndRow($col++ , $row , $r->unit_name)
							->setCellValueByColumnAndRow($col++ , $row , $r->component_type);
					}
				}
				$new_item = false;
				
				$spreadsheet->setActiveSheetIndex(0)
					->setCellValueByColumnAndRow($col++ , $row , $r->rate)
					->setCellValueByColumnAndRow($col++ , $row , decimal_format($r->qty, 2))
					->setCellValueByColumnAndRow($col++ , $row , decimal_format($r->wgt, 2))
					->setCellValueByColumnAndRow($col++ , $row , $r->ave_wgt)
					->setCellValueByColumnAndRow($col++ , $row , decimal_format($r->cost, 2))
					->setCellValueByColumnAndRow($col++ , $row , decimal_format($r->total_cost, 2) );

				if($r->trans_month == 12){
					
					$col = 0;
					$row++;
				}



				//$spreadsheet->getActiveSheet()->getStyle("A$row:BY$row")->applyFromArray($style_data);
				
			}
			$end_row = $row-1;
			$spreadsheet->getActiveSheet()->getStyle("A4:A$end_row")->applyFromArray($style_border);
			$spreadsheet->getActiveSheet()->getStyle("B4:B$end_row")->applyFromArray($style_border_bold);
			$spreadsheet->getActiveSheet()->getStyle("C4:CA$end_row")->applyFromArray($style_border_normal);
			$spreadsheet->getActiveSheet()->getStyle("F4:CA$end_row")->applyFromArray($style_data_right);
		} else {

		}
		
		// Rename worksheet
		$spreadsheet->getActiveSheet()->setTitle('Cost Sheet');

		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Cost - Sheet.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;

	}

	public function get_prod_trans(){
		
		$info = $this->_require_login_prod();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$prod_trans_dtl_date =clean_data($this->input->post('prod_trans_date'));
			$bc_id = clean_data(decode($this->input->post('bc_id')));

			$pending_lock_status = $this->_check_lock_status(array('module_id'	=>	2,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$prod_trans_dtl_date ));
			
			if($prod_trans_dtl_date){
				$join = array(
					'bc_tbl b' => 'a.bc_id = b.bc_id and a.bc_id ='.$bc_id,
					'user_tbl c' => 'a.created_by = c.user_id',
					'status_tbl d' => 'd.status_id = a.prod_trans_status and a.prod_trans_status != 5',
					'prod_trans_dtl_tbl e' => 'a.prod_trans_id = e.prod_trans_id and YEAR(e.prod_trans_dtl_date)= '.$prod_trans_dtl_date,
					'material_tbl f' => 'a.prod_id = f.material_id',
					'process_type_tbl g' => 'a.process_type_id = g.process_type_id and g.process_type_id != 5',
					'brand_tbl h' => 'a.brand_id = h.brand_id'
				);
				$get_prod_trans_yearly = $this->admin->get_join('prod_trans_tbl a', $join, FALSE,'f.material_desc ASC', 'a.prod_trans_id', FALSE, FALSE, FALSE);
				// exit;
				$prod_trans = '';
				if($get_prod_trans_yearly){
					foreach($get_prod_trans_yearly as $row){
						if($row->prod_trans_status != 5){
							
							$prod_trans .= '<tr><td class="text-center"><a href="" class="remove-prod-trans" data-id="'.encode($row->prod_trans_id).'" data-bc_id="'.$bc_id.'" data-mat_desc="'.encode($row->material_desc).'"><i class="fa fa-remove"></i></a></td>';
						}
						//$cost_sheet_stat = $row->cost_sheet_stat == 1 ? 'PROCESSED' : 'NOT PROCESSED';
						$cost_sheet_stat = $row->cost_sheet_stat == 1 ? time_stamp_display($row->modified_ts).' | PROCESSED' : 'NOT PROCESSED';
						$prod_trans .= '<td>' . $row->process_type_name .'</td>';
						$prod_trans .= '<td>' . $row->material_code.' - '. $row->material_desc .'</td>';
						
						$prod_trans .= '<td>' . $row->user_fname.' '.$row->user_lname .'</td>';
						$prod_trans .= '<td>' . date( 'm/d/Y', strtotime($row->created_ts)) .'</td>';
						$prod_trans .= '<td>' .$cost_sheet_stat.' </td>';
						$prod_trans .= '<td class="text-center"><a href="'.base_url('admin/view-prod-trans/' . encode($row->prod_trans_id).'/'.encode($bc_id).'/'.encode($row->process_type_id).'/'. encode($prod_trans_dtl_date)).'" class="btn btn-xs btn-success">View</a>&nbsp;&nbsp;<a href="'.base_url('admin/view-cost-sheet/' . encode($row->prod_trans_id).'/'.encode($bc_id).'/'.encode(date('Y', strtotime($row->prod_trans_dtl_date))).'/'.encode($row->process_type_id).'/'.encode($row->material_id)).'" class="btn btn-xs btn-primary">Cost Sheet</a></td>';
						$prod_trans .= '</tr>';
					}
					$data['prod_trans'] = $prod_trans;
					$data['result'] = 1;
					$data['pending_lock_status'] = $pending_lock_status;
				} else {
					$data['result'] = 1;
					$data['pending_lock_status'] = $pending_lock_status;
				}

				$join = array(
					'ext_prod_trans_dtl_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id and a.bc_id ='.$bc_id.' and YEAR(b.trans_dtl_date)= '.$prod_trans_dtl_date,
					'user_tbl c' => 'a.created_by = c.user_id',
					'status_tbl d' => 'd.status_id = a.ext_prod_trans_status and a.ext_prod_trans_status != 5',
					'material_tbl f' => 'a.material_id = f.material_id'
				);
				$ext_prod_trans_yearly = $this->admin->get_join('ext_prod_trans_tbl a', $join, FALSE,'f.material_desc ASC', 'a.ext_prod_trans_id');
				$ext_prod_trans = '';
				if($ext_prod_trans_yearly){
					foreach($ext_prod_trans_yearly as $row){
						
						$ext_prod_trans .= '<tr><td>' . $row->material_code.' - '.$row->material_desc .'</td>';
						$ext_prod_trans .= '<td>' . $row->user_fname.' '.$row->user_lname .'</td>';
						$ext_prod_trans .= '<td>' . date( 'm/d/Y', strtotime($row->created_ts)) .'</td>';

						$ext_prod_trans .= '<td class="text-center"><a href="'.base_url('admin/edit-ext-prod-trans/' . encode($row->ext_prod_trans_id).'/'.encode($bc_id).'/'.$prod_trans_dtl_date).'" class="fa fa-pencil"></a>&nbsp;&nbsp;<a href="#" data-id="'.encode($row->ext_prod_trans_id).'" data-bc_id="'.encode($bc_id).'" class="remove-ext-prod-trans fa fa-remove"></a></td>';
						$ext_prod_trans .= '</tr>';
					}
					$data['ext_prod_trans'] = $ext_prod_trans;
					$data['result_2'] = 1;
					$data['pending_lock_status_2'] = $pending_lock_status;
				} else {
					$data['result_2'] = 1;
					$data['pending_lock_status_2'] = $pending_lock_status;
				}
			} else {
				$data['result'] = 0;
			}
		}
		echo json_encode($data);
	}


	public function new_prod_trans($id, $pick_year){
		$info = $this->_require_login_prod();
		$data['bc_id'] = $id;
		$data['year'] = $pick_year;
		$bc_id = decode($id);
		$this->_check_lock_status(array('module_id'	=>	2,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$pick_year), 'Admin/prod-trans/'.encode($bc_id));
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$data['title'] = 'Production Cost';

		$join = array(
			'material_tbl b' => 'a.prod_id = b.material_id',
			'process_type_tbl c' => 'a.process_type_id = c.process_type_id and c.process_type_id != 5 and a.config_prod_status != 5'
		);
		$where = 'a.config_prod_id NOT IN (SELECT a.config_prod_id from prod_trans_tbl a INNER JOIN prod_trans_dtl_tbl b ON a.prod_trans_id = b.prod_trans_id where a.bc_id = '.$bc_id.' and a.process_type_id != 5 and a.prod_trans_status != 5 and YEAR(b.prod_trans_dtl_date) = "'.$pick_year.'" GROUP BY a.config_prod_id)';

		$data['config_prod'] = $this->admin->get_join('config_prod_tbl a', $join, FALSE,'c. process_type_id, b.material_desc ASC', false, false, $where);
		$data['type'] = $this->admin->get_data('brand_type_tbl', array('brand_type_status' => 1));
		$data['brand'] = $this->admin->get_data('brand_tbl', array('brand_status' => 1));
		$data['content'] = $this->load->view('admin/admin_new_prod_trans_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function get_config_prod(){
		
		$info = $this->_require_login_prod();


		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$config_prod_id =clean_data(decode($this->input->post('id')));
			$bc_id = clean_data(decode($this->input->post('bc_id')));
			$commissary_id = clean_data(decode($this->input->post('commissary_id')));
			$year = clean_data($this->input->post('pick_year'));
			$brand_id = clean_data(decode($this->input->post('brand_id')));

			
			if($config_prod_id){
				
				if(trim($this->input->post('process_type_name')) == 'SALES BOM'){
					$sql = 'SELECT
								*
							FROM
								(
									SELECT
										a.*, b.material_code,
										b.material_desc,
										b.material_id,
										c.user_id,
										c.user_fname,
										c.user_lname,
										d.component_type,
										d.order_base,
										f.amount_type_name,
										g.unit_name
									FROM
										`config_prod_dtl_tbl` `a`
									JOIN `material_tbl` `b` ON `a`.`article_id` = `b`.`material_id`
									AND `a`.`article_type_id` = 1
									JOIN `user_tbl` `c` ON `a`.`created_by` = `c`.`user_id`
									JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
									JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
									AND `a`.`config_prod_id` = '.$config_prod_id.'
									and `a`.`show_on_trans` = 1
									and `a`.`config_prod_dtl_status` != 5
									AND a.config_prod_dtl_id NOT IN (
										SELECT
											a.config_prod_dtl_id
										FROM
											prod_trans_dtl_tbl a
										JOIN prod_trans_tbl b ON a.prod_trans_id = b.prod_trans_id
										WHERE
											prod_trans_dtl_status != 5
										AND YEAR (`a`.`prod_trans_dtl_date`) = '.$year.'
										AND b.bc_id = '.$bc_id.'
										AND b.config_prod_id = '.$config_prod_id.'
										AND b.brand_id = '.$brand_id.'
										GROUP BY
											a.config_prod_dtl_id
									)
									LEFT JOIN `unit_tbl` `g` ON `a`.`unit_id` = `g`.`unit_id`
									UNION ALL
										SELECT
											a.*, b.service_code,
											b.service_desc,
											b.service_code,
											c.user_id,
											c.user_fname,
											c.user_lname,
											d.component_type,
											d.order_base,
											f.amount_type_name,
											NULL AS unit_name
										FROM
											`config_prod_dtl_tbl` `a`
										JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
										AND `a`.`article_type_id` = 2
										JOIN `user_tbl` `c` ON `a`.`created_by` = `c`.`user_id`
										JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
										JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
										AND `a`.`config_prod_id` = '.$config_prod_id.'
										and `a`.`show_on_trans` = 1
										and `a`.`config_prod_dtl_status` != 5
										AND a.config_prod_dtl_id NOT IN (
											SELECT
												a.config_prod_dtl_id
											FROM
												prod_trans_dtl_tbl a
											JOIN prod_trans_tbl b ON a.prod_trans_id = b.prod_trans_id
											WHERE
												prod_trans_dtl_status != 5
											AND YEAR (`a`.`prod_trans_dtl_date`) = '.$year.'
											AND b.bc_id = '.$bc_id.'
											AND b.config_prod_id = '.$config_prod_id.'
											AND b.brand_id = '.$brand_id.'
											GROUP BY
												a.config_prod_dtl_id
										)
								) z
							ORDER BY
								z.order_base asc';
				}elseif(trim($this->input->post('process_type_name')) == 'COMMISSARY PRODUCTION'){
					
					$sql = 'SELECT
								*
							FROM
								(
									SELECT
										a.*, b.material_code,
										b.material_desc,
										b.material_id,
										c.user_id,
										c.user_fname,
										c.user_lname,
										d.component_type,
										d.order_base,
										f.amount_type_name,
										g.unit_name
									FROM
										`config_prod_dtl_tbl` `a`
									JOIN `material_tbl` `b` ON `a`.`article_id` = `b`.`material_id`
									AND `a`.`article_type_id` = 1
									JOIN `user_tbl` `c` ON `a`.`created_by` = `c`.`user_id`
									JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
									JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
									AND `a`.`config_prod_id` = '.$config_prod_id.'
									and `a`.`show_on_trans` = 1
									and `a`.`config_prod_dtl_status` != 5
									AND a.config_prod_dtl_id NOT IN (
										SELECT
											a.config_prod_dtl_id
										FROM
											prod_trans_dtl_tbl a
										JOIN prod_trans_tbl b ON a.prod_trans_id = b.prod_trans_id
										WHERE
											prod_trans_dtl_status != 5
										AND YEAR (`a`.`prod_trans_dtl_date`) = '.$year.'
										AND b.commissary_id = '.$commissary_id.'
										AND b.config_prod_id = '.$config_prod_id.'
										GROUP BY
											a.config_prod_dtl_id
									)
									LEFT JOIN `unit_tbl` `g` ON `a`.`unit_id` = `g`.`unit_id`
									UNION ALL
										SELECT
											a.*, b.service_code,
											b.service_desc,
											b.service_code,
											c.user_id,
											c.user_fname,
											c.user_lname,
											d.component_type,
											d.order_base,
											f.amount_type_name,
											NULL AS unit_name
										FROM
											`config_prod_dtl_tbl` `a`
										JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
										AND `a`.`article_type_id` = 2
										JOIN `user_tbl` `c` ON `a`.`created_by` = `c`.`user_id`
										JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
										JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
										AND `a`.`config_prod_id` = '.$config_prod_id.'
										and `a`.`show_on_trans` = 1
										and `a`.`config_prod_dtl_status` != 5
										AND a.config_prod_dtl_id NOT IN (
											SELECT
												a.config_prod_dtl_id
											FROM
												prod_trans_dtl_tbl a
											JOIN prod_trans_tbl b ON a.prod_trans_id = b.prod_trans_id
											WHERE
												prod_trans_dtl_status != 5
											AND YEAR (`a`.`prod_trans_dtl_date`) = '.$year.'
											AND b.commissary_id = '.$commissary_id.'
											AND b.config_prod_id = '.$config_prod_id.'
											AND b.brand_id = '.$brand_id.'
											GROUP BY
												a.config_prod_dtl_id
										)
								) z
							ORDER BY
								z.order_base asc';
				} else {
					$sql = 'SELECT
								*
							FROM
								(
									SELECT
										a.*, b.material_code,
										b.material_desc,
										b.material_id,
										c.user_id,
										c.user_fname,
										c.user_lname,
										d.component_type,
										d.order_base,
										f.amount_type_name,
										g.unit_name
									FROM
										`config_prod_dtl_tbl` `a`
									JOIN `material_tbl` `b` ON `a`.`article_id` = `b`.`material_id`
									AND `a`.`article_type_id` = 1
									JOIN `user_tbl` `c` ON `a`.`created_by` = `c`.`user_id`
									JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
									JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
									AND `a`.`config_prod_id` = '.$config_prod_id.'
									and `a`.`show_on_trans` = 1
									and `a`.`config_prod_dtl_status` != 5
									AND a.config_prod_dtl_id NOT IN (
										SELECT
											a.config_prod_dtl_id
										FROM
											prod_trans_dtl_tbl a
										JOIN prod_trans_tbl b ON a.prod_trans_id = b.prod_trans_id
										WHERE
											prod_trans_dtl_status != 5
										AND YEAR (`a`.`prod_trans_dtl_date`) = '.$year.'
										AND b.bc_id = '.$bc_id.'
										AND b.config_prod_id = '.$config_prod_id.'
										GROUP BY
											a.config_prod_dtl_id
									)
									LEFT JOIN `unit_tbl` `g` ON `a`.`unit_id` = `g`.`unit_id`
									UNION ALL
										SELECT
											a.*, b.service_code,
											b.service_desc,
											b.service_code,
											c.user_id,
											c.user_fname,
											c.user_lname,
											d.component_type,
											d.order_base,
											f.amount_type_name,
											NULL AS unit_name
										FROM
											`config_prod_dtl_tbl` `a`
										JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
										AND `a`.`article_type_id` = 2
										JOIN `user_tbl` `c` ON `a`.`created_by` = `c`.`user_id`
										JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
										JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
										AND `a`.`config_prod_id` = '.$config_prod_id.'
										and `a`.`show_on_trans` = 1
										and `a`.`config_prod_dtl_status` != 5
										AND a.config_prod_dtl_id NOT IN (
											SELECT
												a.config_prod_dtl_id
											FROM
												prod_trans_dtl_tbl a
											JOIN prod_trans_tbl b ON a.prod_trans_id = b.prod_trans_id
											WHERE
												prod_trans_dtl_status != 5
											AND YEAR (`a`.`prod_trans_dtl_date`) = '.$year.'
											AND b.bc_id = '.$bc_id.'
											AND b.config_prod_id = '.$config_prod_id.'
											GROUP BY
												a.config_prod_dtl_id
										)
								) z
							ORDER BY
								z.order_base asc';
				}
					

				$get_config_prod = $this->admin->get_query($sql);
				//$value = trim($this->input->post('process_type_name')) == 'CLASSIFICATION' ? 'value="0"' : '';
				$config_prod = '';
				if(!empty($get_config_prod)){
					$count = 1;
					foreach($get_config_prod as $row){
						if(trim($this->input->post('process_type_name')) == 'COMMISSARY PRODUCTION'){
							$commi_rawmats_cost = $this->_find_commi_rawmats_cost($row->article_type_id, $row->component_type_id, $row->material_id, $commissary_id, $year);
						}
						if(trim($this->input->post('process_type_name')) == 'SALES BOM'){
							$commi_rawmats_cost = $this->_find_bom_rawmats_cost_on_commi_prod($row->article_type_id, $row->component_type_id, $row->material_id, $bc_id, $year);
						}
						// echo '<pre>';
						// print_r($commi_rawmats_cost);
						// echo '</pre>';
						// exit();
						
						$config_prod_dtl_rate = $row->config_prod_dtl_rate == 0 ? '' : number_format($row->config_prod_dtl_rate,2);
						

						$config_prod .= '<tr><input type="hidden" name="config_prod_dtl_id[]" value="' . encode($row->config_prod_dtl_id) . '">';
						$config_prod .= '<td class="text-center"><a href="#" class="slider-prod"><span class="fa fa-sliders"></span></td>';
						$config_prod .= '<td>' .$row->material_desc.'</td>';
						$config_prod .= '<td>' .$row->material_code.'</td>';
						$config_prod .= '<td>' .$row->unit_name.'</td>';
						$config_prod .= '<td>' . $row->component_type .'</td>';
						for ($i=1; $i <=12 ; $i++) {
							$month = date('M', strtotime($year.'-'.$i.'-01'));
							$config_prod .= '<td><input type="text" name="rate['.$month.'][]" class="txt form-control input-sm text-right" id="rate-'.$month.'" size="6" value="'.$config_prod_dtl_rate.'"></td>';
							$config_prod .= '<td><input type="text" name="cost['.$month.'][]" class="form-control input-sm text-right" size="6" value="'.@$commi_rawmats_cost[$i].'"></td>';
						}
						
						
						$config_prod .= '</tr>';
						$count++;
					}
					if(trim($this->input->post('process_type_name')) == 'CLASSIFICATION'){
						$config_prod .= '<tr class="span7">
			                          <th class="total"></th>
			                          <th class="total"></th>
			                          <th class="total"></th>
			                          <th class="total"></th>
			                          <th class="total text-right">Total%</th>';
		                for ($i=1; $i <=12 ; $i++) {
		                	$config_prod .= '<th class="total text-right" id="total-<?=$i?>"></th>';
		                	$config_prod .= '<th class="total"></th>';
		                }
		                $config_prod .= '</tr>';
					}
					
					$data['config_prod'] = $config_prod;
					$data['result'] = 1;
				} else {
					$data['config_prod'] = 'No data';
					$data['result'] = 1;
				}
			} else {
				$data['result'] = 0;
			}
			
				
		} else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function view_prod_trans($id, $bc_id, $process_type_id, $pick_year){
		$info = $this->_require_login_prod();
		$data['prod_trans_id'] = $id;
		$data['process_type_id'] = $process_type_id;
		$data['bc_id'] = $bc_id;
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => decode($bc_id)), true, 'bc_name');
		if(decode($process_type_id) == 5){
			$data['title'] = 'Sales BOM';
			$module_id = 3;
		} else {
			$data['title'] = 'Production Cost';
			$module_id = 2;			
		}
		$prod_trans_id = decode($id);
		$data['year'] = decode($pick_year);
		$data['pending_lock_status'] = $this->_check_lock_status(array('module_id'	=>	$module_id,	'lock_type_id' => 1, 'lock_location_id'	=>	decode($bc_id),	'lock_status_id'	=>	1, 'lock_year'	=>	decode($pick_year)));
		$sql = 'SELECT
					*
				FROM
					(
						SELECT
							a.*, b.material_code,
							b.material_desc,
							b.material_id,
							d.component_type,
							d.order_base,
							f.amount_type_name,
							g.unit_name,
							h.process_type_id,
							h.config_prod_id,
							i.brand_name,
							j.material_desc as prod_group_name,
							j.material_code as prod_group_code
						FROM
							`prod_trans_dtl_tbl` `a`
						JOIN `material_tbl` `b` ON `a`.`article_id` = `b`.`material_id`
						AND `a`.`article_type_id` = 1
						JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
						JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
						AND `a`.`prod_trans_dtl_status` <> 5 AND `a`.`prod_trans_id` = '.$prod_trans_id.'
						AND `a`.`show_on_trans` = 1 AND `a`.`prod_trans_dtl_status` = 1
						left join `unit_tbl` `g` ON `a`.`unit_id` = `g`.`unit_id`
						JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id`
						JOIN `brand_tbl` `i` ON `h`.`brand_id` = `i`.`brand_id`
						JOIN `material_tbl` `j` ON `h`.`prod_id` = `j`.`material_id`
						UNION ALL
							SELECT
								a.*, b.service_code,
								b.service_desc,
								b.service_code,
								d.component_type,
								d.order_base,
								f.amount_type_name,
								null as unit_name,
								h.process_type_id,
								h.config_prod_id,
								i.brand_name,
								j.material_desc as prod_group_name,
								j.material_code as prod_group_code
							FROM
								`prod_trans_dtl_tbl` `a`
							JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
							AND `a`.`article_type_id` = 2
							JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
							JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
							AND `a`.`prod_trans_dtl_status` <> 5 AND `a`.`prod_trans_id` = '.$prod_trans_id.'
							AND `a`.`show_on_trans` = 1 AND `a`.`prod_trans_dtl_status` = 1
							JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id`
							JOIN `brand_tbl` `i` ON `h`.`brand_id` = `i`.`brand_id`
							JOIN `material_tbl` `j` ON `h`.`prod_id` = `j`.`material_id`
					) z
				group by z.config_prod_dtl_id
				order by z.order_base';
		$data['prod_trans'] = $this->admin->get_query($sql);

		$data['config_prod_id'] = $data['prod_trans'][0]->config_prod_id;
		
		$data['component_type'] = $this->admin->get_data('component_type_tbl', array('component_type_status'	=>	1));
		$join = array(
			'material_group_tbl b' => 'a.material_group_id = b.material_group_id and a.material_status = 1'
		);
		$data['material'] = $this->admin->get_join('material_tbl a', $join, FALSE,'a.material_desc ASC','a.material_code');
		$data['article_type'] = $this->admin->get_data('article_type_tbl', 'article_type_status=1');
		$data['amount_type'] = $this->admin->get_data('amount_type_tbl', 'amount_type_status=1');
		

		$data['content'] = $this->load->view('admin/admin_view_prod_trans_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function edit_prod_trans($prod_trans_id, $config_prod_dtl_id, $bc_id, $year, $process_type_id){
		$info = $this->_require_login_prod();
		$data['prod_trans_id'] = $prod_trans_id;
		$data['config_prod_dtl_id'] = $config_prod_dtl_id;
		$data['bc_id'] = $bc_id;
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => decode($bc_id)), true, 'bc_name');
		$data['year'] = $year;
		$data['process_type_id'] = $process_type_id;
		if(decode($process_type_id) == 5){
			$data['title'] = 'Sales BOM';
			$module_id = 3;
			$load_location = 'Admin/sales-bom-trans/'.$bc_id;
		} else {
			$data['title'] = 'Production Cost';
			$module_id = 2;
			$load_location = 'Admin/prod-trans/'.$bc_id;
		}

		$this->_check_lock_status(array('module_id'	=>	$module_id,	'lock_type_id' => 1, 'lock_location_id'	=>	decode($bc_id),	'lock_status_id'	=>	1, 'lock_year'	=>	decode($year)), $load_location);

		$prod_trans_id = decode($prod_trans_id);
		$config_prod_dtl_id = decode($config_prod_dtl_id);
		
		$sql = 'SELECT
					*
				FROM
					(
						SELECT
							a.*, b.material_code,
							b.material_desc,
							b.material_id,
							d.component_type,
							f.amount_type_name,
							g.unit_name,
							h.process_type_id,
							j.material_desc as prod_group_name,
							j.material_code as prod_group_code,
							i.brand_name
						FROM
							`prod_trans_dtl_tbl` `a`
						JOIN `material_tbl` `b` ON `a`.`article_id` = `b`.`material_id`
						AND `a`.`article_type_id` = 1
						JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
						JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
						
						AND `a`.`prod_trans_dtl_status` <> 5 AND `a`.`prod_trans_id` = '.$prod_trans_id.' and `a`.`config_prod_dtl_id` = '.$config_prod_dtl_id.'
						left join `unit_tbl` `g` ON `a`.`unit_id` = `g`.`unit_id`
						JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id`
						JOIN `brand_tbl` `i` ON `h`.`brand_id` = `i`.`brand_id`
						JOIN `material_tbl` `j` ON `h`.`prod_id` = `j`.`material_id`
						UNION ALL
							SELECT
								a.*, b.service_code,
								b.service_desc,
								b.service_code,
								d.component_type,
								f.amount_type_name,
								null as unit_name,
								h.process_type_id,
								j.material_desc as prod_group_name,
								j.material_code as prod_group_code,
								i.brand_name
							FROM
								`prod_trans_dtl_tbl` `a`
							JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
							AND `a`.`article_type_id` = 2
							JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
							JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
							AND `a`.`prod_trans_dtl_status` <> 5 AND `a`.`prod_trans_id` = '.$prod_trans_id.' and `a`.`config_prod_dtl_id` = '.$config_prod_dtl_id.'
							JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id`
							JOIN `brand_tbl` `i` ON `h`.`brand_id` = `i`.`brand_id`
							JOIN `material_tbl` `j` ON `h`.`prod_id` = `j`.`material_id`
					) z
				group by z.config_prod_dtl_id';

		$data['prod_trans'] = $this->admin->get_query($sql);

		$data['content'] = $this->load->view('admin/admin_edit_prod_trans_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function _get_rawmats_cost($bc_id, $article_id, $date){
		// THIS IS FOR SALES BOM PROCESS
		$info = $this->_require_login_prod();

		$check_mat_group = $this->admin->get_data('material_tbl a', array('material_id' => $article_id), true, 'a.material_group_id');
		$material_group_id = 0;
		if(!empty($check_mat_group)){
			$material_group_id = $check_mat_group->material_group_id;
		}
		
		$join = array(
			'ext_prod_trans_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id'
		);
		$where = array(
			'b.bc_id' => $bc_id,
			'b.ext_prod_trans_status !=' => 5,
			'b.material_id' => $article_id,
			'a.trans_dtl_date' => date('Y-m-d', strtotime($date)),
			'a.ext_prod_trans_dtl_status !=' => 5,
			'a.cost >' => 0
		);
		$check_item_ext = $this->admin->get_join('ext_prod_trans_dtl_tbl a', $join, $row_type=TRUE, $order=false, $group=FALSE, $select = 'a.*', $where);

		if(!empty($check_item_ext)){
			$items = $check_item_ext;
		} else {
			$join = array(
				'prod_trans_tbl b' => 'a.prod_trans_id = b.prod_trans_id'
			);
			$where = array(
				'b.bc_id' => $bc_id,
				'b.prod_trans_status !=' => 5,
				'a.article_id' => $article_id,
				'a.cost >' => 0,
				'a.prod_trans_dtl_date' => date('Y-m-d', strtotime($date)),
				'a.prod_trans_dtl_status !=' => 5
			);
			if($material_group_id == 11 || $material_group_id == 12){ //BY-PRODUCTS
				$where['a.component_type_id'] = 4; //COST RECOVERY
				$where['b.process_type_id'] = 1; //BASIC PROCESSING
			} else {
				if($article_id != 225){ //NOT LIVE BROILER
					$where['a.component_type_id'] = 1; //FINISHED GOODS
					$where['b.process_type_id !='] = 5; //NOT SALES BOM
				} else {
					$where['a.component_type_id'] = 2; //RAWMATS
					$where['b.process_type_id'] = 1; //BASIC PROCESSING
				}
			}
			$check_item = $this->admin->get_join('prod_trans_dtl_tbl a', $join, $row_type=TRUE, $order='b.process_type_id DESC', $group=FALSE, $select = 'a.*, b.process_type_id', $where);
	
			if(!empty($check_item)){
				$items = $check_item;
			} else {
				$items = FALSE;
			}
		}
		
		
		return $items;
	}

	public function add_prod_trans(){
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		$status = 3;
		/*echo '<pre>';
		print_r($_POST);
		echo '</pre>';
		exit();*/
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			
			$bc_id = clean_data(decode($this->input->post('bc_id')));
			$year = clean_data(decode($this->input->post('year')));
			$config_prod = clean_data(decode($this->input->post('config_prod')));
			$process_type_name = clean_data($this->input->post('process_type_name'));
			$brand_id = clean_data(decode($this->input->post('brand_id')));

			
			if(trim($process_type_name) == 'SALES BOM'){
				$module_id = 3;
				$load_location = 'Admin/sales-bom-trans/'.encode($bc_id);
			} else {
				$module_id = 2;
				$load_location = 'Admin/prod-trans/'.encode($bc_id);
			}
			$this->_check_lock_status(array('module_id'	=> $module_id,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$year), $load_location);
			

			if(!empty($bc_id)){
				$id = clean_data($this->input->post('config_prod_dtl_id'));
				$rate = clean_data($this->input->post('rate'));
				$cost = clean_data($this->input->post('cost'));

				if($id == ''){
					$msg = '<div class="alert alert-danger">Error! Empty form submitted, Cannot process transaction!</div>';
					$this->session->set_flashdata('message', $msg);
					if(trim($process_type_name) == 'SALES BOM'){
						$this->session->set_flashdata('message', $msg);
						redirect('admin/sales-bom-trans/' . encode($bc_id));
					} else {
						$this->session->set_flashdata('message', $msg);
						redirect('admin/prod-trans/' . encode($bc_id));
					}
				}
				
				$count = 0;
				//FIND THE DATA IN CONFIG PROD HDR
				$config_tbl_data = $this->admin->get_data('config_prod_tbl', array('config_prod_id' => $config_prod), true);
				//find the dtl that was not display on transaction		
				$config_dtl_tbl_data_hidden = $this->admin->get_data('config_prod_dtl_tbl', array('config_prod_id' => $config_prod, 'show_on_trans'	=>	2, 'config_prod_dtl_status' =>	1));

				$this->db->trans_start();

				if(trim($process_type_name) == 'CLASSIFICATION'){
					//LOOP FOR THE POSTED DATA AND INSERT IT IN HDR
					foreach($id as $row){

						$config_prod_dtl_id = decode($row);
						//FIND THE DATA IN THE CONFIG THAT WAS DISPLAY IN THE TRANSSACTION
						$config_dtl_tbl_data = $this->admin->get_data('config_prod_dtl_tbl', array('config_prod_dtl_id' => $config_prod_dtl_id), true);
						//INSERT THE FINISHED GOODS FOUND IN CONFIG DTL
						$insert_prod_trans = array(
							'config_prod_id' => $config_prod,
							'prod_id' => $config_dtl_tbl_data->article_id,
							'process_type_id' => $config_tbl_data->process_type_id,
							'component_type_id' => $config_tbl_data->component_type_id,
							'brand_id' => $brand_id,
							'bc_id' =>$bc_id,
							'prod_trans_status' => $status,
							'created_by' => $user_id,
							'created_ts' => date_now(),
							'trans_type_id' => 1
						);
						$insert_trans = $this->admin->insert_data('prod_trans_tbl', $insert_prod_trans, true);

						$prod_trans_id = $insert_trans['id'];

						//LOOP THE RESULT OF HIDDEN CONFIG
						foreach ($config_dtl_tbl_data_hidden as $row) {
							//LOOP TO INSERT PER MONTH
							for ($i=1; $i <= 12 ; $i++) {
								$date = $year . '-' .$i.'-01';
								$insert_prod_trans_dtl = array(
									'prod_trans_id' => $insert_trans['id'],
									'config_prod_dtl_id' => $row->config_prod_dtl_id,
									'article_id' => $row->article_id,
									'article_type_id' => $row->article_type_id,
									'component_type_id' => $row->component_type_id,
									'unit_id' => $row->unit_id,
									'amount_type_id' => $row->amount_type_id,
									'show_on_trans' => $row->show_on_trans,
									'prod_trans_dtl_date' =>$date,
									'prod_trans_dtl_status' => 1
								);
								$this->admin->insert_data('prod_trans_dtl_tbl', $insert_prod_trans_dtl, true);
							}
						}
						//CHECK IF EXISTING CONFIG DTL IN PROD TRANS DTL
						$sql = 'SELECT
									a.config_prod_dtl_id
								FROM
									prod_trans_dtl_tbl a
								JOIN prod_trans_tbl b ON a.prod_trans_id = b.prod_trans_id
								WHERE
									prod_trans_dtl_status != 5
								AND YEAR (`a`.`prod_trans_dtl_date`) = '.$year.'
								AND b.bc_id = '.$bc_id.'
								AND b.brand_id = '.$brand_id.'
								AND a.config_prod_dtl_id = '.$config_prod_dtl_id.'
								GROUP BY
									a.config_prod_dtl_id';
						$get_config_prod = $this->admin->check_query($sql);
						if(!$get_config_prod){
							
							
							for ($i=1; $i <= 12 ; $i++) {
								$month = date('M', strtotime($year.'-'.$i.'-01'));
								$rate_amount = $rate[$month][$count];
								$cost_amount = $cost[$month][$count];
								$date = $year . '-' .$i.'-01';
								
								$insert_prod_trans_dtl = array(
									'prod_trans_id' => $insert_trans['id'],
									'config_prod_dtl_id' => $config_prod_dtl_id,
									'article_id' => $config_dtl_tbl_data->article_id,
									'article_type_id' => $config_dtl_tbl_data->article_type_id,
									'component_type_id' => $config_dtl_tbl_data->component_type_id,
									'unit_id' => $config_dtl_tbl_data->unit_id,
									'amount_type_id' => $config_dtl_tbl_data->amount_type_id,
									'show_on_trans' => $config_dtl_tbl_data->show_on_trans,
									'rate' =>$rate_amount,
									'ave_wgt' =>$cost_amount, //MUST BE ALW DYNAMIC
									'prod_trans_dtl_date' =>$date,
									'prod_trans_dtl_status' => 1
								);
								$this->admin->insert_data('prod_trans_dtl_tbl', $insert_prod_trans_dtl, true);
							}
							$count++;
						} else {
							$msg = '<div class="alert alert-danger">Notice! Already exist production transaction!</div>';
							$this->session->set_flashdata('message', $msg);
							if(trim($process_type_name) == 'SALES BOM'){
								$this->session->set_flashdata('message', $msg);
								redirect('admin/sales-bom-trans/' . encode($bc_id));
							} else {
								$this->session->set_flashdata('message', $msg);
								redirect('admin/prod-trans/' . encode($bc_id));
							}
						}
					}
				} else {
					//SEARCH THE PROD TRANS IF CONFIG PROD IS EXISTING
					$sql = 'SELECT
								b.config_prod_id,
								b.prod_trans_id
							FROM
								prod_trans_dtl_tbl a
							JOIN prod_trans_tbl b ON a.prod_trans_id = b.prod_trans_id
							WHERE
								prod_trans_dtl_status != 5
							AND b.process_type_id = '.$config_tbl_data->process_type_id.'
							AND YEAR (`a`.`prod_trans_dtl_date`) = '.$year.'
							AND b.bc_id = '.$bc_id.'
							AND b.config_prod_id = '.$config_prod.'
							AND b.brand_id = '.$brand_id.'
							GROUP BY
								b.config_prod_id';
					$get_config = $this->admin->get_query($sql, true);
					if($get_config){
						$insert_trans['id'] = $get_config->prod_trans_id;
						//SKIP THE HIDDEN CONFIG AND INSERT THE DISPLAYED CONFIG INTO THE EXISTING TRANSACTION
						goto insert_displayed_trans;

					} else {
						$insert_prod_trans = array(
							'config_prod_id' => $config_prod,
							'prod_id' => $config_tbl_data->prod_id,
							'process_type_id' => $config_tbl_data->process_type_id,
							'component_type_id' => $config_tbl_data->component_type_id,
							'brand_id' => $brand_id,
							'bc_id' =>$bc_id,
							'prod_trans_status' => $status,
							'created_by' => $user_id,
							'created_ts' => date_now(),
							'trans_type_id' => 1
						);
						$insert_trans = $this->admin->insert_data('prod_trans_tbl', $insert_prod_trans, true);
					}

					$prod_trans_id = $insert_trans['id'];
					
					//LOOP THE RESULT OF HIDDEN CONFIG
					foreach ($config_dtl_tbl_data_hidden as $row) {
						//LOOP TO INSERT PER MONTH
						for ($i=1; $i <= 12 ; $i++) {
							//$rate_amount = $rate[$i][$count];
							//$cost_amount = $cost[$i][$count];
							$date = $year . '-' .$i.'-01';
							$cost = 0;
							if($config_tbl_data->process_type_id == 5){//SALES BOM
								if($row->component_type_id == 21){ //COST OF SALES
									$check_item = $this->_get_rawmats_cost($bc_id, $row->article_id, $date);
									
									if($check_item){
										$cost = $check_item->cost;
										$ave_wgt = $check_item->ave_wgt;
									} else {
										$cost = 0;
										$ave_wgt = 0;
									}
								}
							}
							$insert_prod_trans_dtl = array(
								'prod_trans_id' => $insert_trans['id'],
								'config_prod_dtl_id' => $row->config_prod_dtl_id,
								'article_id' => $row->article_id,
								'article_type_id' => $row->article_type_id,
								'component_type_id' => $row->component_type_id,
								'unit_id' => $row->unit_id,
								'amount_type_id' => $row->amount_type_id,
								'show_on_trans' => $row->show_on_trans,
								'cost' => $cost,
								'initial_cost' => $cost,
								'prod_trans_dtl_date' =>$date,
								'prod_trans_dtl_status' => 1
							);

							if($config_tbl_data->process_type_id == 5){
								if($row->component_type_id == 21){ //COST OF SALES
									$insert_prod_trans_dtl['ave_wgt'] = $ave_wgt;
								}
							}
							$this->admin->insert_data('prod_trans_dtl_tbl', $insert_prod_trans_dtl, true);
						}
					}

					insert_displayed_trans:
					$count = 0;
					$cost = clean_data($this->input->post('cost'));
					foreach($id as $row){

						$config_prod_dtl_id = decode($row);

						$sql = 'SELECT
									a.config_prod_dtl_id
								FROM
									prod_trans_dtl_tbl a
								JOIN prod_trans_tbl b ON a.prod_trans_id = b.prod_trans_id
								WHERE
									a.prod_trans_dtl_status != 5
								AND b.prod_trans_status != 5
								AND b.process_type_id = '.$config_tbl_data->process_type_id.'
								AND YEAR (`a`.`prod_trans_dtl_date`) = '.$year.'
								AND b.bc_id = '.$bc_id.'
								AND b.brand_id = '.$brand_id.'
								AND a.config_prod_dtl_id = '.$config_prod_dtl_id.'
								GROUP BY
									a.config_prod_dtl_id';
						$get_config_prod = $this->admin->check_query($sql);
						if(!$get_config_prod){
							
							//FIND THE DATA IN THE CONFIG THAT WAS DISPLAYED IN THE TRANSACTION
							$config_dtl_tbl_data = $this->admin->get_data('config_prod_dtl_tbl', array('config_prod_dtl_id' => $config_prod_dtl_id), true);
							for ($i=1; $i <= 12 ; $i++) {
								$month = date('M', strtotime($year.'-'.$i.'-01'));
								$rate_amount = $rate[$month][$count];
								$cost_amount = $cost[$month][$count];
								$date = $year . '-' .$i.'-01';

								if($config_tbl_data->process_type_id == 5){//SALES BOM
									if($config_dtl_tbl_data->component_type_id == 21){ //COST OF SALES
										$ave_wgt = 0;
										if($cost_amount == '' || $cost_amount <= 0){
											$check_item = $this->_get_rawmats_cost($bc_id, $config_dtl_tbl_data->article_id, $date);
											if($check_item){
												$cost_amount = $check_item->cost;
												$ave_wgt = $check_item->ave_wgt;
											}
										}
									}
								}
								
								$insert_prod_trans_dtl = array(
									'config_prod_dtl_id' => $config_prod_dtl_id,
									'prod_trans_id' => $insert_trans['id'],
									'article_id' => $config_dtl_tbl_data->article_id,
									'article_type_id' => $config_dtl_tbl_data->article_type_id,
									'component_type_id' => $config_dtl_tbl_data->component_type_id,
									'unit_id' => $config_dtl_tbl_data->unit_id,
									'amount_type_id' => $config_dtl_tbl_data->amount_type_id,
									'show_on_trans' => $config_dtl_tbl_data->show_on_trans,
									'rate' =>$rate_amount,
									'cost' =>$cost_amount,
									'initial_cost' =>$cost_amount,
									'prod_trans_dtl_date' =>$date,
									'prod_trans_dtl_status' => 1
								);

								if($config_tbl_data->process_type_id == 5){//SALES BOM
									if($config_dtl_tbl_data->component_type_id == 21){ //COST OF SALES

										$insert_prod_trans_dtl['ave_wgt'] = $ave_wgt;
									}
								}
								$this->admin->insert_data('prod_trans_dtl_tbl', $insert_prod_trans_dtl, true);
							}
							$count++;
						} else {
							$msg = '<div class="alert alert-danger">Notice! Already exist material group transaction!</div>';
							$this->session->set_flashdata('message', $msg);
							if(trim($process_type_name) == 'SALES BOM'){
								$this->session->set_flashdata('message', $msg);
								redirect('admin/sales-bom-trans/' . encode($bc_id));
							} else {
								$this->session->set_flashdata('message', $msg);
								redirect('admin/prod-trans/' . encode($bc_id));
							}
							
						}
					}
				}

				$prod_trans_id = $insert_trans['id'];
				$join_prod_trans = array('process_type_tbl b' => 'a.process_type_id = b.process_type_id AND a.prod_trans_id = ' . $prod_trans_id);
				$check_prod_trans = $this->admin->check_join('prod_trans_tbl a', $join_prod_trans, TRUE);
				if($check_prod_trans['result'] == TRUE){
					if($check_prod_trans['info']->process_type_name == 'SALES BOM'){
						$material_id = $check_prod_trans['info']->prod_id;
						$brand_id = $check_prod_trans['info']->brand_id;
						$this->compute_bom_material($bc_id, $year, $material_id, $brand_id);
					}
				}

				if(trim($process_type_name) == 'BASIC PROCESSING'){
					$this->create_by_product_on_sales_bom($bcID, $year, 0);
				}

				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success"><strong>Production Transaction successfully added.</strong></div>';
				}
				if(trim($process_type_name) == 'SALES BOM'){
					$this->session->set_flashdata('message', $msg);
					redirect('admin/sales-bom-trans/' . encode($bc_id));
				} else {
					$this->session->set_flashdata('message', $msg);
					redirect('admin/prod-trans/' . encode($bc_id));
				}
					
			}else{
				echo 'Something wrong';
			}
		}
	}

	public function create_by_product_on_sales_bom($bcID, $year, $output_msg = 1){
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);

		// QUERY THE BY PRODUCTS IN THE BASIC PROCESSING PROD TRANS
		$where = array(
								
			'a.prod_trans_status !='=> 5,
			'a.bc_id'=> decode($bcID),
			'a.process_type_id'=> 1,
			'YEAR(b.prod_trans_dtl_date)'=> $year,
			'b.prod_trans_dtl_status' => 1,
			'b.qty >' => 0,
			'b.cost <>' => 0,
			'b.component_type_id'=> 4, //COST RECOVERY
			'c.material_group_id' => 11 //BY PRODUCTS GROUP
		);
		$join = array(
			'prod_trans_dtl_tbl b' => 'a.prod_trans_id = b.prod_trans_id',
			'material_tbl c' => 'b.article_id = c.material_id'
		);

		$order_by = 'b.article_id, b.prod_trans_dtl_date';

		$by_product_on_production = $this->admin->get_join('prod_trans_tbl a', $join, false, $order_by, false, 'a.*, b.*', $where, false);
		

		// LOOP THE FOUND BY PRODUCTS AND CHECK FOR CONFIG PROD ENTRY
		$article_id = '';
		$has_sync = false;
		$has_sync_ctr = 0;
		$prod_trans_id = '';
		foreach($by_product_on_production as $row){
			if($article_id != $row->article_id){
				$hdr_ctr = 1;
				// CHECK BY PRODUCT FOR CONFIG PROD ENTRY OF SALES BOM
				$where = array(
								
					'a.config_prod_status !='=> 5,
					'a.prod_id'=> $row->article_id,
					'a.process_type_id'=> 5,
					'b.config_prod_dtl_status' => 1
				);
				$join = array(
					'config_prod_dtl_tbl b' => 'a.config_prod_id = b.config_prod_id'
				);
		
				$order_by = 'b.config_prod_dtl_id';
				$group_by = 'a.config_prod_id';
		
				$checking_config_prod = $this->admin->get_join('config_prod_tbl a', $join, false, $order_by, $group_by, 'a.*, b.*', $where, false);
				if(!empty($checking_config_prod)){
					$config_prod_id = $checking_config_prod[0]->config_prod_id;
				} else {
					//INSERT CONFIG PROD
					$set_config_prod = array(
						'prod_id' => $row->article_id,
						'process_type_id' => 5,
						'component_type_id' => 1,
						'config_prod_status' => 1,
						'created_by' => $user_id,
						'created_ts' => date_now()
					);
					$insert_config_prod = $this->admin->insert_data('config_prod_tbl', $set_config_prod, true);
					$config_prod_id = @$insert_config_prod['id'];

					
					$join = array(
						'material_unit_tbl b' => 'a.material_id = b.material_id and a.material_id ='.$row->article_id.' and a.material_status = 1',
					);
					$material_unit_checking = $this->admin->check_join('material_tbl a', $join, TRUE);
					if($material_unit_checking['result']){
						$valuation_unit = $material_unit_checking['info']->valuation_unit;
					} else {
						$valuation_unit = NULL;
					}
					
					
					$set_config_prod_dtl = array(
						'config_prod_id' => $config_prod_id,
						'article_id' => $row->article_id,
						'article_type_id' => 1,
						'component_type_id' => 21, //COST OF SALES
						'unit_id' => $valuation_unit,
						'amount_type_id' => 2,
						'config_prod_dtl_status' => 1,
						'show_on_trans' => 1,
						'created_by' => $user_id,
						'created_ts' => date_now()
					);
					$insert_config_prod_dtl = $this->admin->insert_data('config_prod_dtl_tbl', $set_config_prod_dtl, true);
					
					$set_config_prod_dtl = array(
						'config_prod_id' => $config_prod_id,
						'article_id' => $row->article_id,
						'article_type_id' => 1,
						'component_type_id' => 20, //SALES REVENUE
						'unit_id' => $valuation_unit,
						'amount_type_id' => 2,
						'config_prod_dtl_status' => 1,
						'show_on_trans' => 1,
						'created_by' => $user_id,
						'created_ts' => date_now()
					);
					$insert_config_prod_dtl = $this->admin->insert_data('config_prod_dtl_tbl', $set_config_prod_dtl, true);
				}

				// IF THE BY-PROD HAS CONFIG PROD
				$where = array(
					'a.prod_trans_status !='=> 5,
					'a.bc_id'=> decode($bcID),
					'YEAR(b.prod_trans_dtl_date)'=> $year,
					'b.prod_trans_dtl_status' => 1,
					'a.process_type_id' => 5, //SALES BOM
					'a.prod_id'=> $row->article_id
				);
				$join = array(
					'prod_trans_dtl_tbl b' => 'a.prod_trans_id = b.prod_trans_id'
				);
		
				$order_by = false;
				$group_by = 'a.prod_id';
		
				$check_existing_sales_bom = $this->admin->get_join('prod_trans_tbl a', $join, true, $order_by, $group_by, 'a.*, b.*', $where, false);

				if(empty($check_existing_sales_bom)){
					// IF THE BY-PROD HAD NO SALES BOM TRANS, PROCEED TO INSERT HDR PROD TRANS
					$set_prod_trans_tbl = array(
						'bc_id' => decode($bcID),
						'config_prod_id' => $config_prod_id,
						'prod_id' => $row->article_id,
						'brand_id' => 15,
						'process_type_id' => 5,
						'component_type_id' => 5,
						'prod_trans_status' => 3,
						'trans_type_id' => 1,
						'created_by' => $user_id,
						'created_ts' => date_now()
					);
					$insert_trans = $this->admin->insert_data('prod_trans_tbl', $set_prod_trans_tbl, true);

					$prod_trans_id = @$insert_trans['id'];
					$has_sync = true;
					$has_sync_ctr++;
				}
				
			}

			//RECHECK CONFIG PROD OF BY PRODUCT
			$where = array(
								
				'a.config_prod_status !='=> 5,
				'a.prod_id'=> $row->article_id,
				'a.process_type_id'=> 5,
				'b.config_prod_dtl_status' => 1,
			);
			$join = array(
				'config_prod_dtl_tbl b' => 'a.config_prod_id = b.config_prod_id'
			);
	
			$order_by = 'b.config_prod_dtl_id';
			$group_by = false;
	
			$checking_config_prod = $this->admin->get_join('config_prod_tbl a', $join, false, $order_by, $group_by, 'a.*, b.*', $where, false);

			//PROCEED TO INSERT DTL PROD TRANS 
			if(!empty($checking_config_prod)){
				if($prod_trans_id){
					foreach($checking_config_prod as $row_config){
						
						if($row_config->component_type_id == 21 || $row_config->component_type_id == 20){
							$cost = $row->cost;
							$qty = $row->qty;
							$total_cost = $row->total_cost;
						} else {
							$cost = NULL;
							$qty = NULL;
							$total_cost = NULL;
						}
						$set_prod_trans_dtl_tbl = array(
							'prod_trans_id' => $prod_trans_id,
							'config_prod_dtl_id' => $row_config->config_prod_dtl_id,
							'article_id' => $row_config->article_id,
							'article_type_id' => $row_config->article_type_id,
							'component_type_id' => $row_config->component_type_id,
							'unit_id' => $row_config->unit_id,
							'amount_type_id' => $row_config->amount_type_id,
							'show_on_trans' => $row_config->show_on_trans,
							'qty' => $qty,
							'cost' => $cost,
							'initial_cost' => $cost,
							'total_cost' => $total_cost,
							'prod_trans_dtl_date' => $row->prod_trans_dtl_date,
							'prod_trans_dtl_status' => 1,
	
						);
	
						$insert_dtl_trans = $this->admin->insert_data('prod_trans_dtl_tbl', $set_prod_trans_dtl_tbl, true);
					}
				}
			}
			
			$hdr_ctr++;

			$article_id = $row->article_id;
		}

		if($output_msg){

			if($has_sync){
				$msg = '<div class="alert alert-success"><strong>'.$has_sync_ctr.' transaction of by-products successfully synced on Sales BOM.</strong></div>';
			} else {
				$msg = '<div class="alert alert-danger"><strong>No data needed to sync.</strong></div>';
			}
	
			$this->session->set_flashdata('message', $msg);
			redirect('admin/sales-bom-trans/'.$bcID);
		}

	}

	public function update_prod_trans(){
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$bc_id = clean_data(decode($this->input->post('bc_id')));
			$commissary_id = clean_data($this->input->post('commissary_id'));
			$year = clean_data(decode($this->input->post('year')));
			$process_type_id = clean_data(decode($this->input->post('process_type_id')));
			$prod_trans_id = clean_data(decode($this->input->post('prod_trans_id')));
			

			if($process_type_id == 5){ //SALES BOM
				$module_id = 3;
				$load_location = 'Admin/sales-bom-trans/'.encode($bc_id);
			} else {
				$module_id = 2;
				$load_location = 'Admin/prod-trans/'.encode($bc_id);
			}
			$this->_check_lock_status(array('module_id'	=>	$module_id,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$year), $load_location);

			if(!empty($bc_id) && !empty($prod_trans_id)){
				$id = clean_data($this->input->post('config_prod_dtl_id'));
				$rate = clean_data($this->input->post('rate'));
				$cost = clean_data($this->input->post('cost'));
				$article_id = clean_data($this->input->post('article_id'));
				$component_type_id = clean_data($this->input->post('component_type_id'));
				$count = 0;
				$this->db->trans_start();
				foreach($id as $row){

					$config_prod_dtl_id = decode($row);

					//update header transaction
					$update_prod_trans = array(
						'modified_by' => $user_id,
						'modified_ts' => date_now()
					);
					$where = array(
						'prod_trans_id' => $prod_trans_id
					);
					$this->admin->update_data('prod_trans_tbl', $update_prod_trans, $where);

					for ($i=1; $i <= 12 ; $i++) {
						
						$rate_amount = $rate[$i][$count];
						$cost_amount = $cost[$i][$count];


						$date = $year . '-' .$i.'-01';

						if($process_type_id == 5){//SALES BOM
							if($component_type_id[$count] == 21){ //COST OF SALES
								$ave_wgt = 0;
								if($cost_amount == '' || $cost_amount <= 0){
									$check_item = $this->_get_rawmats_cost($bc_id, $article_id[$count], $date);
									
									if($check_item){
										$cost_amount = $check_item->cost;
										$ave_wgt = $check_item->ave_wgt;
									}
								}
							}
						}
						
						if($process_type_id == 2){ //CLASSIFICATION
							$update_prod_trans_dtl = array(
								'rate' =>$rate_amount,
								'ave_wgt' =>$cost_amount
							); //MUST BE CHANGED TO ALW DYNAMIC
						} else {
							$update_prod_trans_dtl = array(
								'rate' =>$rate_amount,
								'cost' =>$cost_amount,
								'initial_cost' =>$cost_amount,
							); //MUST BE CHANGED TO ALW DYNAMIC

							if($process_type_id == 5){ //SALES BOM
								if($component_type_id[$count] == 21){
									$update_prod_trans_dtl['ave_wgt'] = $ave_wgt;
								}
							}
						}

						
						$where = array(
							'config_prod_dtl_id' => $config_prod_dtl_id,
							'prod_trans_id' => $prod_trans_id,
							'MONTH(prod_trans_dtl_date)' => $i,
							'YEAR(prod_trans_dtl_date)' => $year,
						);
						$this->admin->update_data('prod_trans_dtl_tbl', $update_prod_trans_dtl, $where);
					}
					$count++;
				}

				if($process_type_id == 5){ //SALES BOM
					$prod_trans_tbl_data = $this->admin->get_data('prod_trans_tbl', array('prod_trans_id' => $prod_trans_id), true, 'brand_id, prod_id');
					$material_id = $prod_trans_tbl_data->prod_id;;
					$brand_id = $prod_trans_tbl_data->brand_id;;
					$this->compute_bom_material($bc_id, $year, $material_id, $brand_id);
				}

				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success"><strong>Production Transaction successfully updated.</strong></div>';
				}
				
				$this->session->set_flashdata('message', $msg);
				redirect('admin/view-prod-trans/' . encode($prod_trans_id) .'/'. encode($bc_id) .'/'. encode($process_type_id).'/'. encode($year));
			} else {
				echo 'Something wrong on bc';
			}
		} else{
			echo 'Something wrong';
		}
	}

	/*public function view_cost_sheet($prod_trans_id, $bc_id, $year, $process_type_id){
		
		$info = $this->_require_login_prod();
		$data['prod_trans_id'] = $prod_trans_id;
		$data['process_type_id'] = $process_type_id;
		$prod_trans_id = decode($prod_trans_id);
		$data['bc_id'] = $bc_id;
		$data['year'] = $year;
		$data['title'] = 'Production Cost';
		$process_type_id = decode($process_type_id);
		$bc_id = decode($bc_id);

		$data{'live_sales'} = $this->get_live_sales($bc_id, decode($year));

		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		
		if($process_type_id == 5){
			$order_by = " z.order_base_sales, z.material_desc";
		} else {
			$order_by = " z.order_base, z.material_desc";
		}
		$sql = "SELECT
					*
				FROM
					(
						SELECT
							a.*, b.material_code,
							b.material_desc,
							b.material_id,
							d.component_type,
							d.order_base,
							d.order_base_sales,
							f.amount_type_name,
							g.unit_name,
							i.process_type_id,
							i.process_type_name,
							MONTH (a.prod_trans_dtl_date) AS trans_month,
							j.unit_name as buom_unit
						FROM
							`prod_trans_dtl_tbl` `a`
						JOIN `material_tbl` `b` ON `a`.`article_id` = `b`.`material_id`
						AND `a`.`article_type_id` = 1
						JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
						JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
						AND `a`.`prod_trans_dtl_status` <> 5
						AND `a`.`prod_trans_id` = ".$prod_trans_id."
						LEFT JOIN `unit_tbl` `g` ON `a`.`unit_id` = `g`.`unit_id`
						JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id`
						JOIN `process_type_tbl` `i` ON `h`.`process_type_id` = `i`.`process_type_id`
						JOIN `unit_tbl` `j` ON `b`.`unit_id` = `j`.`unit_id`
						UNION ALL
							SELECT
								a.*, b.service_id,
								b.service_desc,
								b.service_code,
								d.component_type,
								d.order_base,
								d.order_base_sales,
								f.amount_type_name,
								NULL AS unit_name,
								i.process_type_id,
								i.process_type_name,
								MONTH (a.prod_trans_dtl_date) AS trans_month,
								NULL as buom_unit
							FROM
								`prod_trans_dtl_tbl` `a`
							JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
							AND `a`.`article_type_id` = 2
							JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
							JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
							AND `a`.`prod_trans_dtl_status` <> 5
							AND `a`.`prod_trans_id` = ".$prod_trans_id."
							JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id`
							JOIN `process_type_tbl` `i` ON `h`.`process_type_id` = `i`.`process_type_id`
					) z
				ORDER BY".$order_by;
		$data['prod_trans'] = $this->admin->get_query($sql);

		$sql = "SELECT
					a.*, b.service_id,
					b.service_desc,
					b.service_code,
					d.component_type,
					d.order_base,
					f.amount_type_name,
					NULL AS unit_name,
					MONTH (a.prod_trans_dtl_date) AS trans_month
				FROM
					`prod_trans_dtl_tbl` `a`
				JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
				AND `a`.`article_type_id` = 2
				JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
				JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
				AND `a`.`prod_trans_dtl_status` <> 5
				AND `a`.`prod_trans_id` = ".$prod_trans_id." and a.component_type_id = 7";
		$data['config_rate'] = $this->admin->get_query($sql);


		foreach($data['prod_trans'] as $row){
			//GET THE RAWMATS FOR THE CLASSIFICATION PROCESS TYPE
			if($row->process_type_id == 2){
				
				if($row->component_type_id == 2){
					$prod_id = $row->article_id;
				}
				$data['fdc_details'] = get_basic_processing_details($prod_id, $bc_id, 1, $year);
			}
		}

		$data['content'] = $this->load->view('admin/admin_view_cost_sheet_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}*/

	public function view_cost_sheet($prod_trans_id, $bc_id, $year, $process_type_id, $mat_id){
		ini_set('max_execution_time', 0);
		ini_set('memory_limit','2048M');
		$info = $this->_require_login_prod();
		$data['prod_trans_id'] = $prod_trans_id;
		$data['process_type_id'] = $process_type_id;
		$prod_trans_id = decode($prod_trans_id);
		$data['bc_id'] = $bc_id;
		$data['year'] = $year;
		
		$data['title'] = 'Production Cost';
		$process_type_id = decode($process_type_id);
		$bc_id = decode($bc_id);
		$mat_id = decode($mat_id);
		
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');

		if($process_type_id == 2 || $process_type_id == 3 || $process_type_id == 4 || $process_type_id == 6 || $process_type_id == 7 || $process_type_id == 8 ){
			$data['sample'] = $this->cost_sheet_computation($bc_id, $mat_id, $prod_trans_id, $process_type_id, $year);
			
			$data['content'] = $this->load->view('admin/admin_view_cost_sheet_2_content', $data , TRUE);
			$this->load->view('admin/templates', $data);
		} else {

			$data['live_sales'] = $this->get_live_sales($bc_id, decode($year));
			
			if($process_type_id == 5){
				$order_by = " z.order_base_sales, z.material_desc";
			} else {
				$order_by = " z.order_base, z.material_desc";
			}
			$sql = "SELECT
						*
					FROM
						(
							SELECT
								a.*, b.material_code,
								b.material_desc,
								b.material_id,
								d.component_type,
								d.order_base,
								d.order_base_sales,
								f.amount_type_name,
								g.unit_name,
								i.process_type_id,
								i.process_type_name,
								MONTH (a.prod_trans_dtl_date) AS trans_month,
								j.unit_name as buom_unit
							FROM
								`prod_trans_dtl_tbl` `a`
							JOIN `material_tbl` `b` ON `a`.`article_id` = `b`.`material_id`
							AND `a`.`article_type_id` = 1
							JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
							JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
							AND `a`.`prod_trans_dtl_status` <> 5
							AND `a`.`prod_trans_id` = ".$prod_trans_id."
							LEFT JOIN `unit_tbl` `g` ON `a`.`unit_id` = `g`.`unit_id`
							JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id`
							JOIN `process_type_tbl` `i` ON `h`.`process_type_id` = `i`.`process_type_id`
							JOIN `unit_tbl` `j` ON `b`.`unit_id` = `j`.`unit_id`
							UNION ALL
								SELECT
									a.*, b.service_id,
									b.service_desc,
									b.service_code,
									d.component_type,
									d.order_base,
									d.order_base_sales,
									f.amount_type_name,
									NULL AS unit_name,
									i.process_type_id,
									i.process_type_name,
									MONTH (a.prod_trans_dtl_date) AS trans_month,
									NULL as buom_unit
								FROM
									`prod_trans_dtl_tbl` `a`
								JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
								AND `a`.`article_type_id` = 2
								JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
								JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
								AND `a`.`prod_trans_dtl_status` <> 5
								AND `a`.`prod_trans_id` = ".$prod_trans_id."
								JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id`
								JOIN `process_type_tbl` `i` ON `h`.`process_type_id` = `i`.`process_type_id`
						) z
					ORDER BY".$order_by;
			$data['prod_trans'] = $this->admin->get_query($sql);

			$sql = "SELECT
						a.*, b.service_id,
						b.service_desc,
						b.service_code,
						d.component_type,
						d.order_base,
						f.amount_type_name,
						NULL AS unit_name,
						MONTH (a.prod_trans_dtl_date) AS trans_month
					FROM
						`prod_trans_dtl_tbl` `a`
					JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
					AND `a`.`article_type_id` = 2
					JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
					JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
					AND `a`.`prod_trans_dtl_status` <> 5
					AND `a`.`prod_trans_id` = ".$prod_trans_id." and a.component_type_id = 7";
			$data['config_rate'] = $this->admin->get_query($sql);


			foreach($data['prod_trans'] as $row){
				//GET THE RAWMATS FOR THE CLASSIFICATION PROCESS TYPE
				if($row->process_type_id == 2){
					
					if($row->component_type_id == 2){
						$prod_id = $row->article_id;
					}
					$data['fdc_details'] = get_basic_processing_details($prod_id, $bc_id, 1, $year);
				}
			}
			
			/*echo '<pre>';
			print_r($result);
			echo '</pre>';
			exit();*/

			$data['content'] = $this->load->view('admin/admin_view_cost_sheet_content', $data , TRUE);
			$this->load->view('admin/templates', $data);

		}
	}

	public function cost_sheet_computation($bc_id, $mat_id, $prod_trans_id, $process_type_id, $year){
		
		$data['process_type_id'] = $process_type_id;
		$data['prod_trans_id'] = $prod_trans_id;
		//$year = $this->_active_year();
		$year = decode($year);
		
		$bc = $bc_id;

		$r = $mat_id;

		$table = '';
		$classification_table = '';
		$cutting_table = '';
		$individual_packaging_table = '';
		$cutsup_packaging_table = '';
		$neckless_table = '';
		for ($i=1; $i <=12 ; $i++) {
			$date = $year.'-'.$i.'-01';
			//echo $date;
			//exit();

			$sql_qry = "SELECT * FROM (
				SELECT
				@r as _id,

				@mat := IFNULL(
					(SELECT d.material_desc
					FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d
					   WHERE a.prod_trans_id = b.prod_trans_id
					   AND b.component_type_id = c.component_type_id
					AND a.prod_id = d.material_id
					AND a.prod_id=_id
					AND (b.component_type_id = 21 OR b.component_type_id = 2)
					AND a.prod_trans_status = 3
					AND a.bc_id = @bc
					AND b.prod_trans_dtl_date = @prod_date
					AND a.process_type_id != 5
					LIMIT 1
					)
				, '') as mat_desc,

				@unit := IFNULL(
					(SELECT f.unit_name
					FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_unit_tbl e, unit_tbl f
					   WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
					AND a.prod_id=_id AND a.prod_id = d.material_id AND (b.component_type_id = 21
					OR b.component_type_id = 2) AND a.prod_trans_status = 3 AND d.material_id = e.material_id AND e.valuation_unit = f.unit_id AND e.material_unit_status = 1
					AND a.bc_id = @bc AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5
					LIMIT 1
					)
				, '') as mat_unit,	

				@components :=(
					SELECT c.component_type
					FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d
					   WHERE a.prod_trans_id = b.prod_trans_id
					   AND b.component_type_id = c.component_type_id
					AND a.prod_id=_id
					AND a.prod_id = d.material_id
					AND a.prod_trans_status = 3
					AND (b.component_type_id = 21
					OR b.component_type_id = 2)
					AND a.bc_id = @bc
					AND b.prod_trans_dtl_date = @prod_date
					AND a.process_type_id != 5
					LIMIT 1
				) as mat_comp,
						   
				@process :=(
					SELECT b.process_type_name
					FROM prod_trans_tbl a, process_type_tbl b, prod_trans_dtl_tbl c
					WHERE a.prod_id=_id
					AND a.process_type_id = b.process_type_id
					AND a.prod_trans_id = c.prod_trans_id
					AND a.prod_trans_status = 3
					AND a.bc_id = @bc
					AND a.process_type_id != 5
					AND c.prod_trans_dtl_date = @prod_date
					GROUP BY b.process_type_name
					LIMIT 1
				) as mat_process,
				
				(
					SELECT @r := b.article_id
					FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c
					   WHERE a.prod_trans_id = b.prod_trans_id
					AND b.component_type_id = c.component_type_id
					AND a.prod_id = _id
					AND (b.component_type_id = 21 OR b.component_type_id = 2)
					AND a.prod_trans_status = 3
					AND a.bc_id = @bc
					AND b.prod_trans_dtl_date = @prod_date
					AND a.process_type_id != 5
					LIMIT 1
				) as parent,
				
				@l := @l + 1 AS level
				
			FROM
				(
				   SELECT
					@r := ".$r.",
					@l := 1,
					@bc := " . $bc . ",
					@prod_date := '".$date."',
					@brand := 1,
					@cl := 0,
					@mat := 'test',
					@rate := 0,
					@cost := 0,
					@process := '',
					@unit := ''
				) vars,
				
				(SELECT a.* from prod_trans_tbl a INNER JOIN prod_trans_dtl_tbl b on a.prod_trans_id = b.prod_trans_id  where YEAR(b.prod_trans_dtl_date) = ".$year." AND a.bc_id = ".$bc.") prod_trans_tbl
				WHERE @mat != '' HAVING @r != 225
				
				
			) as noi_data
				
			ORDER BY level DESC";

			$sample = $this->db->query($sql_qry);

			//echo $this->db->last_query();
			//exit();
			$result = $sample->result();

			$fresh_dressed_cost = 0;
		
			foreach($result as $row){
				
				$prod_id = $row->_id;
				$mat_unit = $row->mat_unit;
				$process = $row->mat_process;
				$parent_id = $row->parent;
				$mat_desc = $row->mat_desc;

				/* if($process == "BASIC PROCESSING"){

					$sp = "CALL get_noi_basic(?,?,@total_qty,@total_kgs,@ave_wt,@cost_per_head,@total_cost_amount,@live_sales_alw, @live_cost)";
					$params = array(
						'PARAM_1' => $bc,
						'PARAM_2' => $date,
					);

					

					$sample = $this->db->query($sp, $params);

					$get_data = $this->db->query('SELECT @total_qty as total_qty, @total_kgs as total_kgs, @ave_wt as ave_wt, @cost_per_head as cost_per_head, @total_cost_amount as total_cost_amount, @test as test');

					
					$basic =  $get_data->row();
					
					$total_qty = round($basic->total_qty,0);

					$basic_total_qty = $total_qty;
					
					$total_kgs = round($basic->total_kgs,2);
					
					$basic_total_kgs = $total_kgs;
					
					$ave_wt = round($basic->ave_wt,3);
					
					$basic_ave_wgt = $ave_wt;

					$cost_per_head = round($basic->cost_per_head,3);

					$basic_cost_per_head = $cost_per_head;
					
					$total_cost_amount = round($basic->total_cost_amount,3);

					$basic_total_cost_amount = $total_cost_amount;

					


					
				} */
				if($process == "CLASSIFICATION"){

					$where = array(
								
						'a.prod_trans_status !='=> 5,
						'a.prod_id'=> $parent_id,
						'c.prod_trans_dtl_date'=> $date,
						'a.bc_id'=> $bc,
						'c.component_type_id'=> 1
					);
					$join = array(
						'prod_trans_dtl_tbl c' => 'a.prod_trans_id = c.prod_trans_id'
					);
		
					$parent_trans = $this->admin->get_join('prod_trans_tbl a', $join, true, false, false, 'c.prod_trans_id, c.prod_trans_dtl_id, c.article_id, c.qty, c.wgt, c.ave_wgt, c.cost, c.total_cost', $where, false);

					if(!empty($parent_trans)){
						$parent_prod_trans_id = $parent_trans->prod_trans_id;
						$parent_prod_trans_dtl_id = $parent_trans->prod_trans_dtl_id;
						$total_qty = round($parent_trans->qty, 0);
						$total_kgs = $parent_trans->wgt;
						$alw = $parent_trans->ave_wgt;
						$cost = round($parent_trans->cost, 2);
						$total_cost_amount = $parent_trans->total_cost;
					} else {
						$parent_prod_trans_id = 0;
						$parent_prod_trans_dtl_id = 0;
						$total_qty = 0;
						$total_kgs = 0;
						$alw = 0;
						$cost = 0;
						$total_cost_amount = 0;
					}


					$get_prod_det = $this->admin->get_query("SELECT * FROM (SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, b.ave_wgt, c.material_desc, c.material_code, b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, g.unit_name as mat_det_unit, h.unit_name as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f, unit_tbl g, unit_tbl h WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND c.unit_id = g.unit_id AND b.unit_id = h.unit_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

						UNION ALL

						SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, b.ave_wgt, c.service_desc, '', b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, '' as mat_det_unit, '' as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "') as a order by a.order_base", false);

					$classification_table .= '<div class="col-lg-12"><div class="table-responsive"><table class="table table-hover table-bordered table-stripe" id="tbl-view-cost-sheet-'.$i.'"><thead><tr><th colspan="10" class="text-center">'.date('F Y', strtotime($date)).'</th></tr><tr><th  width="20%">Item Name</th><th  width="auto">Base Unit</th><th  width="auto">Val. Unit</th><th  width="auto">Component Type</th><th  width="auto">Rate</th><th  width="auto">Qty</th><th  width="auto">Wgt</th><th  width="auto">Ave. Wgt</th><th  width="auto">Cost/Price</th><th  width="auto">Amount</th></tr></thead><tbody>';
					
					foreach($get_prod_det as $row_det){
						$mat_details = $row_det->material_desc;
						$components = $row_det->det_component;
						if($components == 'RAW MATERIALS'){
							$rate = '';
							//$alw = $parent_trans->ave_wgt;

						}elseif($components == 'FINISHED GOODS'){
							$parent_prod_trans_id = $row_det->prod_trans_id;
							$parent_prod_trans_dtl_id = $row_det->prod_trans_dtl_id;

							$rate = amount_type($row_det->rate, $row_det->amount_type);
							$alw = $row_det->ave_wgt;
							

							@$total_qty = round($total_qty * $rate);
							
							$total_kgs = round($total_qty * ($alw));
							
							//$total_cost_amount = round($total_kgs * $cost_per_head,3);
							
							if($row_det->val_unit == 'KG'){
								$total_cost_amount = round($total_kgs * $cost,3);
							} else {
								$total_cost_amount = round($total_qty * $cost,3);
							}
						}

						if($total_cost_amount > 0){
								
							if($i == 1){
							}
							$update_data = array(
								
								'cost_sheet_stat' => 1,
								'modified_ts' => date_now()
							);
							$where = array(
								'prod_trans_id' => $row_det->prod_trans_id
							);
							$this->admin->update_data('prod_trans_tbl', $update_data, $where);

							$update_data = array(
								'qty' => $total_qty,
								'Wgt' => $total_kgs,
								'ave_wgt' => $alw,
								'cost' => $cost,
								'total_cost' => $total_cost_amount

							);
							$where = array(
								'prod_trans_dtl_id' => $row_det->prod_trans_dtl_id
							);
							$this->admin->update_data('prod_trans_dtl_tbl', $update_data, $where);
						}

						$val_unit = $row_det->val_unit;
						$mat_det_unit = $row_det->mat_det_unit;
						$mat_details = $row_det->material_code == '' ? $mat_details : $row_det->material_code.' - '.$mat_details;

						$display_rate = $rate > 0 ? number_format($rate,3,'.',',') : "";
						$display_qty = $total_qty > 0 ? number_format($total_qty,3,'.',',') : "";
						$display_kgs = $total_kgs > 0 ? number_format($total_kgs,3,'.',',') : "";
						$display_alw = $alw > 0 ? number_format($alw,3,'.',',') : "";
						$display_cost = $cost > 0 ? number_format($cost,2,'.',',') : "";
						$display_amount = $total_cost_amount > 0 ? number_format($total_cost_amount,2,'.',',') : "";

						$classification_table .= "<tr><td>".$mat_details."</td>";
						$classification_table .= "<td>".$mat_det_unit."</td>";
						$classification_table .= "<td>".$val_unit."</td>";
						$classification_table .= "<td>".$row_det->det_component."</td>";
						$classification_table .= "<td>". $display_rate ."</td>";
						$classification_table .= "<td>". $display_qty ."</td>";
						$classification_table .= "<td>". $display_kgs ."</td>";
						$classification_table .= "<td>". $display_alw ."</td>";
						$classification_table .= "<td>". $display_cost ."</td>";
						$classification_table .= "<td>". $display_amount ."</td>";
						$classification_table .= "</tr>";
					}
					
				}elseif($process == "FURTHER PROCESS - NECKLESS"){

					$get_prod_det = $this->admin->get_query("SELECT * FROM (SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.material_desc, c.material_code, b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, g.unit_name as mat_det_unit, h.unit_name as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f, unit_tbl g, unit_tbl h WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND c.unit_id = g.unit_id AND b.unit_id = h.unit_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

						UNION ALL

						SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.service_desc, '', b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, '' as mat_det_unit, '' as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "') as a order by a.order_base", false);
					

					$neckless_table .= '<div class="col-lg-12"><div class="table-responsive"><table class="table table-hover table-bordered table-stripe" id="tbl-view-cost-sheet-'.$i.'"><thead><tr><th colspan="10" class="text-center">'.date('F Y', strtotime($date)).'</th></tr><tr><th  width="20%">Item Name</th><th  width="auto">Base Unit</th><th  width="auto">Val. Unit</th><th  width="auto">Component Type</th><th  width="auto">Rate</th><th  width="auto">Qty</th><th  width="auto">Wgt</th><th  width="auto">Ave. Wgt</th><th  width="auto">Cost/Price</th><th  width="auto">Amount</th></tr></thead><tbody>';

					$cost_rec_kgs = 0;
					if(!isset($total_kgs)){$total_kgs=0;}
					if(!isset($total_qty)){$total_qty=0;}
					if(!isset($total_cost_amount)){$total_cost_amount=0;}
					$cost_rec_amount = 0;
					$raw_rate = 0;
					
					foreach($get_prod_det as $row_det){

						$rate = amount_type($row_det->rate, $row_det->amount_type);

						$components = $row_det->det_component;
						$mat_details = $row_det->material_desc;

						$cost = $row_det->cost;
						if($components == 'COST RECOVERY'){

							$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate)), 3);
							$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate)) * $cost, 3);

							$qty = round($rate * $total_kgs, 3);
							$kgs = 0;
							$alw = 0;
							$cost = $row_det->cost;
							$amount = round($qty * $cost, 3);
						}elseif($components == 'CONVERSION COST'){
							
							$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
							$qty = 0;
							$kgs = 0;
							$alw = 0;
							$cost = 0;
							$amount = $rate * $total_qty;

						}elseif($components == "PACKAGING"){
							if(	$rate > 0){
								
								$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
								$qty = $total_qty / $rate;
								$kgs = 0;
								$alw = 0;
								$cost = $row_det->cost;
								$amount = round( $cost * $qty, 3);
							} else {
								$qty = 0;
								$kgs = 0;
								$alw = 0;
								$cost = 0;
								$amount = 0;
							}
						}elseif($components == "RAW MATERIALS"){
							$raw_rate = $rate;

							if($row_det->mat_det_unit == 'KG'){
								$multiplier = $rate > 0 ? $total_kgs / $rate : $total_kgs;
							}elseif($row_det->mat_det_unit == 'HD'){
								$multiplier = $rate > 0 ? $total_qty / $rate : $total_qty;
							}
							
							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty > 0 ? $total_kgs / $total_qty : 0;
							$cost = $total_cost_amount > 0 ? $total_cost_amount / $total_kgs : 0;
							$amount = $total_cost_amount;


						}elseif($components == "FINISHED GOODS"){
							//$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
							$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
							$total_qty = $raw_rate > 0 ? round($total_qty / $raw_rate, 3) : 0;
							$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);

							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty > 0 ? $total_kgs / $total_qty : 0;
							if($row_det->val_unit == 'KG'){
								$cost = $kgs <= 0 ? 0 : $total_cost_amount / $kgs;
							} else {
								$cost = $qty <= 0 ? 0 : $total_cost_amount / $qty;
							}
							$amount = $total_cost_amount;
						}else{
							$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
							$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
							$total_qty = $raw_rate > 0 ? round($total_qty / $raw_rate, 3) : 0;
						}

							

						if($amount > 0){
							if($i == 1){
							}
							$update_data = array(
								
								'cost_sheet_stat' => 1,
								'modified_ts' => date_now()
							);
							$where = array(
								'prod_trans_id' => $row_det->prod_trans_id
							);
							$this->admin->update_data('prod_trans_tbl', $update_data, $where);

							$update_data = array(
								'qty' => $qty,
								'Wgt' => $kgs,
								'ave_wgt' => $alw,
								'cost' => $cost,
								'total_cost' => $amount

							);
							$where = array(
								'prod_trans_dtl_id' => $row_det->prod_trans_dtl_id
							);
							$this->admin->update_data('prod_trans_dtl_tbl', $update_data, $where);

							$display_rate = $rate > 0 ? number_format($rate,3,'.',',') : '';
							$display_qty = $qty > 0 ? number_format($qty,0,'.',',') : '';
							$display_kgs = $kgs > 0 ? number_format($kgs,3,'.',',') : '';
							$display_alw = $alw > 0 ? number_format($alw,3,'.',',') : '';
							$display_cost = $cost > 0 ? number_format($cost,2,'.',',') : '';
							$display_amount = $amount > 0 ? number_format($amount,2,'.',',') : '';
							$val_unit = $row_det->val_unit;
							$mat_det_unit = $row_det->mat_det_unit;
							$mat_details = $row_det->material_code == '' ? $mat_details : $row_det->material_code.' - '.$mat_details;

							$neckless_table .= "<tr><td>".$mat_details."</td>";
							$neckless_table .= "<td>".$mat_det_unit."</td>";
							$neckless_table .= "<td>".$val_unit."</td>";
							$neckless_table .= "<td>".$row_det->det_component."</td>";
							$neckless_table .= "<td>". $display_rate ."</td>";
							$neckless_table .= "<td>". $display_qty ."</td>";
							$neckless_table .= "<td>". $display_kgs ."</td>";
							$neckless_table .= "<td>". $display_alw ."</td>";
							$neckless_table .= "<td>". $display_cost ."</td>";
							$neckless_table .= "<td>". $display_amount ."</td>";
							$neckless_table .= "</tr>";
						}
					}

					

				}elseif($process == "FURTHER PROCESS - MARINATION"){

					if($process_type_id != 4){
						continue;
					}


					$get_prod_det = $this->admin->get_query("SELECT * FROM (SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.material_desc, c.material_code, b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, g.unit_name as mat_det_unit, h.unit_name as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f, unit_tbl g, unit_tbl h WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND c.unit_id = g.unit_id AND b.unit_id = h.unit_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

						UNION ALL

						SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.service_desc, '', b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, '' as mat_det_unit, '' as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "') as a order by a.order_base", false);
					//exit();
					
					

					$table .= '<div class="col-lg-12"><div class="table-responsive"><table class="table table-hover table-bordered table-stripe" id="tbl-view-cost-sheet-'.$i.'"><thead><tr><th colspan="10" class="text-center">'.date('F Y', strtotime($date)).'</th></tr><tr><th  width="20%">Item Name</th><th  width="auto">Base Unit</th><th  width="auto">Val. Unit</th><th  width="auto">Component Type</th><th  width="auto">Rate</th><th  width="auto">Qty</th><th  width="auto">Wgt</th><th  width="auto">Ave. Wgt</th><th  width="auto">Cost/Price</th><th  width="auto">Amount</th></tr></thead><tbody>';
					if(!isset($total_kgs)){$total_kgs=0;}
					if(!isset($total_qty)){$total_qty=0;}
					if(!isset($total_cost_amount)){$total_cost_amount=0;}
					
					foreach($get_prod_det as $row_det){
						$components = $row_det->det_component;
						
					 	$rate = amount_type($row_det->rate, $row_det->amount_type);

						$cost = $row_det->cost;
						$mat_details = $row_det->material_desc;

						if($components == 'MARINADES'){
							
							$total_cost_amount = round($total_cost_amount + (($total_qty * $rate) * $cost));

							$qty = $total_qty * $rate;
							$kgs = 0;
							$alw = 0;
							
							$amount = round($qty * $cost, 3);
						}elseif($components == "PACKAGING"){

							if($rate > 0){
								
								$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 2);
								$qty = $total_qty / $rate;
							} else {
								$qty = 0;
							}
							
							$kgs = 0;
							$alw = 0;
							$cost = $cost;
							$amount = $qty * $cost;
						}elseif($components == "CONVERSION COST"){
							
							$total_cost_amount = round($total_cost_amount + ($total_qty * $rate),3);
							
							$qty = 0;
							$kgs = 0;
							$alw = 0;
							$cost = 0;
							$amount = $rate * $total_qty;
						}elseif($components == "RAW MATERIALS"){

							if($row_det->mat_det_unit == 'KG'){
								$multiplier = $rate > 0 ? $total_kgs / $rate : $total_kgs;
							}elseif($row_det->mat_det_unit == 'HD'){
								$multiplier = $rate > 0 ? $total_qty / $rate : $total_qty;
							}
							
							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty == 0 ? 0 : $total_kgs/ $total_qty;
							$cost = $total_kgs == 0 ? 0 : $total_cost_amount / $total_kgs;
							$amount = $total_cost_amount;
						}elseif($components == "FINISHED GOODS"){
							$qty = $multiplier;
							$kgs = 0;
							$alw = 0;
							if($row_det->val_unit == 'KG'){
								$cost = $kgs <= 0 ? 0 : $total_cost_amount / $kgs;
							} else {
								$cost = $qty <= 0 ? 0 : $total_cost_amount / $qty;
							}
							
							$amount = $total_cost_amount;
						}


						if($amount != 0){
							if($i == 1){
							}
							$update_data = array(
								
								'cost_sheet_stat' => 1,
								'modified_ts' => date_now()
							);
							$where = array(
								'prod_trans_id' => $row_det->prod_trans_id
							);
							$this->admin->update_data('prod_trans_tbl', $update_data, $where);

							$update_data = array(
								'qty' => $qty,
								'Wgt' => $kgs,
								'ave_wgt' => $alw,
								'cost' => $cost,
								'total_cost' => $amount

							);
							$where = array(
								'prod_trans_dtl_id' => $row_det->prod_trans_dtl_id
							);
							$this->admin->update_data('prod_trans_dtl_tbl', $update_data, $where);

							
							$val_unit = $row_det->val_unit;
							$mat_det_unit = $row_det->mat_det_unit;


							$display_rate = $rate > 0 ? number_format($rate,3,'.',',') : "";
							$display_qty = $qty > 0 ? number_format($qty,3,'.',',') : "";
							$display_kgs = $kgs > 0 ? number_format($kgs,3,'.',',') : "";
							$display_alw = $alw > 0 ? number_format($alw,3,'.',',') : "";
							$display_cost = $cost > 0 ? number_format($cost,2,'.',',') : "";
							$display_amount = $amount > 0 ? number_format($amount,2,'.',',') : "";

							$table .= "<tr><td>".$mat_details."</td>";
							$table .= "<td>".$mat_det_unit."</td>";
							$table .= "<td>".$val_unit."</td>";
							$table .= "<td>".$row_det->det_component."</td>";
							$table .= "<td>". $display_rate ."</td>";
							$table .= "<td>". $display_qty ."</td>";
							$table .= "<td>". $display_kgs ."</td>";
							$table .= "<td>". $display_alw ."</td>";
							$table .= "<td>". $display_cost ."</td>";
							$table .= "<td>". $display_amount ."</td>";
							$table .= "</tr>";

							
						}
					}


					$table .= "</tbody></table></div></div>";


					$total_kgs = round(@$multiplier, 3);
					
				}elseif($process == "FURTHER PROCESS - CUT UPS PACKAGING"){
					$get_prod_det = $this->admin->get_query("SELECT * FROM (SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.material_desc, c.material_code, b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, g.unit_name as mat_det_unit, h.unit_name as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f, unit_tbl g, unit_tbl h WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND c.unit_id = g.unit_id AND b.unit_id = h.unit_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

						UNION ALL

						SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.service_desc, '', b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, '' as mat_det_unit, '' as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "') as a order by a.order_base");

					$cutsup_packaging_table .= '<div class="col-lg-12"><div class="table-responsive"><table class="table table-hover table-bordered table-stripe" id="tbl-view-cost-sheet-'.$i.'"><thead><tr><th colspan="10" class="text-center">'.date('F Y', strtotime($date)).'</th></tr><tr><th  width="20%">Item Name</th><th  width="auto">Base Unit</th><th  width="auto">Val. Unit</th><th  width="auto">Component Type</th><th  width="auto">Rate</th><th  width="auto">Qty</th><th  width="auto">Wgt</th><th  width="auto">Ave. Wgt</th><th  width="auto">Cost/Price</th><th  width="auto">Amount</th></tr></thead><tbody>';

					if(!isset($total_kgs)){$total_kgs=0;}
					if(!isset($total_qty)){$total_qty=0;}
					if(!isset($total_cost_amount)){$total_cost_amount=0;}
					if(!isset($cost_rec_kgs)){$cost_rec_kgs=0;}
					if(!isset($cost_rec_amount)){$cost_rec_amount=0;}
					if(!isset($raw_rate)){$raw_rate=0;}
					
					
					foreach($get_prod_det as $row_det){

						$rate = amount_type($row_det->rate, $row_det->amount_type);

						$components = $row_det->det_component;
						$mat_details = $row_det->material_desc;
						
						$cost = $row_det->cost;
						if($components == 'COST RECOVERY'){

							$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate)), 3);
							$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate)) * $cost, 3);

							$qty = round($rate * $total_kgs, 3);
							$kgs = 0;
							$alw = 0;
							$cost = $row_det->cost;
							$amount = round($qty * $cost, 3);
						}elseif($components == 'CONVERSION COST'){
							
							$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
							$qty = 0;
							$kgs = 0;
							$alw = 0;
							$cost = 0;
							$amount = $rate * $total_qty;

						}elseif($components == "PACKAGING"){
							if(	$rate > 0){
								
								$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
								$qty = $total_qty / $rate;
								$kgs = 0;
								$alw = 0;
								$cost = $row_det->cost;
								$amount = round( $cost * $qty, 3);
							} else {
								$qty = 0;
								$kgs = 0;
								$alw = 0;
								$cost = 0;
								$amount = 0;
							}
						}elseif($components == "RAW MATERIALS"){
							$raw_rate = $rate;

							if($row_det->mat_det_unit == 'KG'){
								$multiplier = $rate > 0 ? $total_kgs / $rate : $total_kgs;
							}elseif($row_det->mat_det_unit == 'HD'){
								$multiplier = $rate > 0 ? $total_qty / $rate : $total_qty;
							}
							
							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty > 0 ? $total_kgs / $total_qty : 0;
							$cost = $total_cost_amount > 0 ? $total_cost_amount / $total_kgs : 0;
							$amount = $total_cost_amount;


						}elseif($components == "FINISHED GOODS"){
							//$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
							$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
							$total_qty = $raw_rate > 0 ? round($total_qty / $raw_rate, 3) : 0;
							$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);

							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty > 0 ? $total_kgs / $total_qty : 0;
							if($row_det->val_unit == 'KG'){
								$cost = $kgs <= 0 ? 0 : $total_cost_amount / $kgs;
							} else {
								$cost = $qty <= 0 ? 0 : $total_cost_amount / $qty;
							}
							$amount = $total_cost_amount;
						}else{
							$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
							$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
							$total_qty = $raw_rate > 0 ? round($total_qty / $raw_rate, 3) : 0;
						}

						if($amount > 0){
							if($i == 1){
							}
							$update_data = array(
								
								'cost_sheet_stat' => 1,
								'modified_ts' => date_now()
							);
							$where = array(
								'prod_trans_id' => $row_det->prod_trans_id
							);
							$this->admin->update_data('prod_trans_tbl', $update_data, $where);

							$update_data = array(
								'qty' => $qty,
								'Wgt' => $kgs,
								'ave_wgt' => $alw,
								'cost' => $cost,
								'total_cost' => $amount

							);
							$where = array(
								'prod_trans_dtl_id' => $row_det->prod_trans_dtl_id
							);
							$this->admin->update_data('prod_trans_dtl_tbl', $update_data, $where);

							
							$val_unit = $row_det->val_unit;
							$mat_det_unit = $row_det->mat_det_unit;
							$mat_details = $row_det->material_code == '' ? $mat_details : $row_det->material_code.' - '.$mat_details;

							$display_rate = $rate > 0 ? number_format($rate,3,'.',',') : "";
							$display_qty = $qty > 0 ? number_format($qty,3,'.',',') : "";
							$display_kgs = $kgs > 0 ? number_format($kgs,3,'.',',') : "";
							$display_alw = $alw > 0 ? number_format($alw,3,'.',',') : "";
							$display_cost = $cost > 0 ? number_format($cost,2,'.',',') : "";
							$display_amount = $amount > 0 ? number_format($amount,2,'.',',') : "";

							$cutsup_packaging_table .= "<tr><td>".$mat_details."</td>";
							$cutsup_packaging_table .= "<td>".$mat_det_unit."</td>";
							$cutsup_packaging_table .= "<td>".$val_unit."</td>";
							$cutsup_packaging_table .= "<td>".$row_det->det_component."</td>";
							$cutsup_packaging_table .= "<td>". $display_rate ."</td>";
							$cutsup_packaging_table .= "<td>". $display_qty ."</td>";
							$cutsup_packaging_table .= "<td>". $display_kgs ."</td>";
							$cutsup_packaging_table .= "<td>". $display_alw ."</td>";
							$cutsup_packaging_table .= "<td>". $display_cost ."</td>";
							$cutsup_packaging_table .= "<td>". $display_amount ."</td>";
							$cutsup_packaging_table .= "</tr>";
						}
					}

					
					
				}elseif($process == "FURTHER PROCESS - CUTTING"){

					$get_prod_det = $this->admin->get_query("SELECT * FROM (SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.material_desc, c.material_code, b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, g.unit_name as mat_det_unit, h.unit_name as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f, unit_tbl g, unit_tbl h WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND c.unit_id = g.unit_id AND b.unit_id = h.unit_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

						UNION ALL

						SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.service_desc, '', b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, '' as mat_det_unit, '' as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "') as a order by a.order_base", false, false);

					

					$cutting_table .= '<div class="col-lg-12"><div class="table-responsive"><table class="table table-hover table-bordered table-stripe" id="tbl-view-cost-sheet-'.$i.'"><thead><tr><th colspan="10" class="text-center">'.date('F Y', strtotime($date)).'</th></tr><tr><th  width="20%">Item Name</th><th  width="auto">Base Unit</th><th  width="auto">Val. Unit</th><th  width="auto">Component Type</th><th  width="auto">Rate</th><th  width="auto">Qty</th><th  width="auto">Wgt</th><th  width="auto">Ave. Wgt</th><th  width="auto">Cost/Price</th><th  width="auto">Amount</th></tr></thead><tbody>';

					if(!isset($total_kgs)){$total_kgs=0;}
					if(!isset($total_qty)){$total_qty=0;}
					if(!isset($total_cost_amount)){$total_cost_amount=0;}
					if(!isset($cost_rec_kgs)){$cost_rec_kgs=0;}
					if(!isset($cost_rec_amount)){$cost_rec_amount=0;}
					if(!isset($raw_rate)){$raw_rate=0;}
					
					foreach($get_prod_det as $row_det){

						$rate = amount_type($row_det->rate, $row_det->amount_type);

						$components = $row_det->det_component;
						$mat_details = $row_det->material_desc;
						
						$cost = $row_det->cost;
						if($components == 'COST RECOVERY'){

							$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate)), 3);
							$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate)) * $cost, 3);

							$qty = round($rate * $total_kgs, 3);
							$kgs = 0;
							$alw = 0;
							$cost = $row_det->cost;
							$amount = round($qty * $cost, 3);
						}elseif($components == 'CONVERSION COST'){
							
							$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
							$qty = 0;
							$kgs = 0;
							$alw = 0;
							$cost = 0;
							$amount = $rate * $total_qty;

						}elseif($components == "PACKAGING"){
							if(	$rate > 0){
								
								$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
								$qty = $total_qty / $rate;
								$kgs = 0;
								$alw = 0;
								$cost = $row_det->cost;
								$amount = round( $cost * $qty, 3);
							} else {
								$qty = 0;
								$kgs = 0;
								$alw = 0;
								$cost = 0;
								$amount = 0;
							}
						}elseif($components == "RAW MATERIALS"){
							$raw_rate = $rate;

							if($row_det->mat_det_unit == 'KG'){
								$multiplier = $rate > 0 ? $total_kgs / $rate : $total_kgs;
							}elseif($row_det->mat_det_unit == 'HD'){
								$multiplier = $rate > 0 ? $total_qty / $rate : $total_qty;
							}
							
							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty > 0 ? $total_kgs / $total_qty : 0;
							$cost = $total_cost_amount > 0 ? $total_cost_amount / $total_kgs : 0;
							$amount = $total_cost_amount;


						}elseif($components == "FINISHED GOODS"){
							//$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
							$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
							$total_qty = $raw_rate > 0 ? round($total_qty / $raw_rate, 3) : 0;
							$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);

							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty > 0 ? $total_kgs / $total_qty : 0;
							if($row_det->val_unit == 'KG'){
								$cost = $kgs <= 0 ? 0 : $total_cost_amount / $kgs;
							} else {
								$cost = $qty <= 0 ? 0 : $total_cost_amount / $qty;
							}
							$amount = $total_cost_amount;
						} else {
							$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
							$total_qty = $raw_rate > 0 ? round($total_qty / $raw_rate, 3) : 0;
							$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
						}

						if($amount > 0){
							if($i == 1){
							}
							$update_data = array(
								
								'cost_sheet_stat' => 1,
								'modified_ts' => date_now()
							);
							$where = array(
								'prod_trans_id' => $row_det->prod_trans_id
							);
							$this->admin->update_data('prod_trans_tbl', $update_data, $where);

							$update_data = array(
								'qty' => $qty,
								'Wgt' => $kgs,
								'ave_wgt' => $alw,
								'cost' => $cost,
								'total_cost' => $amount

							);
							$where = array(
								'prod_trans_dtl_id' => $row_det->prod_trans_dtl_id
							);
							$this->admin->update_data('prod_trans_dtl_tbl', $update_data, $where);

							
							$val_unit = $row_det->val_unit;
							$mat_det_unit = $row_det->mat_det_unit;
							$mat_details = $row_det->material_code == '' ? $mat_details : $row_det->material_code.' - '.$mat_details;

							$display_rate = $rate > 0 ? number_format($rate,3,'.',',') : "";
							$display_qty = $qty > 0 ? number_format($qty,3,'.',',') : "";
							$display_kgs = $kgs > 0 ? number_format($kgs,3,'.',',') : "";
							$display_alw = $alw > 0 ? number_format($alw,3,'.',',') : "";
							$display_cost = $cost > 0 ? number_format($cost,2,'.',',') : "";
							$display_amount = $amount > 0 ? number_format($amount,2,'.',',') : "";

							$cutting_table .= "<tr><td>".$mat_details."</td>";
							$cutting_table .= "<td>".$mat_det_unit."</td>";
							$cutting_table .= "<td>".$val_unit."</td>";
							$cutting_table .= "<td>".$row_det->det_component."</td>";
							$cutting_table .= "<td>". $display_rate ."</td>";
							$cutting_table .= "<td>". $display_qty ."</td>";
							$cutting_table .= "<td>". $display_kgs ."</td>";
							$cutting_table .= "<td>". $display_alw ."</td>";
							$cutting_table .= "<td>". $display_cost ."</td>";
							$cutting_table .= "<td>". $display_amount ."</td>";
							$cutting_table .= "</tr>";
						}
					}

					
					//$cutting_total_kgs = $total_kgs;
					//$total_cost_amount = $total_cost_amount;
					//$cutting_total_qty = $total_qty;
					
				}elseif($process == "FURTHER PROCESS - INDIVIDUAL PACKAGING"){
					$get_prod_det = $this->admin->get_query("SELECT * FROM (SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.material_desc, c.material_code, b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, g.unit_name as mat_det_unit, h.unit_name as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f, unit_tbl g, unit_tbl h WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND c.unit_id = g.unit_id AND b.unit_id = h.unit_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

						UNION ALL

						SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.service_desc, '', b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, '' as mat_det_unit, '' as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "') as a order by a.order_base");

					$individual_packaging_table .= '<div class="col-lg-12"><div class="table-responsive"><table class="table table-hover table-bordered table-stripe" id="tbl-view-cost-sheet-'.$i.'"><thead><tr><th colspan="10" class="text-center">'.date('F Y', strtotime($date)).'</th></tr><tr><th  width="20%">Item Name</th><th  width="auto">Base Unit</th><th  width="auto">Val. Unit</th><th  width="auto">Component Type</th><th  width="auto">Rate</th><th  width="auto">Qty</th><th  width="auto">Wgt</th><th  width="auto">Ave. Wgt</th><th  width="auto">Cost/Price</th><th  width="auto">Amount</th></tr></thead><tbody>';

					if(!isset($total_kgs)){$total_kgs=0;}
					if(!isset($total_qty)){$total_qty=0;}
					if(!isset($total_cost_amount)){$total_cost_amount=0;}
					if(!isset($cost_rec_kgs)){$cost_rec_kgs=0;}
					if(!isset($cost_rec_amount)){$cost_rec_amount=0;}
					if(!isset($raw_rate)){$raw_rate=0;}
					
					foreach($get_prod_det as $row_det){

						$rate = amount_type($row_det->rate, $row_det->amount_type);

						$components = $row_det->det_component;
						$mat_details = $row_det->material_desc;
						
						$cost = $row_det->cost;
						if($components == 'COST RECOVERY'){

							$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate)), 3);
							$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate)) * $cost, 3);

							$qty = round($rate * $total_kgs, 3);
							$kgs = 0;
							$alw = 0;
							$cost = $row_det->cost;
							$amount = round($qty * $cost, 3);
						}elseif($components == 'CONVERSION COST'){
							
							$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
							$qty = 0;
							$kgs = 0;
							$alw = 0;
							$cost = 0;
							$amount = $rate * $total_qty;

						}elseif($components == "PACKAGING"){
							if(	$rate > 0){
								
								$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
								$qty = $total_qty / $rate;
								$kgs = 0;
								$alw = 0;
								$cost = $row_det->cost;
								$amount = round( $cost * $qty, 3);
							} else {
								$qty = 0;
								$kgs = 0;
								$alw = 0;
								$cost = 0;
								$amount = 0;
							}
						}elseif($components == "RAW MATERIALS"){
							$raw_rate = $rate;

							if($row_det->mat_det_unit == 'KG'){
								$multiplier = $rate > 0 ? $total_kgs / $rate : $total_kgs;
							}elseif($row_det->mat_det_unit == 'HD'){
								$multiplier = $rate > 0 ? $total_qty / $rate : $total_qty;
							}
							
							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty > 0 ? $total_kgs / $total_qty : 0;
							$cost = $total_cost_amount > 0 ? $total_cost_amount / $total_kgs : 0;
							$amount = $total_cost_amount;


						}elseif($components == "FINISHED GOODS"){
							//$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
							$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
							$total_qty = $raw_rate > 0 ? round($total_qty / $raw_rate, 3) : 0;
							$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);

							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty > 0 ? $total_kgs / $total_qty : 0;
							if($row_det->val_unit == 'KG'){
								$cost = $kgs <= 0 ? 0 : $total_cost_amount / $kgs;
							} else {
								$cost = $qty <= 0 ? 0 : $total_cost_amount / $qty;
							}
							$amount = $total_cost_amount;
						}else{
							$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
							$total_qty = $raw_rate > 0 ? round($total_qty / $raw_rate, 3) : 0;
							$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
						}

						if($amount > 0){
							if($i == 1){
							}
							$update_data = array(
								
								'cost_sheet_stat' => 1,
								'modified_ts' => date_now()
							);
							$where = array(
								'prod_trans_id' => $row_det->prod_trans_id
							);
							$this->admin->update_data('prod_trans_tbl', $update_data, $where);

							$update_data = array(
								'qty' => $qty,
								'Wgt' => $kgs,
								'ave_wgt' => $alw,
								'cost' => $cost,
								'total_cost' => $amount

							);
							$where = array(
								'prod_trans_dtl_id' => $row_det->prod_trans_dtl_id
							);
							$this->admin->update_data('prod_trans_dtl_tbl', $update_data, $where);

							
							$val_unit = $row_det->val_unit;
							$mat_det_unit = $row_det->mat_det_unit;
							$mat_details = $row_det->material_code == '' ? $mat_details : $row_det->material_code.' - '.$mat_details;

							$display_rate = $rate > 0 ? number_format($rate,3,'.',',') : "";
							$display_qty = $qty > 0 ? number_format($qty,3,'.',',') : "";
							$display_kgs = $kgs > 0 ? number_format($kgs,3,'.',',') : "";
							$display_alw = $alw > 0 ? number_format($alw,3,'.',',') : "";
							$display_cost = $cost > 0 ? number_format($cost,2,'.',',') : "";
							$display_amount = $amount > 0 ? number_format($amount,2,'.',',') : "";

							$individual_packaging_table .= "<tr><td>".$mat_details."</td>";
							$individual_packaging_table .= "<td>".$mat_det_unit."</td>";
							$individual_packaging_table .= "<td>".$val_unit."</td>";
							$individual_packaging_table .= "<td>".$row_det->det_component."</td>";
							$individual_packaging_table .= "<td>". $display_rate ."</td>";
							$individual_packaging_table .= "<td>". $display_qty ."</td>";
							$individual_packaging_table .= "<td>". $display_kgs ."</td>";
							$individual_packaging_table .= "<td>". $display_alw ."</td>";
							$individual_packaging_table .= "<td>". $display_cost ."</td>";
							$individual_packaging_table .= "<td>". $display_amount ."</td>";
							$individual_packaging_table .= "</tr>";
						}
					}

					
					
				}
			}
		}

		if($process_type_id == 2){ //CLASSIFICATION
			return $classification_table;
		} elseif($process_type_id == 3){
			return $neckless_table;
		} else if ($process_type_id == 4){
			return $table;
		} else if ($process_type_id == 6){
			return $cutting_table;
		} else if ($process_type_id == 7){
			return $cutsup_packaging_table;
		} else if ($process_type_id == 8){
			return $individual_packaging_table;
		} else {
			return 'hello';
		}
		
	}

	public function get_ext_prod_materials(){
		$info = $this->_require_login_prod();

		$bc_id = clean_data( decode( $this->input->post('bc_id') ) );
		$year = clean_data( $this->input->post( 'year' ) );

		$join = array(
			'ext_prod_trans_dtl_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id and a.bc_id ='.$bc_id.' and YEAR(b.trans_dtl_date)= '.$year,
			'status_tbl d' => 'd.status_id = a.ext_prod_trans_status and a.ext_prod_trans_status != 5',
			'material_tbl f' => 'a.material_id = f.material_id'
		);
		$ext_prod_trans = $this->admin->get_join('ext_prod_trans_tbl a', $join, FALSE,'f.material_desc ASC', 'a.ext_prod_trans_id', '*, a.created_ts, a.modified_ts');

		$list_materials = '<option value="">Select...</option>';
		if(!empty($ext_prod_trans)){
			foreach($ext_prod_trans as $row){
				$list_materials .= '<option value="' . encode($row->ext_prod_trans_id) .'">'. $row->material_code .' - '. $row->material_desc . '</option>';
			}

			$data['result'] = 1;
			$data['info'] = $list_materials;
		} else {
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function batch_cancel_ext_prod_trans(){
		/*echo "<pre>";
		print_r($_POST);
		echo "</pre>";
		exit();*/
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);

		$ext_prod_trans = clean_data($this->input->post('ext_prod_trans_id'));
		$bc_id = clean_data( $this->input->post('bc_id'));
		
		$ext_prod_trans_status = 5;
		$status = 'cancelled';

		if(!empty($ext_prod_trans)){
			$this->db->trans_start();
			foreach($ext_prod_trans as $r){
				$ext_prod_trans_id = decode($r);

				
				$update_data = array(
					'ext_prod_trans_status' => $ext_prod_trans_status,
					'modified_by' => $user_id,
					'modified_ts' => date_now()
				);
				$where = array(
					'ext_prod_trans_id' => $ext_prod_trans_id,
				);
				$this->admin->update_data('ext_prod_trans_tbl', $update_data, $where);
				
				$update_data = array(
					'ext_prod_trans_dtl_status' => $ext_prod_trans_status
				);
				$where = array(
					'ext_prod_trans_id' => $ext_prod_trans_id,
				);
				$this->admin->update_data('ext_prod_trans_dtl_tbl', $update_data, $where);
			}
		}

		
		if($this->db->trans_status() === FALSE){
			$this->db->trans_rollback();
			$msg = '<div class="alert alert-danger">Error please try again!</div>';
		}else{
			$this->db->trans_commit();
			$msg = '<div class="alert alert-success"><strong>Transaction(s) successfully '.$status.'.</strong></div>';
		}
		$this->session->set_flashdata('message', $msg);
		redirect('admin/prod-trans/' . $bc_id);
	}

	public function get_cost_sheet_materials(){
		$info = $this->_require_login_prod();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$bc_id = decode($this->input->post('bc_id'));
			$year = $this->input->post('year');
			$cost_sheet_stat = decode($this->input->post('id'));
			$cost_sheet_stat = $cost_sheet_stat == 2 ? NULL : $cost_sheet_stat;

			$where = array(
				'a.cost_sheet_stat' => $cost_sheet_stat,
				'a.prod_trans_status !='=> 5,
				
				'YEAR(c.prod_trans_dtl_date)'=> $year,
				'a.bc_id'=> $bc_id
			);
			$join = array(
				'material_tbl b' => 'a.prod_id = b.material_id',
				'prod_trans_dtl_tbl c' => 'a.prod_trans_id = c.prod_trans_id and a.process_type_id NOT IN (1, 5)',
				'process_type_tbl d' => 'a.process_type_id = d.process_type_id'
			);

			$prod_trans = $this->admin->get_join('prod_trans_tbl a', $join, false, 'a.process_type_id', 'a.prod_trans_id', 'a.prod_trans_id, a.prod_id, a.process_type_id, a.created_ts, a.modified_ts, b.material_desc, b.material_code, d.process_type_name, YEAR(c.prod_trans_dtl_date) as tyear', $where);
			if(!empty($prod_trans)){
				$list_materials = '';
				$group = 0;
				foreach($prod_trans as $row){
					if($cost_sheet_stat == 1){
						$modification_time = ' | Modification TS : ' .time_stamp_display($row->modified_ts) ;
					} else {
						$modification_time = ' | Entry TS : ' .time_stamp_display($row->created_ts) ;
					}

					if($group == 0 || $group != $row->process_type_id){
						if($group != 0){
							$list_materials .= '</optgroup>';
						}
						$list_materials .= '<optgroup label="'.$row->process_type_name.'">';
						$list_materials .= '<option value="' . $row->prod_trans_id . '~'.$row->prod_id.'~'.$row->process_type_id.'">'. $row->material_code .' - '. $row->material_desc . $modification_time . '</option>';
					} else {
						$list_materials .= '<option value="' . $row->prod_trans_id . '~'.$row->prod_id.'~'.$row->process_type_id.'">'. $row->material_code .' - '. $row->material_desc . $modification_time . '</option>';
					}

					$group = $row->process_type_id;
				}
				$list_materials .= '</optgroup>';

				$data['result'] = 1;
				$data['info'] = $list_materials;
			} else {
				$data['result'] = 0;
			}

			
			echo json_encode($data);
		}
	}

	public function cost_sheet_batch_computation(){
		$info = $this->_require_login_prod();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$bc_id = decode($this->input->post('bc_id'));
			$year = $this->input->post('year');
			$prod_trans_array = $this->input->post('prod_trans');
			
			if(!empty($prod_trans_array)){
				foreach($prod_trans_array as $prod_trans){
					$prod_trans_val = explode('~', $prod_trans);
					$prod_trans_id = decode($prod_trans_val[0]);
					$mat_id = $prod_trans_val[1];
					$process_type_id = $prod_trans_val[2];

					$this->bulk_cost_sheet_computation($bc_id, $mat_id, $prod_trans_id, $process_type_id, encode($year));
				}
			}
			$msg = '<div class="alert alert-success"><strong>Batch of cost sheet successfully computed.</strong></div>';
			$this->session->set_flashdata('message', $msg);
			
			redirect('admin/prod-trans/' . encode($bc_id));
		}
	}

	public function bulk_cost_sheet_computation($bc_id, $mat_id, $prod_trans_id, $process_type_id, $year){
		
		ini_set('max_execution_time', 0);
		ini_set('memory_limit','2048M');


		$data['process_type_id'] = $process_type_id;
		$data['prod_trans_id'] = $prod_trans_id;
		//$year = $this->_active_year();
		$year = decode($year);
		
		$bc = $bc_id;

		$r = $mat_id;

		$table = '';
		$cutting_table = '';
		$individual_packaging_table = '';
		$cutsup_packaging_table = '';
		$neckless_table = '';
		for ($i=1; $i <=12 ; $i++) {
			$date = $year.'-'.$i.'-01';
			//echo $date;
			//exit();

			$sql_qry = "SELECT * FROM (
				SELECT
				@r as _id,

				@mat := IFNULL(
					(SELECT d.material_desc
					FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d
					   WHERE a.prod_trans_id = b.prod_trans_id
					   AND b.component_type_id = c.component_type_id
					AND a.prod_id = d.material_id
					AND a.prod_id=_id
					AND (b.component_type_id = 21 OR b.component_type_id = 2)
					AND a.prod_trans_status = 3
					AND a.bc_id = @bc
					AND b.prod_trans_dtl_date = @prod_date
					AND a.process_type_id != 5
					LIMIT 1
					)
				, '') as mat_desc,

				@unit := IFNULL(
					(SELECT f.unit_name
					FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_unit_tbl e, unit_tbl f
					   WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
					AND a.prod_id=_id AND a.prod_id = d.material_id AND (b.component_type_id = 21
					OR b.component_type_id = 2) AND a.prod_trans_status = 3 AND d.material_id = e.material_id AND e.valuation_unit = f.unit_id AND e.material_unit_status = 1
					AND a.bc_id = @bc AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5
					LIMIT 1
					)
				, '') as mat_unit,	

				@components :=(
					SELECT c.component_type
					FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d
					   WHERE a.prod_trans_id = b.prod_trans_id
					   AND b.component_type_id = c.component_type_id
					AND a.prod_id=_id
					AND a.prod_id = d.material_id
					AND a.prod_trans_status = 3
					AND (b.component_type_id = 21
					OR b.component_type_id = 2)
					AND a.bc_id = @bc
					AND b.prod_trans_dtl_date = @prod_date
					AND a.process_type_id != 5
					LIMIT 1
				) as mat_comp,
						   
				@process :=(
					SELECT b.process_type_name
					FROM prod_trans_tbl a, process_type_tbl b, prod_trans_dtl_tbl c
					WHERE a.prod_id=_id
					AND a.process_type_id = b.process_type_id
					AND a.prod_trans_id = c.prod_trans_id
					AND a.prod_trans_status = 3
					AND a.bc_id = @bc
					AND a.process_type_id != 5
					AND c.prod_trans_dtl_date = @prod_date
					GROUP BY b.process_type_name
					LIMIT 1
				) as mat_process,
				
				(
					SELECT @r := b.article_id
					FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c
					   WHERE a.prod_trans_id = b.prod_trans_id
					AND b.component_type_id = c.component_type_id
					AND a.prod_id = _id
					AND (b.component_type_id = 21 OR b.component_type_id = 2)
					AND a.prod_trans_status = 3
					AND a.bc_id = @bc
					AND b.prod_trans_dtl_date = @prod_date
					AND a.process_type_id != 5
					LIMIT 1
				) as parent,
				
				@l := @l + 1 AS level
				
			FROM
				(
				   SELECT
					@r := ".$r.",
					@l := 1,
					@bc := " . $bc . ",
					@prod_date := '".$date."',
					@brand := 1,
					@cl := 0,
					@mat := 'test',
					@rate := 0,
					@cost := 0,
					@process := '',
					@unit := ''
				) vars,
				
				(SELECT a.* from prod_trans_tbl a INNER JOIN prod_trans_dtl_tbl b on a.prod_trans_id = b.prod_trans_id  where YEAR(b.prod_trans_dtl_date) = ".$year." AND a.bc_id = ".$bc.") prod_trans_tbl
				WHERE @mat != '' HAVING @r != 225
				
				
			) as noi_data
				
			ORDER BY level DESC";

			//echo $sql_qry;
			//exit;

			$sample = $this->db->query($sql_qry);

			//echo $this->db->last_query();
			//exit();
			$result = $sample->result();

			$fresh_dressed_cost = 0;
		
			foreach($result as $row){
				
				$prod_id = $row->_id;
				$mat_unit = $row->mat_unit;
				$process = $row->mat_process;
				$parent_id = $row->parent;
				$mat_desc = $row->mat_desc;

				
				if($process == "CLASSIFICATION"){

					$where = array(
								
						'a.prod_trans_status !='=> 5,
						'a.prod_id'=> $parent_id,
						'c.prod_trans_dtl_date'=> $date,
						'a.bc_id'=> $bc,
						'c.component_type_id'=> 1
					);
					$join = array(
						'prod_trans_dtl_tbl c' => 'a.prod_trans_id = c.prod_trans_id'
					);
		
					$parent_trans = $this->admin->get_join('prod_trans_tbl a', $join, true, false, false, 'c.prod_trans_id, c.prod_trans_dtl_id, c.article_id, c.qty, c.wgt, c.ave_wgt, c.cost, c.total_cost', $where, false);

					$parent_prod_trans_id = $parent_trans->prod_trans_id;
					$parent_prod_trans_dtl_id = $parent_trans->prod_trans_dtl_id;
					$total_qty = round($parent_trans->qty, 0);
					$total_kgs = $parent_trans->wgt;
					$alw = $parent_trans->ave_wgt;
					$cost = round($parent_trans->cost, 2);
					$total_cost_amount = $parent_trans->total_cost;
					//exit;

					$get_prod_det = $this->admin->get_query("SELECT * FROM (SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, b.ave_wgt, c.material_desc, c.material_code, b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, g.unit_name as mat_det_unit, h.unit_name as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f, unit_tbl g, unit_tbl h WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND c.unit_id = g.unit_id AND b.unit_id = h.unit_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

						UNION ALL

						SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, b.ave_wgt, c.service_desc, '', b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, '' as mat_det_unit, '' as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "') as a order by a.order_base", false);
					
					foreach($get_prod_det as $row_det){
						$mat_details = $row_det->material_desc;
						$components = $row_det->det_component;
						if($components == 'RAW MATERIALS'){
							$rate = '';
							

						}elseif($components == 'FINISHED GOODS'){
							$parent_prod_trans_id = $row_det->prod_trans_id;
							$parent_prod_trans_dtl_id = $row_det->prod_trans_dtl_id;

							$rate = amount_type($row_det->rate, $row_det->amount_type);
							$alw = $row_det->ave_wgt;
							

							@$total_qty = round($total_qty * $rate);
							
							$total_kgs = round($total_qty * ($alw));
							
							//$total_cost_amount = round($total_kgs * $cost_per_head,3);
							if($row_det->val_unit == 'KG'){
								$total_cost_amount = round($total_kgs * $cost,3);
							} else {
								$total_cost_amount = round($total_qty * $cost,3);
							}
							
						}

						if($total_cost_amount > 0){
								
							if($i == 1){
							}
							$update_data = array(
								
								'cost_sheet_stat' => 1,
								'modified_ts' => date_now()
							);
							$where = array(
								'prod_trans_id' => $row_det->prod_trans_id
							);
							$this->admin->update_data('prod_trans_tbl', $update_data, $where);

							$update_data = array(
								'qty' => $total_qty,
								'Wgt' => $total_kgs,
								'ave_wgt' => $alw,
								'cost' => $cost,
								'total_cost' => $total_cost_amount

							);
							$where = array(
								'prod_trans_dtl_id' => $row_det->prod_trans_dtl_id
							);
							$this->admin->update_data('prod_trans_dtl_tbl', $update_data, $where);
						}
					}
					
				}elseif($process == "FURTHER PROCESS - NECKLESS"){

					$get_prod_det = $this->admin->get_query("SELECT * FROM (SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.material_desc, c.material_code, b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, g.unit_name as mat_det_unit, h.unit_name as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f, unit_tbl g, unit_tbl h WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND c.unit_id = g.unit_id AND b.unit_id = h.unit_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

						UNION ALL

						SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.service_desc, '', b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, '' as mat_det_unit, '' as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "') as a order by a.order_base", false);
					

					$neckless_table .= '<div class="col-lg-12"><div class="table-responsive"><table class="table table-hover table-bordered table-stripe" id="tbl-view-cost-sheet-'.$i.'"><thead><tr><th colspan="10" class="text-center">'.date('F Y', strtotime($date)).'</th></tr><tr><th  width="20%">Item Name</th><th  width="auto">Base Unit</th><th  width="auto">Val. Unit</th><th  width="auto">Component Type</th><th  width="auto">Rate</th><th  width="auto">Qty</th><th  width="auto">Wgt</th><th  width="auto">Ave. Wgt</th><th  width="auto">Cost/Price</th><th  width="auto">Amount</th></tr></thead><tbody>';

					$cost_rec_kgs = 0;
					if(!isset($total_kgs)){$total_kgs=0;}
					if(!isset($total_qty)){$total_qty=0;}
					if(!isset($total_cost_amount)){$total_cost_amount=0;}
					$cost_rec_amount = 0;
					$raw_rate = 0;
					
					foreach($get_prod_det as $row_det){

						$rate = amount_type($row_det->rate, $row_det->amount_type);

						$components = $row_det->det_component;
						$mat_details = $row_det->material_desc;

						$cost = $row_det->cost;
						if($components == 'COST RECOVERY'){

							$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate)), 3);
							$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate)) * $cost, 3);

							$qty = round($rate * $total_kgs, 3);
							$kgs = 0;
							$alw = 0;
							$cost = $row_det->cost;
							$amount = round($qty * $cost, 3);
						}elseif($components == 'CONVERSION COST'){
							
							$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
							$qty = 0;
							$kgs = 0;
							$alw = 0;
							$cost = 0;
							$amount = $rate * $total_qty;

						}elseif($components == "PACKAGING"){
							if(	$rate > 0){
								
								$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
								$qty = $total_qty / $rate;
								$kgs = 0;
								$alw = 0;
								$cost = $row_det->cost;
								$amount = round( $cost * $qty, 3);
							} else {
								$qty = 0;
								$kgs = 0;
								$alw = 0;
								$cost = 0;
								$amount = 0;
							}
						}elseif($components == "RAW MATERIALS"){
							$raw_rate = $rate;

							if($row_det->mat_det_unit == 'KG'){
								$multiplier = $rate > 0 ? $total_kgs / $rate : $total_kgs;
							}elseif($row_det->mat_det_unit == 'HD'){
								$multiplier = $rate > 0 ? $total_qty / $rate : $total_qty;
							}
							
							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty > 0 ? $total_kgs / $total_qty : 0;
							$cost = $total_cost_amount > 0 ? $total_cost_amount / $total_kgs : 0;
							$amount = $total_cost_amount;


						}elseif($components == "FINISHED GOODS"){
							//$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
							$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
							$total_qty = $raw_rate > 0 ? round($total_qty / $raw_rate, 3) : 0;
							$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);

							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty > 0 ? $total_kgs / $total_qty : 0;
							if($row_det->val_unit == 'KG'){
								$cost = $kgs <= 0 ? 0 : $total_cost_amount / $kgs;
							} else {
								$cost = $qty <= 0 ? 0 : $total_cost_amount / $qty;
							}
							$amount = $total_cost_amount;
						}else{
							$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
							$total_qty = $raw_rate > 0 ? round($total_qty / $raw_rate, 3) : 0;
							$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
						}

							

						if($amount > 0){
							if($i == 1){
							}
							$update_data = array(
								
								'cost_sheet_stat' => 1,
								'modified_ts' => date_now()
							);
							$where = array(
								'prod_trans_id' => $row_det->prod_trans_id
							);
							$this->admin->update_data('prod_trans_tbl', $update_data, $where);

							$update_data = array(
								'qty' => $qty,
								'Wgt' => $kgs,
								'ave_wgt' => $alw,
								'cost' => $cost,
								'total_cost' => $amount

							);
							$where = array(
								'prod_trans_dtl_id' => $row_det->prod_trans_dtl_id
							);
							$this->admin->update_data('prod_trans_dtl_tbl', $update_data, $where);

							
						}
					}

					

				}elseif($process == "FURTHER PROCESS - MARINATION"){

					if($process_type_id != 4){
						continue;
					}


					$get_prod_det = $this->admin->get_query("SELECT * FROM (SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.material_desc, c.material_code, b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, g.unit_name as mat_det_unit, h.unit_name as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f, unit_tbl g, unit_tbl h WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND c.unit_id = g.unit_id AND b.unit_id = h.unit_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

						UNION ALL

						SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.service_desc, '', b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, '' as mat_det_unit, '' as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "') as a order by a.order_base", false);
					//exit();
					
					

					$table .= '<div class="col-lg-12"><div class="table-responsive"><table class="table table-hover table-bordered table-stripe" id="tbl-view-cost-sheet-'.$i.'"><thead><tr><th colspan="10" class="text-center">'.date('F Y', strtotime($date)).'</th></tr><tr><th  width="20%">Item Name</th><th  width="auto">Base Unit</th><th  width="auto">Val. Unit</th><th  width="auto">Component Type</th><th  width="auto">Rate</th><th  width="auto">Qty</th><th  width="auto">Wgt</th><th  width="auto">Ave. Wgt</th><th  width="auto">Cost/Price</th><th  width="auto">Amount</th></tr></thead><tbody>';
					if(!isset($total_kgs)){$total_kgs=0;}
					if(!isset($total_qty)){$total_qty=0;}
					if(!isset($total_cost_amount)){$total_cost_amount=0;}
					
					foreach($get_prod_det as $row_det){
						$components = $row_det->det_component;
						
					 	$rate = amount_type($row_det->rate, $row_det->amount_type);

						$cost = $row_det->cost;
						$mat_details = $row_det->material_desc;

						if($components == 'MARINADES'){
							
							$total_cost_amount = round($total_cost_amount + (($total_qty * $rate) * $cost));

							$qty = $total_qty * $rate;
							$kgs = 0;
							$alw = 0;
							
							$amount = round($qty * $cost, 3);
						}elseif($components == "PACKAGING"){

							if($rate > 0){
								
								$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 2);
								$qty = $total_qty / $rate;
							} else {
								$qty = 0;
							}
							
							$kgs = 0;
							$alw = 0;
							$cost = $cost;
							$amount = $qty * $cost;
						}elseif($components == "CONVERSION COST"){
							
							$total_cost_amount = round($total_cost_amount + ($total_qty * $rate),3);
							
							$qty = 0;
							$kgs = 0;
							$alw = 0;
							$cost = 0;
							$amount = $rate * $total_qty;
						}elseif($components == "RAW MATERIALS"){

							if($row_det->mat_det_unit == 'KG'){
								$multiplier = $rate > 0 ? $total_kgs / $rate : $total_kgs;
							}elseif($row_det->mat_det_unit == 'HD'){
								$multiplier = $rate > 0 ? $total_qty / $rate : $total_qty;
							}
							
							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty == 0 ? 0 : $total_kgs/ $total_qty;
							$cost = $total_kgs == 0 ? 0 : $total_cost_amount / $total_kgs;
							$amount = $total_cost_amount;
						}elseif($components == "FINISHED GOODS"){
							$qty = $multiplier;
							$kgs = 0;
							$alw = 0;
							if($row_det->val_unit == 'KG'){
								$cost = $kgs <= 0 ? 0 : $total_cost_amount / $kgs;
							} else {
								$cost = $qty <= 0 ? 0 : $total_cost_amount / $qty;
							}
							
							$amount = $total_cost_amount;
						}


						if($amount != 0){
							if($i == 1){
							}
							$update_data = array(
								
								'cost_sheet_stat' => 1,
								'modified_ts' => date_now()
							);
							$where = array(
								'prod_trans_id' => $row_det->prod_trans_id
							);
							$this->admin->update_data('prod_trans_tbl', $update_data, $where);

							$update_data = array(
								'qty' => $qty,
								'Wgt' => $kgs,
								'ave_wgt' => $alw,
								'cost' => $cost,
								'total_cost' => $amount

							);
							$where = array(
								'prod_trans_dtl_id' => $row_det->prod_trans_dtl_id
							);
							$this->admin->update_data('prod_trans_dtl_tbl', $update_data, $where);

							
						}
					}


					$table .= "</tbody></table></div></div>";


					$total_kgs = round(@$multiplier, 3);
					
				}elseif($process == "FURTHER PROCESS - CUT UPS PACKAGING"){
					$get_prod_det = $this->admin->get_query("SELECT * FROM (SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.material_desc, c.material_code, b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, g.unit_name as mat_det_unit, h.unit_name as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f, unit_tbl g, unit_tbl h WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND c.unit_id = g.unit_id AND b.unit_id = h.unit_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

						UNION ALL

						SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.service_desc, '', b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, '' as mat_det_unit, '' as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "') as a order by a.order_base");

					$cutsup_packaging_table .= '<div class="col-lg-12"><div class="table-responsive"><table class="table table-hover table-bordered table-stripe" id="tbl-view-cost-sheet-'.$i.'"><thead><tr><th colspan="10" class="text-center">'.date('F Y', strtotime($date)).'</th></tr><tr><th  width="20%">Item Name</th><th  width="auto">Base Unit</th><th  width="auto">Val. Unit</th><th  width="auto">Component Type</th><th  width="auto">Rate</th><th  width="auto">Qty</th><th  width="auto">Wgt</th><th  width="auto">Ave. Wgt</th><th  width="auto">Cost/Price</th><th  width="auto">Amount</th></tr></thead><tbody>';

					if(!isset($total_kgs)){$total_kgs=0;}
					if(!isset($total_qty)){$total_qty=0;}
					if(!isset($total_cost_amount)){$total_cost_amount=0;}
					if(!isset($cost_rec_kgs)){$cost_rec_kgs=0;}
					if(!isset($cost_rec_amount)){$cost_rec_amount=0;}
					if(!isset($raw_rate)){$raw_rate=0;}
					
					
					foreach($get_prod_det as $row_det){

						$rate = amount_type($row_det->rate, $row_det->amount_type);

						$components = $row_det->det_component;
						$mat_details = $row_det->material_desc;
						
						$cost = $row_det->cost;
						if($components == 'COST RECOVERY'){

							$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate)), 3);
							$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate)) * $cost, 3);

							$qty = round($rate * $total_kgs, 3);
							$kgs = 0;
							$alw = 0;
							$cost = $row_det->cost;
							$amount = round($qty * $cost, 3);
						}elseif($components == 'CONVERSION COST'){
							
							$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
							$qty = 0;
							$kgs = 0;
							$alw = 0;
							$cost = 0;
							$amount = $rate * $total_qty;

						}elseif($components == "PACKAGING"){
							if(	$rate > 0){
								
								$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
								$qty = $total_qty / $rate;
								$kgs = 0;
								$alw = 0;
								$cost = $row_det->cost;
								$amount = round( $cost * $qty, 3);
							} else {
								$qty = 0;
								$kgs = 0;
								$alw = 0;
								$cost = 0;
								$amount = 0;
							}
						}elseif($components == "RAW MATERIALS"){
							$raw_rate = $rate;

							if($row_det->mat_det_unit == 'KG'){
								$multiplier = $rate > 0 ? $total_kgs / $rate : $total_kgs;
							}elseif($row_det->mat_det_unit == 'HD'){
								$multiplier = $rate > 0 ? $total_qty / $rate : $total_qty;
							}
							
							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty > 0 ? $total_kgs / $total_qty : 0;
							$cost = $total_cost_amount > 0 ? $total_cost_amount / $total_kgs : 0;
							$amount = $total_cost_amount;


						}elseif($components == "FINISHED GOODS"){
							//$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
							$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
							$total_qty = $raw_rate > 0 ? round($total_qty / $raw_rate, 3) : 0;
							$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);

							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty > 0 ? $total_kgs / $total_qty : 0;
							if($row_det->val_unit == 'KG'){
								$cost = $kgs <= 0 ? 0 : $total_cost_amount / $kgs;
							} else {
								$cost = $qty <= 0 ? 0 : $total_cost_amount / $qty;
							}
							$amount = $total_cost_amount;
						}else{
							$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
							$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
							$total_qty = $raw_rate > 0 ? round($total_qty / $raw_rate, 3) : 0;
						}

						if($amount > 0){
							if($i == 1){
							}
							$update_data = array(
								
								'cost_sheet_stat' => 1,
								'modified_ts' => date_now()
							);
							$where = array(
								'prod_trans_id' => $row_det->prod_trans_id
							);
							$this->admin->update_data('prod_trans_tbl', $update_data, $where);

							$update_data = array(
								'qty' => $qty,
								'Wgt' => $kgs,
								'ave_wgt' => $alw,
								'cost' => $cost,
								'total_cost' => $amount

							);
							$where = array(
								'prod_trans_dtl_id' => $row_det->prod_trans_dtl_id
							);
							$this->admin->update_data('prod_trans_dtl_tbl', $update_data, $where);

						}
					}

					
					
				}elseif($process == "FURTHER PROCESS - CUTTING"){

					$get_prod_det = $this->admin->get_query("SELECT * FROM (SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.material_desc, c.material_code, b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, g.unit_name as mat_det_unit, h.unit_name as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f, unit_tbl g, unit_tbl h WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND c.unit_id = g.unit_id AND b.unit_id = h.unit_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

						UNION ALL

						SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.service_desc, '', b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, '' as mat_det_unit, '' as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "') as a order by a.order_base", false, false);

					

					$cutting_table .= '<div class="col-lg-12"><div class="table-responsive"><table class="table table-hover table-bordered table-stripe" id="tbl-view-cost-sheet-'.$i.'"><thead><tr><th colspan="10" class="text-center">'.date('F Y', strtotime($date)).'</th></tr><tr><th  width="20%">Item Name</th><th  width="auto">Base Unit</th><th  width="auto">Val. Unit</th><th  width="auto">Component Type</th><th  width="auto">Rate</th><th  width="auto">Qty</th><th  width="auto">Wgt</th><th  width="auto">Ave. Wgt</th><th  width="auto">Cost/Price</th><th  width="auto">Amount</th></tr></thead><tbody>';

					if(!isset($total_kgs)){$total_kgs=0;}
					if(!isset($total_qty)){$total_qty=0;}
					if(!isset($total_cost_amount)){$total_cost_amount=0;}
					if(!isset($cost_rec_kgs)){$cost_rec_kgs=0;}
					if(!isset($cost_rec_amount)){$cost_rec_amount=0;}
					if(!isset($raw_rate)){$raw_rate=0;}
					
					foreach($get_prod_det as $row_det){

						$rate = amount_type($row_det->rate, $row_det->amount_type);

						$components = $row_det->det_component;
						$mat_details = $row_det->material_desc;
						
						$cost = $row_det->cost;
						if($components == 'COST RECOVERY'){

							$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate)), 3);
							$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate)) * $cost, 3);

							$qty = round($rate * $total_kgs, 3);
							$kgs = 0;
							$alw = 0;
							$cost = $row_det->cost;
							$amount = round($qty * $cost, 3);
						}elseif($components == 'CONVERSION COST'){
							
							$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
							$qty = 0;
							$kgs = 0;
							$alw = 0;
							$cost = 0;
							$amount = $rate * $total_qty;

						}elseif($components == "PACKAGING"){
							if(	$rate > 0){
								
								$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
								$qty = $total_qty / $rate;
								$kgs = 0;
								$alw = 0;
								$cost = $row_det->cost;
								$amount = round( $cost * $qty, 3);
							} else {
								$qty = 0;
								$kgs = 0;
								$alw = 0;
								$cost = 0;
								$amount = 0;
							}
						}elseif($components == "RAW MATERIALS"){
							$raw_rate = $rate;

							if($row_det->mat_det_unit == 'KG'){
								$multiplier = $rate > 0 ? $total_kgs / $rate : $total_kgs;
							}elseif($row_det->mat_det_unit == 'HD'){
								$multiplier = $rate > 0 ? $total_qty / $rate : $total_qty;
							}
							
							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty > 0 ? $total_kgs / $total_qty : 0;
							$cost = $total_cost_amount > 0 ? $total_cost_amount / $total_kgs : 0;
							$amount = $total_cost_amount;


						}elseif($components == "FINISHED GOODS"){
							//$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
							$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
							$total_qty = $raw_rate > 0 ? round($total_qty / $raw_rate, 3) : 0;
							$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);

							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty > 0 ? $total_kgs / $total_qty : 0;
							if($row_det->val_unit == 'KG'){
								$cost = $kgs <= 0 ? 0 : $total_cost_amount / $kgs;
							} else {
								$cost = $qty <= 0 ? 0 : $total_cost_amount / $qty;
							}
							$amount = $total_cost_amount;
						}else{
							$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
							$total_qty = $raw_rate > 0 ? round($total_qty / $raw_rate, 3) : 0;
							$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
						}

						if($amount > 0){
							if($i == 1){
							}
							$update_data = array(
								
								'cost_sheet_stat' => 1,
								'modified_ts' => date_now()
							);
							$where = array(
								'prod_trans_id' => $row_det->prod_trans_id
							);
							$this->admin->update_data('prod_trans_tbl', $update_data, $where);

							$update_data = array(
								'qty' => $qty,
								'Wgt' => $kgs,
								'ave_wgt' => $alw,
								'cost' => $cost,
								'total_cost' => $amount

							);
							$where = array(
								'prod_trans_dtl_id' => $row_det->prod_trans_dtl_id
							);
							$this->admin->update_data('prod_trans_dtl_tbl', $update_data, $where);

						}
					}

					
					//$cutting_total_kgs = $total_kgs;
					//$total_cost_amount = $total_cost_amount;
					//$cutting_total_qty = $total_qty;
					
				}elseif($process == "FURTHER PROCESS - INDIVIDUAL PACKAGING"){
					$get_prod_det = $this->admin->get_query("SELECT * FROM (SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.material_desc, c.material_code, b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, g.unit_name as mat_det_unit, h.unit_name as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f, unit_tbl g, unit_tbl h WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND c.unit_id = g.unit_id AND b.unit_id = h.unit_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

						UNION ALL

						SELECT a.prod_id, a.prod_trans_id, b.prod_trans_dtl_id, b.rate, b.cost, c.service_desc, '', b.component_type_id, d.component_type as det_component, d.order_base, e.component_type as trans_component, '' as mat_det_unit, '' as val_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "') as a order by a.order_base");

					$individual_packaging_table .= '<div class="col-lg-12"><div class="table-responsive"><table class="table table-hover table-bordered table-stripe" id="tbl-view-cost-sheet-'.$i.'"><thead><tr><th colspan="10" class="text-center">'.date('F Y', strtotime($date)).'</th></tr><tr><th  width="20%">Item Name</th><th  width="auto">Base Unit</th><th  width="auto">Val. Unit</th><th  width="auto">Component Type</th><th  width="auto">Rate</th><th  width="auto">Qty</th><th  width="auto">Wgt</th><th  width="auto">Ave. Wgt</th><th  width="auto">Cost/Price</th><th  width="auto">Amount</th></tr></thead><tbody>';

					if(!isset($total_kgs)){$total_kgs=0;}
					if(!isset($total_qty)){$total_qty=0;}
					if(!isset($total_cost_amount)){$total_cost_amount=0;}
					if(!isset($cost_rec_kgs)){$cost_rec_kgs=0;}
					if(!isset($cost_rec_amount)){$cost_rec_amount=0;}
					if(!isset($raw_rate)){$raw_rate=0;}
					
					foreach($get_prod_det as $row_det){

						$rate = amount_type($row_det->rate, $row_det->amount_type);

						$components = $row_det->det_component;
						$mat_details = $row_det->material_desc;
						
						$cost = $row_det->cost;
						if($components == 'COST RECOVERY'){

							$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate)), 3);
							$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate)) * $cost, 3);

							$qty = round($rate * $total_kgs, 3);
							$kgs = 0;
							$alw = 0;
							$cost = $row_det->cost;
							$amount = round($qty * $cost, 3);
						}elseif($components == 'CONVERSION COST'){
							
							$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
							$qty = 0;
							$kgs = 0;
							$alw = 0;
							$cost = 0;
							$amount = $rate * $total_qty;

						}elseif($components == "PACKAGING"){
							if(	$rate > 0){
								
								$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
								$qty = $total_qty / $rate;
								$kgs = 0;
								$alw = 0;
								$cost = $row_det->cost;
								$amount = round( $cost * $qty, 3);
							} else {
								$qty = 0;
								$kgs = 0;
								$alw = 0;
								$cost = 0;
								$amount = 0;
							}
						}elseif($components == "RAW MATERIALS"){
							$raw_rate = $rate;

							if($row_det->mat_det_unit == 'KG'){
								$multiplier = $rate > 0 ? $total_kgs / $rate : $total_kgs;
							}elseif($row_det->mat_det_unit == 'HD'){
								$multiplier = $rate > 0 ? $total_qty / $rate : $total_qty;
							}
							
							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty > 0 ? $total_kgs / $total_qty : 0;
							$cost = $total_cost_amount > 0 ? $total_cost_amount / $total_kgs : 0;
							$amount = $total_cost_amount;


						}elseif($components == "FINISHED GOODS"){
							//$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
							$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
							$total_qty = $raw_rate > 0 ? round($total_qty / $raw_rate, 3) : 0;
							$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);

							$qty = $total_qty;
							$kgs = $total_kgs;
							$alw = $total_qty > 0 ? $total_kgs / $total_qty : 0;
							if($row_det->val_unit == 'KG'){
								$cost = $kgs <= 0 ? 0 : $total_cost_amount / $kgs;
							} else {
								$cost = $qty <= 0 ? 0 : $total_cost_amount / $qty;
							}
							$amount = $total_cost_amount;
						}else{
							$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
							$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
							$total_qty = $raw_rate > 0 ? round($total_qty / $raw_rate, 3) : 0;
						}

						if($amount > 0){
							if($i == 1){
							}
							$update_data = array(
								
								'cost_sheet_stat' => 1,
								'modified_ts' => date_now()
							);
							$where = array(
								'prod_trans_id' => $row_det->prod_trans_id
							);
							$this->admin->update_data('prod_trans_tbl', $update_data, $where);

							$update_data = array(
								'qty' => $qty,
								'Wgt' => $kgs,
								'ave_wgt' => $alw,
								'cost' => $cost,
								'total_cost' => $amount

							);
							$where = array(
								'prod_trans_dtl_id' => $row_det->prod_trans_dtl_id
							);
							$this->admin->update_data('prod_trans_dtl_tbl', $update_data, $where);

						}
					}

					
					
				}
			}
		}
	}

	public function check_price(){
		
		/*$sp = "CALL get_noi_basic(?,?,@param1,@param2,@param3,@param4,@param5 )";
		$params = array(
			'PARAM_1' => 1,
			'PARAM_2' => "2020-01-01",
		);

		$data = $this->db->query($sp, $params);
		$get_data = $this->db->query('SELECT @param1');
		print_r($get_data->result());*/
		$brand_id = 1;
		$material_sales_id = 85;
		$bc = 3;
		$check_sku = $this->admin->get_query("SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details
			FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e
			WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
			AND a.prod_id= " . $material_sales_id . " AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3
			AND a.bc_id = " . $bc . " AND b.prod_trans_dtl_date = '2020-01-01' AND a.brand_id = " . $brand_id . " AND a.process_type_id = 5 AND c.component_type = 'COST OF SALES'", TRUE);
					echo $r = $check_sku->sku_material_id;


		$data = $this->db->query("
			SELECT * FROM (SELECT @r as _id,
				@mat := IFNULL(
					(SELECT d.material_desc
			    	FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d
			   		WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
			        AND a.prod_id=_id AND a.prod_id = d.material_id AND (b.component_type_id = 21
					OR b.component_type_id = 2) AND a.prod_trans_status = 3
			        AND a.bc_id = @bc AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5
			        )
				, '') as mat_desc,

				@unit := IFNULL(
					(SELECT f.unit_name
			    	FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_unit_tbl e, unit_tbl f
			   		WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
			        AND a.prod_id=_id AND a.prod_id = d.material_id AND (b.component_type_id = 21
					OR b.component_type_id = 2) AND a.prod_trans_status = 3 AND d.material_id = e.material_id AND e.valuation_unit = f.unit_id AND e.material_unit_status = 1
			        AND a.bc_id = @bc AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5
			        )
				, '') as mat_unit,	

			    @components :=(
					SELECT c.component_type
			    	FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d
			   		WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
			        AND a.prod_id=_id AND a.prod_id = d.material_id AND a.prod_trans_status = 3
			        AND (b.component_type_id = 21
					OR b.component_type_id = 2) AND a.bc_id = @bc
			        AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5
			        
				) as mat_comp,
			               
			    @process :=(
					SELECT b.process_type_name
			    	FROM prod_trans_tbl a, process_type_tbl b
			        WHERE a.prod_id=_id AND a.process_type_id = b.process_type_id
			        AND a.prod_trans_status = 3 AND a.bc_id = @bc AND a.process_type_id != 5
			        
				) as mat_process, 
				
				(
					SELECT @r := b.article_id
			    	FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c
			   		WHERE a.prod_trans_id = b.prod_trans_id
			        AND b.component_type_id = c.component_type_id
			        AND a.prod_id = _id AND (b.component_type_id = 21 OR b.component_type_id = 2)
			        AND a.prod_trans_status = 3 AND a.bc_id = @bc
			        AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5 LIMIT 1
				) as parent,
			    
			    @l := @l + 1 AS level
			    
			FROM
				(
			   	SELECT
			    	@r := " . $r . ",
			        @l := 1,
			        @bc := " . $bc . ",
			        @prod_date := '2020-01-01',
			        @brand := 1,
			        @cl := 0,
			        @mat := 'test',
			        @rate := 0,
			        @cost := 0,
			        @process := '',
			        @unit := ''
				) vars,
			    
			    prod_trans_tbl
			    WHERE @mat != '' HAVING @r != 225
				
				
			) as noi_data
			    
			ORDER BY level DESC

		");
		$result = $data->result();
		$fresh_dressed_cost = 0;
		$date = '2020-01-01';
		foreach($result as $row){
			
			$prod_id = $row->_id;
			$mat_unit = $row->mat_unit;
			echo $process = $row->mat_process;
			echo ' - ';
			echo $mat_desc = $row->mat_desc;
			if($process == "BASIC PROCESSING"){

				$sp = "CALL get_noi_basic(?,?,@total_qty,@total_kgs,@ave_wt,@cost_per_head,@total_cost_amount,@test)";
				$params = array(
					'PARAM_1' => $bc,
					'PARAM_2' => "2020-01-01",
				);

				$data = $this->db->query($sp, $params);
				$get_data = $this->db->query('SELECT @total_qty as total_qty, @total_kgs as total_kgs, @ave_wt as ave_wt, @cost_per_head as cost_per_head, @total_cost_amount as total_cost_amount, @test as test');
				//print_r($get_data);
				$basic =  $get_data->row();
				echo '<br />';
				echo 'Live Sales: ' . $basic->test;
				echo '<br />';
				echo  'Qty : ' . $total_qty = round($basic->total_qty,3);
				echo '<br />';
				echo 'KGS: ' . $total_kgs = round($basic->total_kgs,3);
				echo '<br />';
				echo 'AVE WT: ' . $ave_wt = round($basic->ave_wt,3);
				echo '<br />';
				echo 'Cost/Price: ' . $cost_per_head = round($basic->cost_per_head,3);
				echo '<br />';
				echo 'Amount: ' . $total_cost_amount = round($basic->total_cost_amount,3);
				echo '<br />';
			}elseif($process == "CLASSIFICATION"){
				$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

					UNION ALL

					SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");
				echo '<br />';
				foreach($get_prod_det as $row_det){
					$components = $row_det->det_component;
					if($components != 'RAW MATERIALS'){
						$rate = $row_det->rate;
						$cost = $row_det->cost;

						echo $total_qty = round($total_qty * ($rate / 100));
						echo '<br/>';
						echo $total_kgs = round($total_qty * ($cost),3);
						echo '<br/>';
						echo $total_cost_amount = round($total_kgs * $cost_per_head,3);
						echo '<br/>';
					}
				}

				echo '<br/ >';
				echo 'Qty : ' . $total_qty;
				echo '<br />';
				echo 'KGS: ' . $total_kgs;
				echo '<br />';
				echo 'AVE WT: ' . round($total_kgs / $total_qty,3);
				echo '<br />';
				echo 'Cost/Price: ' . round($total_cost_amount / $total_kgs,3);
				echo '<br />';
				echo 'Amount: ' . $total_cost_amount;
				echo '<br />';

			}elseif($process == "FURTHER PROCESS - NECKLESS"){
				$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

					UNION ALL

					SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");
				$cost_rec_kgs = 0;
				$cost_rec_amount = 0;
				foreach($get_prod_det as $row_det){
					$components = $row_det->det_component;
					$mat_desc = $row_det->material_desc;
					$rate = $row_det->rate;
					$cost = $row_det->cost;
					if($components == 'COST RECOVERY'){
						$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate / 100)), 3);
						echo '<br/>';
						echo $mat_desc . ': ' .  round(($total_kgs * ($rate / 100)) * $cost, 3);
						echo '<br/>';
						$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate / 100)) * $cost, 3);
						
					}elseif($components == 'CONVERSION COST'){
						$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
						echo '<br />';
						echo $mat_desc . ': ' .  round(($total_qty * $rate),3);
						echo '<br />';
					}else{
						$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
					}
				}

				$total_cost_amount = round($total_cost_amount  -  $cost_rec_amount, 3);
				echo '<br/ >';
				echo 'Qty : ' . round($total_qty, 3);
				echo '<br />';
				echo 'KGS: ' . $total_kgs = round($total_kgs - $cost_rec_kgs, 3);
				echo '<br />';
				echo 'AVE WT: ' . round($total_kgs / $total_qty, 3);
				echo '<br />';
				echo 'Cost/Price: ' . round($total_cost_amount / $total_kgs, 3);
				echo '<br />';
				echo 'Amount: ' . round($total_cost_amount, 3);
				echo '<br />';
			}elseif($process == "FURTHER PROCESS - MARINATION"){
				$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component, g.unit_name as mat_det_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f, unit_tbl g WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND c.unit_id = g.unit_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

					UNION ALL

					SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component, 0, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");

					
				foreach($get_prod_det as $row_det){
					$components = $row_det->det_component;
					if($row_det->amount_type == 1){
				 		$rate = $row_det->rate / 100;
				 	}else{
				 		$rate = $row_det->rate;
				 	}

					$cost = $row_det->cost;
					$mat_details = $row_det->material_desc;
					if($components == 'MARINADES'){
						echo '<br />';
						echo 'Material/Service : ' . $mat_details;
						echo ' (' . round(($total_qty * $rate) * $cost, 3) . ')';
						echo ' | ' . $total_qty . ', ' . $rate . ', ' . $cost;
						echo '<br />';
						$total_cost_amount = round($total_cost_amount + (($total_qty * $rate) * $cost));
					}elseif($components == "PACKAGING"){
						echo '<br />';
						echo 'Material/Service : ' . $mat_details;
						if($rate > 0){
							echo ' (' . round((($total_qty / $rate) * $cost), 3) . ')';
							$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 2);
						}
						echo '<br />';
					}elseif($components == "CONVERSION COST"){
						echo '<br />';
						echo 'Material/Service : ' . $mat_details;
						echo ' (' . round(($total_qty * $rate), 3) . ')';
						echo '<br />';
						$total_cost_amount = round($total_cost_amount + ($total_qty * $rate),3);
					}elseif($components == "RAW MATERIALS"){

						if($row_det->mat_det_unit == 'KG'){
							$multiplier = $rate > 0 ? $total_kgs / $rate : $total_kgs;
						}elseif($row_det->mat_det_unit == 'HD'){
							$multiplier = $rate > 0 ? $total_qty / $rate : $total_qty;
						}

						echo '<br />';
						echo $mat_details . ' | ' . $row_det->mat_det_unit;
						echo '<br />';
						echo $row_det->rate;
					}
				}

				echo '<br/ >';
				echo 'Qty : ' . round($total_qty, 3);
				echo '<br />';
				echo 'KGS: ' . $total_kgs = round($multiplier, 3);
				echo '<br />';
				echo 'AVE WT: ' . round($total_kgs / $total_qty, 3);
				echo '<br />';
				echo 'Cost/Price: ' . round($total_cost_amount / $multiplier, 3);
				echo '<br />';
				echo 'Amount: ' . round($total_cost_amount, 3);
				echo '<br />';
			}elseif($process == "FURTHER PROCESS - CUT UPS PACKAGING"){
				$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

					UNION ALL

					SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");

				$cost_rec_kgs = 0;
				$cost_rec_amount = 0;
				$raw_rate = 0;
				foreach($get_prod_det as $row_det){
					$components = $row_det->det_component;
					$mat_details = $row_det->material_desc;
					$rate = $row_det->rate;
					$cost = $row_det->cost;
					if($components == 'COST RECOVERY'){
						echo '<br/>';
						echo $mat_details . ' - ' . round(($total_kgs * ($rate / 100)) * $cost, 3) . ' | ' . number_format(($total_kgs * ($rate / 100)), 3);
						echo '<br />';
						$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate / 100)), 3);
						$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate / 100)) * $cost, 3);
					}elseif($components == 'CONVERSION COST'){
						echo '<br/>';
						echo $mat_details . ' - ' . round(($total_qty * $rate), 3);
						echo '<br />';
						$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);

					}elseif($components == "PACKAGING"){
						if(	$rate > 0){
							echo '<br/>';
							echo $mat_details . ' - ' . round((($total_qty / $rate) * $cost),3);
							echo '<br />';
							$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
						}
					}elseif($components == "RAW MATERIALS"){
						$raw_rate = $rate;

					}else{
						$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
					}
				}

				$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
				$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
				$total_qty = round($total_qty / $raw_rate, 3);
				echo '<br/ >';
				echo 'Qty : ' . round($total_qty, 3);
				echo '<br />';
				echo 'KGS: ' . round($total_kgs, 3);
				echo '<br />';
				echo 'AVE WT: ' . round($total_kgs / $total_qty, 3);
				echo '<br />';
				echo 'Cost/Price: ' . round($total_cost_amount / $total_qty, 3);
				echo '<br />';
				echo 'Amount: ' . round($total_cost_amount, 3);
				echo '<br />';
			}elseif($process == "FURTHER PROCESS - CUTTING"){
				$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

					UNION ALL

					SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");

				$cost_rec_kgs = 0;
				$cost_rec_amount = 0;
				$raw_rate = 0;
				echo 'Total Cost Raw: ' . $total_cost_amount;
				echo $total_cost_amount;
				echo '<br />';
				foreach($get_prod_det as $row_det){
					$components = $row_det->det_component;
					$mat_details = $row_det->material_desc;
					$rate = $row_det->rate;
					$cost = $row_det->cost;
					if($components == 'COST RECOVERY'){

						$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate / 100)), 3);
						$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate / 100)) * $cost, 3);

						echo '<br/>';
						echo $mat_details . ' - ' . round(($total_kgs * ($rate / 100)) * $cost, 3) . ' | ' . round(($total_kgs * ($rate / 100)), 3);
						echo '<br />';
						echo 'Total kgs: ' . round($total_kgs, 3) . ' | Rate: ' . round($rate, 3) . ' | Cost:' . number_format($cost, 3); 
					}elseif($components == 'CONVERSION COST'){
						echo '<br/>';
						echo $mat_details . ' - ' . round(($total_qty * $rate), 3);
						echo '<br />';
						$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);

					}elseif($components == "PACKAGING"){
						if(	$rate > 0){
							echo '<br/>';
							echo $mat_details . ' - ' . round((($total_qty / $rate) * $cost), 3);
							echo '<br />';
							$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
						}
					}elseif($components == "RAW MATERIALS"){
						$raw_rate = $rate;

					}else{
						$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
					}
				}

				$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
				$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
				$total_qty = round($total_qty / $raw_rate, 3);
				echo '<br/ >';
				echo 'Qty : ' . round($total_qty, 3);
				echo '<br />';
				echo 'KGS: ' . round($total_kgs, 3);
				echo '<br />';
				echo 'AVE WT: ' . round($total_kgs / $total_qty, 3);
				echo '<br />';
				echo 'Cost/Price: ' . round($total_cost_amount / $total_kgs	, 3);
				echo '<br />';
				echo 'Amount: ' . round($total_cost_amount, 3);
				echo '<br />';
			}elseif($process == "FURTHER PROCESS - INDIVIDUAL PACKAGING"){
				$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

					UNION ALL

					SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");

				$cost_rec_kgs = 0;
				$cost_rec_amount = 0;
				$raw_rate = 0;
				foreach($get_prod_det as $row_det){
					$components = $row_det->det_component;
					$mat_details = $row_det->material_desc;
					$rate = $row_det->rate;
					$cost = $row_det->cost;
					if($components == 'COST RECOVERY'){
						echo '<br/>';
						echo $mat_details . ' - ' . round(($total_kgs * ($rate / 100)) * $cost, 3) . ' | ' . number_format(($total_kgs * ($rate / 100)), 3);
						echo '<br />';
						$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate / 100)), 3);
						$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate / 100)) * $cost, 3);
					}elseif($components == 'CONVERSION COST'){
						echo '<br/>';
						echo $mat_details . ' - ' . round(($total_qty * $rate), 3);
						echo '<br />';
						$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);

					}elseif($components == "PACKAGING"){
						if(	$rate > 0){
							echo '<br/>';
							echo $mat_details . ' - ' . round((($total_qty / $rate) * $cost),3);
							echo '<br />';
							$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
						}
					}elseif($components == "RAW MATERIALS"){
						$raw_rate = $rate;

					}else{
						$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
					}
				}

				$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
				$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
				$total_qty = round($total_qty / $raw_rate, 3);
				echo '<br/ >';
				echo 'Qty : ' . round($total_qty, 3);
				echo '<br />';
				echo 'KGS: ' . round($total_kgs, 3);
				echo '<br />';
				echo 'AVE WT: ' . round($total_kgs / $total_qty, 3);
				echo '<br />';
				echo 'Cost/Price: ' . round($total_cost_amount / $total_kgs, 3);
				echo '<br />';
				echo 'Amount: ' . round($total_cost_amount, 3);
				echo '<br />';
			}
			echo '<br />';
		}
		//print_r($data);
	}

	public function remove_config_prod_dtl (){
		// echo "<pre>";
		// print_r($_POST);
		// echo "</pre>";
		// exit();
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);

		$config_prod_dtl_id = clean_data(decode($this->input->post('config_prod_dtl_id')));
		$material_desc = clean_data(decode($this->input->post('material_desc')));
		$config_prod_id = clean_data(decode($this->input->post('config_prod_id')));
		$trans_status = clean_data($this->input->post('trans_status'));
		$process_type_id = clean_data(decode($this->input->post('process_type_id')));

		$redirect = 'admin/view-config-prod/' . encode($config_prod_id).'/'. encode($process_type_id);
		if($process_type_id == 9){
			$redirect = 'admin/view-commi-config-prod/' . encode($config_prod_id).'/'. encode($process_type_id);
		}
		
		
		if($trans_status == 'remove'){
			$config_prod_dtl_status = 5;
			$status = 'removed';
		}

		
		$this->db->trans_start();
		$update_data = array(
			'config_prod_dtl_status' => $config_prod_dtl_status,
			'modified_by' => $user_id,
			'modified_ts' => date_now()
		);
		$where = array(
			'config_prod_dtl_id' => $config_prod_dtl_id,
		);
		$this->admin->update_data('config_prod_dtl_tbl', $update_data, $where);

		if($this->db->trans_status() === FALSE){
			$this->db->trans_rollback();
			$msg = '<div class="alert alert-danger">Error please try again!</div>';
		}else{
			$this->db->trans_commit();
			$msg = '<div class="alert alert-success"><strong>Config Detail successfully '.$status.'.</strong></div>';
		}
		$this->session->set_flashdata('message', $msg);
		redirect( $redirect );
	}

	public function cancel_prod_trans (){
		/*echo "<pre>";
		print_r($_POST);
		echo "</pre>";
		exit();*/
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);

		$prod_trans_id = clean_data(decode($this->input->post('prod_trans_id')));
		$material_desc = clean_data(decode($this->input->post('material_desc')));
		$bc_id = clean_data($this->input->post('bc_id'));
		$trans_status = clean_data($this->input->post('trans_status'));
		
		if($trans_status == 'cancel'){
			$prod_trans_status = 5;
			$status = 'cancelled';
		}

		
		$this->db->trans_start();
		$update_data = array(
			'prod_trans_status' => $prod_trans_status,
			'modified_by' => $user_id,
			'modified_ts' => date_now()
		);
		$where = array(
			'prod_trans_id' => $prod_trans_id,
		);
		$this->admin->update_data('prod_trans_tbl', $update_data, $where);

		$update_data = array(
			'prod_trans_dtl_status' => $prod_trans_status
		);
		$where = array(
			'prod_trans_id' => $prod_trans_id,
		);
		$this->admin->update_data('prod_trans_dtl_tbl', $update_data, $where);

		if($this->db->trans_status() === FALSE){
			$this->db->trans_rollback();
			$msg = '<div class="alert alert-danger">Error please try again!</div>';
		}else{
			$this->db->trans_commit();
			$msg = '<div class="alert alert-success"><strong>Transaction successfully '.$status.'.</strong></div>';
		}
		$this->session->set_flashdata('message', $msg);
		redirect('admin/prod-trans/' . $bc_id);
	}

	public function get_material(){
		$info = $this->_require_login_prod();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$component_type_id = decode($this->input->post('id'));
			$check_component_type = $this->admin->check_data('component_type_tbl', array('component_type_id' => $component_type_id, 'component_type_status' => 1));
			if($check_component_type){
				if($component_type_id == 1 || $component_type_id == 2 ||  $component_type_id == 20 || $component_type_id == 21 || $component_type_id == 22){
					$where = 'a.material_group_id NOT IN (14, 16, 17, 18, 19)'; // RAW MATS OR FINISHED GOODS
				} else if($component_type_id == 4){
					$where = 'a.material_group_id IN (11, 12)'; //COST RECOVERY
				} else if($component_type_id == 5){
					$where = 'a.material_group_id = 16'; //PACKAGING
				} else if($component_type_id == 6){
					$where = 'a.material_group_id = 17'; //MARINADES
				} else {
					$where = 'a.material_group_id = '.$component_type_id; //MARINADES
				}
				$material = $this->admin->get_data('material_tbl a', $where);

				$list_materials = '';
				foreach($material as $row):
					$list_materials .= '<option value="' . encode($row->material_id) . '">' . $row->material_code .' - '. $row->material_desc . '</option>';
				endforeach;
				$data['result'] = 1;
				$data['info'] = $list_materials;
			}else{
				$data['result'] = 0;
			}
			echo json_encode($data);
		}
	}

	public function get_services(){
		$info = $this->_require_login_prod();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$component_type_id = decode($this->input->post('id'));
			$check_component_type = $this->admin->check_data('component_type_tbl', array('component_type_id' => $component_type_id, 'component_type_status' => 1));
			if($check_component_type){
				if($component_type_id == 3){
					$where = 'a.service_group_id = 1'; //CONVERSION COST
				} else if($component_type_id == 7){
					$where = 'a.service_group_id = 2'; //CONFIG BASE
				} else if($component_type_id == 8){
					$where = 'a.service_group_id = 3'; //EXPENSES OF STORE
				} else if($component_type_id == 9){
					$where = 'a.service_group_id = 4'; //EXPENSES OF STORE
				} else if($component_type_id == 10){
					$where = 'a.service_group_id = 5'; //EXPENSES OF STORE
				} else if($component_type_id == 23){
					$where = 'a.service_group_id = 6'; //Sales Commission
				} else if($component_type_id == 24){
					$where = 'a.service_group_id = 7'; //OTHER FEES
				} else if($component_type_id == 25){
					$where = 'a.service_group_id = 8'; //PACKAGING LOSS
				} else if($component_type_id == 26){
					$where = 'a.service_group_id = 9'; //TOLL FEE - INTERNAL
				} else if($component_type_id == 27){
					$where = 'a.service_group_id = 10'; //TOLL FEE - EXTERNAL
				} else if($component_type_id == 28){
					$where = 'a.service_group_id = 11'; //DIRECT LABOR
				} else if($component_type_id == 29){
					$where = 'a.service_group_id = 12'; //RENT VARIABLE
				} else if($component_type_id == 30){
					$where = 'a.service_group_id = 13'; //UTILITIES VARIABLE
				} else if($component_type_id == 31){
					$where = 'a.service_group_id = 14'; //LABOR VARIABLE
				} else if($component_type_id == 32){
					$where = 'a.service_group_id = 15'; //BLAST FREEZING
				} else if($component_type_id == 33){
					$where = 'a.service_group_id = 16'; //COLD STORAGE
				}
				$services = $this->admin->get_data('services_tbl a', $where);
				
				$list_materials = '';
				foreach($services as $row):
					$list_materials .= '<option value="' . encode($row->service_id) . '">' . $row->service_desc . '</option>';
				endforeach;
				$data['result'] = 1;
				$data['info'] = $list_materials;
			}else{
				$data['result'] = 0;
			}
			echo json_encode($data);
		}
	}


	public function sales_bom(){
		$info = $this->_require_login();
		$join = array(
			'material_tbl b' => 'a.prod_id = b.material_id',
			'user_tbl c' => 'a.created_by = c.user_id',
			'component_type_tbl d' => 'a.component_type_id = d.component_type_id',
			'process_type_tbl e' => 'a.process_type_id = e.process_type_id and e.process_type_id = 5 and a.config_prod_status != 5'
		);
		$data['config_prod'] = $this->admin->get_join('config_prod_tbl a', $join, FALSE,'e.process_type_id, b.material_desc', FALSE);

		$join = array(
			'material_group_tbl b' => 'a.material_group_id = b.material_group_id and a.material_status = 1 and a.material_group_id NOT IN (16, 17, 18, 19)'
		);
		$data['material'] = $this->admin->get_join('material_tbl a', $join, FALSE,'a.material_desc ASC','a.material_code');

		$data['process_type'] = $this->admin->get_data('process_type_tbl', array('process_type_status'	=>	1, 'process_type_id'	=>	5));

		$data['component_type'] = $this->admin->get_data('component_type_tbl', array('component_type_status'	=>	1));

		$data['bc'] = $this->admin->get_data('bc_tbl', 'bc_status=1');
		$data['title'] = 'Sales BOM';
		$data['content'] = $this->load->view('admin/admin_sales_bom_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function cancel_sales_bom_trans (){
		/*echo "<pre>";
		print_r($_POST);
		echo "</pre>";
		exit();*/
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		$prod_trans_id = clean_data(decode($this->input->post('prod_trans_id')));
		$material_desc = clean_data(decode($this->input->post('material_desc')));
		$bc_id = clean_data($this->input->post('bc_id'));
		$trans_status = clean_data($this->input->post('trans_status'));
		
		if($trans_status == 'cancel'){
			$prod_trans_status = 5;
			$status = 'cancelled';
		}

		
		$this->db->trans_start();
		$update_data = array(
			'prod_trans_status' => $prod_trans_status,
			'modified_by' => $user_id,
			'modified_ts' => date_now()
		);
		$where = array(
			'prod_trans_id' => $prod_trans_id,
		);
		$this->admin->update_data('prod_trans_tbl', $update_data, $where);

		$update_data = array(
			'prod_trans_dtl_status' => $prod_trans_status
		);
		$where = array(
			'prod_trans_id' => $prod_trans_id,
		);
		$this->admin->update_data('prod_trans_dtl_tbl', $update_data, $where);

		if($this->db->trans_status() === FALSE){
			$this->db->trans_rollback();
			$msg = '<div class="alert alert-danger">Error please try again!</div>';
		}else{
			$this->db->trans_commit();
			$msg = '<div class="alert alert-success"><strong>Transaction successfully '.$status.'.</strong></div>';
		}
		$this->session->set_flashdata('message', $msg);
		redirect('admin/sales-bom-trans/' . $bc_id);
	}

	public function sales_bom_trans($id){
		$info = $this->_require_login();
		$data['bc_id'] = $id;
		$bc_id = decode($id);
		$data['pending_lock_status'] = $this->_check_lock_status(array('module_id'	=>	3,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$this->_active_year()));

		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$data['title'] = 'Sales BOM';
		$data['year'] = $this->_active_year();
		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id and a.bc_id ='.$bc_id,
			'user_tbl c' => 'a.created_by = c.user_id',
			'status_tbl d' => 'd.status_id = a.prod_trans_status and a.prod_trans_status != 5',
			'prod_trans_dtl_tbl e' => 'a.prod_trans_id = e.prod_trans_id and YEAR(e.prod_trans_dtl_date)= '.$this->_active_year(),
			'material_tbl f' => 'a.prod_id = f.material_id',
			'process_type_tbl g' => 'a.process_type_id = g.process_type_id and g.process_type_id = 5',
			'brand_tbl h' => 'a.brand_id = h.brand_id'
		);
		$data['prod_trans'] = $this->admin->get_join('prod_trans_tbl a', $join, FALSE,'f.material_desc ASC', 'a.prod_trans_id', '*, a.created_ts');

		$data['content'] = $this->load->view('admin/admin_sales_bom_trans_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function view_sales_bom_summary($bc_id, $year, $process_type_id = 5){
		$info = $this->_require_login_prod();
		$data['bc_id'] = $bc_id;
		$data['year'] = $year;
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => decode($bc_id)), true, 'bc_name');
		$data['process_type_id'] = encode($process_type_id);
		$data['title'] = 'Sales BOM Listing';

		$prod_trans = $this->_get_all_sales_bom_summary($bc_id, $year);
		
		
		$table = '
		<div class="col-lg-12">
			<div class="table-responsive">
				<table class="table table-hover table-bordered table-stripe nowrap tbl-sales-bom-summary" width="100%">
					<thead class="bg-primary">
						<tr>
							<th rowspan="3" class="text-center bg-primary">Month</th>
							<th rowspan="3" class="text-center bg-primary">Sales BOM Name</th>
							<th rowspan="3" class="text-center">Unit</th>
							<th rowspan="3" class="text-center">Cost of Sales</th>
							<th rowspan="3" class="text-center">Cost</th>
							<th colspan="8" class="text-center">Cost Derived From</th>
						</tr>';
		$table .= '<tr>
						<th colspan="4" class="text-center">Internal</th>
						<th colspan="2" class="text-center">Commissary</th>
						<th colspan="2" class="text-center">External</th>
					</tr>';
		
		$table .= '<tr>
						<th class="text-center">Process Type</th>
						<th class="text-center">Component Type</th>
						<th class="text-center">Material</th>
						<th class="text-center">Cost</th>
						<th class="text-center">Material</th>
						<th class="text-center">Cost</th>
						<th class="text-center">Material</th>
						<th class="text-center">Cost</th>
					</tr>';

		
		$table .= '</thead><tbody>';
		$new_item = false;
		if(!empty($prod_trans)){
			foreach ($prod_trans as $r) {

				if( (!$r->prod_fg_material_desc || $r->prod_fg_material_desc == '') && (!$r->prod_external_material_desc || $r->prod_external_material_desc == '') ){
					$added_class = 'bg-danger';
				} else {
					$added_class = '';
				}
				$table .= '<tr>';
				$table .='<td class="text-center '.$added_class.'">'.date("M Y",strtotime($r->prod_trans_dtl_date)).'</td>';
				$table .='<td class="'.$added_class.'">'.$r->sales_mother_prod_desc.'</td>';
				$table .='<td class="text-center">'.$r->unit_name.'</td>';
				$table .='<td class="">'.$r->dtl_cost_of_sales_desc.'</td>';
				$table .='<td class="text-right">'.decimal_format($r->cost, 2).'</td>';
				$table .='<td class="">'.$r->prod_fg_process_type_name.'</td>';
				$table .='<td class="">'.$r->component_type.'</td>';
				$table .='<td class="">'.$r->prod_fg_material_desc.'</td>';
				$table .='<td class="text-right">'.decimal_format($r->prod_fg_cost, 2).'</td>';
				$table .='<td class="">'.$r->prod_commi_fg_material_desc.'</td>';
				$table .='<td class="text-right">'.decimal_format($r->prod_commi_fg_cost, 2).'</td>';
				$table .='<td class="">'.$r->prod_external_material_desc.'</td>';
				$table .='<td class="text-right">'.decimal_format($r->prod_external_cost, 2).'</td>';
				$table .= '</tr>';

				
			}
		} else {
			$table .='<tr><td class="text-center nowrap" colspan="10"> No data available in table </td></tr>';
		}

		$table .= '</tbody></table></div></div>';

		$data['report'] = $table;
		$data['content'] = $this->load->view('admin/admin_view_sales_bom_summary_content', $data , TRUE);
		$this->load->view('admin/templates', $data);

	}
	
	public function sync_sales_bom_summary($bc_id, $year, $process_type_id = 5){
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		$data['bc_id'] = $bc_id;
		$data['year'] = $year;
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => decode($bc_id)), true, 'bc_name');
		$data['process_type_id'] = encode($process_type_id);
		

		$prod_trans = $this->_get_all_sales_bom_summary($bc_id, $year);
		
		
		
		$new_item = false;
		if(!empty($prod_trans)){
			$has_sync = false;
			foreach ($prod_trans as $r) {
				$push_update = false;
				if($r->prod_external_cost || $r->prod_external_cost != ''){
					$cost = $r->prod_external_cost;
				} elseif($r->prod_commi_fg_cost || $r->prod_commi_fg_cost != ''){
					$cost = $r->prod_commi_fg_cost;
				} else {
					$cost = $r->prod_fg_cost;
				}

				if($r->prod_external_ave_wgt || $r->prod_external_ave_wgt != ''){
					$ave_wgt = $r->prod_external_ave_wgt;
				} elseif($r->prod_commi_fg_ave_wgt || $r->prod_commi_fg_ave_wgt != ''){
					$ave_wgt = $r->prod_commi_fg_ave_wgt;
				} else {
					$ave_wgt = $r->prod_fg_ave_wgt;
				}

				if($r->cost != $cost || $r->ave_wgt != $ave_wgt){
					$push_update = true;
				}

				if($push_update){
					$update_data = array(
						'cost' => $cost,
						'ave_wgt' => $ave_wgt,
						'sync_ts' => date_now(),
						'sync_by' => $user_id
					);
					$where = array(
						'prod_trans_dtl_id' => $r->prod_trans_dtl_id,
					);
					$this->admin->update_data('prod_trans_dtl_tbl', $update_data, $where);
					$has_sync = true;
				}
			}
			if($has_sync){
				$msg = '<div class="alert alert-success">Data synced successfully.</div>';
			} else {
				$msg = '<div class="alert alert-info">No data needed to sync.</div>';
			}
		} else {
			$msg = '<div class="alert alert-danger">No data to sync.</div>';
		}

		$this->session->set_flashdata('message', $msg);

		
		redirect('admin/view_sales_bom_summary/'.$bc_id.'/'.$year);

	}

	public function _get_all_sales_bom_summary($bc_id, $year){
		$info = $this->_require_login_prod();

		$bc_id = decode($bc_id);

		$sql = "SELECT
					*
				FROM
					(
						SELECT
							a.prod_trans_id,
							a.brand_id,
							a.prod_id AS sales_bom_mother_prod,
							c.material_desc AS sales_mother_prod_desc,
							f.unit_name,
							b.article_id AS dtl_cost_of_sales_id,
							d.material_desc AS dtl_cost_of_sales_desc,
							b.prod_trans_dtl_date,
							b.component_type_id,
							b.prod_trans_dtl_id,
							b.rate,
							b.cost,
							b.ave_wgt,
							b.qty,
							b.wgt,
							e.bc_name,
							YEAR (b.prod_trans_dtl_date) AS trans_year
						FROM
							prod_trans_tbl a
						INNER JOIN prod_trans_dtl_tbl b ON a.prod_trans_id = b.prod_trans_id
						INNER JOIN material_tbl c ON a.prod_id = c.material_id
						INNER JOIN material_tbl d ON b.article_id = d.material_id
						INNER JOIN bc_tbl e ON a.bc_id = e.bc_id
						INNER JOIN unit_tbl f ON c.unit_id = f.unit_id
						WHERE
							a.prod_trans_status != 5
						AND b.prod_trans_dtl_status = 1
						AND a.process_type_id = 5
						AND b.component_type_id = 21
						AND a.bc_id = ".$bc_id."
						AND YEAR (b.prod_trans_dtl_date) = ".$year."
						ORDER BY
							b.article_id,
							a.brand_id,
							b.prod_trans_dtl_date
					) AS bom_base
				LEFT JOIN (
					SELECT
						a.prod_trans_id AS prod_fg_prod_trans_id,
						e.process_type_name as prod_fg_process_type_name,
						b.article_id AS prod_fg_article_id,
						c.material_desc AS prod_fg_material_desc,
						b.prod_trans_dtl_date AS prod_fg_prod_trans_dtl_date,
						b.cost AS prod_fg_cost,
						b.rate AS prod_fg_rate,
						b.wgt AS prod_fg_wgt,
						b.ave_wgt AS prod_fg_ave_wgt,
						b.component_type_id AS prod_fg_component_type_id,
						a.bc_id AS prod_fg_bc_id,
						d.component_type
					FROM
						prod_trans_tbl a
					INNER JOIN prod_trans_dtl_tbl b ON b.prod_trans_id = a.prod_trans_id
					INNER JOIN material_tbl c ON b.article_id = c.material_id
					INNER JOIN component_type_tbl d ON b.component_type_id = d.component_type_id
					INNER JOIN process_type_tbl e ON a.process_type_id = e.process_type_id
					WHERE
						YEAR (b.prod_trans_dtl_date) = ".$year."
					AND b.component_type_id IN (1, 2, 4)
					AND b.prod_trans_dtl_status = 1
					AND a.cost_sheet_stat = 1
					AND a.prod_trans_status != 5
					AND a.bc_id = ".$bc_id."
					AND a.process_type_id != 5
					ORDER BY
						b.article_id,
						
						b.prod_trans_dtl_date
				) AS prod_fg ON bom_base.dtl_cost_of_sales_id = prod_fg.prod_fg_article_id
				AND bom_base.prod_trans_dtl_date = prod_fg.prod_fg_prod_trans_dtl_date
				LEFT JOIN (
					SELECT
						a.prod_trans_id AS prod_commi_fg_prod_trans_id,
						e.process_type_name as prod_commi_fg_process_type_name,
						b.article_id AS prod_commi_fg_article_id,
						c.material_desc AS prod_commi_fg_material_desc,
						b.prod_trans_dtl_date AS prod_commi_fg_prod_trans_dtl_date,
						b.cost AS prod_commi_fg_cost,
						b.rate AS prod_commi_fg_rate,
						b.wgt AS prod_commi_fg_wgt,
						b.ave_wgt AS prod_commi_fg_ave_wgt,
						b.component_type_id AS prod_commi_fg_component_type_id,
						a.bc_id AS prod_commi_fg_bc_id,
						d.component_type AS prod_commi_fg_component_type
					FROM
						prod_trans_tbl a
					INNER JOIN prod_trans_dtl_tbl b ON b.prod_trans_id = a.prod_trans_id
					INNER JOIN material_tbl c ON b.article_id = c.material_id
					INNER JOIN component_type_tbl d ON b.component_type_id = d.component_type_id
					INNER JOIN process_type_tbl e ON a.process_type_id = e.process_type_id
					INNER JOIN commi_bc_tbl f ON a.commissary_id = f.commissary_id
					WHERE
						YEAR (b.prod_trans_dtl_date) = ".$year."
					AND b.component_type_id IN (1)
					AND b.prod_trans_dtl_status = 1
					AND a.cost_sheet_stat = 1
					AND a.prod_trans_status != 5
					AND f.bc_id = ".$bc_id."
					AND a.process_type_id = 9
					ORDER BY
						b.article_id,
						
						b.prod_trans_dtl_date
				) AS prod_commi_fg ON bom_base.dtl_cost_of_sales_id = prod_commi_fg.prod_commi_fg_article_id
				AND bom_base.prod_trans_dtl_date = prod_commi_fg.prod_commi_fg_prod_trans_dtl_date
				LEFT JOIN (
					SELECT
						a.ext_prod_trans_id AS prod_external_ext_prod_trans_id,
						a.material_id AS prod_external_material_id,
						c.material_desc AS prod_external_material_desc,
						b.trans_dtl_date AS prod_external_trans_dtl_date,
						b.cost AS prod_external_cost,
						b.ave_wgt AS prod_external_ave_wgt,
						a.bc_id AS prod_external_bc_id
					FROM
						ext_prod_trans_tbl a
					INNER JOIN ext_prod_trans_dtl_tbl b ON a.ext_prod_trans_id = b.ext_prod_trans_id
					INNER JOIN material_tbl c ON a.material_id = c.material_id
					WHERE
						YEAR (b.trans_dtl_date) = ".$year."
					AND a.ext_prod_trans_status != 5
					AND b.ext_prod_trans_dtl_status != 5
					AND a.bc_id = ".$bc_id."
					ORDER BY
						a.material_id,
						
						b.trans_dtl_date
				) AS prod_external ON bom_base.dtl_cost_of_sales_id = prod_external.prod_external_material_id
				AND bom_base.prod_trans_dtl_date = prod_external.prod_external_trans_dtl_date
				ORDER BY
				bom_base.dtl_cost_of_sales_id,
				bom_base.brand_id,
				bom_base.prod_trans_dtl_date";

		
		return $this->admin->get_query($sql);
	}

	public function resync_bom_summary($bc_id, $year, $process_type_id = 5){
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		$data['bc_id'] = $bc_id;
		$data['year'] = $year;
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => decode($bc_id)), true, 'bc_name');
		$data['process_type_id'] = encode($process_type_id);
		

		$prod_trans = $this->_get_all_sales_bom_trans($bc_id, $year);
		
		
		if(!empty($prod_trans)){
			foreach($prod_trans as $r){
				$this->compute_bom_material($r->bc_id, $year, $r->prod_id, $r->brand_id);
			}
		}
		$msg = '<div class="alert alert-success"><strong>BC BOM Summary updated</strong></div>';
		$this->session->set_flashdata('message', $msg);

		
		redirect('admin/sales-bom-trans/'.$bc_id);

	}

	public function _get_all_sales_bom_trans($bc_id, $year, $process_type_id = 5){

		$info = $this->_require_login();
		$bc_id = decode($bc_id);
		$join = array(
			
			'prod_trans_dtl_tbl e' => 'a.prod_trans_id = e.prod_trans_id and YEAR(e.prod_trans_dtl_date)= '.$year.' and a.bc_id ='.$bc_id.' and a.process_type_id = '.$process_type_id.' and a.trans_type_id = 1 and a.prod_trans_status = 3'
			
		);
		$get_prod_trans_yearly = $this->admin->get_join('prod_trans_tbl a', $join, FALSE,'a.prod_trans_id ASC', 'a.prod_trans_id');
		

		return $get_prod_trans_yearly;
	}
	

	public function get_sales_bom_trans(){
		
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$prod_trans_dtl_date =clean_data($this->input->post('prod_trans_date'));
			$bc_id = clean_data(decode($this->input->post('bc_id')));

			$pending_lock_status = $this->_check_lock_status(array('module_id'	=>	3,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$prod_trans_dtl_date ));
			
			if($prod_trans_dtl_date){
				$join = array(
					'bc_tbl b' => 'a.bc_id = b.bc_id and a.bc_id ='.$bc_id,
					'user_tbl c' => 'a.created_by = c.user_id',
					'status_tbl d' => 'd.status_id = a.prod_trans_status and a.prod_trans_status != 5',
					'prod_trans_dtl_tbl e' => 'a.prod_trans_id = e.prod_trans_id and YEAR(e.prod_trans_dtl_date)= '.$prod_trans_dtl_date,
					'material_tbl f' => 'a.prod_id = f.material_id',
					'process_type_tbl g' => 'a.process_type_id = g.process_type_id and g.process_type_id = 5',
					'brand_tbl h' => 'a.brand_id = h.brand_id'
				);
				$get_prod_trans_yearly = $this->admin->get_join('prod_trans_tbl a', $join, FALSE,'f.material_desc ASC', 'a.prod_trans_id');
				$prod_trans = '';
				if($get_prod_trans_yearly){
					foreach($get_prod_trans_yearly as $row){
						if($row->prod_trans_status != 5){
							$prod_trans .= '<tr><td class="text-center"><a href="" class="remove-prod-trans" data-id="'.encode($row->prod_trans_id).'" data-bc_id="'.$bc_id.'" data-mat_desc="'.encode($row->material_desc).'"><i class="fa fa-remove"></i></a></td>';
						}
						$prod_trans .= '<td>' . $row->process_type_name .'</td>';
						$prod_trans .= '<td>' . $row->material_code.' - '. $row->material_desc .'</td>';
						$prod_trans .= '<td>' . $row->brand_name .'</td>';
						$prod_trans .= '<td>' . $row->user_fname.' '.$row->user_lname .'</td>';
						$prod_trans .= '<td>' . date( 'm/d/Y', strtotime($row->created_ts)) .'</td>';
						$prod_trans .= '<td class="text-center"><a href="'.base_url('admin/view-prod-trans/' . encode($row->prod_trans_id).'/'.encode($bc_id).'/'.encode($row->process_type_id).'/'. encode($prod_trans_dtl_date)).'" class="btn btn-xs btn-success">View</a></td>';
						$prod_trans .= '</tr>';
						
						//'&nbsp;&nbsp;<a href="'.base_url('admin/view-cost-sheet/' . encode($row->prod_trans_id).'/'.encode($bc_id).'/'.encode(date('Y', strtotime($row->prod_trans_dtl_date))).'/'.encode($row->process_type_id).'/'.encode($row->material_id)).'" class="btn btn-xs btn-primary">Cost Sheet</a>';
					}
					$data['prod_trans'] = $prod_trans;
					$data['result'] = 1;
					$data['pending_lock_status'] = $pending_lock_status;
				} else {
					$data['result'] = 1;
					$data['pending_lock_status'] = $pending_lock_status;
				}
			} else {
				$data['result'] = 0;
			}
		}
		echo json_encode($data);
	}

	public function new_sales_bom_trans($id, $pick_year){
		$info = $this->_require_login();
		$data['bc_id'] = $id;
		$data['year'] = $pick_year;
		$bc_id = decode($id);
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$this->_check_lock_status(array('module_id'	=>	3,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$pick_year), 'Admin/sales-bom-trans/'.encode($bc_id));
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		
		$data['title'] = 'Sales BOM';

		$join = array(
			'material_tbl b' => 'a.prod_id = b.material_id',
			'process_type_tbl c' => 'a.process_type_id = c.process_type_id and c.process_type_id = 5 and a.config_prod_status != 5'
		);
		$where = 'a.config_prod_id NOT IN (SELECT a.config_prod_id from prod_trans_tbl a INNER JOIN prod_trans_dtl_tbl b ON a.prod_trans_id = b.prod_trans_id where a.bc_id = '.$bc_id.' and a.process_type_id = 5 and a.prod_trans_status != 5 and YEAR(b.prod_trans_dtl_date) = "'.$pick_year.'" GROUP BY a.config_prod_id)';
		$where = false;
		$data['config_prod'] = $this->admin->get_join('config_prod_tbl a', $join, FALSE,'c. process_type_id, b.material_desc ASC', false, false, $where);
		$data['type'] = $this->admin->get_data('brand_type_tbl', array('brand_type_status' => 1));
		$data['brand'] = $this->admin->get_data('brand_tbl', array('brand_status' => 1));
		$data['content'] = $this->load->view('admin/admin_new_sales_bom_trans_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function new_ext_prod_trans($id, $pick_year){

		$info = $this->_require_login_prod();
		$data['bc_id'] = $id;
		$data['year'] = $pick_year;
 		$year = $pick_year;
		$bc_id = decode($id);
		$this->_check_lock_status(array('module_id'	=>	2,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$year), 'Admin/prod-trans/'.encode($bc_id));

		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$data['title'] = 'Production Cost';
		$sql = 'SELECT
					a.*,
					b.material_desc, b.material_code
				FROM
					ext_prod_trans_tbl a
				INNER JOIN material_tbl b ON a.material_id = b.material_id
				AND b.material_status = 1
				
				and a.bc_id = '.$bc_id.'
				WHERE
					ext_prod_trans_id NOT IN (
						SELECT
							a.ext_prod_trans_id
						FROM
							ext_prod_trans_dtl_tbl a
						JOIN ext_prod_trans_tbl b on a.ext_prod_trans_id = b.ext_prod_trans_id
						WHERE
							ext_prod_trans_dtl_status = 1
						and b.bc_id = '.$bc_id.'
						AND YEAR (trans_dtl_date) = '.$year.'
						GROUP BY
							ext_prod_trans_id
					)
				GROUP BY a.material_id';
		
		$data['ext_prod_trans'] = $this->admin->get_query($sql);
		$data['content'] = $this->load->view('admin/admin_new_ext_prod_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function edit_ext_prod_trans($id, $bc_id, $pick_year){

		$info = $this->_require_login_prod();
		$data['ext_prod_trans_id'] = $id;
		$data['bc_id'] = $bc_id;
		$bc_id = decode($bc_id);
		$data['pending_lock_status'] = $this->_check_lock_status(array('module_id'	=>	2,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$pick_year));

		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$ext_prod_trans_id = decode($id);
		$data['year'] = $pick_year;
		$join = array(
			'ext_prod_trans_dtl_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id and b.ext_prod_trans_dtl_status != 5 and a.ext_prod_trans_id ='.$ext_prod_trans_id,
			'material_tbl f' => 'a.material_id = f.material_id'
		);
		$data['ext_prod_trans'] = $this->admin->get_join('ext_prod_trans_tbl a', $join, FALSE,'f.material_desc ASC', 'a.ext_prod_trans_id');

		$data['title'] = 'Production Cost';
		$data['content'] = $this->load->view('admin/admin_edit_ext_prod_trans_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function add_ext_prod(){
		/*echo '<pre>';
		print_r($_POST);
		exit();*/
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$bc_id = decode($this->input->post('bc_id'));
			$material = $this->input->post('material_id');
			if(!empty($bc_id)){
				$this->db->trans_start();
				foreach ($material as $key) {
					$material_id = clean_data(decode($key));

					$check_ext_prod = $this->admin->check_data('ext_prod_trans_tbl', array('material_id' =>  $material_id,	'bc_id'	=>	$bc_id));
					if($check_ext_prod == FALSE){
						$set = array(
							'material_id'	=>	$material_id,
							'bc_id'	=>	$bc_id,
							'trans_type_id'	=>	1,
							'ext_prod_trans_status'	=>	1,
							'created_by' => $user_id,
							'created_ts'	=>	date_now()
						);
						$result = $this->admin->insert_data('ext_prod_trans_tbl', $set, TRUE);

					} else {
						$msg = '<div class="alert alert-danger">Error! Material(s) already exist!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/prod-trans/' . encode($bc_id));
					}
				}

			} else {
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/prod-trans/' . encode($bc_id));
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success"><strong>Material(s) successfully added. You can view it by Adding Transaction</strong></div>';
			}
			$this->session->set_flashdata('message', $msg);
			redirect('admin/prod-trans/' . encode($bc_id));
		} else {
			redirect('admin/prod-trans/' . encode($bc_id));
		}
	}

	public function add_ext_prod_trans_dtl(){
		
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$ext_prod_trans_id_array = $this->input->post('ext_prod_trans_id');
			$year = decode($this->input->post('year'));
			$bc_id = decode($this->input->post('bc_id'));
			$this->_check_lock_status(array('module_id'	=>	2,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$year), 'Admin/prod-trans/'.encode($bc_id));

			$ave_wgt = clean_data($this->input->post('ave_wgt'));
			$cost = clean_data($this->input->post('cost'));
			if(!empty($ext_prod_trans_id_array) && !empty($year) && !empty($bc_id)){
				$this->db->trans_start();
				$count = 0;
				foreach ($ext_prod_trans_id_array as $key) {

					$ext_prod_trans_id = clean_data(decode($key));

					$check_ext_prod = $this->admin->check_data('ext_prod_trans_dtl_tbl', array('ext_prod_trans_id' =>  $ext_prod_trans_id,	'ext_prod_trans_dtl_status !='	=>	5, 'YEAR(trans_dtl_date)' => $year));
					if($check_ext_prod == FALSE){
						$update_data = array(
							'ext_prod_trans_status' => 1,
							'modified_ts' => date_now()
						);
						$where = array(
							'ext_prod_trans_id' => $ext_prod_trans_id
						);
						$this->admin->update_data('ext_prod_trans_tbl', $update_data, $where);

						
						for ($i=1; $i <= 12 ; $i++) {
							$month = date('M', strtotime($year.'-'.$i.'-01'));
							$date = $year . '-' .$i.'-01';
							//$ave_wgt_amount = count($ave_wgt) <= 1 ? 0 : $ave_wgt[$month][$count];
							$ave_wgt_amount = empty(@$ave_wgt[$month][$count]) ? 0 : $ave_wgt[$month][$count];
							$cost_amount = $cost[$month][$count];

							$insert_trans_dtl = array(
								'ext_prod_trans_id' => $ext_prod_trans_id,
								'trans_dtl_date' =>$date,
								'ave_wgt' => $ave_wgt_amount,
								'cost' => $cost_amount,
								'ext_prod_trans_dtl_status' => 1
							);
							$this->admin->insert_data('ext_prod_trans_dtl_tbl', $insert_trans_dtl, true);
						}
						$count++;
					} else {
						$msg = '<div class="alert alert-danger">Error! Material(s) already exist!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/prod-trans/' . encode($bc_id));
					}
				}

			} else {
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/prod-trans/' . encode($bc_id));
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success"><strong>Transaction successfully added.</strong></div>';
			}
			$this->session->set_flashdata('message', $msg);
			redirect('admin/prod-trans/' . encode($bc_id));
		} else {
			redirect('admin/prod-trans/' . encode($bc_id));
		}
	}

	public function update_ext_prod_trans(){
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$bc_id = clean_data(decode($this->input->post('bc_id')));
			$year = clean_data($this->input->post('year'));
			$this->_check_lock_status(array('module_id'	=>	2,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$year), 'Admin/prod-trans/'.encode($bc_id));
			
			if(!empty($bc_id) && !empty($year)){
				$id = clean_data($this->input->post('ext_prod_trans_id'));
				$ave_wgt = clean_data($this->input->post('ave_wgt'));
				$cost = clean_data($this->input->post('cost'));
				$count = 0;
				$this->db->trans_start();
				
				foreach($id as $row){

					$ext_prod_trans_id = decode($row);

					//update header transaction
					$update_prod_trans = array(
						'modified_by' => $user_id,
						'modified_ts' => date_now()
					);
					$where = array(
						'ext_prod_trans_id' => $ext_prod_trans_id

					);
					$this->admin->update_data('ext_prod_trans_tbl', $update_prod_trans, $where);
					
					for ($i=1; $i <= 12 ; $i++) {

						$ave_wgt_amount = count($ave_wgt) <= 1 ? 0 : $ave_wgt[$i][$count];
						$cost_amount = $cost[$i][$count];
						
						if(!count($ave_wgt)){
							$update_trans_dtl = array(
								'cost' =>$cost_amount
							);
						} else {
							$update_trans_dtl = array(
								'ave_wgt' =>$ave_wgt_amount,
								'cost' =>$cost_amount
							);
						}
						
						$where = array(
							'ext_prod_trans_id' => $ext_prod_trans_id,
							'MONTH(trans_dtl_date)' => $i,
							'ext_prod_trans_dtl_status !=' => 5
						);
						$this->admin->update_data('ext_prod_trans_dtl_tbl', $update_trans_dtl, $where);
					}
					$count++;
				}
				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success"><strong>Transaction successfully updated.</strong></div>';
				}
				
				$this->session->set_flashdata('message', $msg);
				redirect('admin/prod-trans/'.encode($bc_id));
			} else {
				echo 'Something wrong on bc';
			}
		} else{
			echo 'Something wrong';
		}
	}

	public function cancel_ext_prod_trans(){
		/*echo "<pre>";
		print_r($_POST);
		echo "</pre>";
		exit();*/
		$info = $this->_require_login_prod();
		$user_id = decode($info['user_id']);

		$ext_prod_trans_id = clean_data(decode($this->input->post('ext_prod_trans_id')));
		$bc_id = clean_data($this->input->post('bc_id'));
		$trans_status = clean_data($this->input->post('trans_status'));
		
		if($trans_status == 'cancel'){
			$ext_prod_trans_status = 5;
			$status = 'cancelled';
		}

		
		$this->db->trans_start();
		$update_data = array(
			'ext_prod_trans_status' => $ext_prod_trans_status,
			'modified_by' => $user_id,
			'modified_ts' => date_now()
		);
		$where = array(
			'ext_prod_trans_id' => $ext_prod_trans_id,
		);
		$this->admin->update_data('ext_prod_trans_tbl', $update_data, $where);

		$update_data = array(
			'ext_prod_trans_dtl_status' => $ext_prod_trans_status
		);
		$where = array(
			'ext_prod_trans_id' => $ext_prod_trans_id,
		);
		$this->admin->update_data('ext_prod_trans_dtl_tbl', $update_data, $where);

		if($this->db->trans_status() === FALSE){
			$this->db->trans_rollback();
			$msg = '<div class="alert alert-danger">Error please try again!</div>';
		}else{
			$this->db->trans_commit();
			$msg = '<div class="alert alert-success"><strong>Transaction successfully '.$status.'.</strong></div>';
		}
		$this->session->set_flashdata('message', $msg);
		redirect('admin/prod-trans/' . $bc_id);
	}

	public function view_ext_prod_trans($id, $pick_year){

		$info = $this->_require_login_prod();
		$data['bc_id'] = $id;
		$data['year'] = $pick_year;
 		$year = $pick_year;
		$bc_id = decode($id);
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$data['title'] = 'Production Cost';
		$sql = 'SELECT
					a.*,
					b.material_desc, b.material_code
				FROM
					ext_prod_trans_tbl a
				INNER JOIN material_tbl b ON a.material_id = b.material_id
				INNER JOIN ext_prod_trans_dtl_tbl c ON a.ext_prod_trans_id = c.ext_prod_trans_id
				and YEAR(c.trans_dtl_date) = '.$year.'
				AND b.material_status = 1
				and a.ext_prod_trans_status = 1
				and a.bc_id = '.$bc_id.'
				GROUP BY a.ext_prod_trans_id
				';
		
		$data['ext_prod_trans'] = $this->admin->get_query($sql);
		$data['content'] = $this->load->view('admin/admin_view_ext_prod_content', $data , TRUE);
		$this->load->view('admin/templates', $data);

	}

	public function download_ext_prod_temp(){
		$info = $this->_require_login_prod();
		$company_unit = $this->admin->get_data('company_unit_tbl', array('company_unit_status' => 1), false);
		$bc = $this->admin->get_data('bc_tbl', array('bc_status' => 1), false);
		$join = array(
			'material_group_tbl b' => 'a.material_group_id = b.material_group_id'
		);
		$row_type=FALSE;
		$order='b.material_group_name, a.material_code';
		$group='a.material_id';
		$select=FALSE;
		$materials = $this->admin->get_join('material_tbl a', $join, $row_type, $order, $group, $select, array('material_status' => 1), false);

		
		
		$this->load->library('excel');
		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Comparative CAPEX (BC) Temp')
				->setDescription('Comparative CAPEX (BC) Temp');
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_left = array(
			
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		
		$spreadsheet->setActiveSheetIndex(0)
				->setTitle("External Materials")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(false);

		$reportTitle = 'External Materials Template';
		$reportTitle .= "\nRun Date : ".date_now();

		$spreadsheet->getActiveSheet()->getStyle("A2:H2")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A2:H2")->applyFromArray($style_info);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle);


		$spreadsheet->getActiveSheet()->setCellValue('A2', 'Material Code');
		$spreadsheet->getActiveSheet()->mergeCells('A2:A3');
		$spreadsheet->getActiveSheet()->setCellValue('B2', 'Material Name');
		$spreadsheet->getActiveSheet()->mergeCells('B2:B3');

		$spreadsheet->getActiveSheet()->setCellValue('C2', 'Jan');
		$spreadsheet->getActiveSheet()->mergeCells('C2:D2');
		$spreadsheet->getActiveSheet()->setCellValue('C3', 'Cost');
		$spreadsheet->getActiveSheet()->setCellValue('D3', 'Ave Wgt');

		$spreadsheet->getActiveSheet()->setCellValue('E2', 'Feb');
		$spreadsheet->getActiveSheet()->mergeCells('E2:F2');
		$spreadsheet->getActiveSheet()->setCellValue('E3', 'Cost');
		$spreadsheet->getActiveSheet()->setCellValue('F3', 'Ave Wgt');

		$spreadsheet->getActiveSheet()->setCellValue('G2', 'Mar');
		$spreadsheet->getActiveSheet()->mergeCells('G2:H2');
		$spreadsheet->getActiveSheet()->setCellValue('G3', 'Cost');
		$spreadsheet->getActiveSheet()->setCellValue('H3', 'Ave Wgt');

		$spreadsheet->getActiveSheet()->setCellValue('I2', 'Apr');
		$spreadsheet->getActiveSheet()->mergeCells('I2:J2');
		$spreadsheet->getActiveSheet()->setCellValue('I3', 'Cost');
		$spreadsheet->getActiveSheet()->setCellValue('J3', 'Ave Wgt');
		
		$spreadsheet->getActiveSheet()->setCellValue('K2', 'May');
		$spreadsheet->getActiveSheet()->mergeCells('K2:L2');
		$spreadsheet->getActiveSheet()->setCellValue('K3', 'Cost');
		$spreadsheet->getActiveSheet()->setCellValue('L3', 'Ave Wgt');
		
		$spreadsheet->getActiveSheet()->setCellValue('M2', 'Jun');
		$spreadsheet->getActiveSheet()->mergeCells('M2:N2');
		$spreadsheet->getActiveSheet()->setCellValue('M3', 'Cost');
		$spreadsheet->getActiveSheet()->setCellValue('N3', 'Ave Wgt');
		
		$spreadsheet->getActiveSheet()->setCellValue('O2', 'Jul');
		$spreadsheet->getActiveSheet()->mergeCells('O2:P2');
		$spreadsheet->getActiveSheet()->setCellValue('O3', 'Cost');
		$spreadsheet->getActiveSheet()->setCellValue('P3', 'Ave Wgt');
		
		$spreadsheet->getActiveSheet()->setCellValue('Q2', 'Aug');
		$spreadsheet->getActiveSheet()->mergeCells('Q2:R2');
		$spreadsheet->getActiveSheet()->setCellValue('Q3', 'Cost');
		$spreadsheet->getActiveSheet()->setCellValue('R3', 'Ave Wgt');
		
		$spreadsheet->getActiveSheet()->setCellValue('S2', 'Sep');
		$spreadsheet->getActiveSheet()->mergeCells('S2:T2');
		$spreadsheet->getActiveSheet()->setCellValue('S3', 'Cost');
		$spreadsheet->getActiveSheet()->setCellValue('T3', 'Ave Wgt');
		
		$spreadsheet->getActiveSheet()->setCellValue('U2', 'Oct');
		$spreadsheet->getActiveSheet()->mergeCells('U2:V2');
		$spreadsheet->getActiveSheet()->setCellValue('U3', 'Cost');
		$spreadsheet->getActiveSheet()->setCellValue('V3', 'Ave Wgt');
		
		$spreadsheet->getActiveSheet()->setCellValue('W2', 'Nov');
		$spreadsheet->getActiveSheet()->mergeCells('W2:X2');
		$spreadsheet->getActiveSheet()->setCellValue('W3', 'Cost');
		$spreadsheet->getActiveSheet()->setCellValue('X3', 'Ave Wgt');
		
		$spreadsheet->getActiveSheet()->setCellValue('Y2', 'Dec');
		$spreadsheet->getActiveSheet()->mergeCells('Y2:Z2');
		$spreadsheet->getActiveSheet()->setCellValue('Y3', 'Cost');
		$spreadsheet->getActiveSheet()->setCellValue('Z3', 'Ave Wgt');
		
		

		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);
		$spreadsheet->getActiveSheet()->getStyle("A2:Z3")->applyFromArray($style_hdr);

		foreach(range('A','Z') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$spreadsheet->getActiveSheet()->getColumnDimension('B')->setAutoSize( false );
		$spreadsheet->getActiveSheet()->getColumnDimension('B')->setWidth(30);
		

		//SHEET 2
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(1)
				->setTitle("Material")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Material Group',
			'Material Code',
			'Material Name',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($materials as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->material_group_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->material_code);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, $row->material_desc);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(3 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:D1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','D') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		

		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="External Materials Temp.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function upload_ext_prod(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$user_id = decode($info['user_id']);
			//$this->load->library('excel');
			$this->load->library('excel_v2');
			ini_set('max_execution_time', 0);
			ini_set('memory_limit','2048M');

			$path = 'assets/ext-prod/';
			if (!is_dir($path)) {
			    mkdir($path, 0777, TRUE);
			}


			$trans_year = clean_data($this->input->post('ext-prod-year'));
			$bc_id = clean_data($this->input->post('bc_id'));

			$config['upload_path'] = $path;
			$config['allowed_types'] = 'xlsx|xls';
			$config['remove_spaces'] = TRUE;
			$this->load->library('upload', $config);
			$this->upload->initialize($config);            
			if (!$this->upload->do_upload('ext-prod-file')) {
				$error = array('error' => $this->upload->display_errors());
			} else {
				$data = array('upload_data' => $this->upload->data());
			}

			if(empty($error)){
				if (!empty($data['upload_data']['file_name'])) {
					$import_xls_file = $data['upload_data']['file_name'];
				} else {
					$import_xls_file = 0;
				}

				if(empty($trans_year)){
					$msg = '<div class="alert alert-danger">Error, Transaction year is required.</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('admin/prod-trans/' . $bc_id);
				}

				$inputFileName = $path . $import_xls_file;
				try {
					$inputFileType = PHPExcel_IOFactory::identify($inputFileName);
					$objReader = PHPExcel_IOFactory::createReader($inputFileType);
					$objPHPExcel = $objReader->load($inputFileName);
					$allDataInSheet = $objPHPExcel->getActiveSheet()->toArray(null, true, false, true);
					$flag = true;
					$i=2; //dating 4
					
					$added = 0;
					
					
		        	$totalKgs = 0;
		        	$overAllTotal = 0;
		        	$msg = '';
		        	$this->db->trans_start();

		        	//echo '<pre>';
		        	//print_r($allDataInSheet);
		        	//echo '</pre>';
		        	//exit();
		        	foreach ($allDataInSheet as $value) {
	        			if($added < 3){ //dating 3
	        				if($added == 2){
				        		if(
					        		empty($value['C']) ||
									empty($value['D']) ||
									empty($value['E']) ||
									empty($value['F']) ||
									!empty($value['AA'])
				        		){
				        			$msg = '<div class="alert alert-danger">Error, Invalid Template! Please download the latest one.</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/prod-trans/' . $bc_id);
				        		}
				        	}
		                  	goto end_ext_prod_upload;
		                }

		                
			        	$material_code		= strtoupper(clean_data(trim(@$value['A'])));
			        	

						$cost = array(
							'1' => clean_data(trim(@$value['C'])),
							'2' => clean_data(trim(@$value['E'])),
							'3' => clean_data(trim(@$value['G'])),
							'4' => clean_data(trim(@$value['I'])),
							'5' => clean_data(trim(@$value['K'])),
							'6' => clean_data(trim(@$value['M'])),
							'7' => clean_data(trim(@$value['O'])),
							'8' => clean_data(trim(@$value['Q'])),
							'9' => clean_data(trim(@$value['S'])),
							'10' => clean_data(trim(@$value['U'])),
							'11' => clean_data(trim(@$value['W'])),
							'12' => clean_data(trim(@$value['Y']))
						);
						
						$ave_wgt = array(
							'1' => clean_data(trim(@$value['D'])),
							'2' => clean_data(trim(@$value['F'])),
							'3' => clean_data(trim(@$value['H'])),
							'4' => clean_data(trim(@$value['J'])),
							'5' => clean_data(trim(@$value['L'])),
							'6' => clean_data(trim(@$value['N'])),
							'7' => clean_data(trim(@$value['P'])),
							'8' => clean_data(trim(@$value['R'])),
							'9' => clean_data(trim(@$value['T'])),
							'10' => clean_data(trim(@$value['V'])),
							'11' => clean_data(trim(@$value['X'])),
							'12' => clean_data(trim(@$value['Z']))
						);
						


			        	$i++;
						

						$check_material = $this->admin->check_data('material_tbl', array('material_code' => $material_code), TRUE, 'material_id');
			        	if($check_material['result'] == TRUE){
							$material_id = $check_material['info']->material_id;
						}else{
							$material_id = '';
							
							$msg .= '<div class="alert alert-danger">Material Code ('.$material_code.') does not exist! Line number '.$i.'.</div>';
							goto end_ext_prod_upload;
							
						}



						$sql = 'UPDATE ext_prod_trans_tbl a
						INNER JOIN ext_prod_trans_dtl_tbl b ON a.ext_prod_trans_id = b.ext_prod_trans_id
						set a.ext_prod_trans_status = 5,
						b.ext_prod_trans_dtl_status = 5
						where a.bc_id= '.decode($bc_id).' and a.material_id = '.$material_id.' and YEAR(b.trans_dtl_date) = '.$trans_year;
						
						$this->db->query($sql);


			        	if(!empty($bc_id)){
							$set = array(
								
								'material_id' => $material_id,
								'bc_id' 	=> decode($bc_id),
								
								'trans_type_id'	=> 1,
								'ext_prod_trans_status'	=> 1,
								'created_ts'	=> date_now(),
								'created_by' => $user_id
								
							);
							$result =  $this->admin->insert_data('ext_prod_trans_tbl', $set, TRUE);
							for($month = 1; $month <= 12; $month++){	
								$set = array(
									'ext_prod_trans_id' => $result['id'],
									'trans_dtl_date'	=> $trans_year.'-'.$month.'-01',
									'cost' => $cost[$month],
									'ave_wgt' => $ave_wgt[$month],
									'ext_prod_trans_dtl_status'	=> 1
								);
								$result_dtl =  $this->admin->insert_data('ext_prod_trans_dtl_tbl', $set, TRUE);
							}
						}
		                
						end_ext_prod_upload:
		                $added++;
		            }
		            if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg .= '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/prod-trans/' . $bc_id);
					}else{
						$this->db->trans_commit();
						$msg .= '<div class="alert alert-success">Data uploaded successfully!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/prod-trans/' . $bc_id);
					}

		        } catch (Exception $e) {
					die('Error loading file "' . pathinfo($inputFileName, PATHINFO_BASENAME)
		                  . '": ' .$e->getMessage());

				}
					
			} else {
				$msg = '<div class="alert alert-danger">'.$this->upload->display_errors().'</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/prod-trans/' . $bc_id);
			}
		} else {
			$msg = '<div class="alert alert-danger">Please contact system administrator!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/prod-trans/' . $bc_id);
		}

		
	}

	public function new_industry_trans($id, $year = false){
		$info = $this->_require_login_ahg();
		$data['bc_id'] = $id;
		$bc_id = decode($id);
		$data['pick_year'] = decode($year);
		if($year){
			$year = decode($year) - 1;
		} else {
			$year = $this->_active_year() - 1;
		}
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$data['title'] = 'Broiler Cost';
		$data['year'] = $year;

		$sql = 'SELECT
					*
				FROM
					industry_tbl a
				WHERE
					a.industry_id NOT IN (
						SELECT
							industry_id
						FROM
							industry_trans_tbl a
						JOIN industry_trans_dtl_tbl b on a.industry_trans_id = b.industry_trans_id
						WHERE
							a.trans_status != 5
						AND a.trans_type_id = 2
						AND a.bc_id = '.$bc_id.'
						AND YEAR (b.capacity_year) = '.$year.'
					)';
		$data['industry_data'] = $this->admin->get_query($sql);
		$data['content'] = $this->load->view('admin/admin_new_industry_trans_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}
	
	public function add_industry_trans(){
		
		$info = $this->_require_login_ahg();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$industry_id_array = $this->input->post('industry_id');
			$year = $this->input->post('pick_year')-1;
			$bc_id = decode($this->input->post('bc_id'));
			$beginning = clean_data($this->input->post('beginning'));
			$current = clean_data($this->input->post('current'));
			$ending = clean_data($this->input->post('ending'));

			if(count($industry_id_array) && !empty($bc_id)){
				$count = 0;
				$this->db->trans_start();
				foreach ($industry_id_array as $key) {

					$industry_id = clean_data(decode($key));
					$join = array(
						'industry_trans_dtl_tbl b' => 'a.industry_trans_id = b.industry_trans_id and a.industry_id = '.$industry_id.' and a.bc_id ='.$bc_id.' and a.trans_status != 5 and YEAR(b.capacity_year) = '.$year
					);
					$check_industry_trans = $this->admin->check_join('industry_trans_tbl a', $join);

					if($check_industry_trans == FALSE){
						$insert_trans = array(
							'industry_id' => $industry_id,
							'bc_id' =>$bc_id,
							'trans_type_id' => 2,
							'trans_status' => 3,
							'created_by' => $user_id,
							'created_ts' =>	date_now()
						);
						$industry_trans_tbl = $this->admin->insert_data('industry_trans_tbl', $insert_trans, true);
						
						$month = date('M', strtotime($year.'-01-01'));
						$date = $year.'-01-01';
						$beginning_amount = $beginning[$count];
						$current_amount = $current[$count];
						$ending_amount = $ending[$count];

						$insert_trans_dtl = array(
							'industry_trans_id' => $industry_trans_tbl['id'],
							'industry_capacity' =>$beginning_amount,
							'capacity_year' => $date,
							'season_id' => 1
						);
						$this->admin->insert_data('industry_trans_dtl_tbl', $insert_trans_dtl, true);

						$insert_trans_dtl = array(
							'industry_trans_id' => $industry_trans_tbl['id'],
							'industry_capacity' =>$current_amount,
							'capacity_year' => $date,
							'season_id' => 2
						);
						$this->admin->insert_data('industry_trans_dtl_tbl', $insert_trans_dtl, true);

						$insert_trans_dtl = array(
							'industry_trans_id' => $industry_trans_tbl['id'],
							'industry_capacity' =>$ending_amount,
							'capacity_year' => $date,
							'season_id' => 3
						);
						$this->admin->insert_data('industry_trans_dtl_tbl', $insert_trans_dtl, true);

						$count++;
					} else {
						$msg = '<div class="alert alert-danger">Error! Material(s) already exist!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/broiler-trans/' . encode($bc_id).'/'.$this->input->post('pick_year'));
					}
				}

			} else {
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/broiler-trans/' . encode($bc_id).'/'.$this->input->post('pick_year'));
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success"><strong>Industry successfully added.</strong></div>';
			}
			$this->session->set_flashdata('message', $msg);
			redirect('admin/broiler-trans/' . encode($bc_id).'/'.$this->input->post('pick_year'));
		} else {
			redirect('admin/broiler-trans/' . encode($bc_id).'/'.$this->input->post('pick_year'));
		}
	}

	public function edit_industry_trans($id, $bc_id, $pick_year = false){
		$info = $this->_require_login_ahg();
		$data['industry_trans_id'] = $id;
		$data['bc_id'] = $bc_id;
		$bc_id = decode($bc_id);
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$industry_trans_id = decode($id);

		if($pick_year){
			$pick_year = decode($pick_year);
			$data['pending_lock_status'] = $this->_check_lock_status(array('module_id'	=>	1,	'lock_type_id' => 1, 'lock_location_id'	=>	$bc_id,	'lock_status_id'	=>	1, 'lock_year'	=>	$pick_year));
		}
		$data['pick_year'] = $pick_year;
		
		$join = array(
			'industry_trans_dtl_tbl b' => 'a.industry_trans_id = b.industry_trans_id and a.bc_id ='.$bc_id.' and a.trans_status != 5 and a.industry_trans_id ='.$industry_trans_id,
			'industry_tbl c'	=>	'a.industry_id = c.industry_id and c.industry_status = 1'
		);
		
		$data['industry_trans'] = $this->admin->get_join('industry_trans_tbl a', $join, false, false, 'a.industry_trans_id');

		$data['title'] = 'Broiler Cost';
		$data['content'] = $this->load->view('admin/admin_edit_industry_trans_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function update_industry_trans(){
		$info = $this->_require_login_ahg();
		$user_id = decode($info['user_id']);
		$year = $this->input->post('pick_year')-1;
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$industry_trans_id_array = $this->input->post('industry_trans_id');
			$bc_id = decode($this->input->post('bc_id'));
			$beginning = clean_data($this->input->post('beginning'));
			$current = clean_data($this->input->post('current'));
			$ending = clean_data($this->input->post('ending'));
			
			if(count($industry_trans_id_array) && !empty($bc_id)){
				$count = 0;
				$this->db->trans_start();
				foreach ($industry_trans_id_array as $key) {

					$industry_trans_id = clean_data(decode($key));
					
					$update_trans = array(
						'modified_by' => $user_id,
						'modified_ts' =>	date_now()
					);
					$where = array(
						'industry_trans_id' => $industry_trans_id
					);
					$industry_trans_tbl = $this->admin->update_data('industry_trans_tbl', $update_trans, $where);
					
					$beginning_amount = $beginning[$count];
					$current_amount = $current[$count];
					$ending_amount = $ending[$count];

					$update_trans_dtl = array(
						
						'industry_capacity' =>$beginning_amount
					);

					$where = array(
						'industry_trans_id' => $industry_trans_id,
						'season_id'	=>	1
					);
					$this->admin->update_data('industry_trans_dtl_tbl', $update_trans_dtl, $where);

					$update_trans_dtl = array(
						'industry_capacity' =>$current_amount
					);

					$where = array(
						'industry_trans_id' => $industry_trans_id,
						'season_id'	=>	2
					);
					$this->admin->update_data('industry_trans_dtl_tbl', $update_trans_dtl, $where);

					$update_trans_dtl = array(
						'industry_capacity' =>$ending_amount
					);

					$where = array(
						'industry_trans_id' => $industry_trans_id,
						'season_id'	=>	3
					);
					$this->admin->update_data('industry_trans_dtl_tbl', $update_trans_dtl, $where);

					$count++;
				}

			} else {
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/broiler-trans/' . encode($bc_id).'/'.$this->input->post('pick_year'));
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success"><strong>Industry successfully updated.</strong></div>';
			}
			$this->session->set_flashdata('message', $msg);
			redirect('admin/broiler-trans/' . encode($bc_id).'/'.$this->input->post('pick_year'));
		} else{
			echo 'Something wrong';
		}
	}

	public function cancel_industry_trans(){

		$info = $this->_require_login_ahg();
		$user_id = decode($info['user_id']);

		$industry_trans_id = clean_data(decode($this->input->post('industry_trans_id')));
		$bc_id = clean_data($this->input->post('bc_id'));
		$trans_status = clean_data($this->input->post('trans_status'));
		$trans_year = clean_data($this->input->post('trans_year'));
		
		if($trans_status == 'cancel'){
			$trans_status = 5;
			$status = 'cancelled';
		}
		
		$this->db->trans_start();
		$update_data = array(
			'trans_status' => $trans_status,
			'modified_by' => $user_id,
			'modified_ts' => date_now()
		);
		$where = array(
			'industry_trans_id' => $industry_trans_id,
		);
		$this->admin->update_data('industry_trans_tbl', $update_data, $where);

		if($this->db->trans_status() === FALSE){
			$this->db->trans_rollback();
			$msg = '<div class="alert alert-danger">Error please try again!</div>';
		}else{
			$this->db->trans_commit();
			$msg = '<div class="alert alert-success"><strong>Transaction successfully '.$status.'.</strong></div>';
		}
		$this->session->set_flashdata('message', $msg);
		redirect('admin/broiler-trans/' . $bc_id.'/'.$trans_year);
	}

	public function comparative_data_upload(){
		$info = $this->_require_login();

		$data['bc'] = $this->admin->get_data('bc_tbl', 'bc_status=1');
		$data['title'] = 'Comparative Data';




		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id',
			'user_tbl c' => 'a.created_by = c.user_id'
		);
		$order = 'YEAR(a.trans_year) DESC, b.bc_name';
		$group = 'YEAR(a.trans_year), a.bc_id';
		$select = 'a.*, b.bc_name, CONCAT(c.user_fname," ",c.user_lname) as creator, YEAR(a.trans_year) as trans_year, COUNT(a.comp_volume_id) as trans_count';
		$where = array('a.sales_status' => 1);
		//$where = false;
		$data['comparative_volume'] = $this->admin->get_join('comparative_volume_tbl a', $join, false, $order, $group, $select, $where);




		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id',
			'user_tbl c' => 'a.created_by = c.user_id'
		);
		$order = 'comp_capex_year DESC, b.bc_name';
		$group = 'comp_capex_year, a.bc_id';
		$select = 'a.*, b.bc_name, CONCAT(c.user_fname," ",c.user_lname) as creator, comp_capex_year as trans_year, COUNT(a.comp_capex_id) as trans_count';
		$where = array('a.comp_capex_status' => 1);
		//$where = false;
		$data['comparative_capex'] = $this->admin->get_join('comparative_capex_tbl a', $join, false, $order, $group, $select, $where);



		$join = array(
			'company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id',
			'user_tbl c' => 'a.created_by = c.user_id'
		);
		$order = 'a.comp_capex_unit_year DESC, b.company_unit_name';
		$group = 'a.comp_capex_unit_year, a.company_unit_id';
		$select = 'a.*, b.company_unit_name, CONCAT(c.user_fname," ",c.user_lname) as creator, a.comp_capex_unit_year as trans_year, COUNT(a.comp_capex_unit_id) as trans_count';
		$where = array('a.comp_capex_unit_status' => 1);
		//$where = false;
		$data['comparative_capex_unit'] = $this->admin->get_join('comparative_capex_unit_tbl a', $join, false, $order, $group, $select, $where);





		$join = array(
			'company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id',
			'user_tbl c' => 'a.created_by = c.user_id'
		);
		$order = 'YEAR(a.trans_year) DESC, b.company_unit_name';
		$group = 'YEAR(a.trans_year), a.company_unit_id';
		$select = 'a.*, b.company_unit_name, CONCAT(c.user_fname," ",c.user_lname) as creator, YEAR(a.trans_year) as trans_year, COUNT(a.comp_opex_dept_id) as trans_count';
		$where = array('a.comp_opex_dept_status' => 1);
		//$where = false;
		$data['comparative_opex_dept'] = $this->admin->get_join('comparative_opex_dept_tbl a', $join, false, $order, $group, $select, $where);






		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id',
			'user_tbl c' => 'a.created_by = c.user_id'
		);
		$order = 'YEAR(a.trans_year) DESC, b.bc_name';
		$group = 'YEAR(a.trans_year), a.bc_id';
		$select = 'a.*, b.bc_name, CONCAT(c.user_fname," ",c.user_lname) as creator, YEAR(a.trans_year) as trans_year, COUNT(a.comp_opex_gl_id) as trans_count';
		$where = array('a.comp_opex_gl_status' => 1);
		//$where = false;
		$data['comparative_opex_gl'] = $this->admin->get_join('comparative_opex_gl_tbl a', $join, false, $order, $group, $select, $where);





		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id',
			'user_tbl c' => 'a.created_by = c.user_id'
		);
		$order = 'YEAR(a.trans_year) DESC, b.bc_name';
		$group = 'YEAR(a.trans_year), a.bc_id';
		$select = 'a.*, b.bc_name, CONCAT(c.user_fname," ",c.user_lname) as creator, YEAR(a.trans_year) as trans_year, COUNT(a.comp_net_sales_id) as trans_count';
		$where = array('a.comp_net_sales_status' => 1);
		//$where = false;
		$data['comparative_net_sales'] = $this->admin->get_join('comparative_net_sales_tbl a', $join, false, $order, $group, $select, $where);


		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id',
			'user_tbl c' => 'a.created_by = c.user_id'
		);
		$order = 'a.comp_pnl_year DESC, b.bc_name';
		$group = 'a.comp_pnl_year, a.bc_id';
		$select = 'a.*, b.bc_name, CONCAT(c.user_fname," ",c.user_lname) as creator, a.comp_pnl_year as trans_year, COUNT(a.comp_pnl_id) as trans_count';
		$where = array('a.comp_pnl_status' => 1);
		//$where = false;
		$data['comparative_pnl'] = $this->admin->get_join('comparative_pnl_tbl a', $join, false, $order, $group, $select, $where);


		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id',
			'user_tbl c' => 'a.created_by = c.user_id'
		);
		$order = 'a.comp_price_year DESC, b.bc_name';
		$group = 'a.comp_price_year, a.bc_id';
		$select = 'a.*, b.bc_name, CONCAT(c.user_fname," ",c.user_lname) as creator, a.comp_price_year as trans_year, COUNT(a.comp_price_id) as trans_count';
		$where = array('a.comp_price_status' => 1);
		//$where = false;
		$data['comparative_price'] = $this->admin->get_join('comparative_price_tbl a', $join, false, $order, $group, $select, $where);



		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id',
			'user_tbl c' => 'a.created_by = c.user_id'
		);
		$order = 'YEAR(a.trans_year) DESC, b.bc_name';
		$group = 'YEAR(a.trans_year), a.bc_id';
		$select = 'a.*, b.bc_name, CONCAT(c.user_fname," ",c.user_lname) as creator, YEAR(a.trans_year) as trans_year, COUNT(a.comp_variable_cost_id) as trans_count';
		$where = array('a.comp_variable_cost_status' => 1);
		//$where = false;
		$data['comparative_variable_cost'] = $this->admin->get_join('comparative_variable_cost_tbl a', $join, false, $order, $group, $select, $where);



		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id',
			'user_tbl c' => 'a.user_id = c.user_id'
		);
		$order = 'YEAR(a.depreciation_bc_date) DESC, b.bc_name';
		$group = 'YEAR(a.depreciation_bc_date), a.bc_id';
		$select = 'a.*, b.bc_name, CONCAT(c.user_fname," ",c.user_lname) as creator, YEAR(a.depreciation_bc_date) as trans_year, FORMAT(COUNT(a.depreciation_bc_id)/12, 0) as trans_count';
		$where = array('a.depreciation_bc_status' => 1);
		//$where = false;
		$data['depreciation_bc'] = $this->admin->get_join('depreciation_bc_tbl a', $join, false, $order, $group, $select, $where);




		$join = array(
			'company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id',
			'user_tbl c' => 'a.user_id = c.user_id'
		);
		$order = 'YEAR(a.depreciation_unit_date) DESC, b.company_unit_name';
		$group = 'YEAR(a.depreciation_unit_date), a.company_unit_id';
		$select = 'a.*, b.company_unit_name, CONCAT(c.user_fname," ",c.user_lname) as creator, YEAR(a.depreciation_unit_date) as trans_year, FORMAT(COUNT(a.depreciation_unit_id)/12, 0) as trans_count';
		$where = array('a.depreciation_unit_status' => 1);
		//$where = false;
		$data['depreciation_unit'] = $this->admin->get_join('depreciation_unit_tbl a', $join, false, $order, $group, $select, $where);
		
		$join = array(
			'company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id',
			'user_tbl c' => 'a.user_id = c.user_id'
		);
		$order = 'YEAR(a.depreciation_unit_date) DESC, b.company_unit_name';
		$group = 'YEAR(a.depreciation_unit_date), a.company_unit_id';
		$select = 'a.*, b.company_unit_name, CONCAT(c.user_fname," ",c.user_lname) as creator, YEAR(a.depreciation_unit_date) as trans_year, FORMAT(COUNT(a.depreciation_unit_id)/12, 0) as trans_count';
		$where = array('a.depreciation_unit_status' => 1);
		//$where = false;
		$data['depreciation_unit_prod'] = $this->admin->get_join('rep_depreciation_unit_tbl a', $join, false, $order, $group, $select, $where);

		$data['content'] = $this->load->view('admin/admin_comparative_data_upload_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function download_comparative_capex_temp(){
		$info = $this->_require_login_prod();
		$company_unit = $this->admin->get_data('company_unit_tbl', array('company_unit_status' => 1), false);
		$bc = $this->admin->get_data('bc_tbl', array('bc_status' => 1), false);
		$join = array(
			'company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id',
			'cost_center_group_tbl c' => 'a.cost_center_group_id = c.cost_center_group_id',
			'bc_tbl d' => 'a.bc_id = d.bc_id',
			'cost_center_type_tbl e' => 'a.cost_center_type_id = e.cost_center_type_id'
		);
		$row_type=FALSE;
		$order=FALSE;
		$group=FALSE;
		$select=FALSE;
		$cost_center = $this->admin->get_join('cost_center_tbl a', $join, $row_type, $order, $group, $select, array('cost_center_status' => 1), false);

		$asset_group = $this->admin->get_data('asset_group_tbl', array('ag_status' => 1), false);
		
		$this->load->library('excel');
		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Comparative CAPEX (BC) Temp')
				->setDescription('Comparative CAPEX (BC) Temp');
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_left = array(
			
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		
		$spreadsheet->setActiveSheetIndex(0)
				->setTitle("Comparative CAPEX (BC)")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(false);

		$reportTitle = 'Comparative CAPEX (BC) Template';
		$reportTitle .= "\nRun Date : ".date_now();

		$spreadsheet->getActiveSheet()->getStyle("A2:H2")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A2:H2")->applyFromArray($style_info);
		
		$table_head = array(
			'Plant',
			'Business Center',
			'Cost Center',
			'Cost Center Name',
			'Class Code',
			'Class Name',
			'Acq. Date',
			'Acq. Cost'
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle);

		$head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 2, $value);
			$head++;
		}

		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);
		$spreadsheet->getActiveSheet()->getStyle("A2:H2")->applyFromArray($style_hdr);

		foreach(range('A','S') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}
		$spreadsheet->getActiveSheet()->getComment('A3')->getText()->createTextRun('Put only one Plant here and leave it blank on the succeeding fields');
		$spreadsheet->getActiveSheet()->getComment('B3')->getText()->createTextRun('Put only one BC here and leave it blank on the succeeding fields');



		//SHEET 2
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(1)
				->setTitle("BC")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'BC Name',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($bc as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->bc_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:B1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}


		
		


		

		//SHEET 3
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(2)
				->setTitle("Cost Center")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Cost Center Description',
			'Cost Center Code',
			'Unit',
			'BC',
			'Type',
			'Group',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($cost_center as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->cost_center_desc);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->cost_center_code);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, $row->company_unit_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(3 ,$body, $row->bc_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(4 ,$body, $row->cost_center_type_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(5 ,$body, $row->cost_center_group_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(6 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:G1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','G') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}
		$spreadsheet->getActiveSheet()->getStyle('A2:G'.$body)->applyFromArray($style_left);



		//SHEET 4
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(3)
				->setTitle("Asset Group")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Asset Group Name',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($asset_group as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->ag_name);
			
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:B1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Comparative CAPEX (BC).xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function download_comparative_capex_unit_temp(){
		$info = $this->_require_login_prod();
		$company_unit = $this->admin->get_data('company_unit_tbl', array('company_unit_status' => 1), false);
		$bc = $this->admin->get_data('bc_tbl', array('bc_status' => 1), false);
		$join = array(
			'company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id',
			'cost_center_group_tbl c' => 'a.cost_center_group_id = c.cost_center_group_id',
			'bc_tbl d' => 'a.bc_id = d.bc_id',
			'cost_center_type_tbl e' => 'a.cost_center_type_id = e.cost_center_type_id'
		);
		$row_type=FALSE;
		$order=FALSE;
		$group=FALSE;
		$select=FALSE;
		$cost_center = $this->admin->get_join('cost_center_tbl a', $join, $row_type, $order, $group, $select, array('cost_center_status' => 1), false);
		$asset_group = $this->admin->get_data('asset_group_tbl', array('ag_status' => 1), false);
		
		$this->load->library('excel');
		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Comparative CAPEX (Unit) Temp')
				->setDescription('Comparative CAPEX (Unit) Temp');
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_left = array(
			
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		
		$spreadsheet->setActiveSheetIndex(0)
				->setTitle("Comparative CAPEX (Unit)")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(false);

		$reportTitle = 'Comparative CAPEX (Unit) Template';
		$reportTitle .= "\nRun Date : ".date_now();

		$spreadsheet->getActiveSheet()->getStyle("A2:G2")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A2:G2")->applyFromArray($style_info);
		
		$table_head = array(
			'Unit Name',
			'Cost Center',
			'Cost Center Name',
			'Class Code',
			'Class Name',
			'Acq. Date',
			'Acq. Cost'
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle);

		$head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 2, $value);
			$head++;
		}

		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);
		$spreadsheet->getActiveSheet()->getStyle("A2:G2")->applyFromArray($style_hdr);

		foreach(range('A','S') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}
		$spreadsheet->getActiveSheet()->getComment('A3')->getText()->createTextRun('Put only one Unit here and leave it blank on the succeeding fields');



		//SHEET 2
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(1)
				->setTitle("Company Unit")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Company Unit Name',
			'Cost Center',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($company_unit as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->company_unit_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->cost_center);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:C1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		for ($i = 'A'; $i <=  $spreadsheet->getActiveSheet()->getHighestColumn(); $i++) {
		    $spreadsheet->getActiveSheet()->getColumnDimension($i)->setAutoSize( true );
		}


		
		


		

		//SHEET 3
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(2)
				->setTitle("Cost Center")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Cost Center Description',
			'Cost Center Code',
			'Unit',
			'BC',
			'Type',
			'Group',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($cost_center as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->cost_center_desc);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->cost_center_code);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, $row->company_unit_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(3 ,$body, $row->bc_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(4 ,$body, $row->cost_center_type_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(5 ,$body, $row->cost_center_group_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(6 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:G1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','G') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}
		$spreadsheet->getActiveSheet()->getStyle('A2:G'.$body)->applyFromArray($style_left);



		//SHEET 4
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(3)
				->setTitle("Asset Group")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Asset Group Name',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($asset_group as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->ag_name);
			
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:B1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Comparative CAPEX (Unit).xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function download_depreciation_bc_temp(){
		$info = $this->_require_login_prod();
		$company_unit = $this->admin->get_data('company_unit_tbl', array('company_unit_status' => 1), false);
		$bc = $this->admin->get_data('bc_tbl', array('bc_status' => 1), false);
		
		$join = array(
			'gl_group_tbl b' => 'a.gl_group_id = b.gl_group_id'
		);
		$gl_subgroup = $this->admin->get_join($tbl='gl_subgroup_tbl a', $join, $row_type=FALSE, $order=FALSE, $group=FALSE, $select=FALSE, $where=array('gl_sub_status' => 1));

		$join = array(
			'company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id',
			'cost_center_group_tbl c' => 'a.cost_center_group_id = c.cost_center_group_id',
			'bc_tbl d' => 'a.bc_id = d.bc_id',
			'cost_center_type_tbl e' => 'a.cost_center_type_id = e.cost_center_type_id'
		);
		$row_type=FALSE;
		$order=FALSE;
		$group=FALSE;
		$select=FALSE;
		$cost_center = $this->admin->get_join('cost_center_tbl a', $join, $row_type, $order, $group, $select, array('cost_center_status' => 1), false);
		//$asset_group = $this->admin->get_data('asset_group_tbl', array('ag_status' => 1), false);
		
		//$this->load->library('excel');
		//$spreadsheet = $this->excel;
		require_once( APPPATH . "/third_party/PHPExcel-1.8/Classes/PHPExcel.php" );
		$spreadsheet = new PHPExcel();

		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Depreciatin BC Temp')
				->setDescription('Depreciatin BC Temp');
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_left = array(
			
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		
		$spreadsheet->setActiveSheetIndex(0)
				->setTitle("Depreciation BC")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(false);

		$reportTitle = 'Depreciation BC Template';
		$reportTitle .= "\nRun Date : ".date_now();

		$spreadsheet->getActiveSheet()->getStyle("A2:AF2")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A2:AF2")->applyFromArray($style_info);
		
		$table_head = array(
			'Plant',
			'Business Center',
			'Cost Center',
			'Cost Center Name',
			'GL Account',
			'GL Description',
			'GL Group',
			'Asset Code',
			'Asset Name',
			'Quantity',
			'Useful Life',
			'Acq. Date',
			'Acq. Cost',
			'Accum. Depr.',
			'Net Book Value',
			'Currency',
			'Monthly Depr.',
			'Ord. Depr.',
			'Jan',
			'Feb',
			'Mar',
			'Apr',
			'May',
			'Jun',
			'Jul',
			'Aug',
			'Sep',
			'Oct',
			'Nov',
			'Dec'
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle);

		$head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 2, $value);
			$head++;
		}

		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);
		$spreadsheet->getActiveSheet()->getStyle("A2:AD2")->applyFromArray($style_hdr);

		foreach(range('A','Q') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}
		$spreadsheet->getActiveSheet()->getComment('A3')->getText()->createTextRun('Put only one Plant here and leave it blank on the succeeding fields');
		$spreadsheet->getActiveSheet()->getComment('B3')->getText()->createTextRun('Put only one BC here and leave it blank on the succeeding fields');



		//SHEET 2
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(1)
				->setTitle("BC")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'BC Name',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($bc as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->bc_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:B1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		for ($i = 'A'; $i <=  $spreadsheet->getActiveSheet()->getHighestColumn(); $i++) {
		    $spreadsheet->getActiveSheet()->getColumnDimension($i)->setAutoSize( true );
		}


		//SHEET 3
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(2)
				->setTitle("Company Unit")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Company Unit Name',
			'Cost Center',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($company_unit as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->company_unit_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->cost_center);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:C1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		for ($i = 'A'; $i <=  $spreadsheet->getActiveSheet()->getHighestColumn(); $i++) {
		    $spreadsheet->getActiveSheet()->getColumnDimension($i)->setAutoSize( true );
		}
		


		

		//SHEET 4
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(3)
				->setTitle("Cost Center")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Cost Center Description',
			'Cost Center Code',
			'Unit',
			'BC',
			'Type',
			'Group',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($cost_center as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->cost_center_desc);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->cost_center_code);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, $row->company_unit_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(3 ,$body, $row->bc_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(4 ,$body, $row->cost_center_type_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(5 ,$body, $row->cost_center_group_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(6 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:G1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		for ($i = 'A'; $i <=  $spreadsheet->getActiveSheet()->getHighestColumn(); $i++) {
		    $spreadsheet->getActiveSheet()->getColumnDimension($i)->setAutoSize( true );
		}
		$spreadsheet->getActiveSheet()->getStyle('A2:G'.$body)->applyFromArray($style_left);



		//SHEET 5
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(4)
				->setTitle("GL")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'GL Code',
			'GL Description',
			'GL Group',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($gl_subgroup as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->gl_code);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->gl_sub_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, $row->gl_group_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(3 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:D1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','D') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Depreciation BC.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function download_depreciation_unit_temp($unit_prod=FALSE){
		$info = $this->_require_login_prod();
		if(!$unit_prod){
			$where = 'company_unit_status = 1 and company_unit_id NOT IN (17, 22)';
			$join_where = 'and b.company_unit_id NOT IN (17, 22)';
		} else {
			$where = 'company_unit_status = 1 and company_unit_id IN (17, 22)';
			$join_where = 'and b.company_unit_id IN (17, 22)';
		}
		$company_unit = $this->admin->get_data('company_unit_tbl', $where, false);
		$bc = $this->admin->get_data('bc_tbl', array('bc_status' => 1), false);
		
		$join = array(
			'gl_group_tbl b' => 'a.gl_group_id = b.gl_group_id'
		);
		$gl_subgroup = $this->admin->get_join($tbl='gl_subgroup_tbl a', $join, $row_type=FALSE, $order=FALSE, $group=FALSE, $select=FALSE, $where=array('gl_sub_status' => 1));

		$join = array(
			'company_unit_tbl b, LEFT' => 'a.company_unit_id = b.company_unit_id '.$join_where,
			'cost_center_group_tbl c, LEFT' => 'a.cost_center_group_id = c.cost_center_group_id',
			'bc_tbl d, LEFT' => 'a.bc_id = d.bc_id',
			'cost_center_type_tbl e' => 'a.cost_center_type_id = e.cost_center_type_id'
		);
		$row_type=FALSE;
		$order=FALSE;
		$group=FALSE;
		$select=FALSE;
		$cost_center = $this->admin->get_join('cost_center_tbl a', $join, $row_type, $order, $group, $select, array('cost_center_status' => 1), false);
		//$asset_group = $this->admin->get_data('asset_group_tbl', array('ag_status' => 1), false);
		
		//$this->load->library('excel');
		//$spreadsheet = $this->excel;
		require_once( APPPATH . "/third_party/PHPExcel-1.8/Classes/PHPExcel.php" );
		$spreadsheet = new PHPExcel();

		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Depreciatin Unit Temp')
				->setDescription('Depreciatin Unit Temp');
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_left = array(
			
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		
		$spreadsheet->setActiveSheetIndex(0)
				->setTitle("Depreciation Unit")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(false);

		$reportTitle = 'Depreciation Unit Template';
		$reportTitle .= "\nRun Date : ".date_now();

		$spreadsheet->getActiveSheet()->getStyle("A2:AF2")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A2:AF2")->applyFromArray($style_info);
		
		$table_head = array(
			'Unit Name',
			'Cost Center',
			'Cost Center Name',
			'GL Code',
			'GL Description',
			'GL Group',
			'Asset Code',
			'Asset Name',
			'Quantity',
			'Useful Life',
			'Acq. Date',
			'Acq. Cost',
			'Accum. Depr.',
			'Net Book Value',
			'Currency',
			'Monthly Depr.',
			'Ord. Depr.',
			'Jan',
			'Feb',
			'Mar',
			'Apr',
			'May',
			'Jun',
			'Jul',
			'Aug',
			'Sep',
			'Oct',
			'Nov',
			'Dec'
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle);

		$head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 2, $value);
			$head++;
		}

		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);
		$spreadsheet->getActiveSheet()->getStyle("A2:AC2")->applyFromArray($style_hdr);

		foreach(range('A','P') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}
		
		$spreadsheet->getActiveSheet()->getComment('A3')->getText()->createTextRun('Put only one Unit here and leave it blank on the succeeding fields');


		


		//SHEET 2
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(1)
				->setTitle("Company Unit")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Company Unit Name',
			'Cost Center',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($company_unit as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->company_unit_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->cost_center);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:C1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		for ($i = 'A'; $i <=  $spreadsheet->getActiveSheet()->getHighestColumn(); $i++) {
		    $spreadsheet->getActiveSheet()->getColumnDimension($i)->setAutoSize( true );
		}
		


		

		//SHEET 3
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(2)
				->setTitle("Cost Center")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Cost Center Description',
			'Cost Center Code',
			'Unit',
			'BC',
			'Type',
			'Group',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($cost_center as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->cost_center_desc);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->cost_center_code);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, $row->company_unit_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(3 ,$body, $row->bc_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(4 ,$body, $row->cost_center_type_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(5 ,$body, $row->cost_center_group_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(6 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:G1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		for ($i = 'A'; $i <=  $spreadsheet->getActiveSheet()->getHighestColumn(); $i++) {
		    $spreadsheet->getActiveSheet()->getColumnDimension($i)->setAutoSize( true );
		}
		$spreadsheet->getActiveSheet()->getStyle('A2:G'.$body)->applyFromArray($style_left);



		//SHEET 4
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(3)
				->setTitle("GL")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'GL Code',
			'GL Description',
			'GL Group',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($gl_subgroup as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->gl_code);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->gl_sub_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, $row->gl_group_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(3 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:D1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','D') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Depreciaton Unit.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}


	public function download_comparative_opex_dept_temp(){
		$info = $this->_require_login_prod();
		$company_unit = $this->admin->get_data('company_unit_tbl', array('company_unit_status' => 1), false);
		$bc = $this->admin->get_data('bc_tbl', array('bc_status' => 1), false);

		$join = array(
			'gl_group_tbl b' => 'a.gl_group_id = b.gl_group_id'
		);
		$gl_subgroup = $this->admin->get_join($tbl='gl_subgroup_tbl a', $join, $row_type=FALSE, $order=FALSE, $group=FALSE, $select=FALSE, $where=array('gl_sub_status' => 1));

		$join = array(
			'company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id',
			'cost_center_group_tbl c' => 'a.cost_center_group_id = c.cost_center_group_id',
			'bc_tbl d' => 'a.bc_id = d.bc_id',
			'cost_center_type_tbl e' => 'a.cost_center_type_id = e.cost_center_type_id'
		);
		$row_type=FALSE;
		$order=FALSE;
		$group=FALSE;
		$select=FALSE;
		$cost_center = $this->admin->get_join('cost_center_tbl a', $join, $row_type, $order, $group, $select, array('cost_center_status' => 1), false);

		$asset_group = $this->admin->get_data('asset_group_tbl', array('ag_status' => 1), false);
		
		$this->load->library('excel');
		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Comparative CAPEX Temp')
				->setDescription('Comparative CAPEX Temp');
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_left = array(
			
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		
		$spreadsheet->setActiveSheetIndex(0)
				->setTitle("Comparative OPEX per Unit")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(false);

		$reportTitle = 'Comparative OPEX per Unit Template';
		$reportTitle .= "\nRun Date : ".date_now();

		
		
		$table_head = array(
			
			'Unit/Department',
			'Cost Center Code',
			'Cost Center Name',
			'GL Account',
			'GL Description',
			'GL Group',
			'Cost'
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle);

		$head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 2, $value);
			$head++;
		}

		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);
		$spreadsheet->getActiveSheet()->getStyle("A2:G2")->applyFromArray($style_hdr);

		foreach(range('A','I') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}
		$spreadsheet->getActiveSheet()->getComment('A3')->getText()->createTextRun('Put only one unit per upload template');
		//$spreadsheet->getActiveSheet()->getComment('B3')->getText()->createTextRun('Put only one BC here and leave it blank on the succeeding fields');



		


		//SHEET 2
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(1)
				->setTitle("Company Unit")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Company Unit Name',
			'Cost Center',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($company_unit as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->company_unit_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->cost_center);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:C1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}
		


		

		//SHEET 3
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(2)
				->setTitle("Cost Center")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Cost Center Description',
			'Cost Center Code',
			'Unit',
			'BC',
			'Type',
			'Group',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($cost_center as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->cost_center_desc);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->cost_center_code);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, $row->company_unit_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(3 ,$body, $row->bc_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(4 ,$body, $row->cost_center_type_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(5 ,$body, $row->cost_center_group_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(6 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:G1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','G') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}
		$spreadsheet->getActiveSheet()->getStyle('A2:G'.$body)->applyFromArray($style_left);



		//SHEET 4
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(3)
				->setTitle("GL")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'GL Code',
			'GL Description',
			'GL Group',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($gl_subgroup as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->gl_code);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->gl_sub_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, $row->gl_group_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(3 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:D1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','D') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}



		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Comparative OPEX per unit.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}


	public function download_comparative_opex_gl_temp(){
		$info = $this->_require_login_prod();
		$join = array(
			'gl_group_tbl b' => 'a.gl_group_id = b.gl_group_id'
		);
		$gl_subgroup = $this->admin->get_join($tbl='gl_subgroup_tbl a', $join, $row_type=FALSE, $order=FALSE, $group=FALSE, $select=FALSE, $where=array('gl_sub_status' => 1));
		
		$bc = $this->admin->get_data('bc_tbl', array('bc_status' => 1), false);

		$join = array(
			'company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id',
			'cost_center_group_tbl c' => 'a.cost_center_group_id = c.cost_center_group_id',
			'bc_tbl d' => 'a.bc_id = d.bc_id',
			'cost_center_type_tbl e' => 'a.cost_center_type_id = e.cost_center_type_id'
		);
		$row_type=FALSE;
		$order=FALSE;
		$group=FALSE;
		$select=FALSE;
		$cost_center = $this->admin->get_join('cost_center_tbl a', $join, $row_type, $order, $group, $select, array('cost_center_status' => 1), false);
		
		
		
		$this->load->library('excel');
		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Comparative OPEX Temp')
				->setDescription('Comparative OPEX Temp');
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_left = array(
			
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		
		$spreadsheet->setActiveSheetIndex(0)
				->setTitle("Comparative OPEX per GL")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(false);

		$reportTitle = 'Comparative OPEX per GL Template';
		$reportTitle .= "\nRun Date : ".date_now();

		
		
		$table_head = array(
			'Plant',
			'Business Center',
			'Cost Center',
			'Cost Center Name',
			'GL Account',
			'GL Description',
			'GL Group',
			'Cost',
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle);

		$head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 2, $value);
			$head++;
		}

		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);
		$spreadsheet->getActiveSheet()->getStyle("A2:H2")->applyFromArray($style_hdr);

		foreach(range('A','H') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}
		$spreadsheet->getActiveSheet()->getComment('A3')->getText()->createTextRun('Put only one Plant here and leave it blank on the succeeding fields');
		$spreadsheet->getActiveSheet()->getComment('B3')->getText()->createTextRun('Put only one BC here and leave it blank on the succeeding fields');


		//SHEET 2
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(1)
				->setTitle("BC")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'BC Name',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($bc as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->bc_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:B1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}


		//SHEET 3
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(2)
				->setTitle("GL")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'GL Code',
			'GL Description',
			'GL Group',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($gl_subgroup as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->gl_code);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->gl_sub_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, $row->gl_group_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(3 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:D1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','D') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}


		//SHEET 4
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(3)
				->setTitle("Cost Center")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Cost Center Description',
			'Cost Center Code',
			'Unit',
			'BC',
			'Type',
			'Group',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($cost_center as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->cost_center_desc);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->cost_center_code);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, $row->company_unit_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(3 ,$body, $row->bc_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(4 ,$body, $row->cost_center_type_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(5 ,$body, $row->cost_center_group_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(6 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:H1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','H') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}
		$spreadsheet->getActiveSheet()->getStyle('A2:H'.$body)->applyFromArray($style_left);


		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Comparative OPEX per GL.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}


	public function download_comparative_net_sales_temp(){
		$info = $this->_require_login_prod();
		
		$bc = $this->admin->get_data('bc_tbl', array('bc_status' => 1), false);
		
		
		
		$this->load->library('excel');
		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Comparative Net Sales Temp')
				->setDescription('Comparative Net Sales Temp');
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_left = array(
			
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		
		$spreadsheet->setActiveSheetIndex(0)
				->setTitle("Comparative Net Sales")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(false);

		$reportTitle = 'Comparative Net Sales Template';
		$reportTitle .= "\nRun Date : ".date_now();

		
		
		$table_head = array(
			'Plant',
			'Business Center',
			'Segment',
			'Net Sales',
			
			'Sales Unit',
			'NSP/KG',
			'NSP/UNIT',
			'Sales Mix Percentage'
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle);

		$head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 2, $value);
			$head++;
		}

		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);
		$spreadsheet->getActiveSheet()->getStyle("A2:H2")->applyFromArray($style_hdr);

		foreach(range('A','J') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}
		$spreadsheet->getActiveSheet()->getComment('A3')->getText()->createTextRun('Put only one Plant here and leave it blank on the succeeding fields');
		$spreadsheet->getActiveSheet()->getComment('B3')->getText()->createTextRun('Put only one BC here and leave it blank on the succeeding fields');



		//SHEET 2
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(1)
				->setTitle("BC")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'BC Name',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($bc as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->bc_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:B1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}




		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Comparative Net Sales.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}


	public function download_comparative_pnl_temp(){
		$info = $this->_require_login_prod();
		
		$bc = $this->admin->get_data('bc_tbl', array('bc_status' => 1), false);
		
		
		
		$this->load->library('excel');
		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Comparative PNL Temp')
				->setDescription('Comparative PNL Temp');
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_left = array(
			
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		
		$spreadsheet->setActiveSheetIndex(0)
				->setTitle("Comparative PNL")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(false);

		$reportTitle = 'Comparative PNL Template';
		$reportTitle .= "\nRun Date : ".date_now();

		
		
		$table_head = array(
			'Plant',
			'Business Center',
			'Sales Volume',
			'Net Sales',
			
			'Variable Cost',
			'Contribution Margin',
			'Period Cost',
			'Others'
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle);

		$head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 2, $value);
			$head++;
		}

		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);
		$spreadsheet->getActiveSheet()->getStyle("A2:H2")->applyFromArray($style_hdr);

		foreach(range('A','J') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}
		$spreadsheet->getActiveSheet()->getComment('A3')->getText()->createTextRun('Put only one Plant here and leave it blank on the succeeding fields');
		$spreadsheet->getActiveSheet()->getComment('B3')->getText()->createTextRun('Put only one BC here and leave it blank on the succeeding fields');



		//SHEET 2
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(1)
				->setTitle("BC")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'BC Name',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($bc as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->bc_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:B1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}




		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Comparative PNL.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}


	public function download_comparative_price_temp(){
		$info = $this->_require_login_prod();
		
		$bc = $this->admin->get_data('bc_tbl', array('bc_status' => 1), false);
		
		
		
		$this->load->library('excel');
		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Comparative Price Assumption Temp')
				->setDescription('Comparative Price Assumption Temp');
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_left = array(
			
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		
		$spreadsheet->setActiveSheetIndex(0)
				->setTitle("Comparative Price Assumption")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(false);

		$reportTitle = 'Comparative Price Assumption Template';
		$reportTitle .= "\nRun Date : ".date_now();

		
		
		$table_head = array(
			'Plant',
			'Business Center',
			'Segment',
			'Product',
			'Jan',
			'Feb',
			'Mar',
			'Apr',
			'May',
			'Jun',
			'Jul',
			'Aug',
			'Sep',
			'Oct',
			'Nov',
			'Dec',
			'Ave.',
			'Min.',
			'Max'
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle);

		$head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 2, $value);
			$head++;
		}

		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);
		$spreadsheet->getActiveSheet()->getStyle("A2:S2")->applyFromArray($style_hdr);

		foreach(range('A','S') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}
		$spreadsheet->getActiveSheet()->getComment('A3')->getText()->createTextRun('Put only one Plant here and leave it blank on the succeeding fields');
		$spreadsheet->getActiveSheet()->getComment('B3')->getText()->createTextRun('Put only one BC here and leave it blank on the succeeding fields');



		//SHEET 2
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(1)
				->setTitle("BC")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'BC Name',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($bc as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->bc_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:B1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}




		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Comparative Price Assumption.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function download_comparative_variable_cost_temp(){
		$info = $this->_require_login_prod();
		
		$bc = $this->admin->get_data('bc_tbl', array('bc_status' => 1), false);
		
		
		
		$this->load->library('excel');
		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Comparative Variable Cost Temp')
				->setDescription('Comparative Variable Cost Temp');
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_left = array(
			
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		
		$spreadsheet->setActiveSheetIndex(0)
				->setTitle("Comparative Variable Cost")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(false);

		$reportTitle = 'Comparative Variable Cost Template';
		$reportTitle .= "\nRun Date : ".date_now();

		
		
		$table_head = array(
			'Plant',
			'Business Center',
			'Sales BOM Group',
			'Component',
			'Cost',
			'Sales Unit',
			'KG',
			'Cost/KG',
			'Cost/Unit'
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle);

		$head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 2, $value);
			$head++;
		}

		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);
		$spreadsheet->getActiveSheet()->getStyle("A2:I2")->applyFromArray($style_hdr);

		foreach(range('A','I') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$spreadsheet->getActiveSheet()->getComment('A3')->getText()->createTextRun('Put only one Plant here and leave it blank on the succeeding fields');
		$spreadsheet->getActiveSheet()->getComment('B3')->getText()->createTextRun('Put only one BC here and leave it blank on the succeeding fields');



		//SHEET 2
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(1)
				->setTitle("BC")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'BC Name',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($bc as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->bc_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:B1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}




		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Comparative Variable Cost.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}


	public function download_comparative_volume_temp(){
		$info = $this->_require_login_prod();
		
		$bc = $this->admin->get_data('bc_tbl', array('bc_status' => 1), false);
		
		
		
		$this->load->library('excel');
		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Comparative Volume Temp')
				->setDescription('Comparative Volume Temp');
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_left = array(
			
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		
		$spreadsheet->setActiveSheetIndex(0)
				->setTitle("Comparative Volume")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(false);

		$reportTitle = 'Comparative Volume Template';
		$reportTitle .= "\nRun Date : ".date_now();

		
		
		$table_head = array(
			'Plant',
			'Business Center',
			'Material Group',
			'Units',
			'Heads'
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle);

		$head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 2, $value);
			$head++;
		}

		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);
		$spreadsheet->getActiveSheet()->getStyle("A2:E2")->applyFromArray($style_hdr);

		foreach(range('A','E') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$spreadsheet->getActiveSheet()->getComment('A3')->getText()->createTextRun('Put only one Plant here and leave it blank on the succeeding fields');
		$spreadsheet->getActiveSheet()->getComment('B3')->getText()->createTextRun('Put only one BC here and leave it blank on the succeeding fields');



		//SHEET 2
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(1)
				->setTitle("BC")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'BC Name',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($bc as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->bc_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:B1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}




		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Comparative Volume.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	


	// UPDATE MULA DITO


	public function upload_comp_volume(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$user_id = decode($info['user_id']);
			$this->load->library('excel');
			ini_set('max_execution_time', 0);
			ini_set('memory_limit','2048M');

			$path = 'assets/comparative-volume/';
			if (!is_dir($path)) {
			    mkdir($path, 0777, TRUE);
			}

			$trans_year = clean_data($this->input->post('comp-sales-volume-year'));

			$config['upload_path'] = $path;
			$config['allowed_types'] = 'xlsx|xls';
			$config['remove_spaces'] = TRUE;
			$this->load->library('upload', $config);
			$this->upload->initialize($config);            
			if (!$this->upload->do_upload('sales-volume-file')) {
				$error = array('error' => $this->upload->display_errors());
			} else {
				$data = array('upload_data' => $this->upload->data());
			}

			if(empty($error)){
				if (!empty($data['upload_data']['file_name'])) {
					$import_xls_file = $data['upload_data']['file_name'];
				} else {
					$import_xls_file = 0;
				}

				$inputFileName = $path . $import_xls_file;
				try {
					$inputFileType = PHPExcel_IOFactory::identify($inputFileName);
					$objReader = PHPExcel_IOFactory::createReader($inputFileType);
					$objPHPExcel = $objReader->load($inputFileName);
					$allDataInSheet = $objPHPExcel->getActiveSheet()->toArray(null, true, false, true);
					$flag = true;
					$i=2; //dating 4
					
					$added = 0;

					
					
		        	$totalKgs = 0;
		        	$overAllTotal = 0;
		        	$msg = '';
		        	$this->db->trans_start();

					
		        	foreach ($allDataInSheet as $value) {
	        			if($added < 2){ //dating 3
	        				if($added == 1){
				        		if(
					        		empty(@$value['A']) ||
									empty(@$value['B']) ||
									empty(@$value['C']) ||
									empty(@$value['D']) ||
									empty(@$value['E']) ||
									!empty(@$value['F'])
				        		){
				        			$msg = '<div class="alert alert-danger">Error, Invalid Template! Please download the latest one.</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/comparative-data-upload');
				        		}
				        	}
		                  	goto end_here;
		                }

		                $plant			= clean_data(trim(@$value['A']));
			        	$bc_name		= strtoupper(clean_data(trim(@$value['B'])));
			        	$sales_vol		= clean_data(trim(@$value['C']));
			        	$sales_unit		= clean_data(trim(@$value['D']));
			        	$sales_heads	= clean_data(trim(@$value['E']));

						

						
			        	$i++;

			        	if($added == 2){
				        	$check_bc = $this->admin->check_data('bc_tbl', array('bc_name' => strtoupper($bc_name)), TRUE);
				        	$bc_id = '';
							if($check_bc['result'] == TRUE){
								$bc_id = $check_bc['info']->bc_id;
								$set = array(
									'sales_status' 	=> 2
								);

								$result =  $this->admin->update_data('comparative_volume_tbl', $set, array('bc_id' => $bc_id, 'YEAR(trans_year)' => $trans_year));
							}else{
								//$this->db->trans_rollback();
								$msg .= '<div class="alert alert-danger">Business Center ('.$bc_name.') does not exist! Line number '.$i.'.</div>';
								$this->session->set_flashdata('message', $msg);
								redirect('admin/comparative-data-upload');
							}
			        	}

			        	if(
			        		!empty($bc_id)
			        	){

							$set = array(
								'bc_id' 			=> @$bc_id,
								'trans_year'	=> $trans_year.'-01-01',
								'sales_vol'		=> $sales_vol == '' ? 0 : $sales_vol,
								'sales_unit'	=> $sales_unit == '' ? 0 : $sales_unit,
								'sales_heads'	=> $sales_heads == '' ? 0 : $sales_heads,
								'filename'		=> $inputFileName,
								'sales_status' 	=> 1,
								'created_by'	=> $user_id,
								'created_ts'	=> date_now()
							);

							$result =  $this->admin->insert_data('comparative_volume_tbl', $set, TRUE);
						} else {
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Invalid Template!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect('admin/comparative-data-upload');
						}
		                
						end_here:
		                $added++;
		            }
		            if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg .= '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}else{
						$this->db->trans_commit();
						$msg .= '<div class="alert alert-success">Data uploaded successfully!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}

		        } catch (Exception $e) {
					die('Error loading file "' . pathinfo($inputFileName, PATHINFO_BASENAME)
		                  . '": ' .$e->getMessage());

				}
					
			} else {
				$msg = '<div class="alert alert-danger">'.$this->upload->display_errors().'</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/comparative-data-upload');
			}
		} else {
			$msg = '<div class="alert alert-danger">Please contact system administrator!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/comparative-data-upload');
		}
	}

	public function upload_comp_capex(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$user_id = decode($info['user_id']);
			//$this->load->library('excel');
			$this->load->library('excel_v2');
			ini_set('max_execution_time', 0);
			ini_set('memory_limit','2048M');

			$path = 'assets/comparative-capex/';
			if (!is_dir($path)) {
			    mkdir($path, 0777, TRUE);
			}


			$trans_year = clean_data($this->input->post('comp-capex-year'));

			$config['upload_path'] = $path;
			$config['allowed_types'] = 'xlsx|xls';
			$config['remove_spaces'] = TRUE;
			$this->load->library('upload', $config);
			$this->upload->initialize($config);            
			if (!$this->upload->do_upload('comp-capex-file')) {
				$error = array('error' => $this->upload->display_errors());
			} else {
				$data = array('upload_data' => $this->upload->data());
			}

			if(empty($error)){
				if (!empty($data['upload_data']['file_name'])) {
					$import_xls_file = $data['upload_data']['file_name'];
				} else {
					$import_xls_file = 0;
				}

				$inputFileName = $path . $import_xls_file;
				try {
					$inputFileType = PHPExcel_IOFactory::identify($inputFileName);
					$objReader = PHPExcel_IOFactory::createReader($inputFileType);
					$objPHPExcel = $objReader->load($inputFileName);
					$allDataInSheet = $objPHPExcel->getActiveSheet()->toArray(null, true, false, true);
					$flag = true;
					$i=2; //dating 4
					
					$added = 0;
					
					
		        	$totalKgs = 0;
		        	$overAllTotal = 0;
		        	$msg = '';
		        	$this->db->trans_start();

		        	//echo '<pre>';
		        	//print_r($allDataInSheet);
		        	//echo '</pre>';
		        	//exit();
		        	foreach ($allDataInSheet as $value) {
	        			if($added < 2){ //dating 3
	        				if($added == 1){
				        		if(
					        		empty($value['A']) ||
									empty($value['B']) ||
									empty($value['C']) ||
									empty($value['D']) ||
									empty($value['E']) ||
									empty($value['F']) ||
									empty($value['G']) ||
									empty($value['H']) ||
									!empty($value['I'])
				        		){
				        			$msg = '<div class="alert alert-danger">Error, Invalid Template! Please download the latest one.</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/comparative-data-upload');
				        		}
				        	}
		                  	goto end_capex_here;
		                }

		                $plant			= clean_data(trim(@$value['A']));
			        	$bc_name		= strtoupper(clean_data(trim(@$value['B'])));

			        	$cost_center	= clean_data(trim(@$value['C']));
			        	$cost_center_name	= clean_data(trim(@$value['D']));
			        	$class_name	= clean_data(trim(@$value['F']));
			        	//$acq_date = standard_date(clean_data(trim(@$value['G'])));

						$acq_date = $value['G'] ? date('Y-m-d', PHPExcel_Shared_Date::ExcelToPHP( $value['G'] )) : NULL;
						
						$acq_cost = clean_data(trim(@$value['H']));

						//$acq_cost = $acq_cost * 1;
			        	$i++;

			        	if($added == 2){
				        	$check_bc = $this->admin->check_data('bc_tbl', array('bc_name' => strtoupper($bc_name)), TRUE);
				        	$bc_id = '';
							if($check_bc['result'] == TRUE){
								$bc_id = $check_bc['info']->bc_id;
								$set = array(
									'comp_capex_status' 	=> 2
								);

								$result =  $this->admin->update_data('comparative_capex_tbl', $set, array('bc_id' => $bc_id, 'comp_capex_year' => $trans_year));
							}else{
								//$this->db->trans_rollback();
								$msg .= '<div class="alert alert-danger">Business Center ('.$bc_name.') does not exist! Line number '.$i.'.</div>';
								$this->session->set_flashdata('message', $msg);
								redirect('admin/comparative-data-upload');
							}
			        	}

						$check_asset_group = $this->admin->check_data('asset_group_tbl', array('ag_name' => strtoupper($class_name)), TRUE, 'ag_id');
			        	if($check_asset_group['result'] == TRUE){
							$ag_id = $check_asset_group['info']->ag_id;
						}else{
							
							$msg .= '<div class="alert alert-danger">Class Name ('.$class_name.') does not exist as asset group name! Line number '.$i.'.</div>';
							goto end_capex_here;
							
						}

						$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => strtoupper($cost_center)), TRUE, 'cost_center_id');
			        	if($check_cost_center['result'] == TRUE){
							$cost_center_id = $check_cost_center['info']->cost_center_id;
						}else{
							$msg .= '<div class="alert alert-danger">Cost Center ('.$cost_center.') does not exist! Line number '.$i.'.</div>';
							goto end_capex_here;
						}

						if(empty($acq_date) || $acq_date==''){
							$msg .= '<div class="alert alert-danger">Acq. Date ('.$acq_date.') is not valid! Line number '.$i.'.</div>';
							goto end_capex_here;
						}


			        	if(!empty($bc_id)){

							$set = array(
								'bc_id' 		=> @$bc_id,
								'cost_center_id' => $cost_center_id,
								'ag_id' => $ag_id,
								'comp_capex_val' => $acq_cost,
								'comp_capex_date'	=> $acq_date,
								'comp_capex_year'	=> $trans_year,
								'comp_capex_status' => 1,
								'filename'		=> $inputFileName,
								'created_by'	=> $user_id,
								'created_ts'	=> date_now()
								
							);
							$result =  $this->admin->insert_data('comparative_capex_tbl', $set, TRUE);
							
						}
		                
						end_capex_here:
		                $added++;
		            }
		            if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg .= '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}else{
						$this->db->trans_commit();
						$msg .= '<div class="alert alert-success">Data uploaded successfully!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}

		        } catch (Exception $e) {
					die('Error loading file "' . pathinfo($inputFileName, PATHINFO_BASENAME)
		                  . '": ' .$e->getMessage());

				}
					
			} else {
				$msg = '<div class="alert alert-danger">'.$this->upload->display_errors().'</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/comparative-data-upload');
			}
		} else {
			$msg = '<div class="alert alert-danger">Please contact system administrator!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/comparative-data-upload');
		}
	}

	public function upload_comp_capex_unit(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$user_id = decode($info['user_id']);
			//$this->load->library('excel');
			$this->load->library('excel_v2');
			ini_set('max_execution_time', 0);
			ini_set('memory_limit','2048M');

			$path = 'assets/comparative-capex-unit/';
			if (!is_dir($path)) {
			    mkdir($path, 0777, TRUE);
			}


			$trans_year = clean_data($this->input->post('comp-capex-unit-year'));

			$config['upload_path'] = $path;
			$config['allowed_types'] = 'xlsx|xls';
			$config['remove_spaces'] = TRUE;
			$this->load->library('upload', $config);
			$this->upload->initialize($config);            
			if (!$this->upload->do_upload('comp-capex-unit-file')) {
				$error = array('error' => $this->upload->display_errors());
			} else {
				$data = array('upload_data' => $this->upload->data());
			}

			if(empty($error)){
				if (!empty($data['upload_data']['file_name'])) {
					$import_xls_file = $data['upload_data']['file_name'];
				} else {
					$import_xls_file = 0;
				}

				$inputFileName = $path . $import_xls_file;
				try {
					$inputFileType = PHPExcel_IOFactory::identify($inputFileName);
					$objReader = PHPExcel_IOFactory::createReader($inputFileType);
					$objPHPExcel = $objReader->load($inputFileName);
					$allDataInSheet = $objPHPExcel->getActiveSheet()->toArray(null, true, false, true);
					$flag = true;
					$i=2; //dating 4
					
					$added = 0;
					
					
		        	$totalKgs = 0;
		        	$overAllTotal = 0;
		        	$msg = '';
		        	$this->db->trans_start();

		        	//echo '<pre>';
		        	//print_r($allDataInSheet);
		        	//echo '</pre>';
		        	//exit();
		        	foreach ($allDataInSheet as $value) {
	        			if($added < 2){ //dating 3
	        				if($added == 1){
				        		if(
					        		empty($value['A']) ||
									empty($value['B']) ||
									empty($value['C']) ||
									empty($value['D']) ||
									empty($value['E']) ||
									empty($value['F']) ||
									empty($value['G']) ||
									!empty($value['H'])
				        		){
				        			$msg = '<div class="alert alert-danger">Error, Invalid Template! Please download the latest one.</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/comparative-data-upload');
				        		}
				        	}
		                  	goto end_capex_unit_here;
		                }

		                $company_unit_name		= strtoupper(clean_data(trim(@$value['A'])));

			        	$cost_center	= clean_data(trim(@$value['B']));
			        	$cost_center_name	= clean_data(trim(@$value['C']));
			        	$class_name	= clean_data(trim(@$value['E']));
			        	//$acq_date = standard_date(clean_data(trim(@$value['F'])));
						$acq_date = $value['F'] ? date('Y-m-d', PHPExcel_Shared_Date::ExcelToPHP( $value['F'] )) : NULL;
						$acq_cost = clean_data(trim(@$value['G']));

						//$acq_cost = $acq_cost * 1;
			        	$i++;

			        	if($added == 2){
				        	$company_unit_id = '';
							$check_company_unit = $this->admin->check_data('company_unit_tbl', array('company_unit_name' => strtoupper($company_unit_name)), TRUE, 'company_unit_id');
							if($check_company_unit['result'] == TRUE){
								$company_unit_id = $check_company_unit['info']->company_unit_id;
								$set = array(
									'comp_capex_unit_status' 	=> 2
								);
								$result =  $this->admin->update_data('comparative_capex_unit_tbl', $set, array('company_unit_id' => $company_unit_id, 'comp_capex_unit_year' => $trans_year));
							}else{
								$msg .= '<div class="alert alert-danger">Company Unit ('.$company_unit_name.') does not exist! Line number '.$i.'.</div>';
								redirect('admin/comparative-data-upload');
							}
			        	}

						$check_asset_group = $this->admin->check_data('asset_group_tbl', array('ag_name' => strtoupper($class_name)), TRUE, 'ag_id');
			        	if($check_asset_group['result'] == TRUE){
							$ag_id = $check_asset_group['info']->ag_id;
						}else{
							
							$msg .= '<div class="alert alert-danger">Class Name ('.$class_name.') does not exist! Line number '.$i.'.</div>';
							goto end_capex_unit_here;
							
						}

						$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => strtoupper($cost_center)), TRUE, 'cost_center_id');
			        	if($check_cost_center['result'] == TRUE){
							$cost_center_id = $check_cost_center['info']->cost_center_id;
						}else{
							$msg .= '<div class="alert alert-danger">Cost Center ('.$cost_center.') does not exist! Line number '.$i.'.</div>';
							goto end_capex_unit_here;
						}

						if(empty($acq_date) || $acq_date==''){
							$msg .= '<div class="alert alert-danger">Acq. Date ('.$acq_date.') is not valid! Line number '.$i.'.</div>';
							goto end_capex_unit_here;
						}


			        	if(!empty($company_unit_id)){

							$set = array(
								'ag_id' => $ag_id,
								'company_unit_id' 		=> @$company_unit_id,
								'cost_center_id' => $cost_center_id,
								'comp_capex_unit_val' => $acq_cost,
								'comp_capex_unit_date'	=> $acq_date,
								'comp_capex_unit_year'	=> $trans_year,
								'comp_capex_unit_status' => 1,
								'filename'		=> $inputFileName,
								'created_by'	=> $user_id,
								'created_ts'	=> date_now()
								
							);
							$result =  $this->admin->insert_data('comparative_capex_unit_tbl', $set, TRUE);
							
						}
		                
						end_capex_unit_here:
		                $added++;
		            }
		            if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg .= '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}else{
						$this->db->trans_commit();
						$msg .= '<div class="alert alert-success">Data uploaded successfully!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}

		        } catch (Exception $e) {
					die('Error loading file "' . pathinfo($inputFileName, PATHINFO_BASENAME)
		                  . '": ' .$e->getMessage());

				}
					
			} else {
				$msg = '<div class="alert alert-danger">'.$this->upload->display_errors().'</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/comparative-data-upload');
			}
		} else {
			$msg = '<div class="alert alert-danger">Please contact system administrator!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/comparative-data-upload');
		}
	}

	public function upload_depreciation_bc(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$user_id = decode($info['user_id']);
			//$this->load->library('excel');
			$this->load->library('excel_v2');
			ini_set('max_execution_time', 0);
			ini_set('memory_limit','2048M');

			$path = 'assets/depreciation-bc/';
			if (!is_dir($path)) {
			    mkdir($path, 0777, TRUE);
			}


			$trans_year = clean_data($this->input->post('comp-depreciation-bc-year'));

			$config['upload_path'] = $path;
			$config['allowed_types'] = 'xlsx|xls';
			$config['remove_spaces'] = TRUE;
			$this->load->library('upload', $config);
			$this->upload->initialize($config);            
			if (!$this->upload->do_upload('depreciation-bc-file')) {
				$error = array('error' => $this->upload->display_errors());
			} else {
				$data = array('upload_data' => $this->upload->data());
			}

			if(empty($error)){
				if (!empty($data['upload_data']['file_name'])) {
					$import_xls_file = $data['upload_data']['file_name'];
				} else {
					$import_xls_file = 0;
				}

				$inputFileName = $path . $import_xls_file;
				try {
					$inputFileType = PHPExcel_IOFactory::identify($inputFileName);
					$objReader = PHPExcel_IOFactory::createReader($inputFileType);
					$objPHPExcel = $objReader->load($inputFileName);
					$allDataInSheet = $objPHPExcel->getActiveSheet()->toArray(null, true, false, true);
					$flag = true;
					$i=2; //dating 4
					
					$added = 0;
					
					
		        	$totalKgs = 0;
		        	$overAllTotal = 0;
		        	$msg = '';
		        	$this->db->trans_start();

		        	//echo '<pre>';
		        	//print_r($allDataInSheet);
		        	//echo '</pre>';
		        	//exit();
		        	foreach ($allDataInSheet as $value) {
	        			if($added < 2){ //dating 3
	        				if($added == 1){
				        		if(
					        		empty($value['A']) ||
									empty($value['B']) ||
									empty($value['C']) ||
									empty($value['D']) ||
									empty($value['E']) ||
									empty($value['F']) ||
									empty($value['G']) ||
									empty($value['H']) ||
									empty($value['I']) ||
									empty($value['J']) ||
									empty($value['K']) ||
									empty($value['L']) ||
									empty($value['M']) ||
									empty($value['N']) ||
									empty($value['O']) ||
									empty($value['P']) ||
									empty($value['Q']) ||
									empty($value['R']) ||
									empty($value['S']) ||
									empty($value['T']) ||
									empty($value['U']) ||
									empty($value['V']) ||
									empty($value['W']) ||
									empty($value['X']) ||
									empty($value['Y']) ||
									empty($value['Z']) ||
									empty($value['AA']) ||
									empty($value['AB']) ||
									empty($value['AC']) ||
									empty($value['AD']) ||
									!empty($value['AE'])
				        		){
				        			$msg = '<div class="alert alert-danger">Error, Invalid Template! Please download the latest one.</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/comparative-data-upload');
				        		}
				        	}
		                  	goto end_depreciation_bc_here;
		                }

		                $plant			= clean_data(trim(@$value['A']));
			        	$bc_name		= strtoupper(clean_data(trim(@$value['B'])));
			        	$cost_center		= clean_data(trim(@$value['C']));
			        	$cost_center_name		= clean_data(trim(@$value['D']));
			        	
			        	$class_code	= clean_data(trim(@$value['E']));
			        	$class_name	= clean_data(trim(@$value['F']));
			        	$gl_group_name	= clean_data(trim(@$value['G']));
			        	$asset_code	= clean_data(trim(@$value['H']));
			        	$asset_name	= clean_data(trim(@$value['I']));
			        	$quantity	= clean_data(trim(@$value['J']));
			        	$useful_life	= clean_data(trim(@$value['K']));
						//$acq_date = standard_date(clean_data(trim(@$value['K'])));
						$acq_date = $value['L'] ? date('Y-m-d', PHPExcel_Shared_Date::ExcelToPHP( $value['L'] )) : NULL;
			        	$acq_cost = clean_data(trim(@$value['M']));
			        	$accum_depr = clean_data(trim(@$value['N']));
			        	$net_book_value = clean_data(trim(@$value['O']));
						$currency = clean_data(trim(@$value['P']));
			        	$monthly_depr = clean_data(trim(@$value['Q']));
			        	$ord_depr = clean_data(trim(@$value['R']));

						$qty = array(
							'1' => clean_data(trim(@$value['S'])),
							'2' => clean_data(trim(@$value['T'])),
							'3' => clean_data(trim(@$value['U'])),
							'4' => clean_data(trim(@$value['V'])),
							'5' => clean_data(trim(@$value['W'])),
							'6' => clean_data(trim(@$value['X'])),
							'7' => clean_data(trim(@$value['Y'])),
							'8' => clean_data(trim(@$value['Z'])),
							'9' => clean_data(trim(@$value['AA'])),
							'10' => clean_data(trim(@$value['AB'])),
							'11' => clean_data(trim(@$value['AC'])),
							'12' => clean_data(trim(@$value['AD']))
						);
						


			        	$i++;

			        	if($added == 2){
				        	$check_bc = $this->admin->check_data('bc_tbl', array('bc_name' => strtoupper($bc_name)), TRUE);
				        	$bc_id = '';
							if($check_bc['result'] == TRUE){
								$bc_id = $check_bc['info']->bc_id;
								$set = array(
									'depreciation_bc_status' 	=> 2
								);

								$result =  $this->admin->update_data('depreciation_bc_tbl', $set, array('bc_id' => $bc_id, 'YEAR(depreciation_bc_date)' => $trans_year));
							}else{
								//$this->db->trans_rollback();
								$msg .= '<div class="alert alert-danger">Business Center ('.$bc_name.') does not exist! Line number '.$i.'.</div>';
								$this->session->set_flashdata('message', $msg);
								redirect('admin/comparative-data-upload');
							}
			        	}

			        	$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => strtoupper($cost_center)), TRUE, 'cost_center_id');
			        	if($check_cost_center['result'] == TRUE){
							$cost_center_id = $check_cost_center['info']->cost_center_id;
						}else{
							$msg .= '<div class="alert alert-danger">Cost Center ('.$cost_center.') does not exist! Line number '.$i.'.</div>';
							goto end_depreciation_bc_here;
						}


						$filter = array(
							'gl_group_name' => strtoupper($gl_group_name),
							'gl_group_status' => 1
						);
						$check_gl_group = $this->admin->check_data('gl_group_tbl', $filter, TRUE, 'gl_group_id');
			        	if($check_gl_group['result'] == TRUE){
							$gl_group_id = $check_gl_group['info']->gl_group_id;
						}else{
							
							$msg .= '<div class="alert alert-danger">GL Group ('.$gl_group_name.') does not exist! Line number '.$i.'.</div>';
							goto end_depreciation_bc_here;
							
						}

						
						$filter = array(
							'gl_code' => strtoupper($class_code),
							'gl_group_id' => $gl_group_id,
							'gl_sub_status' => 1
						);
						$check_gl_sub_id = $this->admin->check_data('gl_subgroup_tbl', $filter, TRUE, 'gl_sub_id');
			        	if($check_gl_sub_id['result'] == TRUE){
							$gl_sub_id = $check_gl_sub_id['info']->gl_sub_id;
						}else{
							$gl_sub_id = '';
							
							$msg .= '<div class="alert alert-danger">Class Name ('.$class_name.') does not exist in GL subgroup! Line number '.$i.'.</div>';
							goto end_depreciation_bc_here;
							
						}


			        	if(!empty($bc_id)){
							for($month = 1; $month <= 12; $month++){
								//$qty_val = $qty[$month] * 1;
								$set = array(
									'bc_id' 		=> @$bc_id,
									'cost_center_id' => $cost_center_id,
									'gl_sub_id' => $gl_sub_id,
									'depreciation_bc_date'	=> $trans_year.'-'.$month.'-01',
									'depreciation_bc_amount' => $qty[$month],
									'depreciation_bc_added'	=> date_now(),
									'user_id'	=> $user_id,
									'depreciation_bc_status' => 1,
									'filename'		=> $inputFileName
									
								);
								//echo $qty[$month].'<br>';

								$result =  $this->admin->insert_data('depreciation_bc_tbl', $set, TRUE);
							}
						}
		                
						end_depreciation_bc_here:
		                $added++;
		            }
		            if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg .= '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}else{
						$this->db->trans_commit();
						$msg .= '<div class="alert alert-success">Data uploaded successfully!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}

		        } catch (Exception $e) {
					die('Error loading file "' . pathinfo($inputFileName, PATHINFO_BASENAME)
		                  . '": ' .$e->getMessage());

				}
					
			} else {
				$msg = '<div class="alert alert-danger">'.$this->upload->display_errors().'</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/comparative-data-upload');
			}
		} else {
			$msg = '<div class="alert alert-danger">Please contact system administrator!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/comparative-data-upload');
		}
	}

	public function upload_depreciation_unit(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$user_id = decode($info['user_id']);
			//$this->load->library('excel');
			$this->load->library('excel_v2');
			ini_set('max_execution_time', 0);
			ini_set('memory_limit','2048M');

			$path = 'assets/depreciation-unit/';
			if (!is_dir($path)) {
			    mkdir($path, 0777, TRUE);
			}


			$trans_year = clean_data($this->input->post('comp-depreciation-unit-year'));

			$config['upload_path'] = $path;
			$config['allowed_types'] = 'xlsx|xls';
			$config['remove_spaces'] = TRUE;
			$this->load->library('upload', $config);
			$this->upload->initialize($config);            
			if (!$this->upload->do_upload('depreciation-unit-file')) {
				$error = array('error' => $this->upload->display_errors());
			} else {
				$data = array('upload_data' => $this->upload->data());
			}

			if(empty($error)){
				if (!empty($data['upload_data']['file_name'])) {
					$import_xls_file = $data['upload_data']['file_name'];
				} else {
					$import_xls_file = 0;
				}

				$inputFileName = $path . $import_xls_file;
				try {
					$inputFileType = PHPExcel_IOFactory::identify($inputFileName);
					$objReader = PHPExcel_IOFactory::createReader($inputFileType);
					$objPHPExcel = $objReader->load($inputFileName);
					$allDataInSheet = $objPHPExcel->getActiveSheet()->toArray(null, true, false, true);
					$flag = true;
					$i=2; //dating 4
					
					$added = 0;
					
					
		        	$totalKgs = 0;
		        	$overAllTotal = 0;
		        	$msg = '';
		        	$this->db->trans_start();

		        	//echo '<pre>';
		        	//print_r($allDataInSheet);
		        	//echo '</pre>';
		        	//exit();
		        	foreach ($allDataInSheet as $value) {
	        			if($added < 2){ //dating 3
	        				if($added == 1){
				        		if(
					        		empty($value['A']) ||
									empty($value['B']) ||
									empty($value['C']) ||
									empty($value['D']) ||
									empty($value['E']) ||
									empty($value['F']) ||
									empty($value['G']) ||
									empty($value['H']) ||
									empty($value['I']) ||
									empty($value['J']) ||
									empty($value['K']) ||
									empty($value['L']) ||
									empty($value['M']) ||
									empty($value['N']) ||
									empty($value['O']) ||
									empty($value['P']) ||
									empty($value['Q']) ||
									empty($value['R']) ||
									empty($value['S']) ||
									empty($value['T']) ||
									empty($value['U']) ||
									empty($value['V']) ||
									empty($value['W']) ||
									empty($value['X']) ||
									empty($value['Y']) ||
									empty($value['Z']) ||
									empty($value['AA']) ||
									empty($value['AB']) ||
									empty($value['AC']) ||
									!empty($value['AD'])
				        		){
				        			$msg = '<div class="alert alert-danger">Error, Invalid Template! Please download the latest one.</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/comparative-data-upload');
				        		}
				        	}
		                  	goto end_depreciation_unit_here;
		                }

		                //$plant			= clean_data(trim(@$value['A']));
			        	$company_unit_name		= strtoupper(clean_data(trim(@$value['A'])));
			        	$cost_center		= clean_data(trim(@$value['B']));
			        	$cost_center_name		= clean_data(trim(@$value['C']));
			        	
			        	$class_code	= clean_data(trim(@$value['D']));
			        	$class_name	= clean_data(trim(@$value['E']));
			        	$gl_group_name	= clean_data(trim(@$value['F']));
			        	$asset_code	= clean_data(trim(@$value['G']));
			        	$asset_name	= clean_data(trim(@$value['H']));
			        	$quantity	= clean_data(trim(@$value['I']));
			        	$useful_life	= clean_data(trim(@$value['J']));
						//$acq_date = standard_date(clean_data(trim(@$value['J'])));
						$acq_date = $value['K'] ? date('Y-m-d', PHPExcel_Shared_Date::ExcelToPHP( $value['K'] )) : NULL;
			        	$acq_cost = clean_data(trim(@$value['L']));
			        	$accum_depr = clean_data(trim(@$value['M']));
			        	$net_book_value = clean_data(trim(@$value['N']));
						$currency = clean_data(trim(@$value['O']));
			        	$monthly_depr = clean_data(trim(@$value['P']));
			        	$ord_depr = clean_data(trim(@$value['Q']));

						$qty = array(
							'1' => clean_data(trim(@$value['R'])),
							'2' => clean_data(trim(@$value['S'])),
							'3' => clean_data(trim(@$value['T'])),
							'4' => clean_data(trim(@$value['U'])),
							'5' => clean_data(trim(@$value['V'])),
							'6' => clean_data(trim(@$value['W'])),
							'7' => clean_data(trim(@$value['X'])),
							'8' => clean_data(trim(@$value['Y'])),
							'9' => clean_data(trim(@$value['Z'])),
							'10' => clean_data(trim(@$value['AA'])),
							'11' => clean_data(trim(@$value['AB'])),
							'12' => clean_data(trim(@$value['AC']))
						);
						


			        	$i++;

			        	if($added == 2){
				        	

							$company_unit_id = '';
							$check_company_unit = $this->admin->check_data('company_unit_tbl', array('company_unit_name' => strtoupper($company_unit_name)), TRUE, 'company_unit_id');
							if($check_company_unit['result'] == TRUE){
								$company_unit_id = $check_company_unit['info']->company_unit_id;
								$designated_tbl = $this->_get_designated_tbl($company_unit_id);
								$set = array(
									'depreciation_unit_status' 	=> 2
								);
								$result =  $this->admin->update_data($designated_tbl->depreciation_unit_tbl, $set, array('company_unit_id' => $company_unit_id, 'YEAR(depreciation_unit_date)' => $trans_year));
							}else{
								$msg .= '<div class="alert alert-danger">Company Unit ('.$company_unit_name.') does not exist! Line number '.$i.'.</div>';
								redirect('admin/comparative-data-upload');
							}
			        	}

			        	$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => strtoupper($cost_center)), TRUE, 'cost_center_id');
			        	if($check_cost_center['result'] == TRUE){
							$cost_center_id = $check_cost_center['info']->cost_center_id;
						}else{
							$msg .= '<div class="alert alert-danger">Cost Center ('.$cost_center.') does not exist! Line number '.$i.'.</div>';
							goto end_depreciation_unit_here;
						}


						$filter = array(
							'gl_group_name' => strtoupper($gl_group_name),
							'gl_group_status' => 1
						);
						$check_gl_group = $this->admin->check_data('gl_group_tbl', $filter, TRUE, 'gl_group_id');
			        	if($check_gl_group['result'] == TRUE){
							$gl_group_id = $check_gl_group['info']->gl_group_id;
						}else{
							
							$msg .= '<div class="alert alert-danger">GL Group ('.$gl_group_name.') does not exist! Line number '.$i.'.</div>';
							goto end_depreciation_unit_here;
							
						}


						$filter = array(
							'gl_code' => strtoupper($class_code),
							'gl_group_id' => $gl_group_id,
							'gl_sub_status' => 1
						);
						$check_gl_sub_id = $this->admin->check_data('gl_subgroup_tbl', $filter, TRUE, 'gl_sub_id');
			        	if($check_gl_sub_id['result'] == TRUE){
							$gl_sub_id = $check_gl_sub_id['info']->gl_sub_id;
						}else{
							$gl_sub_id = '';
							
							$msg .= '<div class="alert alert-danger">Class Name ('.$class_name.') does not exist in GL subgroup! Line number '.$i.'.</div>';
							goto end_depreciation_unit_here;
							
						}


			        	if(!empty($company_unit_id)){
							for($month = 1; $month <= 12; $month++){
								// $qty_val = $qty[$month] * 1;
								// $qty_val = str_replace(',', '', $qty[$month]);
								$set = array(
									'company_unit_id' 		=> @$company_unit_id,
									'cost_center_id' => $cost_center_id,
									'gl_sub_id' => $gl_sub_id,
									'depreciation_unit_date'	=> $trans_year.'-'.$month.'-01',
									'depreciation_unit_amount' => trim($qty[$month]),
									'depreciation_unit_added'	=> date_now(),
									'user_id'	=> $user_id,
									'depreciation_unit_status' => 1,
									'filename'		=> $inputFileName
									
								);
								// echo $qty[$month].'<br>';
								// echo '<pre>';
								// print_r($set);
								// Xecho '</pre>';
								$result =  $this->admin->insert_data($designated_tbl->depreciation_unit_tbl, $set, TRUE);
								
							}
						}
		                
						end_depreciation_unit_here:
		                $added++;
		            }
		            if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg .= '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}else{
						$this->db->trans_commit();
						$msg .= '<div class="alert alert-success">Data uploaded successfully!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}

		        } catch (Exception $e) {
					die('Error loading file "' . pathinfo($inputFileName, PATHINFO_BASENAME)
		                  . '": ' .$e->getMessage());

				}
					
			} else {
				$msg = '<div class="alert alert-danger">'.$this->upload->display_errors().'</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/comparative-data-upload');
			}
		} else {
			$msg = '<div class="alert alert-danger">Please contact system administrator!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/comparative-data-upload');
		}
	}


	public function upload_comp_opex_dept(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$user_id = decode($info['user_id']);
			$this->load->library('excel_v2');
			ini_set('max_execution_time', 0);
			ini_set('memory_limit','2048M');

			$path = 'assets/comparative-opex-dept/';
			if (!is_dir($path)) {
			    mkdir($path, 0777, TRUE);
			}

			$trans_year = clean_data($this->input->post('comp-opex-dept-year'));

			$config['upload_path'] = $path;
			$config['allowed_types'] = 'xlsx|xls';
			$config['remove_spaces'] = TRUE;
			$this->load->library('upload', $config);
			$this->upload->initialize($config);            
			if (!$this->upload->do_upload('opex-dept-file')) {
				$error = array('error' => $this->upload->display_errors());
			} else {
				$data = array('upload_data' => $this->upload->data());
			}

			if(empty($error)){
				if (!empty($data['upload_data']['file_name'])) {
					$import_xls_file = $data['upload_data']['file_name'];
				} else {
					$import_xls_file = 0;
				}

				$inputFileName = $path . $import_xls_file;
				try {
					$inputFileType = PHPExcel_IOFactory::identify($inputFileName);
					$objReader = PHPExcel_IOFactory::createReader($inputFileType);
					$objPHPExcel = $objReader->load($inputFileName);
					$allDataInSheet = $objPHPExcel->getActiveSheet()->toArray(null, true, false, true);
					$flag = true;
					$i=2; //dating 4
					
					$added = 0;

					
					
		        	$totalKgs = 0;
		        	$overAllTotal = 0;
		        	$msg = '';
		        	$this->db->trans_start();
		        	foreach ($allDataInSheet as $value) {
	        			if($added < 2){ //dating 3
	        				if($added == 1){
				        		if(
					        		empty(@$value['A']) ||
									empty(@$value['B']) ||
									empty(@$value['C']) ||
									empty(@$value['D']) ||
									empty(@$value['E']) ||
									empty(@$value['F']) ||
									empty(@$value['G']) ||
									!empty(@$value['H'])
				        		){
				        			$msg = '<div class="alert alert-danger">Error, Invalid Template! Please download the latest one.</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/comparative-data-upload');
				        		}
				        	}
		                  	goto end_opex_dept_here;
		                }

		                
			        	$company_unit_name	= clean_data(trim(@$value['A']));
			        	$cost_center		= clean_data(trim(@$value['B']));
			        	$cost_center_name		= clean_data(trim(@$value['C']));
			        	$gl_code		= clean_data(trim(@$value['D']));
			        	$gl_desc		= strtoupper( clean_data(trim(@$value['E'])));
						$gl_group_name = strtoupper( clean_data(trim(@$value['F'])));
			        	$cost		= clean_data(trim(@$value['G']));


			        	$i++;

			        	if($added == 2){

							$company_unit_id = '';
							$check_company_unit = $this->admin->check_data('company_unit_tbl', array('company_unit_name' => strtoupper($company_unit_name)), TRUE, 'company_unit_id');
							if($check_company_unit['result'] == TRUE){
								$company_unit_id = $check_company_unit['info']->company_unit_id;
								$set = array(
									'comp_opex_dept_status' 	=> 2
								);
								$result =  $this->admin->update_data('comparative_opex_dept_tbl', $set, array('company_unit_id' => $company_unit_id, 'YEAR(trans_year)' => $trans_year));
							}else{
								$msg .= '<div class="alert alert-danger">Company Unit ('.$company_unit_name.') does not exist! Line number '.$i.'.</div>';
								redirect('admin/comparative-data-upload');
							}

				        	
			        	}


			        	$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => strtoupper($cost_center)), TRUE, 'cost_center_id');
			        	if($check_cost_center['result'] == TRUE){
							$cost_center_id = $check_cost_center['info']->cost_center_id;
						}else{
							
							$msg .= '<div class="alert alert-danger">Cost Center ('.$cost_center.') does not exist! Line number '.$i.'.</div>';
							goto end_opex_dept_here;
							
						}


						$filter = array(
							'gl_group_name' => strtoupper($gl_group_name),
							'gl_group_status' => 1
						);
						$check_gl_group = $this->admin->check_data('gl_group_tbl', $filter, TRUE, 'gl_group_id');
			        	if($check_gl_group['result'] == TRUE){
							$gl_group_id = $check_gl_group['info']->gl_group_id;
						}else{
							
							$msg .= '<div class="alert alert-danger">GL Group ('.$gl_group_name.') does not exist! Line number '.$i.'.</div>';
							goto end_opex_dept_here;
							
						}

						
						$filter = array(
							'gl_code' => strtoupper($gl_code),
							'gl_group_id' => $gl_group_id,
							'gl_sub_status' => 1
						);
						$check_gl_subgroup = $this->admin->check_data('gl_subgroup_tbl', $filter, TRUE, 'gl_sub_id');
			        	if($check_gl_subgroup['result'] == TRUE){
							$gl_sub_id = $check_gl_subgroup['info']->gl_sub_id;
						}else{
							
							$msg .= '<div class="alert alert-danger">GL Account ('.$gl_code.') does not exist! Line number '.$i.'.</div>';
							goto end_opex_dept_here;
							
						}


			        	if(!empty($company_unit_id)){

							$set = array(
								'bc_id' 		=> NULL,
								'cost_center_id' => $cost_center_id,
								'company_unit_id' => $company_unit_id,
								'cost' => $cost =='' ? 0:$cost,
								'gl_sub_id' => $gl_sub_id,
								'gl_desc' => $gl_desc,
								'trans_year' => @$trans_year.'-01-01',
								'comp_opex_dept_status' => 1,
								'filename'		=> $inputFileName,
								'created_by'	=> $user_id,
								'created_ts'	=> date_now()
							);

							$result =  $this->admin->insert_data('comparative_opex_dept_tbl', $set, TRUE);
						}
		                
						end_opex_dept_here:
		                $added++;
		            }
		            if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg .= '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}else{
						$this->db->trans_commit();
						$msg .= '<div class="alert alert-success">Data uploaded successfully!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}

		        } catch (Exception $e) {
					die('Error loading file "' . pathinfo($inputFileName, PATHINFO_BASENAME)
		                  . '": ' .$e->getMessage());

				}
					
			} else {
				$msg = '<div class="alert alert-danger">'.$this->upload->display_errors().'</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/comparative-data-upload');
			}
		} else {
			$msg = '<div class="alert alert-danger">Please contact system administrator!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/comparative-data-upload');
		}
	}


	public function upload_comp_opex_gl(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$user_id = decode($info['user_id']);
			$this->load->library('excel_v2');
			ini_set('max_execution_time', 0);
			ini_set('memory_limit','2048M');

			$path = 'assets/comparative-opex-gl/';
			if (!is_dir($path)) {
			    mkdir($path, 0777, TRUE);
			}

			$trans_year = clean_data($this->input->post('comp-opex-gl-year'));

			$config['upload_path'] = $path;
			$config['allowed_types'] = 'xlsx|xls';
			$config['remove_spaces'] = TRUE;
			$this->load->library('upload', $config);
			$this->upload->initialize($config);            
			if (!$this->upload->do_upload('opex-gl-file')) {
				$error = array('error' => $this->upload->display_errors());
			} else {
				$data = array('upload_data' => $this->upload->data());
			}

			if(empty($error)){
				if (!empty($data['upload_data']['file_name'])) {
					$import_xls_file = $data['upload_data']['file_name'];
				} else {
					$import_xls_file = 0;
				}

				$inputFileName = $path . $import_xls_file;
				try {
					$inputFileType = PHPExcel_IOFactory::identify($inputFileName);
					$objReader = PHPExcel_IOFactory::createReader($inputFileType);
					$objPHPExcel = $objReader->load($inputFileName);
					$allDataInSheet = $objPHPExcel->getActiveSheet()->toArray(null, true, false, true);
					$flag = true;
					$i=2; //dating 4
					
					$added = 0;

					
					
		        	$totalKgs = 0;
		        	$overAllTotal = 0;
		        	$msg = '';
		        	$this->db->trans_start();
		        	foreach ($allDataInSheet as $value) {
	        			if($added < 2){ //dating 3
	        				if($added == 1){
				        		if(
					        		empty(@$value['A']) ||
									empty(@$value['B']) ||
									empty(@$value['C']) ||
									empty(@$value['D']) ||
									empty(@$value['E']) ||
									empty(@$value['F']) ||
									empty(@$value['G']) ||
									empty(@$value['H']) ||
									!empty(@$value['I'])

				        		){
				        			$msg = '<div class="alert alert-danger">Error, Invalid Template! Please download the latest one.</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/comparative-data-upload');
				        		}
				        	}
		                  	goto end_opex_gl_here;
		                }

		                $plant			= clean_data(trim($value['A']));
			        	$bc_name		= strtoupper(clean_data(trim($value['B'])));
						$cost_center	= clean_data(trim(@$value['C']));
			        	$cost_center_name	= clean_data(trim(@$value['D']));
			        	$gl_code		= clean_data(trim($value['E']));
			        	$gl_desc		= strtoupper( clean_data(trim($value['F'])) );
			        	$gl_group_name		= strtoupper( clean_data(trim($value['G'])) );
			        	$cost		= clean_data(trim($value['H']));
			        	
						//$cost = $cost * 1;

			        	$i++;

			        	if($added == 2){
				        	$check_bc = $this->admin->check_data('bc_tbl', array('bc_name' => strtoupper($bc_name)), TRUE);
				        	$bc_id = '';
				        	
							if($check_bc['result'] == TRUE){
								$bc_id = $check_bc['info']->bc_id;
								$set = array(
									'comp_opex_gl_status' 	=> 2
								);

								$result =  $this->admin->update_data('comparative_opex_gl_tbl', $set, array('bc_id' => $bc_id, 'YEAR(trans_year)' => $trans_year));
							}else{
								//$this->db->trans_rollback();
								$msg .= '<div class="alert alert-danger">Business Center ('.$bc_name.') does not exist! Line number '.$i.'.</div>';
								$this->session->set_flashdata('message', $msg);
								redirect('admin/comparative-data-upload');
							}
			        	}

						$filter = array(
							'gl_group_name' => strtoupper($gl_group_name),
							'gl_group_status' => 1
						);
						$check_gl_group = $this->admin->check_data('gl_group_tbl', $filter, TRUE, 'gl_group_id');
			        	if($check_gl_group['result'] == TRUE){
							$gl_group_id = $check_gl_group['info']->gl_group_id;
						}else{
							
							$msg .= '<div class="alert alert-danger">GL Group ('.$gl_group_name.') does not exist! Line number '.$i.'.</div>';
							goto end_opex_gl_here;
							
						}

						$filter = array(
							'gl_code' => strtoupper($gl_code),
							'gl_group_id' => $gl_group_id,
							'gl_sub_status' => 1
						);
						$check_gl_subgroup = $this->admin->check_data('gl_subgroup_tbl', $filter, TRUE, 'gl_sub_id');
			        	if($check_gl_subgroup['result'] == TRUE){
							$gl_sub_id = $check_gl_subgroup['info']->gl_sub_id;
						}else{
							
							$msg .= '<div class="alert alert-danger">GL Account ('.$gl_code.') does not exist! Line number '.$i.'.</div>';
							goto end_opex_gl_here;
							
						}

						$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => strtoupper($cost_center)), TRUE, 'cost_center_id');
			        	if($check_cost_center['result'] == TRUE){
							$cost_center_id = $check_cost_center['info']->cost_center_id;
						}else{
							$msg .= '<div class="alert alert-danger">Cost Center ('.$cost_center.') does not exist! Line number '.$i.'.</div>';
							goto end_opex_gl_here;
						}


			        	if(!empty($bc_id)){

							
							$set = array(
								'bc_id' => @$bc_id,
								'cost_center_id' => $cost_center_id,
								'gl_sub_id' => $gl_sub_id,
								'gl_desc' => $gl_desc,
								'trans_year' => @$trans_year.'-01-01',
								'cost' => $cost =='' ? 0:$cost,
								'comp_opex_gl_status' => 1,
								'filename'		=> $inputFileName,
								'created_by'	=> $user_id,
								'created_ts'	=> date_now()
							);

							$result =  $this->admin->insert_data('comparative_opex_gl_tbl', $set, TRUE);
						}
		                
						end_opex_gl_here:
		                $added++;
		            }
		            if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg .= '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}else{
						$this->db->trans_commit();
						$msg .= '<div class="alert alert-success">Data uploaded successfully!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}

		        } catch (Exception $e) {
					die('Error loading file "' . pathinfo($inputFileName, PATHINFO_BASENAME)
		                  . '": ' .$e->getMessage());

				}
					
			} else {
				$msg = '<div class="alert alert-danger">'.$this->upload->display_errors().'</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/comparative-data-upload');
			}
		} else {
			$msg = '<div class="alert alert-danger">Please contact system administrator!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/comparative-data-upload');
		}
	}

	public function upload_comp_net_sales(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$user_id = decode($info['user_id']);
			$this->load->library('excel_v2');
			ini_set('max_execution_time', 0);
			ini_set('memory_limit','2048M');

			$path = 'assets/comparative-net-sales/';
			if (!is_dir($path)) {
			    mkdir($path, 0777, TRUE);
			}

			$trans_year = clean_data($this->input->post('comp-net-sales-trans-year'));

			$config['upload_path'] = $path;
			$config['allowed_types'] = 'xlsx|xls';
			$config['remove_spaces'] = TRUE;
			$this->load->library('upload', $config);
			$this->upload->initialize($config);            
			if (!$this->upload->do_upload('net-sales-file')) {
				$error = array('error' => $this->upload->display_errors());
			} else {
				$data = array('upload_data' => $this->upload->data());
			}

			if(empty($error)){
				if (!empty($data['upload_data']['file_name'])) {
					$import_xls_file = $data['upload_data']['file_name'];
				} else {
					$import_xls_file = 0;
				}

				$inputFileName = $path . $import_xls_file;
				try {
					$inputFileType = PHPExcel_IOFactory::identify($inputFileName);
					$objReader = PHPExcel_IOFactory::createReader($inputFileType);
					$objPHPExcel = $objReader->load($inputFileName);
					$allDataInSheet = $objPHPExcel->getActiveSheet()->toArray(null, true, false, true);
					$flag = true;
					$i=2; //dating 4
					
					$added = 0;

					
					
		        	$totalKgs = 0;
		        	$overAllTotal = 0;
		        	$msg = '';
		        	$this->db->trans_start();
		        	foreach ($allDataInSheet as $value) {
	        			if($added < 2){ //dating 3
	        				if($added == 1){
				        		if(
					        		empty(@$value['A']) ||
									empty(@$value['B']) ||
									empty(@$value['C']) ||
									empty(@$value['D']) ||
									empty(@$value['E']) ||
									empty(@$value['F']) ||
									empty(@$value['G']) ||
									empty(@$value['H']) ||
									!empty(@$value['I'])
				        		){
				        			$msg = '<div class="alert alert-danger">Error, Invalid Template! Please download the latest one.</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/comparative-data-upload');
				        		}
				        	}
		                  	goto end_net_sales_here;
		                }

		                $plant			= clean_data(trim($value['A']));
			        	$bc_name		= strtoupper(clean_data(trim($value['B'])));
			        	$segment		= clean_data(trim($value['C']));
			        	$net_sales		= clean_data(trim($value['D']));
			        	$sales_unit	= clean_data(trim($value['E']));
			        	$nsp_kg	= clean_data(trim($value['F']));
			        	$nsp_unit	= clean_data(trim($value['G']));
			        	$sales_mix_perc	= clean_data(trim($value['H']));

						//$net_sales = $net_sales * 1;
						//$sales_unit = $sales_unit * 1;
						//$nsp_kg = $nsp_kg * 1;
						//$nsp_unit = $nsp_unit * 1;
						//$sales_mix_perc = $sales_mix_perc * 1;
			        	$i++;

			        	if($added == 2){
				        	$check_bc = $this->admin->check_data('bc_tbl', array('bc_name' => strtoupper($bc_name)), TRUE);
				        	$bc_id = '';
							if($check_bc['result'] == TRUE){
								$bc_id = $check_bc['info']->bc_id;
								$set = array(
									'comp_net_sales_status' 	=> 2
								);

								$result =  $this->admin->update_data('comparative_net_sales_tbl', $set, array('bc_id' => $bc_id, 'YEAR(trans_year)' => $trans_year));
							}else{
								//$this->db->trans_rollback();
								$msg .= '<div class="alert alert-danger">Business Center ('.$bc_name.') does not exist! Line number '.$i.'.</div>';
								$this->session->set_flashdata('message', $msg);
								redirect('admin/comparative-data-upload');
							}
			        	}

			        	if(!empty($bc_id)){

							$set = array(
								'bc_id' 		=> @$bc_id,
								'trans_year'	=> $trans_year.'-01-01',
								'segment' => $segment,
								'net_sales' => $net_sales == '' ? 0 : $net_sales,
								'sales_unit' => $sales_unit == '' ? 0 : $sales_unit,
								'nsp_kg' => $nsp_kg == '' ? 0 : $nsp_kg,
								'nsp_unit' => $nsp_unit == '' ? 0 : $nsp_unit,
								'sales_mix_perc' => $sales_mix_perc == '' ? 0 : $sales_mix_perc,
								'comp_net_sales_status' => 1,
								'filename'		=> $inputFileName,
								'created_by'	=> $user_id,
								'created_ts'	=> date_now()
							);
							$result =  $this->admin->insert_data('comparative_net_sales_tbl', $set, TRUE);
						}
		                
						end_net_sales_here:
		                $added++;
		            }
		            if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success">Data uploaded successfully!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}

		        } catch (Exception $e) {
					die('Error loading file "' . pathinfo($inputFileName, PATHINFO_BASENAME)
		                  . '": ' .$e->getMessage());

				}
					
			} else {
				$msg = '<div class="alert alert-danger">'.$this->upload->display_errors().'</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/comparative-data-upload');
			}
		} else {
			$msg = '<div class="alert alert-danger">Please contact system administrator!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/comparative-data-upload');
		}
	}


	public function upload_comp_pnl(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$user_id = decode($info['user_id']);
			$this->load->library('excel_v2');
			ini_set('max_execution_time', 0);
			ini_set('memory_limit','2048M');

			$path = 'assets/comparative-pnl/';
			if (!is_dir($path)) {
			    mkdir($path, 0777, TRUE);
			}

			$trans_year = clean_data($this->input->post('comp-pnl-trans-year'));

			$config['upload_path'] = $path;
			$config['allowed_types'] = 'xlsx|xls';
			$config['remove_spaces'] = TRUE;
			$this->load->library('upload', $config);
			$this->upload->initialize($config);            
			if (!$this->upload->do_upload('pnl-file')) {
				$error = array('error' => $this->upload->display_errors());
			} else {
				$data = array('upload_data' => $this->upload->data());
			}

			if(empty($error)){
				if (!empty($data['upload_data']['file_name'])) {
					$import_xls_file = $data['upload_data']['file_name'];
				} else {
					$import_xls_file = 0;
				}

				$inputFileName = $path . $import_xls_file;
				try {
					$inputFileType = PHPExcel_IOFactory::identify($inputFileName);
					$objReader = PHPExcel_IOFactory::createReader($inputFileType);
					$objPHPExcel = $objReader->load($inputFileName);
					$allDataInSheet = $objPHPExcel->getActiveSheet()->toArray(null, true, false, true);
					$flag = true;
					$i=2; //dating 4
					
					$added = 0;

					
					
		        	$totalKgs = 0;
		        	$overAllTotal = 0;
		        	$msg = '';
		        	$this->db->trans_start();
		        	foreach ($allDataInSheet as $value) {
	        			if($added < 2){ //dating 3
	        				if($added == 1){
				        		if(
					        		empty(@$value['A']) ||
									empty(@$value['B']) ||
									empty(@$value['C']) ||
									empty(@$value['D']) ||
									empty(@$value['E']) ||
									empty(@$value['F']) ||
									empty(@$value['G']) ||
									empty(@$value['H']) ||
									!empty(@$value['I'])
				        		){
				        			$msg = '<div class="alert alert-danger">Error, Invalid Template! Please download the latest one.</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/comparative-data-upload');
				        		}
				        	}
		                  	goto end_pnl_here;
		                }

		                $plant			= clean_data(trim($value['A']));
			        	$bc_name		= strtoupper(clean_data(trim($value['B'])));
			        	$comp_pnl_sales_volume		= clean_data(trim($value['C']));
			        	$comp_pnl_net_sales		= clean_data(trim($value['D']));
			        	$comp_pnl_variable_cost	= clean_data(trim($value['E']));
			        	$comp_pnl_contribution_margin	= clean_data(trim($value['F']));
			        	$comp_pnl_period_cost	= clean_data(trim($value['G']));
			        	$comp_pnl_other	= clean_data(trim($value['H']));

						//$comp_pnl_sales_volume = $comp_pnl_sales_volume * 1;
						//$comp_pnl_net_sales = $comp_pnl_net_sales * 1;
						//$comp_pnl_variable_cost = $comp_pnl_variable_cost * 1;
						//$comp_pnl_contribution_margin = $comp_pnl_contribution_margin * 1;
						//$comp_pnl_period_cost = $comp_pnl_period_cost * 1;
						//$comp_pnl_other = $comp_pnl_other * 1;
			        	$i++;

			        	if($added == 2){
				        	$check_bc = $this->admin->check_data('bc_tbl', array('bc_name' => strtoupper($bc_name)), TRUE);
				        	$bc_id = '';
							if($check_bc['result'] == TRUE){
								$bc_id = $check_bc['info']->bc_id;
								$set = array(
									'comp_pnl_status' 	=> 2
								);

								$result =  $this->admin->update_data('comparative_pnl_tbl', $set, array('bc_id' => $bc_id, 'comp_pnl_year' => $trans_year));
							}else{
								//$this->db->trans_rollback();
								$msg .= '<div class="alert alert-danger">Business Center ('.$bc_name.') does not exist! Line number '.$i.'.</div>';
								$this->session->set_flashdata('message', $msg);
								redirect('admin/comparative-data-upload');
							}
			        	}

			        	if(!empty($bc_id)){

							$set = array(
								'bc_id' 		=> @$bc_id,
								'comp_pnl_sales_volume' => $comp_pnl_sales_volume == '' ? 0 : $comp_pnl_sales_volume,
								'comp_pnl_net_sales' => $comp_pnl_net_sales == '' ? 0 : $comp_pnl_net_sales,
								'comp_pnl_variable_cost' => $comp_pnl_variable_cost == '' ? 0 : $comp_pnl_variable_cost,
								'comp_pnl_contribution_margin' => $comp_pnl_contribution_margin == '' ? 0 : $comp_pnl_contribution_margin,
								'comp_pnl_period_cost' => $comp_pnl_period_cost == '' ? 0 : $comp_pnl_period_cost,
								'comp_pnl_other' => $comp_pnl_other == '' ? 0 : $comp_pnl_other,
								'comp_pnl_year' => $trans_year,
								'comp_pnl_status' => 1,
								'filename'		=> $inputFileName,
								'created_by'	=> $user_id,
								'created_ts'	=> date_now()
								
							);


							$result =  $this->admin->insert_data('comparative_pnl_tbl', $set, TRUE);
						}
		                
						end_pnl_here:
		                $added++;
		            }
		            if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success">Data uploaded successfully!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}

		        } catch (Exception $e) {
					die('Error loading file "' . pathinfo($inputFileName, PATHINFO_BASENAME)
		                  . '": ' .$e->getMessage());

				}
					
			} else {
				$msg = '<div class="alert alert-danger">'.$this->upload->display_errors().'</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/comparative-data-upload');
			}
		} else {
			$msg = '<div class="alert alert-danger">Please contact system administrator!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/comparative-data-upload');
		}
	}

	public function upload_comp_price(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$user_id = decode($info['user_id']);
			$this->load->library('excel_v2');
			ini_set('max_execution_time', 0);
			ini_set('memory_limit','2048M');

			$path = 'assets/comparative-price/';
			if (!is_dir($path)) {
			    mkdir($path, 0777, TRUE);
			}

			$trans_year = clean_data($this->input->post('comp-price-trans-year'));

			$config['upload_path'] = $path;
			$config['allowed_types'] = 'xlsx|xls';
			$config['remove_spaces'] = TRUE;
			$this->load->library('upload', $config);
			$this->upload->initialize($config);            
			if (!$this->upload->do_upload('price-file')) {
				$error = array('error' => $this->upload->display_errors());
			} else {
				$data = array('upload_data' => $this->upload->data());
			}

			if(empty($error)){
				if (!empty($data['upload_data']['file_name'])) {
					$import_xls_file = $data['upload_data']['file_name'];
				} else {
					$import_xls_file = 0;
				}

				$inputFileName = $path . $import_xls_file;
				try {
					$inputFileType = PHPExcel_IOFactory::identify($inputFileName);
					$objReader = PHPExcel_IOFactory::createReader($inputFileType);
					$objPHPExcel = $objReader->load($inputFileName);
					$allDataInSheet = $objPHPExcel->getActiveSheet()->toArray(null, true, false, true);
					$flag = true;
					$i=2; //dating 4
					
					$added = 0;

					
					
		        	$totalKgs = 0;
		        	$overAllTotal = 0;
		        	$msg = '';
		        	$this->db->trans_start();
		        	foreach ($allDataInSheet as $value) {
	        			if($added < 2){ //dating 3
	        				if($added == 1){
				        		if(
					        		empty(@$value['A']) ||
									empty(@$value['B']) ||
									empty(@$value['C']) ||
									empty(@$value['D']) ||
									empty(@$value['E']) ||
									empty(@$value['F']) ||
									empty(@$value['G']) ||
									empty(@$value['H']) ||
									empty(@$value['I']) ||
									empty(@$value['J']) ||
									empty(@$value['K']) ||
									empty(@$value['L']) ||
									empty(@$value['M']) ||
									empty(@$value['N']) ||
									empty(@$value['O']) ||
									empty(@$value['P']) ||
									empty(@$value['Q']) ||
									empty(@$value['R']) ||
									empty(@$value['S']) ||
									!empty(@$value['T'])
				        		){
				        			$msg = '<div class="alert alert-danger">Error, Invalid Template! Please download the latest one.</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/comparative-data-upload');
				        		}
				        	}
		                  	goto end_price_here;
		                }

		                $plant			= clean_data(trim($value['A']));
			        	$bc_name		= strtoupper(clean_data(trim($value['B'])));
			        	$comp_price_segment		= strtoupper(clean_data(trim($value['C'])));
			        	$comp_price_product		= strtoupper(clean_data(trim($value['D'])));
			        	$comp_price_jan	= clean_data(trim($value['E']));
			        	$comp_price_feb	= clean_data(trim($value['F']));
			        	$comp_price_mar	= clean_data(trim($value['G']));
			        	$comp_price_apr	= clean_data(trim($value['H']));
			        	$comp_price_may	= clean_data(trim($value['I']));
			        	$comp_price_jun	= clean_data(trim($value['J']));
			        	$comp_price_jul	= clean_data(trim($value['K']));
			        	$comp_price_aug	= clean_data(trim($value['L']));
			        	$comp_price_sep	= clean_data(trim($value['M']));
			        	$comp_price_oct	= clean_data(trim($value['N']));
			        	$comp_price_nov	= clean_data(trim($value['O']));
			        	$comp_price_dec	= clean_data(trim($value['P']));


						//$comp_price_jan = $comp_price_jan * 1;
						//$comp_price_feb = $comp_price_feb * 1;
						//$comp_price_mar = $comp_price_mar * 1;
						//$comp_price_apr = $comp_price_apr * 1;
						//$comp_price_may = $comp_price_may * 1;
						//$comp_price_jun = $comp_price_jun * 1;
						//$comp_price_jul = $comp_price_jul * 1;
						//$comp_price_aug = $comp_price_aug * 1;
						//$comp_price_sep = $comp_price_sep * 1;
						//$comp_price_oct = $comp_price_oct * 1;
						//$comp_price_nov = $comp_price_nov * 1;
						//$comp_price_dec = $comp_price_dec * 1;
			        	
			        	$i++;

			        	if($added == 2){
				        	$check_bc = $this->admin->check_data('bc_tbl', array('bc_name' => strtoupper($bc_name)), TRUE);
				        	$bc_id = '';
							if($check_bc['result'] == TRUE){
								$bc_id = $check_bc['info']->bc_id;
								$set = array(
									'comp_price_status' 	=> 2
								);

								$result =  $this->admin->update_data('comparative_price_tbl', $set, array('bc_id' => $bc_id, 'comp_price_year' => $trans_year));
							}else{
								//$this->db->trans_rollback();
								$msg .= '<div class="alert alert-danger">Business Center ('.$bc_name.') does not exist! Line number '.$i.'.</div>';
								$this->session->set_flashdata('message', $msg);
								redirect('admin/comparative-data-upload');
							}
			        	}

			        	if(!empty($bc_id)){

							$set = array(
								'bc_id' 		=> @$bc_id,
								'comp_price_segment' => $comp_price_segment,
								'comp_price_product' => $comp_price_product,
								'comp_price_year' => $trans_year,
								'comp_price_jan' => $comp_price_jan == '' ? 0 : $comp_price_jan,
								'comp_price_feb' => $comp_price_feb == '' ? 0 : $comp_price_feb,
								'comp_price_mar' => $comp_price_mar == '' ? 0 : $comp_price_mar,
								'comp_price_apr' => $comp_price_apr == '' ? 0 : $comp_price_apr,
								'comp_price_may' => $comp_price_may == '' ? 0 : $comp_price_may,
								'comp_price_jun' => $comp_price_jun == '' ? 0 : $comp_price_jun,
								'comp_price_jul' => $comp_price_jul == '' ? 0 : $comp_price_jul,
								'comp_price_aug' => $comp_price_aug == '' ? 0 : $comp_price_aug,
								'comp_price_sep' => $comp_price_sep == '' ? 0 : $comp_price_sep,
								'comp_price_oct' => $comp_price_oct == '' ? 0 : $comp_price_oct,
								'comp_price_nov' => $comp_price_nov == '' ? 0 : $comp_price_nov,
								'comp_price_dec' => $comp_price_dec == '' ? 0 : $comp_price_dec,
								'comp_price_added' => date_now(),
								'comp_price_status' => 1,
								'filename'		=> $inputFileName,
								'created_by'	=> $user_id
							);

							$result =  $this->admin->insert_data('comparative_price_tbl', $set, TRUE);
						}
		                
						end_price_here:
		                $added++;
		            }
		            if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success">Data uploaded successfully!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}

		        } catch (Exception $e) {
					die('Error loading file "' . pathinfo($inputFileName, PATHINFO_BASENAME)
		                  . '": ' .$e->getMessage());

				}
					
			} else {
				$msg = '<div class="alert alert-danger">'.$this->upload->display_errors().'</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/comparative-data-upload');
			}
		} else {
			$msg = '<div class="alert alert-danger">Please contact system administrator!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/comparative-data-upload');
		}
	}


	public function upload_comp_variable_cost(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$user_id = decode($info['user_id']);
			$this->load->library('excel_v2');
			ini_set('max_execution_time', 0);
			ini_set('memory_limit','2048M');

			$path = 'assets/comparative-variable-cost/';
			if (!is_dir($path)) {
			    mkdir($path, 0777, TRUE);
			}

			$trans_year = clean_data($this->input->post('comp-variable-cost-trans-year'));

			$config['upload_path'] = $path;
			$config['allowed_types'] = 'xlsx|xls';
			$config['remove_spaces'] = TRUE;
			$this->load->library('upload', $config);
			$this->upload->initialize($config);            
			if (!$this->upload->do_upload('variable-cost-file')) {
				$error = array('error' => $this->upload->display_errors());
			} else {
				$data = array('upload_data' => $this->upload->data());
			}

			if(empty($error)){
				if (!empty($data['upload_data']['file_name'])) {
					$import_xls_file = $data['upload_data']['file_name'];
				} else {
					$import_xls_file = 0;
				}

				$inputFileName = $path . $import_xls_file;
				try {
					$inputFileType = PHPExcel_IOFactory::identify($inputFileName);
					$objReader = PHPExcel_IOFactory::createReader($inputFileType);
					$objPHPExcel = $objReader->load($inputFileName);
					$allDataInSheet = $objPHPExcel->getActiveSheet()->toArray(null, true, false, true);
					$flag = true;
					$i=2; //dating 4
					
					$added = 0;

					
					
		        	$totalKgs = 0;
		        	$overAllTotal = 0;
		        	$msg = '';
		        	$this->db->trans_start();
		        	foreach ($allDataInSheet as $value) {
	        			if($added < 2){ //dating 3
	        				if($added == 1){
				        		if(
					        		empty(@$value['A']) ||
									empty(@$value['B']) ||
									empty(@$value['C']) ||
									empty(@$value['D']) ||
									empty(@$value['E']) ||
									empty(@$value['F']) ||
									empty(@$value['G']) ||
									empty(@$value['H']) ||
									empty(@$value['I']) ||
									!empty(@$value['J'])
				        		){
				        			$msg = '<div class="alert alert-danger">Error, Invalid Template! Please download the latest one.</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/comparative-data-upload');
				        		}
				        	}
		                  	goto end_variable_cost_here;
		                }

		                $plant			= clean_data(trim($value['A']));
			        	$bc_name		= strtoupper(clean_data(trim($value['B'])));
			        	$sales_group		= strtoupper(clean_data(trim($value['C'])));
			        	$component		= strtoupper(clean_data(trim($value['D'])));
			        	$cost	= clean_data(trim($value['E']));
			        	$sales_unit	= clean_data(trim($value['F']));
			        	$kg	= clean_data(trim($value['G']));
			        	$cost_per_kg	= clean_data(trim($value['H']));
			        	$cost_per_unit	= clean_data(trim($value['I']));

						//$cost = $cost * 1;
						//$sales_unit = $sales_unit * 1;
						//$kg = $kg * 1;
						//$cost_per_kg = $cost_per_kg * 1;
						//$cost_per_unit = $cost_per_unit * 1;
			        	
			        	
			        	$i++;

			        	if($added == 2){
				        	$check_bc = $this->admin->check_data('bc_tbl', array('bc_name' => strtoupper($bc_name)), TRUE);
				        	$bc_id = '';
							if($check_bc['result'] == TRUE){
								$bc_id = $check_bc['info']->bc_id;
								$set = array(
									'comp_variable_cost_status' 	=> 2
								);

								$result =  $this->admin->update_data('comparative_variable_cost_tbl', $set, array('bc_id' => $bc_id, 'YEAR(trans_year)' => $trans_year));
							}else{
								//$this->db->trans_rollback();
								$msg .= '<div class="alert alert-danger">Business Center ('.$bc_name.') does not exist! Line number '.$i.'.</div>';
								$this->session->set_flashdata('message', $msg);
								redirect('admin/comparative-data-upload');
							}
			        	}

			        	if(!empty($bc_id)){

							$set = array(
								
								'bc_id' 		=> @$bc_id,
								'trans_year'	=> $trans_year.'-01-01',
								'sales_group' => $sales_group,
								'component' => $component,
								'cost' => $cost == '' ? 0 : $cost,
								'sales_unit' => $sales_unit == '' ? 0 : $sales_unit,
								'kg' => $kg == '' ? 0 : $kg,
								'cost_per_kg' => $cost_per_kg == '' ? 0 : $cost_per_kg,
								'cost_per_unit' => $cost_per_unit == '' ? 0 : $cost_per_unit,
								'comp_variable_cost_status' => 1,
								'filename'		=> $inputFileName,
								'created_by'	=> $user_id,
								'created_ts'	=> date_now()
							);

								

							$result =  $this->admin->insert_data('comparative_variable_cost_tbl', $set, TRUE);
						}
		                
						end_variable_cost_here:
		                $added++;
		            }
		            if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success">Data uploaded successfully!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/comparative-data-upload');
					}

		        } catch (Exception $e) {
					die('Error loading file "' . pathinfo($inputFileName, PATHINFO_BASENAME)
		                  . '": ' .$e->getMessage());

				}
					
			} else {
				$msg = '<div class="alert alert-danger">'.$this->upload->display_errors().'</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/comparative-data-upload');
			}
		} else {
			$msg = '<div class="alert alert-danger">Please contact system administrator!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/comparative-data-upload');
		}
	}


	public function view_uploaded_file($filename){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$this->load->library('excel_v2');
		ini_set('max_execution_time', 0);
		ini_set('memory_limit','2048M');

		
		
		$inputFileType = 'Excel2007';
		$inputFileName = decode($filename);

		$objReader = PHPExcel_IOFactory::createReader($inputFileType);
		$objPHPExcel = $objReader->load($inputFileName);

		
		$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'HTML');
		$objWriter->save('php://output');

		exit;
	}

	public function cancel_uploaded_data(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		$year = clean_data($this->input->post('trans_year'));
		$id = clean_data(decode($this->input->post('bc_id')));
		$table = clean_data(decode($this->input->post('table')));
		$set = array();
		$where = array();
		$designated_tbl = $this->_get_designated_tbl($id);

		if($table == 'comparative_capex_tbl'){
			$prefix = 'Comparative Capex (BC) ';
			$table = $table.' a';
			$where = array(
				'a.bc_id' => $id,
				'a.comp_capex_year' => decode($year),
				'a.comp_capex_status' => 1
			);
	
			$set = array(
				'a.comp_capex_status' => 2
			);
		}

		if($table == 'comparative_capex_unit_tbl'){
			$prefix = 'Comparative Capex (Unit) ';
			$table = $table.' a';
			$where = array(
				'a.company_unit_id' => $id,
				'a.comp_capex_unit_year' => decode($year),
				'a.comp_capex_unit_status' => 1
			);
	
			$set = array(
				'a.comp_capex_unit_status' => 2
			);

		}

		if($table == 'comparative_opex_gl_tbl'){
			$prefix = 'Comparative OpEx (BC) ';
			$table = $table.' a';
			$where = array(
				'a.bc_id' => $id,
				'YEAR(a.trans_year)' => decode($year),
				'a.comp_opex_gl_status' => 1
			);

			$set = array(
				'a.comp_opex_gl_status' => 2
			);
		}

		if($table == 'comparative_opex_dept_tbl'){
			$prefix = 'Comparative OpEx (Unit) ';
			$table = $table.' a';
			$where = array(
				'a.company_unit_id' => $id,
				'YEAR(a.trans_year)' => decode($year),
				'a.comp_opex_dept_status' => 1
			);

			$set = array(
				'a.comp_opex_dept_status' => 2
			);
		}

		if($table == 'comparative_net_sales_tbl'){
			$prefix = 'Comparative Net Sales ';
			$table = $table.' a';
			$where = array(
				'a.bc_id' => $id,
				'YEAR(a.trans_year)' => decode($year),
				'a.comp_net_sales_status' => 1
			);

			$set = array(
				'a.comp_net_sales_status' => 2
			);
		}

		if($table == 'comparative_pnl_tbl'){
			$prefix = 'Comparative PNL ';
			$table = $table.' a';
			$where = array(
				'a.bc_id' => $id,
				'a.comp_pnl_year' => decode($year),
				'a.comp_pnl_status' => 1
			);
			
			$set = array(
				'a.comp_pnl_status' => 2
			);
		}

		if($table == 'comparative_price_tbl'){
			$prefix = 'Comparative Price Assumption ';
			$table = $table.' a';
			$where = array(
				'a.bc_id' => $id,
				'a.comp_price_year' => decode($year),
				'a.comp_price_status' => 1
			);
			
			$set = array(
				'a.comp_price_status' => 2
			);
		}

		if($table == 'comparative_variable_cost_tbl'){
			$prefix = 'Comparative Variable Cost ';
			$table = $table.' a';
			$where = array(
				'a.bc_id' => $id,
				'YEAR(a.trans_year)' => decode($year),
				'a.comp_variable_cost_status' => 1
			);
			
			$set = array(
				'a.comp_variable_cost_status' => 2
			);
		}

		if($table == 'comparative_volume_tbl'){
			$prefix = 'Comparative Sales Volume ';
			$table = $table.' a';
			$where = array(
				'a.bc_id' => $id,
				'YEAR(a.trans_year)' => decode($year),
				'a.sales_status' => 1
			);
			
			$set = array(
				'a.sales_status' => 2
			);
		}

		if($table == 'depreciation_bc_tbl'){
			$prefix = 'Comparative Depreciation (BC) ';
			$table = $table.' a';
			$where = array(
				'a.bc_id' => $id,
				'YEAR(a.depreciation_bc_date)' => decode($year),
				'a.depreciation_bc_status' => 1
			);
			
			$set = array(
				'a.depreciation_bc_status' => 2
			);
		}

		if($table == 'depreciation_unit_tbl'){
			$prefix = 'Comparative Depreciation (Unit) ';
			$table = $designated_tbl->depreciation_unit_tbl.' a';
			// $table = $table.' a';
			$where = array(
				'a.company_unit_id' => $id,
				'YEAR(a.depreciation_unit_date)' => decode($year),
				'a.depreciation_unit_status' => 1
			);
			
			$set = array(
				'a.depreciation_unit_status' => 2
			);
		}

		if(!empty($set) && $table && !empty($where)){
			$result =  $this->admin->update_data($table, $set, $where);
		}

		if(@$result){
			$msg = '<div class="alert alert-success">'.$prefix.'Data cancelled successfully!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/comparative-data-upload');
		} else {
			$msg = '<div class="alert alert-danger">Error! Please try again!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/comparative-data-upload');
		}
	}

	public function view_uploaded_data($table, $id, $year){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$designated_tbl = $this->_get_designated_tbl(decode($id));
		
		ini_set('max_execution_time', 0);
		ini_set('memory_limit','4048M');
		
		$data['id'] = $id;
		
		$id = decode($id);
		
		$data['title'] = 'View Uploaded Data';

		$table =  decode($table);
		if($table == 'comparative_capex_tbl'){
			$data['table_title'] = 'CAPEX (BC)';
			$table = 'comparative_capex_tbl a';
			$join = array(
				'bc_tbl b' => 'a.bc_id = b.bc_id',
				'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id',
				'asset_group_tbl d' => 'a.ag_id = d.ag_id'
			);
			$where = array(
				'a.bc_id' => $id,
				'a.comp_capex_year' => decode($year),
				'a.comp_capex_status' => 1
			);
			$order_by = 'a.comp_capex_id';
			$group_by = 'a.comp_capex_id';
			
			$uploaded_data = $this->admin->get_join($table, $join, FALSE, $order_by, $group_by, '*', $where, false);
			
			$table = '
			<div class="col-lg-12">
				<div class="table-responsive">
					<table class="table table-hover table-stripe nowrap tbl-comparative">
						<thead>
							<tr>
								<th class="text-center">BC</th>
								<th class="text-center">Cost Center</th>
								<th class="text-center">Cost Center Name</th>
								<th class="text-center">Class Code</th>
								<th class="text-center">Class Name</th>
								<th class="text-center">Acq. Date</th>
								<th class="text-center">Acq. Cost</th>
								<th class="text-center">Year</th>
							</tr>
						</thead>
						<tbody>';
			if(!empty($uploaded_data)){
								
				foreach($uploaded_data as $r){
					$table .= '<tr>';
					$table .= '<td>'.$r->bc_name.'</td>';
					$table .= '<td>'.$r->cost_center_code.'</td>';
					$table .= '<td>'.$r->cost_center_desc.'</td>';
					$table .= '<td>'.$r->ag_gl_code.'</td>';
					$table .= '<td>'.$r->ag_name.'</td>';
					$table .= '<td class="text-center">'.date('m/d/Y', strtotime($r->comp_capex_date)).'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_capex_val, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.$r->comp_capex_year.'</td>';
					$table .= '</tr>';
				}

				
			}
			$table .= '</tbody>';
			$table .= '</table></div></div>';
			
			$data['table_view'] = $table;
		}
		
		if($table == 'comparative_capex_unit_tbl'){
			$data['table_title'] = 'CAPEX (Unit)';
			$table = 'comparative_capex_unit_tbl a';
			$join = array(
				'company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id',
				'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id',
				'asset_group_tbl d' => 'a.ag_id = d.ag_id'
			);
			$where = array(
				'a.company_unit_id' => $id,
				'a.comp_capex_unit_year' => decode($year),
				'a.comp_capex_unit_status' => 1
			);
			$order_by = 'a.comp_capex_unit_id';
			$group_by = 'a.comp_capex_unit_id';
			
			$uploaded_data = $this->admin->get_join($table, $join, FALSE, $order_by, $group_by, '*', $where);

			$table = '
			<div class="col-lg-12">
				<div class="table-responsive">
					<table class="table table-hover table-stripe nowrap tbl-comparative">
						<thead>
							<tr>
								<th class="text-center">Unit Name</th>
								<th class="text-center">Cost Center</th>
								<th class="text-center">Cost Center Name</th>
								<th class="text-center">Class Code</th>
								<th class="text-center">Class Name</th>
								<th class="text-center">Acq. Date</th>
								<th class="text-center">Acq. Cost</th>
								<th class="text-center">Year</th>
							</tr>
						</thead>
						<tbody>';
			if(!empty($uploaded_data)){
								
				foreach($uploaded_data as $r){
					$table .= '<tr>';
					$table .= '<td>'.$r->company_unit_name.'</td>';
					$table .= '<td>'.$r->cost_center_code.'</td>';
					$table .= '<td>'.$r->cost_center_desc.'</td>';
					$table .= '<td>'.$r->ag_gl_code.'</td>';
					$table .= '<td>'.$r->ag_name.'</td>';
					$table .= '<td class="text-center">'.date('m/d/Y', strtotime($r->comp_capex_unit_date)).'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_capex_unit_val, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.$r->comp_capex_unit_year.'</td>';
					$table .= '</tr>';
				}

				
			}
			$table .= '</tbody>';
			$table .= '</table></div></div>';
			
			$data['table_view'] = $table;
		}

		if($table == 'comparative_opex_gl_tbl'){
			$data['table_title'] = 'OPEX (BC)';
			$table = 'comparative_opex_gl_tbl a';
			$join = array(
				'bc_tbl b' => 'a.bc_id = b.bc_id',
				'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id',
				'gl_subgroup_tbl d' => 'a.gl_sub_id = d.gl_sub_id',
				'gl_group_tbl e' => 'd.gl_group_id = e.gl_group_id'
			);
			$where = array(
				'a.bc_id' => $id,
				'YEAR(a.trans_year)' => decode($year),
				'a.comp_opex_gl_status' => 1
			);
			$order_by = 'a.comp_opex_gl_id';
			$group_by = 'a.comp_opex_gl_id';
			
			$uploaded_data = $this->admin->get_join($table, $join, FALSE, $order_by, $group_by, '*', $where);

			$table = '
			<div class="col-lg-12">
				<div class="table-responsive">
					<table class="table table-hover table-stripe nowrap tbl-comparative">
						<thead>
							<tr>
								<th class="text-center">BC</th>
								<th class="text-center">Cost Center</th>
								<th class="text-center">Cost Center Name</th>
								<th class="text-center">GL Account</th>
								<th class="text-center">GL Description</th>
								<th class="text-center">GL Group</th>
								<th class="text-center">Cost</th>
								<th class="text-center">Year</th>
							</tr>
						</thead>
						<tbody>';
			if(!empty($uploaded_data)){
								
				foreach($uploaded_data as $r){
					$table .= '<tr>';
					$table .= '<td>'.$r->bc_name.'</td>';
					$table .= '<td>'.$r->cost_center_code.'</td>';
					$table .= '<td>'.$r->cost_center_desc.'</td>';
					$table .= '<td>'.$r->gl_code.'</td>';
					$table .= '<td>'.$r->gl_sub_name.'</td>';
					$table .= '<td>'.$r->gl_group_name.'</td>';
					$table .= '<td class="text-right">'.number_format($r->cost, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.decode($year).'</td>';
					$table .= '</tr>';
				}

				
			}
			$table .= '</tbody>';
			$table .= '</table></div></div>';
			
			$data['table_view'] = $table;
		}

		if($table == 'comparative_opex_dept_tbl'){
			$data['table_title'] = 'OPEX (Unit)';
			$table = 'comparative_opex_dept_tbl a';
			$join = array(
				'company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id',
				'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id',
				'gl_subgroup_tbl d' => 'a.gl_sub_id = d.gl_sub_id',
				'gl_group_tbl e' => 'd.gl_group_id = e.gl_group_id'
			);
			$where = array(
				'a.company_unit_id' => $id,
				'YEAR(a.trans_year)' => decode($year),
				'a.comp_opex_dept_status' => 1
			);
			$order_by = 'a.comp_opex_dept_id';
			$group_by = 'a.comp_opex_dept_id';
			
			$uploaded_data = $this->admin->get_join($table, $join, FALSE, $order_by, $group_by, '*', $where);
			//exit;
			$table = '
			<div class="col-lg-12">
				<div class="table-responsive">
					<table class="table table-hover table-stripe nowrap tbl-comparative">
						<thead>
							<tr>
								<th class="text-center">Unit Name</th>
								<th class="text-center">Cost Center</th>
								<th class="text-center">Cost Center Name</th>
								<th class="text-center">GL Account</th>
								<th class="text-center">GL Description</th>
								<th class="text-center">GL Group</th>
								<th class="text-center">Cost</th>
								<th class="text-center">Year</th>
							</tr>
						</thead>
						<tbody>';
			if(!empty($uploaded_data)){
								
				foreach($uploaded_data as $r){
					$table .= '<tr>';
					$table .= '<td>'.$r->company_unit_name.'</td>';
					$table .= '<td>'.$r->cost_center_code.'</td>';
					$table .= '<td>'.$r->cost_center_desc.'</td>';
					$table .= '<td>'.$r->gl_code.'</td>';
					$table .= '<td>'.$r->gl_sub_name.'</td>';
					$table .= '<td>'.$r->gl_group_name.'</td>';
					$table .= '<td class="text-right">'.number_format($r->cost, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.decode($year).'</td>';
					$table .= '</tr>';
				}

				
			}
			$table .= '</tbody>';
			$table .= '</table></div></div>';
			
			$data['table_view'] = $table;
		}

		if($table == 'comparative_net_sales_tbl'){
			$data['table_title'] = 'Net Sales';
			$table = 'comparative_net_sales_tbl a';
			$join = array(
				'bc_tbl b' => 'a.bc_id = b.bc_id'
			);

			$where = array(
				'a.bc_id' => $id,
				'YEAR(a.trans_year)' => decode($year),
				'a.comp_net_sales_status' => 1
			);
			$order_by = 'a.comp_net_sales_id';
			$group_by = 'a.comp_net_sales_id';
			
			$uploaded_data = $this->admin->get_join($table, $join, FALSE, $order_by, $group_by, '*', $where);

			$table = '
			<div class="col-lg-12">
				<div class="table-responsive">
					<table class="table table-hover table-stripe nowrap tbl-comparative">
						<thead>
							<tr>
								<th class="text-center">BC</th>
								<th class="text-center">Segment</th>
								<th class="text-center">Net Sales</th>
								<th class="text-center">Sales Unit</th>
								<th class="text-center">NSP/KG</th>
								<th class="text-center">NSP/Unit</th>
								<th class="text-center">Sales Mix Perc.</th>
								<th class="text-center">Year.</th>
							</tr>
						</thead>
						<tbody>';
			if(!empty($uploaded_data)){
								
				foreach($uploaded_data as $r){
					$table .= '<tr>';
					$table .= '<td>'.$r->bc_name.'</td>';
					$table .= '<td>'.$r->segment.'</td>';
					$table .= '<td class="text-right">'.number_format($r->net_sales, 4, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->sales_unit, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->nsp_kg, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->nsp_unit, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->sales_mix_perc, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.decode($year).'</td>';
					$table .= '</tr>';
				}

				
			}
			$table .= '</tbody>';
			$table .= '</table></div></div>';
			
			$data['table_view'] = $table;
		}

		if($table == 'comparative_pnl_tbl'){
			$data['table_title'] = 'PNL';
			$table = 'comparative_pnl_tbl a';
			$join = array(
				'bc_tbl b' => 'a.bc_id = b.bc_id'
			);

			$where = array(
				'a.bc_id' => $id,
				'a.comp_pnl_year' => decode($year),
				'a.comp_pnl_status' => 1
			);
			$order_by = 'a.comp_pnl_id';
			$group_by = 'a.comp_pnl_id';
			
			$uploaded_data = $this->admin->get_join($table, $join, FALSE, $order_by, $group_by, '*', $where);

			$table = '
			<div class="col-lg-12">
				<div class="table-responsive">
					<table class="table table-hover table-stripe nowrap tbl-comparative">
						<thead>
							<tr>
								<th class="text-center">BC</th>
								<th class="text-center">Sales Volume</th>
								<th class="text-center">Net Sales</th>
								<th class="text-center">Variable Cost</th>
								<th class="text-center">Contribution Margin</th>
								<th class="text-center">Period Cost</th>
								<th class="text-center">Others</th>
								<th class="text-center">Year.</th>
							</tr>
						</thead>
						<tbody>';
			if(!empty($uploaded_data)){
								
				foreach($uploaded_data as $r){
					$table .= '<tr>';
					$table .= '<td>'.$r->bc_name.'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_pnl_sales_volume, 3, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_pnl_net_sales, 3, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_pnl_variable_cost, 3, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_pnl_contribution_margin, 3, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_pnl_period_cost, 3, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_pnl_other, 3, '.', ',').'</td>';
					$table .= '<td class="text-right">'.decode($year).'</td>';
					$table .= '</tr>';
				}

				
			}
			$table .= '</tbody>';
			$table .= '</table></div></div>';
			
			$data['table_view'] = $table;
		}

		if($table == 'comparative_price_tbl'){
			$data['table_title'] = 'Price Assumption';
			$table = 'comparative_price_tbl a';
			$join = array(
				'bc_tbl b' => 'a.bc_id = b.bc_id'
			);

			$where = array(
				'a.bc_id' => $id,
				'a.comp_price_year' => decode($year),
				'a.comp_price_status' => 1
			);
			$order_by = 'a.comp_price_id';
			$group_by = 'a.comp_price_id';
			
			$uploaded_data = $this->admin->get_join($table, $join, FALSE, $order_by, $group_by, '*', $where);

			$table = '
			<div class="col-lg-12">
				<div class="table-responsive">
					<table class="table table-hover table-stripe nowrap tbl-comparative">
						<thead>
							<tr>
								<th class="text-center">BC</th>
								<th class="text-center">Segment</th>
								<th class="text-center">Product</th>
								<th class="text-center">Jan</th>
								<th class="text-center">Feb</th>
								<th class="text-center">Mar</th>
								<th class="text-center">Apr</th>
								<th class="text-center">May</th>
								<th class="text-center">Jun</th>
								<th class="text-center">Jul</th>
								<th class="text-center">Aug</th>
								<th class="text-center">Sep</th>
								<th class="text-center">Oct</th>
								<th class="text-center">Nov</th>
								<th class="text-center">Dec</th>
								<th class="text-center">Year</th>
								
							</tr>
						</thead>
						<tbody>';
			if(!empty($uploaded_data)){
								
				foreach($uploaded_data as $r){
					$table .= '<tr>';
					$table .= '<td>'.$r->bc_name.'</td>';
					$table .= '<td>'.$r->comp_price_segment.'</td>';
					$table .= '<td>'.$r->comp_price_product.'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_price_jan, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_price_feb, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_price_mar, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_price_apr, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_price_may, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_price_jun, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_price_jul, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_price_aug, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_price_sep, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_price_oct, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_price_nov, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->comp_price_dec, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.decode($year).'</td>';
					$table .= '</tr>';
				}

				
			}
			$table .= '</tbody>';
			$table .= '</table></div></div>';
			
			$data['table_view'] = $table;
		}

		if($table == 'comparative_variable_cost_tbl'){
			$data['table_title'] = 'Variable Cost';
			$table = 'comparative_variable_cost_tbl a';
			$join = array(
				'bc_tbl b' => 'a.bc_id = b.bc_id'
			);

			$where = array(
				'a.bc_id' => $id,
				'YEAR(a.trans_year)' => decode($year),
				'a.comp_variable_cost_status' => 1
			);
			$order_by = 'a.comp_variable_cost_id';
			$group_by = 'a.comp_variable_cost_id';
			
			$uploaded_data = $this->admin->get_join($table, $join, FALSE, $order_by, $group_by, '*', $where);

			$table = '
			<div class="col-lg-12">
				<div class="table-responsive">
					<table class="table table-hover table-stripe nowrap tbl-comparative">
						<thead>
							<tr>
								<th class="text-center">BC</th>
								<th class="text-center">Sales BOM Group</th>
								<th class="text-center">Component</th>
								<th class="text-center">Cost</th>
								<th class="text-center">Sales Unit</th>
								<th class="text-center">KG</th>
								<th class="text-center">Cost/KG</th>
								<th class="text-center">Cost/Unit</th>
								<th class="text-center">Year.</th>
							</tr>
						</thead>
						<tbody>';
			if(!empty($uploaded_data)){
								
				foreach($uploaded_data as $r){
					$table .= '<tr>';
					$table .= '<td>'.$r->bc_name.'</td>';
					$table .= '<td>'.$r->sales_group.'</td>';
					$table .= '<td>'.$r->component.'</td>';
					$table .= '<td class="text-right">'.number_format($r->cost, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->sales_unit, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->kg, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->cost_per_unit, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->cost_per_kg, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.decode($year).'</td>';
					$table .= '</tr>';
				}

				
			}
			$table .= '</tbody>';
			$table .= '</table></div></div>';
			
			$data['table_view'] = $table;
		}

		if($table == 'comparative_volume_tbl'){
			$data['table_title'] = 'Sales Volume';
			$table = 'comparative_volume_tbl a';
			$join = array(
				'bc_tbl b' => 'a.bc_id = b.bc_id'
			);

			$where = array(
				'a.bc_id' => $id,
				'YEAR(a.trans_year)' => decode($year),
				'a.sales_status' => 1
			);
			$order_by = 'a.comp_volume_id';
			$group_by = 'a.comp_volume_id';
			
			$uploaded_data = $this->admin->get_join($table, $join, FALSE, $order_by, $group_by, '*', $where);

			$table = '
			<div class="col-lg-12">
				<div class="table-responsive">
					<table class="table table-hover table-stripe nowrap tbl-comparative">
						<thead>
							<tr>
								<th class="text-center">BC</th>
								<th class="text-center">Sales Volume</th>
								<th class="text-center">Units</th>
								<th class="text-center">Heads</th>
								<th class="text-center">Year</th>
							</tr>
						</thead>
						<tbody>';
			if(!empty($uploaded_data)){
								
				foreach($uploaded_data as $r){
					$table .= '<tr>';
					$table .= '<td>'.$r->bc_name.'</td>';
					$table .= '<td>'.$r->sales_vol.'</td>';
					$table .= '<td class="text-right">'.number_format($r->sales_unit, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.number_format($r->sales_heads, 2, '.', ',').'</td>';
					$table .= '<td class="text-right">'.decode($year).'</td>';
					$table .= '</tr>';
				}

				
			}
			$table .= '</tbody>';
			$table .= '</table></div></div>';
			
			$data['table_view'] = $table;
		}

		if($table == 'depreciation_bc_tbl'){
			$data['table_title'] = 'Depreciation (BC)';
			$table = 'depreciation_bc_tbl a';
			$join = array(
				'bc_tbl b' => 'a.bc_id = b.bc_id',
				'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id',
				'gl_subgroup_tbl d' => 'a.gl_sub_id = d.gl_sub_id',
				'gl_group_tbl e' => 'd.gl_group_id = e.gl_group_id'
			);

			$where = array(
				'a.bc_id' => $id,
				'YEAR(a.depreciation_bc_date)' => decode($year),
				'a.depreciation_bc_status' => 1
			);
			$order_by = 'a.depreciation_bc_id';
			$group_by = 'a.depreciation_bc_id';
			
			$uploaded_data = $this->admin->get_join($table, $join, FALSE, $order_by, $group_by, '*, MONTH(a.depreciation_bc_date) as trans_month', $where);

			$table = '
			<div class="col-lg-12">
				<div class="table-responsive">
					<table class="table table-hover table-stripe nowrap tbl-comparative">
						<thead>
							<tr>
								<th class="text-center">BC</th>
								<th class="text-center">Cost Center</th>
								<th class="text-center">Cost Center Name</th>
								<th class="text-center">GL Code</th>
								<th class="text-center">GL Description</th>
								<th class="text-center">GL Group</th>
								<th class="text-center">Jan</th>
								<th class="text-center">Feb</th>
								<th class="text-center">Mar</th>
								<th class="text-center">Apr</th>
								<th class="text-center">May</th>
								<th class="text-center">Jun</th>
								<th class="text-center">Jul</th>
								<th class="text-center">Aug</th>
								<th class="text-center">Sep</th>
								<th class="text-center">Oct</th>
								<th class="text-center">Nov</th>
								<th class="text-center">Dec</th>
								<th class="text-center">Year</th>
							</tr>
						</thead>
						<tbody>';
			if(!empty($uploaded_data)){
								
				foreach($uploaded_data as $r){
					if($r->trans_month == 1){
						$table .= '<tr>';
						$table .= '<td>'.$r->bc_name.'</td>';
						$table .= '<td>'.$r->cost_center_code.'</td>';
						$table .= '<td>'.$r->cost_center_desc.'</td>';
						$table .= '<td>'.$r->gl_code.'</td>';
						$table .= '<td>'.$r->gl_sub_name.'</td>';
						$table .= '<td>'.$r->gl_group_name.'</td>';

					}
					$table .= '<td class="text-right">'.number_format($r->depreciation_bc_amount, 2, '.', ',').'</td>';


					if($r->trans_month == 12){
						$table .= '<td class="text-right">'.decode($year).'</td>';
						$table.= '</tr>';
					}
				}

				
			}
			$table .= '</tbody>';
			$table .= '</table></div></div>';
			
			$data['table_view'] = $table;
		}

		if($table == 'depreciation_unit_tbl'){
			$data['table_title'] = 'Depreciation (Unit)';
			$table = $designated_tbl->depreciation_unit_tbl.' a';
			$join = array(
				'company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id',
				'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id',
				'gl_subgroup_tbl d' => 'a.gl_sub_id = d.gl_sub_id',
				'gl_group_tbl e' => 'd.gl_group_id = e.gl_group_id'
			);

			$where = array(
				'a.company_unit_id' => $id,
				'YEAR(a.depreciation_unit_date)' => decode($year),
				'a.depreciation_unit_status' => 1
			);
			$order_by = 'a.depreciation_unit_id';
			$group_by = 'a.depreciation_unit_id';
			
			$uploaded_data = $this->admin->get_join($table, $join, FALSE, $order_by, $group_by, '*, MONTH(a.depreciation_unit_date) as trans_month', $where);

			$table = '
			<div class="col-lg-12">
				<div class="table-responsive">
					<table class="table table-hover table-stripe nowrap tbl-comparative">
						<thead>
							<tr>
								<th class="text-center">Unit Name</th>
								<th class="text-center">Cost Center</th>
								<th class="text-center">Cost Center Name</th>
								<th class="text-center">GL Code</th>
								<th class="text-center">GL Description</th>
								<th class="text-center">GL Group</th>
								<th class="text-center">Jan</th>
								<th class="text-center">Feb</th>
								<th class="text-center">Mar</th>
								<th class="text-center">Apr</th>
								<th class="text-center">May</th>
								<th class="text-center">Jun</th>
								<th class="text-center">Jul</th>
								<th class="text-center">Aug</th>
								<th class="text-center">Sep</th>
								<th class="text-center">Oct</th>
								<th class="text-center">Nov</th>
								<th class="text-center">Dec</th>
								<th class="text-center">Year</th>
							</tr>
						</thead>
						<tbody>';
			if(!empty($uploaded_data)){
								
				foreach($uploaded_data as $r){
					if($r->trans_month == 1){
						$table .= '<tr>';
						$table .= '<td>'.$r->company_unit_name.'</td>';
						$table .= '<td>'.$r->cost_center_code.'</td>';
						$table .= '<td>'.$r->cost_center_desc.'</td>';
						$table .= '<td>'.$r->gl_code.'</td>';
						$table .= '<td>'.$r->gl_sub_name.'</td>';
						$table .= '<td>'.$r->gl_group_name.'</td>';

					}
					$table .= '<td class="text-right">'.number_format($r->depreciation_unit_amount, 2, '.', ',').'</td>';


					if($r->trans_month == 12){
						$table .= '<td class="text-right">'.decode($year).'</td>';
						$table.= '</tr>';
					}
				}

				
			}
			$table .= '</tbody>';
			$table .= '</table></div></div>';
			
			$data['table_view'] = $table;
		}

		$view = 'admin/admin_view_upload_data_content';

		$data['content'] = $this->load->view($view, $data , TRUE);
		$this->load->view('admin/templates', $data);
		
	}


	// SALES COMMISSION

	public function sales_commission(){

		
		$info = $this->_require_login();
		
		$data['bc'] = $this->admin->get_data('bc_tbl', 'bc_status=1');
		$data['title'] = 'Sales Commission';
		$data['content'] = $this->load->view('admin/admin_sales_commission_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function sales_commission_maintenance($id){
		$info = $this->_require_login();
		$data['bc_id'] = $id;
		$bc_id = decode($id);
		

		$data['title'] = 'Sales Commission';
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		

		$join = array(
			'material_group_tbl b' => 'a.material_group_id = b.material_group_id and a.material_status = 1 and a.material_group_id <= 15'
		);
		$data['material'] = $this->admin->get_join('material_tbl a', $join, FALSE,'a.material_desc ASC','a.material_code');

		$join = array(
			'sales_commission_details_tbl b' => 'a.sales_commission_id = b.sales_commission_id and a.bc_id ='.$bc_id.' and a.sales_commission_status = 1 and b.sales_commission_det_status = 1',
			'user_tbl c' => 'a.user_id = c.user_id',
			'status_tbl d' => 'd.status_id = a.sales_commission_status and a.sales_commission_status != 5',
			'material_tbl f' => 'a.material_id = f.material_id',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id',
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id and h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'amount_type_tbl j' => 'a.amount_type_id = j.amount_type_id'
		);
		$data['sales_commission'] = $this->admin->get_join('sales_commission_tbl a', $join, FALSE,'a.sales_commission_year DESC, f.material_desc ASC', 'a.sales_commission_id', '*, a.sales_commission_added');

		$data['content'] = $this->load->view('admin/admin_sales_commission_maintenance_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function download_sales_commission_temp($bc_id=null){
		$info = $this->_require_login();
		$bc_id = decode($bc_id);
		$bc = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true);

		$join = array(
			'outlet_brand_tbl b' => 'a.outlet_id = b.outlet_id',
			'brand_tbl c' => 'b.brand_id = c.brand_id'
		);
		$outlets = $this->admin->get_join('outlet_tbl a', $join, false, 'c.brand_name, a.ifs_code', 'a.outlet_id', false, array('bc_id' => $bc_id, 'outlet_status_id' => 1));

		$join = array(
			'material_group_tbl b' => 'a.material_group_id = b.material_group_id'
		);
		$materials = $this->admin->get_join('material_tbl a', $join, false, 'b.material_group_name, a.material_code', 'a.material_id', false, array('material_status' => 1));
		
		
		
		$this->load->library('excel');
		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Sales Commission Temp')
				->setDescription('Sales Commission Temp');
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_left = array(
			
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		
		$spreadsheet->setActiveSheetIndex(0)
				->setTitle($bc->bc_name." Sales Commission")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(false);

		$reportTitle = $bc->bc_name.' Sales Commission Template';
		$reportTitle .= "\nRun Date : ".date_now();

		
		
		$table_head = array(
			'Outlet | Customer Code',
			'Material Code',
			'Amount type',
			'Jan',
			'Feb',
			'Mar',
			'Apr',
			'May',
			'Jun',
			'Jul',
			'Aug',
			'Sep',
			'Oct',
			'Nov',
			'Dec'
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle);

		$head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 2, $value);
			$head++;
		}

		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);
		$spreadsheet->getActiveSheet()->getStyle("A2:O2")->applyFromArray($style_hdr);

		foreach(range('A','O') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$spreadsheet->getActiveSheet()->getComment('C2')->getText()->createTextRun('Value: PERCENT or AMOUNT');

		//SHEET 2
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(1)
				->setTitle($bc->bc_name." Outlet | Customer")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Brand',
			'IFS Code',
			'Name',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($outlets as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->brand_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->ifs_code);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, $row->outlet_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(3 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:D1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','D') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}


		//SHEET 3
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(2)
				->setTitle("Material")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Material Group',
			'Material Code',
			'Material Name',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($materials as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->material_group_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->material_code);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, $row->material_desc);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(3 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:D1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','D') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}




		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="'.$bc->bc_name.' Sales Commission.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function upload_sales_commission(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$user_id = decode($info['user_id']);
			//$this->load->library('excel');
			$this->load->library('excel_v2');
			ini_set('max_execution_time', 0);
			ini_set('memory_limit','2048M');

			$path = 'assets/sales-commission/';
			if (!is_dir($path)) {
			    mkdir($path, 0777, TRUE);
			}


			$trans_year = clean_data($this->input->post('sales-commission-year'));
			$bc_id_posted = clean_data($this->input->post('bc-id'));
			$bc = $this->admin->get_data('bc_tbl', array('bc_id' => decode($bc_id_posted)), true);

			$config['upload_path'] = $path;
			$config['allowed_types'] = 'xlsx|xls';
			$config['remove_spaces'] = TRUE;
			$this->load->library('upload', $config);
			$this->upload->initialize($config);            
			if (!$this->upload->do_upload('sales-commission-file')) {
				$error = array('error' => $this->upload->display_errors());
			} else {
				$data = array('upload_data' => $this->upload->data());
			}

			if(empty($error)){
				if (!empty($data['upload_data']['file_name'])) {
					$import_xls_file = $data['upload_data']['file_name'];
				} else {
					$import_xls_file = 0;
				}

				$inputFileName = $path . $import_xls_file;
				try {
					$inputFileType = PHPExcel_IOFactory::identify($inputFileName);
					$objReader = PHPExcel_IOFactory::createReader($inputFileType);
					$objPHPExcel = $objReader->load($inputFileName);
					$allDataInSheet = $objPHPExcel->getActiveSheet()->toArray(null, true, false, true);
					$flag = true;
					$i=2; //dating 4
					
					$added = 0;
					
					
		        	$totalKgs = 0;
		        	$overAllTotal = 0;
		        	$msg = '';
		        	$this->db->trans_start();

		        	//echo '<pre>';
		        	//print_r($allDataInSheet);
		        	//echo '</pre>';
		        	//exit();
		        	foreach ($allDataInSheet as $value) {
	        			if($added < 2){ //dating 3
	        				if($added == 1){
				        		if(
					        		empty($value['A']) ||
									empty($value['B']) ||
									empty($value['C']) ||
									empty($value['D']) ||
									empty($value['E']) ||
									empty($value['F']) ||
									empty($value['G']) ||
									empty($value['H']) ||
									empty($value['I']) ||
									empty($value['J']) ||
									empty($value['K']) ||
									empty($value['L']) ||
									empty($value['M']) ||
									empty($value['N']) ||
									empty($value['O']) ||
									!empty($value['P'])
				        		){
				        			$msg = '<div class="alert alert-danger">Error, Invalid Template! Please download the latest one.</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/sales-commission-maintenance/'.$bc_id_posted);
				        		}
				        	}
		                  	goto end_salse_commission;
		                }

		                
			        	$ifs_code		= strtoupper(clean_data(trim(@$value['A'])));
			        	$material_code		= strtoupper(clean_data(trim(@$value['B'])));
			        	$amount_type_name		= strtoupper(clean_data(trim(@$value['C'])));

						$qty = array(
							'1' => clean_data(trim(@$value['D'])),
							'2' => clean_data(trim(@$value['E'])),
							'3' => clean_data(trim(@$value['F'])),
							'4' => clean_data(trim(@$value['G'])),
							'5' => clean_data(trim(@$value['H'])),
							'6' => clean_data(trim(@$value['I'])),
							'7' => clean_data(trim(@$value['J'])),
							'8' => clean_data(trim(@$value['K'])),
							'9' => clean_data(trim(@$value['L'])),
							'10' => clean_data(trim(@$value['M'])),
							'11' => clean_data(trim(@$value['N'])),
							'12' => clean_data(trim(@$value['O']))
						);
						


			        	$i++;

			        	$check_outlet = $this->admin->check_data('outlet_tbl', array('ifs_code' => $ifs_code, 'bc_id' => decode($bc_id_posted)), TRUE, 'outlet_id');
			        	if($check_outlet['result'] == TRUE){
							$outlet_id = $check_outlet['info']->outlet_id;
						}else{
							$outlet_id = '';
							$msg .= '<div class="alert alert-danger">Outlet | Customer Code ('.$ifs_code.') does not exist in '.$bc->bc_name.'! Line number '.$i.'.</div>';
							goto end_salse_commission;
						}

						

						$check_material = $this->admin->check_data('material_tbl', array('material_code' => $material_code), TRUE, 'material_id');
			        	if($check_material['result'] == TRUE){
							$material_id = $check_material['info']->material_id;
						}else{
							$material_id = '';
							
							$msg .= '<div class="alert alert-danger">Material Code ('.$material_code.') does not exist! Line number '.$i.'.</div>';
							goto end_salse_commission;
							
						}

						$check_amount_type = $this->admin->check_data('amount_type_tbl', array('amount_type_name' => $amount_type_name), TRUE, 'amount_type_id');
			        	if($check_amount_type['result'] == TRUE){
							$amount_type_id = $check_amount_type['info']->amount_type_id;
						}else{
							$amount_type_id = '';
							
							$msg .= '<div class="alert alert-danger">Amount Type ('.$amount_type_name.') does not exist! Line number '.$i.'.</div>';
							goto end_salse_commission;
							
						}


						
						$where = array(
							'bc_id' => decode($bc_id_posted),
							'material_id' => $material_id,
							'outlet_id' => $outlet_id,
							'sales_commission_year' => $trans_year
						);

						$get_sales_commission =  $this->admin->get_data('sales_commission_tbl', $where, false, 'sales_commission_id');
						if(!empty($get_sales_commission)){
							foreach($get_sales_commission as $r){
								$where = array('sales_commission_id' => $r->sales_commission_id);
								$set = array(
									'sales_commission_status' 	=> 2 //INACTIVE
								);
								$result =  $this->admin->update_data('sales_commission_tbl', $set, $where);
		
								$set = array(
									'sales_commission_det_status' 	=> 2 //INACTIVE
								);
								$result_dtl =  $this->admin->update_data('sales_commission_details_tbl', $set, $where);
							}
						}


			        	if(!empty($bc_id_posted)){
							$set = array(
								'outlet_id' => $outlet_id,
								'material_id' => $material_id,
								'amount_type_id' => $amount_type_id,
								'bc_id' 		=> decode($bc_id_posted),
								'user_id'	=> $user_id,
								'sales_commission_year'	=> $trans_year,
								'sales_commission_added'	=> date_now(),
								'sales_commission_status' => 1
								
							);
							$result =  $this->admin->insert_data('sales_commission_tbl', $set, TRUE);
							for($month = 1; $month <= 12; $month++){	
								$set = array(
									'sales_commission_id' => $result['id'],
									'sales_commission_det_date'	=> $trans_year.'-'.$month.'-01',
									'sales_commission_det_value' => $qty[$month],
									'sales_commission_det_added'	=> date_now(),
									'sales_commission_det_status' => 1
								);
								$result_dtl =  $this->admin->insert_data('sales_commission_details_tbl', $set, TRUE);
							}
						}
		                
						end_salse_commission:
		                $added++;
		            }
		            if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg .= '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/sales-commission-maintenance/'.$bc_id_posted);
					}else{
						$this->db->trans_commit();
						$msg .= '<div class="alert alert-success">Data uploaded successfully!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/sales-commission-maintenance/'.$bc_id_posted);
					}

		        } catch (Exception $e) {
					die('Error loading file "' . pathinfo($inputFileName, PATHINFO_BASENAME)
		                  . '": ' .$e->getMessage());

				}
					
			} else {
				$msg = '<div class="alert alert-danger">'.$this->upload->display_errors().'</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/sales-commission-maintenance/'.$bc_id_posted);
			}
		} else {
			$msg = '<div class="alert alert-danger">Please contact system administrator!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/sales-commission-maintenance/'.$bc_id_posted);
		}

		
	}

	public function edit_sales_commission($id, $bc_id){
		$info = $this->_require_login();
		$data['sales_commission_id'] = $id;
		$data['bc_id'] = $bc_id;
		$bc_id = decode($bc_id);
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$sales_commission_id = decode($id);
		$data['title'] = 'Edit Sales Commission Maintenance';

		$join = array(
			'sales_commission_details_tbl b' => 'a.sales_commission_id = b.sales_commission_id and a.sales_commission_id ='.$sales_commission_id.' and a.sales_commission_status = 1 and b.sales_commission_det_status = 1',
			'user_tbl c' => 'a.user_id = c.user_id',
			'status_tbl d' => 'd.status_id = a.sales_commission_status and a.sales_commission_status != 5',
			'material_tbl f' => 'a.material_id = f.material_id',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id',
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'amount_type_tbl j' => 'a.amount_type_id = j.amount_type_id'
		);
		$data['sales_commission'] = $this->admin->get_join('sales_commission_tbl a', $join, FALSE,'b.sales_commission_det_Date', 'b.sales_commission_det_id', '*, a.sales_commission_added');

		$data['content'] = $this->load->view('admin/admin_edit_sales_commission_maintenance_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function update_sales_commission(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			
			$bc_id = decode($this->input->post('bc_id'));
			$sales_commission_year = decode($this->input->post('sales_commission_year'));
			$sales_commission_id = decode($this->input->post('sales_commission_id'));
			$sales_commission_det_value = clean_data($this->input->post('sales_commission_det_value'));
			
			
			
			if(!empty($bc_id) && !empty($sales_commission_id) && !empty($sales_commission_det_value)){
				$count = 0;
				$this->db->trans_start();
				$where = array('sales_commission_id' => $sales_commission_id);
				
				$set = array(
					'sales_commission_det_status' 	=> 2 //INACTIVE
				);
				$result_dtl =  $this->admin->update_data('sales_commission_details_tbl', $set, $where);
				$month = 1;
				foreach ($sales_commission_det_value as $r) {

					if($count < 12){
						$set = array(
							'sales_commission_id' => $sales_commission_id,
							'sales_commission_det_date'	=> $sales_commission_year.'-'.$month.'-01',
							'sales_commission_det_value' => $r,
							'sales_commission_det_added'	=> date_now(),
							'sales_commission_det_status' => 1
						);
						$result_dtl =  $this->admin->insert_data('sales_commission_details_tbl', $set, TRUE);
					}
					
					$month++;
					$count++;
				}

			} else {
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/sales-commission-maintenance/' . encode($bc_id));
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success"><strong>Data successfully updated.</strong></div>';
			}
			$this->session->set_flashdata('message', $msg);
			redirect('admin/sales-commission-maintenance/' . encode($bc_id));
		} else{
			echo 'Something wrong';
		}
	}

	public function cancel_sales_commission (){
		/* echo "<pre>";
		print_r($_POST);
		echo "</pre>";
		exit(); */
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		$sales_commission_id = clean_data(decode($this->input->post('sales_commission_id')));
		$bc_id = clean_data($this->input->post('bc_id'));
		$status = 2; //inactive
		
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			if(!empty($sales_commission_id) && !empty($bc_id)){
				$this->db->trans_start();
				$where = array(
					'sales_commission_id' => $sales_commission_id,
				);
				$update_data = array(
					'sales_commission_status' => $status
				);
				$this->admin->update_data('sales_commission_tbl', $update_data, $where);

				$update_data = array(
					'sales_commission_det_status' => $status
				);
				$this->admin->update_data('sales_commission_details_tbl', $update_data, $where);

				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success"><strong>data successfully removed.</strong></div>';
				}
				$this->session->set_flashdata('message', $msg);
				redirect('admin/sales-commission-maintenance/' . $bc_id);
			}
		}
		
		
	}



	// PERCENT REN[T

	public function percent_rent(){

		
		$info = $this->_require_login();
		
		$data['bc'] = $this->admin->get_data('bc_tbl', 'bc_status=1');
		$data['title'] = 'Percentage Rent';
		$data['content'] = $this->load->view('admin/admin_percent_rent_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function percent_rent_maintenance($id){
		$info = $this->_require_login();
		$data['bc_id'] = $id;
		$bc_id = decode($id);
		

		$data['title'] = 'Percentage Rent';
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		

		$join = array(
			'material_group_tbl b' => 'a.material_group_id = b.material_group_id and a.material_status = 1 and a.material_group_id <= 15'
		);
		$data['material'] = $this->admin->get_join('material_tbl a', $join, FALSE,'a.material_desc ASC','a.material_code');

		$join = array(
			'percent_rent_details_tbl b' => 'a.percent_rent_id = b.percent_rent_id and a.bc_id ='.$bc_id.' and a.percent_rent_status = 1 and b.percent_rent_det_status = 1',
			'user_tbl c' => 'a.user_id = c.user_id',
			'status_tbl d' => 'd.status_id = a.percent_rent_status and a.percent_rent_status != 5',
			'material_tbl f' => 'a.material_id = f.material_id',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id',
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'amount_type_tbl j' => 'a.amount_type_id = j.amount_type_id'
		);
		$data['percent_rent'] = $this->admin->get_join('percent_rent_tbl a', $join, FALSE,'a.percent_rent_year DESC, f.material_desc ASC', 'a.percent_rent_id', '*, a.percent_rent_added');

		$data['content'] = $this->load->view('admin/admin_percent_rent_maintenance_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function download_percent_rent_temp($bc_id=null){
		$info = $this->_require_login();
		$bc_id = decode($bc_id);
		$bc = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true);

		$join = array(
			'outlet_brand_tbl b' => 'a.outlet_id = b.outlet_id',
			'brand_tbl c' => 'b.brand_id = c.brand_id'
		);
		$outlets = $this->admin->get_join('outlet_tbl a', $join, false, 'c.brand_name, a.ifs_code', 'a.outlet_id', false, array('bc_id' => $bc_id, 'outlet_status_id' => 1));

		$join = array(
			'material_group_tbl b' => 'a.material_group_id = b.material_group_id'
		);
		$materials = $this->admin->get_join('material_tbl a', $join, false, 'b.material_group_name, a.material_code', 'a.material_id', false, array('material_status' => 1));
		
		
		
		$this->load->library('excel');
		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setSubject('Percentage Rent Temp')
				->setDescription('Percentage Rent Temp');
		
		$style_hdr = array(
				'font' 	=> array(
						'bold' => true,
						'color' => array('rgb' => 'ffffff')
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'allborders' => array(
							'style' => PHPExcel_Style_Border::BORDER_THIN,
							'color' => array('rgb' => 'ffffff')
						)
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => '0066cc'
				    	)
				),
		);

		$style_highlight_row = array(

				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_SOLID,
						'startcolor' => array(
							'rgb' => 'cce6ff'
				    	)
				),
		);

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_left = array(
			
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_bold = array(
			'font' => array(
				'bold' => true
			),
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_border_normal = array(
			
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_data_right = array(
			'font' => array(
				'bold' => false
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		
		$spreadsheet->setActiveSheetIndex(0)
				->setTitle($bc->bc_name." Percentage Rent")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(false);

		$reportTitle = $bc->bc_name.' Percentage Rent Template';
		$reportTitle .= "\nRun Date : ".date_now();

		
		
		$table_head = array(
			'Outlet | Customer Code',
			'Material Code',
			'Amount type',
			'Jan',
			'Feb',
			'Mar',
			'Apr',
			'May',
			'Jun',
			'Jul',
			'Aug',
			'Sep',
			'Oct',
			'Nov',
			'Dec'
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue('A1', $reportTitle);

		$head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 2, $value);
			$head++;
		}

		$spreadsheet->getActiveSheet()->getStyle('A1')->getAlignment()->setWrapText(true);
		$spreadsheet->getActiveSheet()->getStyle("A2:O2")->applyFromArray($style_hdr);

		foreach(range('A','O') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$spreadsheet->getActiveSheet()->getComment('C2')->getText()->createTextRun('Value: PERCENT or AMOUNT');

		//SHEET 2
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(1)
				->setTitle($bc->bc_name." Outlet | Customer")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Brand',
			'IFS Code',
			'Name',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($outlets as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->brand_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->ifs_code);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, $row->outlet_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(3 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:D1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','D') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}


		//SHEET 3
		$spreadsheet->createSheet();
		$spreadsheet->setActiveSheetIndex(2)
				->setTitle("Material")
				->getProtection()
				->setPassword('qwertyxxxx')
				->setSheet(true);

		$table_head = array(
			'Material Group',
			'Material Code',
			'Material Name',
			'Status'
        );
        $head = 0;
		foreach($table_head as $value)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($head, 1, $value);
			$head++;
		}

		$body = 2;//Add some data, row #
		
		foreach($materials as $row)
		{
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(0 ,$body, $row->material_group_name);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(1 ,$body, $row->material_code);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(2 ,$body, $row->material_desc);
			$spreadsheet->getActiveSheet()->setCellValueByColumnAndRow(3 ,$body, 'ACTIVE');

			$body++;
		}
		$cell_hdr = "A1:D1";
		$spreadsheet->getActiveSheet()->getStyle($cell_hdr)->applyFromArray($style_hdr);
		foreach(range('A','D') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}




		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="'.$bc->bc_name.' Percentage Rent.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function upload_percent_rent(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){

			$user_id = decode($info['user_id']);
			//$this->load->library('excel');
			$this->load->library('excel_v2');
			ini_set('max_execution_time', 0);
			ini_set('memory_limit','2048M');

			$path = 'assets/percent-rent/';
			if (!is_dir($path)) {
			    mkdir($path, 0777, TRUE);
			}


			$trans_year = clean_data($this->input->post('percent-rent-year'));
			$bc_id_posted = clean_data($this->input->post('bc-id'));
			$bc = $this->admin->get_data('bc_tbl', array('bc_id' => decode($bc_id_posted)), true);

			$config['upload_path'] = $path;
			$config['allowed_types'] = 'xlsx|xls';
			$config['remove_spaces'] = TRUE;
			$this->load->library('upload', $config);
			$this->upload->initialize($config);            
			if (!$this->upload->do_upload('percent-rent-file')) {
				$error = array('error' => $this->upload->display_errors());
			} else {
				$data = array('upload_data' => $this->upload->data());
			}

			if(empty($error)){
				if (!empty($data['upload_data']['file_name'])) {
					$import_xls_file = $data['upload_data']['file_name'];
				} else {
					$import_xls_file = 0;
				}

				$inputFileName = $path . $import_xls_file;
				try {
					$inputFileType = PHPExcel_IOFactory::identify($inputFileName);
					$objReader = PHPExcel_IOFactory::createReader($inputFileType);
					$objPHPExcel = $objReader->load($inputFileName);
					$allDataInSheet = $objPHPExcel->getActiveSheet()->toArray(null, true, false, true);
					$flag = true;
					$i=2; //dating 4
					
					$added = 0;
					
					
		        	$totalKgs = 0;
		        	$overAllTotal = 0;
		        	$msg = '';
		        	$this->db->trans_start();

		        	//echo '<pre>';
		        	//print_r($allDataInSheet);
		        	//echo '</pre>';
		        	//exit();
		        	foreach ($allDataInSheet as $value) {
	        			if($added < 2){ //dating 3
	        				if($added == 1){
				        		if(
					        		empty($value['A']) ||
									empty($value['B']) ||
									empty($value['C']) ||
									empty($value['D']) ||
									empty($value['E']) ||
									empty($value['F']) ||
									empty($value['G']) ||
									empty($value['H']) ||
									empty($value['I']) ||
									empty($value['J']) ||
									empty($value['K']) ||
									empty($value['L']) ||
									empty($value['M']) ||
									empty($value['N']) ||
									empty($value['O']) ||
									!empty($value['P'])
				        		){
				        			$msg = '<div class="alert alert-danger">Error, Invalid Template! Please download the latest one.</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/percent-rent-maintenance/'.$bc_id_posted);
				        		}
				        	}
		                  	goto end_salse_commission;
		                }

		                
			        	$ifs_code		= strtoupper(clean_data(trim(@$value['A'])));
			        	$material_code		= strtoupper(clean_data(trim(@$value['B'])));
			        	$amount_type_name		= strtoupper(clean_data(trim(@$value['C'])));

						$qty = array(
							'1' => clean_data(trim(@$value['D'])),
							'2' => clean_data(trim(@$value['E'])),
							'3' => clean_data(trim(@$value['F'])),
							'4' => clean_data(trim(@$value['G'])),
							'5' => clean_data(trim(@$value['H'])),
							'6' => clean_data(trim(@$value['I'])),
							'7' => clean_data(trim(@$value['J'])),
							'8' => clean_data(trim(@$value['K'])),
							'9' => clean_data(trim(@$value['L'])),
							'10' => clean_data(trim(@$value['M'])),
							'11' => clean_data(trim(@$value['N'])),
							'12' => clean_data(trim(@$value['O']))
						);
						


			        	$i++;

			        	$check_outlet = $this->admin->check_data('outlet_tbl', array('ifs_code' => $ifs_code, 'bc_id' => decode($bc_id_posted)), TRUE, 'outlet_id');
			        	if($check_outlet['result'] == TRUE){
							$outlet_id = $check_outlet['info']->outlet_id;
						}else{
							$outlet_id = '';
							$msg .= '<div class="alert alert-danger">Outlet | Customer Code ('.$ifs_code.') does not exist in '.$bc->bc_name.'! Line number '.$i.'.</div>';
							goto end_salse_commission;
						}

						

						$check_material = $this->admin->check_data('material_tbl', array('material_code' => $material_code), TRUE, 'material_id');
			        	if($check_material['result'] == TRUE){
							$material_id = $check_material['info']->material_id;
						}else{
							$material_id = '';
							
							$msg .= '<div class="alert alert-danger">Material Code ('.$material_code.') does not exist! Line number '.$i.'.</div>';
							goto end_salse_commission;
							
						}

						$check_amount_type = $this->admin->check_data('amount_type_tbl', array('amount_type_name' => $amount_type_name), TRUE, 'amount_type_id');
			        	if($check_amount_type['result'] == TRUE){
							$amount_type_id = $check_amount_type['info']->amount_type_id;
						}else{
							$amount_type_id = '';
							
							$msg .= '<div class="alert alert-danger">Amount Type ('.$amount_type_name.') does not exist! Line number '.$i.'.</div>';
							goto end_salse_commission;
							
						}


						
						$where = array(
							'bc_id' => decode($bc_id_posted),
							'material_id' => $material_id,
							'outlet_id' => $outlet_id,
							'percent_rent_year' => $trans_year
						);

						$get_percent_rent =  $this->admin->get_data('percent_rent_tbl', $where, false, 'percent_rent_id');
						if(!empty($get_percent_rent)){
							foreach($get_percent_rent as $r){
								$where = array('percent_rent_id' => $r->percent_rent_id);
								$set = array(
									'percent_rent_status' 	=> 2 //INACTIVE
								);
								$result =  $this->admin->update_data('percent_rent_tbl', $set, $where);
		
								$set = array(
									'percent_rent_det_status' 	=> 2 //INACTIVE
								);
								$result_dtl =  $this->admin->update_data('percent_rent_details_tbl', $set, $where);
							}
						}


			        	if(!empty($bc_id_posted)){
							$set = array(
								'outlet_id' => $outlet_id,
								'material_id' => $material_id,
								'amount_type_id' => $amount_type_id,
								'bc_id' 		=> decode($bc_id_posted),
								'user_id'	=> $user_id,
								'percent_rent_year'	=> $trans_year,
								'percent_rent_added'	=> date_now(),
								'percent_rent_status' => 1
								
							);
							$result =  $this->admin->insert_data('percent_rent_tbl', $set, TRUE);
							for($month = 1; $month <= 12; $month++){	
								$set = array(
									'percent_rent_id' => $result['id'],
									'percent_rent_det_date'	=> $trans_year.'-'.$month.'-01',
									'percent_rent_det_value' => $qty[$month],
									'percent_rent_det_added'	=> date_now(),
									'percent_rent_det_status' => 1
								);
								$result_dtl =  $this->admin->insert_data('percent_rent_details_tbl', $set, TRUE);
							}
						}
		                
						end_salse_commission:
		                $added++;
		            }
		            if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg .= '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/percent-rent-maintenance/'.$bc_id_posted);
					}else{
						$this->db->trans_commit();
						$msg .= '<div class="alert alert-success">Data uploaded successfully!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('admin/percent-rent-maintenance/'.$bc_id_posted);
					}

		        } catch (Exception $e) {
					die('Error loading file "' . pathinfo($inputFileName, PATHINFO_BASENAME)
		                  . '": ' .$e->getMessage());

				}
					
			} else {
				$msg = '<div class="alert alert-danger">'.$this->upload->display_errors().'</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/percent-rent-maintenance/'.$bc_id_posted);
			}
		} else {
			$msg = '<div class="alert alert-danger">Please contact system administrator!</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('admin/percent-rent-maintenance/'.$bc_id_posted);
		}

		
	}

	public function edit_percent_rent($id, $bc_id){
		$info = $this->_require_login();
		$data['percent_rent_id'] = $id;
		$data['bc_id'] = $bc_id;
		$bc_id = decode($bc_id);
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$percent_rent_id = decode($id);
		$data['title'] = 'Edit Percentage Rent Maintenance';

		$join = array(
			'percent_rent_details_tbl b' => 'a.percent_rent_id = b.percent_rent_id and a.percent_rent_id ='.$percent_rent_id.' and a.percent_rent_status = 1 and b.percent_rent_det_status = 1',
			'user_tbl c' => 'a.user_id = c.user_id',
			'status_tbl d' => 'd.status_id = a.percent_rent_status and a.percent_rent_status != 5',
			'material_tbl f' => 'a.material_id = f.material_id',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id',
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'amount_type_tbl j' => 'a.amount_type_id = j.amount_type_id'
		);
		$data['percent_rent'] = $this->admin->get_join('percent_rent_tbl a', $join, FALSE,'b.percent_rent_det_Date', 'b.percent_rent_det_id', '*, a.percent_rent_added');

		$data['content'] = $this->load->view('admin/admin_edit_percent_rent_maintenance_content', $data , TRUE);
		$this->load->view('admin/templates', $data);
	}

	public function update_percent_rent(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			
			$bc_id = decode($this->input->post('bc_id'));
			$percent_rent_year = decode($this->input->post('percent_rent_year'));
			$percent_rent_id = decode($this->input->post('percent_rent_id'));
			$percent_rent_det_value = clean_data($this->input->post('percent_rent_det_value'));
			
			
			
			if(!empty($bc_id) && !empty($percent_rent_id) && !empty($percent_rent_det_value)){
				$count = 0;
				$this->db->trans_start();
				$where = array('percent_rent_id' => $percent_rent_id);
				
				$set = array(
					'percent_rent_det_status' 	=> 2 //INACTIVE
				);
				$result_dtl =  $this->admin->update_data('percent_rent_details_tbl', $set, $where);
				$month = 1;
				foreach ($percent_rent_det_value as $r) {

					if($count < 12){
						$set = array(
							'percent_rent_id' => $percent_rent_id,
							'percent_rent_det_date'	=> $percent_rent_year.'-'.$month.'-01',
							'percent_rent_det_value' => $r,
							'percent_rent_det_added'	=> date_now(),
							'percent_rent_det_status' => 1
						);
						$result_dtl =  $this->admin->insert_data('percent_rent_details_tbl', $set, TRUE);
					}
					
					$month++;
					$count++;
				}

			} else {
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('admin/percent-rent-maintenance/' . encode($bc_id));
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success"><strong>Data successfully updated.</strong></div>';
			}
			$this->session->set_flashdata('message', $msg);
			redirect('admin/percent-rent-maintenance/' . encode($bc_id));
		} else{
			echo 'Something wrong';
		}
	}

	public function cancel_percent_rent (){
		/* echo "<pre>";
		print_r($_POST);
		echo "</pre>";
		exit(); */
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		$percent_rent_id = clean_data(decode($this->input->post('percent_rent_id')));
		$bc_id = clean_data($this->input->post('bc_id'));
		$status = 2; //inactive
		
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			if(!empty($percent_rent_id) && !empty($bc_id)){
				$this->db->trans_start();
				$where = array(
					'percent_rent_id' => $percent_rent_id,
				);
				$update_data = array(
					'percent_rent_status' => $status
				);
				$this->admin->update_data('percent_rent_tbl', $update_data, $where);

				$update_data = array(
					'percent_rent_det_status' => $status
				);
				$this->admin->update_data('percent_rent_details_tbl', $update_data, $where);

				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success"><strong>data successfully removed.</strong></div>';
				}
				$this->session->set_flashdata('message', $msg);
				redirect('admin/percent-rent-maintenance/' . $bc_id);
			}
		}
		
		
	}

	/* codes to update end here*/

}
