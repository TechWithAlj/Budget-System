<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Business_center extends CI_Controller {

	public function __construct() {
    	parent::__construct();
    	$this->load->model('admin_model', 'admin');
	}

	public function _require_login(){
		
		$login = $this->session->userdata('bavi_purchasing');

		if(isset($login)){
			$user_type = decode($login['user_type_id']);
			if(decode($login['user_reset']) != 1){
				if($user_type == "1"){
					redirect('admin');
				}elseif($user_type == "2"){
					return $login;
				}elseif($user_type == "3"){
					redirect('unit');
				}elseif($user_type == "4"){
					redirect('admin/broiler-cost');
				}elseif($user_type == "5"){
					redirect('admin/production-cost');
				}else{
					$this->session->unset_userdata('bavi_purchasing');
					$this->session->sess_destroy();
					redirect();
				}
			}else{
				$this->session->unset_userdata('bavi_purchasing');
				$this->session->sess_destroy();
				redirect('login/change-password/' . $login['user_id']);
			}
		}else{
			$this->session->unset_userdata('bavi_purchasing');
			$this->session->sess_destroy();
			redirect();
		}
	}

	public function get_user_info(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$join_cost = array(
			'user_bc_tbl b' => 'a.user_id = b.user_id AND a.user_status_id = 1 AND b.user_bc_status = 1 AND a.user_id = ' . $user_id,
			'bc_tbl c' => 'b.bc_id = c.bc_id',
			'cost_center_tbl d' => 'c.cost_center_code = d.cost_center_code AND d.cost_center_status = 1'
		);

		$check_cost = $this->admin->get_join('user_tbl a', $join_cost, TRUE, FALSE, FALSE, '*, c.bc_id as bc');
		$data['cost_center_id'] = $check_cost->cost_center_id;
		$data['cost_center_code'] = $check_cost->cost_center_code;
		$data['bc_id'] = $check_cost->bc;
		$data['cost_center_desc'] = $check_cost->cost_center_desc;

		return $data;
	}

	public function _active_year(){
		$get_budget = $this->admin->check_data('budget_active_tbl', array('budget_active_status' => 1), TRUE);
		$budget_year = $get_budget['info']->budget_active_year;
		return $budget_year;
	}

	public function logout(){
		$this->session->unset_userdata('bavi_purchasing');
		$this->session->sess_destroy();
		redirect();
	}

	public function add_price_adjustment(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$year = $this->_active_year();

		$user_info = $this->get_user_info();
 		$bc_id = $user_info['bc_id'];

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = clean_data($this->input->post('id'));
			$price = clean_data($this->input->post('price'));
			if(!empty($id)){
				$count = 0;
				foreach($id as $mat_name){
					echo $mat = $mat_name;
					$check_data = $this->admin->check_data('size_tbl', array('size_name' => $mat), TRUE);
					if($check_data['result'] == TRUE){
						echo 'aaa';
						$size_id = $check_data['info']->size_id;
						$get_material_size  = $this->admin->get_data('material_size_tbl', array('size_id' => $size_id, 'is_orc' => 1, 'material_size_status' => 1));

						foreach($get_material_size as $row_mat){
							$material_id = $row_mat->material_id;
							$check_adjustment = $this->admin->check_data('price_adjustment_tbl', array('bc_id' => $bc_id, 'material_id' => 1, 'price_adjustment_status' => 1));
							if($check_adjustment == FALSE){
								$jan_price = $price['jan'][$count];
								$feb_price = $price['feb'][$count];
								$mar_price = $price['mar'][$count];
								$apr_price = $price['apr'][$count];
								$may_price = $price['may'][$count];
								$jun_price = $price['jun'][$count];
								$jul_price = $price['jul'][$count];
								$aug_price = $price['aug'][$count];
								$sep_price = $price['sep'][$count];
								$oct_price = $price['oct'][$count];
								$nov_price = $price['nov'][$count];
								$dec_price = $price['dec'][$count];
								$total_price = $jan_price + $feb_price + $mar_price + $apr_price + $may_price + $jun_price + $jul_price + $aug_price + $sep_price + $oct_price + $nov_price + $dec_price;
								if($total_price > 0){
									$set_price = array(
										'bc_id' => $bc_id,
										'material_id' => $material_id,
										'price_adjustment_added' => date_now(),
										'price_adjustment_status' => 1
									);

									$insert_price = $this->admin->insert_data('price_adjustment_tbl', $set_price, TRUE);
									$price_adjustment_id = $insert_price['id'];

									$date = $year . '-01-01';
									$set_price_det = array(
										'price_adjustment_id' => $price_adjustment_id,
										'price_adjustment_det_value' => $jan_price,
										'price_adjustment_det_date' => $date,
										'price_adjustment_det_status' => 1
									);

									$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

									$date = $year . '-02-01';
									$set_price_det = array(
										'price_adjustment_id' => $price_adjustment_id,
										'price_adjustment_det_value' => $feb_price,
										'price_adjustment_det_date' => $date,
										'price_adjustment_det_status' => 1
									);

									$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

									$date = $year . '-03-01';
									$set_price_det = array(
										'price_adjustment_id' => $price_adjustment_id,
										'price_adjustment_det_value' => $mar_price,
										'price_adjustment_det_date' => $date,
										'price_adjustment_det_status' => 1
									);
									$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

									$date = $year . '-04-01';
									$set_price_det = array(
										'price_adjustment_id' => $price_adjustment_id,
										'price_adjustment_det_value' => $apr_price,
										'price_adjustment_det_date' => $date,
										'price_adjustment_det_status' => 1
									);
									$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

									$date = $year . '-05-01';
									$set_price_det = array(
										'price_adjustment_id' => $price_adjustment_id,
										'price_adjustment_det_value' => $may_price,
										'price_adjustment_det_date' => $date,
										'price_adjustment_det_status' => 1
									);
									$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

									$date = $year . '-06-01';
									$set_price_det = array(
										'price_adjustment_id' => $price_adjustment_id,
										'price_adjustment_det_value' => $jun_price,
										'price_adjustment_det_date' => $date,
										'price_adjustment_det_status' => 1
									);
									$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

									$date = $year . '-07-01';
									$set_price_det = array(
										'price_adjustment_id' => $price_adjustment_id,
										'price_adjustment_det_value' => $jul_price,
										'price_adjustment_det_date' => $date,
										'price_adjustment_det_status' => 1
									);
									$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

									$date = $year . '-08-01';
									$set_price_det = array(
										'price_adjustment_id' => $price_adjustment_id,
										'price_adjustment_det_value' => $aug_price,
										'price_adjustment_det_date' => $date,
										'price_adjustment_det_status' => 1
									);
									$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

									$date = $year . '-09-01';
									$set_price_det = array(
										'price_adjustment_id' => $price_adjustment_id,
										'price_adjustment_det_value' => $sep_price,
										'price_adjustment_det_date' => $date,
										'price_adjustment_det_status' => 1
									);
									$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

									$date = $year . '-10-01';
									$set_price_det = array(
										'price_adjustment_id' => $price_adjustment_id,
										'price_adjustment_det_value' => $oct_price,
										'price_adjustment_det_date' => $date,
										'price_adjustment_det_status' => 1
									);
									$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

									$date = $year . '-11-01';
									$set_price_det = array(
										'price_adjustment_id' => $price_adjustment_id,
										'price_adjustment_det_value' => $nov_price,
										'price_adjustment_det_date' => $date,
										'price_adjustment_det_status' => 1
									);
									$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

									$date = $year . '-12-01';
									$set_price_det = array(
										'price_adjustment_id' => $price_adjustment_id,
										'price_adjustment_det_value' => $dec_price,
										'price_adjustment_det_date' => $date,
										'price_adjustment_det_status' => 1
									);
									$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);
								}
							}
						}
					}else{

						if($mat == 'DRESSED'){
							$join_material = array(
								'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
								'material_tbl c' => 'b.material_id = c.material_id',
								'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
								'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
								'brand_tbl f' => 'e.brand_id = f.brand_id',
								'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc_id,
								'material_group_tbl h' => 'c.material_group_id = h.material_group_id AND h.material_group_name = "DRESSED"'
							);

							$get_material_dressed = $this->admin->get_join('sales_tbl a', $join_material, FALSE, FALSE, 'c.material_id');

							foreach($get_material_dressed as $row_mat){
								$material_id = $row_mat->material_id;

								$check_adjustment = $this->admin->check_data('price_adjustment_tbl', array('bc_id' => $bc_id, 'material_id' => 1, 'price_adjustment_status' => 1));
								if($check_adjustment == FALSE){
									$jan_price = $price['jan'][$count];
									$feb_price = $price['feb'][$count];
									$mar_price = $price['mar'][$count];
									$apr_price = $price['apr'][$count];
									$may_price = $price['may'][$count];
									$jun_price = $price['jun'][$count];
									$jul_price = $price['jul'][$count];
									$aug_price = $price['aug'][$count];
									$sep_price = $price['sep'][$count];
									$oct_price = $price['oct'][$count];
									$nov_price = $price['nov'][$count];
									$dec_price = $price['dec'][$count];
									$total_price = $jan_price + $feb_price + $mar_price + $apr_price + $may_price + $jun_price + $jul_price + $aug_price + $sep_price + $oct_price + $nov_price + $dec_price;
									if($total_price > 0){
										$set_price = array(
											'bc_id' => $bc_id,
											'material_id' => $material_id,
											'price_adjustment_added' => date_now(),
											'price_adjustment_status' => 1
										);

										$insert_price = $this->admin->insert_data('price_adjustment_tbl', $set_price, TRUE);
										$price_adjustment_id = $insert_price['id'];

										$date = $year . '-01-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $jan_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);

										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-02-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $feb_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);

										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-03-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $mar_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-04-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $apr_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-05-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $may_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-06-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $jun_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-07-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $jul_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-08-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $aug_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-09-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $sep_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-10-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $oct_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-11-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $nov_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-12-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $dec_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);
									}
								}
							}
						}elseif($mat == 'LIEMPO'){
							$join_material = array(
								'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
								'material_tbl c' => 'b.material_id = c.material_id',
								'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
								'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
								'brand_tbl f' => 'e.brand_id = f.brand_id',
								'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc_id,
								'material_group_tbl h' => 'c.material_group_id = h.material_group_id AND h.material_group_name = "LIEMPO"'
							);

							$get_material_dressed = $this->admin->get_join('sales_tbl a', $join_material, FALSE, FALSE, 'c.material_id');

							foreach($get_material_dressed as $row_mat){
								$material_id = $row_mat->material_id;

								$check_adjustment = $this->admin->check_data('price_adjustment_tbl', array('bc_id' => $bc_id, 'material_id' => $material_id, 'price_adjustment_status' => 1));
								if($check_adjustment == FALSE){
									$jan_price = $price['jan'][$count];
									$feb_price = $price['feb'][$count];
									$mar_price = $price['mar'][$count];
									$apr_price = $price['apr'][$count];
									$may_price = $price['may'][$count];
									$jun_price = $price['jun'][$count];
									$jul_price = $price['jul'][$count];
									$aug_price = $price['aug'][$count];
									$sep_price = $price['sep'][$count];
									$oct_price = $price['oct'][$count];
									$nov_price = $price['nov'][$count];
									$dec_price = $price['dec'][$count];
									$total_price = $jan_price + $feb_price + $mar_price + $apr_price + $may_price + $jun_price + $jul_price + $aug_price + $sep_price + $oct_price + $nov_price + $dec_price;
									if($total_price > 0){
										$set_price = array(
											'bc_id' => $bc_id,
											'material_id' => $material_id,
											'price_adjustment_added' => date_now(),
											'price_adjustment_status' => 1
										);

										$insert_price = $this->admin->insert_data('price_adjustment_tbl', $set_price, TRUE);
										$price_adjustment_id = $insert_price['id'];

										$date = $year . '-01-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $jan_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);

										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-02-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $feb_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);

										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-03-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $mar_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-04-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $apr_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-05-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $may_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-06-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $jun_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-07-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $jul_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-08-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $aug_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-09-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $sep_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-10-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $oct_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-11-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $nov_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-12-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $dec_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);
									}
								}
							}
						}else{
							$check_material = $this->admin->check_data('material_tbl', array('material_desc' => $mat), TRUE);
							echo $mat;
							echo $this->db->last_query();
							print_r($check_material);
							if($check_material['result'] == TRUE){
								$material_id = $check_material['info']->material_id;
								$check_adjustment = $this->admin->check_data('price_adjustment_tbl', array('bc_id' => $bc_id, 'material_id' => $material_id, 'price_adjustment_status' => 1));
								if($check_adjustment == FALSE){
									$jan_price = $price['jan'][$count];
									$feb_price = $price['feb'][$count];
									$mar_price = $price['mar'][$count];
									$apr_price = $price['apr'][$count];
									$may_price = $price['may'][$count];
									$jun_price = $price['jun'][$count];
									$jul_price = $price['jul'][$count];
									$aug_price = $price['aug'][$count];
									$sep_price = $price['sep'][$count];
									$oct_price = $price['oct'][$count];
									$nov_price = $price['nov'][$count];
									$dec_price = $price['dec'][$count];
									$total_price = $jan_price + $feb_price + $mar_price + $apr_price + $may_price + $jun_price + $jul_price + $aug_price + $sep_price + $oct_price + $nov_price + $dec_price;
									if($total_price > 0){
										$set_price = array(
											'bc_id' => $bc_id,
											'material_id' => $material_id,
											'price_adjustment_added' => date_now(),
											'price_adjustment_status' => 1
										);

										$insert_price = $this->admin->insert_data('price_adjustment_tbl', $set_price, TRUE);
										$price_adjustment_id = $insert_price['id'];

										$date = $year . '-01-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $jan_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);

										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-02-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $feb_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);

										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-03-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $mar_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-04-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $apr_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-05-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $may_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-06-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $jun_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-07-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $jul_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-08-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $aug_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-09-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $sep_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-10-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $oct_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-11-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $nov_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);

										$date = $year . '-12-01';
										$set_price_det = array(
											'price_adjustment_id' => $price_adjustment_id,
											'price_adjustment_det_value' => $dec_price,
											'price_adjustment_det_date' => $date,
											'price_adjustment_det_status' => 1
										);
										$insert_price_det = $this->admin->insert_data('price_adjustment_details_tbl', $set_price_det);
									}
								}
							}else{

								echo 'error';
								exit;
							}
						}
					}

					$count++;
				}		

				if($this->db->trans_status() === FALSE){
					$this->db->trans_rollback();
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}else{
					$this->db->trans_commit();
					$msg = '<div class="alert alert-success">Price successfully adjusted.</strong></div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('business-center/dashboard');
			}else{
				$msg = 'Error please try again!';
				$this->session->set_flashdata('message', $msg);
				redirect('business-center/dashboard');
			}
		}
	}

	public function cancel_adjustment(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));

			$where = array('price_adjustment_id' => $id);
			$check_id = $this->admin->check_data('price_adjustment_tbl a', $where);
			if($check_id == TRUE){
				$set = array('price_adjustment_status' => 0);
				$remove_adjustment = $this->admin->update_data('price_adjustment_tbl', $set, $where);
				
				if($remove_adjustment == TRUE){
					$msg = '<div class="alert alert-success">Price adjustment removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}
				$this->session->set_flashdata('message', $msg);
				redirect('business-center/dashboard');
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('business-center/dashboard');
			}
		}
	}	

	public function dashboard(){
		$info = $this->_require_login();
		$data['title'] = 'Dashboard';

		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		$year = $this->_active_year();

		$set_adjustment = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id AND a.comp_adjust_id AND a.comp_adjust_status = 1 AND b.bc_id =' . $bc_id . ' AND a.comp_adjust_year = ' . $year
		);

		
		$get_adjustment = $this->admin->check_join('computation_adjustment_tbl a', $set_adjustment, TRUE);
		
		$adjustment_sales_volume = 0;
		$adjustment_net_sales = 0;
		$adjustment_variable_cost = 0;
		$adjustment_period_cost = 0;
		if($get_adjustment['result'] == TRUE){
			$adjustment_sales_volume = $get_adjustment['info']->com_adjust_sales_volume;
			$adjustment_net_sales = $get_adjustment['info']->com_adjust_net_sales;
			$adjustment_variable_cost = $get_adjustment['info']->com_adjust_variable_cost;
			$adjustment_period_cost = $get_adjustment['info']->com_adjust_period_cost;
		}

		$join = array('bc_tbl b' => 'a.bc_id = b.bc_id AND b.bc_id = ' . $bc_id);
 		$broiler_amount_dtl = $this->admin->get_join('broiler_amount_summary_tbl a', $join, false, false, 'a.broiler_line_item_id', 'a.broiler_line_item_id, sum(trans_qty) as trans_qty',  array('trans_type_id' => 1, 'YEAR(a.trans_date)' =>	$this->_active_year(),	'trans_status !='	=>	5));

 		$doc_amount = 0;
		$feeds_amount = 0;
		$growers_fee_amount = 0;
		$medicines_amount = 0;
		$vaccines_amount = 0;
		$harvested_kilo = 0;
 		if(count($broiler_amount_dtl)){
	 		foreach ($broiler_amount_dtl as $r) {
	 			if($r->broiler_line_item_id == 1){
	 				$doc_amount = $r->trans_qty;
	 			}
	 			if($r->broiler_line_item_id == 5){
	 				$feeds_amount = $r->trans_qty;
	 			}
	 			if($r->broiler_line_item_id == 4){
	 				$growers_fee_amount = $r->trans_qty;
	 			}
	 			if($r->broiler_line_item_id == 3){
	 				$medicines_amount = $r->trans_qty;
	 			}
	 			if($r->broiler_line_item_id == 2){
	 				$vaccines_amount = $r->trans_qty;
	 			}
	 			if($r->broiler_line_item_id == 6){
	 				$harvested_kilo = $r->trans_qty;
	 			}
	 		}
 		}else{
 			$doc_amount = 0;
 			$feeds_amount = 0;
 			$growers_fee_amount = 0;
 			$medicines_amount = 0;
 			$vaccines_amount = 0;
 			$harvested_kilo = 0;
 		}

 		$doc_cost = $harvested_kilo <= 0 ? 0 : $doc_amount/$harvested_kilo;
		$feeds_cost = $harvested_kilo <= 0 ? 0 : $feeds_amount/$harvested_kilo;
		$growers_fee_cost = $harvested_kilo <= 0 ? 0 : $growers_fee_amount/$harvested_kilo;
		$vaccines_cost = $harvested_kilo <= 0 ? 0 : $vaccines_amount/$harvested_kilo;
		$medicines_cost = $harvested_kilo <= 0 ? 0 : $medicines_amount/$harvested_kilo;
		$broiler_cost = $doc_cost + $feeds_cost + $growers_fee_cost + $vaccines_cost + $medicines_cost;
		$data['broiler_cost'] = round($broiler_cost, 2);

		$join = array('bc_tbl b' => 'a.bc_id = b.bc_id AND b.bc_id = ' . $bc_id);
 		$broiler_actual_data = $this->admin->get_join('broiler_amount_summary_tbl a', $join, false, false, 'a.broiler_line_item_id', 'a.broiler_line_item_id, sum(trans_qty) as trans_qty',  array('trans_type_id' => 2, 'YEAR(a.trans_date)' =>	$this->_active_year() - 1,	'trans_status !='	=>	5));
 		if(count($broiler_actual_data)){

			foreach ($broiler_actual_data as $r) {
	 			if($r->broiler_line_item_id == 1){
	 				$actual_doc_amount = $r->trans_qty;
	 			}
	 			if($r->broiler_line_item_id == 5){
	 				$actual_feeds_amount = $r->trans_qty;
	 			}
	 			if($r->broiler_line_item_id == 4){
	 				$actual_growers_fee_amount = $r->trans_qty;
	 			}
	 			if($r->broiler_line_item_id == 3){
	 				$actual_medicines_amount = $r->trans_qty;
	 			}
	 			if($r->broiler_line_item_id == 2){
	 				$actual_vaccines_amount = $r->trans_qty;
	 			}
	 			if($r->broiler_line_item_id == 6){
	 				$actual_harvested_kilo = $r->trans_qty;
	 			}
	 			if($r->broiler_line_item_id == 7){
	 				$actual_harvested_heads = $r->trans_qty;
	 			}
	 		}
 		} else {
 			$actual_doc_amount = 0;
 			$actual_feeds_amount = 0;
 			$actual_growers_fee_amount = 0;
			$actual_medicines_amount = 0;
			$actual_vaccines_amount = 0;
			$actual_harvested_kilo = 0;
			$actual_harvested_heads = 0;
 		}
 		$actual_doc_cost = $actual_harvested_kilo <= 0 ? 0 : $actual_doc_amount/$actual_harvested_kilo;
		$actual_feeds_cost = $actual_harvested_kilo <= 0 ? 0 : $actual_feeds_amount/$actual_harvested_kilo;
		$actual_growers_fee_cost = $actual_harvested_kilo <= 0 ? 0 : $actual_growers_fee_amount/$actual_harvested_kilo;
		$actual_vaccines_cost = $actual_harvested_kilo <= 0 ? 0 : $actual_vaccines_amount/$actual_harvested_kilo;
		$actual_medicines_cost = $actual_harvested_kilo <= 0 ? 0 : $actual_medicines_amount/$actual_harvested_kilo;
		$broiler_cost_actual = $actual_doc_cost + $actual_feeds_cost + $actual_growers_fee_cost + $actual_vaccines_cost + $actual_medicines_cost;
		$data['broiler_cost_actual'] = round($broiler_cost_actual, 2);
		$harvested_old = round($actual_harvested_heads, 0);

		if($broiler_cost > $broiler_cost_actual){
 			$broiler_condition = 'higher';
 			$broiler_indicator = 'fa fa-long-arrow-up';
 			$broiler_difference = $broiler_cost - $broiler_cost_actual;
 			$broiler_difference = round($broiler_difference, 2);
 		}elseif($broiler_cost < $broiler_cost_actual){
 			$broiler_condition = 'lower';
 			$broiler_indicator = 'fa fa-long-arrow-down';
 			$broiler_difference = $broiler_cost_actual - $broiler_cost;
 			$broiler_difference = round($broiler_difference, 2);
 		} else {
 			$broiler_condition = 'lower/higher';
 			$broiler_indicator = '';
 			$broiler_difference = $broiler_cost_actual - $broiler_cost;
 			$broiler_difference = round($broiler_difference, 2);
 		}
 		$data['broiler_condition'] = $broiler_condition;
 		$data['broiler_indicator'] = $broiler_indicator;
 		$data['broiler_difference'] = $broiler_difference;
 		$data['budget_year'] = $this->_active_year();
 		$data['actual_year'] = $this->_active_year() - 1;

 		/*Broiler and harvested comparative*/

 		/*INSERTED CODE STARTS HERE*/
 		$data['year'] = $this->_active_year();
 		$join = array('bc_tbl b' => 'a.bc_id = b.bc_id AND b.bc_id = ' . $bc_id);
 		$harvested_actual_data = $this->admin->get_join('broiler_amount_summary_tbl a', $join, false, false, 'a.broiler_line_item_id, MONTH(a.trans_date), YEAR(a.trans_date)', 'a.broiler_line_item_id, SUM(trans_qty) as trans_qty',  array('trans_type_id' => 2, 'YEAR(a.trans_date)' =>	$this->_active_year() - 1, 'a.trans_status !='	=> 5));

 		$i = 1;
 		$kilo = 1;
 		$feeds = 1;
 		$cg_fee = 1;
 		$medicines = 1;
 		$vaccines = 1;
 		$doc = 1;

 		if(count($harvested_actual_data)){
	 		foreach ($harvested_actual_data as $r) {
	 			if($r->broiler_line_item_id == 7){
		 			$actual_harvested_heads_2[$i] = $r->trans_qty;
		 			$i++;
	 			}
	 			if($r->broiler_line_item_id == 6){
	 				$actual_harvested_kilo_2[$kilo] = $r->trans_qty;
		 			$kilo++;
	 			}
	 			if($r->broiler_line_item_id == 5){
	 				$actual_feeds_amount_2[$feeds] = $r->trans_qty;
		 			$feeds++;
	 			}
	 			if($r->broiler_line_item_id == 4){
	 				$actual_cg_fee_amount_2[$cg_fee] = $r->trans_qty;
		 			$cg_fee++;
	 			}
	 			if($r->broiler_line_item_id == 3){
	 				$actual_medicines_amount_2[$medicines] = $r->trans_qty;
		 			$medicines++;
	 			}
	 			if($r->broiler_line_item_id == 2){
	 				$actual_vaccines_amount_2[$vaccines] = $r->trans_qty;
		 			$vaccines++;
	 			}
	 			if($r->broiler_line_item_id == 1){
	 				$actual_doc_amount_2[$doc] = $r->trans_qty;
		 			$doc++;
	 			}
	 		}

	 		$data['actual_harvested_heads'] = $actual_harvested_heads_2;
	 		$data['actual_harvested_kilo'] = $actual_harvested_kilo_2;
	 		$data['actual_feeds_amount'] = $actual_feeds_amount_2;
	 		$data['actual_cg_fee_amount'] = $actual_cg_fee_amount_2;
	 		$data['actual_medicines_amount'] = $actual_medicines_amount_2;
	 		$data['actual_vaccines_amount'] = $actual_vaccines_amount_2;
	 		$data['actual_doc_amount'] = $actual_doc_amount_2;
 		} else {
 			
 			$data['actual_harvested_heads'] = 0;
 			$data['actual_harvested_kilo'] = 0;
	 		$data['actual_feeds_amount'] = 0;
	 		$data['actual_cg_fee_amount'] = 0;
	 		$data['actual_medicines_amount'] = 0;
	 		$data['actual_vaccines_amount'] = 0;
	 		$data['actual_doc_amount'] = 0;
 		}

 		$join = array('bc_tbl b' => 'a.bc_id = b.bc_id AND b.bc_id = ' . $bc_id);
 		$previous_harvested_actual_data = $this->admin->get_join('broiler_amount_summary_tbl a', $join, false, false, 'a.broiler_line_item_id, MONTH(a.trans_date)', 'a.broiler_line_item_id, SUM(trans_qty) as trans_qty',  array('trans_type_id' => 2, 'YEAR(a.trans_date)' =>	$this->_active_year() - 2, 'a.trans_status !='	=> 5));

 		$i = 1;
 		$kilo = 1;
 		$feeds = 1;
 		$cg_fee = 1;
 		$medicines = 1;
 		$vaccines = 1;
 		$doc = 1;
 		if(count($previous_harvested_actual_data)){
 			foreach ($previous_harvested_actual_data as $r) {
	 			
	 			if($r->broiler_line_item_id == 7){
		 			$previous_actual_harvested_heads[$i] = $r->trans_qty;
		 			$i++;
	 			}
	 			if($r->broiler_line_item_id == 6){
	 				$previous_actual_harvested_kilo[$kilo] = $r->trans_qty;
		 			$kilo++;
	 			}
	 			if($r->broiler_line_item_id == 5){
	 				$previous_actual_feeds_amount[$feeds] = $r->trans_qty;
		 			$feeds++;
	 			}
	 			if($r->broiler_line_item_id == 4){
	 				$previous_actual_cg_fee_amount[$cg_fee] = $r->trans_qty;
		 			$cg_fee++;
	 			}
	 			if($r->broiler_line_item_id == 3){
	 				$previous_actual_medicines_amount[$medicines] = $r->trans_qty;
		 			$medicines++;
	 			}
	 			if($r->broiler_line_item_id == 2){
	 				$previous_actual_vaccines_amount[$vaccines] = $r->trans_qty;
		 			$vaccines++;
	 			}
	 			if($r->broiler_line_item_id == 1){
	 				$previous_actual_doc_amount[$doc] = $r->trans_qty;
		 			$doc++;
	 			}
	 		}
	 		$data['previous_actual_harvested_heads'] = $previous_actual_harvested_heads;
	 		$data['previous_actual_harvested_kilo'] = $previous_actual_harvested_kilo;
	 		$data['previous_actual_feeds_amount'] = $previous_actual_feeds_amount;
	 		$data['previous_actual_cg_fee_amount'] = $previous_actual_cg_fee_amount;
	 		$data['previous_actual_medicines_amount'] = $previous_actual_medicines_amount;
	 		$data['previous_actual_vaccines_amount'] = $previous_actual_vaccines_amount;
	 		$data['previous_actual_doc_amount'] = $previous_actual_doc_amount;
 		} else {
 			$data['previous_actual_harvested_heads'] = 0;
 			$data['previous_actual_harvested_kilo'] = 0;
	 		$data['previous_actual_feeds_amount'] = 0;
	 		$data['previous_actual_cg_fee_amount'] = 0;
	 		$data['previous_actual_medicines_amount'] = 0;
	 		$data['previous_actual_vaccines_amount'] = 0;
	 		$data['previous_actual_doc_amount'] = 0;
	 	}


	 	$join = array('bc_tbl b' => 'a.bc_id = b.bc_id AND b.bc_id = ' . $bc_id);
 		$budget_harvested_data = $this->admin->get_join('broiler_amount_summary_tbl a', $join, false, false, 'a.broiler_line_item_id, MONTH(a.trans_date)', 'a.broiler_line_item_id, SUM(trans_qty) as trans_qty',  array('trans_type_id' => 1, 'YEAR(a.trans_date)' =>	$this->_active_year(), 'a.trans_status !='	=> 5));

 		$i = 1;
 		$kilo = 1;
 		$feeds = 1;
 		$cg_fee = 1;
 		$medicines = 1;
 		$vaccines = 1;
 		$doc = 1;
 		if(count($budget_harvested_data)){
 			$budget_harvested_heads = array();
 			$budget_harvested_kilo = array();
 			$budget_feeds_amount = array();
 			$budget_cg_fee_amount = array();
 			$budget_medicines_amount = array();
 			$budget_vaccines_amount = array();
 			foreach ($budget_harvested_data as $r) {
	 			
	 			if($r->broiler_line_item_id == 7){
		 			$budget_harvested_heads[$i] = $r->trans_qty;
		 			$i++;
	 			}
	 			if($r->broiler_line_item_id == 6){
	 				$budget_harvested_kilo[$kilo] = $r->trans_qty;
		 			$kilo++;
	 			}
	 			if($r->broiler_line_item_id == 5){
	 				$budget_feeds_amount[$feeds] = $r->trans_qty;
		 			$feeds++;
	 			}
	 			if($r->broiler_line_item_id == 4){
	 				$budget_cg_fee_amount[$cg_fee] = $r->trans_qty;
		 			$cg_fee++;
	 			}
	 			if($r->broiler_line_item_id == 3){
	 				$budget_medicines_amount[$medicines] = $r->trans_qty;
		 			$medicines++;
	 			}
	 			if($r->broiler_line_item_id == 2){
	 				$budget_vaccines_amount[$vaccines] = $r->trans_qty;
		 			$vaccines++;
	 			}
	 			if($r->broiler_line_item_id == 1){
	 				$budget_doc_amount[$doc] = $r->trans_qty;
		 			$doc++;
	 			}
	 		}
	 		$data['budget_harvested_heads'] = $budget_harvested_heads;
	 		$data['budget_harvested_kilo'] = $budget_harvested_kilo;
	 		$data['budget_feeds_amount'] = $budget_feeds_amount;
	 		$data['budget_cg_fee_amount'] = $budget_cg_fee_amount;
	 		$data['budget_medicines_amount'] = $budget_medicines_amount;
	 		$data['budget_vaccines_amount'] = $budget_vaccines_amount;
	 		$data['budget_doc_amount'] = $budget_doc_amount;
 		} else {
 			$data['budget_harvested_heads'] = 0;
 			$data['budget_harvested_kilo'] = 0;
	 		$data['budget_feeds_amount'] = 0;
	 		$data['budget_cg_fee_amount'] = 0;
	 		$data['budget_medicines_amount'] = 0;
	 		$data['budget_vaccines_amount'] = 0;
	 		$data['budget_doc_amount'] = 0;
	 	}
	 	/*INSERTED CODE ENDS HERE*/

 		$harvested_data = $this->admin->get_query("SELECT *,SUM((doc_tbl.doc - doc_tbl.doc * (pfd_tbl.pfd / 100)) * (hr_tbl.hr/100)) as harvested_heads FROM (SELECT SUM(b.broiler_budget_qty) as doc, b.broiler_trans_date, d.bc_name FROM `broiler_trans_tbl` `a` JOIN `broiler_trans_dtl_tbl` `b` ON `a`.`broiler_trans_id` = `b`.`broiler_trans_id` AND `a`.`broiler_trans_status` = 3 JOIN `broiler_subgroup_tbl` `c` ON `a`.`broiler_subgroup_id` = `c`.`broiler_subgroup_id` AND `c`.`broiler_subgroup_name` = 'DOC PLACEMENT' JOIN `bc_tbl` `d` ON `a`.`bc_id` = `d`.`bc_id` WHERE `d`.`bc_id`  = " . $bc_id . " GROUP BY a.bc_id, YEAR(b.broiler_trans_date), MONTH(b.broiler_trans_date)) as doc_tbl,

			(SELECT SUM(b.broiler_budget_qty) as pfd, b.broiler_trans_date, d.bc_name FROM `broiler_trans_tbl` `a` JOIN `broiler_trans_dtl_tbl` `b` ON `a`.`broiler_trans_id` = `b`.`broiler_trans_id` AND `a`.`broiler_trans_status` = 3 JOIN `broiler_subgroup_tbl` `c` ON `a`.`broiler_subgroup_id` = `c`.`broiler_subgroup_id` AND `c`.`broiler_subgroup_name` = '%PFD' JOIN `bc_tbl` `d` ON `a`.`bc_id` = `d`.`bc_id` WHERE `d`.`bc_id`  = " . $bc_id . " GROUP BY a.bc_id, YEAR(b.broiler_trans_date), MONTH(b.broiler_trans_date)) as pfd_tbl,

			(SELECT SUM(b.broiler_budget_qty) as hr, b.broiler_trans_date, d.bc_name FROM `broiler_trans_tbl` `a` JOIN `broiler_trans_dtl_tbl` `b` ON `a`.`broiler_trans_id` = `b`.`broiler_trans_id` AND `a`.`broiler_trans_status` = 3 JOIN `broiler_subgroup_tbl` `c` ON `a`.`broiler_subgroup_id` = `c`.`broiler_subgroup_id` AND `c`.`broiler_subgroup_name` = 'HR' JOIN `bc_tbl` `d` ON `a`.`bc_id` = `d`.`bc_id`  GROUP BY a.bc_id, YEAR(b.broiler_trans_date), MONTH(b.broiler_trans_date)) as hr_tbl

			WHERE doc_tbl.broiler_trans_date = pfd_tbl.broiler_trans_date AND doc_tbl.bc_name = pfd_tbl.bc_name AND pfd_tbl.broiler_trans_date = hr_tbl.broiler_trans_date AND pfd_tbl.bc_name = hr_tbl.bc_name", TRUE);
 		
 		$harvested = $harvested_data->harvested_heads;
 		$harvested_condition = '';
 		$harvested_indicator = '';
 		if($harvested > $harvested_old){
 			$harvested_condition = 'higher';
 			$harvested_indicator = 'fa-long-arrow-up';
 		}elseif($harvested < $harvested_old){
 			$harvested_condition = 'lower';
 			$harvested_indicator = 'fa-long-arrow-down';
 		}

 		$harvested_percentage = $harvested != 0 ? ((($harvested - $harvested_old) / $harvested_old) * 100) : 0;
 		
 		$data['harvested'] = $harvested;
 		$data['harvested_old'] = $harvested_old;
 		$data['harvested_condition'] = $harvested_condition;
 		$data['harvested_indicator'] = $harvested_indicator;
 		$data['harvested_percentage'] = $harvested_percentage;

 		$sales_unit = $this->sales_unit($bc_id);
 		$total_sales_unit = 0;
 		foreach($sales_unit as $row_unit){
 			$total_sales_unit += $row_unit->total_sales_unit;
 		}

 		$get_comparative_sales = $this->get_comparative_net_sales();
 		$total_net_sales1 = 0;
 		$total_sales_unit1 = 0;
 		
 		foreach($get_comparative_sales as $row){
 			$total_net_sales1 += $row->net_sales;
 			$total_sales_unit1 += $row->sales_unit;
 		}

 		$total_sales_unit_old = $total_sales_unit1;
		$sales_unit_percentage = $total_sales_unit != 0 ? 100 - (($total_sales_unit_old / $total_sales_unit) * 100) : 0; 

		$sales_unit_condition = '';
 		$sales_unit_indicator = '';
 		if($total_sales_unit > $total_sales_unit_old){
 			$sales_unit_condition = 'higher';
 			$sales_unit_indicator = 'fa-long-arrow-up';
 		}elseif($total_sales_unit < $total_sales_unit_old){
 			$sales_unit_condition = 'lower';
 			$sales_unit_indicator = 'fa-long-arrow-down';
 		}

 		$data['total_sales_unit'] = $total_sales_unit + $adjustment_sales_volume;
 		$data['total_sales_unit_old'] = $total_sales_unit_old;
 		$data['sales_unit_percentage'] = $sales_unit_percentage;
 		$data['sales_unit_condition'] = $sales_unit_condition;
 		$data['sales_unit_indicator'] = $sales_unit_indicator;


 		$join_net_sales = array(
 			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
 			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
 			'outlet_tbl d' => 'a.outlet_id = d.outlet_id AND d.bc_id = ' . $bc_id,
 			'material_tbl e' => 'b.material_id = e.material_id',
 		);

 		$net_sales_data = $this->admin->get_join('sales_tbl a', $join_net_sales, TRUE, FALSE, FALSE, 'c.sale_det_id, d.outlet_name, e.material_desc, c.sales_det_date, SUM(c.sales_det_qty * (c.sales_det_asp - IFNULL((SELECT z.sales_tactical_det_price FROM sales_tactical_tbl x, sales_tactical_item_tbl y, sales_tactical_details_tbl z WHERE x.sales_tactical_id=y.sales_tactical_id AND y.sales_tactical_item_id=z.sales_tactical_item_id AND d.outlet_id = x.outlet_id AND y.material_id=e.material_id AND c.sales_det_date = z.sales_tactical_det_date AND x.sales_tactical_status = 1 AND y.sales_tactical_item_status = 1 AND x.sales_tactical_status = 1), 0))) as net_sales');

 		


 		$join_new_outlet = array(
 			'outlet_brand_tbl b' => 'a.outlet_id = b.outlet_id AND a.outlet_status_id = 1 AND b.outlet_brand_status = 1 AND a.bc_id = ' . $bc_id,
 			'brand_tbl c' => 'b.brand_id = c.brand_id',
 			'brand_type_tbl d' => 'c.brand_type_id = d.brand_type_id AND d.brand_type_name = "RETAIL"',
 			'outlet_type_tbl e' => 'a.outlet_type_id = e.outlet_type_id AND e.outlet_type_id = 2'
 		);

 		$get_new_outlet = $this->admin->get_join('outlet_tbl a', $join_new_outlet, TRUE, FALSE, FALSE, 'COUNT(a.outlet_id) as outlet_new');
 		$new_outlet_data = $get_new_outlet->outlet_new;

 		$join_new_outlet = array(
 			'outlet_brand_tbl b' => 'a.outlet_id = b.outlet_id AND a.outlet_status_id = 1 AND b.outlet_brand_status = 1 AND a.bc_id = ' . $bc_id,
 			'brand_tbl c' => 'b.brand_id = c.brand_id',
 			'brand_type_tbl d' => 'c.brand_type_id = d.brand_type_id AND d.brand_type_name = "RETAIL"',
 			'outlet_type_tbl e' => 'a.outlet_type_id = e.outlet_type_id AND e.outlet_type_id = 1'
 		);

 		$get_old_outlet = $this->admin->get_join('outlet_tbl a', $join_new_outlet, TRUE, FALSE, FALSE, 'COUNT(a.outlet_id) as outlet_old');
 		$old_outlet_data = $get_old_outlet->outlet_old;

 		$data['outlet_new'] = $new_outlet_data;
 		$data['outlet_old'] = $old_outlet_data;
 		$data['outlet_total'] = $new_outlet_data + $old_outlet_data;

 		$join_new_emp = array(
 			'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.emp_type_id = 2 AND a.emp_status = 1 AND b.parent_id = ' . $user_info['cost_center_id'],
 		);
 		$get_new_emp = $this->admin->get_join('employee_tbl a', $join_new_emp, TRUE, FALSE, FALSE, 'COUNT(emp_id) as emp_new');
 		$new_emp_data = $get_new_emp->emp_new;

 		$join_old_emp = array(
 			'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.emp_type_id = 1 AND a.emp_status = 1 AND b.parent_id = ' . $user_info['cost_center_id'],
 		);
 		$get_old_emp = $this->admin->get_join('employee_tbl a', $join_old_emp, TRUE, FALSE, FALSE, 'COUNT(emp_id) as emp_old');
 		$old_emp_data = $get_old_emp->emp_old;

 		$data['emp_new'] = $new_emp_data;
 		$data['emp_old'] = $old_emp_data;
 		$data['emp_total'] = $new_emp_data + $old_emp_data;

 		
 		$capex = $this->capex_report($user_info['cost_center_id']);
 		$capex_data = $capex->total_capex;
 		$get_capex_old = $this->admin->get_query('SELECT * FROM comparative_capex_budget_tbl WHERE comp_capex_budget_year = ' . ($year - 1) . ' AND bc_id = ' . $bc_id, TRUE);

 		if(count($get_capex_old) > 0){
 			$capex_old = $get_capex_old->comp_capex_budget_val;
 		}else{
 			$capex_old = 0;
 		}
 		
 		$capex_dif = 0;

 		$capex_condition = '';
 		$capex_indicator = '';
 		if($capex_data > $capex_old){
 			$capex_condition = 'higher';
 			$capex_indicator = 'fa-long-arrow-up';
 			$capex_dif = $capex_data - $capex_old;
 		}elseif($capex_data < $capex_old){
 			$capex_condition = 'lower';
 			$capex_indicator = 'fa-long-arrow-down';
 			$capex_dif = $capex_old - $capex_data;
 		}


 		$data['capex'] = $capex_data;
 		$data['capex_old'] = $capex_old;
 		$data['capex_condition'] = $capex_condition;
 		$data['capex_indicator'] = $capex_indicator;
 		$data['capex_dif'] = $capex_dif;

 		$data['volume'] = $this->volume_report();
 		$data['price'] = $this->price_assumption_report();
 		$year = $this->_active_year();
 		$opex_bc_gl = $this->_opex_nationwide_bc($year);
 		$comparative = $this->get_comparative_capex();
 		
 		$total_opex = 0;
 		foreach($opex_bc_gl as $row){
 			$total_opex += $row->total_amount;
 		}


 		$total_comp_capex = 0;
 		
 		foreach($comparative as $row){
 			$total_comp_capex += $row->total;

 			$gl_sub_name = $row->ag_name;
			$gl_code = $row->ag_gl_code;
			$depre_amount = $row->total;

			$bc_arr_depre = new stdClass;
			$bc_arr_depre->gl_group_name = 'DEPRECIATION';
			$bc_arr_depre->gl_sub_name = $gl_sub_name;
			$bc_arr_depre->gl_code = $gl_code;
			$bc_arr_depre->total_amount = $depre_amount;
			array_push($opex_bc_gl, $bc_arr_depre);
 		}

 		usort($opex_bc_gl, function($a, $b) {
		    return $a->total_amount < $b->total_amount;
		});
 		$data['opex_bc_gl'] = $opex_bc_gl;
 		//echo $opex_bc_gl['gl_group_name'];
 		//print_r($opex_bc_gl);
 		//exit;
 		
 		$compute_noi =  $this->compute_noi();
 		$variable_cost = $compute_noi['total_variable'];
 		$data['variable_cost'] = $variable_cost;

 		$noi = $compute_noi['overall_noi'];
 		$data['variable_cost'] = $compute_noi['total_variable'] + $adjustment_variable_cost;
 		$data['total_net_sales'] = $compute_noi['total_net_sales'] + $adjustment_net_sales;

 		$net_sales = $compute_noi['total_net_sales'] + $adjustment_net_sales;
 		$data['net_sales_old'] = number_format($total_net_sales1, 2);
 		$data['totol_sales_unit_old'] = $total_sales_unit1;

 		$net_sales_old = $total_net_sales1;
 		$net_sales_percentage = $net_sales_old > 0 ? (($net_sales - $net_sales_old) / $net_sales_old) * 100 : 0;

 		$net_sales_condition = '';
 		$net_sales_indicator = '';
 		if($net_sales > $net_sales_old){
 			$net_sales_condition = 'higher';
 			$net_sales_indicator = 'fa-long-arrow-up';
 		}elseif($net_sales < $net_sales_old){
 			$net_sales_condition = 'lower';
 			$net_sales_indicator = 'fa-long-arrow-down';
 		}

 		$data['net_sales'] = $net_sales;
 		$data['net_sales_old'] = $net_sales_old;
 		$data['net_sales_percentage'] = $net_sales_percentage;
 		$data['net_sales_condition'] = $net_sales_condition;
 		$data['net_sales_indicator'] = $net_sales_indicator;

 		$data['comparative_previous_year'] = $this->get_comparative_capex_previous_year();

 		$data['total_opex'] = $total_opex + $total_comp_capex + $adjustment_period_cost;
 		$data['period_cost'] = $total_opex + $total_comp_capex;
 		$data['total_capex'] = $total_comp_capex;
 		$data['noi'] = $noi - ($total_opex + $total_comp_capex);
 		/*$data['noi'] = $noi - ($total_opex + $total_comp_capex);*/
 		$get_old_noi = $this->admin->get_data('comparative_noi_tbl', array('bc_id' => $bc_id, 'comp_noi_year' => $year - 1, 'comp_noi_status' => 1), TRUE);

 		$data['noi_old'] = 0;

 		if(count($get_old_noi) > 0){
 			$data['noi_old'] = $get_old_noi->comp_noi_val;
 		}

 		$data['other_expense'] = 0;
 		//Get PNL Comparative YEE
 		$get_comp_pnl = $this->admin->get_data('comparative_pnl_tbl', array('bc_id' => $bc_id, 'comp_pnl_year' => $year - 1 ,'comp_pnl_status' => 1), TRUE);
 		$comp_pnl_sales_volume1 =  0;
 		$comp_pnl_net_sales1 =  0;
 		$comp_pnl_variable_cost1 =  0;
 		$comp_pnl_contribution_margin1 =  0;
 		$comp_pnl_period_cost1 =  0;
 		$comp_pnl_other1 =  0;
 		if(count($get_comp_pnl) > 0){
 			$comp_pnl_sales_volume1 = $get_comp_pnl->comp_pnl_sales_volume;
			$comp_pnl_net_sales1 = $get_comp_pnl->comp_pnl_net_sales;
			$comp_pnl_variable_cost1 = $get_comp_pnl->comp_pnl_variable_cost;
			$comp_pnl_contribution_margin1 = $get_comp_pnl->comp_pnl_contribution_margin;
			$comp_pnl_period_cost1 = $get_comp_pnl->comp_pnl_period_cost;
			$comp_pnl_other1 = $get_comp_pnl->comp_pnl_other;
 		}

 		$get_comp_pnl2 = $this->admin->get_data('comparative_pnl_tbl', array('bc_id' => $bc_id, 'comp_pnl_year' => $year - 2 ,'comp_pnl_status' => 1), TRUE);
 		$comp_pnl_sales_volume2 =  0;
 		$comp_pnl_net_sales2 =  0;
 		$comp_pnl_variable_cost2 =  0;
 		$comp_pnl_contribution_margin2 =  0;
 		$comp_pnl_period_cost2 =  0;
 		$comp_pnl_other2 =  0;
 		if(count($get_comp_pnl2) > 0){
 			$comp_pnl_sales_volume2 = $get_comp_pnl2->comp_pnl_sales_volume;
			$comp_pnl_net_sales2 = $get_comp_pnl2->comp_pnl_net_sales;
			$comp_pnl_variable_cost2 = $get_comp_pnl2->comp_pnl_variable_cost;
			$comp_pnl_contribution_margin2 = $get_comp_pnl2->comp_pnl_contribution_margin;
			$comp_pnl_period_cost2 = $get_comp_pnl2->comp_pnl_period_cost;
			$comp_pnl_other2 = $get_comp_pnl2->comp_pnl_other;
 		}

 		$data['comp_pnl_sales_volume1'] = $comp_pnl_sales_volume1;
 		$data['comp_pnl_net_sales1'] = $comp_pnl_net_sales1;
 		$data['comp_pnl_variable_cost1'] = $comp_pnl_variable_cost1;
 		$data['comp_pnl_contribution_margin1'] = $comp_pnl_contribution_margin1;
 		$data['comp_pnl_period_cost1'] = $comp_pnl_period_cost1 ;
 		$data['comp_pnl_other1'] = $comp_pnl_other1;

 		$data['comp_pnl_sales_volume2'] = $comp_pnl_sales_volume2;
 		$data['comp_pnl_net_sales2'] = $comp_pnl_net_sales2;
 		$data['comp_pnl_variable_cost2'] = $comp_pnl_variable_cost2;
 		$data['comp_pnl_contribution_margin2'] = $comp_pnl_contribution_margin2;
 		$data['comp_pnl_period_cost2'] = $comp_pnl_period_cost2;
 		$data['comp_pnl_other2'] = $comp_pnl_other2;


 		$data['size'] = $this->admin->get_query('SELECT * FROM size_tbl WHERE size_name IN ("SUPERSIZE", "JUMBO", "BIGTIME", "REGULAR", "HALF")');

 		$join_price = array(
 			'material_tbl b' => 'a.material_id = b.material_id AND a.price_adjustment_status = 1'
 		);

 		$data['price_adjustment'] = $this->admin->get_join('price_adjustment_tbl a', $join_price, FALSE, FALSE, FALSE, '*,
 			(SELECT x.price_adjustment_det_value FROM price_adjustment_details_tbl x WHERE x.price_adjustment_id = a.price_adjustment_id AND x.price_adjustment_det_date = "' . $year . '-01-01" AND x.price_adjustment_det_status = 1) as jan_price,

 			(SELECT x.price_adjustment_det_value FROM price_adjustment_details_tbl x WHERE x.price_adjustment_id = a.price_adjustment_id AND x.price_adjustment_det_date = "' . $year . '-02-01" AND x.price_adjustment_det_status = 1) as feb_price,

 			(SELECT x.price_adjustment_det_value FROM price_adjustment_details_tbl x WHERE x.price_adjustment_id = a.price_adjustment_id AND x.price_adjustment_det_date = "' . $year . '-03-01" AND x.price_adjustment_det_status = 1) as mar_price,

 			(SELECT x.price_adjustment_det_value FROM price_adjustment_details_tbl x WHERE x.price_adjustment_id = a.price_adjustment_id AND x.price_adjustment_det_date = "' . $year . '-04-01" AND x.price_adjustment_det_status = 1) as apr_price,

 			(SELECT x.price_adjustment_det_value FROM price_adjustment_details_tbl x WHERE x.price_adjustment_id = a.price_adjustment_id AND x.price_adjustment_det_date = "' . $year . '-05-01" AND x.price_adjustment_det_status = 1) as may_price,

 			(SELECT x.price_adjustment_det_value FROM price_adjustment_details_tbl x WHERE x.price_adjustment_id = a.price_adjustment_id AND x.price_adjustment_det_date = "' . $year . '-06-01" AND x.price_adjustment_det_status = 1) as jun_price,

 			(SELECT x.price_adjustment_det_value FROM price_adjustment_details_tbl x WHERE x.price_adjustment_id = a.price_adjustment_id AND x.price_adjustment_det_date = "' . $year . '-07-01" AND x.price_adjustment_det_status = 1) as jul_price,

 			(SELECT x.price_adjustment_det_value FROM price_adjustment_details_tbl x WHERE x.price_adjustment_id = a.price_adjustment_id AND x.price_adjustment_det_date = "' . $year . '-08-01" AND x.price_adjustment_det_status = 1) as aug_price,

 			(SELECT x.price_adjustment_det_value FROM price_adjustment_details_tbl x WHERE x.price_adjustment_id = a.price_adjustment_id AND x.price_adjustment_det_date = "' . $year . '-09-01" AND x.price_adjustment_det_status = 1) as sep_price,

 			(SELECT x.price_adjustment_det_value FROM price_adjustment_details_tbl x WHERE x.price_adjustment_id = a.price_adjustment_id AND x.price_adjustment_det_date = "' . $year . '-10-01" AND x.price_adjustment_det_status = 1) as oct_price,

 			(SELECT x.price_adjustment_det_value FROM price_adjustment_details_tbl x WHERE x.price_adjustment_id = a.price_adjustment_id AND x.price_adjustment_det_date = "' . $year . '-11-01" AND x.price_adjustment_det_status = 1) as nov_price,

 			(SELECT x.price_adjustment_det_value FROM price_adjustment_details_tbl x WHERE x.price_adjustment_id = a.price_adjustment_id AND x.price_adjustment_det_date = "' . $year . '-12-01" AND x.price_adjustment_det_status = 1) as dec_price,'
 		);

 		$data['content'] = $this->load->view('bc/bc_dashboard_content', $data , TRUE);
		$this->load->view('bc/templates', $data);
	}

	public function get_comparative_net_sales(){
		$info = $this->_require_login();
		$user_info = $this->get_user_info();
 		$bc_id = $user_info['bc_id'];
		$data['title'] = 'View Comparative Net Sales';
		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id AND b.bc_id = ' . $bc_id,
		);
		$data = $this->admin->get_join('comparative_net_sales_tbl a', $join, FALSE,'b.bc_name ASC', false, 'b.bc_name, a.*');
		
		return $data;
		
	}

	public function sales_unit($bc_id){
		$join = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b. sales_item_status',
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_unit_tbl e' => 'd.material_id = e.material_id AND e.material_unit_status = 1',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'bc_tbl g' => 'f.bc_id = g.bc_id AND g.bc_id = ' . $bc_id 
		);

		$sales_unit = $this->admin->get_join('sales_tbl a', $join, FALSE, FALSE, 'd.material_id', 'd.material_code, d.material_desc, SUM(c.sales_det_qty), e.sales_unit_equivalent as sales_unit, SUM(c.sales_det_qty) / e.sales_unit_equivalent as total_sales_unit');

		return $sales_unit;
	}

	public function sales_mix(){
		$info = $this->_require_login();
		$user_info = $this->get_user_info();
 		$bc_id = $user_info['bc_id'];
		$join = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b. sales_item_status',
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_unit_tbl e' => 'd.material_id = e.material_id AND e.material_unit_status = 1',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
 			'brand_tbl h' => 'g.brand_id = h.brand_id',
 			'report_sales_mix_brand_tbl i' => 'h.brand_id = i.brand_id AND i.report_sales_mix_brand_status = 1',
 			'report_sales_mix_tbl j' => 'i.report_sales_mix_id = j.report_sales_mix_id',
 			'material_group_tbl k' => "d.material_group_id = k.material_group_id AND k.material_group_name != 'BY-PRODUCTS'"
		);

		$sales_mix = $this->admin->get_join('sales_tbl a', $join, FALSE, FALSE, 'j.report_sales_mix_id', 'j.report_sales_mix_name, SUM(c.sales_det_qty), e.sales_unit_equivalent as sales_unit, SUM(c.sales_det_qty) * e.sales_unit_equivalent as total_sales_mix');
		$data['result'] = 1;
		$data['info'] = $sales_mix;
		echo json_encode($data);
	}

	public function capex_report($cost_center_id){
		$join = array(
			'asset_group_transaction_item_tbl b' => 'a.ag_trans_id = b.ag_trans_id AND a.ag_trans_status = 1 AND b.ag_trans_item_status = 1 AND a.cost_center_id = ' . $cost_center_id,
			'asset_group_transaction_details_tbl c' => 'b.ag_trans_item_id = c.ag_trans_item_id AND c.ag_trans_det_status = 1',
			'asset_subgroup_tbl d' => 'b.asg_id = d.asg_id',
			'asset_group_tbl e' => 'd.ag_id = e.ag_id',
		);

		$capex = $this->admin->get_join('asset_group_transaction_tbl a', $join, TRUE, FALSE, FALSE, 'SUM(b.capex_price * c.capex_qty) as total_capex');
		return $capex;
	}

	public function volume_report(){
		$year = $this->_active_year();
		$user_info = $this->get_user_info();
 		$cost_center_id = $user_info['cost_center_id'];
 		$bc_id = $user_info['bc_id'];

		$join_live = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVE SALES\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id
		);

		$get_live = $this->admin->get_join('sales_tbl a', $join_live, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as live_sales_unit');

		$data['live'] = $get_live->live_sales_unit;
		$data['live_prev'] = 0;

		$join_dressed_others = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id AND i.brand_name = \'TRADE DISTRIBUTOR\''
		);

		$get_dressed_others = $this->admin->get_join('sales_tbl a', $join_dressed_others, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_others_sales_unit');
		$data['dressed_others'] = $get_dressed_others->dressed_others_sales_unit;
		$data['dressed_others_prev'] = 0;

		$join_dressed_sup = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id AND i.brand_name = \'SUPERMARKET\''
		);

		$get_dressed_sup = $this->admin->get_join('sales_tbl a', $join_dressed_sup, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_sup_sales_unit');
		$data['dressed_sup'] = $get_dressed_sup->dressed_sup_sales_unit;
		$data['dressed_sup_prev'] = 0;


		$join_dressed_retail = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_dressed_retail = $this->admin->get_join('sales_tbl a', $join_dressed_retail, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_retail_sales_unit');
		$data['dressed_retail'] = $get_dressed_retail->dressed_retail_sales_unit;
		$data['dressed_retail_prev'] = 0;

		$join_non_marinated = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'NON MARINATED CUT UPS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id'
			/*'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''*/
		);

		$get_non_marinated = $this->admin->get_join('sales_tbl a', $join_non_marinated, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as non_marinated_sales_unit');
		$data['non_marinated'] = $get_non_marinated->non_marinated_sales_unit;
		$data['non_marinated_prev'] = 0;

		$join_marinated = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code NOT IN ("1000090", "1000092", "1000401", "1000402")',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id'
			/*'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''*/
		);

		$get_marinated = $this->admin->get_join('sales_tbl a', $join_marinated, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as marinated_sales_unit');
		$data['marinated'] = $get_marinated->marinated_sales_unit;
		$data['marinated_prev'] = 0;

		$join_spicy_neck = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = "1000092"',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_spicy_neck = $this->admin->get_join('sales_tbl a', $join_spicy_neck, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as spicy_neck_sales_unit');
		$data['spicy_neck'] = $get_spicy_neck->spicy_neck_sales_unit;
		$data['spicy_neck_prev'] = 0;

		$join_roasted_cutups = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'ROASTED CUT UPS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_roasted_cutups = $this->admin->get_join('sales_tbl a', $join_roasted_cutups, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as roasted_cutups_sales_unit');
		$data['roasted_cutups'] = $get_roasted_cutups->roasted_cutups_sales_unit;
		$data['roasted_cutups_prev'] = 0;

		$join_roasted_chicken = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'ROASTED CHICKEN\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_roasted_chicken = $this->admin->get_join('sales_tbl a', $join_roasted_chicken, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as roasted_chicken_sales_unit');
		$data['roasted_chicken'] = $get_roasted_chicken->roasted_chicken_sales_unit;
		$data['roasted_chicken_prev'] = 0;

		$join_marinated_chicken_raw = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CHICKEN (RAW)\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id'
			/*'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''*/
		);

		$get_marinated_chicken_raw = $this->admin->get_join('sales_tbl a', $join_marinated_chicken_raw, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as marinated_chicken_raw_sales_unit');
		$data['marinated_chicken_raw'] = $get_marinated_chicken_raw->marinated_chicken_raw_sales_unit;
		$data['marinated_chicken_raw_prev'] = 0;

		$join_other = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER SPECIALTY PRODUCTS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_other = $this->admin->get_join('sales_tbl a', $join_other, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as other_sales_unit');
		$data['others'] = $get_other->other_sales_unit;
		$data['others_prev'] = 0;

		$join_liempo = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIEMPO\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_liempo = $this->admin->get_join('sales_tbl a', $join_liempo, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as liempo_sales_unit');
		$data['liempo'] = $get_liempo->liempo_sales_unit;
		$data['liempo_prev'] = 0;

		$join_vap = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER VAP PRODUCTS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_vap = $this->admin->get_join('sales_tbl a', $join_vap, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as vap_sales_unit');
		$data['vap'] = $get_vap->vap_sales_unit;
		$data['vap_prev'] = 0;

		return $data;
	}

	public function price_assumption_report(){
		$year = $this->_active_year();
		$user_info = $this->get_user_info();
 		$cost_center_id = $user_info['cost_center_id'];
 		$bc_id = $user_info['bc_id'];

		$join_live = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = "LIVE"'
		);

		$get_live = $this->admin->get_join('sales_tbl a', $join_live, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['live1'] = 0;
		$data['live2'] = 0;
		$data['live3'] = 0;
		$data['live4'] = 0;
		$data['live5'] = 0;
		$data['live6'] = 0;
		$data['live7'] = 0;
		$data['live8'] = 0;
		$data['live9'] = 0;
		$data['live10'] = 0;
		$data['live11'] = 0;
		$data['live12'] = 0;
		$data['live_total'] = 0;
		$data['live_count'] = 0;
		$data['live_avg'] = 0;
		$data['live_min'] = 0;
		$data['live_max'] = 0;

		foreach($get_live as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['live' . $month] = $asp;

			$data['live_total'] += $asp;

			if($asp < $data['live_min'] || $data['live_count'] == 0){
				$data['live_min'] = $asp;
			}

			if($asp > $data['live_max'] || $data['live_count'] == 0){
				$data['live_max'] = $asp;
			}

			$data['live_count']++;
		}

		$data['live_avg'] = $data['live_total'] != 0 ? $data['live_total'] / $data['live_count'] : 0;


		
		$data['live_prev'] = 0;
		$data['live_prev2'] = 0;

		$live_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIVE', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');-
		
		$data['live_prev_year2_jan'] = 0;
		$data['live_prev_year2_feb'] = 0;
		$data['live_prev_year2_mar'] = 0;
		$data['live_prev_year2_apr'] = 0;
		$data['live_prev_year2_may'] = 0;
		$data['live_prev_year2_jun'] = 0;
		$data['live_prev_year2_jul'] = 0;
		$data['live_prev_year2_aug'] = 0;
		$data['live_prev_year2_sep'] = 0;
		$data['live_prev_year2_oct'] = 0;
		$data['live_prev_year2_nov'] = 0;
		$data['live_prev_year2_dec'] = 0;
		$data['live_prev_year2_avg'] = 0;
		$data['live_prev_year2_min'] = 0;
		$data['live_prev_year2_max'] = 0;

		foreach($live_prev_year2 as $row){
			$data['live_prev_year2_jan'] = $row->jan_price;
			$data['live_prev_year2_feb'] = $row->feb_price;
			$data['live_prev_year2_mar'] = $row->mar_price;
			$data['live_prev_year2_apr'] = $row->apr_price;
			$data['live_prev_year2_may'] = $row->may_price;
			$data['live_prev_year2_jun'] = $row->jun_price;
			$data['live_prev_year2_jul'] = $row->jul_price;
			$data['live_prev_year2_aug'] = $row->aug_price;
			$data['live_prev_year2_sep'] = $row->sep_price;
			$data['live_prev_year2_oct'] = $row->oct_price;
			$data['live_prev_year2_nov'] = $row->nov_price;
			$data['live_prev_year2_dec'] = $row->dec_price;
			$data['live_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['live_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['live_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

		}


		$live_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIVE', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['live_prev_year1_jan'] = 0;
		$data['live_prev_year1_feb'] = 0;
		$data['live_prev_year1_mar'] = 0;
		$data['live_prev_year1_apr'] = 0;
		$data['live_prev_year1_may'] = 0;
		$data['live_prev_year1_jun'] = 0;
		$data['live_prev_year1_jul'] = 0;
		$data['live_prev_year1_aug'] = 0;
		$data['live_prev_year1_sep'] = 0;
		$data['live_prev_year1_oct'] = 0;
		$data['live_prev_year1_nov'] = 0;
		$data['live_prev_year1_dec'] = 0;
		$data['live_prev_year1_avg'] = 0;
		$data['live_prev_year1_min'] = 0;
		$data['live_prev_year1_max'] = 0;

		foreach($live_prev_year1 as $row){
			$data['live_prev_year1_jan'] = $row->jan_price;
			$data['live_prev_year1_feb'] = $row->feb_price;
			$data['live_prev_year1_mar'] = $row->mar_price;
			$data['live_prev_year1_apr'] = $row->apr_price;
			$data['live_prev_year1_may'] = $row->may_price;
			$data['live_prev_year1_jun'] = $row->jun_price;
			$data['live_prev_year1_jul'] = $row->jul_price;
			$data['live_prev_year1_aug'] = $row->aug_price;
			$data['live_prev_year1_sep'] = $row->sep_price;
			$data['live_prev_year1_oct'] = $row->oct_price;
			$data['live_prev_year1_nov'] = $row->nov_price;
			$data['live_prev_year1_dec'] = $row->dec_price;
			$data['live_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['live_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['live_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		$join_tds = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'TRADE DISTRIBUTOR\''
		);

		$get_tds = $this->admin->get_join('sales_tbl a', $join_tds, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['tds1'] = 0;
		$data['tds2'] = 0;
		$data['tds3'] = 0;
		$data['tds4'] = 0;
		$data['tds5'] = 0;
		$data['tds6'] = 0;
		$data['tds7'] = 0;
		$data['tds8'] = 0;
		$data['tds9'] = 0;
		$data['tds10'] = 0;
		$data['tds11'] = 0;
		$data['tds12'] = 0;
		$data['tds_total'] = 0;
		$data['tds_count'] = 0;
		$data['tds_avg'] = 0;
		$data['tds_min'] = 0;
		$data['tds_max'] = 0;

		foreach($get_tds as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['tds' . $month] = $asp;
			$data['tds_total'] += $asp;

			if($asp < $data['tds_min'] || $data['tds_count'] == 0){
				$data['tds_min'] = $asp;
			}

			if($asp > $data['tds_max'] || $data['tds_count'] == 0){
				$data['tds_max'] = $asp;
			}

			$data['tds_count']++;
		}

		$data['tds_avg'] = $data['tds_total'] != 0 ? $data['tds_total'] / $data['tds_count'] : 0;

		$tds_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 2, 'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_prev_year2_jan'] = 0;
		$data['tds_prev_year2_feb'] = 0;
		$data['tds_prev_year2_mar'] = 0;
		$data['tds_prev_year2_apr'] = 0;
		$data['tds_prev_year2_may'] = 0;
		$data['tds_prev_year2_jun'] = 0;
		$data['tds_prev_year2_jul'] = 0;
		$data['tds_prev_year2_aug'] = 0;
		$data['tds_prev_year2_sep'] = 0;
		$data['tds_prev_year2_oct'] = 0;
		$data['tds_prev_year2_nov'] = 0;
		$data['tds_prev_year2_dec'] = 0;
		$data['tds_prev_year2_avg'] = 0;
		$data['tds_prev_year2_min'] = 0;
		$data['tds_prev_year2_max'] = 0;

		foreach($tds_prev_year2 as $row){
			$data['tds_prev_year2_jan'] = $row->jan_price;
			$data['tds_prev_year2_feb'] = $row->feb_price;
			$data['tds_prev_year2_mar'] = $row->mar_price;
			$data['tds_prev_year2_apr'] = $row->apr_price;
			$data['tds_prev_year2_may'] = $row->may_price;
			$data['tds_prev_year2_jun'] = $row->jun_price;
			$data['tds_prev_year2_jul'] = $row->jul_price;
			$data['tds_prev_year2_aug'] = $row->aug_price;
			$data['tds_prev_year2_sep'] = $row->sep_price;
			$data['tds_prev_year2_oct'] = $row->oct_price;
			$data['tds_prev_year2_nov'] = $row->nov_price;
			$data['tds_prev_year2_dec'] = $row->dec_price;
			$data['tds_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['tds_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['tds_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		$tds_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_prev_year1_jan'] = 0;
		$data['tds_prev_year1_feb'] = 0;
		$data['tds_prev_year1_mar'] = 0;
		$data['tds_prev_year1_apr'] = 0;
		$data['tds_prev_year1_may'] = 0;
		$data['tds_prev_year1_jun'] = 0;
		$data['tds_prev_year1_jul'] = 0;
		$data['tds_prev_year1_aug'] = 0;
		$data['tds_prev_year1_sep'] = 0;
		$data['tds_prev_year1_oct'] = 0;
		$data['tds_prev_year1_nov'] = 0;
		$data['tds_prev_year1_dec'] = 0;
		$data['tds_prev_year1_avg'] = 0;
		$data['tds_prev_year1_min'] = 0;
		$data['tds_prev_year1_max'] = 0;

		foreach($tds_prev_year1 as $row){
			$data['tds_prev_year1_jan'] = $row->jan_price;
			$data['tds_prev_year1_feb'] = $row->feb_price;
			$data['tds_prev_year1_mar'] = $row->mar_price;
			$data['tds_prev_year1_apr'] = $row->apr_price;
			$data['tds_prev_year1_may'] = $row->may_price;
			$data['tds_prev_year1_jun'] = $row->jun_price;
			$data['tds_prev_year1_jul'] = $row->jul_price;
			$data['tds_prev_year1_aug'] = $row->aug_price;
			$data['tds_prev_year1_sep'] = $row->sep_price;
			$data['tds_prev_year1_oct'] = $row->oct_price;
			$data['tds_prev_year1_nov'] = $row->nov_price;
			$data['tds_prev_year1_dec'] = $row->dec_price;
			$data['tds_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['tds_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['tds_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		$join_smkt = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'SUPERMARKET\''
		);

		$get_smkt = $this->admin->get_join('sales_tbl a', $join_smkt, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['smkt1'] = 0;
		$data['smkt2'] = 0;
		$data['smkt3'] = 0;
		$data['smkt4'] = 0;
		$data['smkt5'] = 0;
		$data['smkt6'] = 0;
		$data['smkt7'] = 0;
		$data['smkt8'] = 0;
		$data['smkt9'] = 0;
		$data['smkt10'] = 0;
		$data['smkt11'] = 0;
		$data['smkt12'] = 0;
		$data['smkt_total'] = 0;
		$data['smkt_count'] = 0;
		$data['smkt_avg'] = 0;
		$data['smkt_min'] = 0;
		$data['smkt_max'] = 0;

		foreach($get_smkt as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['smkt' . $month] = $asp;
			$data['smkt_total'] += $asp;

			if($asp < $data['smkt_min'] || $data['smkt_count'] == 0){
				$data['smkt_min'] = $asp;
			}

			if($asp > $data['smkt_max'] || $data['smkt_count'] == 0){
				$data['smkt_max'] = $asp;
			}

			$data['smkt_count']++;
		}

		$data['smkt_avg'] = $data['smkt_total'] != 0 ? $data['smkt_total'] / $data['smkt_count'] : 0;

		$smkt_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 2, 'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_prev_year2_jan'] = 0;
		$data['smkt_prev_year2_feb'] = 0;
		$data['smkt_prev_year2_mar'] = 0;
		$data['smkt_prev_year2_apr'] = 0;
		$data['smkt_prev_year2_may'] = 0;
		$data['smkt_prev_year2_jun'] = 0;
		$data['smkt_prev_year2_jul'] = 0;
		$data['smkt_prev_year2_aug'] = 0;
		$data['smkt_prev_year2_sep'] = 0;
		$data['smkt_prev_year2_oct'] = 0;
		$data['smkt_prev_year2_nov'] = 0;
		$data['smkt_prev_year2_dec'] = 0;
		$data['smkt_prev_year2_avg'] = 0;
		$data['smkt_prev_year2_min'] = 0;
		$data['smkt_prev_year2_max'] = 0;

		foreach($smkt_prev_year2 as $row){
			$data['smkt_prev_year2_jan'] = $row->jan_price;
			$data['smkt_prev_year2_feb'] = $row->feb_price;
			$data['smkt_prev_year2_mar'] = $row->mar_price;
			$data['smkt_prev_year2_apr'] = $row->apr_price;
			$data['smkt_prev_year2_may'] = $row->may_price;
			$data['smkt_prev_year2_jun'] = $row->jun_price;
			$data['smkt_prev_year2_jul'] = $row->jul_price;
			$data['smkt_prev_year2_aug'] = $row->aug_price;
			$data['smkt_prev_year2_sep'] = $row->sep_price;
			$data['smkt_prev_year2_oct'] = $row->oct_price;
			$data['smkt_prev_year2_nov'] = $row->nov_price;
			$data['smkt_prev_year2_dec'] = $row->dec_price;
			$data['smkt_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['smkt_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['smkt_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		$smkt_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SUPERMARKET', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 1, 'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_prev_year1_jan'] = 0;
		$data['smkt_prev_year1_feb'] = 0;
		$data['smkt_prev_year1_mar'] = 0;
		$data['smkt_prev_year1_apr'] = 0;
		$data['smkt_prev_year1_may'] = 0;
		$data['smkt_prev_year1_jun'] = 0;
		$data['smkt_prev_year1_jul'] = 0;
		$data['smkt_prev_year1_aug'] = 0;
		$data['smkt_prev_year1_sep'] = 0;
		$data['smkt_prev_year1_oct'] = 0;
		$data['smkt_prev_year1_nov'] = 0;
		$data['smkt_prev_year1_dec'] = 0;
		$data['smkt_prev_year1_avg'] = 0;
		$data['smkt_prev_year1_min'] = 0;
		$data['smkt_prev_year1_max'] = 0;

		foreach($smkt_prev_year1 as $row){
			$data['smkt_prev_year1_jan'] = $row->jan_price;
			$data['smkt_prev_year1_feb'] = $row->feb_price;
			$data['smkt_prev_year1_mar'] = $row->mar_price;
			$data['smkt_prev_year1_apr'] = $row->apr_price;
			$data['smkt_prev_year1_may'] = $row->may_price;
			$data['smkt_prev_year1_jun'] = $row->jun_price;
			$data['smkt_prev_year1_jul'] = $row->jul_price;
			$data['smkt_prev_year1_aug'] = $row->aug_price;
			$data['smkt_prev_year1_sep'] = $row->sep_price;
			$data['smkt_prev_year1_oct'] = $row->oct_price;
			$data['smkt_prev_year1_nov'] = $row->nov_price;
			$data['smkt_prev_year1_dec'] = $row->dec_price;
			$data['smkt_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['smkt_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['smkt_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		$get_ctg_orc = $this->admin->get_query("SELECT p.size_name, AVG(asp_tbl.jan_asp) as orc_jan, AVG(asp_tbl.feb_asp) as orc_feb, AVG(asp_tbl.mar_asp) as orc_mar, AVG(asp_tbl.apr_asp) as orc_apr, AVG(asp_tbl.may_asp) as orc_may, AVG(asp_tbl.jun_asp) as orc_jun, AVG(asp_tbl.jul_asp) as orc_jul, AVG(asp_tbl.aug_asp) as orc_aug, AVG(asp_tbl.sep_asp) as orc_sep, AVG(asp_tbl.oct_asp) as orc_oct, AVG(asp_tbl.nov_asp) as orc_nov, AVG(asp_tbl.dec_asp) as orc_dec FROM material_tbl o, size_tbl p,

		(SELECT m.material_id, m.size_id,

		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-01-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as jan_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-02-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as feb_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-03-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as mar_asp,
    
   		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-04-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as apr_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-05-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as may_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-06-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as jun_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-07-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as jul_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-08-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as aug_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-09-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as sep_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-10-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as oct_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-11-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as nov_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-12-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as dec_asp
    
		FROM material_size_tbl m, brand_tbl n WHERE m.brand_id = n.brand_id AND m.material_size_status = 1 AND n.brand_name = 'CHOOKS-TO-GO' AND m.is_orc = 1) as asp_tbl

		WHERE o.material_id = asp_tbl.material_id AND p.size_id = asp_tbl.size_id GROUP BY p.size_id");

		$data['ctg_reg1'] = $data['ctg_reg2'] = $data['ctg_reg3'] = $data['ctg_reg4'] = $data['ctg_reg5'] = $data['ctg_reg6'] = $data['ctg_reg7'] = $data['ctg_reg8'] = $data['ctg_reg9'] = $data['ctg_reg10'] = $data['ctg_reg11'] = $data['ctg_reg12'] = $data['ctg_reg_total'] = $data['ctg_reg_count'] = $data['ctg_reg_avg'] = $data['ctg_reg_min'] = $data['ctg_reg_max'] = 0;

		$data['ctg_jbo1'] = $data['ctg_jbo2'] = $data['ctg_jbo3'] = $data['ctg_jbo4'] = $data['ctg_jbo5'] = $data['ctg_jbo6'] = $data['ctg_jbo7'] = $data['ctg_jbo8'] = $data['ctg_jbo9'] = $data['ctg_jbo10'] = $data['ctg_jbo11'] = $data['ctg_jbo12'] = $data['ctg_jbo_total'] = $data['ctg_jbo_count'] = $data['ctg_jbo_avg'] = $data['ctg_jbo_min'] = $data['ctg_jbo_max'] = 0;

		$data['ctg_ss1'] = $data['ctg_ss2'] = $data['ctg_ss3'] = $data['ctg_ss4'] = $data['ctg_ss5'] = $data['ctg_ss6'] = $data['ctg_ss7'] = $data['ctg_ss8'] = $data['ctg_ss9'] = $data['ctg_ss10'] = $data['ctg_ss11'] = $data['ctg_ss12'] = $data['ctg_ss_total'] = $data['ctg_ss_count'] = $data['ctg_ss_avg'] = $data['ctg_ss_min'] = $data['ctg_ss_max'] = 0;

		$data['ctg_bt1'] = $data['ctg_bt2'] = $data['ctg_bt3'] = $data['ctg_bt4'] = $data['ctg_bt5'] = $data['ctg_bt6'] = $data['ctg_bt7'] = $data['ctg_bt8'] = $data['ctg_bt9'] = $data['ctg_bt10'] = $data['ctg_bt11'] = $data['ctg_bt12'] = $data['ctg_bt_total'] = $data['ctg_bt_count'] = $data['ctg_bt_avg'] = $data['ctg_bt_min'] = $data['ctg_bt_max'] = 0;

		$data['ctg_half1'] = $data['ctg_half2'] = $data['ctg_half3'] = $data['ctg_half4'] = $data['ctg_half5'] = $data['ctg_half6'] = $data['ctg_half7'] = $data['ctg_half8'] = $data['ctg_half9'] = $data['ctg_half10'] = $data['ctg_half11'] = $data['ctg_half12'] = $data['ctg_half_total'] = $data['ctg_half_count'] = $data['ctg_half_avg'] = $data['ctg_half_min'] = $data['ctg_half_max'] = 0;

		foreach($get_ctg_orc as $row){

			$orc_size = $row->size_name;
			$orc_jan = $row->orc_jan;
			$orc_feb = $row->orc_feb;
			$orc_mar = $row->orc_mar;
			$orc_apr = $row->orc_apr;
			$orc_may = $row->orc_may;
			$orc_jun = $row->orc_jun;
			$orc_jul = $row->orc_jul;
			$orc_aug = $row->orc_aug;
			$orc_sep = $row->orc_sep;
			$orc_oct = $row->orc_oct;
			$orc_nov = $row->orc_nov;
			$orc_dec = $row->orc_dec;
			$orc_min = min($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_max = max($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_avg = ($orc_jan + $orc_feb + $orc_mar + $orc_apr + $orc_may + $orc_jun + $orc_jul + $orc_aug + $orc_sep + $orc_oct + $orc_nov + $orc_dec) / 12;

			if($orc_size == "REGULAR"){
				$data['ctg_reg1'] = $orc_jan;
				$data['ctg_reg2'] = $orc_feb;
				$data['ctg_reg3'] = $orc_mar;
				$data['ctg_reg4'] = $orc_apr;
				$data['ctg_reg5'] = $orc_may;
				$data['ctg_reg6'] = $orc_jun;
				$data['ctg_reg7'] = $orc_jul;
				$data['ctg_reg8'] = $orc_aug;
				$data['ctg_reg9'] = $orc_sep;
				$data['ctg_reg10'] = $orc_oct;
				$data['ctg_reg11'] = $orc_nov;
				$data['ctg_reg12'] = $orc_dec;
				$data['ctg_reg_avg'] = $orc_avg;
				$data['ctg_reg_min'] = $orc_min;
				$data['ctg_reg_max'] = $orc_max;

				$reg_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - REGULAR', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
				foreach($reg_prev_year2 as $row){
					$data['ctg_reg1_year2'] = $row->jan_price;
					$data['ctg_reg2_year2'] = $row->feb_price;
					$data['ctg_reg3_year2'] = $row->mar_price;
					$data['ctg_reg4_year2'] = $row->apr_price;
					$data['ctg_reg5_year2'] = $row->may_price;
					$data['ctg_reg6_year2'] = $row->jun_price;
					$data['ctg_reg7_year2'] = $row->jul_price;
					$data['ctg_reg8_year2'] = $row->aug_price;
					$data['ctg_reg9_year2'] = $row->sep_price;
					$data['ctg_reg10_year2'] = $row->oct_price;
					$data['ctg_reg11_year2'] = $row->nov_price;
					$data['ctg_reg12_year2'] = $row->dec_price;
					$data['ctg_reg_avg_year2'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_reg_min_year2'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_reg_max_year2'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

				$reg_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - REGULAR', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($reg_prev_year1 as $row){
					$data['ctg_reg1_year1'] = $row->jan_price;
					$data['ctg_reg2_year1'] = $row->feb_price;
					$data['ctg_reg3_year1'] = $row->mar_price;
					$data['ctg_reg4_year1'] = $row->apr_price;
					$data['ctg_reg5_year1'] = $row->may_price;
					$data['ctg_reg6_year1'] = $row->jun_price;
					$data['ctg_reg7_year1'] = $row->jul_price;
					$data['ctg_reg8_year1'] = $row->aug_price;
					$data['ctg_reg9_year1'] = $row->sep_price;
					$data['ctg_reg10_year1'] = $row->oct_price;
					$data['ctg_reg11_year1'] = $row->nov_price;
					$data['ctg_reg12_year1'] = $row->dec_price;
					$data['ctg_reg_avg_year1'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_reg_min_year1'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_reg_max_year1'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "JUMBO"){
				$data['ctg_jbo1'] = $orc_jan;
				$data['ctg_jbo2'] = $orc_feb;
				$data['ctg_jbo3'] = $orc_mar;
				$data['ctg_jbo4'] = $orc_apr;
				$data['ctg_jbo5'] = $orc_may;
				$data['ctg_jbo6'] = $orc_jun;
				$data['ctg_jbo7'] = $orc_jul;
				$data['ctg_jbo8'] = $orc_aug;
				$data['ctg_jbo9'] = $orc_sep;
				$data['ctg_jbo10'] = $orc_oct;
				$data['ctg_jbo11'] = $orc_nov;
				$data['ctg_jbo12'] = $orc_dec;
				$data['ctg_jbo_avg'] = $orc_avg;
				$data['ctg_jbo_min'] = $orc_min;
				$data['ctg_jbo_max'] = $orc_max;

				$jbo_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - JUMBO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($jbo_prev_year2 as $row){
					$data['ctg_jbo1_year2'] = $row->jan_price;
					$data['ctg_jbo2_year2'] = $row->feb_price;
					$data['ctg_jbo3_year2'] = $row->mar_price;
					$data['ctg_jbo4_year2'] = $row->apr_price;
					$data['ctg_jbo5_year2'] = $row->may_price;
					$data['ctg_jbo6_year2'] = $row->jun_price;
					$data['ctg_jbo7_year2'] = $row->jul_price;
					$data['ctg_jbo8_year2'] = $row->aug_price;
					$data['ctg_jbo9_year2'] = $row->sep_price;
					$data['ctg_jbo10_year2'] = $row->oct_price;
					$data['ctg_jbo11_year2'] = $row->nov_price;
					$data['ctg_jbo12_year2'] = $row->dec_price;
					$data['ctg_jbo_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_jbo_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_jbo_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

				$jbo_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - JUMBO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($jbo_prev_year1 as $row){
					$data['ctg_jbo1_year1'] = $row->jan_price;
					$data['ctg_jbo2_year1'] = $row->feb_price;
					$data['ctg_jbo3_year1'] = $row->mar_price;
					$data['ctg_jbo4_year1'] = $row->apr_price;
					$data['ctg_jbo5_year1'] = $row->may_price;
					$data['ctg_jbo6_year1'] = $row->jun_price;
					$data['ctg_jbo7_year1'] = $row->jul_price;
					$data['ctg_jbo8_year1'] = $row->aug_price;
					$data['ctg_jbo9_year1'] = $row->sep_price;
					$data['ctg_jbo10_year1'] = $row->oct_price;
					$data['ctg_jbo11_year1'] = $row->nov_price;
					$data['ctg_jbo12_year1'] = $row->dec_price;
					$data['ctg_jbo_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_jbo_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_jbo_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "SUPERSIZE"){
				$data['ctg_ss1'] = $orc_jan;
				$data['ctg_ss2'] = $orc_feb;
				$data['ctg_ss3'] = $orc_mar;
				$data['ctg_ss4'] = $orc_apr;
				$data['ctg_ss5'] = $orc_may;
				$data['ctg_ss6'] = $orc_jun;
				$data['ctg_ss7'] = $orc_jul;
				$data['ctg_ss8'] = $orc_aug;
				$data['ctg_ss9'] = $orc_sep;
				$data['ctg_ss10'] = $orc_oct;
				$data['ctg_ss11'] = $orc_nov;
				$data['ctg_ss12'] = $orc_dec;
				$data['ctg_ss_avg'] = $orc_avg;
				$data['ctg_ss_min'] = $orc_min;
				$data['ctg_ss_max'] = $orc_max;

				$ss_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - SUPERSIZE', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2, 'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($ss_prev_year2 as $row){
					$data['ctg_ss1_year2'] = $row->jan_price;
					$data['ctg_ss2_year2'] = $row->feb_price;
					$data['ctg_ss3_year2'] = $row->mar_price;
					$data['ctg_ss4_year2'] = $row->apr_price;
					$data['ctg_ss5_year2'] = $row->may_price;
					$data['ctg_ss6_year2'] = $row->jun_price;
					$data['ctg_ss7_year2'] = $row->jul_price;
					$data['ctg_ss8_year2'] = $row->aug_price;
					$data['ctg_ss9_year2'] = $row->sep_price;
					$data['ctg_ss10_year2'] = $row->oct_price;
					$data['ctg_ss11_year2'] = $row->nov_price;
					$data['ctg_ss12_year2'] = $row->dec_price;
					$data['ctg_ss_avg_year2'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_ss_min_year2'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_ss_max_year2'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

				$ss_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - SUPERSIZE', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1, 'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($ss_prev_year1 as $row){
					$data['ctg_ss1_year1'] = $row->jan_price;
					$data['ctg_ss2_year1'] = $row->feb_price;
					$data['ctg_ss3_year1'] = $row->mar_price;
					$data['ctg_ss4_year1'] = $row->apr_price;
					$data['ctg_ss5_year1'] = $row->may_price;
					$data['ctg_ss6_year1'] = $row->jun_price;
					$data['ctg_ss7_year1'] = $row->jul_price;
					$data['ctg_ss8_year1'] = $row->aug_price;
					$data['ctg_ss9_year1'] = $row->sep_price;
					$data['ctg_ss10_year1'] = $row->oct_price;
					$data['ctg_ss11_year1'] = $row->nov_price;
					$data['ctg_ss12_year1'] = $row->dec_price;
					$data['ctg_ss_avg_year1'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_ss_min_year1'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_ss_max_year1'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "BIGTIME"){
				$data['ctg_bt1'] = $orc_jan;
				$data['ctg_bt2'] = $orc_feb;
				$data['ctg_bt3'] = $orc_mar;
				$data['ctg_bt4'] = $orc_apr;
				$data['ctg_bt5'] = $orc_may;
				$data['ctg_bt6'] = $orc_jun;
				$data['ctg_bt7'] = $orc_jul;
				$data['ctg_bt8'] = $orc_aug;
				$data['ctg_bt9'] = $orc_sep;
				$data['ctg_bt10'] = $orc_oct;
				$data['ctg_bt11'] = $orc_nov;
				$data['ctg_bt12'] = $orc_dec;
				$data['ctg_bt_avg'] = $orc_avg;
				$data['cctg_bt_min'] = $orc_min;
				$data['ctg_bt_max'] = $orc_max;


				$bt_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - BIGTIME', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2, 'bc_id'	=>	$bc_id),
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($bt_prev_year2 as $row){
					$data['ctg_bt1_year2'] = $row->jan_price;
					$data['ctg_bt2_year2'] = $row->feb_price;
					$data['ctg_bt3_year2'] = $row->mar_price;
					$data['ctg_bt4_year2'] = $row->apr_price;
					$data['ctg_bt5_year2'] = $row->may_price;
					$data['ctg_bt6_year2'] = $row->jun_price;
					$data['ctg_bt7_year2'] = $row->jul_price;
					$data['ctg_bt8_year2'] = $row->aug_price;
					$data['ctg_bt9_year2'] = $row->sep_price;
					$data['ctg_bt10_year2'] = $row->oct_price;
					$data['ctg_bt11_year2'] = $row->nov_price;
					$data['ctg_bt12_year2'] = $row->dec_price;
					$data['ctg_bt_avg_year2'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_bt_min_year2'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_bt_max_year2'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

				$bt_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - BIGTIME', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1, 'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($bt_prev_year1 as $row){
					$data['ctg_bt1_year1'] = $row->jan_price;
					$data['ctg_bt2_year1'] = $row->feb_price;
					$data['ctg_bt3_year1'] = $row->mar_price;
					$data['ctg_bt4_year1'] = $row->apr_price;
					$data['ctg_bt5_year1'] = $row->may_price;
					$data['ctg_bt6_year1'] = $row->jun_price;
					$data['ctg_bt7_year1'] = $row->jul_price;
					$data['ctg_bt8_year1'] = $row->aug_price;
					$data['ctg_bt9_year1'] = $row->sep_price;
					$data['ctg_bt10_year1'] = $row->oct_price;
					$data['ctg_bt11_year1'] = $row->nov_price;
					$data['ctg_bt12_year1'] = $row->dec_price;
					$data['ctg_bt_avg_year1'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_bt_min_year1'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_bt_max_year1'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "HALF"){
				$data['ctg_half1'] = $orc_jan;
				$data['ctg_half2'] = $orc_feb;
				$data['ctg_half3'] = $orc_mar;
				$data['ctg_half4'] = $orc_apr;
				$data['ctg_half5'] = $orc_may;
				$data['ctg_half6'] = $orc_jun;
				$data['ctg_half7'] = $orc_jul;
				$data['ctg_half8'] = $orc_aug;
				$data['ctg_half9'] = $orc_sep;
				$data['ctg_half10'] = $orc_oct;
				$data['ctg_half11'] = $orc_nov;
				$data['ctg_half12'] = $orc_dec;
				$data['ctg_half_avg'] = $orc_avg;
				$data['ctg_half_min'] = $orc_min;
				$data['ctg_half_max'] = $orc_max;

				$half_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - HALF', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id),
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($half_prev_year2 as $row){
					$data['ctg_half1_year2'] = $row->jan_price;
					$data['ctg_half2_year2'] = $row->feb_price;
					$data['ctg_half3_year2'] = $row->mar_price;
					$data['ctg_half4_year2'] = $row->apr_price;
					$data['ctg_half5_year2'] = $row->may_price;
					$data['ctg_half6_year2'] = $row->jun_price;
					$data['ctg_half7_year2'] = $row->jul_price;
					$data['ctg_half8_year2'] = $row->aug_price;
					$data['ctg_half9_year2'] = $row->sep_price;
					$data['ctg_half10_year2'] = $row->oct_price;
					$data['ctg_half11_year2'] = $row->nov_price;
					$data['ctg_half12_year2'] = $row->dec_price;
					$data['ctg_half_avg_year2'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_half_min_year2'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_half_max_year2'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

				$half_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - HALF', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($half_prev_year1 as $row){
					$data['ctg_half1_year1'] = $row->jan_price;
					$data['ctg_half2_year1'] = $row->feb_price;
					$data['ctg_half3_year1'] = $row->mar_price;
					$data['ctg_half4_year1'] = $row->apr_price;
					$data['ctg_half5_year1'] = $row->may_price;
					$data['ctg_half6_year1'] = $row->jun_price;
					$data['ctg_half7_year1'] = $row->jul_price;
					$data['ctg_half8_year1'] = $row->aug_price;
					$data['ctg_half9_year1'] = $row->sep_price;
					$data['ctg_half10_year1'] = $row->oct_price;
					$data['ctg_half11_year1'] = $row->nov_price;
					$data['ctg_half12_year1'] = $row->dec_price;
					$data['ctg_half_avg_year1'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ctg_half_min_year1'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ctg_half_max_year1'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}
			}
		}

		/*CTG Liempo*/
		$join_liempo = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "LIEMPO"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_liempo = $this->admin->get_join('sales_tbl a', $join_liempo, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['liempo1'] = 0;
		$data['liempo2'] = 0;
		$data['liempo3'] = 0;
		$data['liempo4'] = 0;
		$data['liempo5'] = 0;
		$data['liempo6'] = 0;
		$data['liempo7'] = 0;
		$data['liempo8'] = 0;
		$data['liempo9'] = 0;
		$data['liempo10'] = 0;
		$data['liempo11'] = 0;
		$data['liempo12'] = 0;
		$data['liempo_total'] = 0;
		$data['liempo_count'] = 0;
		$data['liempo_avg'] = 0;
		$data['liempo_min'] = 0;
		$data['liempo_max'] = 0;

		foreach($get_liempo as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['liempo' . $month] = $asp;
			$data['liempo_total'] += $asp;

			if($asp < $data['liempo_min'] || $data['liempo_count'] == 0){
				$data['liempo_min'] = $asp;
			}

			if($asp > $data['liempo_max'] || $data['liempo_count'] == 0){
				$data['liempo_max'] = $asp;
			}

			$data['liempo_count']++;
		}

		$data['liempo_avg'] = $data['liempo_total'] != 0 ? $data['liempo_total'] / $data['liempo_count'] : 0;

		$ctg_liempo_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_liempo_prev_year2_jan'] = 0;
		$data['ctg_liempo_prev_year2_feb'] = 0;
		$data['ctg_liempo_prev_year2_mar'] = 0;
		$data['ctg_liempo_prev_year2_apr'] = 0;
		$data['ctg_liempo_prev_year2_may'] = 0;
		$data['ctg_liempo_prev_year2_jun'] = 0;
		$data['ctg_liempo_prev_year2_jul'] = 0;
		$data['ctg_liempo_prev_year2_aug'] = 0;
		$data['ctg_liempo_prev_year2_sep'] = 0;
		$data['ctg_liempo_prev_year2_oct'] = 0;
		$data['ctg_liempo_prev_year2_nov'] = 0;
		$data['ctg_liempo_prev_year2_dec'] = 0;
		$data['ctg_liempo_prev_year2_avg'] = 0;
		$data['ctg_liempo_prev_year2_min'] = 0;
		$data['ctg_liempo_prev_year2_max'] = 0;

		foreach($ctg_liempo_prev_year2 as $row){
			$data['ctg_liempo_prev_year2_jan'] = $row->jan_price;
			$data['ctg_liempo_prev_year2_feb'] = $row->feb_price;
			$data['ctg_liempo_prev_year2_mar'] = $row->mar_price;
			$data['ctg_liempo_prev_year2_apr'] = $row->apr_price;
			$data['ctg_liempo_prev_year2_may'] = $row->may_price;
			$data['ctg_liempo_prev_year2_jun'] = $row->jun_price;
			$data['ctg_liempo_prev_year2_jul'] = $row->jul_price;
			$data['ctg_liempo_prev_year2_aug'] = $row->aug_price;
			$data['ctg_liempo_prev_year2_sep'] = $row->sep_price;
			$data['ctg_liempo_prev_year2_oct'] = $row->oct_price;
			$data['ctg_liempo_prev_year2_nov'] = $row->nov_price;
			$data['ctg_liempo_prev_year2_dec'] = $row->dec_price;
			$data['ctg_liempo_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_liempo_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_liempo_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_liempo_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_liempo_prev_year1_jan'] = 0;
		$data['ctg_liempo_prev_year1_feb'] = 0;
		$data['ctg_liempo_prev_year1_mar'] = 0;
		$data['ctg_liempo_prev_year1_apr'] = 0;
		$data['ctg_liempo_prev_year1_may'] = 0;
		$data['ctg_liempo_prev_year1_jun'] = 0;
		$data['ctg_liempo_prev_year1_jul'] = 0;
		$data['ctg_liempo_prev_year1_aug'] = 0;
		$data['ctg_liempo_prev_year1_sep'] = 0;
		$data['ctg_liempo_prev_year1_oct'] = 0;
		$data['ctg_liempo_prev_year1_nov'] = 0;
		$data['ctg_liempo_prev_year1_dec'] = 0;
		$data['ctg_liempo_prev_year1_avg'] = 0;
		$data['ctg_liempo_prev_year1_min'] = 0;
		$data['ctg_liempo_prev_year1_max'] = 0;

		foreach($ctg_liempo_prev_year1 as $row){
			$data['ctg_liempo_prev_year1_jan'] = $row->jan_price;
			$data['ctg_liempo_prev_year1_feb'] = $row->feb_price;
			$data['ctg_liempo_prev_year1_mar'] = $row->mar_price;
			$data['ctg_liempo_prev_year1_apr'] = $row->apr_price;
			$data['ctg_liempo_prev_year1_may'] = $row->may_price;
			$data['ctg_liempo_prev_year1_jun'] = $row->jun_price;
			$data['ctg_liempo_prev_year1_jul'] = $row->jul_price;
			$data['ctg_liempo_prev_year1_aug'] = $row->aug_price;
			$data['ctg_liempo_prev_year1_sep'] = $row->sep_price;
			$data['ctg_liempo_prev_year1_oct'] = $row->oct_price;
			$data['ctg_liempo_prev_year1_nov'] = $row->nov_price;
			$data['ctg_liempo_prev_year1_dec'] = $row->dec_price;
			$data['ctg_liempo_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_liempo_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_liempo_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*CTG Dressed Chicken*/
		$join_ctg_dressed = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id =' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_dressed = $this->admin->get_join('sales_tbl a', $join_ctg_dressed, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_dressed1'] = 0;
		$data['ctg_dressed2'] = 0;
		$data['ctg_dressed3'] = 0;
		$data['ctg_dressed4'] = 0;
		$data['ctg_dressed5'] = 0;
		$data['ctg_dressed6'] = 0;
		$data['ctg_dressed7'] = 0;
		$data['ctg_dressed8'] = 0;
		$data['ctg_dressed9'] = 0;
		$data['ctg_dressed10'] = 0;
		$data['ctg_dressed11'] = 0;
		$data['ctg_dressed12'] = 0;
		$data['ctg_dressed_total'] = 0;
		$data['ctg_dressed_count'] = 0;
		$data['ctg_dressed_avg'] = 0;
		$data['ctg_dressed_min'] = 0;
		$data['ctg_dressed_max'] = 0;

		foreach($get_ctg_dressed as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_dressed' . $month] = $asp;
			$data['ctg_dressed_total'] += $asp;

			if($asp < $data['ctg_dressed_min'] || $data['ctg_dressed_count'] == 0){
				$data['ctg_dressed_min'] = $asp;
			}

			if($asp > $data['ctg_dressed_max'] || $data['ctg_dressed_count'] == 0){
				$data['ctg_dressed_max'] = $asp;
			}

			$data['ctg_dressed_count']++;
		}

		$data['ctg_dressed_avg'] = $data['ctg_dressed_total'] != 0 ? $data['ctg_dressed_total'] / $data['ctg_dressed_count'] : 0;

		$ctg_dressed_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_dressed_prev_year2_jan'] = 0;
		$data['ctg_dressed_prev_year2_feb'] = 0;
		$data['ctg_dressed_prev_year2_mar'] = 0;
		$data['ctg_dressed_prev_year2_apr'] = 0;
		$data['ctg_dressed_prev_year2_may'] = 0;
		$data['ctg_dressed_prev_year2_jun'] = 0;
		$data['ctg_dressed_prev_year2_jul'] = 0;
		$data['ctg_dressed_prev_year2_aug'] = 0;
		$data['ctg_dressed_prev_year2_sep'] = 0;
		$data['ctg_dressed_prev_year2_oct'] = 0;
		$data['ctg_dressed_prev_year2_nov'] = 0;
		$data['ctg_dressed_prev_year2_dec'] = 0;
		$data['ctg_dressed_prev_year2_avg'] = 0;
		$data['ctg_dressed_prev_year2_min'] = 0;
		$data['ctg_dressed_prev_year2_max'] = 0;

		foreach($ctg_dressed_prev_year2 as $row){
			$data['ctg_dressed_prev_year2_jan'] = $row->jan_price;
			$data['ctg_dressed_prev_year2_feb'] = $row->feb_price;
			$data['ctg_dressed_prev_year2_mar'] = $row->mar_price;
			$data['ctg_dressed_prev_year2_apr'] = $row->apr_price;
			$data['ctg_dressed_prev_year2_may'] = $row->may_price;
			$data['ctg_dressed_prev_year2_jun'] = $row->jun_price;
			$data['ctg_dressed_prev_year2_jul'] = $row->jul_price;
			$data['ctg_dressed_prev_year2_aug'] = $row->aug_price;
			$data['ctg_dressed_prev_year2_sep'] = $row->sep_price;
			$data['ctg_dressed_prev_year2_oct'] = $row->oct_price;
			$data['ctg_dressed_prev_year2_nov'] = $row->nov_price;
			$data['ctg_dressed_prev_year2_dec'] = $row->dec_price;
			$data['ctg_dressed_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_dressed_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_dressed_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_dressed_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_dressed_prev_year1_jan'] = 0;
		$data['ctg_dressed_prev_year1_feb'] = 0;
		$data['ctg_dressed_prev_year1_mar'] = 0;
		$data['ctg_dressed_prev_year1_apr'] = 0;
		$data['ctg_dressed_prev_year1_may'] = 0;
		$data['ctg_dressed_prev_year1_jun'] = 0;
		$data['ctg_dressed_prev_year1_jul'] = 0;
		$data['ctg_dressed_prev_year1_aug'] = 0;
		$data['ctg_dressed_prev_year1_sep'] = 0;
		$data['ctg_dressed_prev_year1_oct'] = 0;
		$data['ctg_dressed_prev_year1_nov'] = 0;
		$data['ctg_dressed_prev_year1_dec'] = 0;
		$data['ctg_dressed_prev_year1_avg'] = 0;
		$data['ctg_dressed_prev_year1_min'] = 0;
		$data['ctg_dressed_prev_year1_max'] = 0;

		foreach($ctg_dressed_prev_year1 as $row){
			$data['ctg_dressed_prev_year1_jan'] = $row->jan_price;
			$data['ctg_dressed_prev_year1_feb'] = $row->feb_price;
			$data['ctg_dressed_prev_year1_mar'] = $row->mar_price;
			$data['ctg_dressed_prev_year1_apr'] = $row->apr_price;
			$data['ctg_dressed_prev_year1_may'] = $row->may_price;
			$data['ctg_dressed_prev_year1_jun'] = $row->jun_price;
			$data['ctg_dressed_prev_year1_jul'] = $row->jul_price;
			$data['ctg_dressed_prev_year1_aug'] = $row->aug_price;
			$data['ctg_dressed_prev_year1_sep'] = $row->sep_price;
			$data['ctg_dressed_prev_year1_oct'] = $row->oct_price;
			$data['ctg_dressed_prev_year1_nov'] = $row->nov_price;
			$data['ctg_dressed_prev_year1_dec'] = $row->dec_price;
			$data['ctg_dressed_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_dressed_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_dressed_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*CTG Chooksies*/
		$join_ctg_chooksies = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 1000204 OR d.material_code = 1000205 OR d.material_code = 1000206)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id =' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_chooksies = $this->admin->get_join('sales_tbl a', $join_ctg_chooksies, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_chooksies1'] = 0;
		$data['ctg_chooksies2'] = 0;
		$data['ctg_chooksies3'] = 0;
		$data['ctg_chooksies4'] = 0;
		$data['ctg_chooksies5'] = 0;
		$data['ctg_chooksies6'] = 0;
		$data['ctg_chooksies7'] = 0;
		$data['ctg_chooksies8'] = 0;
		$data['ctg_chooksies9'] = 0;
		$data['ctg_chooksies10'] = 0;
		$data['ctg_chooksies11'] = 0;
		$data['ctg_chooksies12'] = 0;
		$data['ctg_chooksies_total'] = 0;
		$data['ctg_chooksies_count'] = 0;
		$data['ctg_chooksies_avg'] = 0;
		$data['ctg_chooksies_min'] = 0;
		$data['ctg_chooksies_max'] = 0;

		foreach($get_ctg_chooksies as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_chooksies' . $month] = $asp;
			$data['ctg_chooksies_total'] += $asp;

			if($asp < $data['ctg_chooksies_min'] || $data['ctg_chooksies_count'] == 0){
				$data['ctg_chooksies_min'] = $asp;
			}

			if($asp > $data['ctg_chooksies_max'] || $data['ctg_chooksies_count'] == 0){
				$data['ctg_chooksies_max'] = $asp;
			}

			$data['ctg_chooksies_count']++;
		}

		$data['ctg_chooksies_avg'] = $data['ctg_chooksies_total'] != 0 ? $data['ctg_chooksies_total'] / $data['ctg_chooksies_count'] : 0;


		$ctg_chooksies_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_chooksies_prev_year2_jan'] = 0;
		$data['ctg_chooksies_prev_year2_feb'] = 0;
		$data['ctg_chooksies_prev_year2_mar'] = 0;
		$data['ctg_chooksies_prev_year2_apr'] = 0;
		$data['ctg_chooksies_prev_year2_may'] = 0;
		$data['ctg_chooksies_prev_year2_jun'] = 0;
		$data['ctg_chooksies_prev_year2_jul'] = 0;
		$data['ctg_chooksies_prev_year2_aug'] = 0;
		$data['ctg_chooksies_prev_year2_sep'] = 0;
		$data['ctg_chooksies_prev_year2_oct'] = 0;
		$data['ctg_chooksies_prev_year2_nov'] = 0;
		$data['ctg_chooksies_prev_year2_dec'] = 0;
		$data['ctg_chooksies_prev_year2_avg'] = 0;
		$data['ctg_chooksies_prev_year2_min'] = 0;
		$data['ctg_chooksies_prev_year2_max'] = 0;

		foreach($ctg_chooksies_prev_year2 as $row){
			$data['ctg_chooksies_prev_year2_jan'] = $row->jan_price;
			$data['ctg_chooksies_prev_year2_feb'] = $row->feb_price;
			$data['ctg_chooksies_prev_year2_mar'] = $row->mar_price;
			$data['ctg_chooksies_prev_year2_apr'] = $row->apr_price;
			$data['ctg_chooksies_prev_year2_may'] = $row->may_price;
			$data['ctg_chooksies_prev_year2_jun'] = $row->jun_price;
			$data['ctg_chooksies_prev_year2_jul'] = $row->jul_price;
			$data['ctg_chooksies_prev_year2_aug'] = $row->aug_price;
			$data['ctg_chooksies_prev_year2_sep'] = $row->sep_price;
			$data['ctg_chooksies_prev_year2_oct'] = $row->oct_price;
			$data['ctg_chooksies_prev_year2_nov'] = $row->nov_price;
			$data['ctg_chooksies_prev_year2_dec'] = $row->dec_price;
			$data['ctg_chooksies_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_chooksies_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_chooksies_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_chooksies_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_chooksies_prev_year1_jan'] = 0;
		$data['ctg_chooksies_prev_year1_feb'] = 0;
		$data['ctg_chooksies_prev_year1_mar'] = 0;
		$data['ctg_chooksies_prev_year1_apr'] = 0;
		$data['ctg_chooksies_prev_year1_may'] = 0;
		$data['ctg_chooksies_prev_year1_jun'] = 0;
		$data['ctg_chooksies_prev_year1_jul'] = 0;
		$data['ctg_chooksies_prev_year1_aug'] = 0;
		$data['ctg_chooksies_prev_year1_sep'] = 0;
		$data['ctg_chooksies_prev_year1_oct'] = 0;
		$data['ctg_chooksies_prev_year1_nov'] = 0;
		$data['ctg_chooksies_prev_year1_dec'] = 0;
		$data['ctg_chooksies_prev_year1_avg'] = 0;
		$data['ctg_chooksies_prev_year1_min'] = 0;
		$data['ctg_chooksies_prev_year1_max'] = 0;

		foreach($ctg_chooksies_prev_year1 as $row){
			$data['ctg_chooksies_prev_year1_jan'] = $row->jan_price;
			$data['ctg_chooksies_prev_year1_feb'] = $row->feb_price;
			$data['ctg_chooksies_prev_year1_mar'] = $row->mar_price;
			$data['ctg_chooksies_prev_year1_apr'] = $row->apr_price;
			$data['ctg_chooksies_prev_year1_may'] = $row->may_price;
			$data['ctg_chooksies_prev_year1_jun'] = $row->jun_price;
			$data['ctg_chooksies_prev_year1_jul'] = $row->jul_price;
			$data['ctg_chooksies_prev_year1_aug'] = $row->aug_price;
			$data['ctg_chooksies_prev_year1_sep'] = $row->sep_price;
			$data['ctg_chooksies_prev_year1_oct'] = $row->oct_price;
			$data['ctg_chooksies_prev_year1_nov'] = $row->nov_price;
			$data['ctg_chooksies_prev_year1_dec'] = $row->dec_price;
			$data['ctg_chooksies_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_chooksies_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_chooksies_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$join_ctg_marinado = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000638',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id =' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_marinado = $this->admin->get_join('sales_tbl a', $join_ctg_marinado, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_marinado1'] = 0;
		$data['ctg_marinado2'] = 0;
		$data['ctg_marinado3'] = 0;
		$data['ctg_marinado4'] = 0;
		$data['ctg_marinado5'] = 0;
		$data['ctg_marinado6'] = 0;
		$data['ctg_marinado7'] = 0;
		$data['ctg_marinado8'] = 0;
		$data['ctg_marinado9'] = 0;
		$data['ctg_marinado10'] = 0;
		$data['ctg_marinado11'] = 0;
		$data['ctg_marinado12'] = 0;
		$data['ctg_marinado_total'] = 0;
		$data['ctg_marinado_count'] = 0;
		$data['ctg_marinado_avg'] = 0;
		$data['ctg_marinado_min'] = 0;
		$data['ctg_marinado_max'] = 0;

		foreach($get_ctg_marinado as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_marinado' . $month] = $asp;
			$data['ctg_marinado_total'] += $asp;

			if($asp < $data['ctg_marinado_min'] || $data['ctg_marinado_count'] == 0){
				$data['ctg_marinado_min'] = $asp;
			}

			if($asp > $data['ctg_marinado_max'] || $data['ctg_marinado_count'] == 0){
				$data['ctg_marinado_max'] = $asp;
			}

			$data['ctg_marinado_count']++;
		}

		$data['ctg_marinado_avg'] = $data['ctg_marinado_total'] != 0 ? $data['ctg_marinado_total'] / $data['ctg_marinado_count'] : 0;

		$ctg_marinado_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_marinado_prev_year2_jan'] = 0;
		$data['ctg_marinado_prev_year2_feb'] = 0;
		$data['ctg_marinado_prev_year2_mar'] = 0;
		$data['ctg_marinado_prev_year2_apr'] = 0;
		$data['ctg_marinado_prev_year2_may'] = 0;
		$data['ctg_marinado_prev_year2_jun'] = 0;
		$data['ctg_marinado_prev_year2_jul'] = 0;
		$data['ctg_marinado_prev_year2_aug'] = 0;
		$data['ctg_marinado_prev_year2_sep'] = 0;
		$data['ctg_marinado_prev_year2_oct'] = 0;
		$data['ctg_marinado_prev_year2_nov'] = 0;
		$data['ctg_marinado_prev_year2_dec'] = 0;
		$data['ctg_marinado_prev_year2_avg'] = 0;
		$data['ctg_marinado_prev_year2_min'] = 0;
		$data['ctg_marinado_prev_year2_max'] = 0;

		foreach($ctg_marinado_prev_year2 as $row){
			$data['ctg_marinado_prev_year2_jan'] = $row->jan_price;
			$data['ctg_marinado_prev_year2_feb'] = $row->feb_price;
			$data['ctg_marinado_prev_year2_mar'] = $row->mar_price;
			$data['ctg_marinado_prev_year2_apr'] = $row->apr_price;
			$data['ctg_marinado_prev_year2_may'] = $row->may_price;
			$data['ctg_marinado_prev_year2_jun'] = $row->jun_price;
			$data['ctg_marinado_prev_year2_jul'] = $row->jul_price;
			$data['ctg_marinado_prev_year2_aug'] = $row->aug_price;
			$data['ctg_marinado_prev_year2_sep'] = $row->sep_price;
			$data['ctg_marinado_prev_year2_oct'] = $row->oct_price;
			$data['ctg_marinado_prev_year2_nov'] = $row->nov_price;
			$data['ctg_marinado_prev_year2_dec'] = $row->dec_price;
			$data['ctg_marinado_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_marinado_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_marinado_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_marinado_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_marinado_prev_year1_jan'] = 0;
		$data['ctg_marinado_prev_year1_feb'] = 0;
		$data['ctg_marinado_prev_year1_mar'] = 0;
		$data['ctg_marinado_prev_year1_apr'] = 0;
		$data['ctg_marinado_prev_year1_may'] = 0;
		$data['ctg_marinado_prev_year1_jun'] = 0;
		$data['ctg_marinado_prev_year1_jul'] = 0;
		$data['ctg_marinado_prev_year1_aug'] = 0;
		$data['ctg_marinado_prev_year1_sep'] = 0;
		$data['ctg_marinado_prev_year1_oct'] = 0;
		$data['ctg_marinado_prev_year1_nov'] = 0;
		$data['ctg_marinado_prev_year1_dec'] = 0;
		$data['ctg_marinado_prev_year1_avg'] = 0;
		$data['ctg_marinado_prev_year1_min'] = 0;
		$data['ctg_marinado_prev_year1_max'] = 0;

		foreach($ctg_marinado_prev_year1 as $row){
			$data['ctg_marinado_prev_year1_jan'] = $row->jan_price;
			$data['ctg_marinado_prev_year1_feb'] = $row->feb_price;
			$data['ctg_marinado_prev_year1_mar'] = $row->mar_price;
			$data['ctg_marinado_prev_year1_apr'] = $row->apr_price;
			$data['ctg_marinado_prev_year1_may'] = $row->may_price;
			$data['ctg_marinado_prev_year1_jun'] = $row->jun_price;
			$data['ctg_marinado_prev_year1_jul'] = $row->jul_price;
			$data['ctg_marinado_prev_year1_aug'] = $row->aug_price;
			$data['ctg_marinado_prev_year1_sep'] = $row->sep_price;
			$data['ctg_marinado_prev_year1_oct'] = $row->oct_price;
			$data['ctg_marinado_prev_year1_nov'] = $row->nov_price;
			$data['ctg_marinado_prev_year1_dec'] = $row->dec_price;
			$data['ctg_marinado_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_marinado_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_marinado_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$join_ctg_spicy = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 1000092 OR d.material_code = 1000401 OR d.material_code = 1000402 OR d.material_code = 1000617)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id =' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_spicy = $this->admin->get_join('sales_tbl a', $join_ctg_spicy, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_spicy1'] = 0;
		$data['ctg_spicy2'] = 0;
		$data['ctg_spicy3'] = 0;
		$data['ctg_spicy4'] = 0;
		$data['ctg_spicy5'] = 0;
		$data['ctg_spicy6'] = 0;
		$data['ctg_spicy7'] = 0;
		$data['ctg_spicy8'] = 0;
		$data['ctg_spicy9'] = 0;
		$data['ctg_spicy10'] = 0;
		$data['ctg_spicy11'] = 0;
		$data['ctg_spicy12'] = 0;
		$data['ctg_spicy_total'] = 0;
		$data['ctg_spicy_count'] = 0;
		$data['ctg_spicy_avg'] = 0;
		$data['ctg_spicy_min'] = 0;
		$data['ctg_spicy_max'] = 0;

		foreach($get_ctg_spicy as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_spicy' . $month] = $asp;
			$data['ctg_spicy_total'] += $asp;

			if($asp < $data['ctg_spicy_min'] || $data['ctg_spicy_count'] == 0){
				$data['ctg_spicy_min'] = $asp;
			}

			if($asp > $data['ctg_spicy_max'] || $data['ctg_spicy_count'] == 0){
				$data['ctg_spicy_max'] = $asp;
			}

			$data['ctg_spicy_count']++;
		}

		$data['ctg_spicy_avg'] = $data['ctg_spicy_total'] != 0 ? $data['ctg_spicy_total'] / $data['ctg_spicy_count'] : 0;

		$ctg_spicy_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_spicy_prev_year2_jan'] = 0;
		$data['ctg_spicy_prev_year2_feb'] = 0;
		$data['ctg_spicy_prev_year2_mar'] = 0;
		$data['ctg_spicy_prev_year2_apr'] = 0;
		$data['ctg_spicy_prev_year2_may'] = 0;
		$data['ctg_spicy_prev_year2_jun'] = 0;
		$data['ctg_spicy_prev_year2_jul'] = 0;
		$data['ctg_spicy_prev_year2_aug'] = 0;
		$data['ctg_spicy_prev_year2_sep'] = 0;
		$data['ctg_spicy_prev_year2_oct'] = 0;
		$data['ctg_spicy_prev_year2_nov'] = 0;
		$data['ctg_spicy_prev_year2_dec'] = 0;
		$data['ctg_spicy_prev_year2_avg'] = 0;
		$data['ctg_spicy_prev_year2_min'] = 0;
		$data['ctg_spicy_prev_year2_max'] = 0;

		foreach($ctg_spicy_prev_year2 as $row){
			$data['ctg_spicy_prev_year2_jan'] = $row->jan_price;
			$data['ctg_spicy_prev_year2_feb'] = $row->feb_price;
			$data['ctg_spicy_prev_year2_mar'] = $row->mar_price;
			$data['ctg_spicy_prev_year2_apr'] = $row->apr_price;
			$data['ctg_spicy_prev_year2_may'] = $row->may_price;
			$data['ctg_spicy_prev_year2_jun'] = $row->jun_price;
			$data['ctg_spicy_prev_year2_jul'] = $row->jul_price;
			$data['ctg_spicy_prev_year2_aug'] = $row->aug_price;
			$data['ctg_spicy_prev_year2_sep'] = $row->sep_price;
			$data['ctg_spicy_prev_year2_oct'] = $row->oct_price;
			$data['ctg_spicy_prev_year2_nov'] = $row->nov_price;
			$data['ctg_spicy_prev_year2_dec'] = $row->dec_price;
			$data['ctg_spicy_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_spicy_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_spicy_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_spicy_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_spicy_prev_year1_jan'] = 0;
		$data['ctg_spicy_prev_year1_feb'] = 0;
		$data['ctg_spicy_prev_year1_mar'] = 0;
		$data['ctg_spicy_prev_year1_apr'] = 0;
		$data['ctg_spicy_prev_year1_may'] = 0;
		$data['ctg_spicy_prev_year1_jun'] = 0;
		$data['ctg_spicy_prev_year1_jul'] = 0;
		$data['ctg_spicy_prev_year1_aug'] = 0;
		$data['ctg_spicy_prev_year1_sep'] = 0;
		$data['ctg_spicy_prev_year1_oct'] = 0;
		$data['ctg_spicy_prev_year1_nov'] = 0;
		$data['ctg_spicy_prev_year1_dec'] = 0;
		$data['ctg_spicy_prev_year1_avg'] = 0;
		$data['ctg_spicy_prev_year1_min'] = 0;
		$data['ctg_spicy_prev_year1_max'] = 0;

		foreach($ctg_spicy_prev_year1 as $row){
			$data['ctg_spicy_prev_year1_jan'] = $row->jan_price;
			$data['ctg_spicy_prev_year1_feb'] = $row->feb_price;
			$data['ctg_spicy_prev_year1_mar'] = $row->mar_price;
			$data['ctg_spicy_prev_year1_apr'] = $row->apr_price;
			$data['ctg_spicy_prev_year1_may'] = $row->may_price;
			$data['ctg_spicy_prev_year1_jun'] = $row->jun_price;
			$data['ctg_spicy_prev_year1_jul'] = $row->jul_price;
			$data['ctg_spicy_prev_year1_aug'] = $row->aug_price;
			$data['ctg_spicy_prev_year1_sep'] = $row->sep_price;
			$data['ctg_spicy_prev_year1_oct'] = $row->oct_price;
			$data['ctg_spicy_prev_year1_nov'] = $row->nov_price;
			$data['ctg_spicy_prev_year1_dec'] = $row->dec_price;
			$data['ctg_spicy_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_spicy_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_spicy_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*Barbeque*/
		$join_ctg_barbeque = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000548',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER SPECIALTY PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_barbeque = $this->admin->get_join('sales_tbl a', $join_ctg_barbeque, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_barbeque1'] = 0;
		$data['ctg_barbeque2'] = 0;
		$data['ctg_barbeque3'] = 0;
		$data['ctg_barbeque4'] = 0;
		$data['ctg_barbeque5'] = 0;
		$data['ctg_barbeque6'] = 0;
		$data['ctg_barbeque7'] = 0;
		$data['ctg_barbeque8'] = 0;
		$data['ctg_barbeque9'] = 0;
		$data['ctg_barbeque10'] = 0;
		$data['ctg_barbeque11'] = 0;
		$data['ctg_barbeque12'] = 0;
		$data['ctg_barbeque_total'] = 0;
		$data['ctg_barbeque_count'] = 0;
		$data['ctg_barbeque_avg'] = 0;
		$data['ctg_barbeque_min'] = 0;
		$data['ctg_barbeque_max'] = 0;

		foreach($get_ctg_barbeque as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_barbeque' . $month] = $asp;
			$data['ctg_barbeque_total'] += $asp;

			if($asp < $data['ctg_barbeque_min'] || $data['ctg_barbeque_count'] == 0){
				$data['ctg_barbeque_min'] = $asp;
			}

			if($asp > $data['ctg_barbeque_max'] || $data['ctg_barbeque_count'] == 0){
				$data['ctg_barbeque_max'] = $asp;
			}

			$data['ctg_barbeque_count']++;
		}

		$data['ctg_barbeque_avg'] = $data['ctg_barbeque_total'] != 0 ? $data['ctg_barbeque_total'] / $data['ctg_barbeque_count'] : 0;

		$ctg_barbecue_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BBQ', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_barbecue_prev_year2_jan'] = 0;
		$data['ctg_barbecue_prev_year2_feb'] = 0;
		$data['ctg_barbecue_prev_year2_mar'] = 0;
		$data['ctg_barbecue_prev_year2_apr'] = 0;
		$data['ctg_barbecue_prev_year2_may'] = 0;
		$data['ctg_barbecue_prev_year2_jun'] = 0;
		$data['ctg_barbecue_prev_year2_jul'] = 0;
		$data['ctg_barbecue_prev_year2_aug'] = 0;
		$data['ctg_barbecue_prev_year2_sep'] = 0;
		$data['ctg_barbecue_prev_year2_oct'] = 0;
		$data['ctg_barbecue_prev_year2_nov'] = 0;
		$data['ctg_barbecue_prev_year2_dec'] = 0;
		$data['ctg_barbecue_prev_year2_avg'] = 0;
		$data['ctg_barbecue_prev_year2_min'] = 0;
		$data['ctg_barbecue_prev_year2_max'] = 0;

		foreach($ctg_barbecue_prev_year2 as $row){
			$data['ctg_barbecue_prev_year2_jan'] = $row->jan_price;
			$data['ctg_barbecue_prev_year2_feb'] = $row->feb_price;
			$data['ctg_barbecue_prev_year2_mar'] = $row->mar_price;
			$data['ctg_barbecue_prev_year2_apr'] = $row->apr_price;
			$data['ctg_barbecue_prev_year2_may'] = $row->may_price;
			$data['ctg_barbecue_prev_year2_jun'] = $row->jun_price;
			$data['ctg_barbecue_prev_year2_jul'] = $row->jul_price;
			$data['ctg_barbecue_prev_year2_aug'] = $row->aug_price;
			$data['ctg_barbecue_prev_year2_sep'] = $row->sep_price;
			$data['ctg_barbecue_prev_year2_oct'] = $row->oct_price;
			$data['ctg_barbecue_prev_year2_nov'] = $row->nov_price;
			$data['ctg_barbecue_prev_year2_dec'] = $row->dec_price;
			$data['ctg_barbecue_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_barbecue_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_barbecue_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_barbecue_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BBQ', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_barbecue_prev_year1_jan'] = 0;
		$data['ctg_barbecue_prev_year1_feb'] = 0;
		$data['ctg_barbecue_prev_year1_mar'] = 0;
		$data['ctg_barbecue_prev_year1_apr'] = 0;
		$data['ctg_barbecue_prev_year1_may'] = 0;
		$data['ctg_barbecue_prev_year1_jun'] = 0;
		$data['ctg_barbecue_prev_year1_jul'] = 0;
		$data['ctg_barbecue_prev_year1_aug'] = 0;
		$data['ctg_barbecue_prev_year1_sep'] = 0;
		$data['ctg_barbecue_prev_year1_oct'] = 0;
		$data['ctg_barbecue_prev_year1_nov'] = 0;
		$data['ctg_barbecue_prev_year1_dec'] = 0;
		$data['ctg_barbecue_prev_year1_avg'] = 0;
		$data['ctg_barbecue_prev_year1_min'] = 0;
		$data['ctg_barbecue_prev_year1_max'] = 0;

		foreach($ctg_barbecue_prev_year1 as $row){
			$data['ctg_barbecue_prev_year1_jan'] = $row->jan_price;
			$data['ctg_barbecue_prev_year1_feb'] = $row->feb_price;
			$data['ctg_barbecue_prev_year1_mar'] = $row->mar_price;
			$data['ctg_barbecue_prev_year1_apr'] = $row->apr_price;
			$data['ctg_barbecue_prev_year1_may'] = $row->may_price;
			$data['ctg_barbecue_prev_year1_jun'] = $row->jun_price;
			$data['ctg_barbecue_prev_year1_jul'] = $row->jul_price;
			$data['ctg_barbecue_prev_year1_aug'] = $row->aug_price;
			$data['ctg_barbecue_prev_year1_sep'] = $row->sep_price;
			$data['ctg_barbecue_prev_year1_oct'] = $row->oct_price;
			$data['ctg_barbecue_prev_year1_nov'] = $row->nov_price;
			$data['ctg_barbecue_prev_year1_dec'] = $row->dec_price;
			$data['ctg_barbecue_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_barbecue_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_barbecue_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*Nuggets*/
		$join_ctg_nuggets = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 1000403 OR d.material_code = 4000000)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER VAP PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_nuggets = $this->admin->get_join('sales_tbl a', $join_ctg_nuggets, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_nuggets1'] = 0;
		$data['ctg_nuggets2'] = 0;
		$data['ctg_nuggets3'] = 0;
		$data['ctg_nuggets4'] = 0;
		$data['ctg_nuggets5'] = 0;
		$data['ctg_nuggets6'] = 0;
		$data['ctg_nuggets7'] = 0;
		$data['ctg_nuggets8'] = 0;
		$data['ctg_nuggets9'] = 0;
		$data['ctg_nuggets10'] = 0;
		$data['ctg_nuggets11'] = 0;
		$data['ctg_nuggets12'] = 0;
		$data['ctg_nuggets_total'] = 0;
		$data['ctg_nuggets_count'] = 0;
		$data['ctg_nuggets_avg'] = 0;
		$data['ctg_nuggets_min'] = 0;
		$data['ctg_nuggets_max'] = 0;

		foreach($get_ctg_nuggets as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_nuggets' . $month] = $asp;
			$data['ctg_nuggets_total'] += $asp;

			if($asp < $data['ctg_nuggets_min'] || $data['ctg_nuggets_count'] == 0){
				$data['ctg_nuggets_min'] = $asp;
			}

			if($asp > $data['ctg_nuggets_max'] || $data['ctg_nuggets_count'] == 0){
				$data['ctg_nuggets_max'] = $asp;
			}

			$data['ctg_nuggets_count']++;
		}

		$data['ctg_nuggets_avg'] = $data['ctg_nuggets_total'] != 0 ? $data['ctg_nuggets_total'] / $data['ctg_nuggets_count'] : 0;


		$ctg_nuggets_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-Nuggets', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_nuggets_prev_year2_jan'] = 0;
		$data['ctg_nuggets_prev_year2_feb'] = 0;
		$data['ctg_nuggets_prev_year2_mar'] = 0;
		$data['ctg_nuggets_prev_year2_apr'] = 0;
		$data['ctg_nuggets_prev_year2_may'] = 0;
		$data['ctg_nuggets_prev_year2_jun'] = 0;
		$data['ctg_nuggets_prev_year2_jul'] = 0;
		$data['ctg_nuggets_prev_year2_aug'] = 0;
		$data['ctg_nuggets_prev_year2_sep'] = 0;
		$data['ctg_nuggets_prev_year2_oct'] = 0;
		$data['ctg_nuggets_prev_year2_nov'] = 0;
		$data['ctg_nuggets_prev_year2_dec'] = 0;
		$data['ctg_nuggets_prev_year2_avg'] = 0;
		$data['ctg_nuggets_prev_year2_min'] = 0;
		$data['ctg_nuggets_prev_year2_max'] = 0;

		foreach($ctg_nuggets_prev_year2 as $row){
			$data['ctg_nuggets_prev_year2_jan'] = $row->jan_price;
			$data['ctg_nuggets_prev_year2_feb'] = $row->feb_price;
			$data['ctg_nuggets_prev_year2_mar'] = $row->mar_price;
			$data['ctg_nuggets_prev_year2_apr'] = $row->apr_price;
			$data['ctg_nuggets_prev_year2_may'] = $row->may_price;
			$data['ctg_nuggets_prev_year2_jun'] = $row->jun_price;
			$data['ctg_nuggets_prev_year2_jul'] = $row->jul_price;
			$data['ctg_nuggets_prev_year2_aug'] = $row->aug_price;
			$data['ctg_nuggets_prev_year2_sep'] = $row->sep_price;
			$data['ctg_nuggets_prev_year2_oct'] = $row->oct_price;
			$data['ctg_nuggets_prev_year2_nov'] = $row->nov_price;
			$data['ctg_nuggets_prev_year2_dec'] = $row->dec_price;
			$data['ctg_nuggets_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_nuggets_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_nuggets_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_nuggets_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-NuggetsQ', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_nuggets_prev_year1_jan'] = 0;
		$data['ctg_nuggets_prev_year1_feb'] = 0;
		$data['ctg_nuggets_prev_year1_mar'] = 0;
		$data['ctg_nuggets_prev_year1_apr'] = 0;
		$data['ctg_nuggets_prev_year1_may'] = 0;
		$data['ctg_nuggets_prev_year1_jun'] = 0;
		$data['ctg_nuggets_prev_year1_jul'] = 0;
		$data['ctg_nuggets_prev_year1_aug'] = 0;
		$data['ctg_nuggets_prev_year1_sep'] = 0;
		$data['ctg_nuggets_prev_year1_oct'] = 0;
		$data['ctg_nuggets_prev_year1_nov'] = 0;
		$data['ctg_nuggets_prev_year1_dec'] = 0;
		$data['ctg_nuggets_prev_year1_avg'] = 0;
		$data['ctg_nuggets_prev_year1_min'] = 0;
		$data['ctg_nuggets_prev_year1_max'] = 0;

		foreach($ctg_nuggets_prev_year1 as $row){
			$data['ctg_nuggets_prev_year1_jan'] = $row->jan_price;
			$data['ctg_nuggets_prev_year1_feb'] = $row->feb_price;
			$data['ctg_nuggets_prev_year1_mar'] = $row->mar_price;
			$data['ctg_nuggets_prev_year1_apr'] = $row->apr_price;
			$data['ctg_nuggets_prev_year1_may'] = $row->may_price;
			$data['ctg_nuggets_prev_year1_jun'] = $row->jun_price;
			$data['ctg_nuggets_prev_year1_jul'] = $row->jul_price;
			$data['ctg_nuggets_prev_year1_aug'] = $row->aug_price;
			$data['ctg_nuggets_prev_year1_sep'] = $row->sep_price;
			$data['ctg_nuggets_prev_year1_oct'] = $row->oct_price;
			$data['ctg_nuggets_prev_year1_nov'] = $row->nov_price;
			$data['ctg_nuggets_prev_year1_dec'] = $row->dec_price;
			$data['ctg_nuggets_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_nuggets_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_nuggets_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*Marinated Raw*/
		$join_ctg_raw = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CHICKEN (RAW)\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_raw = $this->admin->get_join('sales_tbl a', $join_ctg_raw, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_raw1'] = 0;
		$data['ctg_raw2'] = 0;
		$data['ctg_raw3'] = 0;
		$data['ctg_raw4'] = 0;
		$data['ctg_raw5'] = 0;
		$data['ctg_raw6'] = 0;
		$data['ctg_raw7'] = 0;
		$data['ctg_raw8'] = 0;
		$data['ctg_raw9'] = 0;
		$data['ctg_raw10'] = 0;
		$data['ctg_raw11'] = 0;
		$data['ctg_raw12'] = 0;
		$data['ctg_raw_total'] = 0;
		$data['ctg_raw_count'] = 0;
		$data['ctg_raw_avg'] = 0;
		$data['ctg_raw_min'] = 0;
		$data['ctg_raw_max'] = 0;

		foreach($get_ctg_raw as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_raw' . $month] = $asp;
			$data['ctg_raw_total'] += $asp;

			if($asp < $data['ctg_raw_min'] || $data['ctg_raw_count'] == 0){
				$data['ctg_raw_min'] = $asp;
			}

			if($asp > $data['ctg_raw_max'] || $data['ctg_raw_count'] == 0){
				$data['ctg_raw_max'] = $asp;
			}

			$data['ctg_raw_count']++;
		}

		$data['ctg_raw_avg'] = $data['ctg_raw_total'] != 0 ? $data['ctg_raw_total'] / $data['ctg_raw_count'] : 0;


		$ctg_raw_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINATED CHICKEN RAW', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_raw_prev_year2_jan'] = 0;
		$data['ctg_raw_prev_year2_feb'] = 0;
		$data['ctg_raw_prev_year2_mar'] = 0;
		$data['ctg_raw_prev_year2_apr'] = 0;
		$data['ctg_raw_prev_year2_may'] = 0;
		$data['ctg_raw_prev_year2_jun'] = 0;
		$data['ctg_raw_prev_year2_jul'] = 0;
		$data['ctg_raw_prev_year2_aug'] = 0;
		$data['ctg_raw_prev_year2_sep'] = 0;
		$data['ctg_raw_prev_year2_oct'] = 0;
		$data['ctg_raw_prev_year2_nov'] = 0;
		$data['ctg_raw_prev_year2_dec'] = 0;
		$data['ctg_raw_prev_year2_avg'] = 0;
		$data['ctg_raw_prev_year2_min'] = 0;
		$data['ctg_raw_prev_year2_max'] = 0;

		foreach($ctg_raw_prev_year2 as $row){
			$data['ctg_raw_prev_year2_jan'] = $row->jan_price;
			$data['ctg_raw_prev_year2_feb'] = $row->feb_price;
			$data['ctg_raw_prev_year2_mar'] = $row->mar_price;
			$data['ctg_raw_prev_year2_apr'] = $row->apr_price;
			$data['ctg_raw_prev_year2_may'] = $row->may_price;
			$data['ctg_raw_prev_year2_jun'] = $row->jun_price;
			$data['ctg_raw_prev_year2_jul'] = $row->jul_price;
			$data['ctg_raw_prev_year2_aug'] = $row->aug_price;
			$data['ctg_raw_prev_year2_sep'] = $row->sep_price;
			$data['ctg_raw_prev_year2_oct'] = $row->oct_price;
			$data['ctg_raw_prev_year2_nov'] = $row->nov_price;
			$data['ctg_raw_prev_year2_dec'] = $row->dec_price;
			$data['ctg_raw_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_raw_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_raw_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_raw_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINATED CHICKEN RAW', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_raw_prev_year1_jan'] = 0;
		$data['ctg_raw_prev_year1_feb'] = 0;
		$data['ctg_raw_prev_year1_mar'] = 0;
		$data['ctg_raw_prev_year1_apr'] = 0;
		$data['ctg_raw_prev_year1_may'] = 0;
		$data['ctg_raw_prev_year1_jun'] = 0;
		$data['ctg_raw_prev_year1_jul'] = 0;
		$data['ctg_raw_prev_year1_aug'] = 0;
		$data['ctg_raw_prev_year1_sep'] = 0;
		$data['ctg_raw_prev_year1_oct'] = 0;
		$data['ctg_raw_prev_year1_nov'] = 0;
		$data['ctg_raw_prev_year1_dec'] = 0;
		$data['ctg_raw_prev_year1_avg'] = 0;
		$data['ctg_raw_prev_year1_min'] = 0;
		$data['ctg_raw_prev_year1_max'] = 0;

		foreach($ctg_raw_prev_year1 as $row){
			$data['ctg_raw_prev_year1_jan'] = $row->jan_price;
			$data['ctg_raw_prev_year1_feb'] = $row->feb_price;
			$data['ctg_raw_prev_year1_mar'] = $row->mar_price;
			$data['ctg_raw_prev_year1_apr'] = $row->apr_price;
			$data['ctg_raw_prev_year1_may'] = $row->may_price;
			$data['ctg_raw_prev_year1_jun'] = $row->jun_price;
			$data['ctg_raw_prev_year1_jul'] = $row->jul_price;
			$data['ctg_raw_prev_year1_aug'] = $row->aug_price;
			$data['ctg_raw_prev_year1_sep'] = $row->sep_price;
			$data['ctg_raw_prev_year1_oct'] = $row->oct_price;
			$data['ctg_raw_prev_year1_nov'] = $row->nov_price;
			$data['ctg_raw_prev_year1_dec'] = $row->dec_price;
			$data['ctg_raw_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_raw_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_raw_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}



		/*CTG Chooksies Cut ups*/
		$join_ctg_cutups = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000199',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'NON MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_cutups = $this->admin->get_join('sales_tbl a', $join_ctg_cutups, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_cutups1'] = 0;
		$data['ctg_cutups2'] = 0;
		$data['ctg_cutups3'] = 0;
		$data['ctg_cutups4'] = 0;
		$data['ctg_cutups5'] = 0;
		$data['ctg_cutups6'] = 0;
		$data['ctg_cutups7'] = 0;
		$data['ctg_cutups8'] = 0;
		$data['ctg_cutups9'] = 0;
		$data['ctg_cutups10'] = 0;
		$data['ctg_cutups11'] = 0;
		$data['ctg_cutups12'] = 0;
		$data['ctg_cutups_total'] = 0;
		$data['ctg_cutups_count'] = 0;
		$data['ctg_cutups_avg'] = 0;
		$data['ctg_cutups_min'] = 0;
		$data['ctg_cutups_max'] = 0;

		foreach($get_ctg_cutups as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_cutups' . $month] = $asp;
			$data['ctg_cutups_total'] += $asp;

			if($asp < $data['ctg_cutups_min'] || $data['ctg_cutups_count'] == 0){
				$data['ctg_cutups_min'] = $asp;
			}

			if($asp > $data['ctg_cutups_max'] || $data['ctg_cutups_count'] == 0){
				$data['ctg_cutups_max'] = $asp;
			}

			$data['ctg_cutups_count']++;
		}

		$data['ctg_cutups_avg'] = $data['ctg_cutups_total'] != 0 ? $data['ctg_cutups_total'] / $data['ctg_cutups_count'] : 0;

		$ctg_cutups_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES CUT UPS', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_cutups_prev_year2_jan'] = 0;
		$data['ctg_cutups_prev_year2_feb'] = 0;
		$data['ctg_cutups_prev_year2_mar'] = 0;
		$data['ctg_cutups_prev_year2_apr'] = 0;
		$data['ctg_cutups_prev_year2_may'] = 0;
		$data['ctg_cutups_prev_year2_jun'] = 0;
		$data['ctg_cutups_prev_year2_jul'] = 0;
		$data['ctg_cutups_prev_year2_aug'] = 0;
		$data['ctg_cutups_prev_year2_sep'] = 0;
		$data['ctg_cutups_prev_year2_oct'] = 0;
		$data['ctg_cutups_prev_year2_nov'] = 0;
		$data['ctg_cutups_prev_year2_dec'] = 0;
		$data['ctg_cutups_prev_year2_avg'] = 0;
		$data['ctg_cutups_prev_year2_min'] = 0;
		$data['ctg_cutups_prev_year2_max'] = 0;

		foreach($ctg_cutups_prev_year2 as $row){
			$data['ctg_cutups_prev_year2_jan'] = $row->jan_price;
			$data['ctg_cutups_prev_year2_feb'] = $row->feb_price;
			$data['ctg_cutups_prev_year2_mar'] = $row->mar_price;
			$data['ctg_cutups_prev_year2_apr'] = $row->apr_price;
			$data['ctg_cutups_prev_year2_may'] = $row->may_price;
			$data['ctg_cutups_prev_year2_jun'] = $row->jun_price;
			$data['ctg_cutups_prev_year2_jul'] = $row->jul_price;
			$data['ctg_cutups_prev_year2_aug'] = $row->aug_price;
			$data['ctg_cutups_prev_year2_sep'] = $row->sep_price;
			$data['ctg_cutups_prev_year2_oct'] = $row->oct_price;
			$data['ctg_cutups_prev_year2_nov'] = $row->nov_price;
			$data['ctg_cutups_prev_year2_dec'] = $row->dec_price;
			$data['ctg_cutups_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_cutups_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_cutups_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_cutups_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES CUT UPS', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_cutups_prev_year1_jan'] = 0;
		$data['ctg_cutups_prev_year1_feb'] = 0;
		$data['ctg_cutups_prev_year1_mar'] = 0;
		$data['ctg_cutups_prev_year1_apr'] = 0;
		$data['ctg_cutups_prev_year1_may'] = 0;
		$data['ctg_cutups_prev_year1_jun'] = 0;
		$data['ctg_cutups_prev_year1_jul'] = 0;
		$data['ctg_cutups_prev_year1_aug'] = 0;
		$data['ctg_cutups_prev_year1_sep'] = 0;
		$data['ctg_cutups_prev_year1_oct'] = 0;
		$data['ctg_cutups_prev_year1_nov'] = 0;
		$data['ctg_cutups_prev_year1_dec'] = 0;
		$data['ctg_cutups_prev_year1_avg'] = 0;
		$data['ctg_cutups_prev_year1_min'] = 0;
		$data['ctg_cutups_prev_year1_max'] = 0;

		foreach($ctg_cutups_prev_year1 as $row){
			$data['ctg_cutups_prev_year1_jan'] = $row->jan_price;
			$data['ctg_cutups_prev_year1_feb'] = $row->feb_price;
			$data['ctg_cutups_prev_year1_mar'] = $row->mar_price;
			$data['ctg_cutups_prev_year1_apr'] = $row->apr_price;
			$data['ctg_cutups_prev_year1_may'] = $row->may_price;
			$data['ctg_cutups_prev_year1_jun'] = $row->jun_price;
			$data['ctg_cutups_prev_year1_jul'] = $row->jul_price;
			$data['ctg_cutups_prev_year1_aug'] = $row->aug_price;
			$data['ctg_cutups_prev_year1_sep'] = $row->sep_price;
			$data['ctg_cutups_prev_year1_oct'] = $row->oct_price;
			$data['ctg_cutups_prev_year1_nov'] = $row->nov_price;
			$data['ctg_cutups_prev_year1_dec'] = $row->dec_price;
			$data['ctg_cutups_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_cutups_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_cutups_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*CTG Liver / Gizzard*/
		$join_ctg_liver = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVER / GIZZARD\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_liver = $this->admin->get_join('sales_tbl a', $join_ctg_liver, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_liver1'] = 0;
		$data['ctg_liver2'] = 0;
		$data['ctg_liver3'] = 0;
		$data['ctg_liver4'] = 0;
		$data['ctg_liver5'] = 0;
		$data['ctg_liver6'] = 0;
		$data['ctg_liver7'] = 0;
		$data['ctg_liver8'] = 0;
		$data['ctg_liver9'] = 0;
		$data['ctg_liver10'] = 0;
		$data['ctg_liver11'] = 0;
		$data['ctg_liver12'] = 0;
		$data['ctg_liver_total'] = 0;
		$data['ctg_liver_count'] = 0;
		$data['ctg_liver_avg'] = 0;
		$data['ctg_liver_min'] = 0;
		$data['ctg_liver_max'] = 0;

		foreach($get_ctg_liver as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_liver' . $month] = $asp;
			$data['ctg_liver_total'] += $asp;

			if($asp < $data['ctg_liver_min'] || $data['ctg_liver_count'] == 0){
				$data['ctg_cutups_min'] = $asp;
			}

			if($asp > $data['ctg_liver_max'] || $data['ctg_liver_count'] == 0){
				$data['ctg_liver_max'] = $asp;
			}

			$data['ctg_liver_count']++;
		}

		$data['ctg_liver_avg'] = $data['ctg_liver_total'] != 0 ? $data['ctg_liver_total'] / $data['ctg_liver_count'] : 0;


		$ctg_liver_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'GIZZARD / LIVER', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_liver_prev_year2_jan'] = 0;
		$data['ctg_liver_prev_year2_feb'] = 0;
		$data['ctg_liver_prev_year2_mar'] = 0;
		$data['ctg_liver_prev_year2_apr'] = 0;
		$data['ctg_liver_prev_year2_may'] = 0;
		$data['ctg_liver_prev_year2_jun'] = 0;
		$data['ctg_liver_prev_year2_jul'] = 0;
		$data['ctg_liver_prev_year2_aug'] = 0;
		$data['ctg_liver_prev_year2_sep'] = 0;
		$data['ctg_liver_prev_year2_oct'] = 0;
		$data['ctg_liver_prev_year2_nov'] = 0;
		$data['ctg_liver_prev_year2_dec'] = 0;
		$data['ctg_liver_prev_year2_avg'] = 0;
		$data['ctg_liver_prev_year2_min'] = 0;
		$data['ctg_liver_prev_year2_max'] = 0;

		foreach($ctg_liver_prev_year2 as $row){
			$data['ctg_liver_prev_year2_jan'] = $row->jan_price;
			$data['ctg_liver_prev_year2_feb'] = $row->feb_price;
			$data['ctg_liver_prev_year2_mar'] = $row->mar_price;
			$data['ctg_liver_prev_year2_apr'] = $row->apr_price;
			$data['ctg_liver_prev_year2_may'] = $row->may_price;
			$data['ctg_liver_prev_year2_jun'] = $row->jun_price;
			$data['ctg_liver_prev_year2_jul'] = $row->jul_price;
			$data['ctg_liver_prev_year2_aug'] = $row->aug_price;
			$data['ctg_liver_prev_year2_sep'] = $row->sep_price;
			$data['ctg_liver_prev_year2_oct'] = $row->oct_price;
			$data['ctg_liver_prev_year2_nov'] = $row->nov_price;
			$data['ctg_liver_prev_year2_dec'] = $row->dec_price;
			$data['ctg_liver_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_liver_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_liver_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ctg_liver_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'GIZZARD / LIVER', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_liver_prev_year1_jan'] = 0;
		$data['ctg_liver_prev_year1_feb'] = 0;
		$data['ctg_liver_prev_year1_mar'] = 0;
		$data['ctg_liver_prev_year1_apr'] = 0;
		$data['ctg_liver_prev_year1_may'] = 0;
		$data['ctg_liver_prev_year1_jun'] = 0;
		$data['ctg_liver_prev_year1_jul'] = 0;
		$data['ctg_liver_prev_year1_aug'] = 0;
		$data['ctg_liver_prev_year1_sep'] = 0;
		$data['ctg_liver_prev_year1_oct'] = 0;
		$data['ctg_liver_prev_year1_nov'] = 0;
		$data['ctg_liver_prev_year1_dec'] = 0;
		$data['ctg_liver_prev_year1_avg'] = 0;
		$data['ctg_liver_prev_year1_min'] = 0;
		$data['ctg_liver_prev_year1_max'] = 0;

		foreach($ctg_liver_prev_year1 as $row){
			$data['ctg_liver_prev_year1_jan'] = $row->jan_price;
			$data['ctg_liver_prev_year1_feb'] = $row->feb_price;
			$data['ctg_liver_prev_year1_mar'] = $row->mar_price;
			$data['ctg_liver_prev_year1_apr'] = $row->apr_price;
			$data['ctg_liver_prev_year1_may'] = $row->may_price;
			$data['ctg_liver_prev_year1_jun'] = $row->jun_price;
			$data['ctg_liver_prev_year1_jul'] = $row->jul_price;
			$data['ctg_liver_prev_year1_aug'] = $row->aug_price;
			$data['ctg_liver_prev_year1_sep'] = $row->sep_price;
			$data['ctg_liver_prev_year1_oct'] = $row->oct_price;
			$data['ctg_liver_prev_year1_nov'] = $row->nov_price;
			$data['ctg_liver_prev_year1_dec'] = $row->dec_price;
			$data['ctg_liver_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ctg_liver_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ctg_liver_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*Uling Roasters*/

		/*UR Chicken*/

		$get_ur_orc = $this->admin->get_query("SELECT p.size_name, AVG(asp_tbl.jan_asp) as orc_jan, AVG(asp_tbl.feb_asp) as orc_feb, AVG(asp_tbl.mar_asp) as orc_mar, AVG(asp_tbl.apr_asp) as orc_apr, AVG(asp_tbl.may_asp) as orc_may, AVG(asp_tbl.jun_asp) as orc_jun, AVG(asp_tbl.jul_asp) as orc_jul, AVG(asp_tbl.aug_asp) as orc_aug, AVG(asp_tbl.sep_asp) as orc_sep, AVG(asp_tbl.oct_asp) as orc_oct, AVG(asp_tbl.nov_asp) as orc_nov, AVG(asp_tbl.dec_asp) as orc_dec FROM material_tbl o, size_tbl p,

		(SELECT m.material_id, m.size_id,

		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-01-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as jan_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-02-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as feb_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-03-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as mar_asp,
    
   		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-04-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as apr_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-05-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as may_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-06-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as jun_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-07-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as jul_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-08-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as aug_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-09-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as sep_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-10-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as oct_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-11-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as nov_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-01-01' WHERE d.material_id =  m.material_id AND f.bc_id = " . $bc_id . ") as dec_asp
    
		FROM material_size_tbl m, brand_tbl n WHERE m.brand_id = n.brand_id AND m.material_size_status = 1 AND n.brand_name = 'ULING ROASTER') as asp_tbl

		WHERE o.material_id = asp_tbl.material_id AND p.size_id = asp_tbl.size_id GROUP BY p.size_id");
		
		$data['ur_largo1'] = $data['ur_largo2'] = $data['ur_largo3'] = $data['ur_largo4'] = $data['ur_largo5'] = $data['ur_largo6'] = $data['ur_largo7'] = $data['ur_largo8'] = $data['ur_largo9'] = $data['ur_largo10'] = $data['ur_largo11'] = $data['ur_largo12'] = $data['ur_largo_total'] = $data['ur_largo_count'] = $data['ur_largo_avg'] = $data['ur_largo_min'] = $data['ur_largo_max'] = 0;

		$data['ur_plm1'] = $data['ur_plm2'] = $data['ur_plm3'] = $data['ur_plm4'] = $data['ur_plm5'] = $data['ur_plm6'] = $data['ur_plm7'] = $data['ur_plm8'] = $data['ur_plm9'] = $data['ur_plm10'] = $data['ur_plm11'] = $data['ur_plm12'] = $data['ur_plm_total'] = $data['ur_plm_count'] = $data['ur_plm_avg'] = $data['ur_plm_min'] = $data['ur_plm_max'] = 0;

		$data['ur_half1'] = $data['ur_half2'] = $data['ur_half3'] = $data['ur_half4'] = $data['ur_half5'] = $data['ur_half6'] = $data['ur_half7'] = $data['ur_half8'] = $data['ur_half9'] = $data['ur_half10'] = $data['ur_half11'] = $data['ur_half12'] = $data['ur_half_total'] = $data['ur_half_count'] = $data['ur_half_avg'] = $data['ur_half_min'] = $data['ur_half_max'] = 0;

		$data['ur_pequeno1'] = $data['ur_pequeno2'] = $data['ur_pequeno3'] = $data['ur_pequeno4'] = $data['ur_pequeno5'] = $data['ur_pequeno6'] = $data['ur_pequeno7'] = $data['ur_pequeno8'] = $data['ur_pequeno9'] = $data['ur_pequeno10'] = $data['ur_pequeno11'] = $data['ur_pequeno12'] = $data['ur_pequeno_total'] = $data['ur_pequeno_count'] = $data['ur_pequeno_avg'] = $data['ur_pequeno_min'] = $data['ur_pequeno_max'] = 0;

		foreach($get_ur_orc as $row){

			$orc_size = $row->size_name;
			$orc_jan = $row->orc_jan;
			$orc_feb = $row->orc_feb;
			$orc_mar = $row->orc_mar;
			$orc_apr = $row->orc_apr;
			$orc_may = $row->orc_may;
			$orc_jun = $row->orc_jun;
			$orc_jul = $row->orc_jul;
			$orc_aug = $row->orc_aug;
			$orc_sep = $row->orc_sep;
			$orc_oct = $row->orc_oct;
			$orc_nov = $row->orc_nov;
			$orc_dec = $row->orc_dec;
			$orc_min = min($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_max = max($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_avg = ($orc_jan + $orc_feb + $orc_mar + $orc_apr + $orc_may + $orc_jun + $orc_jul + $orc_aug + $orc_sep + $orc_oct + $orc_nov + $orc_dec) / 12;

			if($orc_size == "LARGO"){
				$data['ur_largo1'] = $orc_jan;
				$data['ur_largo2'] = $orc_feb;
				$data['ur_largo3'] = $orc_mar;
				$data['ur_largo4'] = $orc_apr;
				$data['ur_largo5'] = $orc_may;
				$data['ur_largo6'] = $orc_jun;
				$data['ur_largo7'] = $orc_jul;
				$data['ur_largo8'] = $orc_aug;
				$data['ur_largo9'] = $orc_sep;
				$data['ur_largo10'] = $orc_oct;
				$data['ur_largo11'] = $orc_nov;
				$data['ur_largo12'] = $orc_dec;
				$data['ur_largo_avg'] = $orc_avg;
				$data['ur_largo_min'] = $orc_min;
				$data['ur_largo_max'] = $orc_max;

				$ur_largo_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LARGO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
				$data['ur_largo_prev_year2_jan'] = 0;
				$data['ur_largo_prev_year2_feb'] = 0;
				$data['ur_largo_prev_year2_mar'] = 0;
				$data['ur_largo_prev_year2_apr'] = 0;
				$data['ur_largo_prev_year2_may'] = 0;
				$data['ur_largo_prev_year2_jun'] = 0;
				$data['ur_largo_prev_year2_jul'] = 0;
				$data['ur_largo_prev_year2_aug'] = 0;
				$data['ur_largo_prev_year2_sep'] = 0;
				$data['ur_largo_prev_year2_oct'] = 0;
				$data['ur_largo_prev_year2_nov'] = 0;
				$data['ur_largo_prev_year2_dec'] = 0;
				$data['ur_largo_prev_year2_avg'] = 0;
				$data['ur_largo_prev_year2_min'] = 0;
				$data['ur_largo_prev_year2_max'] = 0;

				foreach($ur_largo_prev_year2 as $row){
					$data['ur_largo_prev_year2_jan'] = $row->jan_price;
					$data['ur_largo_prev_year2_feb'] = $row->feb_price;
					$data['ur_largo_prev_year2_mar'] = $row->mar_price;
					$data['ur_largo_prev_year2_apr'] = $row->apr_price;
					$data['ur_largo_prev_year2_may'] = $row->may_price;
					$data['ur_largo_prev_year2_jun'] = $row->jun_price;
					$data['ur_largo_prev_year2_jul'] = $row->jul_price;
					$data['ur_largo_prev_year2_aug'] = $row->aug_price;
					$data['ur_largo_prev_year2_sep'] = $row->sep_price;
					$data['ur_largo_prev_year2_oct'] = $row->oct_price;
					$data['ur_largo_prev_year2_nov'] = $row->nov_price;
					$data['ur_largo_prev_year2_dec'] = $row->dec_price;
					$data['ur_largo_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ur_largo_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ur_largo_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}


				$ur_largo_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LARGO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
					FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
				
				$data['ur_largo_prev_year1_jan'] = 0;
				$data['ur_largo_prev_year1_feb'] = 0;
				$data['ur_largo_prev_year1_mar'] = 0;
				$data['ur_largo_prev_year1_apr'] = 0;
				$data['ur_largo_prev_year1_may'] = 0;
				$data['ur_largo_prev_year1_jun'] = 0;
				$data['ur_largo_prev_year1_jul'] = 0;
				$data['ur_largo_prev_year1_aug'] = 0;
				$data['ur_largo_prev_year1_sep'] = 0;
				$data['ur_largo_prev_year1_oct'] = 0;
				$data['ur_largo_prev_year1_nov'] = 0;
				$data['ur_largo_prev_year1_dec'] = 0;
				$data['ur_largo_prev_year1_avg'] = 0;
				$data['ur_largo_prev_year1_min'] = 0;
				$data['ur_largo_prev_year1_max'] = 0;

				foreach($ur_largo_prev_year1 as $row){
					$data['ur_largo_prev_year1_jan'] = $row->jan_price;
					$data['ur_largo_prev_year1_feb'] = $row->feb_price;
					$data['ur_largo_prev_year1_mar'] = $row->mar_price;
					$data['ur_largo_prev_year1_apr'] = $row->apr_price;
					$data['ur_largo_prev_year1_may'] = $row->may_price;
					$data['ur_largo_prev_year1_jun'] = $row->jun_price;
					$data['ur_largo_prev_year1_jul'] = $row->jul_price;
					$data['ur_largo_prev_year1_aug'] = $row->aug_price;
					$data['ur_largo_prev_year1_sep'] = $row->sep_price;
					$data['ur_largo_prev_year1_oct'] = $row->oct_price;
					$data['ur_largo_prev_year1_nov'] = $row->nov_price;
					$data['ur_largo_prev_year1_dec'] = $row->dec_price;
					$data['ur_largo_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ur_largo_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ur_largo_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "PLM"){
				$data['ur_plm1'] = $orc_jan;
				$data['ur_plm2'] = $orc_feb;
				$data['ur_plm3'] = $orc_mar;
				$data['ur_plm4'] = $orc_apr;
				$data['ur_plm5'] = $orc_may;
				$data['ur_plm6'] = $orc_jun;
				$data['ur_plm7'] = $orc_jul;
				$data['ur_plm8'] = $orc_aug;
				$data['ur_plm9'] = $orc_sep;
				$data['ur_plm10'] = $orc_oct;
				$data['ur_plm11'] = $orc_nov;
				$data['ur_plm12'] = $orc_dec;
				$data['ur_plm_avg'] = $orc_avg;
				$data['ur_plm_min'] = $orc_min;
				$data['ur_plm_max'] = $orc_max;

				$ur_plm_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'PLM', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
				$data['ur_plm_prev_year2_jan'] = 0;
				$data['ur_plm_prev_year2_feb'] = 0;
				$data['ur_plm_prev_year2_mar'] = 0;
				$data['ur_plm_prev_year2_apr'] = 0;
				$data['ur_plm_prev_year2_may'] = 0;
				$data['ur_plm_prev_year2_jun'] = 0;
				$data['ur_plm_prev_year2_jul'] = 0;
				$data['ur_plm_prev_year2_aug'] = 0;
				$data['ur_plm_prev_year2_sep'] = 0;
				$data['ur_plm_prev_year2_oct'] = 0;
				$data['ur_plm_prev_year2_nov'] = 0;
				$data['ur_plm_prev_year2_dec'] = 0;
				$data['ur_plm_prev_year2_avg'] = 0;
				$data['ur_plm_prev_year2_min'] = 0;
				$data['ur_plm_prev_year2_max'] = 0;

				foreach($ur_plm_prev_year2 as $row){
					$data['ur_plm_prev_year2_jan'] = $row->jan_price;
					$data['ur_plm_prev_year2_feb'] = $row->feb_price;
					$data['ur_plm_prev_year2_mar'] = $row->mar_price;
					$data['ur_plm_prev_year2_apr'] = $row->apr_price;
					$data['ur_plm_prev_year2_may'] = $row->may_price;
					$data['ur_plm_prev_year2_jun'] = $row->jun_price;
					$data['ur_plm_prev_year2_jul'] = $row->jul_price;
					$data['ur_plm_prev_year2_aug'] = $row->aug_price;
					$data['ur_plm_prev_year2_sep'] = $row->sep_price;
					$data['ur_plm_prev_year2_oct'] = $row->oct_price;
					$data['ur_plm_prev_year2_nov'] = $row->nov_price;
					$data['ur_plm_prev_year2_dec'] = $row->dec_price;
					$data['ur_plm_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ur_plm_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ur_plm_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}


				$ur_plm_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'PLM', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
					FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
				
				$data['ur_plm_prev_year1_jan'] = 0;
				$data['ur_plm_prev_year1_feb'] = 0;
				$data['ur_plm_prev_year1_mar'] = 0;
				$data['ur_plm_prev_year1_apr'] = 0;
				$data['ur_plm_prev_year1_may'] = 0;
				$data['ur_plm_prev_year1_jun'] = 0;
				$data['ur_plm_prev_year1_jul'] = 0;
				$data['ur_plm_prev_year1_aug'] = 0;
				$data['ur_plm_prev_year1_sep'] = 0;
				$data['ur_plm_prev_year1_oct'] = 0;
				$data['ur_plm_prev_year1_nov'] = 0;
				$data['ur_plm_prev_year1_dec'] = 0;
				$data['ur_plm_prev_year1_avg'] = 0;
				$data['ur_plm_prev_year1_min'] = 0;
				$data['ur_plm_prev_year1_max'] = 0;

				foreach($ur_plm_prev_year1 as $row){
					$data['ur_plm_prev_year1_jan'] = $row->jan_price;
					$data['ur_plm_prev_year1_feb'] = $row->feb_price;
					$data['ur_plm_prev_year1_mar'] = $row->mar_price;
					$data['ur_plm_prev_year1_apr'] = $row->apr_price;
					$data['ur_plm_prev_year1_may'] = $row->may_price;
					$data['ur_plm_prev_year1_jun'] = $row->jun_price;
					$data['ur_plm_prev_year1_jul'] = $row->jul_price;
					$data['ur_plm_prev_year1_aug'] = $row->aug_price;
					$data['ur_plm_prev_year1_sep'] = $row->sep_price;
					$data['ur_plm_prev_year1_oct'] = $row->oct_price;
					$data['ur_plm_prev_year1_nov'] = $row->nov_price;
					$data['ur_plm_prev_year1_dec'] = $row->dec_price;
					$data['ur_plm_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ur_plm_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ur_plm_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "PEQUENO"){
				$data['ur_pequeno1'] = $orc_jan;
				$data['ur_pequeno2'] = $orc_feb;
				$data['ur_pequeno3'] = $orc_mar;
				$data['ur_pequeno4'] = $orc_apr;
				$data['ur_pequeno5'] = $orc_may;
				$data['ur_pequeno6'] = $orc_jun;
				$data['ur_pequeno7'] = $orc_jul;
				$data['ur_pequeno8'] = $orc_aug;
				$data['ur_pequeno9'] = $orc_sep;
				$data['ur_pequeno10'] = $orc_oct;
				$data['ur_pequeno11'] = $orc_nov;
				$data['ur_pequeno12'] = $orc_dec;
				$data['ur_pequeno_avg'] = $orc_avg;
				$data['ur_pequeno_min'] = $orc_min;
				$data['ur_pequeno_max'] = $orc_max;

				$ur_pequeno_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'PEQUENO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
				$data['ur_pequeno_prev_year2_jan'] = 0;
				$data['ur_pequeno_prev_year2_feb'] = 0;
				$data['ur_pequeno_prev_year2_mar'] = 0;
				$data['ur_pequeno_prev_year2_apr'] = 0;
				$data['ur_pequeno_prev_year2_may'] = 0;
				$data['ur_pequeno_prev_year2_jun'] = 0;
				$data['ur_pequeno_prev_year2_jul'] = 0;
				$data['ur_pequeno_prev_year2_aug'] = 0;
				$data['ur_pequeno_prev_year2_sep'] = 0;
				$data['ur_pequeno_prev_year2_oct'] = 0;
				$data['ur_pequeno_prev_year2_nov'] = 0;
				$data['ur_pequeno_prev_year2_dec'] = 0;
				$data['ur_pequeno_prev_year2_avg'] = 0;
				$data['ur_pequeno_prev_year2_min'] = 0;
				$data['ur_pequeno_prev_year2_max'] = 0;

				foreach($ur_pequeno_prev_year2 as $row){
					$data['ur_pequeno_prev_year2_jan'] = $row->jan_price;
					$data['ur_pequeno_prev_year2_feb'] = $row->feb_price;
					$data['ur_pequeno_prev_year2_mar'] = $row->mar_price;
					$data['ur_pequeno_prev_year2_apr'] = $row->apr_price;
					$data['ur_pequeno_prev_year2_may'] = $row->may_price;
					$data['ur_pequeno_prev_year2_jun'] = $row->jun_price;
					$data['ur_pequeno_prev_year2_jul'] = $row->jul_price;
					$data['ur_pequeno_prev_year2_aug'] = $row->aug_price;
					$data['ur_pequeno_prev_year2_sep'] = $row->sep_price;
					$data['ur_pequeno_prev_year2_oct'] = $row->oct_price;
					$data['ur_pequeno_prev_year2_nov'] = $row->nov_price;
					$data['ur_pequeno_prev_year2_dec'] = $row->dec_price;
					$data['ur_pequeno_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ur_pequeno_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ur_pequeno_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}


				$ur_pequeno_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'PEQUENO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
					FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
				
				$data['ur_pequeno_prev_year1_jan'] = 0;
				$data['ur_pequeno_prev_year1_feb'] = 0;
				$data['ur_pequeno_prev_year1_mar'] = 0;
				$data['ur_pequeno_prev_year1_apr'] = 0;
				$data['ur_pequeno_prev_year1_may'] = 0;
				$data['ur_pequeno_prev_year1_jun'] = 0;
				$data['ur_pequeno_prev_year1_jul'] = 0;
				$data['ur_pequeno_prev_year1_aug'] = 0;
				$data['ur_pequeno_prev_year1_sep'] = 0;
				$data['ur_pequeno_prev_year1_oct'] = 0;
				$data['ur_pequeno_prev_year1_nov'] = 0;
				$data['ur_pequeno_prev_year1_dec'] = 0;
				$data['ur_pequeno_prev_year1_avg'] = 0;
				$data['ur_pequeno_prev_year1_min'] = 0;
				$data['ur_pequeno_prev_year1_max'] = 0;

				foreach($ur_pequeno_prev_year1 as $row){
					$data['ur_pequeno_prev_year1_jan'] = $row->jan_price;
					$data['ur_pequeno_prev_year1_feb'] = $row->feb_price;
					$data['ur_pequeno_prev_year1_mar'] = $row->mar_price;
					$data['ur_pequeno_prev_year1_apr'] = $row->apr_price;
					$data['ur_pequeno_prev_year1_may'] = $row->may_price;
					$data['ur_pequeno_prev_year1_jun'] = $row->jun_price;
					$data['ur_pequeno_prev_year1_jul'] = $row->jul_price;
					$data['ur_pequeno_prev_year1_aug'] = $row->aug_price;
					$data['ur_pequeno_prev_year1_sep'] = $row->sep_price;
					$data['ur_pequeno_prev_year1_oct'] = $row->oct_price;
					$data['ur_pequeno_prev_year1_nov'] = $row->nov_price;
					$data['ur_pequeno_prev_year1_dec'] = $row->dec_price;
					$data['ur_pequeno_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ur_pequeno_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ur_pequeno_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}elseif($orc_size == "HALF"){
				$data['ur_half1'] = $orc_jan;
				$data['ur_half2'] = $orc_feb;
				$data['ur_half3'] = $orc_mar;
				$data['ur_half4'] = $orc_apr;
				$data['ur_half5'] = $orc_may;
				$data['ur_half6'] = $orc_jun;
				$data['ur_half7'] = $orc_jul;
				$data['ur_half8'] = $orc_aug;
				$data['ur_half9'] = $orc_sep;
				$data['ur_half10'] = $orc_oct;
				$data['ur_half11'] = $orc_nov;
				$data['ur_half12'] = $orc_dec;
				$data['ur_half_avg'] = $orc_avg;
				$data['ur_half_min'] = $orc_min;
				$data['ur_half_max'] = $orc_max;

				$ur_half_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'HALF', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
				$data['ur_half_prev_year2_jan'] = 0;
				$data['ur_half_prev_year2_feb'] = 0;
				$data['ur_half_prev_year2_mar'] = 0;
				$data['ur_half_prev_year2_apr'] = 0;
				$data['ur_half_prev_year2_may'] = 0;
				$data['ur_half_prev_year2_jun'] = 0;
				$data['ur_half_prev_year2_jul'] = 0;
				$data['ur_half_prev_year2_aug'] = 0;
				$data['ur_half_prev_year2_sep'] = 0;
				$data['ur_half_prev_year2_oct'] = 0;
				$data['ur_half_prev_year2_nov'] = 0;
				$data['ur_half_prev_year2_dec'] = 0;
				$data['ur_half_prev_year2_avg'] = 0;
				$data['ur_half_prev_year2_min'] = 0;
				$data['ur_half_prev_year2_max'] = 0;

				foreach($ur_half_prev_year2 as $row){
					$data['ur_half_prev_year2_jan'] = $row->jan_price;
					$data['ur_half_prev_year2_feb'] = $row->feb_price;
					$data['ur_half_prev_year2_mar'] = $row->mar_price;
					$data['ur_half_prev_year2_apr'] = $row->apr_price;
					$data['ur_half_prev_year2_may'] = $row->may_price;
					$data['ur_half_prev_year2_jun'] = $row->jun_price;
					$data['ur_half_prev_year2_jul'] = $row->jul_price;
					$data['ur_half_prev_year2_aug'] = $row->aug_price;
					$data['ur_half_prev_year2_sep'] = $row->sep_price;
					$data['ur_half_prev_year2_oct'] = $row->oct_price;
					$data['ur_half_prev_year2_nov'] = $row->nov_price;
					$data['ur_half_prev_year2_dec'] = $row->dec_price;
					$data['ur_half_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ur_half_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ur_half_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}


				$ur_half_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'HALF', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
					FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
				
				$data['ur_half_prev_year1_jan'] = 0;
				$data['ur_half_prev_year1_feb'] = 0;
				$data['ur_half_prev_year1_mar'] = 0;
				$data['ur_half_prev_year1_apr'] = 0;
				$data['ur_half_prev_year1_may'] = 0;
				$data['ur_half_prev_year1_jun'] = 0;
				$data['ur_half_prev_year1_jul'] = 0;
				$data['ur_half_prev_year1_aug'] = 0;
				$data['ur_half_prev_year1_sep'] = 0;
				$data['ur_half_prev_year1_oct'] = 0;
				$data['ur_half_prev_year1_nov'] = 0;
				$data['ur_half_prev_year1_dec'] = 0;
				$data['ur_half_prev_year1_avg'] = 0;
				$data['ur_half_prev_year1_min'] = 0;
				$data['ur_half_prev_year1_max'] = 0;

				foreach($ur_half_prev_year1 as $row){
					$data['ur_half_prev_year1_jan'] = $row->jan_price;
					$data['ur_half_prev_year1_feb'] = $row->feb_price;
					$data['ur_half_prev_year1_mar'] = $row->mar_price;
					$data['ur_half_prev_year1_apr'] = $row->apr_price;
					$data['ur_half_prev_year1_may'] = $row->may_price;
					$data['ur_half_prev_year1_jun'] = $row->jun_price;
					$data['ur_half_prev_year1_jul'] = $row->jul_price;
					$data['ur_half_prev_year1_aug'] = $row->aug_price;
					$data['ur_half_prev_year1_sep'] = $row->sep_price;
					$data['ur_half_prev_year1_oct'] = $row->oct_price;
					$data['ur_half_prev_year1_nov'] = $row->nov_price;
					$data['ur_half_prev_year1_dec'] = $row->dec_price;
					$data['ur_half_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['ur_half_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['ur_half_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}
			}
		}

		/*UR Liempo*/
		$join_ur_liempo = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "LIEMPO"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_liempo = $this->admin->get_join('sales_tbl a', $join_ur_liempo, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_liempo1'] = 0;
		$data['ur_liempo2'] = 0;
		$data['ur_liempo3'] = 0;
		$data['ur_liempo4'] = 0;
		$data['ur_liempo5'] = 0;
		$data['ur_liempo6'] = 0;
		$data['ur_liempo7'] = 0;
		$data['ur_liempo8'] = 0;
		$data['ur_liempo9'] = 0;
		$data['ur_liempo10'] = 0;
		$data['ur_liempo11'] = 0;
		$data['ur_liempo12'] = 0;
		$data['ur_liempo_total'] = 0;
		$data['ur_liempo_count'] = 0;
		$data['ur_liempo_avg'] = 0;
		$data['ur_liempo_min'] = 0;
		$data['ur_liempo_max'] = 0;

		foreach($get_ur_liempo as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_liempo' . $month] = $asp;
			$data['ur_liempo_total'] += $asp;

			if($asp < $data['ur_liempo_min'] || $data['ur_liempo_count'] == 0){
				$data['ur_liempo_min'] = $asp;
			}

			if($asp > $data['ur_liempo_max'] || $data['ur_liempo_count'] == 0){
				$data['ur_liempo_max'] = $asp;
			}

			$data['ur_liempo_count']++;
		}

		$data['ur_liempo_avg'] = $data['ur_liempo_total'] != 0 ? $data['ur_liempo_total'] / $data['ur_liempo_count'] : 0;

		$ur_liempo_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_liempo_prev_year2_jan'] = 0;
		$data['ur_liempo_prev_year2_feb'] = 0;
		$data['ur_liempo_prev_year2_mar'] = 0;
		$data['ur_liempo_prev_year2_apr'] = 0;
		$data['ur_liempo_prev_year2_may'] = 0;
		$data['ur_liempo_prev_year2_jun'] = 0;
		$data['ur_liempo_prev_year2_jul'] = 0;
		$data['ur_liempo_prev_year2_aug'] = 0;
		$data['ur_liempo_prev_year2_sep'] = 0;
		$data['ur_liempo_prev_year2_oct'] = 0;
		$data['ur_liempo_prev_year2_nov'] = 0;
		$data['ur_liempo_prev_year2_dec'] = 0;
		$data['ur_liempo_prev_year2_avg'] = 0;
		$data['ur_liempo_prev_year2_min'] = 0;
		$data['ur_liempo_prev_year2_max'] = 0;

		foreach($ur_liempo_prev_year2 as $row){
			$data['ur_liempo_prev_year2_jan'] = $row->jan_price;
			$data['ur_liempo_prev_year2_feb'] = $row->feb_price;
			$data['ur_liempo_prev_year2_mar'] = $row->mar_price;
			$data['ur_liempo_prev_year2_apr'] = $row->apr_price;
			$data['ur_liempo_prev_year2_may'] = $row->may_price;
			$data['ur_liempo_prev_year2_jun'] = $row->jun_price;
			$data['ur_liempo_prev_year2_jul'] = $row->jul_price;
			$data['ur_liempo_prev_year2_aug'] = $row->aug_price;
			$data['ur_liempo_prev_year2_sep'] = $row->sep_price;
			$data['ur_liempo_prev_year2_oct'] = $row->oct_price;
			$data['ur_liempo_prev_year2_nov'] = $row->nov_price;
			$data['ur_liempo_prev_year2_dec'] = $row->dec_price;
			$data['ur_liempo_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_liempo_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_liempo_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_liempo_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_liempo_prev_year1_jan'] = 0;
		$data['ur_liempo_prev_year1_feb'] = 0;
		$data['ur_liempo_prev_year1_mar'] = 0;
		$data['ur_liempo_prev_year1_apr'] = 0;
		$data['ur_liempo_prev_year1_may'] = 0;
		$data['ur_liempo_prev_year1_jun'] = 0;
		$data['ur_liempo_prev_year1_jul'] = 0;
		$data['ur_liempo_prev_year1_aug'] = 0;
		$data['ur_liempo_prev_year1_sep'] = 0;
		$data['ur_liempo_prev_year1_oct'] = 0;
		$data['ur_liempo_prev_year1_nov'] = 0;
		$data['ur_liempo_prev_year1_dec'] = 0;
		$data['ur_liempo_prev_year1_avg'] = 0;
		$data['ur_liempo_prev_year1_min'] = 0;
		$data['ur_liempo_prev_year1_max'] = 0;

		foreach($ur_liempo_prev_year1 as $row){
			$data['ur_liempo_prev_year1_jan'] = $row->jan_price;
			$data['ur_liempo_prev_year1_feb'] = $row->feb_price;
			$data['ur_liempo_prev_year1_mar'] = $row->mar_price;
			$data['ur_liempo_prev_year1_apr'] = $row->apr_price;
			$data['ur_liempo_prev_year1_may'] = $row->may_price;
			$data['ur_liempo_prev_year1_jun'] = $row->jun_price;
			$data['ur_liempo_prev_year1_jul'] = $row->jul_price;
			$data['ur_liempo_prev_year1_aug'] = $row->aug_price;
			$data['ur_liempo_prev_year1_sep'] = $row->sep_price;
			$data['ur_liempo_prev_year1_oct'] = $row->oct_price;
			$data['ur_liempo_prev_year1_nov'] = $row->nov_price;
			$data['ur_liempo_prev_year1_dec'] = $row->dec_price;
			$data['ur_liempo_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_liempo_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_liempo_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		
		/*UR Dressed*/
		$join_ur_dressed = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_dressed = $this->admin->get_join('sales_tbl a', $join_ur_dressed, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_dressed1'] = 0;
		$data['ur_dressed2'] = 0;
		$data['ur_dressed3'] = 0;
		$data['ur_dressed4'] = 0;
		$data['ur_dressed5'] = 0;
		$data['ur_dressed6'] = 0;
		$data['ur_dressed7'] = 0;
		$data['ur_dressed8'] = 0;
		$data['ur_dressed9'] = 0;
		$data['ur_dressed10'] = 0;
		$data['ur_dressed11'] = 0;
		$data['ur_dressed12'] = 0;
		$data['ur_dressed_total'] = 0;
		$data['ur_dressed_count'] = 0;
		$data['ur_dressed_avg'] = 0;
		$data['ur_dressed_min'] = 0;
		$data['ur_dressed_max'] = 0;

		foreach($get_ur_dressed as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_dressed' . $month] = $asp;
			$data['ur_dressed_total'] += $asp;

			if($asp < $data['ur_dressed_min'] || $data['ur_dressed_count'] == 0){
				$data['ur_dressed_min'] = $asp;
			}

			if($asp > $data['ur_dressed_max'] || $data['ur_dressed_count'] == 0){
				$data['ur_dressed_max'] = $asp;
			}

			$data['ur_dressed_count']++;
		}

		$data['ur_dressed_avg'] = $data['ur_dressed_total'] != 0 ? $data['ur_dressed_total'] / $data['ur_dressed_count'] : 0;

		$ur_dressed_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_dressed_prev_year2_jan'] = 0;
		$data['ur_dressed_prev_year2_feb'] = 0;
		$data['ur_dressed_prev_year2_mar'] = 0;
		$data['ur_dressed_prev_year2_apr'] = 0;
		$data['ur_dressed_prev_year2_may'] = 0;
		$data['ur_dressed_prev_year2_jun'] = 0;
		$data['ur_dressed_prev_year2_jul'] = 0;
		$data['ur_dressed_prev_year2_aug'] = 0;
		$data['ur_dressed_prev_year2_sep'] = 0;
		$data['ur_dressed_prev_year2_oct'] = 0;
		$data['ur_dressed_prev_year2_nov'] = 0;
		$data['ur_dressed_prev_year2_dec'] = 0;
		$data['ur_dressed_prev_year2_avg'] = 0;
		$data['ur_dressed_prev_year2_min'] = 0;
		$data['ur_dressed_prev_year2_max'] = 0;

		foreach($ur_dressed_prev_year2 as $row){
			$data['ur_dressed_prev_year2_jan'] = $row->jan_price;
			$data['ur_dressed_prev_year2_feb'] = $row->feb_price;
			$data['ur_dressed_prev_year2_mar'] = $row->mar_price;
			$data['ur_dressed_prev_year2_apr'] = $row->apr_price;
			$data['ur_dressed_prev_year2_may'] = $row->may_price;
			$data['ur_dressed_prev_year2_jun'] = $row->jun_price;
			$data['ur_dressed_prev_year2_jul'] = $row->jul_price;
			$data['ur_dressed_prev_year2_aug'] = $row->aug_price;
			$data['ur_dressed_prev_year2_sep'] = $row->sep_price;
			$data['ur_dressed_prev_year2_oct'] = $row->oct_price;
			$data['ur_dressed_prev_year2_nov'] = $row->nov_price;
			$data['ur_dressed_prev_year2_dec'] = $row->dec_price;
			$data['ur_dressed_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_dressed_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_dressed_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_dressed_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_dressed_prev_year1_jan'] = 0;
		$data['ur_dressed_prev_year1_feb'] = 0;
		$data['ur_dressed_prev_year1_mar'] = 0;
		$data['ur_dressed_prev_year1_apr'] = 0;
		$data['ur_dressed_prev_year1_may'] = 0;
		$data['ur_dressed_prev_year1_jun'] = 0;
		$data['ur_dressed_prev_year1_jul'] = 0;
		$data['ur_dressed_prev_year1_aug'] = 0;
		$data['ur_dressed_prev_year1_sep'] = 0;
		$data['ur_dressed_prev_year1_oct'] = 0;
		$data['ur_dressed_prev_year1_nov'] = 0;
		$data['ur_dressed_prev_year1_dec'] = 0;
		$data['ur_dressed_prev_year1_avg'] = 0;
		$data['ur_dressed_prev_year1_min'] = 0;
		$data['ur_dressed_prev_year1_max'] = 0;

		foreach($ur_dressed_prev_year1 as $row){
			$data['ur_dressed_prev_year1_jan'] = $row->jan_price;
			$data['ur_dressed_prev_year1_feb'] = $row->feb_price;
			$data['ur_dressed_prev_year1_mar'] = $row->mar_price;
			$data['ur_dressed_prev_year1_apr'] = $row->apr_price;
			$data['ur_dressed_prev_year1_may'] = $row->may_price;
			$data['ur_dressed_prev_year1_jun'] = $row->jun_price;
			$data['ur_dressed_prev_year1_jul'] = $row->jul_price;
			$data['ur_dressed_prev_year1_aug'] = $row->aug_price;
			$data['ur_dressed_prev_year1_sep'] = $row->sep_price;
			$data['ur_dressed_prev_year1_oct'] = $row->oct_price;
			$data['ur_dressed_prev_year1_nov'] = $row->nov_price;
			$data['ur_dressed_prev_year1_dec'] = $row->dec_price;
			$data['ur_dressed_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_dressed_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_dressed_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		

		/*UR Chooksies*/
		$join_ur_chooksies = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 1000204 OR d.material_code = 1000205 OR d.material_code = 1000206)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_chooksies = $this->admin->get_join('sales_tbl a', $join_ur_chooksies, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_chooksies1'] = 0;
		$data['ur_chooksies2'] = 0;
		$data['ur_chooksies3'] = 0;
		$data['ur_chooksies4'] = 0;
		$data['ur_chooksies5'] = 0;
		$data['ur_chooksies6'] = 0;
		$data['ur_chooksies7'] = 0;
		$data['ur_chooksies8'] = 0;
		$data['ur_chooksies9'] = 0;
		$data['ur_chooksies10'] = 0;
		$data['ur_chooksies11'] = 0;
		$data['ur_chooksies12'] = 0;
		$data['ur_chooksies_total'] = 0;
		$data['ur_chooksies_count'] = 0;
		$data['ur_chooksies_avg'] = 0;
		$data['ur_chooksies_min'] = 0;
		$data['ur_chooksies_max'] = 0;

		foreach($get_ur_chooksies as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_chooksies' . $month] = $asp;
			$data['ur_chooksies_total'] += $asp;

			if($asp < $data['ur_chooksies_min'] || $data['ur_chooksies_count'] == 0){
				$data['ur_chooksies_min'] = $asp;
			}

			if($asp > $data['ur_chooksies_max'] || $data['ur_chooksies_count'] == 0){
				$data['ur_chooksies_max'] = $asp;
			}

			$data['ur_chooksies_count']++;
		}

		$data['ur_chooksies_avg'] = $data['ur_chooksies_total'] != 0 ? $data['ur_chooksies_total'] / $data['ur_chooksies_count'] : 0;

		$ur_chooksies_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_chooksies_prev_year2_jan'] = 0;
		$data['ur_chooksies_prev_year2_feb'] = 0;
		$data['ur_chooksies_prev_year2_mar'] = 0;
		$data['ur_chooksies_prev_year2_apr'] = 0;
		$data['ur_chooksies_prev_year2_may'] = 0;
		$data['ur_chooksies_prev_year2_jun'] = 0;
		$data['ur_chooksies_prev_year2_jul'] = 0;
		$data['ur_chooksies_prev_year2_aug'] = 0;
		$data['ur_chooksies_prev_year2_sep'] = 0;
		$data['ur_chooksies_prev_year2_oct'] = 0;
		$data['ur_chooksies_prev_year2_nov'] = 0;
		$data['ur_chooksies_prev_year2_dec'] = 0;
		$data['ur_chooksies_prev_year2_avg'] = 0;
		$data['ur_chooksies_prev_year2_min'] = 0;
		$data['ur_chooksies_prev_year2_max'] = 0;

		foreach($ur_chooksies_prev_year2 as $row){
			$data['ur_chooksies_prev_year2_jan'] = $row->jan_price;
			$data['ur_chooksies_prev_year2_feb'] = $row->feb_price;
			$data['ur_chooksies_prev_year2_mar'] = $row->mar_price;
			$data['ur_chooksies_prev_year2_apr'] = $row->apr_price;
			$data['ur_chooksies_prev_year2_may'] = $row->may_price;
			$data['ur_chooksies_prev_year2_jun'] = $row->jun_price;
			$data['ur_chooksies_prev_year2_jul'] = $row->jul_price;
			$data['ur_chooksies_prev_year2_aug'] = $row->aug_price;
			$data['ur_chooksies_prev_year2_sep'] = $row->sep_price;
			$data['ur_chooksies_prev_year2_oct'] = $row->oct_price;
			$data['ur_chooksies_prev_year2_nov'] = $row->nov_price;
			$data['ur_chooksies_prev_year2_dec'] = $row->dec_price;
			$data['ur_chooksies_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_chooksies_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_chooksies_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_chooksies_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_chooksies_prev_year1_jan'] = 0;
		$data['ur_chooksies_prev_year1_feb'] = 0;
		$data['ur_chooksies_prev_year1_mar'] = 0;
		$data['ur_chooksies_prev_year1_apr'] = 0;
		$data['ur_chooksies_prev_year1_may'] = 0;
		$data['ur_chooksies_prev_year1_jun'] = 0;
		$data['ur_chooksies_prev_year1_jul'] = 0;
		$data['ur_chooksies_prev_year1_aug'] = 0;
		$data['ur_chooksies_prev_year1_sep'] = 0;
		$data['ur_chooksies_prev_year1_oct'] = 0;
		$data['ur_chooksies_prev_year1_nov'] = 0;
		$data['ur_chooksies_prev_year1_dec'] = 0;
		$data['ur_chooksies_prev_year1_avg'] = 0;
		$data['ur_chooksies_prev_year1_min'] = 0;
		$data['ur_chooksies_prev_year1_max'] = 0;

		foreach($ur_chooksies_prev_year1 as $row){
			$data['ur_chooksies_prev_year1_jan'] = $row->jan_price;
			$data['ur_chooksies_prev_year1_feb'] = $row->feb_price;
			$data['ur_chooksies_prev_year1_mar'] = $row->mar_price;
			$data['ur_chooksies_prev_year1_apr'] = $row->apr_price;
			$data['ur_chooksies_prev_year1_may'] = $row->may_price;
			$data['ur_chooksies_prev_year1_jun'] = $row->jun_price;
			$data['ur_chooksies_prev_year1_jul'] = $row->jul_price;
			$data['ur_chooksies_prev_year1_aug'] = $row->aug_price;
			$data['ur_chooksies_prev_year1_sep'] = $row->sep_price;
			$data['ur_chooksies_prev_year1_oct'] = $row->oct_price;
			$data['ur_chooksies_prev_year1_nov'] = $row->nov_price;
			$data['ur_chooksies_prev_year1_dec'] = $row->dec_price;
			$data['ur_chooksies_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_chooksies_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_chooksies_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$join_ur_marinado = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000638',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_marinado = $this->admin->get_join('sales_tbl a', $join_ur_marinado, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_marinado1'] = 0;
		$data['ur_marinado2'] = 0;
		$data['ur_marinado3'] = 0;
		$data['ur_marinado4'] = 0;
		$data['ur_marinado5'] = 0;
		$data['ur_marinado6'] = 0;
		$data['ur_marinado7'] = 0;
		$data['ur_marinado8'] = 0;
		$data['ur_marinado9'] = 0;
		$data['ur_marinado10'] = 0;
		$data['ur_marinado11'] = 0;
		$data['ur_marinado12'] = 0;
		$data['ur_marinado_total'] = 0;
		$data['ur_marinado_count'] = 0;
		$data['ur_marinado_avg'] = 0;
		$data['ur_marinado_min'] = 0;
		$data['ur_marinado_max'] = 0;

		foreach($get_ur_marinado as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_marinado' . $month] = $asp;
			$data['ur_marinado_total'] += $asp;

			if($asp < $data['ur_marinado_min'] || $data['ur_marinado_count'] == 0){
				$data['ur_marinado_min'] = $asp;
			}

			if($asp > $data['ur_marinado_max'] || $data['ur_marinado_count'] == 0){
				$data['ur_marinado_max'] = $asp;
			}

			$data['ur_marinado_count']++;
		}

		$data['ur_marinado_avg'] = $data['ur_marinado_total'] != 0 ? $data['ur_marinado_total'] / $data['ur_marinado_count'] : 0;

		$ur_marinado_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_marinado_prev_year2_jan'] = 0;
		$data['ur_marinado_prev_year2_feb'] = 0;
		$data['ur_marinado_prev_year2_mar'] = 0;
		$data['ur_marinado_prev_year2_apr'] = 0;
		$data['ur_marinado_prev_year2_may'] = 0;
		$data['ur_marinado_prev_year2_jun'] = 0;
		$data['ur_marinado_prev_year2_jul'] = 0;
		$data['ur_marinado_prev_year2_aug'] = 0;
		$data['ur_marinado_prev_year2_sep'] = 0;
		$data['ur_marinado_prev_year2_oct'] = 0;
		$data['ur_marinado_prev_year2_nov'] = 0;
		$data['ur_marinado_prev_year2_dec'] = 0;
		$data['ur_marinado_prev_year2_avg'] = 0;
		$data['ur_marinado_prev_year2_min'] = 0;
		$data['ur_marinado_prev_year2_max'] = 0;

		foreach($ur_marinado_prev_year2 as $row){
			$data['ur_marinado_prev_year2_jan'] = $row->jan_price;
			$data['ur_marinado_prev_year2_feb'] = $row->feb_price;
			$data['ur_marinado_prev_year2_mar'] = $row->mar_price;
			$data['ur_marinado_prev_year2_apr'] = $row->apr_price;
			$data['ur_marinado_prev_year2_may'] = $row->may_price;
			$data['ur_marinado_prev_year2_jun'] = $row->jun_price;
			$data['ur_marinado_prev_year2_jul'] = $row->jul_price;
			$data['ur_marinado_prev_year2_aug'] = $row->aug_price;
			$data['ur_marinado_prev_year2_sep'] = $row->sep_price;
			$data['ur_marinado_prev_year2_oct'] = $row->oct_price;
			$data['ur_marinado_prev_year2_nov'] = $row->nov_price;
			$data['ur_marinado_prev_year2_dec'] = $row->dec_price;
			$data['ur_marinado_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_marinado_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_marinado_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_marinado_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_marinado_prev_year1_jan'] = 0;
		$data['ur_marinado_prev_year1_feb'] = 0;
		$data['ur_marinado_prev_year1_mar'] = 0;
		$data['ur_marinado_prev_year1_apr'] = 0;
		$data['ur_marinado_prev_year1_may'] = 0;
		$data['ur_marinado_prev_year1_jun'] = 0;
		$data['ur_marinado_prev_year1_jul'] = 0;
		$data['ur_marinado_prev_year1_aug'] = 0;
		$data['ur_marinado_prev_year1_sep'] = 0;
		$data['ur_marinado_prev_year1_oct'] = 0;
		$data['ur_marinado_prev_year1_nov'] = 0;
		$data['ur_marinado_prev_year1_dec'] = 0;
		$data['ur_marinado_prev_year1_avg'] = 0;
		$data['ur_marinado_prev_year1_min'] = 0;
		$data['ur_marinado_prev_year1_max'] = 0;

		foreach($ur_marinado_prev_year1 as $row){
			$data['ur_marinado_prev_year1_jan'] = $row->jan_price;
			$data['ur_marinado_prev_year1_feb'] = $row->feb_price;
			$data['ur_marinado_prev_year1_mar'] = $row->mar_price;
			$data['ur_marinado_prev_year1_apr'] = $row->apr_price;
			$data['ur_marinado_prev_year1_may'] = $row->may_price;
			$data['ur_marinado_prev_year1_jun'] = $row->jun_price;
			$data['ur_marinado_prev_year1_jul'] = $row->jul_price;
			$data['ur_marinado_prev_year1_aug'] = $row->aug_price;
			$data['ur_marinado_prev_year1_sep'] = $row->sep_price;
			$data['ur_marinado_prev_year1_oct'] = $row->oct_price;
			$data['ur_marinado_prev_year1_nov'] = $row->nov_price;
			$data['ur_marinado_prev_year1_dec'] = $row->dec_price;
			$data['ur_marinado_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_marinado_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_marinado_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		$join_ur_spicy = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 1000092 OR d.material_code = 1000401 OR d.material_code = 1000402 OR d.material_code = 1000617)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_spicy = $this->admin->get_join('sales_tbl a', $join_ur_spicy, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_spicy1'] = 0;
		$data['ur_spicy2'] = 0;
		$data['ur_spicy3'] = 0;
		$data['ur_spicy4'] = 0;
		$data['ur_spicy5'] = 0;
		$data['ur_spicy6'] = 0;
		$data['ur_spicy7'] = 0;
		$data['ur_spicy8'] = 0;
		$data['ur_spicy9'] = 0;
		$data['ur_spicy10'] = 0;
		$data['ur_spicy11'] = 0;
		$data['ur_spicy12'] = 0;
		$data['ur_spicy_total'] = 0;
		$data['ur_spicy_count'] = 0;
		$data['ur_spicy_avg'] = 0;
		$data['ur_spicy_min'] = 0;
		$data['ur_spicy_max'] = 0;

		foreach($get_ur_spicy as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_spicy' . $month] = $asp;
			$data['ur_spicy_total'] += $asp;

			if($asp < $data['ur_spicy_min'] || $data['ur_spicy_count'] == 0){
				$data['ur_spicy_min'] = $asp;
			}

			if($asp > $data['ur_spicy_max'] || $data['ur_spicy_count'] == 0){
				$data['ur_spicy_max'] = $asp;
			}

			$data['ur_spicy_count']++;
		}

		$data['ur_spicy_avg'] = $data['ur_spicy_total'] != 0 ? $data['ur_spicy_total'] / $data['ur_spicy_count'] : 0;

		$ur_spicy_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_spicy_prev_year2_jan'] = 0;
		$data['ur_spicy_prev_year2_feb'] = 0;
		$data['ur_spicy_prev_year2_mar'] = 0;
		$data['ur_spicy_prev_year2_apr'] = 0;
		$data['ur_spicy_prev_year2_may'] = 0;
		$data['ur_spicy_prev_year2_jun'] = 0;
		$data['ur_spicy_prev_year2_jul'] = 0;
		$data['ur_spicy_prev_year2_aug'] = 0;
		$data['ur_spicy_prev_year2_sep'] = 0;
		$data['ur_spicy_prev_year2_oct'] = 0;
		$data['ur_spicy_prev_year2_nov'] = 0;
		$data['ur_spicy_prev_year2_dec'] = 0;
		$data['ur_spicy_prev_year2_avg'] = 0;
		$data['ur_spicy_prev_year2_min'] = 0;
		$data['ur_spicy_prev_year2_max'] = 0;

		foreach($ur_spicy_prev_year2 as $row){
			$data['ur_spicy_prev_year2_jan'] = $row->jan_price;
			$data['ur_spicy_prev_year2_feb'] = $row->feb_price;
			$data['ur_spicy_prev_year2_mar'] = $row->mar_price;
			$data['ur_spicy_prev_year2_apr'] = $row->apr_price;
			$data['ur_spicy_prev_year2_may'] = $row->may_price;
			$data['ur_spicy_prev_year2_jun'] = $row->jun_price;
			$data['ur_spicy_prev_year2_jul'] = $row->jul_price;
			$data['ur_spicy_prev_year2_aug'] = $row->aug_price;
			$data['ur_spicy_prev_year2_sep'] = $row->sep_price;
			$data['ur_spicy_prev_year2_oct'] = $row->oct_price;
			$data['ur_spicy_prev_year2_nov'] = $row->nov_price;
			$data['ur_spicy_prev_year2_dec'] = $row->dec_price;
			$data['ur_spicy_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_spicy_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_spicy_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_spicy_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_spicy_prev_year1_jan'] = 0;
		$data['ur_spicy_prev_year1_feb'] = 0;
		$data['ur_spicy_prev_year1_mar'] = 0;
		$data['ur_spicy_prev_year1_apr'] = 0;
		$data['ur_spicy_prev_year1_may'] = 0;
		$data['ur_spicy_prev_year1_jun'] = 0;
		$data['ur_spicy_prev_year1_jul'] = 0;
		$data['ur_spicy_prev_year1_aug'] = 0;
		$data['ur_spicy_prev_year1_sep'] = 0;
		$data['ur_spicy_prev_year1_oct'] = 0;
		$data['ur_spicy_prev_year1_nov'] = 0;
		$data['ur_spicy_prev_year1_dec'] = 0;
		$data['ur_spicy_prev_year1_avg'] = 0;
		$data['ur_spicy_prev_year1_min'] = 0;
		$data['ur_spicy_prev_year1_max'] = 0;

		foreach($ur_spicy_prev_year1 as $row){
			$data['ur_spicy_prev_year1_jan'] = $row->jan_price;
			$data['ur_spicy_prev_year1_feb'] = $row->feb_price;
			$data['ur_spicy_prev_year1_mar'] = $row->mar_price;
			$data['ur_spicy_prev_year1_apr'] = $row->apr_price;
			$data['ur_spicy_prev_year1_may'] = $row->may_price;
			$data['ur_spicy_prev_year1_jun'] = $row->jun_price;
			$data['ur_spicy_prev_year1_jul'] = $row->jul_price;
			$data['ur_spicy_prev_year1_aug'] = $row->aug_price;
			$data['ur_spicy_prev_year1_sep'] = $row->sep_price;
			$data['ur_spicy_prev_year1_oct'] = $row->oct_price;
			$data['ur_spicy_prev_year1_nov'] = $row->nov_price;
			$data['ur_spicy_prev_year1_dec'] = $row->dec_price;
			$data['ur_spicy_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_spicy_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_spicy_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*Barbeque*/
		$join_ur_barbeque = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000548',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER SPECIALTY PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_barbeque = $this->admin->get_join('sales_tbl a', $join_ur_barbeque, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_barbeque1'] = 0;
		$data['ur_barbeque2'] = 0;
		$data['ur_barbeque3'] = 0;
		$data['ur_barbeque4'] = 0;
		$data['ur_barbeque5'] = 0;
		$data['ur_barbeque6'] = 0;
		$data['ur_barbeque7'] = 0;
		$data['ur_barbeque8'] = 0;
		$data['ur_barbeque9'] = 0;
		$data['ur_barbeque10'] = 0;
		$data['ur_barbeque11'] = 0;
		$data['ur_barbeque12'] = 0;
		$data['ur_barbeque_total'] = 0;
		$data['ur_barbeque_count'] = 0;
		$data['ur_barbeque_avg'] = 0;
		$data['ur_barbeque_min'] = 0;
		$data['ur_barbeque_max'] = 0;

		foreach($get_ur_barbeque as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_barbeque' . $month] = $asp;
			$data['ur_barbeque_total'] += $asp;

			if($asp < $data['ur_barbeque_min'] || $data['ur_barbeque_count'] == 0){
				$data['ur_barbeque_min'] = $asp;
			}

			if($asp > $data['ur_barbeque_max'] || $data['ur_barbeque_count'] == 0){
				$data['ur_barbeque_max'] = $asp;
			}

			$data['ur_barbeque_count']++;
		}

		$data['ur_barbeque_avg'] = $data['ur_barbeque_total'] != 0 ? $data['ur_barbeque_total'] / $data['ur_barbeque_count'] : 0;


		$ur_barbeque_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BBQ', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_barbeque_prev_year2_jan'] = 0;
		$data['ur_barbeque_prev_year2_feb'] = 0;
		$data['ur_barbeque_prev_year2_mar'] = 0;
		$data['ur_barbeque_prev_year2_apr'] = 0;
		$data['ur_barbeque_prev_year2_may'] = 0;
		$data['ur_barbeque_prev_year2_jun'] = 0;
		$data['ur_barbeque_prev_year2_jul'] = 0;
		$data['ur_barbeque_prev_year2_aug'] = 0;
		$data['ur_barbeque_prev_year2_sep'] = 0;
		$data['ur_barbeque_prev_year2_oct'] = 0;
		$data['ur_barbeque_prev_year2_nov'] = 0;
		$data['ur_barbeque_prev_year2_dec'] = 0;
		$data['ur_barbeque_prev_year2_avg'] = 0;
		$data['ur_barbeque_prev_year2_min'] = 0;
		$data['ur_barbeque_prev_year2_max'] = 0;

		foreach($ur_barbeque_prev_year2 as $row){
			$data['ur_barbeque_prev_year2_jan'] = $row->jan_price;
			$data['ur_barbeque_prev_year2_feb'] = $row->feb_price;
			$data['ur_barbeque_prev_year2_mar'] = $row->mar_price;
			$data['ur_barbeque_prev_year2_apr'] = $row->apr_price;
			$data['ur_barbeque_prev_year2_may'] = $row->may_price;
			$data['ur_barbeque_prev_year2_jun'] = $row->jun_price;
			$data['ur_barbeque_prev_year2_jul'] = $row->jul_price;
			$data['ur_barbeque_prev_year2_aug'] = $row->aug_price;
			$data['ur_barbeque_prev_year2_sep'] = $row->sep_price;
			$data['ur_barbeque_prev_year2_oct'] = $row->oct_price;
			$data['ur_barbeque_prev_year2_nov'] = $row->nov_price;
			$data['ur_barbeque_prev_year2_dec'] = $row->dec_price;
			$data['ur_barbeque_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_barbeque_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_barbeque_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_barbeque_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BBQ', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_barbeque_prev_year1_jan'] = 0;
		$data['ur_barbeque_prev_year1_feb'] = 0;
		$data['ur_barbeque_prev_year1_mar'] = 0;
		$data['ur_barbeque_prev_year1_apr'] = 0;
		$data['ur_barbeque_prev_year1_may'] = 0;
		$data['ur_barbeque_prev_year1_jun'] = 0;
		$data['ur_barbeque_prev_year1_jul'] = 0;
		$data['ur_barbeque_prev_year1_aug'] = 0;
		$data['ur_barbeque_prev_year1_sep'] = 0;
		$data['ur_barbeque_prev_year1_oct'] = 0;
		$data['ur_barbeque_prev_year1_nov'] = 0;
		$data['ur_barbeque_prev_year1_dec'] = 0;
		$data['ur_barbeque_prev_year1_avg'] = 0;
		$data['ur_barbeque_prev_year1_min'] = 0;
		$data['ur_barbeque_prev_year1_max'] = 0;

		foreach($ur_barbeque_prev_year1 as $row){
			$data['ur_barbeque_prev_year1_jan'] = $row->jan_price;
			$data['ur_barbeque_prev_year1_feb'] = $row->feb_price;
			$data['ur_barbeque_prev_year1_mar'] = $row->mar_price;
			$data['ur_barbeque_prev_year1_apr'] = $row->apr_price;
			$data['ur_barbeque_prev_year1_may'] = $row->may_price;
			$data['ur_barbeque_prev_year1_jun'] = $row->jun_price;
			$data['ur_barbeque_prev_year1_jul'] = $row->jul_price;
			$data['ur_barbeque_prev_year1_aug'] = $row->aug_price;
			$data['ur_barbeque_prev_year1_sep'] = $row->sep_price;
			$data['ur_barbeque_prev_year1_oct'] = $row->oct_price;
			$data['ur_barbeque_prev_year1_nov'] = $row->nov_price;
			$data['ur_barbeque_prev_year1_dec'] = $row->dec_price;
			$data['ur_barbeque_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_barbeque_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_barbeque_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*Nuggets*/
		$join_ur_nuggets = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 1000403 OR d.material_code = 4000000)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER VAP PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTERS\''
		);

		$get_ur_nuggets = $this->admin->get_join('sales_tbl a', $join_ur_nuggets, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_nuggets1'] = 0;
		$data['ur_nuggets2'] = 0;
		$data['ur_nuggets3'] = 0;
		$data['ur_nuggets4'] = 0;
		$data['ur_nuggets5'] = 0;
		$data['ur_nuggets6'] = 0;
		$data['ur_nuggets7'] = 0;
		$data['ur_nuggets8'] = 0;
		$data['ur_nuggets9'] = 0;
		$data['ur_nuggets10'] = 0;
		$data['ur_nuggets11'] = 0;
		$data['ur_nuggets12'] = 0;
		$data['ur_nuggets_total'] = 0;
		$data['ur_nuggets_count'] = 0;
		$data['ur_nuggets_avg'] = 0;
		$data['ur_nuggets_min'] = 0;
		$data['ur_nuggets_max'] = 0;

		foreach($get_ur_nuggets as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_nuggets' . $month] = $asp;
			$data['ur_nuggets_total'] += $asp;

			if($asp < $data['ur_nuggets_min'] || $data['ur_nuggets_count'] == 0){
				$data['ur_nuggets_min'] = $asp;
			}

			if($asp > $data['ur_nuggets_max'] || $data['ur_nuggets_count'] == 0){
				$data['ur_nuggets_max'] = $asp;
			}

			$data['ur_nuggets_count']++;
		}

		$data['ur_nuggets_avg'] = $data['ur_nuggets_total'] != 0 ? $data['ur_nuggets_total'] / $data['ur_nuggets_count'] : 0;


		$ur_nuggets_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-NUGGETS', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_nuggets_prev_year2_jan'] = 0;
		$data['ur_nuggets_prev_year2_feb'] = 0;
		$data['ur_nuggets_prev_year2_mar'] = 0;
		$data['ur_nuggets_prev_year2_apr'] = 0;
		$data['ur_nuggets_prev_year2_may'] = 0;
		$data['ur_nuggets_prev_year2_jun'] = 0;
		$data['ur_nuggets_prev_year2_jul'] = 0;
		$data['ur_nuggets_prev_year2_aug'] = 0;
		$data['ur_nuggets_prev_year2_sep'] = 0;
		$data['ur_nuggets_prev_year2_oct'] = 0;
		$data['ur_nuggets_prev_year2_nov'] = 0;
		$data['ur_nuggets_prev_year2_dec'] = 0;
		$data['ur_nuggets_prev_year2_avg'] = 0;
		$data['ur_nuggets_prev_year2_min'] = 0;
		$data['ur_nuggets_prev_year2_max'] = 0;

		foreach($ur_nuggets_prev_year2 as $row){
			$data['ur_nuggets_prev_year2_jan'] = $row->jan_price;
			$data['ur_nuggets_prev_year2_feb'] = $row->feb_price;
			$data['ur_nuggets_prev_year2_mar'] = $row->mar_price;
			$data['ur_nuggets_prev_year2_apr'] = $row->apr_price;
			$data['ur_nuggets_prev_year2_may'] = $row->may_price;
			$data['ur_nuggets_prev_year2_jun'] = $row->jun_price;
			$data['ur_nuggets_prev_year2_jul'] = $row->jul_price;
			$data['ur_nuggets_prev_year2_aug'] = $row->aug_price;
			$data['ur_nuggets_prev_year2_sep'] = $row->sep_price;
			$data['ur_nuggets_prev_year2_oct'] = $row->oct_price;
			$data['ur_nuggets_prev_year2_nov'] = $row->nov_price;
			$data['ur_nuggets_prev_year2_dec'] = $row->dec_price;
			$data['ur_nuggets_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_nuggets_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_nuggets_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_nuggets_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-NUGGETS', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_nuggets_prev_year1_jan'] = 0;
		$data['ur_nuggets_prev_year1_feb'] = 0;
		$data['ur_nuggets_prev_year1_mar'] = 0;
		$data['ur_nuggets_prev_year1_apr'] = 0;
		$data['ur_nuggets_prev_year1_may'] = 0;
		$data['ur_nuggets_prev_year1_jun'] = 0;
		$data['ur_nuggets_prev_year1_jul'] = 0;
		$data['ur_nuggets_prev_year1_aug'] = 0;
		$data['ur_nuggets_prev_year1_sep'] = 0;
		$data['ur_nuggets_prev_year1_oct'] = 0;
		$data['ur_nuggets_prev_year1_nov'] = 0;
		$data['ur_nuggets_prev_year1_dec'] = 0;
		$data['ur_nuggets_prev_year1_avg'] = 0;
		$data['ur_nuggets_prev_year1_min'] = 0;
		$data['ur_nuggets_prev_year1_max'] = 0;

		foreach($ur_nuggets_prev_year1 as $row){
			$data['ur_nuggets_prev_year1_jan'] = $row->jan_price;
			$data['ur_nuggets_prev_year1_feb'] = $row->feb_price;
			$data['ur_nuggets_prev_year1_mar'] = $row->mar_price;
			$data['ur_nuggets_prev_year1_apr'] = $row->apr_price;
			$data['ur_nuggets_prev_year1_may'] = $row->may_price;
			$data['ur_nuggets_prev_year1_jun'] = $row->jun_price;
			$data['ur_nuggets_prev_year1_jul'] = $row->jul_price;
			$data['ur_nuggets_prev_year1_aug'] = $row->aug_price;
			$data['ur_nuggets_prev_year1_sep'] = $row->sep_price;
			$data['ur_nuggets_prev_year1_oct'] = $row->oct_price;
			$data['ur_nuggets_prev_year1_nov'] = $row->nov_price;
			$data['ur_nuggets_prev_year1_dec'] = $row->dec_price;
			$data['ur_nuggets_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_nuggets_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_nuggets_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*11 PCS*/
		$join_ur_11pcs= array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000632',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER SPECIALTY PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTERS\''
		);

		$get_ur_11pcs = $this->admin->get_join('sales_tbl a', $join_ur_11pcs, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_11pcs_1'] = 0;
		$data['ur_11pcs_2'] = 0;
		$data['ur_11pcs_3'] = 0;
		$data['ur_11pcs_4'] = 0;
		$data['ur_11pcs_5'] = 0;
		$data['ur_11pcs_6'] = 0;
		$data['ur_11pcs_7'] = 0;
		$data['ur_11pcs_8'] = 0;
		$data['ur_11pcs_9'] = 0;
		$data['ur_11pcs_10'] = 0;
		$data['ur_11pcs_11'] = 0;
		$data['ur_11pcs_12'] = 0;
		$data['ur_11pcs_total'] = 0;
		$data['ur_11pcs_count'] = 0;
		$data['ur_11pcs_avg'] = 0;
		$data['ur_11pcs_min'] = 0;
		$data['ur_11pcs_max'] = 0;

		foreach($get_ur_11pcs as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_11pcs_' . $month] = $asp;
			$data['ur_11pcs_total'] += $asp;

			if($asp < $data['ur_11pcs_min'] || $data['ur_11pcs_count'] == 0){
				$data['ur_11pcs_min'] = $asp;
			}

			if($asp > $data['ur_11pcs_max'] || $data['ur_11pcs_count'] == 0){
				$data['ur_11pcs_max'] = $asp;
			}

			$data['ur_11pcs_count']++;
		}

		$data['ur_11pcs_avg'] = $data['ur_11pcs_total'] != 0 ? $data['ur_11pcs_total'] / $data['ur_11pcs_count'] : 0;

		$ur_11pcs_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PCS', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_11pcs_prev_year2_jan'] = 0;
		$data['ur_11pcs_prev_year2_feb'] = 0;
		$data['ur_11pcs_prev_year2_mar'] = 0;
		$data['ur_11pcs_prev_year2_apr'] = 0;
		$data['ur_11pcs_prev_year2_may'] = 0;
		$data['ur_11pcs_prev_year2_jun'] = 0;
		$data['ur_11pcs_prev_year2_jul'] = 0;
		$data['ur_11pcs_prev_year2_aug'] = 0;
		$data['ur_11pcs_prev_year2_sep'] = 0;
		$data['ur_11pcs_prev_year2_oct'] = 0;
		$data['ur_11pcs_prev_year2_nov'] = 0;
		$data['ur_11pcs_prev_year2_dec'] = 0;
		$data['ur_11pcs_prev_year2_avg'] = 0;
		$data['ur_11pcs_prev_year2_min'] = 0;
		$data['ur_11pcs_prev_year2_max'] = 0;

		foreach($ur_11pcs_prev_year2 as $row){
			$data['ur_11pcs_prev_year2_jan'] = $row->jan_price;
			$data['ur_11pcs_prev_year2_feb'] = $row->feb_price;
			$data['ur_11pcs_prev_year2_mar'] = $row->mar_price;
			$data['ur_11pcs_prev_year2_apr'] = $row->apr_price;
			$data['ur_11pcs_prev_year2_may'] = $row->may_price;
			$data['ur_11pcs_prev_year2_jun'] = $row->jun_price;
			$data['ur_11pcs_prev_year2_jul'] = $row->jul_price;
			$data['ur_11pcs_prev_year2_aug'] = $row->aug_price;
			$data['ur_11pcs_prev_year2_sep'] = $row->sep_price;
			$data['ur_11pcs_prev_year2_oct'] = $row->oct_price;
			$data['ur_11pcs_prev_year2_nov'] = $row->nov_price;
			$data['ur_11pcs_prev_year2_dec'] = $row->dec_price;
			$data['ur_11pcs_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_11pcs_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_11pcs_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_11pcs_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PCS', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_11pcs_prev_year1_jan'] = 0;
		$data['ur_11pcs_prev_year1_feb'] = 0;
		$data['ur_11pcs_prev_year1_mar'] = 0;
		$data['ur_11pcs_prev_year1_apr'] = 0;
		$data['ur_11pcs_prev_year1_may'] = 0;
		$data['ur_11pcs_prev_year1_jun'] = 0;
		$data['ur_11pcs_prev_year1_jul'] = 0;
		$data['ur_11pcs_prev_year1_aug'] = 0;
		$data['ur_11pcs_prev_year1_sep'] = 0;
		$data['ur_11pcs_prev_year1_oct'] = 0;
		$data['ur_11pcs_prev_year1_nov'] = 0;
		$data['ur_11pcs_prev_year1_dec'] = 0;
		$data['ur_11pcs_prev_year1_avg'] = 0;
		$data['ur_11pcs_prev_year1_min'] = 0;
		$data['ur_11pcs_prev_year1_max'] = 0;

		foreach($ur_11pcs_prev_year1 as $row){
			$data['ur_11pcs_prev_year1_jan'] = $row->jan_price;
			$data['ur_11pcs_prev_year1_feb'] = $row->feb_price;
			$data['ur_11pcs_prev_year1_mar'] = $row->mar_price;
			$data['ur_11pcs_prev_year1_apr'] = $row->apr_price;
			$data['ur_11pcs_prev_year1_may'] = $row->may_price;
			$data['ur_11pcs_prev_year1_jun'] = $row->jun_price;
			$data['ur_11pcs_prev_year1_jul'] = $row->jul_price;
			$data['ur_11pcs_prev_year1_aug'] = $row->aug_price;
			$data['ur_11pcs_prev_year1_sep'] = $row->sep_price;
			$data['ur_11pcs_prev_year1_oct'] = $row->oct_price;
			$data['ur_11pcs_prev_year1_nov'] = $row->nov_price;
			$data['ur_11pcs_prev_year1_dec'] = $row->dec_price;
			$data['ur_11pcs_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_11pcs_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_11pcs_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*UR Chooksies Cut ups*/
		$join_ur_cutups = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000199',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'NON MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_cutups = $this->admin->get_join('sales_tbl a', $join_ur_cutups, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_cutups1'] = 0;
		$data['ur_cutups2'] = 0;
		$data['ur_cutups3'] = 0;
		$data['ur_cutups4'] = 0;
		$data['ur_cutups5'] = 0;
		$data['ur_cutups6'] = 0;
		$data['ur_cutups7'] = 0;
		$data['ur_cutups8'] = 0;
		$data['ur_cutups9'] = 0;
		$data['ur_cutups10'] = 0;
		$data['ur_cutups11'] = 0;
		$data['ur_cutups12'] = 0;
		$data['ur_cutups_total'] = 0;
		$data['ur_cutups_count'] = 0;
		$data['ur_cutups_avg'] = 0;
		$data['ur_cutups_min'] = 0;
		$data['ur_cutups_max'] = 0;

		foreach($get_ur_cutups as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_cutups' . $month] = $asp;
			$data['ur_cutups_total'] += $asp;

			if($asp < $data['ur_cutups_min'] || $data['ur_cutups_count'] == 0){
				$data['ur_cutups_min'] = $asp;
			}

			if($asp > $data['ur_cutups_max'] || $data['ur_cutups_count'] == 0){
				$data['ur_cutups_max'] = $asp;
			}

			$data['ur_cutups_count']++;
		}

		$data['ur_cutups_avg'] = $data['ur_cutups_total'] != 0 ? $data['ur_cutups_total'] / $data['ur_cutups_count'] : 0;


		$ur_cutups_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => ' CHOOKSIES CUTUPS', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_cutups_prev_year2_jan'] = 0;
		$data['ur_cutups_prev_year2_feb'] = 0;
		$data['ur_cutups_prev_year2_mar'] = 0;
		$data['ur_cutups_prev_year2_apr'] = 0;
		$data['ur_cutups_prev_year2_may'] = 0;
		$data['ur_cutups_prev_year2_jun'] = 0;
		$data['ur_cutups_prev_year2_jul'] = 0;
		$data['ur_cutups_prev_year2_aug'] = 0;
		$data['ur_cutups_prev_year2_sep'] = 0;
		$data['ur_cutups_prev_year2_oct'] = 0;
		$data['ur_cutups_prev_year2_nov'] = 0;
		$data['ur_cutups_prev_year2_dec'] = 0;
		$data['ur_cutups_prev_year2_avg'] = 0;
		$data['ur_cutups_prev_year2_min'] = 0;
		$data['ur_cutups_prev_year2_max'] = 0;

		foreach($ur_cutups_prev_year2 as $row){
			$data['ur_cutups_prev_year2_jan'] = $row->jan_price;
			$data['ur_cutups_prev_year2_feb'] = $row->feb_price;
			$data['ur_cutups_prev_year2_mar'] = $row->mar_price;
			$data['ur_cutups_prev_year2_apr'] = $row->apr_price;
			$data['ur_cutups_prev_year2_may'] = $row->may_price;
			$data['ur_cutups_prev_year2_jun'] = $row->jun_price;
			$data['ur_cutups_prev_year2_jul'] = $row->jul_price;
			$data['ur_cutups_prev_year2_aug'] = $row->aug_price;
			$data['ur_cutups_prev_year2_sep'] = $row->sep_price;
			$data['ur_cutups_prev_year2_oct'] = $row->oct_price;
			$data['ur_cutups_prev_year2_nov'] = $row->nov_price;
			$data['ur_cutups_prev_year2_dec'] = $row->dec_price;
			$data['ur_cutups_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_cutups_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_cutups_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_cutups_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES CUTUPS', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_cutups_prev_year1_jan'] = 0;
		$data['ur_cutups_prev_year1_feb'] = 0;
		$data['ur_cutups_prev_year1_mar'] = 0;
		$data['ur_cutups_prev_year1_apr'] = 0;
		$data['ur_cutups_prev_year1_may'] = 0;
		$data['ur_cutups_prev_year1_jun'] = 0;
		$data['ur_cutups_prev_year1_jul'] = 0;
		$data['ur_cutups_prev_year1_aug'] = 0;
		$data['ur_cutups_prev_year1_sep'] = 0;
		$data['ur_cutups_prev_year1_oct'] = 0;
		$data['ur_cutups_prev_year1_nov'] = 0;
		$data['ur_cutups_prev_year1_dec'] = 0;
		$data['ur_cutups_prev_year1_avg'] = 0;
		$data['ur_cutups_prev_year1_min'] = 0;
		$data['ur_cutups_prev_year1_max'] = 0;

		foreach($ur_cutups_prev_year1 as $row){
			$data['ur_cutups_prev_year1_jan'] = $row->jan_price;
			$data['ur_cutups_prev_year1_feb'] = $row->feb_price;
			$data['ur_cutups_prev_year1_mar'] = $row->mar_price;
			$data['ur_cutups_prev_year1_apr'] = $row->apr_price;
			$data['ur_cutups_prev_year1_may'] = $row->may_price;
			$data['ur_cutups_prev_year1_jun'] = $row->jun_price;
			$data['ur_cutups_prev_year1_jul'] = $row->jul_price;
			$data['ur_cutups_prev_year1_aug'] = $row->aug_price;
			$data['ur_cutups_prev_year1_sep'] = $row->sep_price;
			$data['ur_cutups_prev_year1_oct'] = $row->oct_price;
			$data['ur_cutups_prev_year1_nov'] = $row->nov_price;
			$data['ur_cutups_prev_year1_dec'] = $row->dec_price;
			$data['ur_cutups_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_cutups_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_cutups_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*UR Liver / Gizzard*/
		$join_ur_liver = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVER / GIZZARD\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_liver = $this->admin->get_join('sales_tbl a', $join_ur_liver, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_liver1'] = 0;
		$data['ur_liver2'] = 0;
		$data['ur_liver3'] = 0;
		$data['ur_liver4'] = 0;
		$data['ur_liver5'] = 0;
		$data['ur_liver6'] = 0;
		$data['ur_liver7'] = 0;
		$data['ur_liver8'] = 0;
		$data['ur_liver9'] = 0;
		$data['ur_liver10'] = 0;
		$data['ur_liver11'] = 0;
		$data['ur_liver12'] = 0;
		$data['ur_liver_total'] = 0;
		$data['ur_liver_count'] = 0;
		$data['ur_liver_avg'] = 0;
		$data['ur_liver_min'] = 0;
		$data['ur_liver_max'] = 0;

		foreach($get_ur_liver as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_liver' . $month] = $asp;
			$data['ur_liver_total'] += $asp;

			if($asp < $data['ur_liver_min'] || $data['ur_liver_count'] == 0){
				$data['ur_cutups_min'] = $asp;
			}

			if($asp > $data['ur_liver_max'] || $data['ur_liver_count'] == 0){
				$data['ur_liver_max'] = $asp;
			}

			$data['ur_liver_count']++;
		}

		$data['ur_liver_avg'] = $data['ur_liver_total'] != 0 ? $data['ur_liver_total'] / $data['ur_liver_count'] : 0;


		$ur_liver_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'GIZZARD / LIVER', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_liver_prev_year2_jan'] = 0;
		$data['ur_liver_prev_year2_feb'] = 0;
		$data['ur_liver_prev_year2_mar'] = 0;
		$data['ur_liver_prev_year2_apr'] = 0;
		$data['ur_liver_prev_year2_may'] = 0;
		$data['ur_liver_prev_year2_jun'] = 0;
		$data['ur_liver_prev_year2_jul'] = 0;
		$data['ur_liver_prev_year2_aug'] = 0;
		$data['ur_liver_prev_year2_sep'] = 0;
		$data['ur_liver_prev_year2_oct'] = 0;
		$data['ur_liver_prev_year2_nov'] = 0;
		$data['ur_liver_prev_year2_dec'] = 0;
		$data['ur_liver_prev_year2_avg'] = 0;
		$data['ur_liver_prev_year2_min'] = 0;
		$data['ur_liver_prev_year2_max'] = 0;

		foreach($ur_liver_prev_year2 as $row){
			$data['ur_liver_prev_year2_jan'] = $row->jan_price;
			$data['ur_liver_prev_year2_feb'] = $row->feb_price;
			$data['ur_liver_prev_year2_mar'] = $row->mar_price;
			$data['ur_liver_prev_year2_apr'] = $row->apr_price;
			$data['ur_liver_prev_year2_may'] = $row->may_price;
			$data['ur_liver_prev_year2_jun'] = $row->jun_price;
			$data['ur_liver_prev_year2_jul'] = $row->jul_price;
			$data['ur_liver_prev_year2_aug'] = $row->aug_price;
			$data['ur_liver_prev_year2_sep'] = $row->sep_price;
			$data['ur_liver_prev_year2_oct'] = $row->oct_price;
			$data['ur_liver_prev_year2_nov'] = $row->nov_price;
			$data['ur_liver_prev_year2_dec'] = $row->dec_price;
			$data['ur_liver_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_liver_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_liver_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$ur_liver_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'GIZZARD / LIVER', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_liver_prev_year1_jan'] = 0;
		$data['ur_liver_prev_year1_feb'] = 0;
		$data['ur_liver_prev_year1_mar'] = 0;
		$data['ur_liver_prev_year1_apr'] = 0;
		$data['ur_liver_prev_year1_may'] = 0;
		$data['ur_liver_prev_year1_jun'] = 0;
		$data['ur_liver_prev_year1_jul'] = 0;
		$data['ur_liver_prev_year1_aug'] = 0;
		$data['ur_liver_prev_year1_sep'] = 0;
		$data['ur_liver_prev_year1_oct'] = 0;
		$data['ur_liver_prev_year1_nov'] = 0;
		$data['ur_liver_prev_year1_dec'] = 0;
		$data['ur_liver_prev_year1_avg'] = 0;
		$data['ur_liver_prev_year1_min'] = 0;
		$data['ur_liver_prev_year1_max'] = 0;

		foreach($ur_liver_prev_year1 as $row){
			$data['ur_liver_prev_year1_jan'] = $row->jan_price;
			$data['ur_liver_prev_year1_feb'] = $row->feb_price;
			$data['ur_liver_prev_year1_mar'] = $row->mar_price;
			$data['ur_liver_prev_year1_apr'] = $row->apr_price;
			$data['ur_liver_prev_year1_may'] = $row->may_price;
			$data['ur_liver_prev_year1_jun'] = $row->jun_price;
			$data['ur_liver_prev_year1_jul'] = $row->jul_price;
			$data['ur_liver_prev_year1_aug'] = $row->aug_price;
			$data['ur_liver_prev_year1_sep'] = $row->sep_price;
			$data['ur_liver_prev_year1_oct'] = $row->oct_price;
			$data['ur_liver_prev_year1_nov'] = $row->nov_price;
			$data['ur_liver_prev_year1_dec'] = $row->dec_price;
			$data['ur_liver_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['ur_liver_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['ur_liver_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*REYAL*/

		/*REYAL Chicken*/

		$get_reyal_orc = $this->admin->get_query("SELECT p.size_name, AVG(asp_tbl.jan_asp) as orc_jan, AVG(asp_tbl.feb_asp) as orc_feb, AVG(asp_tbl.mar_asp) as orc_mar, AVG(asp_tbl.apr_asp) as orc_apr, AVG(asp_tbl.may_asp) as orc_may, AVG(asp_tbl.jun_asp) as orc_jun, AVG(asp_tbl.jul_asp) as orc_jul, AVG(asp_tbl.aug_asp) as orc_aug, AVG(asp_tbl.sep_asp) as orc_sep, AVG(asp_tbl.oct_asp) as orc_oct, AVG(asp_tbl.nov_asp) as orc_nov, AVG(asp_tbl.dec_asp) as orc_dec FROM material_tbl o, size_tbl p,

		(SELECT m.material_id, m.size_id,

		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-01-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as jan_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-02-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as feb_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-03-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as mar_asp,
    
   		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-04-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as apr_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-05-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as may_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-06-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as jun_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-07-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as jul_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-08-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as aug_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-09-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as sep_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-10-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as oct_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-11-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as nov_asp,
    
    	(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = 2020 JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'REYAL' AND c.sales_det_date = '" . $year . "-12-01' WHERE d.material_id =  m.material_id AND f.bc_id = " . $bc_id . ") as dec_asp
    
		FROM material_size_tbl m, brand_tbl n WHERE m.brand_id = n.brand_id AND m.material_size_status = 1 AND n.brand_name = 'REYAL') as asp_tbl

		WHERE o.material_id = asp_tbl.material_id AND p.size_id = asp_tbl.size_id GROUP BY p.size_id");

		$data['reyal_bfc1'] = $data['reyal_bfc2'] = $data['reyal_bfc3'] = $data['reyal_bfc4'] = $data['reyal_bfc5'] = $data['reyal_bfc6'] = $data['reyal_bfc7'] = $data['reyal_bfc8'] = $data['reyal_bfc9'] = $data['reyal_bfc10'] = $data['reyal_bfc11'] = $data['reyal_bfc12'] = $data['reyal_bfc_total'] = $data['reyal_bfc_count'] = $data['reyal_bfc_avg'] = $data['reyal_bfc_min'] = $data['reyal_bfc_max'] = 0;

		
		foreach($get_reyal_orc as $row){

			$orc_size = $row->size_name;
			$orc_jan = $row->orc_jan;
			$orc_feb = $row->orc_feb;
			$orc_mar = $row->orc_mar;
			$orc_apr = $row->orc_apr;
			$orc_may = $row->orc_may;
			$orc_jun = $row->orc_jun;
			$orc_jul = $row->orc_jul;
			$orc_aug = $row->orc_aug;
			$orc_sep = $row->orc_sep;
			$orc_oct = $row->orc_oct;
			$orc_nov = $row->orc_nov;
			$orc_dec = $row->orc_dec;
			$orc_min = min($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_max = max($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_avg = ($orc_jan + $orc_feb + $orc_mar + $orc_apr + $orc_may + $orc_jun + $orc_jul + $orc_aug + $orc_sep + $orc_oct + $orc_nov + $orc_dec) / 12;

			if($orc_size == "BUTTERFLY CHICKEN"){
				$data['reyal_bfc1'] = $orc_jan;
				$data['reyal_bfc'] = $orc_feb;
				$data['reyal_bfc'] = $orc_mar;
				$data['reyal_bfc'] = $orc_apr;
				$data['reyal_bfc'] = $orc_may;
				$data['reyal_bfc'] = $orc_jun;
				$data['reyal_bfc'] = $orc_jul;
				$data['reyal_bfc'] = $orc_aug;
				$data['reyal_bfc'] = $orc_sep;
				$data['reyal_bfc'] = $orc_oct;
				$data['reyal_bfc'] = $orc_nov;
				$data['reyal_bfc'] = $orc_dec;
				$data['reyal_bfc_avg'] = $orc_avg;
				$data['reyal_bfc_min'] = $orc_min;
				$data['reyal_bfc_max'] = $orc_max;

				$reyal_bfc_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BUTTERFLY', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
				$data['reyal_bfc_prev_year2_jan'] = 0;
				$data['reyal_bfc_prev_year2_feb'] = 0;
				$data['reyal_bfc_prev_year2_mar'] = 0;
				$data['reyal_bfc_prev_year2_apr'] = 0;
				$data['reyal_bfc_prev_year2_may'] = 0;
				$data['reyal_bfc_prev_year2_jun'] = 0;
				$data['reyal_bfc_prev_year2_jul'] = 0;
				$data['reyal_bfc_prev_year2_aug'] = 0;
				$data['reyal_bfc_prev_year2_sep'] = 0;
				$data['reyal_bfc_prev_year2_oct'] = 0;
				$data['reyal_bfc_prev_year2_nov'] = 0;
				$data['reyal_bfc_prev_year2_dec'] = 0;
				$data['reyal_bfc_prev_year2_avg'] = 0;
				$data['reyal_bfc_prev_year2_min'] = 0;
				$data['reyal_bfc_prev_year2_max'] = 0;

				foreach($reyal_bfc_prev_year2 as $row){
					$data['reyal_bfc_prev_year2_jan'] = $row->jan_price;
					$data['reyal_bfc_prev_year2_feb'] = $row->feb_price;
					$data['reyal_bfc_prev_year2_mar'] = $row->mar_price;
					$data['reyal_bfc_prev_year2_apr'] = $row->apr_price;
					$data['reyal_bfc_prev_year2_may'] = $row->may_price;
					$data['reyal_bfc_prev_year2_jun'] = $row->jun_price;
					$data['reyal_bfc_prev_year2_jul'] = $row->jul_price;
					$data['reyal_bfc_prev_year2_aug'] = $row->aug_price;
					$data['reyal_bfc_prev_year2_sep'] = $row->sep_price;
					$data['reyal_bfc_prev_year2_oct'] = $row->oct_price;
					$data['reyal_bfc_prev_year2_nov'] = $row->nov_price;
					$data['reyal_bfc_prev_year2_dec'] = $row->dec_price;
					$data['reyal_bfc_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['reyal_bfc_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['reyal_bfc_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}


				$reyal_bfc_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BUTTERFLY', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
					FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
				
				$data['reyal_bfc_prev_year1_jan'] = 0;
				$data['reyal_bfc_prev_year1_feb'] = 0;
				$data['reyal_bfc_prev_year1_mar'] = 0;
				$data['reyal_bfc_prev_year1_apr'] = 0;
				$data['reyal_bfc_prev_year1_may'] = 0;
				$data['reyal_bfc_prev_year1_jun'] = 0;
				$data['reyal_bfc_prev_year1_jul'] = 0;
				$data['reyal_bfc_prev_year1_aug'] = 0;
				$data['reyal_bfc_prev_year1_sep'] = 0;
				$data['reyal_bfc_prev_year1_oct'] = 0;
				$data['reyal_bfc_prev_year1_nov'] = 0;
				$data['reyal_bfc_prev_year1_dec'] = 0;
				$data['reyal_bfc_prev_year1_avg'] = 0;
				$data['reyal_bfc_prev_year1_min'] = 0;
				$data['reyal_bfc_prev_year1_max'] = 0;

				foreach($reyal_bfc_prev_year1 as $row){
					$data['reyal_bfc_prev_year1_jan'] = $row->jan_price;
					$data['reyal_bfc_prev_year1_feb'] = $row->feb_price;
					$data['reyal_bfc_prev_year1_mar'] = $row->mar_price;
					$data['reyal_bfc_prev_year1_apr'] = $row->apr_price;
					$data['reyal_bfc_prev_year1_may'] = $row->may_price;
					$data['reyal_bfc_prev_year1_jun'] = $row->jun_price;
					$data['reyal_bfc_prev_year1_jul'] = $row->jul_price;
					$data['reyal_bfc_prev_year1_aug'] = $row->aug_price;
					$data['reyal_bfc_prev_year1_sep'] = $row->sep_price;
					$data['reyal_bfc_prev_year1_oct'] = $row->oct_price;
					$data['reyal_bfc_prev_year1_nov'] = $row->nov_price;
					$data['reyal_bfc_prev_year1_dec'] = $row->dec_price;
					$data['reyal_bfc_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

					$data['reyal_bfc_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

					$data['reyal_bfc_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
				}

			}
		}

		/*REYAL Liempo*/
		$join_reyal_liempo = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "LIEMPO"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_reyal_liempo = $this->admin->get_join('sales_tbl a', $join_reyal_liempo, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['reyal_liempo1'] = 0;
		$data['reyal_liempo2'] = 0;
		$data['reyal_liempo3'] = 0;
		$data['reyal_liempo4'] = 0;
		$data['reyal_liempo5'] = 0;
		$data['reyal_liempo6'] = 0;
		$data['reyal_liempo7'] = 0;
		$data['reyal_liempo8'] = 0;
		$data['reyal_liempo9'] = 0;
		$data['reyal_liempo10'] = 0;
		$data['reyal_liempo11'] = 0;
		$data['reyal_liempo12'] = 0;
		$data['reyal_liempo_total'] = 0;
		$data['reyal_liempo_count'] = 0;
		$data['reyal_liempo_avg'] = 0;
		$data['reyal_liempo_min'] = 0;
		$data['reyal_liempo_max'] = 0;

		foreach($get_reyal_liempo as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['reyal_liempo' . $month] = $asp;
			$data['reyal_liempo_total'] += $asp;

			if($asp < $data['reyal_liempo_min'] || $data['reyal_liempo_count'] == 0){
				$data['reyal_liempo_min'] = $asp;
			}

			if($asp > $data['reyal_liempo_max'] || $data['reyal_liempo_count'] == 0){
				$data['reyal_liempo_max'] = $asp;
			}

			$data['reyal_liempo_count']++;
		}

		$data['reyal_liempo_avg'] = $data['reyal_liempo_total'] != 0 ? $data['reyal_liempo_total'] / $data['reyal_liempo_count'] : 0;

		$reyal_liempo_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_liempo_prev_year2_jan'] = 0;
		$data['reyal_liempo_prev_year2_feb'] = 0;
		$data['reyal_liempo_prev_year2_mar'] = 0;
		$data['reyal_liempo_prev_year2_apr'] = 0;
		$data['reyal_liempo_prev_year2_may'] = 0;
		$data['reyal_liempo_prev_year2_jun'] = 0;
		$data['reyal_liempo_prev_year2_jul'] = 0;
		$data['reyal_liempo_prev_year2_aug'] = 0;
		$data['reyal_liempo_prev_year2_sep'] = 0;
		$data['reyal_liempo_prev_year2_oct'] = 0;
		$data['reyal_liempo_prev_year2_nov'] = 0;
		$data['reyal_liempo_prev_year2_dec'] = 0;
		$data['reyal_liempo_prev_year2_avg'] = 0;
		$data['reyal_liempo_prev_year2_min'] = 0;
		$data['reyal_liempo_prev_year2_max'] = 0;

		foreach($reyal_liempo_prev_year2 as $row){
			$data['reyal_liempo_prev_year2_jan'] = $row->jan_price;
			$data['reyal_liempo_prev_year2_feb'] = $row->feb_price;
			$data['reyal_liempo_prev_year2_mar'] = $row->mar_price;
			$data['reyal_liempo_prev_year2_apr'] = $row->apr_price;
			$data['reyal_liempo_prev_year2_may'] = $row->may_price;
			$data['reyal_liempo_prev_year2_jun'] = $row->jun_price;
			$data['reyal_liempo_prev_year2_jul'] = $row->jul_price;
			$data['reyal_liempo_prev_year2_aug'] = $row->aug_price;
			$data['reyal_liempo_prev_year2_sep'] = $row->sep_price;
			$data['reyal_liempo_prev_year2_oct'] = $row->oct_price;
			$data['reyal_liempo_prev_year2_nov'] = $row->nov_price;
			$data['reyal_liempo_prev_year2_dec'] = $row->dec_price;
			$data['reyal_liempo_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_liempo_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_liempo_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$reyal_liempo_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_liempo_prev_year1_jan'] = 0;
		$data['reyal_liempo_prev_year1_feb'] = 0;
		$data['reyal_liempo_prev_year1_mar'] = 0;
		$data['reyal_liempo_prev_year1_apr'] = 0;
		$data['reyal_liempo_prev_year1_may'] = 0;
		$data['reyal_liempo_prev_year1_jun'] = 0;
		$data['reyal_liempo_prev_year1_jul'] = 0;
		$data['reyal_liempo_prev_year1_aug'] = 0;
		$data['reyal_liempo_prev_year1_sep'] = 0;
		$data['reyal_liempo_prev_year1_oct'] = 0;
		$data['reyal_liempo_prev_year1_nov'] = 0;
		$data['reyal_liempo_prev_year1_dec'] = 0;
		$data['reyal_liempo_prev_year1_avg'] = 0;
		$data['reyal_liempo_prev_year1_min'] = 0;
		$data['reyal_liempo_prev_year1_max'] = 0;

		foreach($reyal_liempo_prev_year1 as $row){
			$data['reyal_liempo_prev_year1_jan'] = $row->jan_price;
			$data['reyal_liempo_prev_year1_feb'] = $row->feb_price;
			$data['reyal_liempo_prev_year1_mar'] = $row->mar_price;
			$data['reyal_liempo_prev_year1_apr'] = $row->apr_price;
			$data['reyal_liempo_prev_year1_may'] = $row->may_price;
			$data['reyal_liempo_prev_year1_jun'] = $row->jun_price;
			$data['reyal_liempo_prev_year1_jul'] = $row->jul_price;
			$data['reyal_liempo_prev_year1_aug'] = $row->aug_price;
			$data['reyal_liempo_prev_year1_sep'] = $row->sep_price;
			$data['reyal_liempo_prev_year1_oct'] = $row->oct_price;
			$data['reyal_liempo_prev_year1_nov'] = $row->nov_price;
			$data['reyal_liempo_prev_year1_dec'] = $row->dec_price;
			$data['reyal_liempo_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_liempo_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_liempo_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}
		
		/*REYAL Dressed*/
		$join_reyal_dressed = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_reyal_dressed = $this->admin->get_join('sales_tbl a', $join_reyal_dressed, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['reyal_dressed1'] = 0;
		$data['reyal_dressed2'] = 0;
		$data['reyal_dressed3'] = 0;
		$data['reyal_dressed4'] = 0;
		$data['reyal_dressed5'] = 0;
		$data['reyal_dressed6'] = 0;
		$data['reyal_dressed7'] = 0;
		$data['reyal_dressed8'] = 0;
		$data['reyal_dressed9'] = 0;
		$data['reyal_dressed10'] = 0;
		$data['reyal_dressed11'] = 0;
		$data['reyal_dressed12'] = 0;
		$data['reyal_dressed_total'] = 0;
		$data['reyal_dressed_count'] = 0;
		$data['reyal_dressed_avg'] = 0;
		$data['reyal_dressed_min'] = 0;
		$data['reyal_dressed_max'] = 0;

		foreach($get_reyal_dressed as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['reyal_dressed' . $month] = $asp;
			$data['reyal_dressed_total'] += $asp;

			if($asp < $data['reyal_dressed_min'] || $data['reyal_dressed_count'] == 0){
				$data['reyal_dressed_min'] = $asp;
			}

			if($asp > $data['reyal_dressed_max'] || $data['reyal_dressed_count'] == 0){
				$data['reyal_dressed_max'] = $asp;
			}

			$data['reyal_dressed_count']++;
		}

		$data['reyal_dressed_avg'] = $data['reyal_dressed_total'] != 0 ? $data['reyal_dressed_total'] / $data['reyal_dressed_count'] : 0;

		$reyal_dressed_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_dressed_prev_year2_jan'] = 0;
		$data['reyal_dressed_prev_year2_feb'] = 0;
		$data['reyal_dressed_prev_year2_mar'] = 0;
		$data['reyal_dressed_prev_year2_apr'] = 0;
		$data['reyal_dressed_prev_year2_may'] = 0;
		$data['reyal_dressed_prev_year2_jun'] = 0;
		$data['reyal_dressed_prev_year2_jul'] = 0;
		$data['reyal_dressed_prev_year2_aug'] = 0;
		$data['reyal_dressed_prev_year2_sep'] = 0;
		$data['reyal_dressed_prev_year2_oct'] = 0;
		$data['reyal_dressed_prev_year2_nov'] = 0;
		$data['reyal_dressed_prev_year2_dec'] = 0;
		$data['reyal_dressed_prev_year2_avg'] = 0;
		$data['reyal_dressed_prev_year2_min'] = 0;
		$data['reyal_dressed_prev_year2_max'] = 0;

		foreach($reyal_dressed_prev_year2 as $row){
			$data['reyal_dressed_prev_year2_jan'] = $row->jan_price;
			$data['reyal_dressed_prev_year2_feb'] = $row->feb_price;
			$data['reyal_dressed_prev_year2_mar'] = $row->mar_price;
			$data['reyal_dressed_prev_year2_apr'] = $row->apr_price;
			$data['reyal_dressed_prev_year2_may'] = $row->may_price;
			$data['reyal_dressed_prev_year2_jun'] = $row->jun_price;
			$data['reyal_dressed_prev_year2_jul'] = $row->jul_price;
			$data['reyal_dressed_prev_year2_aug'] = $row->aug_price;
			$data['reyal_dressed_prev_year2_sep'] = $row->sep_price;
			$data['reyal_dressed_prev_year2_oct'] = $row->oct_price;
			$data['reyal_dressed_prev_year2_nov'] = $row->nov_price;
			$data['reyal_dressed_prev_year2_dec'] = $row->dec_price;
			$data['reyal_dressed_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_dressed_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_dressed_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$reyal_dressed_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_dressed_prev_year1_jan'] = 0;
		$data['reyal_dressed_prev_year1_feb'] = 0;
		$data['reyal_dressed_prev_year1_mar'] = 0;
		$data['reyal_dressed_prev_year1_apr'] = 0;
		$data['reyal_dressed_prev_year1_may'] = 0;
		$data['reyal_dressed_prev_year1_jun'] = 0;
		$data['reyal_dressed_prev_year1_jul'] = 0;
		$data['reyal_dressed_prev_year1_aug'] = 0;
		$data['reyal_dressed_prev_year1_sep'] = 0;
		$data['reyal_dressed_prev_year1_oct'] = 0;
		$data['reyal_dressed_prev_year1_nov'] = 0;
		$data['reyal_dressed_prev_year1_dec'] = 0;
		$data['reyal_dressed_prev_year1_avg'] = 0;
		$data['reyal_dressed_prev_year1_min'] = 0;
		$data['reyal_dressed_prev_year1_max'] = 0;

		foreach($reyal_dressed_prev_year1 as $row){
			$data['reyal_dressed_prev_year1_jan'] = $row->jan_price;
			$data['reyal_dressed_prev_year1_feb'] = $row->feb_price;
			$data['reyal_dressed_prev_year1_mar'] = $row->mar_price;
			$data['reyal_dressed_prev_year1_apr'] = $row->apr_price;
			$data['reyal_dressed_prev_year1_may'] = $row->may_price;
			$data['reyal_dressed_prev_year1_jun'] = $row->jun_price;
			$data['reyal_dressed_prev_year1_jul'] = $row->jul_price;
			$data['reyal_dressed_prev_year1_aug'] = $row->aug_price;
			$data['reyal_dressed_prev_year1_sep'] = $row->sep_price;
			$data['reyal_dressed_prev_year1_oct'] = $row->oct_price;
			$data['reyal_dressed_prev_year1_nov'] = $row->nov_price;
			$data['reyal_dressed_prev_year1_dec'] = $row->dec_price;
			$data['reyal_dressed_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_dressed_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_dressed_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*REYAL Chooksies*/
		$join_reyal_chooksies = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 1000204 OR d.material_code = 1000205 OR d.material_code = 1000206)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_reyal_chooksies = $this->admin->get_join('sales_tbl a', $join_reyal_chooksies, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['reyal_chooksies1'] = 0;
		$data['reyal_chooksies2'] = 0;
		$data['reyal_chooksies3'] = 0;
		$data['reyal_chooksies4'] = 0;
		$data['reyal_chooksies5'] = 0;
		$data['reyal_chooksies6'] = 0;
		$data['reyal_chooksies7'] = 0;
		$data['reyal_chooksies8'] = 0;
		$data['reyal_chooksies9'] = 0;
		$data['reyal_chooksies10'] = 0;
		$data['reyal_chooksies11'] = 0;
		$data['reyal_chooksies12'] = 0;
		$data['reyal_chooksies_total'] = 0;
		$data['reyal_chooksies_count'] = 0;
		$data['reyal_chooksies_avg'] = 0;
		$data['reyal_chooksies_min'] = 0;
		$data['reyal_chooksies_max'] = 0;

		foreach($get_reyal_chooksies as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['reyal_chooksies' . $month] = $asp;
			$data['reyal_chooksies_total'] += $asp;

			if($asp < $data['reyal_chooksies_min'] || $data['reyal_chooksies_count'] == 0){
				$data['reyal_chooksies_min'] = $asp;
			}

			if($asp > $data['reyal_chooksies_max'] || $data['reyal_chooksies_count'] == 0){
				$data['reyal_chooksies_max'] = $asp;
			}

			$data['reyal_chooksies_count']++;
		}

		$data['reyal_chooksies_avg'] = $data['reyal_chooksies_total'] != 0 ? $data['reyal_chooksies_total'] / $data['reyal_chooksies_count'] : 0;


		$reyal_chooksies_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_chooksies_prev_year2_jan'] = 0;
		$data['reyal_chooksies_prev_year2_feb'] = 0;
		$data['reyal_chooksies_prev_year2_mar'] = 0;
		$data['reyal_chooksies_prev_year2_apr'] = 0;
		$data['reyal_chooksies_prev_year2_may'] = 0;
		$data['reyal_chooksies_prev_year2_jun'] = 0;
		$data['reyal_chooksies_prev_year2_jul'] = 0;
		$data['reyal_chooksies_prev_year2_aug'] = 0;
		$data['reyal_chooksies_prev_year2_sep'] = 0;
		$data['reyal_chooksies_prev_year2_oct'] = 0;
		$data['reyal_chooksies_prev_year2_nov'] = 0;
		$data['reyal_chooksies_prev_year2_dec'] = 0;
		$data['reyal_chooksies_prev_year2_avg'] = 0;
		$data['reyal_chooksies_prev_year2_min'] = 0;
		$data['reyal_chooksies_prev_year2_max'] = 0;

		foreach($reyal_chooksies_prev_year2 as $row){
			$data['reyal_chooksies_prev_year2_jan'] = $row->jan_price;
			$data['reyal_chooksies_prev_year2_feb'] = $row->feb_price;
			$data['reyal_chooksies_prev_year2_mar'] = $row->mar_price;
			$data['reyal_chooksies_prev_year2_apr'] = $row->apr_price;
			$data['reyal_chooksies_prev_year2_may'] = $row->may_price;
			$data['reyal_chooksies_prev_year2_jun'] = $row->jun_price;
			$data['reyal_chooksies_prev_year2_jul'] = $row->jul_price;
			$data['reyal_chooksies_prev_year2_aug'] = $row->aug_price;
			$data['reyal_chooksies_prev_year2_sep'] = $row->sep_price;
			$data['reyal_chooksies_prev_year2_oct'] = $row->oct_price;
			$data['reyal_chooksies_prev_year2_nov'] = $row->nov_price;
			$data['reyal_chooksies_prev_year2_dec'] = $row->dec_price;
			$data['reyal_chooksies_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_chooksies_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_chooksies_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$reyal_chooksies_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_chooksies_prev_year1_jan'] = 0;
		$data['reyal_chooksies_prev_year1_feb'] = 0;
		$data['reyal_chooksies_prev_year1_mar'] = 0;
		$data['reyal_chooksies_prev_year1_apr'] = 0;
		$data['reyal_chooksies_prev_year1_may'] = 0;
		$data['reyal_chooksies_prev_year1_jun'] = 0;
		$data['reyal_chooksies_prev_year1_jul'] = 0;
		$data['reyal_chooksies_prev_year1_aug'] = 0;
		$data['reyal_chooksies_prev_year1_sep'] = 0;
		$data['reyal_chooksies_prev_year1_oct'] = 0;
		$data['reyal_chooksies_prev_year1_nov'] = 0;
		$data['reyal_chooksies_prev_year1_dec'] = 0;
		$data['reyal_chooksies_prev_year1_avg'] = 0;
		$data['reyal_chooksies_prev_year1_min'] = 0;
		$data['reyal_chooksies_prev_year1_max'] = 0;

		foreach($reyal_chooksies_prev_year1 as $row){
			$data['reyal_chooksies_prev_year1_jan'] = $row->jan_price;
			$data['reyal_chooksies_prev_year1_feb'] = $row->feb_price;
			$data['reyal_chooksies_prev_year1_mar'] = $row->mar_price;
			$data['reyal_chooksies_prev_year1_apr'] = $row->apr_price;
			$data['reyal_chooksies_prev_year1_may'] = $row->may_price;
			$data['reyal_chooksies_prev_year1_jun'] = $row->jun_price;
			$data['reyal_chooksies_prev_year1_jul'] = $row->jul_price;
			$data['reyal_chooksies_prev_year1_aug'] = $row->aug_price;
			$data['reyal_chooksies_prev_year1_sep'] = $row->sep_price;
			$data['reyal_chooksies_prev_year1_oct'] = $row->oct_price;
			$data['reyal_chooksies_prev_year1_nov'] = $row->nov_price;
			$data['reyal_chooksies_prev_year1_dec'] = $row->dec_price;
			$data['reyal_chooksies_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_chooksies_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_chooksies_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*REYAL Marinado*/
		$join_reyal_marinado = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000638',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_reyal_marinado = $this->admin->get_join('sales_tbl a', $join_reyal_marinado, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['reyal_marinado1'] = 0;
		$data['reyal_marinado2'] = 0;
		$data['reyal_marinado3'] = 0;
		$data['reyal_marinado4'] = 0;
		$data['reyal_marinado5'] = 0;
		$data['reyal_marinado6'] = 0;
		$data['reyal_marinado7'] = 0;
		$data['reyal_marinado8'] = 0;
		$data['reyal_marinado9'] = 0;
		$data['reyal_marinado10'] = 0;
		$data['reyal_marinado11'] = 0;
		$data['reyal_marinado12'] = 0;
		$data['reyal_marinado_total'] = 0;
		$data['reyal_marinado_count'] = 0;
		$data['reyal_marinado_avg'] = 0;
		$data['reyal_marinado_min'] = 0;
		$data['reyal_marinado_max'] = 0;

		foreach($get_reyal_marinado as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['reyal_marinado' . $month] = $asp;
			$data['reyal_marinado_total'] += $asp;

			if($asp < $data['reyal_marinado_min'] || $data['reyal_marinado_count'] == 0){
				$data['reyal_marinado_min'] = $asp;
			}

			if($asp > $data['reyal_marinado_max'] || $data['reyal_marinado_count'] == 0){
				$data['reyal_marinado_max'] = $asp;
			}

			$data['reyal_marinado_count']++;
		}

		$data['reyal_marinado_avg'] = $data['reyal_marinado_total'] != 0 ? $data['reyal_marinado_total'] / $data['reyal_marinado_count'] : 0;

		$reyal_marinado_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_marinado_prev_year2_jan'] = 0;
		$data['reyal_marinado_prev_year2_feb'] = 0;
		$data['reyal_marinado_prev_year2_mar'] = 0;
		$data['reyal_marinado_prev_year2_apr'] = 0;
		$data['reyal_marinado_prev_year2_may'] = 0;
		$data['reyal_marinado_prev_year2_jun'] = 0;
		$data['reyal_marinado_prev_year2_jul'] = 0;
		$data['reyal_marinado_prev_year2_aug'] = 0;
		$data['reyal_marinado_prev_year2_sep'] = 0;
		$data['reyal_marinado_prev_year2_oct'] = 0;
		$data['reyal_marinado_prev_year2_nov'] = 0;
		$data['reyal_marinado_prev_year2_dec'] = 0;
		$data['reyal_marinado_prev_year2_avg'] = 0;
		$data['reyal_marinado_prev_year2_min'] = 0;
		$data['reyal_marinado_prev_year2_max'] = 0;

		foreach($reyal_marinado_prev_year2 as $row){
			$data['reyal_marinado_prev_year2_jan'] = $row->jan_price;
			$data['reyal_marinado_prev_year2_feb'] = $row->feb_price;
			$data['reyal_marinado_prev_year2_mar'] = $row->mar_price;
			$data['reyal_marinado_prev_year2_apr'] = $row->apr_price;
			$data['reyal_marinado_prev_year2_may'] = $row->may_price;
			$data['reyal_marinado_prev_year2_jun'] = $row->jun_price;
			$data['reyal_marinado_prev_year2_jul'] = $row->jul_price;
			$data['reyal_marinado_prev_year2_aug'] = $row->aug_price;
			$data['reyal_marinado_prev_year2_sep'] = $row->sep_price;
			$data['reyal_marinado_prev_year2_oct'] = $row->oct_price;
			$data['reyal_marinado_prev_year2_nov'] = $row->nov_price;
			$data['reyal_marinado_prev_year2_dec'] = $row->dec_price;
			$data['reyal_marinado_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_marinado_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_marinado_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$reyal_marinado_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_marinado_prev_year1_jan'] = 0;
		$data['reyal_marinado_prev_year1_feb'] = 0;
		$data['reyal_marinado_prev_year1_mar'] = 0;
		$data['reyal_marinado_prev_year1_apr'] = 0;
		$data['reyal_marinado_prev_year1_may'] = 0;
		$data['reyal_marinado_prev_year1_jun'] = 0;
		$data['reyal_marinado_prev_year1_jul'] = 0;
		$data['reyal_marinado_prev_year1_aug'] = 0;
		$data['reyal_marinado_prev_year1_sep'] = 0;
		$data['reyal_marinado_prev_year1_oct'] = 0;
		$data['reyal_marinado_prev_year1_nov'] = 0;
		$data['reyal_marinado_prev_year1_dec'] = 0;
		$data['reyal_marinado_prev_year1_avg'] = 0;
		$data['reyal_marinado_prev_year1_min'] = 0;
		$data['reyal_marinado_prev_year1_max'] = 0;

		foreach($reyal_marinado_prev_year1 as $row){
			$data['reyal_marinado_prev_year1_jan'] = $row->jan_price;
			$data['reyal_marinado_prev_year1_feb'] = $row->feb_price;
			$data['reyal_marinado_prev_year1_mar'] = $row->mar_price;
			$data['reyal_marinado_prev_year1_apr'] = $row->apr_price;
			$data['reyal_marinado_prev_year1_may'] = $row->may_price;
			$data['reyal_marinado_prev_year1_jun'] = $row->jun_price;
			$data['reyal_marinado_prev_year1_jul'] = $row->jul_price;
			$data['reyal_marinado_prev_year1_aug'] = $row->aug_price;
			$data['reyal_marinado_prev_year1_sep'] = $row->sep_price;
			$data['reyal_marinado_prev_year1_oct'] = $row->oct_price;
			$data['reyal_marinado_prev_year1_nov'] = $row->nov_price;
			$data['reyal_marinado_prev_year1_dec'] = $row->dec_price;
			$data['reyal_marinado_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_marinado_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_marinado_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*REYAL Spicy Neck*/
		$join_reyal_spicy = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 1000092 OR d.material_code = 1000401 OR d.material_code = 1000402 OR d.material_code = 1000617)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_reyal_spicy = $this->admin->get_join('sales_tbl a', $join_reyal_spicy, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['reyal_spicy1'] = 0;
		$data['reyal_spicy2'] = 0;
		$data['reyal_spicy3'] = 0;
		$data['reyal_spicy4'] = 0;
		$data['reyal_spicy5'] = 0;
		$data['reyal_spicy6'] = 0;
		$data['reyal_spicy7'] = 0;
		$data['reyal_spicy8'] = 0;
		$data['reyal_spicy9'] = 0;
		$data['reyal_spicy10'] = 0;
		$data['reyal_spicy11'] = 0;
		$data['reyal_spicy12'] = 0;
		$data['reyal_spicy_total'] = 0;
		$data['reyal_spicy_count'] = 0;
		$data['reyal_spicy_avg'] = 0;
		$data['reyal_spicy_min'] = 0;
		$data['reyal_spicy_max'] = 0;

		foreach($get_reyal_spicy as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['reyal_spicy' . $month] = $asp;
			$data['reyal_spicy_total'] += $asp;

			if($asp < $data['reyal_spicy_min'] || $data['reyal_spicy_count'] == 0){
				$data['reyal_spicy_min'] = $asp;
			}

			if($asp > $data['reyal_spicy_max'] || $data['reyal_spicy_count'] == 0){
				$data['reyal_spicy_max'] = $asp;
			}

			$data['reyal_spicy_count']++;
		}

		$data['reyal_spicy_avg'] = $data['reyal_spicy_total'] != 0 ? $data['reyal_spicy_total'] / $data['reyal_spicy_count'] : 0;

		$reyal_spicy_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_spicy_prev_year2_jan'] = 0;
		$data['reyal_spicy_prev_year2_feb'] = 0;
		$data['reyal_spicy_prev_year2_mar'] = 0;
		$data['reyal_spicy_prev_year2_apr'] = 0;
		$data['reyal_spicy_prev_year2_may'] = 0;
		$data['reyal_spicy_prev_year2_jun'] = 0;
		$data['reyal_spicy_prev_year2_jul'] = 0;
		$data['reyal_spicy_prev_year2_aug'] = 0;
		$data['reyal_spicy_prev_year2_sep'] = 0;
		$data['reyal_spicy_prev_year2_oct'] = 0;
		$data['reyal_spicy_prev_year2_nov'] = 0;
		$data['reyal_spicy_prev_year2_dec'] = 0;
		$data['reyal_spicy_prev_year2_avg'] = 0;
		$data['reyal_spicy_prev_year2_min'] = 0;
		$data['reyal_spicy_prev_year2_max'] = 0;

		foreach($reyal_spicy_prev_year2 as $row){
			$data['reyal_spicy_prev_year2_jan'] = $row->jan_price;
			$data['reyal_spicy_prev_year2_feb'] = $row->feb_price;
			$data['reyal_spicy_prev_year2_mar'] = $row->mar_price;
			$data['reyal_spicy_prev_year2_apr'] = $row->apr_price;
			$data['reyal_spicy_prev_year2_may'] = $row->may_price;
			$data['reyal_spicy_prev_year2_jun'] = $row->jun_price;
			$data['reyal_spicy_prev_year2_jul'] = $row->jul_price;
			$data['reyal_spicy_prev_year2_aug'] = $row->aug_price;
			$data['reyal_spicy_prev_year2_sep'] = $row->sep_price;
			$data['reyal_spicy_prev_year2_oct'] = $row->oct_price;
			$data['reyal_spicy_prev_year2_nov'] = $row->nov_price;
			$data['reyal_spicy_prev_year2_dec'] = $row->dec_price;
			$data['reyal_spicy_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_spicy_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_spicy_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$reyal_spicy_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_spicy_prev_year1_jan'] = 0;
		$data['reyal_spicy_prev_year1_feb'] = 0;
		$data['reyal_spicy_prev_year1_mar'] = 0;
		$data['reyal_spicy_prev_year1_apr'] = 0;
		$data['reyal_spicy_prev_year1_may'] = 0;
		$data['reyal_spicy_prev_year1_jun'] = 0;
		$data['reyal_spicy_prev_year1_jul'] = 0;
		$data['reyal_spicy_prev_year1_aug'] = 0;
		$data['reyal_spicy_prev_year1_sep'] = 0;
		$data['reyal_spicy_prev_year1_oct'] = 0;
		$data['reyal_spicy_prev_year1_nov'] = 0;
		$data['reyal_spicy_prev_year1_dec'] = 0;
		$data['reyal_spicy_prev_year1_avg'] = 0;
		$data['reyal_spicy_prev_year1_min'] = 0;
		$data['reyal_spicy_prev_year1_max'] = 0;

		foreach($reyal_spicy_prev_year1 as $row){
			$data['reyal_spicy_prev_year1_jan'] = $row->jan_price;
			$data['reyal_spicy_prev_year1_feb'] = $row->feb_price;
			$data['reyal_spicy_prev_year1_mar'] = $row->mar_price;
			$data['reyal_spicy_prev_year1_apr'] = $row->apr_price;
			$data['reyal_spicy_prev_year1_may'] = $row->may_price;
			$data['reyal_spicy_prev_year1_jun'] = $row->jun_price;
			$data['reyal_spicy_prev_year1_jul'] = $row->jul_price;
			$data['reyal_spicy_prev_year1_aug'] = $row->aug_price;
			$data['reyal_spicy_prev_year1_sep'] = $row->sep_price;
			$data['reyal_spicy_prev_year1_oct'] = $row->oct_price;
			$data['reyal_spicy_prev_year1_nov'] = $row->nov_price;
			$data['reyal_spicy_prev_year1_dec'] = $row->dec_price;
			$data['reyal_spicy_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_spicy_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_spicy_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*REYAL Barbeque*/
		$join_reyal_barbeque = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000548',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER SPECIALTY PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_reyal_barbeque = $this->admin->get_join('sales_tbl a', $join_reyal_barbeque, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['reyal_barbeque1'] = 0;
		$data['reyal_barbeque2'] = 0;
		$data['reyal_barbeque3'] = 0;
		$data['reyal_barbeque4'] = 0;
		$data['reyal_barbeque5'] = 0;
		$data['reyal_barbeque6'] = 0;
		$data['reyal_barbeque7'] = 0;
		$data['reyal_barbeque8'] = 0;
		$data['reyal_barbeque9'] = 0;
		$data['reyal_barbeque10'] = 0;
		$data['reyal_barbeque11'] = 0;
		$data['reyal_barbeque12'] = 0;
		$data['reyal_barbeque_total'] = 0;
		$data['reyal_barbeque_count'] = 0;
		$data['reyal_barbeque_avg'] = 0;
		$data['reyal_barbeque_min'] = 0;
		$data['reyal_barbeque_max'] = 0;

		foreach($get_reyal_barbeque as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['reyal_barbeque' . $month] = $asp;
			$data['reyal_barbeque_total'] += $asp;

			if($asp < $data['reyal_barbeque_min'] || $data['reyal_barbeque_count'] == 0){
				$data['reyal_barbeque_min'] = $asp;
			}

			if($asp > $data['reyal_barbeque_max'] || $data['reyal_barbeque_count'] == 0){
				$data['reyal_barbeque_max'] = $asp;
			}

			$data['reyal_barbeque_count']++;
		}

		$data['reyal_barbeque_avg'] = $data['reyal_barbeque_total'] != 0 ? $data['reyal_barbeque_total'] / $data['reyal_barbeque_count'] : 0;

		$reyal_barbeque_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BBQ', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_barbeque_prev_year2_jan'] = 0;
		$data['reyal_barbeque_prev_year2_feb'] = 0;
		$data['reyal_barbeque_prev_year2_mar'] = 0;
		$data['reyal_barbeque_prev_year2_apr'] = 0;
		$data['reyal_barbeque_prev_year2_may'] = 0;
		$data['reyal_barbeque_prev_year2_jun'] = 0;
		$data['reyal_barbeque_prev_year2_jul'] = 0;
		$data['reyal_barbeque_prev_year2_aug'] = 0;
		$data['reyal_barbeque_prev_year2_sep'] = 0;
		$data['reyal_barbeque_prev_year2_oct'] = 0;
		$data['reyal_barbeque_prev_year2_nov'] = 0;
		$data['reyal_barbeque_prev_year2_dec'] = 0;
		$data['reyal_barbeque_prev_year2_avg'] = 0;
		$data['reyal_barbeque_prev_year2_min'] = 0;
		$data['reyal_barbeque_prev_year2_max'] = 0;

		foreach($reyal_barbeque_prev_year2 as $row){
			$data['reyal_barbeque_prev_year2_jan'] = $row->jan_price;
			$data['reyal_barbeque_prev_year2_feb'] = $row->feb_price;
			$data['reyal_barbeque_prev_year2_mar'] = $row->mar_price;
			$data['reyal_barbeque_prev_year2_apr'] = $row->apr_price;
			$data['reyal_barbeque_prev_year2_may'] = $row->may_price;
			$data['reyal_barbeque_prev_year2_jun'] = $row->jun_price;
			$data['reyal_barbeque_prev_year2_jul'] = $row->jul_price;
			$data['reyal_barbeque_prev_year2_aug'] = $row->aug_price;
			$data['reyal_barbeque_prev_year2_sep'] = $row->sep_price;
			$data['reyal_barbeque_prev_year2_oct'] = $row->oct_price;
			$data['reyal_barbeque_prev_year2_nov'] = $row->nov_price;
			$data['reyal_barbeque_prev_year2_dec'] = $row->dec_price;
			$data['reyal_barbeque_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_barbeque_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_barbeque_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$reyal_barbeque_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'BBQ', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_barbeque_prev_year1_jan'] = 0;
		$data['reyal_barbeque_prev_year1_feb'] = 0;
		$data['reyal_barbeque_prev_year1_mar'] = 0;
		$data['reyal_barbeque_prev_year1_apr'] = 0;
		$data['reyal_barbeque_prev_year1_may'] = 0;
		$data['reyal_barbeque_prev_year1_jun'] = 0;
		$data['reyal_barbeque_prev_year1_jul'] = 0;
		$data['reyal_barbeque_prev_year1_aug'] = 0;
		$data['reyal_barbeque_prev_year1_sep'] = 0;
		$data['reyal_barbeque_prev_year1_oct'] = 0;
		$data['reyal_barbeque_prev_year1_nov'] = 0;
		$data['reyal_barbeque_prev_year1_dec'] = 0;
		$data['reyal_barbeque_prev_year1_avg'] = 0;
		$data['reyal_barbeque_prev_year1_min'] = 0;
		$data['reyal_barbeque_prev_year1_max'] = 0;

		foreach($reyal_barbeque_prev_year1 as $row){
			$data['reyal_barbeque_prev_year1_jan'] = $row->jan_price;
			$data['reyal_barbeque_prev_year1_feb'] = $row->feb_price;
			$data['reyal_barbeque_prev_year1_mar'] = $row->mar_price;
			$data['reyal_barbeque_prev_year1_apr'] = $row->apr_price;
			$data['reyal_barbeque_prev_year1_may'] = $row->may_price;
			$data['reyal_barbeque_prev_year1_jun'] = $row->jun_price;
			$data['reyal_barbeque_prev_year1_jul'] = $row->jul_price;
			$data['reyal_barbeque_prev_year1_aug'] = $row->aug_price;
			$data['reyal_barbeque_prev_year1_sep'] = $row->sep_price;
			$data['reyal_barbeque_prev_year1_oct'] = $row->oct_price;
			$data['reyal_barbeque_prev_year1_nov'] = $row->nov_price;
			$data['reyal_barbeque_prev_year1_dec'] = $row->dec_price;
			$data['reyal_barbeque_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_barbeque_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_barbeque_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*REYAL Nuggets*/
		$join_reyal_nuggets = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 1000403 OR d.material_code = 4000000)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER VAP PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_reyal_nuggets = $this->admin->get_join('sales_tbl a', $join_reyal_nuggets, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['reyal_nuggets1'] = 0;
		$data['reyal_nuggets2'] = 0;
		$data['reyal_nuggets3'] = 0;
		$data['reyal_nuggets4'] = 0;
		$data['reyal_nuggets5'] = 0;
		$data['reyal_nuggets6'] = 0;
		$data['reyal_nuggets7'] = 0;
		$data['reyal_nuggets8'] = 0;
		$data['reyal_nuggets9'] = 0;
		$data['reyal_nuggets10'] = 0;
		$data['reyal_nuggets11'] = 0;
		$data['reyal_nuggets12'] = 0;
		$data['reyal_nuggets_total'] = 0;
		$data['reyal_nuggets_count'] = 0;
		$data['reyal_nuggets_avg'] = 0;
		$data['reyal_nuggets_min'] = 0;
		$data['reyal_nuggets_max'] = 0;

		foreach($get_reyal_nuggets as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['reyal_nuggets' . $month] = $asp;
			$data['reyal_nuggets_total'] += $asp;

			if($asp < $data['reyal_nuggets_min'] || $data['reyal_nuggets_count'] == 0){
				$data['reyal_nuggets_min'] = $asp;
			}

			if($asp > $data['reyal_nuggets_max'] || $data['reyal_nuggets_count'] == 0){
				$data['reyal_nuggets_max'] = $asp;
			}

			$data['reyal_nuggets_count']++;
		}

		$data['reyal_nuggets_avg'] = $data['reyal_nuggets_total'] != 0 ? $data['reyal_nuggets_total'] / $data['reyal_nuggets_count'] : 0;

		$reyal_nuggets_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-NUGGETS', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_nuggets_prev_year2_jan'] = 0;
		$data['reyal_nuggets_prev_year2_feb'] = 0;
		$data['reyal_nuggets_prev_year2_mar'] = 0;
		$data['reyal_nuggets_prev_year2_apr'] = 0;
		$data['reyal_nuggets_prev_year2_may'] = 0;
		$data['reyal_nuggets_prev_year2_jun'] = 0;
		$data['reyal_nuggets_prev_year2_jul'] = 0;
		$data['reyal_nuggets_prev_year2_aug'] = 0;
		$data['reyal_nuggets_prev_year2_sep'] = 0;
		$data['reyal_nuggets_prev_year2_oct'] = 0;
		$data['reyal_nuggets_prev_year2_nov'] = 0;
		$data['reyal_nuggets_prev_year2_dec'] = 0;
		$data['reyal_nuggets_prev_year2_avg'] = 0;
		$data['reyal_nuggets_prev_year2_min'] = 0;
		$data['reyal_nuggets_prev_year2_max'] = 0;

		foreach($reyal_nuggets_prev_year2 as $row){
			$data['reyal_nuggets_prev_year2_jan'] = $row->jan_price;
			$data['reyal_nuggets_prev_year2_feb'] = $row->feb_price;
			$data['reyal_nuggets_prev_year2_mar'] = $row->mar_price;
			$data['reyal_nuggets_prev_year2_apr'] = $row->apr_price;
			$data['reyal_nuggets_prev_year2_may'] = $row->may_price;
			$data['reyal_nuggets_prev_year2_jun'] = $row->jun_price;
			$data['reyal_nuggets_prev_year2_jul'] = $row->jul_price;
			$data['reyal_nuggets_prev_year2_aug'] = $row->aug_price;
			$data['reyal_nuggets_prev_year2_sep'] = $row->sep_price;
			$data['reyal_nuggets_prev_year2_oct'] = $row->oct_price;
			$data['reyal_nuggets_prev_year2_nov'] = $row->nov_price;
			$data['reyal_nuggets_prev_year2_dec'] = $row->dec_price;
			$data['reyal_nuggets_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_nuggets_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_nuggets_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$reyal_nuggets_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-NUGGETS', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_nuggets_prev_year1_jan'] = 0;
		$data['reyal_nuggets_prev_year1_feb'] = 0;
		$data['reyal_nuggets_prev_year1_mar'] = 0;
		$data['reyal_nuggets_prev_year1_apr'] = 0;
		$data['reyal_nuggets_prev_year1_may'] = 0;
		$data['reyal_nuggets_prev_year1_jun'] = 0;
		$data['reyal_nuggets_prev_year1_jul'] = 0;
		$data['reyal_nuggets_prev_year1_aug'] = 0;
		$data['reyal_nuggets_prev_year1_sep'] = 0;
		$data['reyal_nuggets_prev_year1_oct'] = 0;
		$data['reyal_nuggets_prev_year1_nov'] = 0;
		$data['reyal_nuggets_prev_year1_dec'] = 0;
		$data['reyal_nuggets_prev_year1_avg'] = 0;
		$data['reyal_nuggets_prev_year1_min'] = 0;
		$data['reyal_nuggets_prev_year1_max'] = 0;

		foreach($reyal_nuggets_prev_year1 as $row){
			$data['reyal_nuggets_prev_year1_jan'] = $row->jan_price;
			$data['reyal_nuggets_prev_year1_feb'] = $row->feb_price;
			$data['reyal_nuggets_prev_year1_mar'] = $row->mar_price;
			$data['reyal_nuggets_prev_year1_apr'] = $row->apr_price;
			$data['reyal_nuggets_prev_year1_may'] = $row->may_price;
			$data['reyal_nuggets_prev_year1_jun'] = $row->jun_price;
			$data['reyal_nuggets_prev_year1_jul'] = $row->jul_price;
			$data['reyal_nuggets_prev_year1_aug'] = $row->aug_price;
			$data['reyal_nuggets_prev_year1_sep'] = $row->sep_price;
			$data['reyal_nuggets_prev_year1_oct'] = $row->oct_price;
			$data['reyal_nuggets_prev_year1_nov'] = $row->nov_price;
			$data['reyal_nuggets_prev_year1_dec'] = $row->dec_price;
			$data['reyal_nuggets_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_nuggets_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_nuggets_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*REYAL 11 PCS*/
		$join_reyal_11pcs= array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000632',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER SPECIALTY PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_reyal_11pcs = $this->admin->get_join('sales_tbl a', $join_reyal_11pcs, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['reyal_11pcs_1'] = 0;
		$data['reyal_11pcs_2'] = 0;
		$data['reyal_11pcs_3'] = 0;
		$data['reyal_11pcs_4'] = 0;
		$data['reyal_11pcs_5'] = 0;
		$data['reyal_11pcs_6'] = 0;
		$data['reyal_11pcs_7'] = 0;
		$data['reyal_11pcs_8'] = 0;
		$data['reyal_11pcs_9'] = 0;
		$data['reyal_11pcs_10'] = 0;
		$data['reyal_11pcs_11'] = 0;
		$data['reyal_11pcs_12'] = 0;
		$data['reyal_11pcs_total'] = 0;
		$data['reyal_11pcs_count'] = 0;
		$data['reyal_11pcs_avg'] = 0;
		$data['reyal_11pcs_min'] = 0;
		$data['reyal_11pcs_max'] = 0;

		foreach($get_reyal_11pcs as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['reyap_11pcs_' . $month] = $asp;
			$data['reyap_11pcs_total'] += $asp;

			if($asp < $data['reyal_11pcs_min'] || $data['reyal_11pcs_count'] == 0){
				$data['reyal_11pcs_min'] = $asp;
			}

			if($asp > $data['reyal_11pcs_max'] || $data['reyal_11pcs_count'] == 0){
				$data['reyal_11pcs_max'] = $asp;
			}

			$data['reyal_11pcs_count']++;
		}

		$data['reyal_11pcs_avg'] = $data['reyal_11pcs_total'] != 0 ? $data['reyal_11pcs_total'] / $data['reyal_11pcs_count'] : 0;

		$reyal_11pcs_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_11pcs_prev_year2_jan'] = 0;
		$data['reyal_11pcs_prev_year2_feb'] = 0;
		$data['reyal_11pcs_prev_year2_mar'] = 0;
		$data['reyal_11pcs_prev_year2_apr'] = 0;
		$data['reyal_11pcs_prev_year2_may'] = 0;
		$data['reyal_11pcs_prev_year2_jun'] = 0;
		$data['reyal_11pcs_prev_year2_jul'] = 0;
		$data['reyal_11pcs_prev_year2_aug'] = 0;
		$data['reyal_11pcs_prev_year2_sep'] = 0;
		$data['reyal_11pcs_prev_year2_oct'] = 0;
		$data['reyal_11pcs_prev_year2_nov'] = 0;
		$data['reyal_11pcs_prev_year2_dec'] = 0;
		$data['reyal_11pcs_prev_year2_avg'] = 0;
		$data['reyal_11pcs_prev_year2_min'] = 0;
		$data['reyal_11pcs_prev_year2_max'] = 0;

		foreach($reyal_11pcs_prev_year2 as $row){
			$data['reyal_11pcs_prev_year2_jan'] = $row->jan_price;
			$data['reyal_11pcs_prev_year2_feb'] = $row->feb_price;
			$data['reyal_11pcs_prev_year2_mar'] = $row->mar_price;
			$data['reyal_11pcs_prev_year2_apr'] = $row->apr_price;
			$data['reyal_11pcs_prev_year2_may'] = $row->may_price;
			$data['reyal_11pcs_prev_year2_jun'] = $row->jun_price;
			$data['reyal_11pcs_prev_year2_jul'] = $row->jul_price;
			$data['reyal_11pcs_prev_year2_aug'] = $row->aug_price;
			$data['reyal_11pcs_prev_year2_sep'] = $row->sep_price;
			$data['reyal_11pcs_prev_year2_oct'] = $row->oct_price;
			$data['reyal_11pcs_prev_year2_nov'] = $row->nov_price;
			$data['reyal_11pcs_prev_year2_dec'] = $row->dec_price;
			$data['reyal_11pcs_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_11pcs_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_11pcs_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$reyal_11pcs_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_11pcs_prev_year1_jan'] = 0;
		$data['reyal_11pcs_prev_year1_feb'] = 0;
		$data['reyal_11pcs_prev_year1_mar'] = 0;
		$data['reyal_11pcs_prev_year1_apr'] = 0;
		$data['reyal_11pcs_prev_year1_may'] = 0;
		$data['reyal_11pcs_prev_year1_jun'] = 0;
		$data['reyal_11pcs_prev_year1_jul'] = 0;
		$data['reyal_11pcs_prev_year1_aug'] = 0;
		$data['reyal_11pcs_prev_year1_sep'] = 0;
		$data['reyal_11pcs_prev_year1_oct'] = 0;
		$data['reyal_11pcs_prev_year1_nov'] = 0;
		$data['reyal_11pcs_prev_year1_dec'] = 0;
		$data['reyal_11pcs_prev_year1_avg'] = 0;
		$data['reyal_11pcs_prev_year1_min'] = 0;
		$data['reyal_11pcs_prev_year1_max'] = 0;

		foreach($reyal_11pcs_prev_year1 as $row){
			$data['reyal_11pcs_prev_year1_jan'] = $row->jan_price;
			$data['reyal_11pcs_prev_year1_feb'] = $row->feb_price;
			$data['reyal_11pcs_prev_year1_mar'] = $row->mar_price;
			$data['reyal_11pcs_prev_year1_apr'] = $row->apr_price;
			$data['reyal_11pcs_prev_year1_may'] = $row->may_price;
			$data['reyal_11pcs_prev_year1_jun'] = $row->jun_price;
			$data['reyal_11pcs_prev_year1_jul'] = $row->jul_price;
			$data['reyal_11pcs_prev_year1_aug'] = $row->aug_price;
			$data['reyal_11pcs_prev_year1_sep'] = $row->sep_price;
			$data['reyal_11pcs_prev_year1_oct'] = $row->oct_price;
			$data['reyal_11pcs_prev_year1_nov'] = $row->nov_price;
			$data['reyal_11pcs_prev_year1_dec'] = $row->dec_price;
			$data['reyal_11pcs_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_11pcs_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_11pcs_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*REYAL Chooksies Cut ups*/
		$join_reyal_cutups = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 1000199',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'NON MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'REYAL\''
		);

		$get_reyal_cutups = $this->admin->get_join('sales_tbl a', $join_reyal_cutups, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['reyal_cutups1'] = 0;
		$data['reyal_cutups2'] = 0;
		$data['reyal_cutups3'] = 0;
		$data['reyal_cutups4'] = 0;
		$data['reyal_cutups5'] = 0;
		$data['reyal_cutups6'] = 0;
		$data['reyal_cutups7'] = 0;
		$data['reyal_cutups8'] = 0;
		$data['reyal_cutups9'] = 0;
		$data['reyal_cutups10'] = 0;
		$data['reyal_cutups11'] = 0;
		$data['reyal_cutups12'] = 0;
		$data['reyal_cutups_total'] = 0;
		$data['reyal_cutups_count'] = 0;
		$data['reyal_cutups_avg'] = 0;
		$data['reyal_cutups_min'] = 0;
		$data['reyal_cutups_max'] = 0;

		foreach($get_reyal_cutups as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['reyal_cutups' . $month] = $asp;
			$data['reyal_cutups_total'] += $asp;

			if($asp < $data['reyal_cutups_min'] || $data['reyal_cutups_count'] == 0){
				$data['reyal_cutups_min'] = $asp;
			}

			if($asp > $data['reyal_cutups_max'] || $data['reyal_cutups_count'] == 0){
				$data['reyal_cutups_max'] = $asp;
			}

			$data['reyal_cutups_count']++;
		}

		$data['reyal_cutups_avg'] = $data['reyal_cutups_total'] != 0 ? $data['reyal_cutups_total'] / $data['reyal_cutups_count'] : 0;


		$get_reyal_cutups = $this->admin->get_join('sales_tbl a', $join_reyal_cutups, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['reyal_cutups1'] = 0;
		$data['reyal_cutups2'] = 0;
		$data['reyal_cutups3'] = 0;
		$data['reyal_cutups4'] = 0;
		$data['reyal_cutups5'] = 0;
		$data['reyal_cutups6'] = 0;
		$data['reyal_cutups7'] = 0;
		$data['reyal_cutups8'] = 0;
		$data['reyal_cutups9'] = 0;
		$data['reyal_cutups10'] = 0;
		$data['reyal_cutups11'] = 0;
		$data['reyal_cutups12'] = 0;
		$data['reyal_cutups_total'] = 0;
		$data['reyal_cutups_count'] = 0;
		$data['reyal_cutups_avg'] = 0;
		$data['reyal_cutups_min'] = 0;
		$data['reyal_cutups_max'] = 0;

		foreach($get_reyal_cutups as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['reyal_cutups' . $month] = $asp;
			$data['reyal_cutups_total'] += $asp;

			if($asp < $data['reyal_cutups_min'] || $data['reyal_cutups_count'] == 0){
				$data['reyal_cutups_min'] = $asp;
			}

			if($asp > $data['reyal_cutups_max'] || $data['reyal_cutups_count'] == 0){
				$data['reyal_cutups_max'] = $asp;
			}

			$data['reyal_cutups_count']++;
		}

		$data['reyal_cutups_avg'] = $data['reyal_cutups_total'] != 0 ? $data['reyal_cutups_total'] / $data['reyal_cutups_count'] : 0;

		$reyal_cutups_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES CUT UPS', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_cutups_prev_year2_jan'] = 0;
		$data['reyal_cutups_prev_year2_feb'] = 0;
		$data['reyal_cutups_prev_year2_mar'] = 0;
		$data['reyal_cutups_prev_year2_apr'] = 0;
		$data['reyal_cutups_prev_year2_may'] = 0;
		$data['reyal_cutups_prev_year2_jun'] = 0;
		$data['reyal_cutups_prev_year2_jul'] = 0;
		$data['reyal_cutups_prev_year2_aug'] = 0;
		$data['reyal_cutups_prev_year2_sep'] = 0;
		$data['reyal_cutups_prev_year2_oct'] = 0;
		$data['reyal_cutups_prev_year2_nov'] = 0;
		$data['reyal_cutups_prev_year2_dec'] = 0;
		$data['reyal_cutups_prev_year2_avg'] = 0;
		$data['reyal_cutups_prev_year2_min'] = 0;
		$data['reyal_cutups_prev_year2_max'] = 0;

		foreach($reyal_cutups_prev_year2 as $row){
			$data['reyal_cutups_prev_year2_jan'] = $row->jan_price;
			$data['reyal_cutups_prev_year2_feb'] = $row->feb_price;
			$data['reyal_cutups_prev_year2_mar'] = $row->mar_price;
			$data['reyal_cutups_prev_year2_apr'] = $row->apr_price;
			$data['reyal_cutups_prev_year2_may'] = $row->may_price;
			$data['reyal_cutups_prev_year2_jun'] = $row->jun_price;
			$data['reyal_cutups_prev_year2_jul'] = $row->jul_price;
			$data['reyal_cutups_prev_year2_aug'] = $row->aug_price;
			$data['reyal_cutups_prev_year2_sep'] = $row->sep_price;
			$data['reyal_cutups_prev_year2_oct'] = $row->oct_price;
			$data['reyal_cutups_prev_year2_nov'] = $row->nov_price;
			$data['reyal_cutups_prev_year2_dec'] = $row->dec_price;
			$data['reyal_cutups_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_cutups_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_cutups_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		$reyal_cutups_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES CUT UPS', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['reyal_cutups_prev_year1_jan'] = 0;
		$data['reyal_cutups_prev_year1_feb'] = 0;
		$data['reyal_cutups_prev_year1_mar'] = 0;
		$data['reyal_cutups_prev_year1_apr'] = 0;
		$data['reyal_cutups_prev_year1_may'] = 0;
		$data['reyal_cutups_prev_year1_jun'] = 0;
		$data['reyal_cutups_prev_year1_jul'] = 0;
		$data['reyal_cutups_prev_year1_aug'] = 0;
		$data['reyal_cutups_prev_year1_sep'] = 0;
		$data['reyal_cutups_prev_year1_oct'] = 0;
		$data['reyal_cutups_prev_year1_nov'] = 0;
		$data['reyal_cutups_prev_year1_dec'] = 0;
		$data['reyal_cutups_prev_year1_avg'] = 0;
		$data['reyal_cutups_prev_year1_min'] = 0;
		$data['reyal_cutups_prev_year1_max'] = 0;

		foreach($reyal_cutups_prev_year1 as $row){
			$data['reyal_cutups_prev_year1_jan'] = $row->jan_price;
			$data['reyal_cutups_prev_year1_feb'] = $row->feb_price;
			$data['reyal_cutups_prev_year1_mar'] = $row->mar_price;
			$data['reyal_cutups_prev_year1_apr'] = $row->apr_price;
			$data['reyal_cutups_prev_year1_may'] = $row->may_price;
			$data['reyal_cutups_prev_year1_jun'] = $row->jun_price;
			$data['reyal_cutups_prev_year1_jul'] = $row->jul_price;
			$data['reyal_cutups_prev_year1_aug'] = $row->aug_price;
			$data['reyal_cutups_prev_year1_sep'] = $row->sep_price;
			$data['reyal_cutups_prev_year1_oct'] = $row->oct_price;
			$data['reyal_cutups_prev_year1_nov'] = $row->nov_price;
			$data['reyal_cutups_prev_year1_dec'] = $row->dec_price;
			$data['reyal_cutups_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['reyal_cutups_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['reyal_cutups_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*SUPERMARKET Marinated Raw*/
		$join_smkt_raw = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CHICKEN (RAW)\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'SUPERMARKET\''
		);

		$get_smkt_raw = $this->admin->get_join('sales_tbl a', $join_smkt_raw, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['smkt_raw1'] = 0;
		$data['smkt_raw2'] = 0;
		$data['smkt_raw3'] = 0;
		$data['smkt_raw4'] = 0;
		$data['smkt_raw5'] = 0;
		$data['smkt_raw6'] = 0;
		$data['smkt_raw7'] = 0;
		$data['smkt_raw8'] = 0;
		$data['smkt_raw9'] = 0;
		$data['smkt_raw10'] = 0;
		$data['smkt_raw11'] = 0;
		$data['smkt_raw12'] = 0;
		$data['smkt_raw_total'] = 0;
		$data['smkt_raw_count'] = 0;
		$data['smkt_raw_avg'] = 0;
		$data['smkt_raw_min'] = 0;
		$data['smkt_raw_max'] = 0;

		foreach($get_smkt_raw as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['smkt_raw' . $month] = $asp;
			$data['smkt_raw_total'] += $asp;

			if($asp < $data['smkt_raw_min'] || $data['smkt_raw_count'] == 0){
				$data['smkt_raw_min'] = $asp;
			}

			if($asp > $data['smkt_raw_max'] || $data['smkt_raw_count'] == 0){
				$data['smkt_raw_max'] = $asp;
			}

			$data['smkt_raw_count']++;
		}

		$data['smkt_raw_avg'] = $data['smkt_raw_total'] != 0 ? $data['smkt_raw_total'] / $data['smkt_raw_count'] : 0;


		$smkt_raw_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - MARINATED CHICKEN RAW', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_raw_prev_year2_jan'] = 0;
		$data['smkt_raw_prev_year2_feb'] = 0;
		$data['smkt_raw_prev_year2_mar'] = 0;
		$data['smkt_raw_prev_year2_apr'] = 0;
		$data['smkt_raw_prev_year2_may'] = 0;
		$data['smkt_raw_prev_year2_jun'] = 0;
		$data['smkt_raw_prev_year2_jul'] = 0;
		$data['smkt_raw_prev_year2_aug'] = 0;
		$data['smkt_raw_prev_year2_sep'] = 0;
		$data['smkt_raw_prev_year2_oct'] = 0;
		$data['smkt_raw_prev_year2_nov'] = 0;
		$data['smkt_raw_prev_year2_dec'] = 0;
		$data['smkt_raw_prev_year2_avg'] = 0;
		$data['smkt_raw_prev_year2_min'] = 0;
		$data['smkt_raw_prev_year2_max'] = 0;

		foreach($smkt_raw_prev_year2 as $row){
			$data['smkt_raw_prev_year2_jan'] = $row->jan_price;
			$data['smkt_raw_prev_year2_feb'] = $row->feb_price;
			$data['smkt_raw_prev_year2_mar'] = $row->mar_price;
			$data['smkt_raw_prev_year2_apr'] = $row->apr_price;
			$data['smkt_raw_prev_year2_may'] = $row->may_price;
			$data['smkt_raw_prev_year2_jun'] = $row->jun_price;
			$data['smkt_raw_prev_year2_jul'] = $row->jul_price;
			$data['smkt_raw_prev_year2_aug'] = $row->aug_price;
			$data['smkt_raw_prev_year2_sep'] = $row->sep_price;
			$data['smkt_raw_prev_year2_oct'] = $row->oct_price;
			$data['smkt_raw_prev_year2_nov'] = $row->nov_price;
			$data['smkt_raw_prev_year2_dec'] = $row->dec_price;
			$data['smkt_raw_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['smkt_raw_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['smkt_raw_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$smkt_raw_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - MARINATED CHICKEN RAW', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_raw_prev_year1_jan'] = 0;
		$data['smkt_raw_prev_year1_feb'] = 0;
		$data['smkt_raw_prev_year1_mar'] = 0;
		$data['smkt_raw_prev_year1_apr'] = 0;
		$data['smkt_raw_prev_year1_may'] = 0;
		$data['smkt_raw_prev_year1_jun'] = 0;
		$data['smkt_raw_prev_year1_jul'] = 0;
		$data['smkt_raw_prev_year1_aug'] = 0;
		$data['smkt_raw_prev_year1_sep'] = 0;
		$data['smkt_raw_prev_year1_oct'] = 0;
		$data['smkt_raw_prev_year1_nov'] = 0;
		$data['smkt_raw_prev_year1_dec'] = 0;
		$data['smkt_raw_prev_year1_avg'] = 0;
		$data['smkt_raw_prev_year1_min'] = 0;
		$data['smkt_raw_prev_year1_max'] = 0;

		foreach($smkt_raw_prev_year1 as $row){
			$data['smkt_raw_prev_year1_jan'] = $row->jan_price;
			$data['smkt_raw_prev_year1_feb'] = $row->feb_price;
			$data['smkt_raw_prev_year1_mar'] = $row->mar_price;
			$data['smkt_raw_prev_year1_apr'] = $row->apr_price;
			$data['smkt_raw_prev_year1_may'] = $row->may_price;
			$data['smkt_raw_prev_year1_jun'] = $row->jun_price;
			$data['smkt_raw_prev_year1_jul'] = $row->jul_price;
			$data['smkt_raw_prev_year1_aug'] = $row->aug_price;
			$data['smkt_raw_prev_year1_sep'] = $row->sep_price;
			$data['smkt_raw_prev_year1_oct'] = $row->oct_price;
			$data['smkt_raw_prev_year1_nov'] = $row->nov_price;
			$data['smkt_raw_prev_year1_dec'] = $row->dec_price;
			$data['smkt_raw_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['smkt_raw_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['smkt_raw_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*SUPERMARKET Liver / Gizzard*/
		$join_smkt_liver = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVER / GIZZARD\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'SUPERMARKET\''
		);

		$get_smkt_liver = $this->admin->get_join('sales_tbl a', $join_smkt_liver, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['smkt_liver1'] = 0;
		$data['smkt_liver2'] = 0;
		$data['smkt_liver3'] = 0;
		$data['smkt_liver4'] = 0;
		$data['smkt_liver5'] = 0;
		$data['smkt_liver6'] = 0;
		$data['smkt_liver7'] = 0;
		$data['smkt_liver8'] = 0;
		$data['smkt_liver9'] = 0;
		$data['smkt_liver10'] = 0;
		$data['smkt_liver11'] = 0;
		$data['smkt_liver12'] = 0;
		$data['smkt_liver_total'] = 0;
		$data['smkt_liver_count'] = 0;
		$data['smkt_liver_avg'] = 0;
		$data['smkt_liver_min'] = 0;
		$data['smkt_liver_max'] = 0;

		foreach($get_smkt_liver as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['smkt_liver' . $month] = $asp;
			$data['smkt_liver_total'] += $asp;

			if($asp < $data['smkt_liver_min'] || $data['smkt_liver_count'] == 0){
				$data['smkt_liver_min'] = $asp;
			}

			if($asp > $data['smkt_liver_max'] || $data['smkt_liver_count'] == 0){
				$data['smkt_liver_max'] = $asp;
			}

			$data['smkt_liver_count']++;
		}

		$data['smkt_liver_avg'] = $data['smkt_liver_total'] != 0 ? $data['smkt_liver_total'] / $data['smkt_liver_count'] : 0;


		$smkt_liver_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - LIVER / GIZZARD', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_liver_prev_year2_jan'] = 0;
		$data['smkt_liver_prev_year2_feb'] = 0;
		$data['smkt_liver_prev_year2_mar'] = 0;
		$data['smkt_liver_prev_year2_apr'] = 0;
		$data['smkt_liver_prev_year2_may'] = 0;
		$data['smkt_liver_prev_year2_jun'] = 0;
		$data['smkt_liver_prev_year2_jul'] = 0;
		$data['smkt_liver_prev_year2_aug'] = 0;
		$data['smkt_liver_prev_year2_sep'] = 0;
		$data['smkt_liver_prev_year2_oct'] = 0;
		$data['smkt_liver_prev_year2_nov'] = 0;
		$data['smkt_liver_prev_year2_dec'] = 0;
		$data['smkt_liver_prev_year2_avg'] = 0;
		$data['smkt_liver_prev_year2_min'] = 0;
		$data['smkt_liver_prev_year2_max'] = 0;

		foreach($smkt_liver_prev_year2 as $row){
			$data['smkt_liver_prev_year2_jan'] = $row->jan_price;
			$data['smkt_liver_prev_year2_feb'] = $row->feb_price;
			$data['smkt_liver_prev_year2_mar'] = $row->mar_price;
			$data['smkt_liver_prev_year2_apr'] = $row->apr_price;
			$data['smkt_liver_prev_year2_may'] = $row->may_price;
			$data['smkt_liver_prev_year2_jun'] = $row->jun_price;
			$data['smkt_liver_prev_year2_jul'] = $row->jul_price;
			$data['smkt_liver_prev_year2_aug'] = $row->aug_price;
			$data['smkt_liver_prev_year2_sep'] = $row->sep_price;
			$data['smkt_liver_prev_year2_oct'] = $row->oct_price;
			$data['smkt_liver_prev_year2_nov'] = $row->nov_price;
			$data['smkt_liver_prev_year2_dec'] = $row->dec_price;
			$data['smkt_liver_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['smkt_liver_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['smkt_liver_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$smkt_liver_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - LIVER / GIZZARD', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_liver_prev_year1_jan'] = 0;
		$data['smkt_liver_prev_year1_feb'] = 0;
		$data['smkt_liver_prev_year1_mar'] = 0;
		$data['smkt_liver_prev_year1_apr'] = 0;
		$data['smkt_liver_prev_year1_may'] = 0;
		$data['smkt_liver_prev_year1_jun'] = 0;
		$data['smkt_liver_prev_year1_jul'] = 0;
		$data['smkt_liver_prev_year1_aug'] = 0;
		$data['smkt_liver_prev_year1_sep'] = 0;
		$data['smkt_liver_prev_year1_oct'] = 0;
		$data['smkt_liver_prev_year1_nov'] = 0;
		$data['smkt_liver_prev_year1_dec'] = 0;
		$data['smkt_liver_prev_year1_avg'] = 0;
		$data['smkt_liver_prev_year1_min'] = 0;
		$data['smkt_liver_prev_year1_max'] = 0;

		foreach($smkt_liver_prev_year1 as $row){
			$data['smkt_liver_prev_year1_jan'] = $row->jan_price;
			$data['smkt_liver_prev_year1_feb'] = $row->feb_price;
			$data['smkt_liver_prev_year1_mar'] = $row->mar_price;
			$data['smkt_liver_prev_year1_apr'] = $row->apr_price;
			$data['smkt_liver_prev_year1_may'] = $row->may_price;
			$data['smkt_liver_prev_year1_jun'] = $row->jun_price;
			$data['smkt_liver_prev_year1_jul'] = $row->jul_price;
			$data['smkt_liver_prev_year1_aug'] = $row->aug_price;
			$data['smkt_liver_prev_year1_sep'] = $row->sep_price;
			$data['smkt_liver_prev_year1_oct'] = $row->oct_price;
			$data['smkt_liver_prev_year1_nov'] = $row->nov_price;
			$data['smkt_liver_prev_year1_dec'] = $row->dec_price;
			$data['smkt_liver_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['smkt_liver_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['smkt_liver_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*SUPERMARKET Marinated Cut ups*/
		$join_smkt_marinated = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'SUPERMARKET\''
		);

		$get_smkt_marinated = $this->admin->get_join('sales_tbl a', $join_smkt_marinated, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['smkt_marinated1'] = 0;
		$data['smkt_marinated2'] = 0;
		$data['smkt_marinated3'] = 0;
		$data['smkt_marinated4'] = 0;
		$data['smkt_marinated5'] = 0;
		$data['smkt_marinated6'] = 0;
		$data['smkt_marinated7'] = 0;
		$data['smkt_marinated8'] = 0;
		$data['smkt_marinated9'] = 0;
		$data['smkt_marinated10'] = 0;
		$data['smkt_marinated11'] = 0;
		$data['smkt_marinated12'] = 0;
		$data['smkt_marinated_total'] = 0;
		$data['smkt_marinated_count'] = 0;
		$data['smkt_marinated_avg'] = 0;
		$data['smkt_marinated_min'] = 0;
		$data['smkt_marinated_max'] = 0;

		foreach($get_smkt_marinated as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['smkt_marinated' . $month] = $asp;
			$data['smkt_marinated_total'] += $asp;

			if($asp < $data['smkt_marinated_min'] || $data['smkt_marinated_count'] == 0){
				$data['smkt_marinated_min'] = $asp;
			}

			if($asp > $data['smkt_marinated_max'] || $data['smkt_marinated_count'] == 0){
				$data['smkt_marinated_max'] = $asp;
			}

			$data['smkt_marinated_count']++;
		}

		$data['smkt_marinated_avg'] = $data['smkt_marinated_total'] != 0 ? $data['smkt_marinated_total'] / $data['smkt_marinated_count'] : 0;

		$smkt_marinated_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - MAR CUT UPS', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_marinated_prev_year2_jan'] = 0;
		$data['smkt_marinated_prev_year2_feb'] = 0;
		$data['smkt_marinated_prev_year2_mar'] = 0;
		$data['smkt_marinated_prev_year2_apr'] = 0;
		$data['smkt_marinated_prev_year2_may'] = 0;
		$data['smkt_marinated_prev_year2_jun'] = 0;
		$data['smkt_marinated_prev_year2_jul'] = 0;
		$data['smkt_marinated_prev_year2_aug'] = 0;
		$data['smkt_marinated_prev_year2_sep'] = 0;
		$data['smkt_marinated_prev_year2_oct'] = 0;
		$data['smkt_marinated_prev_year2_nov'] = 0;
		$data['smkt_marinated_prev_year2_dec'] = 0;
		$data['smkt_marinated_prev_year2_avg'] = 0;
		$data['smkt_marinated_prev_year2_min'] = 0;
		$data['smkt_marinated_prev_year2_max'] = 0;

		foreach($smkt_marinated_prev_year2 as $row){
			$data['smkt_marinated_prev_year2_jan'] = $row->jan_price;
			$data['smkt_marinated_prev_year2_feb'] = $row->feb_price;
			$data['smkt_marinated_prev_year2_mar'] = $row->mar_price;
			$data['smkt_marinated_prev_year2_apr'] = $row->apr_price;
			$data['smkt_marinated_prev_year2_may'] = $row->may_price;
			$data['smkt_marinated_prev_year2_jun'] = $row->jun_price;
			$data['smkt_marinated_prev_year2_jul'] = $row->jul_price;
			$data['smkt_marinated_prev_year2_aug'] = $row->aug_price;
			$data['smkt_marinated_prev_year2_sep'] = $row->sep_price;
			$data['smkt_marinated_prev_year2_oct'] = $row->oct_price;
			$data['smkt_marinated_prev_year2_nov'] = $row->nov_price;
			$data['smkt_marinated_prev_year2_dec'] = $row->dec_price;
			$data['smkt_marinated_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['smkt_marinated_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['smkt_marinated_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$smkt_marinated_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - MAR CUT UPS', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_marinated_prev_year1_jan'] = 0;
		$data['smkt_marinated_prev_year1_feb'] = 0;
		$data['smkt_marinated_prev_year1_mar'] = 0;
		$data['smkt_marinated_prev_year1_apr'] = 0;
		$data['smkt_marinated_prev_year1_may'] = 0;
		$data['smkt_marinated_prev_year1_jun'] = 0;
		$data['smkt_marinated_prev_year1_jul'] = 0;
		$data['smkt_marinated_prev_year1_aug'] = 0;
		$data['smkt_marinated_prev_year1_sep'] = 0;
		$data['smkt_marinated_prev_year1_oct'] = 0;
		$data['smkt_marinated_prev_year1_nov'] = 0;
		$data['smkt_marinated_prev_year1_dec'] = 0;
		$data['smkt_marinated_prev_year1_avg'] = 0;
		$data['smkt_marinated_prev_year1_min'] = 0;
		$data['smkt_marinated_prev_year1_max'] = 0;

		foreach($smkt_marinated_prev_year1 as $row){
			$data['smkt_marinated_prev_year1_jan'] = $row->jan_price;
			$data['smkt_marinated_prev_year1_feb'] = $row->feb_price;
			$data['smkt_marinated_prev_year1_mar'] = $row->mar_price;
			$data['smkt_marinated_prev_year1_apr'] = $row->apr_price;
			$data['smkt_marinated_prev_year1_may'] = $row->may_price;
			$data['smkt_marinated_prev_year1_jun'] = $row->jun_price;
			$data['smkt_marinated_prev_year1_jul'] = $row->jul_price;
			$data['smkt_marinated_prev_year1_aug'] = $row->aug_price;
			$data['smkt_marinated_prev_year1_sep'] = $row->sep_price;
			$data['smkt_marinated_prev_year1_oct'] = $row->oct_price;
			$data['smkt_marinated_prev_year1_nov'] = $row->nov_price;
			$data['smkt_marinated_prev_year1_dec'] = $row->dec_price;
			$data['smkt_marinated_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['smkt_marinated_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['smkt_marinated_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		/*TRADE DISTRIBUTOR Marinated Raw*/
		$join_tds_raw = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CHICKEN (RAW)\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'TRADE DISTRIBUTOR\''
		);

		$get_tds_raw = $this->admin->get_join('sales_tbl a', $join_tds_raw, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['tds_raw1'] = 0;
		$data['tds_raw2'] = 0;
		$data['tds_raw3'] = 0;
		$data['tds_raw4'] = 0;
		$data['tds_raw5'] = 0;
		$data['tds_raw6'] = 0;
		$data['tds_raw7'] = 0;
		$data['tds_raw8'] = 0;
		$data['tds_raw9'] = 0;
		$data['tds_raw10'] = 0;
		$data['tds_raw11'] = 0;
		$data['tds_raw12'] = 0;
		$data['tds_raw_total'] = 0;
		$data['tds_raw_count'] = 0;
		$data['tds_raw_avg'] = 0;
		$data['tds_raw_min'] = 0;
		$data['tds_raw_max'] = 0;

		foreach($get_tds_raw as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['tds_raw' . $month] = $asp;
			$data['tds_raw_total'] += $asp;

			if($asp < $data['tds_raw_min'] || $data['tds_raw_count'] == 0){
				$data['tds_raw_min'] = $asp;
			}

			if($asp > $data['tds_raw_max'] || $data['tds_raw_count'] == 0){
				$data['tds_raw_max'] = $asp;
			}

			$data['tds_raw_count']++;
		}

		$data['tds_raw_avg'] = $data['tds_raw_total'] != 0 ? $data['tds_raw_total'] / $data['tds_raw_count'] : 0;

		$tds_raw_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs - MARINATED CHICKEN RAW', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_raw_prev_year2_jan'] = 0;
		$data['tds_raw_prev_year2_feb'] = 0;
		$data['tds_raw_prev_year2_mar'] = 0;
		$data['tds_raw_prev_year2_apr'] = 0;
		$data['tds_raw_prev_year2_may'] = 0;
		$data['tds_raw_prev_year2_jun'] = 0;
		$data['tds_raw_prev_year2_jul'] = 0;
		$data['tds_raw_prev_year2_aug'] = 0;
		$data['tds_raw_prev_year2_sep'] = 0;
		$data['tds_raw_prev_year2_oct'] = 0;
		$data['tds_raw_prev_year2_nov'] = 0;
		$data['tds_raw_prev_year2_dec'] = 0;
		$data['tds_raw_prev_year2_avg'] = 0;
		$data['tds_raw_prev_year2_min'] = 0;
		$data['tds_raw_prev_year2_max'] = 0;

		foreach($tds_raw_prev_year2 as $row){
			$data['tds_raw_prev_year2_jan'] = $row->jan_price;
			$data['tds_raw_prev_year2_feb'] = $row->feb_price;
			$data['tds_raw_prev_year2_mar'] = $row->mar_price;
			$data['tds_raw_prev_year2_apr'] = $row->apr_price;
			$data['tds_raw_prev_year2_may'] = $row->may_price;
			$data['tds_raw_prev_year2_jun'] = $row->jun_price;
			$data['tds_raw_prev_year2_jul'] = $row->jul_price;
			$data['tds_raw_prev_year2_aug'] = $row->aug_price;
			$data['tds_raw_prev_year2_sep'] = $row->sep_price;
			$data['tds_raw_prev_year2_oct'] = $row->oct_price;
			$data['tds_raw_prev_year2_nov'] = $row->nov_price;
			$data['tds_raw_prev_year2_dec'] = $row->dec_price;
			$data['tds_raw_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['tds_raw_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['tds_raw_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$tds_raw_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs - MARINATED CHICKEN RAW', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_raw_prev_year1_jan'] = 0;
		$data['tds_raw_prev_year1_feb'] = 0;
		$data['tds_raw_prev_year1_mar'] = 0;
		$data['tds_raw_prev_year1_apr'] = 0;
		$data['tds_raw_prev_year1_may'] = 0;
		$data['tds_raw_prev_year1_jun'] = 0;
		$data['tds_raw_prev_year1_jul'] = 0;
		$data['tds_raw_prev_year1_aug'] = 0;
		$data['tds_raw_prev_year1_sep'] = 0;
		$data['tds_raw_prev_year1_oct'] = 0;
		$data['tds_raw_prev_year1_nov'] = 0;
		$data['tds_raw_prev_year1_dec'] = 0;
		$data['tds_raw_prev_year1_avg'] = 0;
		$data['tds_raw_prev_year1_min'] = 0;
		$data['tds_raw_prev_year1_max'] = 0;

		foreach($tds_raw_prev_year1 as $row){
			$data['tds_raw_prev_year1_jan'] = $row->jan_price;
			$data['tds_raw_prev_year1_feb'] = $row->feb_price;
			$data['tds_raw_prev_year1_mar'] = $row->mar_price;
			$data['tds_raw_prev_year1_apr'] = $row->apr_price;
			$data['tds_raw_prev_year1_may'] = $row->may_price;
			$data['tds_raw_prev_year1_jun'] = $row->jun_price;
			$data['tds_raw_prev_year1_jul'] = $row->jul_price;
			$data['tds_raw_prev_year1_aug'] = $row->aug_price;
			$data['tds_raw_prev_year1_sep'] = $row->sep_price;
			$data['tds_raw_prev_year1_oct'] = $row->oct_price;
			$data['tds_raw_prev_year1_nov'] = $row->nov_price;
			$data['tds_raw_prev_year1_dec'] = $row->dec_price;
			$data['tds_raw_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['tds_raw_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['tds_raw_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		/*TRADE DISTRIBUTOR Liver / Gizzard*/
		$join_tds_liver = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVER / GIZZARD\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'TRADE DISTRIBUTOR\''
		);

		$get_tds_liver = $this->admin->get_join('sales_tbl a', $join_tds_liver, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(c.sales_det_asp) as asp, MONTH(c.sales_det_date) asp_date');

		$data['tds_liver1'] = 0;
		$data['tds_liver2'] = 0;
		$data['tds_liver3'] = 0;
		$data['tds_liver4'] = 0;
		$data['tds_liver5'] = 0;
		$data['tds_liver6'] = 0;
		$data['tds_liver7'] = 0;
		$data['tds_liver8'] = 0;
		$data['tds_liver9'] = 0;
		$data['tds_liver10'] = 0;
		$data['tds_liver11'] = 0;
		$data['tds_liver12'] = 0;
		$data['tds_liver_total'] = 0;
		$data['tds_liver_count'] = 0;
		$data['tds_liver_avg'] = 0;
		$data['tds_liver_min'] = 0;
		$data['tds_liver_max'] = 0;

		foreach($get_tds_liver as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['tds_liver' . $month] = $asp;
			$data['tds_liver_total'] += $asp;

			if($asp < $data['tds_liver_min'] || $data['tds_liver_count'] == 0){
				$data['tds_liver_min'] = $asp;
			}

			if($asp > $data['tds_liver_max'] || $data['tds_liver_count'] == 0){
				$data['tds_liver_max'] = $asp;
			}

			$data['tds_liver_count']++;
		}

		$data['tds_liver_avg'] = $data['tds_liver_total'] != 0 ? $data['tds_liver_total'] / $data['tds_liver_count'] : 0;


		$tds_liver_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs - LIVER / GIZZARD', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_liver_prev_year2_jan'] = 0;
		$data['tds_liver_prev_year2_feb'] = 0;
		$data['tds_liver_prev_year2_mar'] = 0;
		$data['tds_liver_prev_year2_apr'] = 0;
		$data['tds_liver_prev_year2_may'] = 0;
		$data['tds_liver_prev_year2_jun'] = 0;
		$data['tds_liver_prev_year2_jul'] = 0;
		$data['tds_liver_prev_year2_aug'] = 0;
		$data['tds_liver_prev_year2_sep'] = 0;
		$data['tds_liver_prev_year2_oct'] = 0;
		$data['tds_liver_prev_year2_nov'] = 0;
		$data['tds_liver_prev_year2_dec'] = 0;
		$data['tds_liver_prev_year2_avg'] = 0;
		$data['tds_liver_prev_year2_min'] = 0;
		$data['tds_liver_prev_year2_max'] = 0;

		foreach($tds_liver_prev_year2 as $row){
			$data['tds_liver_prev_year2_jan'] = $row->jan_price;
			$data['tds_liver_prev_year2_feb'] = $row->feb_price;
			$data['tds_liver_prev_year2_mar'] = $row->mar_price;
			$data['tds_liver_prev_year2_apr'] = $row->apr_price;
			$data['tds_liver_prev_year2_may'] = $row->may_price;
			$data['tds_liver_prev_year2_jun'] = $row->jun_price;
			$data['tds_liver_prev_year2_jul'] = $row->jul_price;
			$data['tds_liver_prev_year2_aug'] = $row->aug_price;
			$data['tds_liver_prev_year2_sep'] = $row->sep_price;
			$data['tds_liver_prev_year2_oct'] = $row->oct_price;
			$data['tds_liver_prev_year2_nov'] = $row->nov_price;
			$data['tds_liver_prev_year2_dec'] = $row->dec_price;
			$data['tds_liver_prev_year2_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['tds_liver_prev_year2_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['tds_liver_prev_year2_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}


		$tds_liver_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs - LIVER / GIZZARD', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_liver_prev_year1_jan'] = 0;
		$data['tds_liver_prev_year1_feb'] = 0;
		$data['tds_liver_prev_year1_mar'] = 0;
		$data['tds_liver_prev_year1_apr'] = 0;
		$data['tds_liver_prev_year1_may'] = 0;
		$data['tds_liver_prev_year1_jun'] = 0;
		$data['tds_liver_prev_year1_jul'] = 0;
		$data['tds_liver_prev_year1_aug'] = 0;
		$data['tds_liver_prev_year1_sep'] = 0;
		$data['tds_liver_prev_year1_oct'] = 0;
		$data['tds_liver_prev_year1_nov'] = 0;
		$data['tds_liver_prev_year1_dec'] = 0;
		$data['tds_liver_prev_year1_avg'] = 0;
		$data['tds_liver_prev_year1_min'] = 0;
		$data['tds_liver_prev_year1_max'] = 0;

		foreach($tds_liver_prev_year1 as $row){
			$data['tds_liver_prev_year1_jan'] = $row->jan_price;
			$data['tds_liver_prev_year1_feb'] = $row->feb_price;
			$data['tds_liver_prev_year1_mar'] = $row->mar_price;
			$data['tds_liver_prev_year1_apr'] = $row->apr_price;
			$data['tds_liver_prev_year1_may'] = $row->may_price;
			$data['tds_liver_prev_year1_jun'] = $row->jun_price;
			$data['tds_liver_prev_year1_jul'] = $row->jul_price;
			$data['tds_liver_prev_year1_aug'] = $row->aug_price;
			$data['tds_liver_prev_year1_sep'] = $row->sep_price;
			$data['tds_liver_prev_year1_oct'] = $row->oct_price;
			$data['tds_liver_prev_year1_nov'] = $row->nov_price;
			$data['tds_liver_prev_year1_dec'] = $row->dec_price;
			$data['tds_liver_prev_year1_avg'] = ($row->jan_price + $row->feb_price + $row->mar_price + $row->apr_price + $row->may_price + $row->jun_price + $row->jul_price + $row->aug_price + $row->sep_price + $row->oct_price + $row->nov_price + $row->dec_price) / 12;

			$data['tds_liver_prev_year1_min'] = min($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);

			$data['tds_liver_prev_year1_max'] = max($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price);
		}

		return $data;
	}

	public function compute_opex(){

		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','2048M');

		$user_info = $this->get_user_info();
 		$cost_center_id = $user_info['cost_center_id'];
 		$bc_id = $user_info['bc_id'];
 		$year_active = $this->_active_year();

 		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('Sales Templates')
				->setSubject('Sales Module')
				->setDescription('Sales Templates');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);

		foreach(range('A','I') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_material = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_mat_code= array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Year')
				->setCellValue("B1", 'Month')
				->setCellValue("C1", 'GL Code')
				->setCellValue("D1", 'GL Sub-group')
				->setCellValue("E1", 'GL Group')
				->setCellValue("F1", 'Business Center')
				->setCellValue("G1", 'Cost Center')
				->setCellValue("H1", 'Cost Center Name')
				->setCellValue("I1", 'Amount');
		
		$join_opex = array(
			'gl_transaction_item_tbl b' => 'a.gl_trans_item_id = b.gl_trans_item_id AND b.gl_trans_item_status = 1 AND a.gl_trans_det_status=1',
			'gl_transaction_tbl c' => 'b.gl_trans_id=c.gl_trans_id AND c.gl_trans_status = 1 AND YEAR(a.opex_budget_date)=' . $year_active,
			'gl_subgroup_tbl d' => 'b.gl_sub_id=d.gl_sub_id',
			'gl_group_tbl e' => 'd.gl_group_id = e.gl_group_id AND e.gl_group_show = 1',
			'cost_center_tbl f' => 'b.cost_center_id = f.cost_center_id AND (f.cost_center_type_id = 7 OR f.cost_center_type_id = 8) AND f.parent_id = ' . $cost_center_id,
			'bc_tbl g' => 'f.bc_id = g.bc_id'
		);

		$opex_bc_gl = $this->admin->get_join('gl_transaction_details_tbl a', $join_opex, FALSE, FALSE, FALSE, 'e.gl_group_name, d.gl_code, d.gl_sub_name, a.opex_amount as total_amount, g.bc_name, a.opex_budget_date, f.cost_center_code, f.cost_center_desc');
		$count = 2;
		foreach($opex_bc_gl as $row_opex){
			$year = date('Y', strtotime($row_opex->opex_budget_date));
			$month = date('m', strtotime($row_opex->opex_budget_date));
			$cost_center_code = $row_opex->cost_center_code;
			$cost_center_name = $row_opex->cost_center_desc;
			$gl_sub_name = $row_opex->gl_sub_name;
			$bc_name = $row_opex->bc_name;
			$gl_group_name = $row_opex->gl_group_name;
			$gl_group_code = $row_opex->gl_code;
			$opex_amount = $row_opex->total_amount;

			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, $month)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $opex_amount);
			$count++;
		}

		$join_sss = array(
			'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
			'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
			'employee_tbl d' => 'b.emp_id = d.emp_id',
			'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $cost_center_id,
			'bc_tbl f' => 'e.bc_id = f.bc_id'
		);

		$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_sss);
		foreach($get_salary as $row_salary){
			$basic_salary = $row_salary->emp_salary_budget;
			$year = date('Y', strtotime($row_salary->emp_salary_date));
			$month = date('m', strtotime($row_salary->emp_salary_date));
			$cost_center_code = $row_salary->cost_center_code;
			$cost_center_name = $row_salary->cost_center_desc;
			$bc_name = $row_salary->bc_name;

			$gl_group_name = 'SALARIES & WAGES';
			$gl_sub_name = 'BASIC SALARY';
			$gl_group_code = '600010';

			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, $month)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $basic_salary);
			$count++;


			$gl_group_name = 'SALARIES & WAGES';
			$gl_sub_name = '13th Month';
			$gl_group_code = '600050';
			$basic_13th = $basic_salary / 12;

			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, $month)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $basic_13th);
			$count++;

			$join_sss = array(
				'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND b.emp_cont_name='SSS' AND '$basic_salary' BETWEEN a.emp_config_from AND a.emp_config_to",
				'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id'
			);
			$check_sss = $this->admin->check_join('employee_config_tbl a', $join_sss, TRUE);
			if($check_sss['result'] == TRUE){
				$gl_sub_name = 'SSS';
				$gl_group_code = '600030';

				$contribution = $check_sss['info']->emp_config_value;
				$contribution_type = $check_sss['info']->emp_cont_type_name;
				$total_contribution = 0;
				if($contribution_type == 'FIXED'){
					$total_contribution = $contribution;
				}elseif($contribution_type == 'PERCENTAGE'){
					$total_contribution = $basic_salary * $contribution;
					
				}
			}

			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, $month)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $total_contribution);
			$count++;

			$join_pagibig = array(
				'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND b.emp_cont_name='PAGIBIG' AND '$basic_salary' BETWEEN a.emp_config_from AND a.emp_config_to",
				'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id'
			);

			$check_pagibig = $this->admin->check_join('employee_config_tbl a', $join_pagibig, TRUE);
			if($check_pagibig['result'] == TRUE){
				$gl_sub_name = 'PAGIBIG';
				$gl_group_code = '600080';

				$contribution = $check_pagibig['info']->emp_config_value;
				$contribution_type = $check_pagibig['info']->emp_cont_type_name;
				$total_contribution = 0;
				if($contribution_type == 'FIXED'){
					$total_contribution = $contribution;
					$total_contribution;
				}elseif($contribution_type == 'PERCENTAGE'){
					$total_contribution = $basic_salary * $contribution;
				}
			}

			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, $month)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $total_contribution);
			$count++;

			$join_health = array(
				'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND b.emp_cont_name='PHILHEALTH' AND '$basic_salary' BETWEEN a.emp_config_from AND a.emp_config_to",
				'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id'
			);
			$check_health = $this->admin->check_join('employee_config_tbl a', $join_health, TRUE);
			if($check_health['result'] == TRUE){
				$gl_sub_name = 'PHILHEALTH';
				$gl_group_code = '600110';

				$contribution = $check_health['info']->emp_config_value;
				$contribution_type = $check_health['info']->emp_cont_type_name;
				$total_contribution = 0;
				if($contribution_type == 'FIXED'){
					$total_contribution = $contribution;
					$total_contribution;
				}elseif($contribution_type == 'PERCENTAGE'){
					$total_contribution = $basic_salary * $contribution;
				}
			}

			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, $month)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $total_contribution);
			$count++;


			$join_accident = array(
				'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND b.emp_cont_name='ACCIDENT INSURANCE' AND '$basic_salary' BETWEEN a.emp_config_from AND a.emp_config_to",
				'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id'
			);
			$check_accident = $this->admin->check_join('employee_config_tbl a', $join_accident, TRUE);
			$total_insurance = 0;
			if($check_accident['result'] == TRUE){
				$contribution = $check_accident['info']->emp_config_value;
				$contribution_type = $check_accident['info']->emp_cont_type_name;
				$total_contribution = 0;
				if($contribution_type == 'FIXED'){
					$total_contribution = $contribution;
					$total_insurance += $total_contribution;
				}elseif($contribution_type == 'PERCENTAGE'){
					$total_contribution = $basic_salary * $contribution;
					$total_insurance += $total_contribution;
				}
			}

			$join_hmo = array(
				'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND b.emp_cont_name='HMO'",
				'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id',
				'employee_config_rank_tbl d' => 'a.emp_config_id = d.emp_config_id AND d.rank_id=' . $row_salary->rank_id
			);
			$check_hmo = $this->admin->check_join('employee_config_tbl a', $join_hmo, TRUE);
			if($check_hmo['result'] == TRUE){
				$contribution = $check_hmo['info']->emp_config_value;
				$contribution_type = $check_hmo['info']->emp_cont_type_name;
				$total_contribution = 0;
				if($contribution_type == 'FIXED'){
					$total_contribution = $contribution;
					$total_insurance += $total_contribution;
				}elseif($contribution_type == 'PERCENTAGE'){
					$total_contribution = $basic_salary * $contribution;
					$total_insurance += $total_contribution;
				}elseif($contribution_type == 'RANK'){
					$contribution = $check_hmo['info']->emp_config_rank_value;
					$total_contribution = $contribution / 12;
					$total_insurance += $total_contribution;
				}
			}

			$join_life = array(
				'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND b.emp_cont_name='LIFE INSURANCE' AND '$basic_salary' BETWEEN a.emp_config_from AND a.emp_config_to",
				'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id'
			);
			$check_life = $this->admin->check_join('employee_config_tbl a', $join_life, TRUE);
			if($check_life['result'] == TRUE){
				$contribution = $check_life['info']->emp_config_value;
				$contribution_type = $check_life['info']->emp_cont_type_name;
				$total_contribution = 0;
				if($contribution_type == 'FIXED'){
					$total_contribution = $contribution;
					$total_insurance += $total_contribution;
				}elseif($contribution_type == 'PERCENTAGE'){
					$total_contribution = $basic_salary * $contribution;
					$total_insurance += $total_contribution;
				}
			}

			$gl_sub_name = 'INSURANCE EXP.-GROUP';
			$gl_group_code = '600110';

			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, $month)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $total_insurance);
			$count++;
		}

		$get_depreciation = $this->admin->get_query('SELECT e.ag_name, d.asg_name as asset_group, e.ag_gl_code, (b.capex_price / b.capex_lifespan) as depreciation, c.capex_qty, MONTH(c.capex_budget_date) as budget_month, YEAR(c.capex_budget_date) as budget_year, f.cost_center_code, f.cost_center_desc FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND g.trans_type_id=1 AND a.ag_trans_status = 1 AND b.ag_trans_item_status = 1 AND c.ag_trans_det_status=1 AND f.parent_id=' . $cost_center_id . ' AND YEAR(c.capex_budget_date)=' . $year_active);

		foreach($get_depreciation as $row_depre){
			$start_month = $row_depre->budget_month;
			$year = $row_depre->budget_year;
			$depreciation = $row_depre->depreciation;
			$qty = $row_depre->capex_qty;
			$total_depre = $depreciation * $qty;

			$gl_group_name = 'DEPRECIATION';
			$gl_sub_name = $row_depre->ag_name;
			$gl_group_code = $row_depre->ag_gl_code;
			$cost_center_code = $row_depre->cost_center_code;
			$cost_center_name = $row_depre->cost_center_desc;

			for ($a=$start_month; $a <= 12 ; $a++){ 
				$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, $a)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $total_depre);
				$count++;
			}
		}

		$join_lapsing = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id AND b.bc_id = ' . $bc_id,
			'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id',
			'company_unit_tbl d' => 'a.company_unit_id = d.company_unit_id',
			'asset_group_tbl e' => 'a.ag_id = e.ag_id'
		);

		$get_lapsing = $this->admin->get_join('comparative_capex_tbl a', $join_lapsing, FALSE, FALSE, FALSE,'e.ag_name, a.jan, a.feb, a.mar, a.apr, a.may, a.jun, a.jul, a.aug, a.sep, a.oct, a.nov, a.dec, e.ag_gl_code, c.cost_center_code, c.cost_center_desc, YEAR(a.trans_year) as year, b.bc_name');
		
		foreach($get_lapsing as $row_lapsing){
			
			$year = $row_lapsing->year;
			$gl_group_name = 'DEPRECIATION';
			$gl_group_code = $row_lapsing->ag_gl_code;
			$gl_sub_name = $row_lapsing->ag_name;
			$bc_name = $row_lapsing->bc_name;
			$cost_center_code = $row_lapsing->cost_center_code;
			$cost_center_name = $row_lapsing->cost_center_desc;

			$jan_lapsing = $row_lapsing->jan;
			$feb_lapsing = $row_lapsing->feb;
			$mar_lapsing = $row_lapsing->mar;
			$apr_lapsing = $row_lapsing->apr;
			$may_lapsing = $row_lapsing->may;
			$jun_lapsing = $row_lapsing->jun;
			$jul_lapsing = $row_lapsing->jul;
			$aug_lapsing = $row_lapsing->aug;
			$sep_lapsing = $row_lapsing->sep;
			$oct_lapsing = $row_lapsing->oct;
			$nov_lapsing = $row_lapsing->nov;
			$dec_lapsing = $row_lapsing->dec;

			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, 1)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $jan_lapsing);
				$count++;

				$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, 2)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $feb_lapsing);
				$count++;


				$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, 3)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $mar_lapsing);
				$count++;


				$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, 4)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $apr_lapsing);
				$count++;

				$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, 5)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $may_lapsing);
				$count++;

				$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, 6)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $jun_lapsing);
				$count++;

				$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, 7)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $jul_lapsing);
				$count++;

				$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, 8)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $aug_lapsing);
				$count++;

				$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, 9)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $sep_lapsing);
				$count++;

				$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, 10)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $oct_lapsing);
				$count++;

				$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, 11)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $nov_lapsing);
				$count++;

				$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $year)
				->setCellValue("B" . $count, 12)
				->setCellValue("C" . $count, $gl_group_code)
				->setCellValue("D" . $count, $gl_sub_name)
				->setCellValue("E" . $count, $gl_group_name)
				->setCellValue("F" . $count, $bc_name)
				->setCellValue("G" . $count, $cost_center_code)
				->setCellValue("H" . $count, $cost_center_name)
				->setCellValue("I" . $count, $dec_lapsing);
				$count++;
		}

		$spreadsheet->getActiveSheet()->getStyle("A1:I" . $count)->applyFromArray($style_border);
		foreach(range('A','I') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}		

		$spreadsheet->getActiveSheet()->setTitle('OPEX');

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="OPEX Data - ' . $bc_name . '.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;

		/*$bc_contribution_pagibig = $this->get_salary_pagibig($cost_center_id);
		$bc_contribution_philhealth = $this->get_salary_philhealth($cost_center_id);
		$bc_contribution_life = $this->get_salary_life($cost_center_id);
		$bc_contribution_accident = $this->get_salary_accident($cost_center_id);
		$bc_contribution_hmo = $this->get_salary_hmo($cost_center_id);
		$bc_contribution_salary = $this->get_salary($cost_center_id);
		$bc_contribution_13month = $this->get_salary($cost_center_id) / 12;

		$sw = 'SALARIES & WAGES';

		$bc_gl_sub_name = 'BASIC SALARY';
		$bc_arr_salary = new stdClass;
		$bc_arr_salary->gl_group_name = $sw;
		$bc_arr_salary->gl_sub_name = $bc_gl_sub_name;
		$bc_arr_salary->gl_code = 600010;
		$bc_arr_salary->total_amount = $bc_contribution_salary;

		array_push($opex_bc_gl, $bc_arr_salary);

		$bc_gl_sub_name = 'SSS';
		$bc_arr_sss = new stdClass;
		$bc_arr_sss->gl_group_name = $sw;
		$bc_arr_sss->gl_sub_name = $bc_gl_sub_name;
		$bc_arr_sss->gl_code = 600030;
		$bc_arr_sss->total_amount = $bc_contribution_sss;
		array_push($opex_bc_gl, $bc_arr_sss);

		$bc_gl_sub_name = 'PAGIBIG';
		$bc_arr_pagibig = new stdClass;
		$bc_arr_pagibig->gl_group_name = $sw;
		$bc_arr_pagibig->gl_sub_name = $bc_gl_sub_name;
		$bc_arr_pagibig->gl_code = 600080;
		$bc_arr_pagibig->total_amount = $bc_contribution_pagibig;
		array_push($opex_bc_gl, $bc_arr_pagibig);

		$bc_gl_sub_name = 'PHILHEALTH';
		$bc_arr_philhealth = new stdClass;
		$bc_arr_philhealth->gl_group_name = $sw;
		$bc_arr_philhealth->gl_sub_name = $bc_gl_sub_name;
		$bc_arr_philhealth->gl_code = 600110;
		$bc_arr_philhealth->total_amount = $bc_contribution_philhealth;
		array_push($opex_bc_gl, $bc_arr_philhealth);

		$bc_gl_sub_name = 'INSURANCE EXP.-GROUP';
		$bc_arr_insurance = new stdClass;
		$bc_arr_insurance->gl_group_name = $sw;
		$bc_arr_insurance->gl_sub_name = $bc_gl_sub_name;
		$bc_arr_insurance->gl_code = 600110;
		$bc_arr_insurance->total_amount = $bc_contribution_hmo + $bc_contribution_life + $bc_contribution_accident;
		array_push($opex_bc_gl, $bc_arr_insurance);

		$bc_gl_sub_name = '13th MONTH';
		$bc_arr_13month = new stdClass;
		$bc_arr_13month->gl_group_name = $sw;
		$bc_arr_13month->gl_sub_name = $bc_gl_sub_name;
		$bc_arr_13month->gl_code = 600050;
		$bc_arr_13month->total_amount = $bc_contribution_13month;
		array_push($opex_bc_gl, $bc_arr_13month);

		$bc_depre_sub = $this->get_depreciation_subgroup($cost_center_id);
		$depre = "DEPRECIATION";

		foreach($bc_depre_sub as $row_sub){
			$gl_sub_name = $row_sub->ag_name;
			$gl_code = $row_sub->ag_gl_code;
			$depre_amount = $row_sub->total;

			$bc_arr_depre = new stdClass;
			$bc_arr_depre->gl_group_name = $depre;
			$bc_arr_depre->gl_sub_name = $gl_sub_name;
			$bc_arr_depre->gl_code = $gl_code;
			$bc_arr_depre->total_amount = $depre_amount;
			array_push($opex_bc_gl, $bc_arr_depre);
		}*/

		/*usort($opex_bc_gl, function($a, $b) {
		    return $a->total_amount < $b->total_amount;
		});*/
	}

	public function _opex_nationwide_bc($year){

		$user_info = $this->get_user_info();
 		$cost_center_id = $user_info['cost_center_id'];
 		$bc_id = $user_info['bc_id'];

		$join_opex = array(
			'gl_transaction_item_tbl b' => 'a.gl_trans_item_id = b.gl_trans_item_id AND b.gl_trans_item_status = 1 AND a.gl_trans_det_status=1',
			'gl_transaction_tbl c' => 'b.gl_trans_id=c.gl_trans_id AND c.gl_trans_status = 1 AND YEAR(a.opex_budget_date)=' . $year,
			'gl_subgroup_tbl d' => 'b.gl_sub_id=d.gl_sub_id',
			'gl_group_tbl e' => 'd.gl_group_id = e.gl_group_id AND e.gl_group_show = 1',
			'cost_center_tbl f' => 'b.cost_center_id = f.cost_center_id AND (f.cost_center_type_id = 7 OR f.cost_center_type_id = 8) AND f.parent_id = ' . $cost_center_id
		);

		$opex_bc_gl = $this->admin->get_join('gl_transaction_details_tbl a', $join_opex, FALSE, FALSE, 'b.gl_sub_id', 'e.gl_group_name, d.gl_code, d.gl_sub_name, SUM(a.opex_amount) total_amount');


		$bc_contribution_sss = $this->get_salary_sss($cost_center_id);
		$bc_contribution_pagibig = $this->get_salary_pagibig($cost_center_id);
		$bc_contribution_philhealth = $this->get_salary_philhealth($cost_center_id);
		$bc_contribution_life = $this->get_salary_life($cost_center_id);
		$bc_contribution_accident = $this->get_salary_accident($cost_center_id);
		$bc_contribution_hmo = $this->get_salary_hmo($cost_center_id);
		$bc_contribution_salary = $this->get_salary($cost_center_id);
		$bc_contribution_13month = $this->get_salary($cost_center_id) / 12;

		$sw = 'SALARIES & WAGES';

		$bc_gl_sub_name = 'BASIC SALARY';
		$bc_arr_salary = new stdClass;
		$bc_arr_salary->gl_group_name = $sw;
		$bc_arr_salary->gl_sub_name = $bc_gl_sub_name;
		$bc_arr_salary->gl_code = 600010;
		$bc_arr_salary->total_amount = $bc_contribution_salary;

		array_push($opex_bc_gl, $bc_arr_salary);

		$bc_gl_sub_name = 'SSS';
		$bc_arr_sss = new stdClass;
		$bc_arr_sss->gl_group_name = $sw;
		$bc_arr_sss->gl_sub_name = $bc_gl_sub_name;
		$bc_arr_sss->gl_code = 600030;
		$bc_arr_sss->total_amount = $bc_contribution_sss;
		array_push($opex_bc_gl, $bc_arr_sss);

		$bc_gl_sub_name = 'PAGIBIG';
		$bc_arr_pagibig = new stdClass;
		$bc_arr_pagibig->gl_group_name = $sw;
		$bc_arr_pagibig->gl_sub_name = $bc_gl_sub_name;
		$bc_arr_pagibig->gl_code = 600080;
		$bc_arr_pagibig->total_amount = $bc_contribution_pagibig;
		array_push($opex_bc_gl, $bc_arr_pagibig);

		$bc_gl_sub_name = 'PHILHEALTH';
		$bc_arr_philhealth = new stdClass;
		$bc_arr_philhealth->gl_group_name = $sw;
		$bc_arr_philhealth->gl_sub_name = $bc_gl_sub_name;
		$bc_arr_philhealth->gl_code = 600110;
		$bc_arr_philhealth->total_amount = $bc_contribution_philhealth;
		array_push($opex_bc_gl, $bc_arr_philhealth);

		$bc_gl_sub_name = 'INSURANCE EXP.-GROUP';
		$bc_arr_insurance = new stdClass;
		$bc_arr_insurance->gl_group_name = $sw;
		$bc_arr_insurance->gl_sub_name = $bc_gl_sub_name;
		$bc_arr_insurance->gl_code = 600110;
		$bc_arr_insurance->total_amount = $bc_contribution_hmo + $bc_contribution_life + $bc_contribution_accident;
		array_push($opex_bc_gl, $bc_arr_insurance);

		$bc_gl_sub_name = '13th MONTH';
		$bc_arr_13month = new stdClass;
		$bc_arr_13month->gl_group_name = $sw;
		$bc_arr_13month->gl_sub_name = $bc_gl_sub_name;
		$bc_arr_13month->gl_code = 600050;
		$bc_arr_13month->total_amount = $bc_contribution_13month;
		array_push($opex_bc_gl, $bc_arr_13month);

		$bc_depre_sub = $this->get_depreciation_subgroup($cost_center_id);
		$depre = "DEPRECIATION";

		foreach($bc_depre_sub as $row_sub){
			$gl_sub_name = $row_sub->ag_name;
			$gl_code = $row_sub->ag_gl_code;
			$depre_amount = $row_sub->total;

			$bc_arr_depre = new stdClass;
			$bc_arr_depre->gl_group_name = $depre;
			$bc_arr_depre->gl_sub_name = $gl_sub_name;
			$bc_arr_depre->gl_code = $gl_code;
			$bc_arr_depre->total_amount = $depre_amount;
			array_push($opex_bc_gl, $bc_arr_depre);
		}

		/*usort($opex_bc_gl, function($a, $b) {
		    return $a->total_amount < $b->total_amount;
		});*/

		return $opex_bc_gl;
	}

	public function get_comparative_capex(){
		$info = $this->_require_login();

		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];

		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id AND b.bc_id = ' . $bc_id,
			'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id',
			'company_unit_tbl d' => 'a.company_unit_id = d.company_unit_id',
			'asset_group_tbl e' => 'a.ag_id = e.ag_id'
		);

		$comparative = $this->admin->get_join('comparative_capex_tbl a', $join, FALSE,'c.cost_center_desc ASC', 'a.ag_id','e.ag_name, sum(a.jan + a.feb + a.mar + a.apr + a.may + a.jun + a.jul + a.aug + a.sep + a.oct + a.nov + a.dec) as total, e.ag_gl_code');

		return $comparative;
	}

	public function get_comparative_capex_previous_year(){
		$info = $this->_require_login();

		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		$year = $this->_active_year() - 1;
		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id AND b.bc_id = ' . $bc_id,
			'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id',
			'company_unit_tbl d' => 'a.company_unit_id = d.company_unit_id',
			'asset_group_tbl e' => 'a.ag_id = e.ag_id AND YEAR(a.acq_date) = ' . $year
		);

		$comparative = $this->admin->get_join('comparative_capex_tbl a', $join, TRUE,'c.cost_center_desc ASC',FALSE, 'sum(acq_cost) as total');
		return $comparative->total;
	}

	public function index(){
		$this->materials();
	}

	public function materials(){
	
		$info = $this->_require_login();
		$data['title'] = 'Materials';
 		$join_material = array(
			
			'unit_tbl b' => 'a.unit_id = b.unit_id',
			'material_group_tbl c' => 'a.material_group_id = c.material_group_id',
			'material_unit_tbl d' => 'a.material_id=d.material_id',
			'unit_tbl e' => 'd.valuation_unit = e.unit_id',
			'vat_type_tbl f' => 'a.vat_type_id = f.vat_type_id'
		);

		$data['material'] = $this->admin->get_join('material_tbl a', $join_material, FALSE,'a.material_code ASC', FALSE, '*, e.unit_name as valuation_unit');

		$data['unit'] = $this->admin->get_data('unit_tbl', array('unit_status' => 1));
		$data['group'] = $this->admin->get_query('SELECT * FROM material_group_tbl WHERE material_group_name NOT IN("MATERIAL VARIABLE")');
		$data['vtype'] = $this->admin->get_query('SELECT * FROM material_group_tbl WHERE material_group_name IN("LIVE SALES", "SUPERMARKET", "TRADE DISTRIBUTOR")');
		$data['unit'] = $this->admin->get_data('unit_tbl', array('unit_status' => 1));
		$data['vat'] = $this->admin->get_data('vat_type_tbl', array('vat_type_status' => 1));

		$data['content'] = $this->load->view('bc/bc_material_content', $data , TRUE);
		$this->load->view('bc/templates', $data);
	}

	public function outlets(){
		$info = $this->_require_login();

		$user_info = $this->get_user_info();
 		$bc_id = $user_info['bc_id'];

		$module = 'OUTLET';
		$active_year = $this->_active_year();

		$check_budget_status = $this->check_module($module, $active_year, $bc_id);

		if($check_budget_status == 1){
			$data['budget_status'] = 1;
		}else{
			$data['budget_status'] = 0;
		}

		$data['title'] = 'Outlets';
 		$user_info = $this->get_user_info();
 		$bc_id = $user_info['bc_id'];
		$join_outlet = array(
			'outlet_type_tbl b' => 'a.outlet_type_id = b.outlet_type_id AND a.outlet_status_id = 1',
			'bc_tbl c' => 'a.bc_id = c.bc_id AND c.bc_id = ' . $bc_id,
			'region_tbl d' => 'c.region_id=d.region_id',
			/*'outlet_status_tbl e' => 'a.outlet_status_id=e.outlet_status_id',*/
			'outlet_brand_tbl f' => 'a.outlet_id = f.outlet_id AND f.outlet_brand_status = 1',
			'brand_tbl g' => 'f.brand_id = g.brand_id',
			'brand_type_tbl h' => 'g.brand_type_id = h.brand_type_id',
		);
		
		$data['outlets'] = $this->admin->get_join('outlet_tbl a', $join_outlet, FALSE,'a.ifs_code ASC');
		$data['bc'] = $this->admin->get_data('bc_tbl');
		$data['region'] = $this->admin->get_data('region_tbl', array('region_status' => 1));
		$data['type'] = $this->admin->get_data('brand_type_tbl', array('brand_type_status' => 1));
		$data['status'] = $this->admin->get_data('outlet_status_tbl');

		$data['content'] = $this->load->view('bc/bc_outlet_content', $data , TRUE);
		$this->load->view('bc/templates', $data);
	}

	public function get_new_outlet($brand){
		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		$brand_id = decode($brand);
		$check_bc = $this->admin->check_data('bc_tbl', array('bc_id' => $bc_id), TRUE);

		if($check_bc['result'] == TRUE){
			$bc_code = $check_bc['info']->cost_center_code;
			$check_brand = $this->admin->check_data('brand_tbl', array('brand_id' => $brand_id), TRUE);
			if($check_brand['result'] == TRUE){
				$brand_code = $check_brand['info']->brand_code;
				$where = 'outlet_id IN (SELECT outlet_id FROM outlet_brand_tbl WHERE brand_id = ' . $brand_id . ' AND outlet_brand_status = 1) AND outlet_type_id = 2 AND outlet_status_id = 1 AND bc_id = ' . $bc_id;
				$count = $this->admin->get_count('outlet_tbl', $where) + 1;
				$format = $bc_code . '-' . $brand_code . '-';
				if($count >= 0 && $count < 10){
					$format = $bc_code . '-' . $brand_code . '-' . '0' . $count;
				}else{
					$format = $bc_code . '-' . $brand_code . '-'  . $count;
				}

				$data['result'] = 1;
				$data['info'] = $format;
			}
		}

		echo json_encode($data);
	}

	public function add_outlet(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$user_info = $this->get_user_info();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$bc_id = $user_info['bc_id'];
			$outlet = clean_data($this->input->post('outlet'));
			$ifs_code = clean_data($this->input->post('ifs'));
			$brand = $this->input->post('brand');

			if(!empty($outlet) && !empty($ifs_code) && !empty($bc_id) && !empty($brand)){
				$check_outlet = $this->admin->check_data('outlet_tbl', array('outlet_name' =>  strtoupper($outlet)));

				if($check_outlet == FALSE){
					$check_code = $this->admin->check_data('outlet_tbl', array('ifs_code' =>  $ifs_code));
					if($check_code == FALSE){

						$join_bc = array('cost_center_tbl b' => 'a.cost_center_code = b.cost_center_code AND a.bc_id =' . $bc_id);

						$check_bc = $this->admin->check_join('bc_tbl a', $join_bc , TRUE);
						if($check_bc['result'] == TRUE){
							$parent_id = $check_bc['info']->cost_center_id;
							$set = array(
								'bc_id' => $bc_id,
								'outlet_type_id' => 2,
								'ifs_code' => $ifs_code,
								'outlet_name' => strtoupper($outlet),
								'outlet_status_id' => 1
							);

							$result = $this->admin->insert_data('outlet_tbl', $set, TRUE);

							if($result['result'] == TRUE){
								$outlet_id = $result['id'];
								foreach ($brand as $key) {
									$brand_id 	= clean_data(decode($key));
									$set_outlet_brand = array(
										'outlet_id' => $outlet_id,
										'brand_id' => $brand_id,
										'outlet_brand_status' => 1
									);
									$result = $this->admin->insert_data('outlet_brand_tbl', $set_outlet_brand);

									$set_cost_center = array(
										'bc_id' => $bc_id,
										'parent_id' => $parent_id,
										'cost_center_type_id' => 8,
										'user_id' => $user_id,
										'cost_center_group_id' => $brand_id,
										'cost_center_code' => $ifs_code,
										'cost_center_desc' => strtoupper($outlet),
										'cost_center_added' => date_now(),
										'cost_center_status' => 1
									);

									$insert_cost_center = $this->admin->insert_data('cost_center_tbl', $set_cost_center);
								}

								if($result == TRUE){
									$msg = '<div class="alert alert-success">Outlet added.</div>';
								}else{
									$msg = '<div class="alert alert-danger">Error please try again!</div>';
								}
							}else{
								$msg = '<div class="alert alert-danger">Error please try again!</div>';
							}
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error IFS code already exist!</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error outlet name already exist!</div>';
				}
				$this->session->set_flashdata('message', $msg);
				redirect('business-center/outlets');
			}else{
				redirect('business-center/outlets');
			}
		}else{
			redirect('business-center');
		}
	}

	public function get_brand(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$brand_type_id = decode($this->input->post('id'));
			$check_brand_type = $this->admin->check_data('brand_type_tbl', array('brand_type_id' => $brand_type_id, 'brand_type_status' => 1));
			if($check_brand_type == TRUE){

				$brand = $this->admin->get_data('brand_tbl', array('brand_type_id' => $brand_type_id, 'brand_status' => 1));	
				$bc_brand = '';
				foreach($brand as $row):
					$bc_brand .= '<option value="' . encode($row->brand_id) . '">' . $row->brand_name . '</option>';
				endforeach;
				$data['result'] = 1;
				$data['info'] = $bc_brand;
			}else{
				$data['result'] = 0;
			}
			echo json_encode($data);
		}
	}

	public function opex_info($view_year = null){
		$info = $this->_require_login();

		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		$cost_center_code = $user_info['cost_center_code'];

		$module = 'OPEX';
		if($view_year == null){
			$year = $this->_active_year();
		}else{
			$year = $view_year;
		}

		$data['budget_status'] = $this->check_module($module, $year, $bc_id);

		$user_id = decode($info['user_id']);

		$data['title'] = 'OPEX Info';
		$year = $this->_active_year();

		$join_cost = array(
			'user_bc_tbl b' => 'a.user_id = b.user_id AND a.user_status_id = 1 AND b.user_bc_status = 1 AND a.user_id = ' . $user_id,
			'bc_tbl c' => 'b.bc_id = c.bc_id',
			'cost_center_tbl d' => 'c.cost_center_code = d.cost_center_code AND d.cost_center_status = 1'
		);

		$check_cost = $this->admin->check_join('user_tbl a', $join_cost, TRUE);
		if($check_cost['result'] == TRUE){
			$data['id'] = $check_cost['info']->cost_center_code;
			$cost_center_id = $check_cost['info']->cost_center_id;
			$cost_center_desc = $check_cost['info']->cost_center_desc;
			$data['cost_center_desc'] =  $cost_center_desc;
			$join_cost = array(
				'cost_center_tbl b' => 'a.cost_center_id=b.cost_center_id AND a.gl_trans_status=1 AND b.cost_center_id=' . $cost_center_id,
				'gl_group_tbl c' => 'a.gl_group_id=c.gl_group_id',
				'user_tbl d' => 'a.user_id=d.user_id'
			);

			$data['cost_center'] = encode($cost_center_id);
			$sw_join = array(
				'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.emp_salary_trans_status = 1 AND b.cost_center_id = ' . $cost_center_id
			);

			$get_sw_group = $this->admin->get_join('employee_salary_trans_tbl a', $sw_join);
			$data['sw'] = $get_sw_group;
			$data['gl_group'] = $this->admin->get_join('gl_transaction_tbl a', $join_cost);

			$join_opex = array(
				'gl_transaction_item_tbl b' => 'a.gl_trans_item_id = b.gl_trans_item_id AND b.gl_trans_item_status = 1 AND a.gl_trans_det_status=1',
				'gl_transaction_tbl c' => 'b.gl_trans_id=c.gl_trans_id AND c.gl_trans_status=1 AND YEAR(a.opex_budget_date)=' . $year,
				'gl_subgroup_tbl d' => 'b.gl_sub_id=d.gl_sub_id',
				'gl_group_tbl e' => 'd.gl_group_id = e.gl_group_id AND e.gl_group_show = 1',
				'cost_center_tbl f' => 'b.cost_center_id = f.cost_center_id AND f.cost_center_id AND f.parent_id=' . $cost_center_id
			);

			$opex_gl = $this->admin->get_join('gl_transaction_details_tbl a', $join_opex, FALSE, 'e.gl_group_name', 'b.gl_sub_id', 'e.gl_group_name, d.gl_sub_name, SUM(a.opex_amount) total_amount');

			$contribution_sss = $this->get_salary_sss($cost_center_id);
			$contribution_pagibig = $this->get_salary_pagibig($cost_center_id);
			$contribution_philhealth = $this->get_salary_philhealth($cost_center_id);
			$contribution_life = $this->get_salary_life($cost_center_id);
			$contribution_accident = $this->get_salary_accident($cost_center_id);
			$contribution_hmo = $this->get_salary_hmo($cost_center_id);
			$contribution_salary = $this->get_salary($cost_center_id);
			$contribution_13month = $this->get_salary($cost_center_id) / 12;

			$sw = 'SALARIES & WAGES';

			$gl_sub_name = 'BASIC SALARY';
			$arr_salary = new stdClass;
			$arr_salary->gl_group_name = $sw;
			$arr_salary->gl_sub_name = $gl_sub_name;
			$arr_salary->total_amount = $contribution_salary;

			array_push($opex_gl, $arr_salary);

			$gl_sub_name = 'SSS';
			$arr_sss = new stdClass;
			$arr_sss->gl_group_name = $sw;
			$arr_sss->gl_sub_name = $gl_sub_name;
			$arr_sss->total_amount = $contribution_sss;
			array_push($opex_gl, $arr_sss);

			$gl_sub_name = 'PAGIBIG';
			$arr_pagibig = new stdClass;
			$arr_pagibig->gl_group_name = $sw;
			$arr_pagibig->gl_sub_name = $gl_sub_name;
			$arr_pagibig->total_amount = $contribution_pagibig;
			array_push($opex_gl, $arr_pagibig);

			$gl_sub_name = 'PHILHEALTH';
			$arr_philhealth = new stdClass;
			$arr_philhealth->gl_group_name = $sw;
			$arr_philhealth->gl_sub_name = $gl_sub_name;
			$arr_philhealth->total_amount = $contribution_philhealth;
			array_push($opex_gl, $arr_philhealth);

			$gl_sub_name = 'HMO';
			$arr_hmo = new stdClass;
			$arr_hmo->gl_group_name = $sw;
			$arr_hmo->gl_sub_name = $gl_sub_name;
			$arr_hmo->total_amount = $contribution_hmo;
			array_push($opex_gl, $arr_hmo);

			$gl_sub_name = 'LIFE INSURANCE';
			$arr_life = new stdClass;
			$arr_life->gl_group_name = $sw;
			$arr_life->gl_sub_name = $gl_sub_name;
			$arr_life->total_amount = $contribution_life;
			array_push($opex_gl, $arr_life);

			$gl_sub_name = 'ACCIDENT INSURANCE';
			$arr_accident = new stdClass;
			$arr_accident->gl_group_name = $sw;
			$arr_accident->gl_sub_name = $gl_sub_name;
			$arr_accident->total_amount = $contribution_accident;
			array_push($opex_gl, $arr_accident);
			$gl_sub_name = '13th MONTH';
			$arr_13month = new stdClass;
			$arr_13month->gl_group_name = $sw;
			$arr_13month->gl_sub_name = $gl_sub_name;
			$arr_13month->total_amount = $contribution_13month;
			array_push($opex_gl, $arr_13month);


			//Depreciation per asset subgroup

			$depre_sub = $this->get_depreciation_subgroup($cost_center_id);
			$depre = "DEPRECIATION";
			foreach($depre_sub as $row_sub){
				$gl_sub_name = $row_sub->ag_name;
				$depre_amount = $row_sub->total;
				$arr_depre = new stdClass;
				$arr_depre->gl_group_name = $depre;
				$arr_depre->gl_sub_name = $gl_sub_name;
				$arr_depre->total_amount = $depre_amount;
				array_push($opex_gl, $arr_depre);
			}


			$data['opex_gl'] = $opex_gl;
			$data['year'] = $year;
			$data['content'] = $this->load->view('bc/bc_opex_info_content', $data , TRUE);
			$this->load->view('bc/templates', $data);
		}
	}

	public function cancel_opex(){
		$info = $this->_require_login();
		
		$user_info = $this->get_user_info();
		$cost_center_id = $user_info['cost_center_id'];
		$bc_id = $user_info['bc_id'];
		$module = 'OPEX';

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('gl_trans_id' => $id);
			$join_id = array(
				'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.gl_trans_id = ' . $id				
			);
			$check_id = $this->admin->check_join('gl_transaction_tbl a', $join_id, TRUE);
			if($check_id['result'] == TRUE){
				$cost_center_code = $check_id['info']->cost_center_code;

				$year  = $check_id['info']->gl_year;
				$budget_status = $this->check_module($module, $year, $bc_id);

				if($budget_status == 1){

					$set = array('gl_trans_status' => 0);
					$remove_opex = $this->admin->update_data('gl_transaction_tbl', $set, $where);
					
					if($remove_opex == TRUE){
						$msg = '<div class="alert alert-success">OPEX successfully removed.</strong></div>';
					}else{
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}

					$this->session->set_flashdata('message', $msg);
					redirect('business-center/opex-info/');
				}else{
					redirect('business-center/opex-info/');
				}
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('business-center/opex/');
			}
		}
	}

	public function get_salary($id, $month = null){
		$year_active = $this->_active_year();

		if($month == null){
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id
			);
			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary);
			$grand_total = 0;
			foreach($get_salary as $row_salary){
				$basic_salary = $row_salary->emp_salary_budget;
				$grand_total += $basic_salary;
			}
			return $grand_total;
		}else{
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id
			);
			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary, FALSE, 'MONTH(a.emp_salary_date) ASC', 'MONTH(a.emp_salary_date)', 'SUM(a.emp_salary_budget) as total_salary');

			return $get_salary;
		}
	}

	public function get_salary_hmo($id, $month=FALSE){
		$year_active = $this->_active_year();

		if($month == FALSE){
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id,
				'rank_tbl f' => 'b.rank_id = f.rank_id',
			);
			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary);
			$grand_total = 0;
			foreach($get_salary as $row_salary){
				$basic_salary = $row_salary->emp_salary_budget;
				$join_contribution = array(
					'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND b.emp_cont_name='HMO'",
					'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id',
					'employee_config_rank_tbl d' => 'a.emp_config_id = d.emp_config_id AND d.rank_id=' . $row_salary->rank_id
				);
				$check_contribution = $this->admin->check_join('employee_config_tbl a', $join_contribution, TRUE);
				if($check_contribution['result'] == TRUE){
					$contribution = $check_contribution['info']->emp_config_value;
					$contribution_type = $check_contribution['info']->emp_cont_type_name;
					$total_contribution = 0;
					if($contribution_type == 'FIXED'){
						$total_contribution = $contribution;
						$grand_total += $total_contribution;
					}elseif($contribution_type == 'PERCENTAGE'){
						$total_contribution = $basic_salary * $contribution;
						$grand_total += $total_contribution;
					}elseif($contribution_type == 'RANK'){
						$contribution = $check_contribution['info']->emp_config_rank_value;
						$total_contribution = $contribution / 12;
						$grand_total += $total_contribution;
					}
				}
			}

			return $grand_total;	
		}else{
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id,
				'rank_tbl f' => 'b.rank_id = f.rank_id',
				'employee_config_rank_tbl g' => 'b.rank_id = g.rank_id'
			);

			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary, FALSE, 'MONTH(a.emp_salary_date) ASC', 'MONTH(a.emp_salary_date)', '*, SUM(g.emp_config_rank_value / 12) total_hmo');
			return $get_salary;
		}
		
	}

	public function get_salary_pagibig($id, $month = FALSE){
		$year_active = $this->_active_year();

		if($month == FALSE){
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id
			);
			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary);
			$grand_total = 0;
			foreach($get_salary as $row_salary){
				$basic_salary = $row_salary->emp_salary_budget;
				$join_contribution = array(
					'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND b.emp_cont_name='PAGIBIG' AND '$basic_salary' BETWEEN a.emp_config_from AND a.emp_config_to",
					'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id'
				);
				$check_contribution = $this->admin->check_join('employee_config_tbl a', $join_contribution, TRUE);
				if($check_contribution['result'] == TRUE){
					$contribution = $check_contribution['info']->emp_config_value;
					$contribution_type = $check_contribution['info']->emp_cont_type_name;
					$total_contribution = 0;
					if($contribution_type == 'FIXED'){
						$total_contribution = $contribution;
						$total_contribution;
						$grand_total += $total_contribution;
					}elseif($contribution_type == 'PERCENTAGE'){
						$total_contribution = $basic_salary * $contribution;
						$grand_total += $total_contribution;
					}
				}
			}
			return $grand_total;
		}else{
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id,
				'employee_config_tbl f' => "a.emp_salary_budget BETWEEN f.emp_config_from AND f.emp_config_to AND f.emp_config_status = 1",
				'employee_contribution_tbl g' => 'f.emp_cont_id = g.emp_cont_id AND g.emp_cont_status=1 AND g.emp_cont_name="PAGIBIG"',
				'employee_contribution_type_tbl h' => 'f.emp_cont_type_id = h.emp_cont_type_id'
			);

			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary, FALSE, 'MONTH(a.emp_salary_date) ASC', FALSE,'(CASE WHEN h.emp_cont_type_name = "FIXED" THEN f.emp_config_value WHEN h.emp_cont_type_name = "PERCENTAGE" THEN a.emp_salary_budget * f.emp_config_value ELSE 0 END) as total_pagibig');
			return $get_salary;
			//echo $this->db->last_query();
		}
	}

	public function get_salary_accident($id, $month = FALSe){
		$year_active = $this->_active_year();
		if($month == FALSE){
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id
			);
			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary);
			$grand_total = 0;
			foreach($get_salary as $row_salary){
				$basic_salary = $row_salary->emp_salary_budget;
				$join_contribution = array(
					'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND b.emp_cont_name='ACCIDENT INSURANCE' AND '$basic_salary' BETWEEN a.emp_config_from AND a.emp_config_to",
					'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id'
				);
				$check_contribution = $this->admin->check_join('employee_config_tbl a', $join_contribution, TRUE);
				if($check_contribution['result'] == TRUE){
					$contribution = $check_contribution['info']->emp_config_value;
					$contribution_type = $check_contribution['info']->emp_cont_type_name;
					$total_contribution = 0;
					if($contribution_type == 'FIXED'){
						$total_contribution = $contribution;
						$total_contribution;
						
						$grand_total += $total_contribution;
					}elseif($contribution_type == 'PERCENTAGE'){
						$total_contribution = $basic_salary * $contribution;
						$grand_total += $total_contribution;
					}
				}
			}
			return $grand_total;
		}else{
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id,
				'employee_config_tbl f' => "a.emp_salary_budget BETWEEN f.emp_config_from AND f.emp_config_to AND f.emp_config_status = 1",
				'employee_contribution_tbl g' => "f.emp_cont_id = g.emp_cont_id AND g.emp_cont_status=1 AND g.emp_cont_name='ACCIDENT INSURANCE'",
				'employee_contribution_type_tbl h' => 'f.emp_cont_type_id = h.emp_cont_type_id'
			);

			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary, FALSE, 'MONTH(a.emp_salary_date) ASC', FALSE,'(CASE WHEN h.emp_cont_type_name = "FIXED" THEN f.emp_config_value WHEN h.emp_cont_type_name = "PERCENTAGE" THEN a.emp_salary_budget * f.emp_config_value ELSE 0 END) as total_accident');
			return $get_salary;
		}
	}

	public function get_salary_life($id, $month = FALSE){
		$year_active = $this->_active_year();
		if($month == FALSE){
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id
			);
			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary);
			$grand_total = 0;
			foreach($get_salary as $row_salary){
				$basic_salary = $row_salary->emp_salary_budget;
				$join_contribution = array(
					'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND b.emp_cont_name='LIFE INSURANCE' AND '$basic_salary' BETWEEN a.emp_config_from AND a.emp_config_to",
					'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id'
				);
				$check_contribution = $this->admin->check_join('employee_config_tbl a', $join_contribution, TRUE);
				if($check_contribution['result'] == TRUE){
					$contribution = $check_contribution['info']->emp_config_value;
					$contribution_type = $check_contribution['info']->emp_cont_type_name;
					$total_contribution = 0;
					if($contribution_type == 'FIXED'){
						$total_contribution = $contribution;
						$total_contribution;
						
						$grand_total += $total_contribution;
					}elseif($contribution_type == 'PERCENTAGE'){
						$total_contribution = $basic_salary * $contribution;
						$grand_total += $total_contribution;
					}
				}
			}
			return $grand_total;
		}else{
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id,
				'employee_config_tbl f' => "a.emp_salary_budget BETWEEN f.emp_config_from AND f.emp_config_to AND f.emp_config_status = 1",
				'employee_contribution_tbl g' => "f.emp_cont_id = g.emp_cont_id AND g.emp_cont_status=1 AND g.emp_cont_name='LIFE INSURANCE'",
				'employee_contribution_type_tbl h' => 'f.emp_cont_type_id = h.emp_cont_type_id'
			);

			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary, FALSE, 'MONTH(a.emp_salary_date) ASC', FALSE,'(CASE WHEN h.emp_cont_type_name = "FIXED" THEN f.emp_config_value WHEN h.emp_cont_type_name = "PERCENTAGE" THEN a.emp_salary_budget * f.emp_config_value ELSE 0 END) as total_life');
			return $get_salary;
		}
	}

	public function get_salary_philhealth($id, $month = FALSE){
		$year_active = $this->_active_year();
		if($month == FALSE){
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id
			);
			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary);
			$grand_total = 0;
			foreach($get_salary as $row_salary){
				$basic_salary = $row_salary->emp_salary_budget;
				$join_contribution = array(
					'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND b.emp_cont_name='PHILHEALTH' AND '$basic_salary' BETWEEN a.emp_config_from AND a.emp_config_to",
					'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id'
				);
				$check_contribution = $this->admin->check_join('employee_config_tbl a', $join_contribution, TRUE);
				if($check_contribution['result'] == TRUE){
					$contribution = $check_contribution['info']->emp_config_value;
					$contribution_type = $check_contribution['info']->emp_cont_type_name;
					$total_contribution = 0;
					if($contribution_type == 'FIXED'){
						$total_contribution = $contribution;
						$total_contribution;

						$grand_total += $total_contribution;
					}elseif($contribution_type == 'PERCENTAGE'){
						$total_contribution = $basic_salary * $contribution;
						$grand_total += $total_contribution;
					}
				}
			}
			return $grand_total;
		}else{
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id,
				'employee_config_tbl f' => "a.emp_salary_budget BETWEEN f.emp_config_from AND f.emp_config_to AND f.emp_config_status = 1",
				'employee_contribution_tbl g' => "f.emp_cont_id = g.emp_cont_id AND g.emp_cont_status=1 AND g.emp_cont_name='PHILHEALTH'",
				'employee_contribution_type_tbl h' => 'f.emp_cont_type_id = h.emp_cont_type_id'
			);

			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary, FALSE, 'MONTH(a.emp_salary_date) ASC', FALSE,'(CASE WHEN h.emp_cont_type_name = "FIXED" THEN f.emp_config_value WHEN h.emp_cont_type_name = "PERCENTAGE" THEN a.emp_salary_budget * f.emp_config_value ELSE 0 END) as total_philhealth');
			return $get_salary;
		}
	}

	public function get_salary_sss($id, $month = FALSE){
		$year_active = $this->_active_year();

		if($month == FALSE){
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id
			);

			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary);
			$grand_total = 0;
			foreach($get_salary as $row_salary){
				$basic_salary = $row_salary->emp_salary_budget;
				$join_sss = array(
					'employee_contribution_tbl b' => "a.emp_cont_id = b.emp_cont_id AND emp_config_status = 1 AND '$basic_salary' BETWEEN a.emp_config_from AND a.emp_config_to",
					'employee_contribution_type_tbl c' => 'a.emp_cont_type_id = c.emp_cont_type_id'
				);
				$check_sss = $this->admin->check_join('employee_config_tbl a', $join_sss, TRUE);
				if($check_sss['result'] == TRUE){
					$contribution = $check_sss['info']->emp_config_value;
					$contribution_type = $check_sss['info']->emp_cont_type_name;
					$total_contribution = 0;
					if($contribution_type == 'FIXED'){
						$total_contribution = $contribution;
						$total_contribution;
						$grand_total += $total_contribution;
					}elseif($contribution_type == 'PERCENTAGE'){
						$total_contribution = $basic_salary * $contribution;
						$grand_total += $total_contribution;
					}
				}
			}
			return $grand_total;
		}else{
			$join_salary = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND YEAR(a.emp_salary_date)=' . $year_active,
				'employee_tbl d' => 'b.emp_id = d.emp_id',
				'cost_center_tbl e' => 'b.cost_center_id = e.cost_center_id AND e.parent_id =' . $id,
				'employee_config_tbl f' => "a.emp_salary_budget BETWEEN f.emp_config_from AND f.emp_config_to AND f.emp_config_status = 1",
				'employee_contribution_tbl g' => "f.emp_cont_id = g.emp_cont_id AND g.emp_cont_status=1 AND g.emp_cont_name='SSS'",
				'employee_contribution_type_tbl h' => 'f.emp_cont_type_id = h.emp_cont_type_id'
			);

			$get_salary = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_salary, FALSE, 'MONTH(a.emp_salary_date) ASC', FALSE,'(CASE WHEN h.emp_cont_type_name = "FIXED" THEN f.emp_config_value WHEN h.emp_cont_type_name = "PERCENTAGE" THEN a.emp_salary_budget * f.emp_config_value ELSE 0 END) as total_sss');
			return $get_salary;
		}
	}

	public function opex_donut($id){
		$year = $this->_active_year();
		$cost_center = decode($id);
		$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center));

		if($check_id == TRUE){
			$line = $this->admin->get_query('SELECT e.gl_group_name as gl_group, SUM(c.opex_amount) as amount, e.gl_color as color FROM gl_transaction_tbl a, gl_transaction_item_tbl b, gl_transaction_details_tbl c, gl_subgroup_tbl d, gl_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.gl_trans_id=b.gl_trans_id AND  b.gl_trans_item_id=c.gl_trans_item_id AND b.gl_sub_id=d.gl_sub_id AND d.gl_group_id=e.gl_group_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND f.parent_id=' . $cost_center . ' AND a.gl_trans_status=1 AND b.gl_trans_item_status=1 AND c.gl_trans_det_status=1 AND g.trans_type_id=1 AND e.gl_group_show=1 AND YEAR(c.opex_budget_date)=' . $year . ' GROUP BY e.gl_group_id');
			$data['result'] = 1;
			$contribution_sss = $this->get_salary_sss($cost_center);
			$contribution_pagibig = $this->get_salary_pagibig($cost_center);
			$contribution_philhealth = $this->get_salary_philhealth($cost_center);
			$contribution_life = $this->get_salary_life($cost_center);
			$contribution_accident = $this->get_salary_accident($cost_center);
			$contribution_hmo = $this->get_salary_hmo($cost_center);
			$contribution_salary = $this->get_salary($cost_center);
			$contribution_13month = $this->get_salary($cost_center) / 12;

			$total_sw = $contribution_sss + $contribution_pagibig + $contribution_philhealth + $contribution_life + $contribution_accident + $contribution_hmo + $contribution_salary + $contribution_13month;
			$append_sw = array('gl_group' => 'SALARIES & WAGES', 'amount' => $total_sw, 'color' => '#e25a53');

			$get_depreciation = $this->opex_line_capex(encode($cost_center), TRUE);
			$depreciation_amount = 0;

			foreach($get_depreciation['info'] as $row_dep){
				$amount = $row_dep['amount'];
				$depreciation_amount += $amount;
			}

			$append_depreciation = array('gl_group' => 'DEPRECIATION', 'amount' => $depreciation_amount, 'color' => '#f0cee4');


			array_push($line, $append_sw);
			array_push($line, $append_depreciation);
			$data['info'] = $line;
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
		exit();
	}

	public function opex_line($id){
		$year = $this->_active_year();
		$cost_center = decode($id);
		$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center));
		if($check_id == TRUE){
			$line = $this->admin->get_query('SELECT  DATE_FORMAT(c.opex_budget_date, "%b %Y") as budget_date, SUM(c.opex_amount) as amount FROM gl_transaction_tbl a, gl_transaction_item_tbl b, gl_transaction_details_tbl c, gl_subgroup_tbl d, gl_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.gl_trans_id=b.gl_trans_id AND b.gl_trans_item_id=c.gl_trans_item_id AND b.gl_sub_id=d.gl_sub_id AND d.gl_group_id=e.gl_group_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND f.parent_id=' . $cost_center . ' AND a.gl_trans_status=1 AND b.gl_trans_item_status=1 AND g.trans_type_id=1 AND c.gl_trans_det_status=1 AND e.gl_group_show=1 AND YEAR(c.opex_budget_date)=' . $year . ' GROUP BY YEAR(c.opex_budget_date), MONTH(c.opex_budget_date)');
			
			$get_depreciation = $this->opex_line_capex(encode($cost_center), TRUE);
			$get_salary = $this->get_salary($cost_center, TRUE);
			$get_hmo = $this->get_salary_hmo($cost_center, TRUE);
			$get_pagibig = $this->get_salary_pagibig($cost_center, TRUE);
			$get_accident = $this->get_salary_accident($cost_center, TRUE);
			$get_life = $this->get_salary_life($cost_center, TRUE);
			$get_philhealth = $this->get_salary_philhealth($cost_center, TRUE);
			$get_sss = $this->get_salary_sss($cost_center, TRUE);

			if(isset($get_salary[0])){

				for($a = 0; $a < 12; $a++){
					$line[$a]->amount += $get_salary[$a]->total_salary + $get_hmo[$a]->total_hmo + $get_pagibig[$a]->total_pagibig + $get_accident[$a]->total_accident + $get_life[$a]->total_life + $get_philhealth[$a]->total_philhealth + $get_sss[$a]->total_sss + ($get_salary[$a]->total_salary / 12);
				}

				/*$line[1]->amount += $get_depreciation['info'][2]['amount'] + $get_salary[1]->total_salary + $get_hmo[1]->total_hmo + $get_pagibig[1]->total_pagibig + $get_accident[1]->total_accident + $get_life[1]->total_life + $get_philhealth[1]->total_philhealth + $get_sss[1]->total_sss;

				$line[2]->amount += $get_depreciation['info'][3]['amount'] + $get_salary[2]->total_salary + $get_hmo[2]->total_hmo + $get_pagibig[2]->total_pagibig + $get_accident[2]->total_accident + $get_life[2]->total_life + $get_philhealth[2]->total_philhealth + $get_sss[2]->total_sss;

				$line[3]->amount += $get_depreciation['info'][4]['amount'] + $get_salary[3]->total_salary + $get_hmo[3]->total_hmo + $get_pagibig[3]->total_pagibig + $get_accident[3]->total_accident + $get_life[3]->total_life + $get_philhealth[3]->total_philhealth + $get_sss[3]->total_sss;

				$line[4]->amount += $get_depreciation['info'][5]['amount'] + $get_salary[4]->total_salary + $get_hmo[4]->total_hmo + $get_pagibig[4]->total_pagibig + $get_accident[4]->total_accident + $get_life[4]->total_life + $get_philhealth[4]->total_philhealth + $get_sss[4]->total_sss;

				$line[5]->amount += $get_depreciation['info'][6]['amount'] + $get_salary[5]->total_salary + $get_hmo[5]->total_hmo + $get_pagibig[5]->total_pagibig + $get_accident[5]->total_accident + $get_life[5]->total_life + $get_philhealth[5]->total_philhealth + $get_sss[5]->total_sss;

				$line[6]->amount += $get_depreciation['info'][7]['amount'] + $get_salary[6]->total_salary + $get_hmo[6]->total_hmo + $get_pagibig[6]->total_pagibig + $get_accident[6]->total_accident + $get_life[6]->total_life + $get_philhealth[6]->total_philhealth + $get_sss[6]->total_sss;

				$line[7]->amount += $get_depreciation['info'][8]['amount'] + $get_salary[7]->total_salary + $get_hmo[7]->total_hmo + $get_pagibig[7]->total_pagibig + $get_accident[7]->total_accident + $get_life[7]->total_life + $get_philhealth[7]->total_philhealth + $get_sss[7]->total_sss;

				$line[8]->amount += $get_depreciation['info'][9]['amount'] + $get_salary[8]->total_salary + $get_hmo[8]->total_hmo + $get_pagibig[8]->total_pagibig + $get_accident[8]->total_accident + $get_life[8]->total_life + $get_philhealth[8]->total_philhealth + $get_sss[8]->total_sss;

				$line[9]->amount += $get_depreciation['info'][10]['amount'] + $get_salary[9]->total_salary + $get_hmo[9]->total_hmo + $get_pagibig[9]->total_pagibig + $get_accident[9]->total_accident + $get_life[9]->total_life + $get_philhealth[9]->total_philhealth + $get_sss[9]->total_sss;

				$line[10]->amount += $get_depreciation['info'][11]['amount'] + $get_salary[10]->total_salary + $get_hmo[10]->total_hmo + $get_pagibig[10]->total_pagibig + $get_accident[10]->total_accident + $get_life[10]->total_life + $get_philhealth[10]->total_philhealth + $get_sss[10]->total_sss;

				$line[11]->amount += $get_depreciation['info'][12]['amount'] + $get_salary[11]->total_salary + $get_hmo[11]->total_hmo + $get_pagibig[11]->total_pagibig + $get_accident[11]->total_accident + $get_life[11]->total_life + $get_philhealth[11]->total_philhealth + $get_sss[11]->total_sss;*/
			}

			if(isset($get_depreciation['info'][1])){

				for($a = 0; $a < 12; $a++){
					$line[$a]->amount += $get_depreciation['info'][$a+1]['amount'];
				}
			}

			$data['result'] = 1;
			$data['info'] = $line;
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
		exit();
	}

	public function opex_bar($id){
		$year = $this->_active_year();
		$cost_center = decode($id);
		$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center));
		if($check_id == TRUE){
			$bar = $this->admin->get_query('SELECT DATE_FORMAT(c.opex_budget_date, "%b %Y") as budget_date, e.gl_group_name as gl_group, SUM(c.opex_amount) as amount, MONTH(c.opex_budget_date) as month, e.gl_color as color FROM gl_transaction_tbl a, gl_transaction_item_tbl b, gl_transaction_details_tbl c, gl_subgroup_tbl d, gl_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.gl_trans_id=b.gl_trans_id AND b.gl_trans_item_id=c.gl_trans_item_id AND b.gl_sub_id=d.gl_sub_id AND d.gl_group_id=e.gl_group_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND f.parent_id=' . $cost_center . ' AND a.gl_trans_status=1 AND b.gl_trans_item_status=1 AND c.gl_trans_det_status=1 AND e.gl_group_show=1 AND g.trans_type_id=1 AND YEAR(c.opex_budget_date)=' . $year . ' GROUP BY YEAR(c.opex_budget_date), MONTH(c.opex_budget_date), e.gl_group_id ORDER BY c.opex_budget_date ASC');
			$arr_budget_date = array();
			$arr_group = array();
			$arr_gl = array();
			$count = 0;
			foreach($bar as $row){
				$budget_date = $row->budget_date;
				$month = $row->month;
				$amount = $row->amount;
				$gl_group = $row->gl_group;
				$gl_color = $row->color;
				if(!array_key_exists($month, $arr_budget_date)){
					$arr_budget_date[$month] = $budget_date;
				}

				if(!array_key_exists($gl_group, $arr_gl)){
					$arr_gl[$gl_group]['asset'] = $gl_group;
					$arr_gl[$gl_group]['color'] = $gl_color;
					$arr_gl[$gl_group]['amount'] = array();

					$arr_group[$gl_group] = $gl_group;
					$count++;
				}

				array_push($arr_gl[$gl_group]['amount'], $amount);
			}

			$get_depreciation = $this->opex_line_capex(encode($cost_center), TRUE);

			$get_salary = $this->get_salary($cost_center, TRUE);
			$get_hmo = $this->get_salary_hmo($cost_center, TRUE);
			$get_pagibig = $this->get_salary_pagibig($cost_center, TRUE);
			$get_accident = $this->get_salary_accident($cost_center, TRUE);
			$get_life = $this->get_salary_life($cost_center, TRUE);
			$get_philhealth = $this->get_salary_philhealth($cost_center, TRUE);
			$get_sss = $this->get_salary_sss($cost_center, TRUE);

			$sw = 'SALARIES & WAGES';
			$depre = 'DEPRECIATION';

			$arr_group[$sw] = $sw;
			$arr_group[$depre] = $depre;

			$arr_gl[$sw]['asset'] = $sw;
			$arr_gl[$sw]['color'] = '#e25a53';

			$arr_gl[$depre]['asset'] = $depre;
			$arr_gl[$depre]['color'] = '#f0cee4';

			$arr_gl[$sw]['amount'] = array();
			$arr_gl[$depre]['amount'] = array();
			for($a = 0; $a < 12; $a++){
				$total_sw = 0;
				$total_salary = isset($get_salary[$a]->total_salary) ? $get_salary[$a]->total_salary : 0;
				$total_hmo = isset($get_hmo[$a]->total_hmo) ? $get_hmo[$a]->total_hmo : 0;
				$total_pagibig = isset($get_pagibig[$a]->total_pagibig) ? $get_pagibig[$a]->total_pagibig : 0;
				$total_accident = isset($get_accident[$a]->total_accident) ? $get_accident[$a]->total_accident : 0;
				$total_life = isset($get_life[$a]->total_life) ? $get_life[$a]->total_life : 0;
				$total_philhealth = isset($get_philhealth[$a]->total_philhealth) ? $get_philhealth[$a]->total_philhealth : 0;
				$total_sss = isset($get_sss[$a]->total_sss) ? $get_sss[$a]->total_sss : 0;
				$total_13month = isset($get_salary[$a]->total_salary) ? $get_salary[$a]->total_salary/12 : 0;

				$total_sw = $total_salary + $total_hmo + $total_pagibig + $total_accident + $total_life + $total_philhealth + $total_sss + $total_13month;
				array_push($arr_gl[$sw]['amount'], $total_sw);

				$total_depreciation = $get_depreciation['info'][$a+1]['amount'];
				array_push($arr_gl[$depre]['amount'], $total_depreciation);
			}

			$data['result'] = 1;
			$data['month'] = $arr_budget_date;
			$data['group'] = $arr_group;
			$data['group_amount'] = $arr_gl;
		}else{
			$data['result'] = 0;
		}
		echo json_encode($data);
		exit();
	}

	public function opex_donut_capex($id){
		$year = $this->_active_year;
		$cost_center = decode($id);
		$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center));
		if($check_id == TRUE){
			$donut = $this->admin->get_query('SELECT d.ag_name as asset_group, SUM(((c.asg_price / c.asg_lifespan) * b.capex_qty) * (13-MONTH(b.capex_budget_date))) as opex_ny FROM asset_group_transaction_tbl a, asset_group_transaction_details_tbl b, asset_subgroup_tbl c, asset_group_tbl d, cost_center_tbl e WHERE a.ag_trans_id=b.ag_trans_id AND b.asg_id=c.asg_id AND c.ag_id=d.ag_id AND b.cost_center_id=e.cost_center_id AND a.ag_trans_status=1 AND b.ag_trans_det_status=1 AND e.parent_id=' . $cost_center . ' AND YEAR(b.capex_budget_date)=' . $year . ' GROUP BY d.ag_id');
			$data['result'] = 1;
			$data['info'] = $donut;
		}else{
			$data['result'] = 0;
		}		
		echo json_encode($data);
		exit();
	}

	public function opex_line_capex($id, $return_type=FALSE){
		$year = $this->_active_year();
		$cost_center = decode($id);
		$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center));
		if($check_id == TRUE){
			$line = $this->admin->get_query('SELECT e.ag_name as asset_group, (b.capex_price / b.capex_lifespan) as avg_opex, (13-MONTH(c.capex_budget_date)) as remaining_month, MONTH(c.capex_budget_date) as budget_date, c.capex_qty FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND a.ag_trans_status=1 AND b.ag_trans_item_status=1 AND c.ag_trans_det_status=1 AND g.trans_type_id=1 AND f.parent_id=' . $cost_center . ' AND YEAR(c.capex_budget_date)=' . $year);

			$month = array(
				'1' => 'Jan ' . $year,
				'2' => 'Feb ' . $year,
				'3' => 'Mar ' . $year,
				'4' => 'Apr ' . $year,
				'5' => 'May ' . $year,
				'6' => 'Jun ' . $year,
				'7' => 'Jul ' . $year,
				'8' => 'Aug ' . $year,
				'9' => 'Sep ' . $year,
				'10' => 'Oct ' . $year,
				'11' => 'Nov ' . $year,
				'12' => 'Dec ' . $year,
			);

			$line_data = array(
				'1' => array('month' => 'Jan ' . $year, 'amount' => 0),
				'2' => array('month' => 'Feb ' . $year, 'amount' => 0),
				'3' => array('month' => 'Mar ' . $year, 'amount' => 0),
				'4' => array('month' => 'Apr ' . $year, 'amount' => 0),
				'5' => array('month' => 'May ' . $year, 'amount' => 0),
				'6' => array('month' => 'Jun ' . $year, 'amount' => 0),
				'7' => array('month' => 'Jul ' . $year, 'amount' => 0),
				'8' => array('month' => 'Aug ' . $year, 'amount' => 0),
				'9' => array('month' => 'Sep ' . $year, 'amount' => 0),
				'10' => array('month' => 'Oct ' . $year, 'amount' => 0),
				'11' => array('month' => 'Nov ' . $year, 'amount' => 0),
				'12' => array('month' => 'Dec ' . $year, 'amount' => 0)
			);
			$total = 0;
			foreach($line as $row){
				$budget_date = $row->budget_date;
				$avg_opex = $row->avg_opex;
				$remaining_month = $row->remaining_month;
				$qty = $row->capex_qty;
				$a = 0;
				for($a = $budget_date; $a <= 12; $a++){
					$line_data[$a]['amount'] += $avg_opex * $row->capex_qty;
				}
			}

			$data['result'] = 1;
			$data['info'] = $line_data;
			$data['total'] = $total;
		}else{
			$data['result'] = 0;
		}

		if($return_type == FALSE){
			echo json_encode($data);
			exit();
		}else{
			return $data;
		}
	}

	public function get_depreciation_subgroup($cost_center){
		$year = $this->_active_year();

		$get_depreciation = $this->admin->get_query('SELECT e.ag_name, d.asg_name as asset_group, e.ag_gl_code, SUM((b.capex_price / b.capex_lifespan) * (13-MONTH(c.capex_budget_date)) * c.capex_qty) as total, MONTH(c.capex_budget_date) as budget_date FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND g.trans_type_id=1 AND a.ag_trans_status = 1 AND b.ag_trans_item_status = 1 AND c.ag_trans_det_status=1 AND f.parent_id=' . $cost_center . ' AND YEAR(c.capex_budget_date)=' . $year . ' GROUP BY e.ag_name');

		return $get_depreciation;
	}

	public function transac_opex($view_year = null){
		$info = $this->_require_login();

		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		$cost_center_code = $user_info['cost_center_code'];

		$module = 'OPEX';
		if($view_year == null){
			$year = $this->_active_year();
		}else{
			$year = $view_year;
		}

		$budget_status = $this->check_module($module, $year, $bc_id);
		
		if($budget_status == 1){
			$data['title'] = 'Add Opex';
			$id = $user_info['cost_center_code'];
			$data['id'] = encode($id);

			$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $id, 'cost_center_status' => 1), TRUE);
			if($check_id['result'] == TRUE){
				$cost_center_id = $check_id['info']->cost_center_id;
				$data['cost_center_name'] = $check_id['info']->cost_center_desc;
				$data['gl_group'] = $this->admin->get_query('SELECT * FROM gl_group_tbl as a WHERE a.gl_group_id NOT IN (SELECT b.gl_group_id FROM gl_transaction_tbl b, cost_center_tbl c WHERE b.cost_center_id=c.cost_center_id AND b.gl_trans_status=1 AND c.cost_center_id=' . $cost_center_id . ') AND a.gl_group_name !="DEPRECIATION" AND a.gl_group_name !="SALARIES & WAGES" OR a.gl_group_name = "STORE EXPENSES"');

				$sw_join = array(
					'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.emp_salary_trans_status = 1 AND b.cost_center_id = ' . $cost_center_id
				);

				$get_sw_group = $this->admin->check_join('employee_salary_trans_tbl a', $sw_join);
				$data['sw'] = $get_sw_group;
				$data['brand'] = $this->admin->get_data('brand_tbl', 'brand_status = 1');
				$data['content'] = $this->load->view('bc/bc_transac_opex', $data , TRUE);
				$this->load->view('bc/templates', $data);
			}
		}else{
			redirect('business-center/opex-info/');
		}
	}

	public function get_stores(){
		$info = $this->_require_login();
		$year = $this->_active_year();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$brand_id = decode($this->input->post('id'));
			$cost_center = decode($this->input->post('cost_center'));
			$check_brand = $this->admin->check_data('brand_tbl', array('brand_id' => $brand_id, 'brand_status' => 1));
			if($check_brand == TRUE){
				$check_cc = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'cost_center_status' => 1), TRUE);
				if($check_cc['result'] == TRUE){
					$cost_center_id = $check_cc['info']->cost_center_id;
					$join_outlet = array(
						'outlet_tbl b' => 'a.outlet_id = b.outlet_id AND a.outlet_brand_status = 1 AND a.brand_id = ' . $brand_id,
						'cost_center_tbl c' => 'b.ifs_code = c.cost_center_code AND c.cost_center_status = 1 AND c.cost_center_type_id = 8 AND c.parent_id = ' . $cost_center_id
					);
					$where = 'c.cost_center_id NOT IN (SELECT y.cost_center_id FROM gl_transaction_tbl w, gl_transaction_item_tbl x, cost_center_tbl y, outlet_tbl z, outlet_brand_tbl m  WHERE w.gl_trans_id = x.gl_trans_id AND x.cost_center_id = y.cost_center_id AND y.cost_center_code = z.ifs_code AND z.outlet_id = m.outlet_id AND m.outlet_brand_status = 1 AND m.brand_id=' . $brand_id . ' AND w.gl_trans_status = 1 AND x.gl_trans_item_status = 1)';
					$get_outlet = $this->admin->get_join('outlet_brand_tbl a', $join_outlet, FALSE, FALSE, FALSE, FALSE, $where);
					$outlet = '';
					foreach($get_outlet as $row):
						$outlet .= '<option value="' . encode($row->cost_center_id) . '">' . $row->cost_center_desc . '</option>';
					endforeach;
					$data['result'] = 1;
					$data['info'] = $outlet;
				}else{

				}
			}else{
				$data['result'] = 0;
			}
			echo json_encode($data);
		}
	}

	public function get_gl(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_group_id =clean_data(decode($this->input->post('id')));
			$cost_center =clean_data(decode($this->input->post('cost_center')));
			$check_gl = $this->admin->check_data('gl_group_tbl', array('gl_group_id' => $gl_group_id), TRUE);
			if($check_gl['result'] == TRUE){
				$data['name'] = $check_gl['info']->gl_group_name;
				$gl_name = $check_gl['info']->gl_group_name;
				$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'cost_center_status' => 1), TRUE);

				if($check_cost_center['result'] == TRUE){
					$cost_center_id = $check_cost_center['info']->cost_center_id;
					if($gl_name == 'SALARIES & WAGES'){
						$gl = $this->_salary_data($cost_center_id);
					}else{
						$gl = $this->_gl_data($cost_center_id, $gl_group_id, $gl_name);
					}
					$data['gl'] = $gl;
					$data['result'] = 1;
				}else{
					$data[''] = 0;
				}
				
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function get_gl_sub(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_sub_id =clean_data(decode($this->input->post('id')));
			$cost_center =clean_data(decode($this->input->post('cost_center')));
			$join_gl = array('gl_group_tbl b' => 'a.gl_group_id = b.gl_group_id AND gl_sub_status = 1 AND a.gl_sub_id = ' . $gl_sub_id);
			$check_gl = $this->admin->check_join('gl_subgroup_tbl a', $join_gl, TRUE);
			if($check_gl['result'] == TRUE){
				$data['name'] = $check_gl['info']->gl_group_name;
				$gl_name = $check_gl['info']->gl_group_name;
				$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'cost_center_status' => 1), TRUE);

				if($check_cost_center['result'] == TRUE){
					$cost_center_id = $check_cost_center['info']->cost_center_id;
					if($gl_name == 'SALARIES & WAGES'){
						$gl = $this->_salary_data($cost_center_id);
					}else{
						$gl = $this->_gl_data($cost_center_id, null, $gl_name, $gl_sub_id);
					}
					$data['gl'] = $gl;
					$data['result'] = 1;
				}else{
					$data[''] = 0;
				}
				
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function _gl_data($cost_center_id, $gl_group_id, $gl_name, $gl_sub_id=null){
		if($gl_name == 'STORE EXPENSES'){
			$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_id, 'cost_center_type_id' => 8 , 'cost_center_status' => 1));
		}else{
			$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_id, 'cost_center_type_id !=' => 8, 'cost_center_status' => 1));
		}

		$cost_center_data = '<select name="cost_center[]" class="form-control input-sm opex-cost-center">';
		$cost_center_data .= '<option value="">Select...</option>';
		foreach($get_cost_center as $row){
			$cost_center_data .= '<option value="' . encode($row->cost_center_id) . '">' . $row->cost_center_desc . '</option>';
		}

		$cost_center_data .= '</select>';

		if($gl_sub_id == null){
			$get_gl = $this->admin->get_data('gl_subgroup_tbl', array('gl_group_id' => $gl_group_id, 'gl_sub_status' => 1));
		}else{
			$get_gl = $this->admin->get_data('gl_subgroup_tbl', array('gl_sub_id' => $gl_sub_id, 'gl_sub_status' => 1));
		}
		$gl = '';
		$row_count = 1;
		foreach($get_gl as $row){
			$gl .= '<tr class="row-' . $row_count . '"><input type="hidden" name="id[]" value="' . encode($row->gl_sub_id) . '">';
			$gl .= '<td width="60px;" class="text-center"><a href="#" class="remove-gl-sub remove"><i class="fa fa-remove"></i></a>';

			if($gl_name != 'STORE EXPENSES'){
				$gl .= '&nbsp;&nbsp;&nbsp;<a href="" class="add-gl-sub add" data-id="' . encode($row->gl_sub_id) . '"><i class="fa fa-plus"></i></a>';
			}

			$gl .= '&nbsp;&nbsp;<a href="#" class="slider-add-item slider-opex" data-count="' . $row_count . '"><span class="fa fa-sliders"></span></a></td>';


			$gl .= '<td width="7%">' . $row->gl_sub_name .'</td>';
			$gl .= '<td width="13%">' . $cost_center_data . '</td>';
			$gl .= '<td class="text-right" width="5%"><label class="opex-total-qty">0</label></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty jan-qty" name="opex[jan][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty feb-qty" name="opex[feb][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty mar-qty" name="opex[mar][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty apr-qty" name="opex[apr][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty may-qty" name="opex[may][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty jun-qty" name="opex[jun][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty jul-qty" name="opex[jul][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty aug-qty" name="opex[aug][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty sep-qty" name="opex[sep][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty oct-qty" name="opex[oct][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty nov-qty" name="opex[nov][]" class="form-control input-sm"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty dec-qty" name="opex[dec][]" class="form-control input-sm"></td>';
			$gl .= '</tr>';

			$row_count++;
		}

		return $gl;
	}

	public function _salary_data($cost_center, $exist = FALSE){

		if($exist == FALSE){
			$join_emp = array(
				'cost_center_tbl b' =>  'a.cost_center_id = b.cost_center_id AND b.parent_id=' . $cost_center
			);
			$get_emp = $this->admin->get_join('employee_tbl a', $join_emp);
		}else{
			$join_emp = array(
				'cost_center_tbl b' =>  'a.cost_center_id = b.cost_center_id AND b.parent_id=' . $cost_center,
			);

			$where = 'a.emp_id NOT IN (SELECT x.emp_id FROM employee_salary_item_tbl x WHERE x.emp_salary_item_status = 1)';
			$get_emp = $this->admin->get_join('employee_tbl a', $join_emp, FALSE, FALSE, FALSE, FALSE, $where);
		}
		
		$gl = '';
		foreach($get_emp as $row_emp){
			$total_salary = number_format($row_emp->basic_salary * 12, 2);
			$gl .= '<tr><input type="hidden" name="id[]" value="' . encode($row_emp->emp_id) . '">';
			$gl .= '<td class="text-center"><a href="#" class="remove-asg"><i class="fa fa-remove"></i></a></td>';
			$gl .= '<td width="7%">' . $row_emp->emp_lname . ', ' . $row_emp->emp_fname . '</td>';
			$gl .= '<td width="7%">' . $row_emp->cost_center_code . '</td>';
			$gl .= '<td class="text-right" width="5%"><label class="total-salary">' . $total_salary . '</label></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="basic-salary jan-salary" name="salary[jan][]" class="form-control input-sm" value="' . $row_emp->basic_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty feb-salary" name="salary[feb][]" class="form-control input-sm" value="' . $row_emp->basic_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty mar-salary" name="salary[mar][]" class="form-control input-sm" value="' . $row_emp->basic_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty apr-salary" name="salary[apr][]" class="form-control input-sm" value="' . $row_emp->basic_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty may-salary" name="salary[may][]" class="form-control input-sm" value="' . $row_emp->basic_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty jun-salary" name="salary[jun][]" class="form-control input-sm" value="' . $row_emp->basic_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty jul-salary" name="salary[jul][]" class="form-control input-sm" value="' . $row_emp->basic_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty aug-salary" name="salary[aug][]" class="form-control input-sm" value="' . $row_emp->basic_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty sep-salary" name="salary[sep][]" class="form-control input-sm" value="' . $row_emp->basic_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty oct-salary" name="salary[oct][]" class="form-control input-sm" value="' . $row_emp->basic_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty nov-salary" name="salary[nov][]" class="form-control input-sm" value="' . $row_emp->basic_salary . '"></td>';
			$gl .= '<td class="text-center" width=""><input type="text" class="opex-qty dec-salary" name="salary[dec][]" class="form-control input-sm" value="' . $row_emp->basic_salary . '"></td>';
			$gl .= '</tr>';
		}

		return $gl;
	}

	public function add_opex(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$year = $this->_active_year();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_group = clean_data(decode($this->input->post('gl_group')));
			$cost_center = clean_data(decode($this->input->post('bc_cost_center')));
			$id = clean_data($this->input->post('id'));
			if(!empty($gl_group) && !empty($cost_center)){
				$check_gl = $this->admin->check_data('gl_group_tbl', array('gl_group_id' => $gl_group, 'gl_group_status' => 1), TRUE);
				if($check_gl['result'] == TRUE){
					$gl_name = $check_gl['info']->gl_group_name;
					$check_cc = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'cost_center_status' => 1), TRUE);
					if($check_cc['result'] == TRUE){
						$cost_center_id = $check_cc['info']->cost_center_id;
						$this->db->trans_start();
						if($gl_name == 'SALARIES & WAGES'){
							$salary = clean_data($this->input->post('salary'));

							$set_salary = array(
								'cost_center_id' => $cost_center_id,
								'user_id' => $user_id,
								'trans_type_id' => 1,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_status' => 1
							);
							
							$insert_emp = $this->admin->insert_data('employee_salary_trans_tbl', $set_salary, TRUE);
							if($insert_emp['result'] == TRUE){
								$emp_salary_trans_id = $insert_emp['id'];
								$count = 0;
								foreach($id as $emp){
									$emp_id = decode($emp);
									$check_emp = $this->admin->check_data('employee_tbl', array('emp_id' => $emp_id, 'emp_status' => 1), TRUE);

									if($check_emp['result'] == TRUE){

										$emp_cost_center = $check_emp['info']->cost_center_id;
										$rank_id = $check_emp['info']->rank_id;

										$set_item = array(
											'emp_salary_trans_id' => $emp_salary_trans_id,
											'emp_id' => $emp_id,
											'cost_center_id' => $emp_cost_center,
											'rank_id' => $rank_id,
											'emp_salary_item_added' => date_now(),
											'emp_salary_item_status' => 1
										);

										$insert_item = $this->admin->insert_data('employee_salary_item_tbl', $set_item, TRUE);
										$emp_salary_item_id = $insert_item['id'];


										$date = $year . '-01-01';
										$amount_jan = $salary['jan'][$count];
										$set_emp_jan = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_jan,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jan);

										$date = $year . '-02-01';
										$amount_feb = $salary['feb'][$count];
										$set_emp_feb = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_feb,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_feb);

										$date = $year . '-03-01';
										$amount_mar = $salary['mar'][$count];
										$set_emp_mar = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_mar,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_mar);

										$date = $year . '-04-01';
										$amount_apr = $salary['apr'][$count];
										$set_emp_apr = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_apr,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_apr);

										$date = $year . '-05-01';
										$amount_may = $salary['may'][$count];
										$set_emp_may = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_may,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_may);

										$date = $year . '-06-01';
										$amount_jun = $salary['jun'][$count];
										$set_emp_jun = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_jun,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jun);

										$date = $year . '-07-01';
										$amount_jul = $salary['jul'][$count];
										$set_emp_jul = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_jul,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jul);

										$date = $year . '-08-01';
										$amount_aug = $salary['aug'][$count];
										$set_emp_aug = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_aug,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_aug);

										$date = $year . '-09-01';
										$amount_sep = $salary['sep'][$count];
										$set_emp_sep = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_sep,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_sep);

										$date = $year . '-10-01';
										$amount_oct = $salary['oct'][$count];
										$set_emp_oct = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_oct,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_oct);

										$date = $year . '-11-01';
										$amount_nov = $salary['nov'][$count];
										$set_emp_nov = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_nov,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_nov);

										$date = $year . '-12-01';
										$amount_dec = $salary['dec'][$count];
										$set_emp_dec = array(
											'emp_salary_item_id' => $emp_salary_item_id,
											'emp_salary_budget' => $amount_dec,
											'emp_salary_date' => $date,
											'emp_salary_trans_added' => date_now(),
											'emp_salary_trans_dtl_status' => 1
										);
										$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_dec);
									}else{
										$this->db->trans_rollback();
										$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
										$this->session->set_flashdata('message', $msg);
										redirect('business-center/transac-opex/');
									}

									$count++;
								}
							}else{
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
								$this->session->set_flashdata('message', $msg);
								redirect('business-center/transac-opex/');
							}

							if($this->db->trans_status() === FALSE){
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error please try again!</div>';
							}else{
								$this->db->trans_commit();
								$msg = '<div class="alert alert-success">OPEX successfully added.</strong></div>';
							}
						}else{
							$set = array(
								'gl_group_id' => $gl_group,
								'trans_type_id' => 1,
								'cost_center_id' => $cost_center_id,
								'user_id' => $user_id,
								'gl_year' => $year,
								'gl_trans_added' => date_now(),
								'gl_trans_status' => 1
							);
							
							$insert_opex_trans = $this->admin->insert_data('gl_transaction_tbl', $set, TRUE);
							$gl_trans_id = $insert_opex_trans['id'];
							if($insert_opex_trans['result'] == TRUE){
								
								$gl_cost_center = clean_data($this->input->post('cost_center'));
								$opex = clean_data($this->input->post('opex'));
								$count = 0;
								foreach($id as $row){
									$gl_sub_id = decode($row);
									$check_gl_sub_id = $this->admin->check_data('gl_subgroup_tbl', array('gl_sub_id' => $gl_sub_id, 'gl_sub_status' => 1), TRUE);
									
									if($check_gl_sub_id['result'] == TRUE){
										$gl_cost_center_id = decode($gl_cost_center[$count]);

										$amount_jan = $opex['jan'][$count];
										$amount_feb = $opex['feb'][$count];
										$amount_mar = $opex['mar'][$count];
										$amount_apr = $opex['apr'][$count];
										$amount_may = $opex['may'][$count];
										$amount_jun = $opex['jun'][$count];
										$amount_jul = $opex['jul'][$count];
										$amount_aug = $opex['aug'][$count];
										$amount_sep = $opex['sep'][$count];
										$amount_oct = $opex['oct'][$count];
										$amount_nov = $opex['nov'][$count];
										$amount_dec = $opex['dec'][$count];

										$total_amount = $amount_jan + $amount_feb + $amount_mar + $amount_apr + $amount_may + $amount_jun + $amount_jul + $amount_aug + $amount_sep + $amount_oct + $amount_nov + $amount_dec;

										if($total_amount > 0){

											$set_item = array(
												'gl_trans_id' => $gl_trans_id,
												'gl_sub_id' => $gl_sub_id,
												'cost_center_id' => $gl_cost_center_id,
												'user_id' => $user_id,
												'gl_trans_item_added' => date_now(),
												'gl_trans_item_status' =>	1
											);
											$insert_item = $this->admin->insert_data('gl_transaction_item_tbl', $set_item, TRUE);

											if($insert_item['result'] == TRUE){
												$gl_trans_item_id = $insert_item['id'];
												
												$date = $year . '-' . '01-01';
												$set_gl_trans = array(
													'gl_trans_item_id' => $gl_trans_item_id,
													'opex_amount' => $amount_jan,
													'opex_budget_date' => $date,
													'gl_trans_det_added' => date_now(),
													'gl_trans_det_status' => 1
												);
												$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_trans);

												
												$date = $year . '-' . '02-01';
												$set_gl_det_trans = array(
													'gl_trans_item_id' => $gl_trans_item_id,
													'opex_amount' => $amount_feb,
													'opex_budget_date' => $date,
													'gl_trans_det_added' => date_now(),
													'gl_trans_det_status' => 1
												);
												$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

												
												$date = $year . '-' . '03-01';
												$set_gl_det_trans = array(
													'gl_trans_item_id' => $gl_trans_item_id,
													'opex_amount' => $amount_mar,
													'opex_budget_date' => $date,
													'gl_trans_det_added' => date_now(),
													'gl_trans_det_status' => 1
												);
												$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

												
												$date = $year . '-' . '04-01';
												$set_gl_det_trans = array(
													'gl_trans_item_id' => $gl_trans_item_id,
													'opex_amount' => $amount_apr,
													'opex_budget_date' => $date,
													'gl_trans_det_added' => date_now(),
													'gl_trans_det_status' => 1
												);
												$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);
												
												
												$date = $year . '-' . '05-01';
												$set_gl_det_trans = array(
													'gl_trans_item_id' => $gl_trans_item_id,
													'opex_amount' => $amount_may,
													'opex_budget_date' => $date,
													'gl_trans_det_added' => date_now(),
													'gl_trans_det_status' => 1
												);
												$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

												
												$date = $year . '-' . '06-01';
												$set_gl_det_trans = array(
													'gl_trans_item_id' => $gl_trans_item_id,
													'opex_amount' => $amount_jun,
													'opex_budget_date' => $date,
													'gl_trans_det_added' => date_now(),
													'gl_trans_det_status' => 1
												);
												$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

												$date = $year . '-' . '07-01';
												$set_gl_det_trans = array(
													'gl_trans_item_id' => $gl_trans_item_id,
													'opex_amount' => $amount_jul,
													'opex_budget_date' => $date,
													'gl_trans_det_added' => date_now(),
													'gl_trans_det_status' => 1
												);
												$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

											
												$date = $year . '-' . '08-01';
												$set_gl_det_trans = array(
													'gl_trans_item_id' => $gl_trans_item_id,
													'opex_amount' => $amount_aug,
													'opex_budget_date' => $date,
													'gl_trans_det_added' => date_now(),
													'gl_trans_det_status' => 1
												);
												$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

												
												$date = $year . '-' . '09-01';
												$set_gl_det_trans = array(
													'gl_trans_item_id' => $gl_trans_item_id,
													'opex_amount' => $amount_sep,
													'opex_budget_date' => $date,
													'gl_trans_det_added' => date_now(),
													'gl_trans_det_status' => 1
												);
												$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

												
												$date = $year . '-' . '10-01';
												$set_gl_det_trans = array(
													'gl_trans_item_id' => $gl_trans_item_id,
													'opex_amount' => $amount_oct,
													'opex_budget_date' => $date,
													'gl_trans_det_added' => date_now(),
													'gl_trans_det_status' => 1
												);
												$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

												
												$date = $year . '-' . '11-01';
												$set_gl_det_trans = array(
													'gl_trans_item_id' => $gl_trans_item_id,
													'opex_amount' => $amount_nov,
													'opex_budget_date' => $date,
													'gl_trans_det_added' => date_now(),
													'gl_trans_det_status' => 1
												);
												$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

												
												$date = $year . '-' . '12-01';
												$set_gl_det_trans = array(
													'gl_trans_item_id' => $gl_trans_item_id,
													'opex_amount' => $amount_dec,
													'opex_budget_date' => $date,
													'gl_trans_det_added' => date_now(),
													'gl_trans_det_status' => 1
												);
												$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);
												$count++;
											}else{
												$this->db->trans_rollback();
												$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
												$this->session->set_flashdata('message', $msg);
												redirect('business-center/transac-opex/');	
											}
										}
									}else{
										$this->db->trans_rollback();
										$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
										$this->session->set_flashdata('message', $msg);
										redirect('business-center/transac-opex/');
									} 
								}
							}else{
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
								$this->session->set_flashdata('message', $msg);
								redirect('business-center/transac-opex/');
							}

							if($this->db->trans_status() === FALSE){
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error please try again!</div>';
							}else{
								$this->db->trans_commit();
								$msg = '<div class="alert alert-success">OPEX successfully added.</strong></div>';
							}
						}

						$this->session->set_flashdata('message', $msg);
						redirect('business-center/transac-opex/');
					}else{
						$msg = '<div class="alert alert-danger">Error please try again!</div>';	
						$this->session->set_flashdata('message', $msg);
						redirect('business-center/transac-opex/');
					}
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';	
					$this->session->set_flashdata('message', $msg);
					redirect('business-center/transac-opex/');
				}
			}else{
				echo 'Error please try again!';
			}
		}
	}

	public function add_store_expense(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$year = $this->_active_year();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_group = clean_data(decode($this->input->post('gl_group')));
			$cost_center = clean_data(decode($this->input->post('bc_cost_center')));
			$cost_center_outlet = clean_data(decode($this->input->post('opex_outlet')));
			$id = clean_data($this->input->post('id'));
			if(!empty($gl_group) && !empty($cost_center) && !empty($cost_center_outlet)){
				$check_gl = $this->admin->check_data('gl_group_tbl', array('gl_group_id' => $gl_group, 'gl_group_status' => 1), TRUE);
				if($check_gl['result'] == TRUE){
					$gl_name = $check_gl['info']->gl_group_name;
					$check_cc = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'cost_center_status' => 1), TRUE);
					if($check_cc['result'] == TRUE){
						$cost_center_id = $check_cc['info']->cost_center_id;
						$this->db->trans_start();
						$check_trans = $this->admin->check_data('gl_transaction_tbl', array('gl_group_id' => $gl_group, 'cost_center_id' => $cost_center_id, 'gl_trans_status' => 1), TRUE);
						if($check_trans['result'] == TRUE){
							$gl_trans_id = $check_trans['info']->gl_trans_id;
						}else{
							$set = array(
								'gl_group_id' => $gl_group,
								'trans_type_id' => 1,
								'cost_center_id' => $cost_center_id,
								'user_id' => $user_id,
								'gl_year' => $year,
								'gl_trans_added' => date_now(),
								'gl_trans_status' => 1
							);
							
							$insert_opex_trans = $this->admin->insert_data('gl_transaction_tbl', $set, TRUE);
							if($insert_opex_trans['result'] == TRUE){
								$gl_trans_id = $insert_opex_trans['id'];
							}else{
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
								$this->session->set_flashdata('message', $msg);
								redirect('business-center/transac-opex/' . encode($cost_center));
							}
						}

						
						$opex = clean_data($this->input->post('opex'));
						$count = 0;
						foreach($id as $row){
							$gl_sub_id = decode($row);
							$check_gl_sub_id = $this->admin->check_data('gl_subgroup_tbl', array('gl_sub_id' => $gl_sub_id, 'gl_sub_status' => 1), TRUE);
							
							if($check_gl_sub_id['result'] == TRUE){
								

								$amount_jan = $opex['jan'][$count];
								$amount_feb = $opex['feb'][$count];
								$amount_mar = $opex['mar'][$count];
								$amount_apr = $opex['apr'][$count];
								$amount_may = $opex['may'][$count];
								$amount_jun = $opex['jun'][$count];
								$amount_jul = $opex['jul'][$count];
								$amount_aug = $opex['aug'][$count];
								$amount_sep = $opex['sep'][$count];
								$amount_oct = $opex['oct'][$count];
								$amount_nov = $opex['nov'][$count];
								$amount_dec = $opex['dec'][$count];

								$total_amount = $amount_jan + $amount_feb + $amount_mar + $amount_apr + $amount_may + $amount_jun + $amount_jul + $amount_aug + $amount_sep + $amount_oct + $amount_nov + $amount_dec;

								if($total_amount > 0){
									$set_item = array(
										'gl_trans_id' => $gl_trans_id,
										'gl_sub_id' => $gl_sub_id,
										'cost_center_id' => $cost_center_outlet,
										'user_id' => $user_id,
										'gl_trans_item_added' => date_now(),
										'gl_trans_item_status' =>	1
									);
									$insert_item = $this->admin->insert_data('gl_transaction_item_tbl', $set_item, TRUE);

									if($insert_item['result'] == TRUE){
										$gl_trans_item_id = $insert_item['id'];

										$date = $year . '-' . '01-01';
										$set_gl_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_jan,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_trans);

										
										$date = $year . '-' . '02-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_feb,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '03-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_mar,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '04-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_apr,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);
										
										
										$date = $year . '-' . '05-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_may,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '06-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_jun,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										$date = $year . '-' . '07-01';
										$amount_jul = $opex['jul'][$count];
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_jul,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '08-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_aug,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '09-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_sep,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '10-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_oct,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '11-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_nov,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '12-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_dec,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);
									}else{
										$this->db->trans_rollback();
										$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
										$this->session->set_flashdata('message', $msg);
										redirect('business-center/transac-opex/' . encode($cost_center));	
									}
								}

								$count++;
							}else{
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
								$this->session->set_flashdata('message', $msg);
								redirect('business-center/transac-opex/' . encode($cost_center));
							} 
						}

						if($this->db->trans_status() === FALSE){
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}else{
							$this->db->trans_commit();
							$msg = '<div class="alert alert-success">OPEX successfully added.</strong></div>';
						}

						$this->session->set_flashdata('message', $msg);
						redirect('business-center/transac-opex/' . encode($cost_center));
					}else{
						$msg = '<div class="alert alert-danger">Error please try again!</div>';	
						$this->session->set_flashdata('message', $msg);
						redirect('business-center/transac-opex/' . encode($cost_center));
					}
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';	
					$this->session->set_flashdata('message', $msg);
					redirect('business-center/transac-capex/' . encode($cost_center));
				}
			}else{
				echo 'Error please try again!';
			}
		}
	}

	public function upload_store_expense(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		$user_info = $this->get_user_info();
		$user_cost_center = $user_info['cost_center_desc'];

		$year = $this->_active_year();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$this->load->library('excel');
			ini_set('max_execution_time', 0); 
			ini_set('memory_limit','2048M');
			
			$temp_code = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 10);

			$config['upload_path']   = 'assets/store-expense-temp';
	        $config['allowed_types'] = 'xls|xlsx|xlsb';
	        $config['file_name'] = 'tmp_' . $temp_code;
	        $this->load->library('upload', $config);
			
	        if (! $this->upload->do_upload('budget_file')) {
	            $error = array('error' => $this->upload->display_errors());
	            $msg = $this->upload->display_errors();
	            $this->session->set_flashdata('message', $msg);
	            redirect('business-center/');
	        }else{

				$data = array('upload_data' => $this->upload->data());
		        $file_name = $data['upload_data']['file_name'];

				$file = 'assets/store-expense-temp/' . $file_name;
				$data['file'] = $file_name;

	        	$this->db->trans_start();

				$objPHPExcel = PHPExcel_IOFactory::load($file);
				//get only the Cell Collection
				$cell_collection = $objPHPExcel->getActiveSheet()->getCellCollection();
				$data['excel_data'] = '';
				
				$bc = $objPHPExcel->getActiveSheet()->getCell('B1')->getValue();
				if($bc == $user_cost_center){
					$check_bc = $this->admin->check_data('cost_center_tbl', array('cost_center_desc' => strtoupper($bc), 'cost_center_status' => 1), TRUE);
					if($check_bc['result'] == TRUE){
						$bc_cost_center_id = $check_bc['info']->cost_center_id;
						$cost_center_code = $check_bc['info']->cost_center_code;
						$high_column = $objPHPExcel->getActiveSheet()->getHighestColumn();
						$high =PHPExcel_Cell::columnIndexFromString($high_column);

						$join_trans = array(
							'gl_group_tbl b' => "a.gl_group_id = b.gl_group_id AND a.gl_trans_status = 1 AND a.gl_year = " . $year . " AND b.gl_group_name = 'STORE EXPENSES' AND a.cost_center_id = " . $bc_cost_center_id,
						);

						$check_gl_trans = $this->admin->check_join('gl_transaction_tbl a', $join_trans, TRUE);
						if($check_gl_trans['result'] == TRUE){
							$gl_trans_id = $check_gl_trans['info']->gl_trans_id;
						}else{
							//Store Expenses ID
							$gl_group_id = 13;
							$set_trans = array(
								'gl_group_id' => $gl_group_id,
								'cost_center_id' => $bc_cost_center_id,
								'trans_type_id' => 1,
								'user_id' => $user_id,
								'gl_year' => $year,
								'gl_trans_added' => date_now(),
								'gl_trans_status' => 1
							);

							$insert_trans = $this->admin->insert_data('gl_transaction_tbl', $set_trans, TRUE);
							$gl_trans_id = $insert_trans['id'];
						}

						for($a = 2; $a <= $high; $a = $a + 12){
							$column_outlet = PHPExcel_Cell::stringFromColumnIndex($a);
							$outlet_code = $objPHPExcel->getActiveSheet()->getCell($column_outlet . '6')->getValue();
							
							if(!empty($outlet_code)){
								$check_outlet = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => strtoupper($outlet_code), 'cost_center_status' => 1), TRUE);

								if($check_outlet['result'] == TRUE){
									$cost_center_id = $check_outlet['info']->cost_center_id;
									$join_gl = array(
										'gl_transaction_tbl b' => 'a.gl_trans_id = b.gl_trans_id AND b.gl_trans_status = 1 AND a.gl_trans_item_status = 1 AND b.gl_year = ' . $year . ' AND a.cost_center_id = ' . $cost_center_id
									);

									$check_gl = $this->admin->check_join('gl_transaction_item_tbl a', $join_gl, TRUE);
									if($check_gl['result'] == FALSE){

										$high_row = $objPHPExcel->getActiveSheet()->getHighestRow();
										
										for($b = 8; $b <= $high_row; $b++){
											$qty_column = $column_outlet;
											
											$gl_code = $objPHPExcel->getActiveSheet()->getCell('A' . $b)->getValue();
											if(!empty($gl_code)){
												$check_code = $this->admin->check_data('gl_subgroup_tbl', array('gl_code' => strtoupper($gl_code), 'gl_group_id' => 13, 'gl_sub_status' => 1), TRUE);
												if($check_code['result'] == TRUE){

													$checker_qty = $qty_column;
													$jan_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$feb_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$mar_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$apr_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$may_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$jun_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$jul_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$aug_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$sep_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$oct_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$nov_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$dec_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();

													$total_qty = $jan_qty + $feb_qty + $mar_qty + $apr_qty + $may_qty + $jun_qty + $jul_qty + $aug_qty + $sep_qty + $oct_qty + $nov_qty + $dec_qty;

													if($total_qty > 0){

														$gl_sub_id = $check_code['info']->gl_sub_id;
														$set_item = array(
															'gl_trans_id' => $gl_trans_id,
															'gl_sub_id' => $gl_sub_id,
															'cost_center_id' => $cost_center_id,
															'user_id' => $user_id,
															'gl_trans_item_added' => date_now(),
															'gl_trans_item_status' => 1
														);

														$insert_item = $this->admin->insert_data('gl_transaction_item_tbl', $set_item, TRUE);
														$gl_trans_item_id = $insert_item['id'];

														$date = $year . '-01-01';
														$set_details = array(
															'gl_trans_item_id' => $gl_trans_item_id,
															'opex_amount' => check_num($jan_qty),
															'opex_budget_date' => $date,
															'gl_trans_det_added' => date_now(),
															'gl_trans_det_status' => 1
														);

														$insert_details = $this->admin->insert_data('gl_transaction_details_tbl', $set_details);


														$date = $year . '-02-01';
														$set_details = array(
															'gl_trans_item_id' => $gl_trans_item_id,
															'opex_amount' => check_num($feb_qty),
															'opex_budget_date' => $date,
															'gl_trans_det_added' => date_now(),
															'gl_trans_det_status' => 1
														);
													
														$insert_details = $this->admin->insert_data('gl_transaction_details_tbl', $set_details);
														

														$date = $year . '-03-01';
														$set_details = array(
															'gl_trans_item_id' => $gl_trans_item_id,
															'opex_amount' => check_num($mar_qty),
															'opex_budget_date' => $date,
															'gl_trans_det_added' => date_now(),
															'gl_trans_det_status' => 1
														);
													
														$insert_details = $this->admin->insert_data('gl_transaction_details_tbl', $set_details);


														$date = $year . '-04-01';
														$set_details = array(
															'gl_trans_item_id' => $gl_trans_item_id,
															'opex_amount' => check_num($apr_qty),
															'opex_budget_date' => $date,
															'gl_trans_det_added' => date_now(),
															'gl_trans_det_status' => 1
														);
													
														$insert_details = $this->admin->insert_data('gl_transaction_details_tbl', $set_details);


														$date = $year . '-05-01';
														$set_details = array(
															'gl_trans_item_id' => $gl_trans_item_id,
															'opex_amount' => check_num($may_qty),
															'opex_budget_date' => $date,
															'gl_trans_det_added' => date_now(),
															'gl_trans_det_status' => 1
														);
													
														$insert_details = $this->admin->insert_data('gl_transaction_details_tbl', $set_details);


														$date = $year . '-06-01';
														$set_details = array(
															'gl_trans_item_id' => $gl_trans_item_id,
															'opex_amount' => check_num($jun_qty),
															'opex_budget_date' => $date,
															'gl_trans_det_added' => date_now(),
															'gl_trans_det_status' => 1
														);
													
														$insert_details = $this->admin->insert_data('gl_transaction_details_tbl', $set_details);


														$date = $year . '-07-01';
														$set_details = array(
															'gl_trans_item_id' => $gl_trans_item_id,
															'opex_amount' => check_num($jul_qty),
															'opex_budget_date' => $date,
															'gl_trans_det_added' => date_now(),
															'gl_trans_det_status' => 1
														);
													
														$insert_details = $this->admin->insert_data('gl_transaction_details_tbl', $set_details);


														$date = $year . '-08-01';
														$set_details = array(
															'gl_trans_item_id' => $gl_trans_item_id,
															'opex_amount' => check_num($aug_qty),
															'opex_budget_date' => $date,
															'gl_trans_det_added' => date_now(),
															'gl_trans_det_status' => 1
														);
													
														$insert_details = $this->admin->insert_data('gl_transaction_details_tbl', $set_details);


														$date = $year . '-09-01';
														$set_details = array(
															'gl_trans_item_id' => $gl_trans_item_id,
															'opex_amount' => check_num($sep_qty),
															'opex_budget_date' => $date,
															'gl_trans_det_added' => date_now(),
															'gl_trans_det_status' => 1
														);
													
														$insert_details = $this->admin->insert_data('gl_transaction_details_tbl', $set_details);


														$date = $year . '-10-01';
														$set_details = array(
															'gl_trans_item_id' => $gl_trans_item_id,
															'opex_amount' => check_num($oct_qty),
															'opex_budget_date' => $date,
															'gl_trans_det_added' => date_now(),
															'gl_trans_det_status' => 1
														);
													
														$insert_details = $this->admin->insert_data('gl_transaction_details_tbl', $set_details);


														$date = $year . '-11-01';
														$set_details = array(
															'gl_trans_item_id' => $gl_trans_item_id,
															'opex_amount' => check_num($nov_qty),
															'opex_budget_date' => $date,
															'gl_trans_det_added' => date_now(),
															'gl_trans_det_status' => 1
														);
													
														$insert_details = $this->admin->insert_data('gl_transaction_details_tbl', $set_details);


														$date = $year . '-12-01';
														$set_details = array(
															'gl_trans_item_id' => $gl_trans_item_id,
															'opex_amount' => check_num($dec_qty),
															'opex_budget_date' => $date,
															'gl_trans_det_added' => date_now(),
															'gl_trans_det_status' => 1
														);
													
														$insert_details = $this->admin->insert_data('gl_transaction_details_tbl', $set_details);
													}
												}else{
													$this->db->trans_rollback();
													$msg = '<div class="alert alert-danger">Material code not exist line ' . $b . '!</div>';
													$this->session->set_flashdata('message', $msg);
													redirect('business-center/opex-info/');
												}
											}else{
												$b = $high_row + 1;
											}

										}
									}else{
										$this->db->trans_rollback();
										$msg = '<div class="alert alert-danger">Outlet (' . $outlet_code . ') already exist in column ' . $column_outlet . ' !</div>';
										$this->session->set_flashdata('message', $msg);
										redirect('business-center/opex-info/');
									}
								}else{
									$this->db->trans_rollback();
									$msg = '<div class="alert alert-danger">Outlet not exist column ' . $column_outlet . ' !</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('business-center/opex-info/');
								}
							}else{
								$a = $high + 1;
							}
							
						}
					}else{
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Business Center not exist!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('business-center/opex-info/');
					}

					if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('business-center/opex-info/');
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success">Budget uploaded!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('business-center/opex-info/');
					}
				}else{
					$msg = '<div class="alert alert-danger">Invalid Business center!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('business-center/opex-info/');
				}
			}
		}else{
			redirect('business-center');
		}
	}

	public function view_opex($id){
		$info = $this->_require_login();

		$user_info = $this->get_user_info();
		$cost_center_id = $user_info['cost_center_id'];
		$bc_id = $user_info['bc_id'];
		$module = 'OPEX';

		$data['title'] = 'View OPEX';
		$data['id'] = $id;
		$gl_trans_id = decode($id);
		$join_id = array(
			'gl_group_tbl b' => 'a.gl_group_id = b.gl_group_id AND a.gl_trans_status=1 AND a.gl_trans_id = ' . $gl_trans_id,
			'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id AND c.cost_center_id = ' . $cost_center_id
		);
		$check_id = $this->admin->check_join('gl_transaction_tbl a', $join_id, TRUE);

		if($check_id['result'] == TRUE){
			$data['cost_center'] = encode($check_id['info']->cost_center_id);
			$data['cost_center_code'] = encode($check_id['info']->cost_center_code);
			$data['gl_group'] = $check_id['info']->gl_group_name;

			$year  = $check_id['info']->gl_year;
			$data['budget_status'] = $this->check_module($module, $year, $bc_id);

			$join_det = array(
				'gl_transaction_item_tbl b' => 'a.gl_trans_item_id = b.gl_trans_item_id AND b.gl_trans_item_status = 1 AND a.gl_trans_det_status = 1 AND b.gl_trans_id=' . $gl_trans_id,
				'gl_transaction_tbl c' => 'b.gl_trans_id = c.gl_trans_id',
				'cost_center_tbl d' => 'b.cost_center_id = d.cost_center_id',
				'gl_subgroup_tbl e' => 'b.gl_sub_id=e.gl_sub_id'
				
			);
			$year = $this->_active_year();
			$data['gl_details'] = $this->admin->get_join('gl_transaction_details_tbl a', $join_det, FALSE, FALSE, 'b.gl_trans_item_id', '*, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND YEAR(x.opex_budget_date)=' . $year . ') as total_qty, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=1 AND YEAR(x.opex_budget_date)=' . $year . ') as jan, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(opex_budget_date)=2 AND YEAR(x.opex_budget_date)=' . $year . ') as feb, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=3 AND YEAR(x.opex_budget_date)=' . $year . ') as mar, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=4 AND YEAR(x.opex_budget_date)=' . $year . ') as apr, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=5 AND YEAR(x.opex_budget_date)=' . $year . ') as may, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=6 AND YEAR(x.opex_budget_date)=' . $year . ') as jun, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=7 AND YEAR(x.opex_budget_date)=' . $year . ') as jul, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=8 AND YEAR(x.opex_budget_date)=' . $year . ') as aug, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=9 AND YEAR(x.opex_budget_date)=' . $year . ') as sep, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=10 AND YEAR(x.opex_budget_date)=' . $year . ') as oct, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=11 AND YEAR(x.opex_budget_date)=' . $year . ') as nov, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=12 AND YEAR(x.opex_budget_date)=' . $year . ') as december');
			$data['content'] = $this->load->view('bc/bc_opex_view', $data , TRUE);
			$this->load->view('bc/templates', $data);
		}else{

		}
	}

	public function view_store_expense($id){
		$info = $this->_require_login();
		$user_info = $this->get_user_info();
		$user_cost_center = $user_info['cost_center_id'];
		$data['title'] = 'View OPEX';
		$data['id'] = $id;
		$gl_trans_id = decode($id);
		$join_id = array(
			'gl_group_tbl b' => "a.gl_group_id = b.gl_group_id AND a.gl_trans_status=1 AND b.gl_group_name = 'STORE EXPENSES'  AND a.gl_trans_id = " . $gl_trans_id,
			'gl_transaction_item_tbl c' => 'a.gl_trans_id = c.gl_trans_id AND c.gl_trans_item_status = 1',
			'cost_center_tbl d' => 'c.cost_center_id = d.cost_center_id',
			'cost_center_tbl e' => 'a.cost_center_id = e.cost_center_id AND e.cost_center_id =' . $user_cost_center
		);
		$check_id = $this->admin->check_join('gl_transaction_tbl a', $join_id, TRUE, FALSE, FALSE, '*, e.cost_center_code as parent_code');
		
		if($check_id['result'] == TRUE){
			$year = $check_id['info']->gl_year;
			$data['cost_center'] = encode($check_id['info']->cost_center_id);
			$data['parent'] = encode($check_id['info']->parent_code);
			$data['cost_center_code'] = encode($check_id['info']->cost_center_code);
			$data['bc'] = $check_id['info']->cost_center_desc;
			$data['gl_group'] = $check_id['info']->gl_group_name;
			$join_outlet = array(
				'cost_center_tbl b' => 'a.ifs_code = b.cost_center_code',
				'gl_transaction_item_tbl c' => 'b.cost_center_id = c.cost_center_id AND c.gl_trans_item_status = 1',
				'gl_transaction_tbl d' => 'c.gl_trans_id = d.gl_trans_id AND d.gl_trans_status = 1 AND d.gl_year = ' . $year . ' AND d.gl_trans_id = ' . $gl_trans_id,
			);

			$data['store_expense'] = $this->admin->get_join('outlet_tbl a', $join_outlet, FALSE, FALSE, 'a.outlet_id', '*, c.cost_center_id as cost_center');
			$year = $this->_active_year();
			
			$data['content'] = $this->load->view('bc/bc_store_expense_content', $data , TRUE);
			$this->load->view('bc/templates', $data);
		}else{

		}
	}

	public function cancel_store_expense(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$cost_center_id = decode($this->input->post('id'));
			$gl_trans_id = decode($this->input->post('trans_id'));
			$where = array('cost_center_id' => $cost_center_id);
			$check_id = $this->admin->check_data('cost_center_tbl', $where, TRUE);
			if($check_id['result'] == TRUE){
				$set = array('gl_trans_item_status' => 0);
				$where_store_expense = 'gl_sub_id IN (SELECT b.gl_sub_id FROM gl_group_tbl a, gl_subgroup_tbl b WHERE a.gl_group_id = b.gl_group_id AND a.gl_group_name = "STORE EXPENSES") AND cost_center_id = ' . $cost_center_id . ' AND gl_trans_id ='. $gl_trans_id;
				$remove_item = $this->admin->update_data('gl_transaction_item_tbl', $set, $where_store_expense);

				if($remove_item == TRUE){
					$msg = '<div class="alert alert-success">Store Expense successfully cancelled.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('business-center/view-store-expense/' . encode($gl_trans_id));
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('business-center/view-store-expense/' . encode($gl_trans_id));
			}
		}
	}

	public function view_store_expense_item($id){
		$info = $this->_require_login();

		$user_info = $this->get_user_info();
		$user_cost_center = $user_info['cost_center_id'];

		$data['title'] = 'View Store Expense Item';
		$data['id'] = $id;
		$cost_center_id = decode($id);
		$join_id = array(
			'gl_group_tbl b' => "a.gl_group_id = b.gl_group_id AND a.gl_trans_status=1 AND b.gl_group_name = 'STORE EXPENSES'",
			'gl_transaction_item_tbl c' => 'a.gl_trans_id = c.gl_trans_id AND a.gl_trans_status = 1 AND gl_trans_item_status = 1',
			'cost_center_tbl d' => 'c.cost_center_id = d.cost_center_id AND d.cost_center_id = ' . $cost_center_id,
			'cost_center_tbl e' => 'a.cost_center_id = e.cost_center_id AND e.cost_center_id =' . $user_cost_center
		);
		$check_id = $this->admin->check_join('gl_transaction_tbl a', $join_id, TRUE, FALSE, FALSE, '*, e.cost_center_code as parent');

		if($check_id['result'] == TRUE){
			$data['cost_center'] = encode($check_id['info']->cost_center_id);
			$data['cost_center_code'] = encode($check_id['info']->cost_center_code);
			$data['parent'] = encode($check_id['info']->parent);
			$data['gl_group'] = $check_id['info']->gl_group_name;
			$data['gl_trans_id'] = encode($check_id['info']->gl_trans_id);
			$join_det = array(
				'gl_transaction_item_tbl b' => 'a.gl_trans_item_id = b.gl_trans_item_id AND b.gl_trans_item_status = 1 AND a.gl_trans_det_status = 1',
				'gl_transaction_tbl c' => 'b.gl_trans_id = c.gl_trans_id AND c.gl_trans_status = 1',
				'cost_center_tbl d' => 'b.cost_center_id = d.cost_center_id AND d.cost_center_id = ' . $cost_center_id,
				'gl_subgroup_tbl e' => 'b.gl_sub_id=e.gl_sub_id',
				'gl_group_tbl f' => "e.gl_group_id = f.gl_group_id AND f.gl_group_name = 'STORE EXPENSES'",
			);

			$year = $check_id['info']->gl_year;
			$data['year'] = encode($year);
			$data['gl_details'] = $this->admin->get_join('gl_transaction_details_tbl a', $join_det, FALSE, FALSE, 'b.gl_trans_item_id', '*, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND YEAR(x.opex_budget_date)=' . $year . ') as total_qty, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=1 AND YEAR(x.opex_budget_date)=' . $year . ') as jan, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(opex_budget_date)=2 AND YEAR(x.opex_budget_date)=' . $year . ') as feb, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=3 AND YEAR(x.opex_budget_date)=' . $year . ') as mar, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=4 AND YEAR(x.opex_budget_date)=' . $year . ') as apr, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=5 AND YEAR(x.opex_budget_date)=' . $year . ') as may, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=6 AND YEAR(x.opex_budget_date)=' . $year . ') as jun, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=7 AND YEAR(x.opex_budget_date)=' . $year . ') as jul, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=8 AND YEAR(x.opex_budget_date)=' . $year . ') as aug, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=9 AND YEAR(x.opex_budget_date)=' . $year . ') as sep, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=10 AND YEAR(x.opex_budget_date)=' . $year . ') as oct, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=11 AND YEAR(x.opex_budget_date)=' . $year . ') as nov, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=12 AND YEAR(x.opex_budget_date)=' . $year . ') as december');
			$data['content'] = $this->load->view('bc/bc_store_expense_item', $data , TRUE);
			$this->load->view('bc/templates', $data);
		}else{

		}
	}

	public function update_store_expense_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = $this->input->post('id');
			$opex = clean_data($this->input->post('opex'));
			$count = 0;
			$this->db->trans_start();
			foreach($id as $row_id){
				$item_id = decode($row_id);
				$check_item = $this->admin->check_data('gl_transaction_item_tbl', array('gl_trans_item_id' => $item_id), TRUE);
				if($check_item['result'] == TRUE){
					$cost_center_db = $check_item['info']->cost_center_id;
					$amount = $opex['jan'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 1, 'gl_trans_det_status' => 1));
					
					$amount = $opex['feb'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 2, 'gl_trans_det_status' => 1));


					$amount = $opex['mar'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 3, 'gl_trans_det_status' => 1));


					$amount = $opex['apr'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 4, 'gl_trans_det_status' => 1));

					$amount = $opex['may'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 5, 'gl_trans_det_status' => 1));
					
					$amount = $opex['jun'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 6, 'gl_trans_det_status' => 1));

					$amount = $opex['jul'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 7, 'gl_trans_det_status' => 1));

					$amount = $opex['aug'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 8, 'gl_trans_det_status' => 1));

					$amount = $opex['sep'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 9, 'gl_trans_det_status' => 1));
					
					$amount = $opex['oct'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 10, 'gl_trans_det_status' => 1));

					$amount = $opex['nov'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 11, 'gl_trans_det_status' => 1));

					$amount = $opex['dec'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 12, 'gl_trans_det_status' => 1));
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('business-center/view-store-expense-item/' . encode($cost_center_db));
				}

				$count++;
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success">CAPEX successfully updated.</strong></div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('business-center/view-store-expense-item/' . encode($cost_center_db));
		}
	}

	public function remove_store_expense_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('gl_trans_item_id' => $id);
			$check_id = $this->admin->check_data('gl_transaction_item_tbl', $where, TRUE);
			if($check_id['result'] == TRUE){
				$cost_center_id = $check_id['info']->cost_center_id;
				$set = array('gl_trans_item_status' => 0);
				$remove_item = $this->admin->update_data('gl_transaction_item_tbl', $set, $where);

				if($remove_item == TRUE){
					$msg = '<div class="alert alert-success">Item successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('business-center/view-store-expense-item/' . encode($cost_center_id));
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('business-center/opex/');
			}
		}
	}

	public function add_store_expense_item($id, $budget_year){
		$info = $this->_require_login();
		$data['title'] = 'Add Store Expense Item';

		$user_info = $this->get_user_info();
		$user_cost_center = $user_info['cost_center_id'];

		$data['id'] = $id;
		$cost_center_id = decode($id);
		$year = decode($budget_year);
		$join_id = array(
			'gl_transaction_item_tbl b' => 'a.gl_trans_id = b.gl_trans_id AND a.gl_trans_status=1 AND b.gl_trans_item_status = 1 AND a.gl_year = ' . $year,
			'gl_group_tbl c' => 'a.gl_group_id = c.gl_group_id AND c.gl_group_name=\'STORE EXPENSES\'',
			'cost_center_tbl d' => 'b.cost_center_id = d.cost_center_id AND d.cost_center_id = ' . $cost_center_id . ' AND d.parent_id = ' . $user_cost_center
		);
		$check_id = $this->admin->check_join('gl_transaction_tbl a', $join_id, TRUE);

		if($check_id['result'] == TRUE){
			/*$cost_center_id = $check_id['info']->cost_center_id;*/
			$cost_center_code = $check_id['info']->cost_center_code;
			$gl_name = $check_id['info']->gl_group_name;
			$gl_group_id = $check_id['info']->gl_group_id;

			$data['gl_group'] = $check_id['info']->gl_group_name;
			$data['cost_center'] = encode($cost_center_id);
			$data['cost_center_code'] = encode($cost_center_code);
			$data['cost_center_desc'] = $check_id['info']->cost_center_desc;
			$data['gl_trans_id'] = encode($check_id['info']->gl_trans_id);

			$join_gl = array(
				'gl_group_tbl b' => 'a.gl_group_id = b.gl_group_id AND a.gl_sub_status = 1 AND b.gl_group_name=\'STORE EXPENSES\''
			);

			$where = 'a.gl_sub_id NOT IN (SELECT y.gl_sub_id FROM gl_transaction_tbl x, gl_transaction_item_tbl y, cost_center_tbl z WHERE x.gl_trans_id = y.gl_trans_id AND y.cost_center_id = z.cost_center_id AND x.gl_trans_status = 1 AND y.gl_trans_item_status = 1 AND x.gl_year = ' . $year . ' AND z.cost_center_id = ' . $cost_center_id . ')';
			$data['gl'] = $this->admin->get_join('gl_subgroup_tbl a' , $join_gl, FALSE, FALSE, FALSE, FALSE, $where);
			$data['content'] = $this->load->view('bc/bc_add_store_expense_item', $data , TRUE);
			$this->load->view('bc/templates', $data);
		}else{

		}
	}

	public function add_trans_store_expense(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		$user_info = $this->get_user_info();
		$user_cost_center = $user_info['cost_center_id'];

		$year = $this->_active_year();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_trans_id = clean_data(decode($this->input->post('gl_trans_id')));
			$id = clean_data($this->input->post('id'));
			$cost_center_id = decode($this->input->post('cost_center'));
			if(!empty($gl_trans_id)){
				$join_trans = array(
					'gl_group_tbl b' => 'a.gl_group_id = b.gl_group_id AND a.gl_trans_status = 1 AND a.gl_trans_id =' . $gl_trans_id . ' AND a.cost_center_id = ' . $user_cost_center
				);
				$check_trans = $this->admin->check_join('gl_transaction_tbl a', $join_trans, TRUE);
				if($check_trans['result'] == TRUE){
					$gl_name = $check_trans['info']->gl_group_name;
					
					$this->db->trans_start();
					$id = clean_data($this->input->post('id'));
					$opex = clean_data($this->input->post('opex'));
					$count = 0;
					foreach($id as $row){

						$gl_sub_id = decode($row);
						$check_gl_sub_id = $this->admin->check_data('gl_subgroup_tbl', array('gl_sub_id' => $gl_sub_id, 'gl_sub_status' => 1), TRUE);
						//print_r($opex);
						if($check_gl_sub_id['result'] == TRUE){
							$amount_jan = $opex['jan'][$count];
							$amount_feb = $opex['feb'][$count];
							$amount_mar = $opex['mar'][$count];
							$amount_apr = $opex['apr'][$count];
							$amount_may = $opex['may'][$count];
							$amount_jun = $opex['jun'][$count];
							$amount_jul = $opex['jul'][$count];
							$amount_aug = $opex['aug'][$count];
							$amount_sep = $opex['sep'][$count];
							$amount_oct = $opex['oct'][$count];
							$amount_nov = $opex['nov'][$count];
							$amount_dec = $opex['dec'][$count];

							$total_amount = $amount_jan + $amount_feb + $amount_mar + $amount_apr + $amount_may + $amount_jun + $amount_jul + $amount_aug + $amount_sep + $amount_oct + $amount_nov + $amount_dec;
							
							if($total_amount > 0){
								$set_item = array(
									'gl_trans_id' => $gl_trans_id,
									'gl_sub_id' => $gl_sub_id,
									'cost_center_id' => $cost_center_id,
									'user_id' => $user_id,
									'gl_trans_item_added' => date_now(),
									'gl_trans_item_status' =>	1
								);
								$insert_item = $this->admin->insert_data('gl_transaction_item_tbl', $set_item, TRUE);
								if($insert_item['result'] == TRUE){
									$gl_trans_item_id = $insert_item['id'];
									$date = $year . '-' . '01-01';
									$set_gl_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_jan,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_trans);

									
									$date = $year . '-' . '02-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_feb,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									$date = $year . '-' . '03-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_mar,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									
									$date = $year . '-' . '04-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_apr,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);
									
									
									$date = $year . '-' . '05-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_may,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									
									$date = $year . '-' . '06-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_jun,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									$date = $year . '-' . '07-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_jul,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									
									$date = $year . '-' . '08-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_aug,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									
									$date = $year . '-' . '09-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_sep,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									
									$date = $year . '-' . '10-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_oct,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									
									$date = $year . '-' . '11-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_nov,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

									
									$date = $year . '-' . '12-01';
									$set_gl_det_trans = array(
										'gl_trans_item_id' => $gl_trans_item_id,
										'opex_amount' => $amount_dec,
										'opex_budget_date' => $date,
										'gl_trans_det_added' => date_now(),
										'gl_trans_det_status' => 1
									);
									$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);
									$count++;
								}else{
									$this->db->trans_rollback();
									$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('admin/view-store-expense-item/' . encode($cost_center));
								}
							}else{
								echo 'Error in numbers';
							}
						}else{
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect('admin/view-store-expense-item/' . encode($cost_center));
						} 
						$count++;
					}
					

					if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success">OPEX successfully added.</strong></div>';
					}

					$this->session->set_flashdata('message', $msg);
					redirect('business-center/view-store-expense-item/' . encode($cost_center_id));
					
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';	
					$this->session->set_flashdata('message', $msg);
					redirect('business-center/view-store-expense-item/' . encode($cost_center_id));
				}
			}else{
				echo 'Error please try again!';
			}
		}
	}

	public function sw_view($id){
		$info = $this->_require_login();

		$check_budget = $this->admin->check_data('close_budget_tbl', array('close_status' => 1));
		
		if($check_budget == TRUE){
			$data['budget_status'] = 0;
		}else{
			$data['budget_status'] = 1;
		}

		$user_info = $this->get_user_info();
		$cost_center_id = $user_info['cost_center_id'];
		$data['title'] = 'View (Salaries & Wages)';
		$data['id'] = $id;
		$trans_id = decode($id);
		$join_id = array(
			'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.emp_salary_trans_status = 1 AND a.emp_salary_trans_id = ' . $trans_id . ' AND b.cost_center_id = ' . $cost_center_id
		);
		$check_id = $this->admin->check_join('employee_salary_trans_tbl a', $join_id, TRUE);

		if($check_id['result'] == TRUE){
			$data['cost_center'] = encode($check_id['info']->cost_center_id);
			$data['cost_center_code'] = encode($check_id['info']->cost_center_code);
			$data['cost_desc'] = encode($check_id['info']->cost_center_desc);
			$data['gl_group'] = 'SALARIES & WAGES';
			$join_det = array(
				'employee_salary_item_tbl b' => 'a.emp_salary_item_id = b.emp_salary_item_id AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_status = 1',
				'employee_salary_trans_tbl c' => 'b.emp_salary_trans_id = c.emp_salary_trans_id AND c.emp_salary_trans_status = 1 AND c.emp_salary_trans_id = ' . $trans_id,
				'cost_center_tbl d' => 'b.cost_center_id = d.cost_center_id',
				'employee_tbl e' => 'b.emp_id = e.emp_id'
			);
			$year = $this->_active_year();
			$data['sw_details'] = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_det, FALSE, FALSE, 'b.emp_salary_item_id', '*, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND YEAR(x.emp_salary_date)=' . $year . ') as total_qty, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=1 AND YEAR(x.emp_salary_date)=' . $year . ') as jan, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(emp_salary_date)=2 AND YEAR(x.emp_salary_date)=' . $year . ') as feb, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=3 AND YEAR(x.emp_salary_date)=' . $year . ') as mar, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=4 AND YEAR(x.emp_salary_date)=' . $year . ') as apr, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=5 AND YEAR(x.emp_salary_date)=' . $year . ') as may, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=6 AND YEAR(x.emp_salary_date)=' . $year . ') as jun, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=7 AND YEAR(x.emp_salary_date)=' . $year . ') as jul, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=8 AND YEAR(x.emp_salary_date)=' . $year . ') as aug, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=9 AND YEAR(x.emp_salary_date)=' . $year . ') as sep, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=10 AND YEAR(x.emp_salary_date)=' . $year . ') as oct, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=11 AND YEAR(x.emp_salary_date)=' . $year . ') as nov, (SELECT SUM(x.emp_salary_budget) FROM employee_salary_trans_dtl_tbl x WHERE b.emp_salary_item_id=x.emp_salary_item_id AND MONTH(x.emp_salary_date)=12 AND YEAR(x.emp_salary_date)=' . $year . ') as december');
			$data['content'] = $this->load->view('bc/bc_sw_content', $data , TRUE);
			$this->load->view('bc/templates', $data);
		}else{

		}
	}

	public function remove_sw_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('emp_salary_item_id' => $id);
			$check_id = $this->admin->check_data('employee_salary_item_tbl', $where, TRUE);
			if($check_id['result'] == TRUE){
				$emp_salary_trans_id = $check_id['info']->emp_salary_trans_id;
				$set = array('emp_salary_item_status' => 0);
				$remove_item = $this->admin->update_data('employee_salary_item_tbl', $set, $where);

				if($remove_item == TRUE){
					$msg = '<div class="alert alert-success">Item successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('business-center/sw-view/' . encode($emp_salary_trans_id));
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('business-center/opex/');
			}
		}
	}

	public function remove_opex_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('gl_trans_item_id' => $id);
			$check_id = $this->admin->check_data('gl_transaction_item_tbl', $where, TRUE);
			if($check_id['result'] == TRUE){
				$gl_trans_id = $check_id['info']->gl_trans_id;
				$set = array('gl_trans_item_status' => 0);
				$remove_item = $this->admin->update_data('gl_transaction_item_tbl', $set, $where);

				if($remove_item == TRUE){
					$msg = '<div class="alert alert-success">Item successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('business-center/view-opex/' . encode($gl_trans_id));
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('business-center/capex/');
			}
		}
	}

	public function get_sw_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_name = 'SALARIES & WAGES';
			$emp_salary_item_id =clean_data(decode($this->input->post('id')));
			$join_sw = array(
				'employee_salary_trans_tbl b' => 'a.emp_salary_trans_id = b.emp_salary_trans_id AND b.emp_salary_trans_status = 1 AND a.emp_salary_item_status = 1 AND a.emp_salary_item_id = ' . $emp_salary_item_id,
				'employee_tbl c' => 'a.emp_id = c.emp_id'
			);
			$check_sw = $this->admin->check_join('employee_salary_item_tbl a', $join_sw, TRUE);
			if($check_sw['result'] == TRUE){
				$emp_name = $check_sw['info']->emp_lname . ', ' . $check_sw['info']->emp_fname;
				$join_get_item = array(
					'employee_salary_item_tbl b' => 'b.emp_salary_item_id = a.emp_salary_item_id AND b.emp_salary_item_status = 1 AND a.emp_salary_trans_dtl_status = 1 AND b.emp_salary_item_id = ' . $emp_salary_item_id,
				);
				$get_item = $this->admin->get_join('employee_salary_trans_dtl_tbl a', $join_get_item, FALSE, 'a.emp_salary_date ASC', FALSE, 'a.emp_salary_budget, MONTHNAME(a.emp_salary_date) as sw_budget_date');

				$month = array(
					'January' => 0,
					'February' => 0,
					'March' => 0,
					'April' => 0,
					'May' => 0, 
					'June' => 0,
					'July' => 0,
					'August' => 0,
					'September' => 0,
					'October' => 0,
					'November' => 0,
					'December' => 0
				);

				$total_qty = 0;
				foreach($get_item as $row_item){
					$month[$row_item->sw_budget_date] += $row_item->emp_salary_budget;
					$total_qty += $row_item->emp_salary_budget;
				}

				$details = array(
					'name' => $emp_name,
					'gl_group' => $gl_name,
					'total' => $total_qty,
					'month' => $month
				);

				$data['result'] = 1;
				$data['info'] = $details;
			}else{
				echo $this->db->last_query();
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_sw_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = $this->input->post('id');
			$opex = clean_data($this->input->post('opex'));
			$count = 0;
			$this->db->trans_start();
			foreach($id as $row_id){
				$item_id = decode($row_id);
				$check_item = $this->admin->check_data('employee_salary_item_tbl', array('emp_salary_item_id' => $item_id, 'emp_salary_item_status' => 1), TRUE);

				if($check_item['result'] == TRUE){
					$emp_salary_trans_id = $check_item['info']->emp_salary_trans_id;

					$amount = $opex['jan'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 1, 'emp_salary_trans_dtl_status' => 1));
					
					$amount = $opex['feb'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 2, 'emp_salary_trans_dtl_status' => 1));


					$amount = $opex['mar'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 3, 'emp_salary_trans_dtl_status' => 1));


					$amount = $opex['apr'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 4, 'emp_salary_trans_dtl_status' => 1));

					$amount = $opex['may'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 5, 'emp_salary_trans_dtl_status' => 1));
					
					$amount = $opex['jun'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id,'MONTH(emp_salary_date)' => 6, 'emp_salary_trans_dtl_status' => 1));

					$amount = $opex['jul'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 7, 'emp_salary_trans_dtl_status' => 1));

					$amount = $opex['aug'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 8, 'emp_salary_trans_dtl_status' => 1));

					$amount = $opex['sep'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 9, 'emp_salary_trans_dtl_status' => 1));
					
					$amount = $opex['oct'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 10, 'emp_salary_trans_dtl_status' => 1));

					$amount = $opex['nov'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 11, 'emp_salary_trans_dtl_status' => 1));

					$amount = $opex['dec'][$count];
					$update_item = $this->admin->update_data('employee_salary_trans_dtl_tbl', array('emp_salary_budget' => $amount), array('emp_salary_item_id' => $item_id, 'MONTH(emp_salary_date)' => 12, 'emp_salary_trans_dtl_status' => 1));
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('business-center/sw-view/' . encode($emp_salary_trans_id));
				}

				$count++;
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success">CAPEX successfully updated.</strong></div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('business-center/sw-view/' . encode($emp_salary_trans_id));
		}
	}

	public function add_sw_item($id){
		$info = $this->_require_login();

		$check_budget = $this->admin->check_data('close_budget_tbl', array('close_status' => 1));
		
		if($check_budget == FALSE){

			$user_info = $this->get_user_info();
			$cost_center_id = $user_info['cost_center_id'];
			$data['title'] = 'Add Salaries & Wages';

			$data['id'] = $id;
			$emp_salary_trans_id = decode($id);
			$join_id = array(
				'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.emp_salary_trans_id = ' . $emp_salary_trans_id . ' AND b.cost_center_id = ' . $cost_center_id
			);

			$check_id = $this->admin->check_join('employee_salary_trans_tbl a', $join_id, TRUE);
			if($check_id['result'] == TRUE){
				$cost_center_id = $check_id['info']->cost_center_id;
				$cost_center_code = $check_id['info']->cost_center_code;
				$gl_name = 'SALARIES & WAGES';

				$data['cost_center'] = encode($cost_center_id);
				$data['cost_center_code'] = encode($cost_center_code);
				$data['gl_group'] = $gl_name;
				
				$data['gl'] = $this->_salary_data($cost_center_id, TRUE);
				$data['content'] = $this->load->view('bc/bc_sw_add_item', $data , TRUE);
				$this->load->view('bc/templates', $data);
			}else{

			}

		}else{
			redirect('business-center/opex-info/');
		}
	}

	public function add_trans_sw_item(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$year = $this->_active_year();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = clean_data($this->input->post('id'));
			$emp_salary_trans_id = clean_data(decode($this->input->post('emp_salary_trans_id')));
			if(!empty($emp_salary_trans_id) && !empty($id)){
				$check_id = $this->admin->check_data('employee_salary_trans_tbl', array('emp_salary_trans_id' => $emp_salary_trans_id), TRUE);
				if($check_id['result'] == TRUE){
					$gl_name = 'SALARIES & WAGES';
					$this->db->trans_start();
					$salary = clean_data($this->input->post('salary'));
					$count = 0;
					foreach($id as $emp){
						$emp_id = decode($emp);
						$check_emp = $this->admin->check_data('employee_tbl', array('emp_id' => $emp_id, 'emp_status' => 1), TRUE);

						if($check_emp['result'] == TRUE){
							$emp_cost_center = $check_emp['info']->cost_center_id;
							$rank_id = $check_emp['info']->rank_id;

							$set_item = array(
								'emp_salary_trans_id' => $emp_salary_trans_id,
								'emp_id' => $emp_id,
								'cost_center_id' => $emp_cost_center,
								'rank_id' => $rank_id,
								'emp_salary_item_added' => date_now(),
								'emp_salary_item_status' => 1
							);

							$insert_item = $this->admin->insert_data('employee_salary_item_tbl', $set_item, TRUE);
							$emp_salary_item_id = $insert_item['id'];


							$date = $year . '-01-01';
							$amount_jan = $salary['jan'][$count];
							$set_emp_jan = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_jan,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jan);

							$date = $year . '-02-01';
							$amount_feb = $salary['feb'][$count];
							$set_emp_feb = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_feb,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_feb);

							$date = $year . '-03-01';
							$amount_mar = $salary['mar'][$count];
							$set_emp_mar = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_mar,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_mar);

							$date = $year . '-04-01';
							$amount_apr = $salary['apr'][$count];
							$set_emp_apr = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_apr,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_apr);

							$date = $year . '-05-01';
							$amount_may = $salary['may'][$count];
							$set_emp_may = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_may,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_may);

							$date = $year . '-06-01';
							$amount_jun = $salary['jun'][$count];
							$set_emp_jun = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_jun,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jun);

							$date = $year . '-07-01';
							$amount_jul = $salary['jul'][$count];
							$set_emp_jul = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_jul,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jul);

							$date = $year . '-08-01';
							$amount_aug = $salary['aug'][$count];
							$set_emp_aug = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_aug,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_aug);

							$date = $year . '-09-01';
							$amount_sep = $salary['sep'][$count];
							$set_emp_sep = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_sep,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_sep);

							$date = $year . '-10-01';
							$amount_oct = $salary['oct'][$count];
							$set_emp_oct = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_oct,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_oct);

							$date = $year . '-11-01';
							$amount_nov = $salary['nov'][$count];
							$set_emp_nov = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_nov,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_nov);

							$date = $year . '-12-01';
							$amount_dec = $salary['dec'][$count];
							$set_emp_dec = array(
								'emp_salary_item_id' => $emp_salary_item_id,
								'emp_salary_budget' => $amount_dec,
								'emp_salary_date' => $date,
								'emp_salary_trans_added' => date_now(),
								'emp_salary_trans_dtl_status' => 1
							);
							$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_dec);
						}else{
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect('business-center/sw-view/' . encode($emp_salary_trans_id));
						}

						$count++;
					}

					if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success">OPEX successfully added.</strong></div>';
					}
					
					$this->session->set_flashdata('message', $msg);
					redirect('business-center/sw-view/' . encode($emp_salary_trans_id));
				}else{

				}
			}else{
				echo 'Error please try again!';
			}
		}
	}

	public function add_opex_item($id){
		$info = $this->_require_login();

		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		$cost_center_code = $user_info['cost_center_code'];
		$module = 'OPEX';

		$data['title'] = 'Add OPEX Item';

		$data['id'] = $id;
		$gl_trans_id = decode($id);
		$user_info = $this->get_user_info();

		$cost_center_id = $user_info['cost_center_id'];
		$join_id = array(
			'gl_group_tbl b' => 'a.gl_group_id = b.gl_group_id AND a.gl_trans_status=1 AND a.gl_trans_id = ' . $gl_trans_id,
			'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id AND c.cost_center_id = ' . $cost_center_id
		);
		$check_id = $this->admin->check_join('gl_transaction_tbl a', $join_id, TRUE);

		if($check_id['result'] == TRUE){
			$cost_center_id = $check_id['info']->cost_center_id;
			$cost_center_code = $check_id['info']->cost_center_code;
			$gl_name = $check_id['info']->gl_group_name;
			$gl_group_id = $check_id['info']->gl_group_id;

			$year = $check_id['info']->gl_year;
			$budget_status = $this->check_module($module, $year, $bc_id);
			if($budget_status == 1){
				$data['gl_group'] = $check_id['info']->gl_group_name;
				$data['cost_center'] = encode($cost_center_id);
				$data['cost_center_code'] = encode($cost_center_code);
				$data['gl_group'] = $gl_name;
				
				$data['gl'] = $this->_gl_data($cost_center_id, $gl_group_id, $gl_name);	
				$data['content'] = $this->load->view('bc/bc_opex_add_item', $data , TRUE);
				$this->load->view('bc/templates', $data);
			}else{
				redirect('business-center/opex-info');
			}
		}else{
			redirect('business-center/opex-info');
		}
	}

	public function add_trans_opex_item(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$year = $this->_active_year();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_trans_id = clean_data(decode($this->input->post('gl_trans_id')));
			$id = clean_data($this->input->post('id'));
			if(!empty($gl_trans_id)){
				$join_trans = array(
					'gl_group_tbl b' => 'a.gl_group_id = b.gl_group_id AND a.gl_trans_status = 1 AND a.gl_trans_id =' . $gl_trans_id
				);
				$check_trans = $this->admin->check_join('gl_transaction_tbl a', $join_trans, TRUE);
				if($check_trans['result'] == TRUE){
					$gl_name = $check_trans['info']->gl_group_name;
					
					$this->db->trans_start();
					if($gl_name == 'SALARIES & WAGES'){
						$salary = clean_data($this->input->post('salary'));

						$set_salary = array(
							'cost_center_id' => $cost_center_id,
							'user_id' => $user_id,
							'trans_type_id' => 1,
							'emp_salary_trans_added' => date_now(),
							'emp_salary_trans_status' => 1
						);
						
						$insert_emp = $this->admin->insert_data('employee_salary_trans_tbl', $set_salary, TRUE);
						if($insert_emp['result'] == TRUE){
							$emp_salary_trans_id = $insert_emp['id'];
							$count = 0;
							foreach($id as $emp){
								$emp_id = decode($emp);
								$check_emp = $this->admin->check_data('employee_tbl', array('emp_id' => $emp_id, 'emp_status' => 1), TRUE);

								if($check_emp['result'] == TRUE){

									$emp_cost_center = $check_emp['info']->cost_center_id;
									$rank_id = $check_emp['info']->rank_id;

									$set_item = array(
										'emp_salary_trans_id' => $emp_salary_trans_id,
										'emp_id' => $emp_id,
										'cost_center_id' => $emp_cost_center,
										'rank_id' => $rank_id,
										'emp_salary_item_added' => date_now(),
										'emp_salary_item_status' => 1
									);

									$insert_item = $this->admin->insert_data('employee_salary_item_tbl', $set_item, TRUE);
									$emp_salary_item_id = $insert_item['id'];


									$date = $year . '-01-01';
									$amount_jan = $salary['jan'][$count];
									$set_emp_jan = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_jan,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jan);

									$date = $year . '-02-01';
									$amount_feb = $salary['feb'][$count];
									$set_emp_feb = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_feb,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_feb);

									$date = $year . '-03-01';
									$amount_mar = $salary['mar'][$count];
									$set_emp_mar = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_mar,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_mar);

									$date = $year . '-04-01';
									$amount_apr = $salary['apr'][$count];
									$set_emp_apr = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_apr,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_apr);

									$date = $year . '-05-01';
									$amount_may = $salary['may'][$count];
									$set_emp_may = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_may,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_may);

									$date = $year . '-06-01';
									$amount_jun = $salary['jun'][$count];
									$set_emp_jun = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_jun,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jun);

									$date = $year . '-07-01';
									$amount_jul = $salary['jul'][$count];
									$set_emp_jul = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_jul,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_jul);

									$date = $year . '-08-01';
									$amount_aug = $salary['aug'][$count];
									$set_emp_aug = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_aug,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_aug);

									$date = $year . '-09-01';
									$amount_sep = $salary['sep'][$count];
									$set_emp_sep = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_sep,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_sep);

									$date = $year . '-10-01';
									$amount_oct = $salary['oct'][$count];
									$set_emp_oct = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_oct,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_oct);

									$date = $year . '-11-01';
									$amount_nov = $salary['nov'][$count];
									$set_emp_nov = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_nov,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_nov);

									$date = $year . '-12-01';
									$amount_dec = $salary['dec'][$count];
									$set_emp_dec = array(
										'emp_salary_item_id' => $emp_salary_item_id,
										'emp_salary_budget' => $amount_dec,
										'emp_salary_date' => $date,
										'emp_salary_trans_added' => date_now(),
										'emp_salary_trans_dtl_status' => 1
									);
									$insert_emp_dtl = $this->admin->insert_data('employee_salary_trans_dtl_tbl', $set_emp_dec);
								}else{
									$this->db->trans_rollback();
									$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('business-center/transac-opex/' . encode($cost_center));
								}

								$count++;
							}
						}else{
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect('business-center/transac-opex/' . encode($cost_center));
						}

						if($this->db->trans_status() === FALSE){
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}else{
							$this->db->trans_commit();
							$msg = '<div class="alert alert-success">OPEX successfully added.</strong></div>';
						}
					}else{
						$gl_cost_center = clean_data($this->input->post('cost_center'));
						$id = clean_data($this->input->post('id'));
						$opex = clean_data($this->input->post('opex'));
						$count = 0;
						foreach($id as $row){
							$gl_sub_id = decode($row);
							$check_gl_sub_id = $this->admin->check_data('gl_subgroup_tbl', array('gl_sub_id' => $gl_sub_id, 'gl_sub_status' => 1), TRUE);
							
							if($check_gl_sub_id['result'] == TRUE){
								$gl_cost_center_id = decode($gl_cost_center[$count]);

								$amount_jan = $opex['jan'][$count];
								$amount_feb = $opex['feb'][$count];
								$amount_mar = $opex['mar'][$count];
								$amount_apr = $opex['apr'][$count];
								$amount_may = $opex['may'][$count];
								$amount_jun = $opex['jun'][$count];
								$amount_jul = $opex['jul'][$count];
								$amount_aug = $opex['aug'][$count];
								$amount_sep = $opex['sep'][$count];
								$amount_oct = $opex['oct'][$count];
								$amount_nov = $opex['nov'][$count];
								$amount_dec = $opex['dec'][$count];

								$total_amount = $amount_jan + $amount_feb + $amount_mar + $amount_apr + $amount_may + $amount_jun + $amount_jul + $amount_aug + $amount_sep + $amount_oct + $amount_nov + $amount_dec;

								if($total_amount > 0){
									echo 'wewe';
									echo '<br />';
									$set_item = array(
										'gl_trans_id' => $gl_trans_id,
										'gl_sub_id' => $gl_sub_id,
										'cost_center_id' => $gl_cost_center_id,
										'user_id' => $user_id,
										'gl_trans_item_added' => date_now(),
										'gl_trans_item_status' =>	1
									);
									$insert_item = $this->admin->insert_data('gl_transaction_item_tbl', $set_item, TRUE);
									if($insert_item['result'] == TRUE){
										echo 'ok';
										echo ' ID: ' .$gl_trans_item_id = $insert_item['id'];
										echo '<br />';
										$date = $year . '-' . '01-01';
										$set_gl_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_jan,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_trans);

										
										$date = $year . '-' . '02-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_feb,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										$date = $year . '-' . '03-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_mar,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '04-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_apr,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);
										
										
										$date = $year . '-' . '05-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_may,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '06-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_jun,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										$date = $year . '-' . '07-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_jul,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '08-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_aug,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '09-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_sep,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '10-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_oct,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '11-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_nov,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);

										
										$date = $year . '-' . '12-01';
										$set_gl_det_trans = array(
											'gl_trans_item_id' => $gl_trans_item_id,
											'opex_amount' => $amount_dec,
											'opex_budget_date' => $date,
											'gl_trans_det_added' => date_now(),
											'gl_trans_det_status' => 1
										);
										$this->admin->insert_data('gl_transaction_details_tbl', $set_gl_det_trans);
										$count++;
									}else{
										$this->db->trans_rollback();
										$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
										$this->session->set_flashdata('message', $msg);
										redirect('business-center/transac-opex/' . encode($cost_center));	
									}
								}
							}else{
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
								$this->session->set_flashdata('message', $msg);
								redirect('business-center/transac-opex/' . encode($cost_center));
							} 
						}
						

						if($this->db->trans_status() === FALSE){
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}else{
							$this->db->trans_commit();
							$msg = '<div class="alert alert-success">OPEX successfully added.</strong></div>';
						}
					}

					$this->session->set_flashdata('message', $msg);
					redirect('business-center/view-opex/' . encode($gl_trans_id));
					
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';	
					$this->session->set_flashdata('message', $msg);
					redirect('business-center/view-opex/' . encode($gl_trans_id));
				}
			}else{
				echo 'Error please try again!';
			}
		}
	}
	public function get_opex_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$gl_item_id =clean_data(decode($this->input->post('id')));
			$cost_center =clean_data(decode($this->input->post('cost_center')));
			$join_gl = array(
				'gl_transaction_item_tbl b' => 'a.gl_sub_id = b.gl_sub_id AND b.gl_trans_item_status = 1 AND b.gl_trans_item_id = ' . $gl_item_id,
				'gl_group_tbl c' => 'a.gl_group_id = c.gl_group_id AND a.gl_sub_status = 1',
			);
			$check_gl = $this->admin->check_join('gl_subgroup_tbl a', $join_gl, TRUE);
			if($check_gl['result'] == TRUE){
				$gl_name = $check_gl['info']->gl_group_name;
				$selected_cost_center = $check_gl['info']->cost_center_id;
				$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center, 'cost_center_status' => 1), TRUE);
				
				if($check_cost_center['result'] == TRUE){
					$cost_center_id = $check_cost_center['info']->cost_center_id;

					if($gl_name == 'STORE EXPENSES'){
						$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center, 'cost_center_type_id' => 8 , 'cost_center_status' => 1));
					}else{
						$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center, 'cost_center_type_id !=' => 8, 'cost_center_status' => 1));
					}

					$cost_center_data = '';
					foreach($get_cost_center as $row){
						$selected = '';
						if($selected_cost_center == $row->cost_center_id){
							$selected = ' selected';
						}
						$cost_center_data .= '<option value="' . encode($row->cost_center_id) . '"' . $selected . '>' . $row->cost_center_desc . '</option>';
					}
					
					$join_get_item = array(
						'gl_transaction_item_tbl b' => 'a.gl_trans_item_id = b.gl_trans_item_id AND b.gl_trans_item_status = 1 AND a.gl_trans_det_status = 1 AND b.gl_trans_item_id = ' . $gl_item_id,
					);
					$get_item = $this->admin->get_join('gl_transaction_details_tbl a', $join_get_item, FALSE, 'a.opex_budget_date ASC', FALSE, 'a.opex_amount, MONTHNAME(a.opex_budget_date) as opex_budget_date');

					$month = array(
						'January' => 0,
						'February' => 0,
						'March' => 0,
						'April' => 0,
						'May' => 0, 
						'June' => 0,
						'July' => 0,
						'August' => 0,
						'September' => 0,
						'October' => 0,
						'November' => 0,
						'December' => 0
					);

					$total_qty = 0;
					foreach($get_item as $row_item){
						$month[$row_item->opex_budget_date] += $row_item->opex_amount;
						$total_qty += $row_item->opex_amount;
					}


					$details = array(
						'gl_group' => $gl_name,
						'total' => $total_qty,
						'cost_center' => $cost_center_data,
						'month' => $month
					);

					$data['result'] = 1;
					$data['info'] = $details;					
				}else{
					$data[''] = 0;
				}
				
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_opex_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = $this->input->post('id');
			$cost_center_id = decode(clean_data($this->input->post('cost_center')));
			$opex = clean_data($this->input->post('opex'));
			$count = 0;
			$this->db->trans_start();
			foreach($id as $row_id){
				$item_id = decode($row_id);
				$check_item = $this->admin->check_data('gl_transaction_item_tbl', array('gl_trans_item_id' => $item_id), TRUE);

				if($check_item['result'] == TRUE){
					$cost_center_db = $check_item['info']->cost_center_id;
					$gl_trans_id = $check_item['info']->gl_trans_id;
					if($cost_center_db != $cost_center_id){
						$update_cost_center = $this->admin->update_data('gl_transaction_item_tbl', array('cost_center_id' => $cost_center_id), array('gl_trans_item_id' => $item_id));
					}

					$amount = $opex['jan'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 1, 'gl_trans_det_status' => 1));
					
					$amount = $opex['feb'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 2, 'gl_trans_det_status' => 1));


					$amount = $opex['mar'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 3, 'gl_trans_det_status' => 1));


					$amount = $opex['apr'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 4, 'gl_trans_det_status' => 1));

					$amount = $opex['may'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 5, 'gl_trans_det_status' => 1));
					
					$amount = $opex['jun'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 6, 'gl_trans_det_status' => 1));

					$amount = $opex['jul'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 7, 'gl_trans_det_status' => 1));

					$amount = $opex['aug'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 8, 'gl_trans_det_status' => 1));

					$amount = $opex['sep'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 9, 'gl_trans_det_status' => 1));
					
					$amount = $opex['oct'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 10, 'gl_trans_det_status' => 1));

					$amount = $opex['nov'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 11, 'gl_trans_det_status' => 1));

					$amount = $opex['dec'][$count];
					$update_item = $this->admin->update_data('gl_transaction_details_tbl', array('opex_amount' => $amount), array('gl_trans_item_id' => $item_id, 'MONTH(opex_budget_date)' => 12, 'gl_trans_det_status' => 1));
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('business-center/view-opex/');
				}

				$count++;
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success">OPEX successfully updated.</strong></div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('business-center/view-opex/' . encode($gl_trans_id));
		}
	}


	//CAPEX

	public function check_module($module, $year, $bc){
		$join_lock = array(
			'module_tbl b' => 'a.module_id = b.module_id AND b.module_name ="' . $module . '" AND a.lock_year = ' . $year,
			'lock_type_tbl c' => "a.lock_type_id = c.lock_type_id AND c.lock_type_name = 'Business Center'",
			'lock_status_tbl d' => 'a.lock_status_id = d.lock_status_id AND d.lock_status_name != "Cancel"',
			'bc_tbl e' => 'a.lock_location_id = e.bc_id AND e.bc_id = ' . $bc
		);

		$check_lock = $this->admin->check_join('lock_tbl a', $join_lock, TRUE);
		
		if($check_lock['result'] == TRUE){
			$lock_status = $check_lock['info']->lock_status_name;
			if($lock_status == 'Unlocked'){
				$status = 1;
			}elseif($lock_status == 'Locked'){
				$status = 0;
			}
		}else{
			$status = 0;
		}

		return $status;
	}

	public function capex_info($view_year = null){
		$info = $this->_require_login();

		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		$cost_center_code = $user_info['cost_center_code'];

		$module = 'CAPEX';
		if($view_year == null){
			$year = $this->_active_year();
		}else{
			$year = $view_year;
		}

		$data['budget_status'] = $this->check_module($module, $year, $bc_id);

		$data['id'] = encode($cost_center_code);
		$data['title'] = 'CAPEX Info';

		$check_cost = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center_code, 'cost_center_status' => 1), TRUE);
		if($check_cost['result'] == TRUE){
			$cost_center_id = $check_cost['info']->cost_center_id;
			$cost_center_desc = $check_cost['info']->cost_center_desc;
			$data['cost_center_desc'] = $cost_center_desc;
			$join_cost = array(
				'cost_center_tbl b' => 'a.cost_center_id=b.cost_center_id AND a.ag_trans_status=1 AND b.cost_center_id=' . $cost_center_id . ' AND a.ag_trans_budget_year = ' . $year,
				'asset_group_tbl c' => 'a.ag_id=c.ag_id',
				'user_tbl d' => 'a.user_id=d.user_id'
			);
			$data['asset_group'] = $this->admin->get_join('asset_group_transaction_tbl a', $join_cost);

			$join_capex = array(
				'asset_group_transaction_item_tbl f' => 'a.ag_trans_item_id = f.ag_trans_item_id AND f.ag_trans_item_status = 1',
				'asset_group_transaction_tbl b' => 'f.ag_trans_id=b.ag_trans_id AND b.ag_trans_status=1 AND a.ag_trans_det_status=1 AND YEAR(a.capex_budget_date)=' . $year,
				'asset_subgroup_tbl c' => 'f.asg_id=c.asg_id',
				'asset_group_tbl d' => 'c.ag_id = d.ag_id',
				'cost_center_tbl e' => 'f.cost_center_id = e.cost_center_id AND e.cost_center_id AND e.parent_id=' . $cost_center_id
			);

			$data['capex_asset'] = $this->admin->get_join('asset_group_transaction_details_tbl a', $join_capex, FALSE, 'd.ag_name', 'c.asg_id', 'd.ag_name, c.asg_name, SUM(a.capex_qty) total_qty, f.capex_price, SUM(a.capex_qty * f.capex_price) as capex_total');
			/*echo $this->db->last_query();*/
			$data['cost_center'] = encode($cost_center_id);
			$data['year'] = $year;
			$data['content'] = $this->load->view('bc/bc_capex_info_content', $data , TRUE);
			$this->load->view('bc/templates', $data);
		}	
	}

	public function cancel_capex(){
		$info = $this->_require_login();
		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		$cost_center_code = $user_info['cost_center_code'];

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('ag_trans_id' => $id);
			$join_id = array(
				'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND ag_trans_id = ' . $id
			);
			$check_id = $this->admin->check_join('asset_group_transaction_tbl a', $join_id, TRUE);
			if($check_id['result'] == TRUE){
				$cost_center_code = $check_id['info']->cost_center_code;
				$year = $check_id['info']->ag_trans_budget_year;
				$data['budget_status'] = $this->check_module('CAPEX', $year, $bc_id);
				if($data['budget_status'] == TRUE){
					$set = array('ag_trans_status' => 0);
					$remove_capex = $this->admin->update_data('asset_group_transaction_tbl', $set, $where);
					
					if($remove_capex == TRUE){
						$msg = '<div class="alert alert-success">CAPEX successfully removed.</strong></div>';
					}else{
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}
					$this->session->set_flashdata('message', $msg);
					redirect('business-center/capex-info/');
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('business-center/capex-info/');
				}
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('business-center/capex-info/');
			}
		}
	}

	public function add_capex_item($id){
		$info = $this->_require_login();
		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];

		$module = 'CAPEX';

		$data['title'] = 'Add CAPEX Item';

		$data['id'] = $id;
		$ag_trans_id = decode($id);
		$join_id = array(
			'asset_group_tbl b' => 'a.ag_id = b.ag_id AND a.ag_trans_status=1 AND a.ag_trans_id = ' . $ag_trans_id,
			'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id'
		);
		$check_id = $this->admin->check_join('asset_group_transaction_tbl a', $join_id, TRUE);

		if($check_id['result'] == TRUE){
			$cost_center_id = $check_id['info']->cost_center_id;
			$cost_center_code = $check_id['info']->cost_center_code;
			$ag_name = $check_id['info']->ag_name;
			$ag_id = $check_id['info']->ag_id;
			$year = $check_id['info']->ag_trans_budget_year;
			$budget_status = $this->check_module('CAPEX', $year, $bc_id);

			if($budget_status == 1){
				$data['ag_name'] = $check_id['info']->ag_name;
				$data['cost_center'] = encode($cost_center_id);
				$data['cost_center_code'] = encode($cost_center_code);
				$data['cost_center_name'] = $check_id['info']->cost_center_desc;
				
				$data['ag'] = $this->_get_ag_data($cost_center_id, $ag_name, $ag_id);
				$data['content'] = $this->load->view('bc/bc_capex_add_item', $data , TRUE);
				$this->load->view('bc/templates', $data);
			}else{
				redirect('business-center/capex-info');
			}
		}else{
			redirect('business-center/capex-info');
		}
	}

	public function add_trans_capex_item(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];

		$module = 'CAPEX';

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$ag_trans_id = clean_data(decode($this->input->post('ag_trans_id')));
			$bc_cost_center = clean_data(decode($this->input->post('bc_cost_center')));
			if(!empty($ag_trans_id) && !empty($bc_cost_center)){
				$check_cc = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $bc_cost_center, 'cost_center_status' => 1), TRUE);
				if($check_cc['result'] == TRUE){
					$cost_center_id = $check_cc['info']->cost_center_id;

					$join_trans = array(
						'asset_group_tbl b' => 'a.ag_id = b.ag_id AND a.ag_trans_status = 1 AND a.ag_trans_id =' . $ag_trans_id
					);
					$this->db->trans_start();
					$check_trans = $this->admin->check_join('asset_group_transaction_tbl a', $join_trans, TRUE);
					if($check_trans['result'] == TRUE){
						
						$id = clean_data($this->input->post('id'));
						$asg_cost_center = clean_data($this->input->post('cost_center'));
						$year = $check_trans['info']->ag_trans_budget_year;

						$budget_status = $this->check_module($module, $year, $bc_id);
						if($budget_status == 1){

							$capex = clean_data($this->input->post('capex'));
							$count = 0;
							foreach($id as $row){
								$asg_id = decode($row);
								$check_asg_id = $this->admin->check_data('asset_subgroup_tbl', array('asg_id' => $asg_id, 'asg_status' => 1), TRUE);
								if($check_asg_id == TRUE){
									$asset_price = $check_asg_id['info']->asg_price;
									$asset_lifespan = $check_asg_id['info']->asg_lifespan;
									$asg_cost_center_id = decode($asg_cost_center[$count]);
									$check_asg_cc = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $asg_cost_center_id));
									if($check_asg_cc == TRUE){

										$qty_jan = $capex['jan'][$count];
										$qty_feb = $capex['feb'][$count];
										$qty_mar = $capex['mar'][$count];
										$qty_apr = $capex['apr'][$count];
										$qty_may = $capex['may'][$count];
										$qty_jun = $capex['jun'][$count];
										$qty_jul = $capex['jul'][$count];
										$qty_aug = $capex['aug'][$count];
										$qty_sep = $capex['sep'][$count];
										$qty_oct = $capex['oct'][$count];
										$qty_nov = $capex['nov'][$count];
										$qty_dec = $capex['dec'][$count];

										$total_amount = $qty_jan + $qty_feb + $qty_mar + $qty_apr + $qty_may + $qty_jun + $qty_jul + $qty_aug + $qty_sep + $qty_oct + $qty_nov + $qty_dec;

										if($total_amount > 0){
											$set_item = array(
												'ag_trans_id' => $ag_trans_id,
												'asg_id' => $asg_id,
												'cost_center_id' => $asg_cost_center_id,
												'user_id' => $user_id,
												'capex_price' => $asset_price,
												'capex_lifespan' => $asset_lifespan,
												'ag_trans_item_added' => date_now(),
												'ag_trans_item_status' => 1
											);

											$insert_item = $this->admin->insert_data('asset_group_transaction_item_tbl', $set_item, TRUE);

											if($insert_item['result'] == TRUE){
												$ag_trans_item_id = $insert_item['id'];
												$date = $year . '-' . '01-01';
												$set_asg_trans = array(
													'ag_trans_item_id' => $ag_trans_item_id,
													'capex_qty' => $qty_jan,
													'capex_budget_date' => $date,
													'ag_trans_det_added' => date_now(),
													'ag_trans_det_status' => 1
												);
												$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

												
												$date = $year . '-' . '02-01';
												$set_asg_trans = array(
													'ag_trans_item_id' => $ag_trans_item_id,
													'capex_qty' => $qty_feb,
													'capex_budget_date' => $date,
													'ag_trans_det_added' => date_now(),
													'ag_trans_det_status' => 1
												);
												$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

												
												$date = $year . '-' . '03-01';
												$set_asg_trans = array(
													'ag_trans_item_id' => $ag_trans_item_id,
													'capex_qty' => $qty_mar,
													'capex_budget_date' => $date,
													'ag_trans_det_added' => date_now(),
													'ag_trans_det_status' => 1
												);
												$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

												
												$date = $year . '-' . '04-01';
												$set_asg_trans = array(
													'ag_trans_item_id' => $ag_trans_item_id,
													'capex_qty' => $qty_apr,
													'capex_budget_date' => $date,
													'ag_trans_det_added' => date_now(),
													'ag_trans_det_status' => 1
												);
												$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);
												
												
												$date = $year . '-' . '05-01';
												$set_asg_trans = array(
													'ag_trans_item_id' => $ag_trans_item_id,
													'capex_qty' => $qty_may,
													'capex_budget_date' => $date,
													'ag_trans_det_added' => date_now(),
													'ag_trans_det_status' => 1
												);
												$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

												
												$date = $year . '-' . '06-01';
												$set_asg_trans = array(
													'ag_trans_item_id' => $ag_trans_item_id,
													'capex_qty' => $qty_jun,
													'capex_budget_date' => $date,
													'ag_trans_det_added' => date_now(),
													'ag_trans_det_status' => 1
												);
												$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

												$date = $year . '-' . '07-01';
												$set_asg_trans = array(
													'ag_trans_item_id' => $ag_trans_item_id,
													'capex_qty' => $qty_jul,
													'capex_budget_date' => $date,
													'ag_trans_det_added' => date_now(),
													'ag_trans_det_status' => 1
												);
												$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

												
												$date = $year . '-' . '08-01';
												$set_asg_trans = array(
													'ag_trans_item_id' => $ag_trans_item_id,
													'capex_qty' => $qty_aug,
													'capex_budget_date' => $date,
													'ag_trans_det_added' => date_now(),
													'ag_trans_det_status' => 1
												);
												$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

												
												$date = $year . '-' . '09-01';
												$set_asg_trans = array(
													'ag_trans_item_id' => $ag_trans_item_id,
													'capex_qty' => $qty_sep,
													'capex_budget_date' => $date,
													'ag_trans_det_added' => date_now(),
													'ag_trans_det_status' => 1
												);
												$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

												
												$date = $year . '-' . '10-01';
												$set_asg_trans = array(
													'ag_trans_item_id' => $ag_trans_item_id,
													'capex_qty' => $qty_oct,
													'capex_budget_date' => $date,
													'ag_trans_det_added' => date_now(),
													'ag_trans_det_status' => 1
												);
												$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

												
												$date = $year . '-' . '11-01';
												$set_asg_trans = array(
													'ag_trans_item_id' => $ag_trans_item_id,
													'capex_qty' => $qty_nov,
													'capex_budget_date' => $date,
													'ag_trans_det_added' => date_now(),
													'ag_trans_det_status' => 1
												);
												$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

												
												$date = $year . '-' . '12-01';
												$set_asg_trans = array(
													'ag_trans_item_id' => $ag_trans_item_id,
													'capex_qty' => $qty_dec,
													'capex_budget_date' => $date,
													'ag_trans_det_added' => date_now(),
													'ag_trans_det_status' => 1
												);
												$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);
												$count++;
											}else{
												$msg = '<div class="alert alert-danger">Error while inserting item transaction!</div>';
												$this->session->set_flashdata('message', $msg);
												redirect('business-center/view-capex/' . encode($ag_trans_id));
											}
										}
									}else{
										$this->db->trans_rollback();
										$msg = '<div class="alert alert-danger">Error empty cost center!</div>';
										$this->session->set_flashdata('message', $msg);
										redirect('business-center/view-capex/' . encode($ag_trans_id));
									}
								}else{
									$msg = '<div class="alert alert-danger">Error asset subgroup not existing!</div>';
									$this->session->set_flashdata('message', $msg);
									redirect('business-center/view-capex/' . encode($ag_trans_id));
								}
							}

							if($this->db->trans_status() === FALSE){
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error please try again!</div>';
							}else{
								$this->db->trans_commit();
								$msg = '<div class="alert alert-success">CAPEX successfully added.</strong></div>';
							}

							$this->session->set_flashdata('message', $msg);
							redirect('business-center/view-capex/' . encode($ag_trans_id));
						}else{
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
							$this->session->set_flashdata('message', $msg);
							exit;
							redirect('business-center/view-capex/' . encode($ag_trans_id));
						}
					}else{
						$msg = '<div class="alert alert-danger">Error transaction not exist please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('business-center/view-capex/' . encode($ag_trans_id));
					}
				}else{
					$msg = '<div class="alert alert-danger">Error invalid cost center!</div>';	
					$this->session->set_flashdata('message', $msg);
					redirect('business-center/view-capex/' . encode($ag_trans_id));
				}
			}else{
				echo 'wew';
			}
		}
	}

	public function capex_donut($id){
		$year = $this->_active_year();
		$cost_center = decode($id);
		$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center));
		if($check_id == TRUE){
			$donut = $this->admin->get_query('SELECT e.ag_name as asset_group, SUM(b.capex_price * c.capex_qty) as amount, e.ag_color as color FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND f.parent_id=' . $cost_center . ' AND a.ag_trans_status=1 AND b.ag_trans_item_status=1 AND c.ag_trans_det_status=1 AND g.trans_type_id=1 AND YEAR(c.capex_budget_date)=' . $year . ' GROUP BY d.ag_id ORDER BY amount DESC');
			$data['result'] = 1;
			$data['info'] = $donut;
			
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
		exit();
	}

	public function capex_line($id){
		
		$get_year = $this->admin->check_data('budget_active_tbl', array('budget_active_status' => 1), TRUE);

		if($get_year['result'] == TRUE){
			$year = $get_year['info']->budget_active_year;
			$trans_type = $get_year['info']->trans_type_id;
			$previous_year = $year - 1;
			$cost_center = decode($id);
			$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center));
			if($check_id == TRUE){
				$line = $this->admin->get_query('SELECT DATE_FORMAT(c.capex_budget_date, "%b %Y") as budget_date, SUM(b.capex_price * c.capex_qty) as amount FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND f.parent_id=' . $cost_center . ' AND a.ag_trans_status=1 AND b.ag_trans_item_status=1 AND c.ag_trans_det_status=1 AND g.trans_type_id=' . $trans_type . ' AND YEAR(c.capex_budget_date)=' . $year . ' GROUP BY YEAR(c.capex_budget_date), MONTH(c.capex_budget_date)');

				$line2 = $this->admin->get_query('SELECT DATE_FORMAT(c.capex_budget_date, "%b %Y") as budget_date, SUM(b.capex_price * c.capex_qty) as amount FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND f.parent_id=' . $cost_center . ' AND a.ag_trans_status=1 AND b.ag_trans_item_status=1 AND c.ag_trans_det_status=1 AND g.trans_type_id=2 AND YEAR(c.capex_budget_date)=' . $previous_year . ' GROUP BY YEAR(c.capex_budget_date), MONTH(c.capex_budget_date)');

				$capex['first_data'] = $line;
				$capex['second_data'] = $line2;

				$data['result'] = 1;
				$data['info'] = $capex;
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
		exit();
	}

	public function capex_bar($id){
		$year = $this->_active_year();
		$cost_center = decode($id);
		$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center));
		if($check_id == TRUE){
			$bar = $this->admin->get_query('SELECT DATE_FORMAT(c.capex_budget_date, "%b %Y") as budget_date, e.ag_name as asset_group, SUM(b.capex_price * c.capex_qty) as amount, MONTH(c.capex_budget_date) as month, e.ag_color as color FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND f.parent_id=' . $cost_center . ' AND a.ag_trans_status=1 AND b.ag_trans_item_status=1 AND c.ag_trans_det_status=1 AND YEAR(c.capex_budget_date)=' . $year . ' GROUP BY YEAR(c.capex_budget_date), MONTH(c.capex_budget_date), e.ag_id ORDER BY c.capex_budget_date ASC, amount DESC');
			$arr_budget_date = array();
			$arr_group = array();
			$arr_asset = array();
			$arr_color = array();
			$count = 0;
			foreach($bar as $row){
				$budget_date = $row->budget_date;
				$month = $row->month;
				$amount = $row->amount;
				$asset_group = $row->asset_group;
				$color = $row->color;
				if(!array_key_exists($month, $arr_budget_date)){
					$arr_budget_date[$month] = $budget_date;
				}

				if(!array_key_exists($asset_group, $arr_asset)){
					$arr_asset[$asset_group]['asset'] = $asset_group;
					$arr_asset[$asset_group]['amount'] = array();

					$arr_group[$asset_group] = $asset_group;
					$count++;
				}

				array_push($arr_asset[$asset_group]['amount'], $amount);

				if(!array_key_exists($color, $arr_color)){
					$arr_color[$color] = $color;
				}
			}

			$data['result'] = 1;
			$data['month'] = $arr_budget_date;
			$data['group'] = $arr_group;
			$data['group_amount'] = $arr_asset;
			$data['color'] = $arr_color;
		}else{
			$data['result'] = 0;
		}
		echo json_encode($data);
		exit();
	}

	public function transac_capex($view_year = null){
		$info = $this->_require_login();

		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		$cost_center_code = $user_info['cost_center_code'];

		$module = 'CAPEX';
		if($view_year == null){
			$year = $this->_active_year();
		}else{
			$year = $view_year;
		}

		$budget_status = $this->check_module($module, $year, $bc_id);
		if($budget_status == 1){

			$data['title'] = 'Add capex';
			$year = $this->_active_year();

			$user_info = $this->get_user_info();
			$bc_id = $user_info['bc_id'];
			$cost_center_code = $user_info['cost_center_code'];

			$check_id = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center_code, 'cost_center_status' => 1), TRUE);
			if($check_id['result'] == TRUE){
				$data['id'] = encode($cost_center_code);
				$cost_center_id = $check_id['info']->cost_center_id;
				
				$data['cost_center_name'] = $check_id['info']->cost_center_desc;
				$data['asset_group'] = $this->admin->get_query('SELECT * FROM asset_group_tbl as a WHERE a.ag_id NOT IN (SELECT b.ag_id FROM asset_group_transaction_tbl b, cost_center_tbl c WHERE b.cost_center_id=c.cost_center_id AND b.ag_trans_status=1 AND c.cost_center_id=' . $cost_center_id . ')');
				$data['content'] = $this->load->view('bc/bc_transac_capex', $data , TRUE);
				$this->load->view('bc/templates', $data);
			}
		}else{
			redirect('business-center/capex-info');
		}
	}

	public function get_subgroup(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$ag_id =clean_data(decode($this->input->post('id')));
			$cost_center =clean_data(decode($this->input->post('cost_center')));
			$check_ag = $this->admin->check_data('asset_group_tbl', array('ag_id' => $ag_id), TRUE);
			if($check_ag['result'] == TRUE){
				$data['name'] = $check_ag['info']->ag_name;
				$ag_name = strtoupper($check_ag['info']->ag_name);
				$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'cost_center_status' => 1), TRUE);

				if($check_cost_center['result'] == TRUE){
					$cost_center_id = $check_cost_center['info']->cost_center_id;

					$asset = $this->_get_ag_data($cost_center_id, $ag_name, $ag_id);

					$data['assets'] = $asset;
					$data['result'] = 1;
				}else{
					$data[''] = 0;
				}
				
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function _get_ag_data($cost_center_id, $ag_name, $ag_id){
		if($ag_name == 'STORE EQUIPMENT' || $ag_name == 'LEASEHOLD IMPROVEMENTS (NEW)'){
			$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_id, 'cost_center_type_id' => 8 , 'cost_center_status' => 1));
		}elseif($ag_name == 'LEASEHOLD IMPROVEMENTS (OLD)'){
			$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_id, 'cost_center_status' => 1));
		}else{
			$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_id, 'cost_center_type_id !=' => 8, 'cost_center_status' => 1));
		}
		$cost_center_data = '<select name="cost_center[]" class="form-control input-sm capex-cost-center" style="width: 200px;">';
		$cost_center_data .= '<option value="">Select cost center...</option>';
		foreach($get_cost_center as $row){
			$cost_center_data .= '<option value="' . encode($row->cost_center_id) . '">' . $row->cost_center_desc . '</option>';
		}

		$cost_center_data .= '</select>';

		$get_assets = $this->admin->get_data('asset_subgroup_tbl', array('ag_id' => $ag_id, 'asg_status' => 1));
		$asset = '';
		foreach($get_assets as $row){
			$asset .= '<tr><input type="hidden" name="id[]" value="' . encode($row->asg_id) . '"> <input type="hidden" class="asg-price" value="' . $row->asg_price . '">';
			$asset .= '<td width=""><a href="#" class="remove-asg"><i class="fa fa-remove"></i></a>&nbsp;&nbsp;&nbsp;<a href="" class="add-asset-sub" data-id="' . encode($row->asg_id) . '"><i class="fa fa-plus"></i></a>&nbsp;&nbsp;<a href="#" class="show-slider-capex"><span class="fa fa-sliders"></span></a></td>';
			$asset .= '<td style="width:20px;">' . $row->asg_name .'</td>';
			$asset .= '<td width="7%"><div class="form-group">' . $cost_center_data . '</div></td>';
			$asset .= '<td class="text-right" width="3%">' . number_format($row->asg_price, 2) . '</td>';
			$asset .= '<td class="text-right" width="3%"><label class="capex-total-price">0</label></td>';
			$asset .= '<td class="text-right" width="3%"><label class="capex-total-qty">0</label></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty jan-qty" name="capex[jan][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty feb-qty" name="capex[feb][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty mar-qty" name="capex[mar][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty apr-qty" name="capex[apr][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty may-qty" name="capex[may][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty jun-qty" name="capex[jun][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty jul-qty" name="capex[jul][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty aug-qty" name="capex[aug][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty sep-qty" name="capex[sep][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty oct-qty" name="capex[oct][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty nov-qty" name="capex[nov][]" class="form-control input-sm"></td>';
			$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty dec-qty" name="capex[dec][]" class="form-control input-sm"></td>';
			$asset .= '</tr>';
		}

		return $asset;
	}

	public function get_asset_subgroup(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$asg_id =clean_data(decode($this->input->post('id')));
		$cost_center =clean_data(decode($this->input->post('cost_center')));

		$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center, 'cost_center_status' => 1), TRUE);
		$join_ag = array('asset_group_tbl b' => 'a.ag_id = b.ag_id AND b.ag_status = 1 AND a.asg_status = 1 AND a.asg_id = ' . $asg_id);
		$check_ag = $this->admin->check_join('asset_subgroup_tbl a', $join_ag, TRUE);
		if($check_ag['result'] == TRUE){
			
			$ag_name = strtoupper($check_ag['info']->ag_name);
			if($check_cost_center['result'] == TRUE){
				$cost_center_id = $check_cost_center['info']->cost_center_id;
				if($ag_name == 'STORE EQUIPMENT' || $ag_name == 'LEASEHOLD IMPROVEMENTS (OLD)' || $ag_name == 'LEASEHOLD IMPROVEMENTS (NEW)'){
					$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_id, 'cost_center_type_id' => 8 , 'cost_center_status' => 1));
				}else{
					$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_id, 'cost_center_type_id !=' => 8, 'cost_center_status' => 1));
				}

				$cost_center_data = '<select name="cost_center[]" class="form-control input-sm capex-cost-center" style="width: 200px;">';
				$cost_center_data .= '<option value="">Select cost center...</option>';
				foreach($get_cost_center as $row){
					$cost_center_data .= '<option value="' . encode($row->cost_center_id) . '">' . $row->cost_center_desc . '</option>';
				}

				$cost_center_data .= '</select>';

				$get_assets = $this->admin->get_data('asset_subgroup_tbl', array('asg_id' => $asg_id, 'asg_status' => 1));
				$asset = '';
				foreach($get_assets as $row){
					$asset .= '<tr><input type="hidden" name="id[]" value="' . encode($row->asg_id) . '"> <input type="hidden" class="asg-price" value="' . $row->asg_price . '">';
					$asset .= '<td><a href="#" class="remove-asg"><i class="fa fa-remove"></i></a>&nbsp;&nbsp;&nbsp;<a href="" class="add-asset-sub" data-id="' . encode($row->asg_id) . '"><i class="fa fa-plus"></i></a>&nbsp;&nbsp;<a href="#" class="show-slider-capex"><span class="fa fa-sliders"></span></a></td>';
					$asset .= '<td style="width:20px;">' . $row->asg_name .'</td>';
					$asset .= '<td width="7%">' . $cost_center_data  . '</td>';
					$asset .= '<td class="text-right" width="3%">' . number_format($row->asg_price, 2) . '</td>';
					$asset .= '<td class="text-right" width="3%"><label class="capex-total-price">0</label></td>';
					$asset .= '<td class="text-right" width="3%"><label class="capex-total-qty">0</label></td>';
					$asset .= '<td  class="text-center" width=""><input type="text" class="capex-qty jan-qty" name="capex[jan][]" class="form-control input-sm"></td>';
					$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty feb-qty" name="capex[feb][]" class="form-control input-sm"></td>';
					$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty mar-qty" name="capex[mar][]" class="form-control input-sm"></td>';
					$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty apr-qty" name="capex[apr][]" class="form-control input-sm"></td>';
					$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty may-qty" name="capex[may][]" class="form-control input-sm"></td>';
					$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty jun-qty" name="capex[jun][]" class="form-control input-sm"></td>';
					$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty jul-qty" name="capex[jul][]" class="form-control input-sm"></td>';
					$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty aug-qty" name="capex[aug][]" class="form-control input-sm"></td>';
					$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty sep-qty" name="capex[sep][]" class="form-control input-sm"></td>';
					$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty oct-qty" name="capex[oct][]" class="form-control input-sm"></td>';
					$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty nov-qty" name="capex[nov][]" class="form-control input-sm"></td>';
					$asset .= '<td class="text-center" width=""><input type="text" class="capex-qty dec-qty" name="capex[dec][]" class="form-control input-sm"></td>';
					$asset .= '</tr>';
				}

				$data['result'] = 1;
				$data['asset'] = $asset;
				
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}
		
		echo json_encode($data);
	}

	public function add_capex(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$year = $this->_active_year();

		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		$cost_center_code = $user_info['cost_center_code'];

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$asset_group = clean_data(decode($this->input->post('asset_group')));
			if(!empty($asset_group) && !empty($cost_center_code)){
				$check_cc = $this->admin->check_data('cost_center_tbl', array('cost_center_code' => $cost_center_code, 'cost_center_status' => 1), TRUE);
				if($check_cc['result'] == TRUE){
					$cost_center_id = $check_cc['info']->cost_center_id;
					$check_duplicate = $this->admin->check_data('asset_group_transaction_tbl', array('ag_id' => $asset_group, 'cost_center_id' => $cost_center_id, 'ag_trans_status' => 1, 'trans_type_id' => 1, 'ag_trans_budget_year' => $year));
					
					if($check_duplicate == FALSE){
						$check_ag = $this->admin->check_data('asset_group_tbl', array('ag_id' => $asset_group, 'ag_status' => 1));
						if($check_ag == TRUE){
							$set = array(
								'ag_id' => $asset_group,
								'cost_center_id' => $cost_center_id,
								'user_id' => $user_id,
								'trans_type_id' => 1,
								'ag_trans_budget_year' => $year,
								'ag_trans_added' => date_now(),
								'ag_trans_status' => 1
							);
							$this->db->trans_start();
							$insert_capex_trans = $this->admin->insert_data('asset_group_transaction_tbl', $set, TRUE);
							$ag_trans_id = $insert_capex_trans['id'];
							if($insert_capex_trans == TRUE){
								$id = clean_data($this->input->post('id'));
								$asg_cost_center = clean_data($this->input->post('cost_center'));
								$capex = clean_data($this->input->post('capex'));
								$count = 0;
								foreach($id as $row){
									$asg_id = decode($row);
									$check_asg_id = $this->admin->check_data('asset_subgroup_tbl', array('asg_id' => $asg_id, 'asg_status' => 1), TRUE);
									if($check_asg_id == TRUE){
										$asset_price = $check_asg_id['info']->asg_price;
										$asset_lifespan = $check_asg_id['info']->asg_lifespan;
										$asg_cost_center_id = decode($asg_cost_center[$count]);
										$check_asg_cc = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $asg_cost_center_id));
										if($check_asg_cc == TRUE){

											$qty_jan = $capex['jan'][$count];
											$qty_feb = $capex['feb'][$count];
											$qty_mar = $capex['mar'][$count];
											$qty_apr = $capex['apr'][$count];
											$qty_may = $capex['may'][$count];
											$qty_jun = $capex['jun'][$count];
											$qty_jul = $capex['jul'][$count];
											$qty_aug = $capex['aug'][$count];
											$qty_sep = $capex['sep'][$count];
											$qty_oct = $capex['oct'][$count];
											$qty_nov = $capex['nov'][$count];
											$qty_dec = $capex['dec'][$count];

											$total_amount = $qty_jan + $qty_feb + $qty_mar + $qty_apr + $qty_may + $qty_jun + $qty_jul + $qty_aug + $qty_sep + $qty_oct + $qty_nov + $qty_dec;

											if($total_amount > 0){
												$set_item = array(
													'ag_trans_id' => $ag_trans_id,
													'asg_id' => $asg_id,
													'cost_center_id' => $asg_cost_center_id,
													'user_id' => $user_id,
													'capex_price' => $asset_price,
													'capex_lifespan' => $asset_lifespan,
													'ag_trans_item_added' => date_now(),
													'ag_trans_item_status' => 1
												);

												$insert_item = $this->admin->insert_data('asset_group_transaction_item_tbl', $set_item, TRUE);

												if($insert_item['result'] == TRUE){
													$ag_trans_item_id = $insert_item['id'];

													
													$date = $year . '-' . '01-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_jan,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '02-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_feb,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '03-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_mar,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '04-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_apr,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);
													
													
													$date = $year . '-' . '05-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_may,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '06-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_jun,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													$date = $year . '-' . '07-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_jul,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '08-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_aug,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '09-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_sep,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '10-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_oct,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '11-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_nov,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);

													
													$date = $year . '-' . '12-01';
													$set_asg_trans = array(
														'ag_trans_item_id' => $ag_trans_item_id,
														'capex_qty' => $qty_dec,
														'capex_budget_date' => $date,
														'ag_trans_det_added' => date_now(),
														'ag_trans_det_status' => 1
													);
													$this->admin->insert_data('asset_group_transaction_details_tbl', $set_asg_trans);
													$count++;
												}else{
													$msg = '<div class="alert alert-danger">Error while inserting item transaction!</div>';
													$this->session->set_flashdata('message', $msg);
													redirect('business-center/transac-capex/' . encode($cost_center));
												}
											}
										}else{
											$this->db->trans_rollback();
											$msg = '<div class="alert alert-danger">Error empty cost center!</div>';
											$this->session->set_flashdata('message', $msg);
											redirect('business-center/transac-capex/' . encode($cost_center));
										}
									}else{
										$msg = '<div class="alert alert-danger">Error asset subgroup not existing!</div>';
										$this->session->set_flashdata('message', $msg);
										redirect('business-center/transac-capex/' . encode($cost_center));
									}
								}
							}else{
								$msg = '<div class="alert alert-danger">Error while inserting transaction, please try again!</div>';
							}

							if($this->db->trans_status() === FALSE){
								$this->db->trans_rollback();
								$msg = '<div class="alert alert-danger">Error please try again!</div>';
							}else{
								$this->db->trans_commit();
								$msg = '<div class="alert alert-success">CAPEX successfully added.</strong></div>';
							}

							$this->session->set_flashdata('message', $msg);
							redirect('business-center/transac-capex/' . encode($cost_center_code));
						}else{
							$msg = '<div class="alert alert-danger">Error while checking Asset Group!</div>';
							$this->session->set_flashdata('message', $msg);
						}
					}else{
						$msg = '<div class="alert alert-danger">Error transaction already exist!</div>';	
						$this->session->set_flashdata('message', $msg);
						redirect('business-center/transac-capex/' . encode($cost_center_code));
					}
				}else{
					$msg = '<div class="alert alert-danger">Error invalid cost center!</div>';	
					$this->session->set_flashdata('message', $msg);
					redirect('business-center/transac-capex/' . encode($cost_center_code));
				}
			}else{
				echo 'wew';
			}
		}
	}

	public function view_capex($id){
		$info = $this->_require_login();
		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		$cost_center_id = $user_info['cost_center_id'];

		$module = 'CAPEX';

		$data['title'] = 'View CAPEX';
		$data['id'] = $id;

		$ag_trans_id = decode($id);
		$join_id = array(
			'asset_group_tbl b' => 'a.ag_id = b.ag_id AND a.ag_trans_status=1 AND a.ag_trans_id = ' . $ag_trans_id,
			'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id AND c.cost_center_id = ' . $cost_center_id
		);
		$check_id = $this->admin->check_join('asset_group_transaction_tbl a', $join_id, TRUE);

		if($check_id['result'] == TRUE){
			$data['parent_id']  = $check_id['info']->cost_center_id;
			$data['asset_group'] = $check_id['info']->ag_name;
			$data['cost_center_desc'] = $check_id['info']->cost_center_desc;
			$data['cost_center_code'] = encode($check_id['info']->cost_center_code);
			$year  = $check_id['info']->ag_trans_budget_year;
			$data['budget_status'] = $this->check_module($module, $year, $bc_id);
			$join_det = array(
				'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.ag_trans_det_status = 1',
				'asset_subgroup_tbl c' => 'a.asg_id=c.asg_id AND a.ag_trans_id=' . $ag_trans_id,
				'asset_group_transaction_item_tbl d' => 'a.ag_trans_item_id = d.ag_trans_item_id AND d.ag_trans_item_status = 1'
			);
			
			$data['asset_details'] = $this->admin->get_query('SELECT c.ag_trans_item_id, d.asg_name, g.cost_center_desc, b.capex_price,(SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id) as total_qty, (SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=1 AND x.ag_trans_det_status=1) as jan, (SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=2 AND x.ag_trans_det_status=1) as feb, (SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=3 AND x.ag_trans_det_status=1) as mar, (SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=4 AND x.ag_trans_det_status=1) as apr, (SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=5 AND x.ag_trans_det_status=1) as may, (SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=6 AND x.ag_trans_det_status=1) as jun, (SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=7 AND x.ag_trans_det_status=1) as jul, (SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=8 AND x.ag_trans_det_status=1) as aug, (SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=9 AND x.ag_trans_det_status=1) as sep, (SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=10 AND x.ag_trans_det_status=1) as oct, (SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=11 AND x.ag_trans_det_status=1) as nov, (SELECT SUM(x.capex_qty) FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id=x.ag_trans_item_id AND MONTH(x.capex_budget_date)=12 AND x.ag_trans_det_status=1) as december FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, transaction_type_tbl f, cost_center_tbl g  WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=g.cost_center_id AND a.trans_type_id=f.trans_type_id AND b.cost_center_id=g.cost_center_id AND a.ag_trans_status=1 AND b.ag_trans_item_status=1 AND c.ag_trans_det_status=1 AND f.trans_type_name="BUDGET" AND YEAR(c.capex_budget_date)=' . $year . ' AND a.ag_trans_id=' . $ag_trans_id . ' GROUP BY b.ag_trans_item_id');

			$data['content'] = $this->load->view('bc/bc_capex_view', $data , TRUE);
			$this->load->view('bc/templates', $data);
		}else{
			redirect('capex-info');
		}
	}

	public function remove_capex_item(){
		$info = $this->_require_login();
		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$module = 'CAPEX';
			$join_item = array('asset_group_transaction_tbl b' => 'a.ag_trans_id = b.ag_trans_id AND a.ag_trans_item_id = ' . $id);
			$check_id = $this->admin->check_join('asset_group_transaction_item_tbl a', $join_item, TRUE);
			if($check_id['result'] == TRUE){
				$ag_trans_id = $check_id['info']->ag_trans_id;
				$year = $check_id['info']->ag_trans_budget_year;
				$data['budget_status'] = $this->check_module($module, $year, $bc_id);
				if($data['budget_status'] == 1){
					$set = array('ag_trans_item_status' => 0);
					$where = array('ag_trans_item_id' => $id);
					$remove_item = $this->admin->update_data('asset_group_transaction_item_tbl', $set, $where);

					if($remove_item == TRUE){
						$msg = '<div class="alert alert-success">Item successfully removed.</strong></div>';
					}else{
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('business-center/view-capex/' . encode($ag_trans_id));
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('business-center/capex-info/');
			}
		}
	}

	public function get_capex_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$item_id = decode($this->input->post('id'));

			$join_item = array(
				'asset_group_transaction_tbl b' => 'a.ag_trans_id = b.ag_trans_id AND b.ag_trans_status = 1',
				'cost_center_tbl c' => 'b.cost_center_id = c.cost_center_id AND c.cost_center_status = 1 AND a.ag_trans_item_id = ' . $item_id,
				'asset_subgroup_tbl d' => 'a.asg_id = d.asg_id',
				'asset_group_tbl e' => 'd.ag_id = e.ag_id'
			);

			$check_id = $this->admin->check_join('asset_group_transaction_item_tbl a', $join_item, TRUE, FALSE, FALSE, '*, c.cost_center_id as cost_center_main, a.cost_center_id cost_center_item');

			if($check_id['result'] == TRUE){
				$cost_center_main = $check_id['info']->cost_center_main;
				$cost_center_item = $check_id['info']->cost_center_item;
				$price = $check_id['info']->capex_price;
				$asg_name = $check_id['info']->asg_name;
				$ag_name = $check_id['info']->ag_name;

				if($ag_name == 'STORE EQUIPMENT' || $ag_name == 'LEASEHOLD IMPROVEMENTS (NEW)'){
					$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_main, 'cost_center_type_id' => 8 , 'cost_center_status' => 1));
				}elseif($ag_name == 'LEASEHOLD IMPROVEMENTS (OLD)'){
					$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_main, 'cost_center_status' => 1));
				}else{
					$get_cost_center = $this->admin->get_data('cost_center_tbl', array('parent_id' => $cost_center_main, 'cost_center_type_id !=' => 8, 'cost_center_status' => 1));
				}

				
				$cost_center_data = '';
				foreach($get_cost_center as $row){
					$selected = '';
					if($row->cost_center_id == $cost_center_item){
						$select = ' selected';
					}	
					$cost_center_data .= '<option value="' . encode($row->cost_center_id) . '"' . $selected . '>' . $row->cost_center_desc . '</option>';
				}

				$join_get_item = array(
					'asset_group_transaction_item_tbl b' => 'a.ag_trans_item_id = b.ag_trans_item_id AND b.ag_trans_item_status = 1 AND a.ag_trans_det_status = 1 AND b.ag_trans_item_id = ' . $item_id,
				);
				$get_item = $this->admin->get_join('asset_group_transaction_details_tbl a', $join_get_item, FALSE, 'a.capex_budget_date ASC', FALSE, 'a.capex_qty, MONTHNAME(a.capex_budget_date) as capex_budget_date');
				$month = array(
					'January' => 0,
					'February' => 0,
					'March' => 0,
					'April' => 0,
					'May' => 0, 
					'June' => 0,
					'July' => 0,
					'August' => 0,
					'September' => 0,
					'October' => 0,
					'November' => 0,
					'December' => 0
				);

				$total_qty = 0;
				foreach($get_item as $row_item){
					$month[$row_item->capex_budget_date] += $row_item->capex_qty;
					$total_qty += $row_item->capex_qty;
				}

				$details = array(
					'asset_name' => $asg_name,
					'price' => $price,
					'total' => $total_qty,
					'cost_center' => $cost_center_data,
					'month' => $month
				);

				$data['result'] = 1;
				$data['info'] = $details;
			}else{
				$data['result'] = 0;
			}

			echo json_encode($data);
			exit();
		}
	}

	public function update_capex_item(){
		$info = $this->_require_login();
		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = $this->input->post('id');
			$cost_center_id = decode(clean_data($this->input->post('cost_center')));
			$capex = clean_data($this->input->post('capex'));
			$asset_price = clean_data($this->input->post('price'));
			$module = 'CAPEX';

			$count = 0;
			$this->db->trans_start();
			foreach($id as $row_id){
				$price = $asset_price[$count];
				$item_id = decode($row_id);


				$join_item = array('asset_group_transaction_tbl b' => 'a.ag_trans_id = b.ag_trans_id AND a.ag_trans_item_id = ' . $item_id);
				$check_item = $this->admin->check_join('asset_group_transaction_item_tbl a', $join_item, TRUE);
				if($check_item['result'] == TRUE){
					$cost_center_db = $check_item['info']->cost_center_id;
					$ag_trans_id = $check_item['info']->ag_trans_id;
					$year = $check_item['info']->ag_trans_budget_year;
					$data['budget_status'] = $this->check_module('CAPEX', $year, $bc_id);
					if($data['budget_status'] == 1){

						if($cost_center_db != $cost_center_id){
							$update_cost_center = $this->admin->update_data('asset_group_transaction_item_tbl', array('cost_center_id' => $cost_center_id), array('ag_trans_item_id' => $item_id));
						}

						$update_price = $this->admin->update_data('asset_group_transaction_item_tbl', array('capex_price' => $price), array('ag_trans_item_id' => $item_id));

						$qty = $capex['jan'][$count];
						$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 1, 'ag_trans_det_status' => 1));
						
						$qty = $capex['feb'][$count];
						$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 2, 'ag_trans_det_status' => 1));


						$qty = $capex['mar'][$count];
						$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 3, 'ag_trans_det_status' => 1));


						$qty = $capex['apr'][$count];
						$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 4, 'ag_trans_det_status' => 1));

						$qty = $capex['may'][$count];
						$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 5, 'ag_trans_det_status' => 1));
						
						$qty = $capex['jun'][$count];
						$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 6, 'ag_trans_det_status' => 1));

						$qty = $capex['jul'][$count];
						$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 7, 'ag_trans_det_status' => 1));

						$qty = $capex['aug'][$count];
						$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 8, 'ag_trans_det_status' => 1));

						$qty = $capex['sep'][$count];
						$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 9, 'ag_trans_det_status' => 1));
						
						$qty = $capex['oct'][$count];
						$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 10, 'ag_trans_det_status' => 1));

						$qty = $capex['nov'][$count];
						$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 11, 'ag_trans_det_status' => 1));

						$qty = $capex['dec'][$count];
						$update_item = $this->admin->update_data('asset_group_transaction_details_tbl', array('capex_qty' => $qty), array('ag_trans_item_id' => $item_id, 'MONTH(capex_budget_date)' => 12, 'ag_trans_det_status' => 1));
					}else{
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
						$this->session->set_flashdata('message', $msg);
						redirect('business-center/view-capex/' . encode($ag_trans_id));	
					}
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('business-center/view-capex/' . encode($ag_trans_id));

				}

				$count++;
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success">CAPEX successfully updated.</strong></div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('business-center/view-capex/' . encode($ag_trans_id));
		}
	}

	public function sales_info($view_year = null){
		$year = $this->_active_year();
		$info = $this->_require_login();

		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];

		$module = 'SALES';
		if($view_year == null){
			$year = $this->_active_year();
		}else{
			$year = $view_year;
		}

		$data['budget_status'] = $this->check_module($module, $year, $bc_id);

		$data['id'] = encode($bc_id);
		$data['title'] = 'Sales Info';
		$join_brand = array(
			'outlet_brand_tbl b' => 'a.brand_id = b.brand_id AND b.outlet_brand_status = 1',
			'outlet_tbl c' => 'b.outlet_id = c.outlet_id AND c.outlet_status_id = 1',
			'bc_tbl d' => 'c.bc_id = d.bc_id AND d.bc_id = ' . $bc_id
		);
		$data['brand'] = $this->admin->get_join('brand_tbl a', $join_brand, FALSE, FALSE, 'a.brand_id');

		$join_budgeted_outlet = array(
			'outlet_type_tbl b' => 'a.outlet_type_id = b.outlet_type_id',
			'bc_tbl c' => 'a.bc_id = c.bc_id AND c.bc_id = ' . $bc_id,
			'region_tbl d' => 'c.region_id=d.region_id',
			//'outlet_status_tbl e' => 'a.outlet_status_id=e.outlet_status_id',
			'outlet_brand_tbl f' => 'a.outlet_id = f.outlet_id AND f.outlet_brand_status = 1',
			'brand_tbl g' => 'f.brand_id = g.brand_id',
			'brand_type_tbl h' => 'g.brand_type_id = h.brand_type_id',
			'sales_tbl i' => 'a.outlet_id = i.outlet_id AND i.sales_year=' . $year . ' AND i.sales_status=1 AND i.trans_type_id = 1'
		);
		
		$data['budgeted_outlet'] = $this->admin->get_join('outlet_tbl a', $join_budgeted_outlet, FALSE,'a.ifs_code ASC');
		$join_unbudgeted_outlet = array(
			'outlet_type_tbl b' => 'a.outlet_type_id = b.outlet_type_id',
			'bc_tbl c' => 'a.bc_id = c.bc_id AND c.bc_id = ' . $bc_id,
			'region_tbl d' => 'c.region_id=d.region_id',
			'outlet_status_tbl e' => 'a.outlet_status_id=e.outlet_status_id',
			'outlet_brand_tbl f' => 'a.outlet_id = f.outlet_id AND f.outlet_brand_status = 1',
			'brand_tbl g' => 'f.brand_id = g.brand_id',
			'brand_type_tbl h' => 'g.brand_type_id = h.brand_type_id',	
		);
		$where_budgeted = 'a.outlet_id NOT IN(SELECT outlet_id FROM sales_tbl x WHERE x.outlet_id=a.outlet_id AND x.sales_year=' . $year . ' AND x.sales_status=1 AND x.trans_type_id = 1)';

		$data['unbudgeted_outlet'] = $this->admin->get_join('outlet_tbl a', $join_unbudgeted_outlet, FALSE,'a.ifs_code ASC', FALSE, FALSE, $where_budgeted);

		$data['region'] = $this->admin->get_data('region_tbl', array('region_status' => 1));
		$data['type'] = $this->admin->get_data('brand_type_tbl', array('brand_type_status' => 1));
		$data['status'] = $this->admin->get_data('outlet_status_tbl');
		$data['content'] = $this->load->view('bc/bc_sales_info_content', $data , TRUE);
		$this->load->view('bc/templates', $data);
	}

	public function outlet_budget($id){
		$info = $this->_require_login();
		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		ini_set('max_input_vars', 20000);
		$data['title'] = 'Transac Sales';
		$data['id'] = $id;
		$outlet_id = decode($id);
		$year = $this->_active_year();
		$join_outlet = array(
			'bc_tbl b' => 'a.bc_id=b.bc_id AND b.bc_status=1 AND a.outlet_id = ' . $outlet_id . ' AND b.bc_id = ' . $bc_id,
			'outlet_brand_tbl c' => 'a.outlet_id = c.outlet_id AND c.outlet_brand_status = 1',
			'brand_tbl d' => 'c.brand_id = d.brand_id AND c.outlet_brand_status = 1'
		);
		$check_outlet = $this->admin->check_join('outlet_tbl a', $join_outlet, TRUE);

		if($check_outlet['result'] == TRUE){
			$data['outlet_name'] = $check_outlet['info']->outlet_name;
			$data['bc_name'] = $check_outlet['info']->bc_name;
			$data['brand_name'] = $check_outlet['info']->brand_name;
			$data['outlet_id'] = encode($check_outlet['info']->outlet_id);

			$join = array(
				'brand_material_tbl b' => 'a.material_id = b.material_id',
				'brand_tbl c' => 'b.brand_id = c.brand_id',
				'outlet_brand_tbl d' => 'c.brand_id = d.brand_id',
				'outlet_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_id = ' . $outlet_id,
				'unit_tbl f' => 'a.unit_id = f.unit_id',
				'material_unit_tbl g' => 'a.material_id = g.material_id',
				'unit_tbl h' => 'g.valuation_unit = h.unit_id',
				'material_group_tbl i' => 'a.material_group_id = i.material_group_id'
			);

			$data['material'] = $this->admin->get_join('material_tbl a', $join);

			$data['content'] = $this->load->view('bc/bc_budget_content', $data , TRUE);
			$this->load->view('bc/templates', $data);
		}else{
			redirect('business-center/sales-info');
		}
	}

	public function add_outlet_budget(){

		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$outlet_id = decode($this->input->post('id'));
			$material = $this->input->post('material');
			$asp = $this->input->post('asp');
			$qty = $this->input->post('budget_qty');
			$user_id = decode($info['user_id']);
			if(!empty($outlet_id) && !empty($material) && !empty($asp) && !empty($qty) && !empty($user_id)){
				$this->db->trans_start();
				$check_outlet = $this->admin->check_data('outlet_tbl', array('outlet_id' => $outlet_id), TRUE);
				if($check_outlet['info'] == TRUE){
					$bc_id = $check_outlet['info']->bc_id;
					$date = explode('/', $month_date);
					$year = $this->_active_year();
					$check_budget = $this->admin->check_data('sales_tbl', array('outlet_id' => $outlet_id, 'sales_year' => $year, 'sales_status' => 1));

					if($check_budget == FALSE){
						$set_budget = array(
							'outlet_id' => $outlet_id,
							'trans_type_id' => 1,
							'user_id' => $user_id,
							'sales_year' => $year,
							'sales_added' => date_now(),
							'sales_status' => 1
						);

						$insert_budget = $this->admin->insert_data('sales_tbl', $set_budget, TRUE);
						$sales_id = $insert_budget['id'];
						$count = 0;

						foreach($material as $row):
							echo $count;
							echo '<br>';
							$material_id = decode($row);
							$check_material = $this->admin->check_data('material_tbl', array('material_id' => $material_id, 'material_status' => 1));
							if($check_material == TRUE){

								$jan_budget_qty = check_num($qty['jan'][$count]);
								$feb_budget_qty = check_num($qty['feb'][$count]);
								$mar_budget_qty = check_num($qty['mar'][$count]);
								$apr_budget_qty = check_num($qty['apr'][$count]);
								$may_budget_qty = check_num($qty['may'][$count]);
								$jun_budget_qty = check_num($qty['jun'][$count]);
								$jul_budget_qty = check_num($qty['jul'][$count]);
								$aug_budget_qty = check_num($qty['aug'][$count]);
								$sep_budget_qty = check_num($qty['sep'][$count]);
								$oct_budget_qty = check_num($qty['oct'][$count]);
								$nov_budget_qty = check_num($qty['nov'][$count]);
								$dec_budget_qty = check_num($qty['dec'][$count]);

								$total_qty = $jan_budget_qty + $feb_budget_qty + $mar_budget_qty + $apr_budget_qty + $may_budget_qty + $jun_budget_qty + $jul_budget_qty + $aug_budget_qty + $sep_budget_qty + $oct_budget_qty + $nov_budget_qty + $dec_budget_qty;

								if($total_qty == TRUE){
									$set_item = array(
										'sales_id' => $sales_id,
										'material_id' => $material_id,
										'user_id' => $user_id,
										'sales_item_added' => date_now(),
										'sales_item_status' => 1
									);

									$insert_item = $this->admin->insert_data('sales_item_tbl', $set_item, TRUE);
									$sale_item_id = $insert_item['id'];


								
									$jan_asp_qty = check_num($asp['jan'][$count]);
									$set_jan = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $jan_budget_qty,
										'sales_det_asp' => $jan_asp_qty,
										'sales_det_date' => $year . '-01-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_jan);

									$feb_asp_qty = check_num($asp['feb'][$count]);
									$set_feb = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $feb_budget_qty,
										'sales_det_asp' => $feb_asp_qty,
										'sales_det_date' => $year . '-02-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_feb);

									
									$mar_asp_qty = check_num($asp['mar'][$count]);
									$set_mar = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $mar_budget_qty,
										'sales_det_asp' => $mar_asp_qty,
										'sales_det_date' => $year . '-03-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_mar);

									
									$apr_asp_qty = check_num($asp['apr'][$count]);
									$set_apr = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $apr_budget_qty,
										'sales_det_asp' => $apr_asp_qty,
										'sales_det_date' => $year . '-04-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_apr);

									$may_asp_qty = check_num($asp['may'][$count]);
									$set_may = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $may_budget_qty,
										'sales_det_asp' => $may_asp_qty,
										'sales_det_date' => $year . '-05-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_may);

									$jun_asp_qty = check_num($asp['jun'][$count]);
									$set_jun = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $jun_budget_qty,
										'sales_det_asp' => $jun_asp_qty,
										'sales_det_date' => $year . '-06-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_jun);

									
									$jul_asp_qty = check_num($asp['jul'][$count]);
									$set_jul = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $jul_budget_qty,
										'sales_det_asp' => $jul_asp_qty,
										'sales_det_date' => $year . '-07-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_jul);

									$aug_asp_qty = check_num($asp['aug'][$count]);
									$set_aug = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => check_num($aug_budget_qty),
										'sales_det_asp' => check_num($aug_asp_qty),
										'sales_det_date' => $year . '-08-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_aug);

									$sep_asp_qty = check_num($asp['sep'][$count]);
									$set_sep = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $sep_budget_qty,
										'sales_det_asp' => $sep_asp_qty,
										'sales_det_date' => $year . '-09-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_sep);


									$oct_asp_qty = check_num($asp['oct'][$count]);
									$set_oct = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $oct_budget_qty,
										'sales_det_asp' => $oct_asp_qty,
										'sales_det_date' => $year . '-10-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_oct);

									$nov_asp_qty = check_num($asp['nov'][$count]);
									$set_nov = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $nov_budget_qty,
										'sales_det_asp' => $nov_asp_qty,
										'sales_det_date' => $year . '-11-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_nov);

									
									$dec_asp_qty = check_num($asp['dec'][$count]);
									$set_dec = array(
										'sales_item_id' => $sale_item_id,
										'sales_det_qty' => $dec_budget_qty,
										'sales_det_asp' => $dec_asp_qty,
										'sales_det_date' => $year . '-12-01',
										'sales_det_status' => 1
									);

									$this->admin->insert_data('sales_details_tbl', $set_dec);
								}
							}

							$count++;
						endforeach;


						if($this->db->trans_status() === FALSE){
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error please contact your administrator!</div>';
						}else{
							$this->db->trans_commit();
							$msg = '<div class="alert alert-success">Sales Budget Added.</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Budget Already Exist!</div>';	
					}	
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}
			$this->session->set_flashdata('message', $msg);
			redirect('business-center/sales-info/');
		}else{
			redirect('business-center');
		}
	}

	public function sales_view($id){
		$info = $this->_require_login();
		$data['title'] = 'Sales View';

		$check_budget = $this->admin->check_data('close_budget_tbl', array('close_status' => 1));
		
		if($check_budget == TRUE){
			$data['budget_status'] = 0;
		}else{
			$data['budget_status'] = 1;
		}

		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		$sales_id = decode($id);
		$join_id = array(
			'outlet_tbl b' => 'a.outlet_id = b.outlet_id AND a.sales_status = 1 AND a.sales_id = ' . $sales_id,
			'bc_tbl c' => 'b.bc_id = c.bc_id AND c.bc_id = ' . $bc_id,
			'outlet_brand_tbl d' => 'b.outlet_id = d.outlet_id AND d.outlet_brand_status = 1',
			'brand_tbl e' => 'd.brand_id = e.brand_id',
		);

		$check_id = $this->admin->check_join('sales_tbl a', $join_id, TRUE);
		if($check_id['result'] == TRUE){
			$data['id'] = $sales_id;
			$data['outlet_name'] = $check_id['info']->outlet_name;
			$data['bc_name'] = $check_id['info']->bc_name;
			$data['brand_name'] = $check_id['info']->brand_name;
			$data['bc_id'] = $check_id['info']->bc_id;

			$join_item = array(
				'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_id = ' . $sales_id,
				'material_tbl c' => 'b.material_id = c.material_id',
			);
			$data['material'] = $this->admin->get_join('sales_tbl a', $join_item, FALSE, FALSE, FALSE, 'a.sales_id, b.sales_item_id, c.material_id, c.material_code, c.material_desc, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 1) as jan, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 2) as feb, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 3) as mar, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 4) as apr, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 5) as may, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 6) as jun, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 7) as jul, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 8) as aug, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 9) as sep, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 10) as oct, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 11) as nov, (SELECT CONCAT(x.sales_det_qty, "," , x.sales_det_asp) FROM sales_details_tbl x WHERE b.sales_item_id = x.sales_item_id AND x.sales_det_status = 1 AND MONTH(x.sales_det_date) = 12) as december');
			$data['content'] = $this->load->view('bc/bc_sales_view', $data , TRUE);
			$this->load->view('bc/templates', $data);
		}else{

		}
	}

	public function remove_sales_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('sales_item_id' => $id);
			$check_id = $this->admin->check_data('sales_item_tbl', $where, TRUE);
			if($check_id['result'] == TRUE){
				$sales_id = $check_id['info']->sales_id;
				$set = array('sales_item_status' => 0);
				$remove_item = $this->admin->update_data('sales_item_tbl', $set, $where);

				if($remove_item == TRUE){
					$msg = '<div class="alert alert-success">Item successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('business-center/sales-view/' . encode($sales_id));
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('business-center/sales-view');
			}
		}

	}

	public function add_sales_item($id){
		$info = $this->_require_login();
		$user_info = $this->get_user_info();

		$check_budget = $this->admin->check_data('close_budget_tbl', array('close_status' => 1));
		
		if($check_budget == FALSE){
			
			$bc_id = $user_info['bc_id'];
			$data['title'] = 'Add Sales Item';
			$data['id'] = $id;
			$sales_id = decode($id);
			$year = $this->_active_year();
			$join_outlet = array(
				'outlet_tbl b' => 'a.outlet_id=b.outlet_id AND a.sales_status = 1 AND a.sales_id =' . $sales_id,
				'bc_tbl c' => 'b.bc_id = c.bc_id AND c.bc_id = ' . $bc_id,
				'outlet_brand_tbl d' => 'a.outlet_id = d.outlet_id AND d.outlet_brand_status = 1',
				'brand_tbl e' => 'd.brand_id = e.brand_id'
			);
			$check_outlet = $this->admin->check_join('sales_tbl a', $join_outlet, TRUE);

			if($check_outlet['result'] == TRUE){
				$data['outlet_name'] = $check_outlet['info']->outlet_name;
				$data['bc_name'] = $check_outlet['info']->bc_name;
				$data['brand_name'] = $check_outlet['info']->brand_name;
				$data['outlet_id'] = encode($check_outlet['info']->outlet_id);
				$data['bc_id'] = encode($check_outlet['info']->bc_id);
				$outlet_id = $check_outlet['info']->outlet_id;

				$join = array(
					'brand_material_tbl b' => 'a.material_id = b.material_id',
					'brand_tbl c' => 'b.brand_id = c.brand_id',
					'outlet_brand_tbl d' => 'c.brand_id = d.brand_id',
					'outlet_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_id = ' . $outlet_id,
					'unit_tbl f' => 'a.unit_id = f.unit_id',
					'material_unit_tbl g' => 'a.material_id = g.material_id',
					'unit_tbl h' => 'g.valuation_unit = h.unit_id',
					'material_group_tbl i' => 'a.material_group_id = i.material_group_id'
				);

				$where = 'a.material_id NOT IN (SELECT y.material_id FROM sales_tbl x, sales_item_tbl y WHERE x.sales_id = y.sales_id AND  y.sales_item_status = 1 AND x.sales_id = ' . $sales_id . ')';
				$data['material'] = $this->admin->get_join('material_tbl a', $join, FALSE, FALSE, FALSE, FALSE, $where);

				$data['content'] = $this->load->view('bc/bc_sales_add_item', $data , TRUE);
				$this->load->view('bc/templates', $data);
			}else{
				redirect('business-center/sales-info');
			}
		}else{
			redirect('business-center/sales-info');
		}
	}

	public function add_trans_sales_item(){

		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$sales_id = decode($this->input->post('id'));
			$material = $this->input->post('material');
			$asp = $this->input->post('asp');
			$qty = $this->input->post('budget_qty');
			$user_id = decode($info['user_id']);
			if(!empty($sales_id) && !empty($material) && !empty($asp) && !empty($qty) && !empty($user_id)){
				$this->db->trans_start();
				$check_sales = $this->admin->check_data('sales_tbl', array('sales_id' => $sales_id, 'sales_status' => 1), TRUE);
				if($check_sales['info'] == TRUE){
					$bc_id = $check_outlet['info']->bc_id;
					$year = $this->_active_year();
					
					$count = 0;
					foreach($material as $row):
						$material_id = decode($row);
						$check_material = $this->admin->check_data('material_tbl', array('material_id' => $material_id, 'material_status' => 1));
						if($check_material == TRUE){

							$jan_budget_qty = check_num($qty['jan'][$count]);
							$feb_budget_qty = check_num($qty['feb'][$count]);
							$mar_budget_qty = check_num($qty['mar'][$count]);
							$apr_budget_qty = check_num($qty['apr'][$count]);
							$may_budget_qty = check_num($qty['may'][$count]);
							$jun_budget_qty = check_num($qty['jun'][$count]);
							$jul_budget_qty = check_num($qty['jul'][$count]);
							$aug_budget_qty = check_num($qty['aug'][$count]);
							$sep_budget_qty = check_num($qty['sep'][$count]);
							$oct_budget_qty = check_num($qty['oct'][$count]);
							$nov_budget_qty = check_num($qty['nov'][$count]);
							$dec_budget_qty = check_num($qty['dec'][$count]);

							$total_qty = $jan_budget_qty + $feb_budget_qty + $mar_budget_qty + $apr_budget_qty + $may_budget_qty + $jun_budget_qty + $jul_budget_qty + $aug_budget_qty + $sep_budget_qty + $oct_budget_qty + $nov_budget_qty + $dec_budget_qty;

							if($total_qty == TRUE){
								$set_item = array(
									'sales_id' => $sales_id,
									'material_id' => $material_id,
									'user_id' => $user_id,
									'sales_item_added' => date_now(),
									'sales_item_status' => 1
								);

								$insert_item = $this->admin->insert_data('sales_item_tbl', $set_item, TRUE);
								$sale_item_id = $insert_item['id'];


							
								$jan_asp_qty = check_num($asp['jan'][$count]);
								$set_jan = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $jan_budget_qty,
									'sales_det_asp' => $jan_asp_qty,
									'sales_det_date' => $year . '-01-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_jan);

								$feb_asp_qty = check_num($asp['feb'][$count]);
								$set_feb = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $feb_budget_qty,
									'sales_det_asp' => $feb_asp_qty,
									'sales_det_date' => $year . '-02-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_feb);

								
								$mar_asp_qty = check_num($asp['mar'][$count]);
								$set_mar = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $mar_budget_qty,
									'sales_det_asp' => $mar_asp_qty,
									'sales_det_date' => $year . '-03-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_mar);

								
								$apr_asp_qty = check_num($asp['apr'][$count]);
								$set_apr = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $apr_budget_qty,
									'sales_det_asp' => $apr_asp_qty,
									'sales_det_date' => $year . '-04-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_apr);

								$may_asp_qty = check_num($asp['may'][$count]);
								$set_may = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $may_budget_qty,
									'sales_det_asp' => $may_asp_qty,
									'sales_det_date' => $year . '-05-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_may);

								$jun_asp_qty = check_num($asp['jun'][$count]);
								$set_jun = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $jun_budget_qty,
									'sales_det_asp' => $jun_asp_qty,
									'sales_det_date' => $year . '-06-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_jun);

								
								$jul_asp_qty = check_num($asp['jul'][$count]);
								$set_jul = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $jul_budget_qty,
									'sales_det_asp' => $jul_asp_qty,
									'sales_det_date' => $year . '-07-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_jul);

								$aug_asp_qty = check_num($asp['aug'][$count]);
								$set_aug = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => check_num($aug_budget_qty),
									'sales_det_asp' => check_num($aug_asp_qty),
									'sales_det_date' => $year . '-08-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_aug);

								$sep_asp_qty = check_num($asp['sep'][$count]);
								$set_sep = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $sep_budget_qty,
									'sales_det_asp' => $sep_asp_qty,
									'sales_det_date' => $year . '-09-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_sep);


								$oct_asp_qty = check_num($asp['oct'][$count]);
								$set_oct = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $oct_budget_qty,
									'sales_det_asp' => $oct_asp_qty,
									'sales_det_date' => $year . '-10-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_oct);

								$nov_asp_qty = check_num($asp['nov'][$count]);
								$set_nov = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $nov_budget_qty,
									'sales_det_asp' => $nov_asp_qty,
									'sales_det_date' => $year . '-11-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_nov);

								
								$dec_asp_qty = check_num($asp['dec'][$count]);
								$set_dec = array(
									'sales_item_id' => $sale_item_id,
									'sales_det_qty' => $dec_budget_qty,
									'sales_det_asp' => $dec_asp_qty,
									'sales_det_date' => $year . '-12-01',
									'sales_det_status' => 1
								);

								$this->admin->insert_data('sales_details_tbl', $set_dec);
							}
						}

						$count++;
					endforeach;


					if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please contact your administrator!</div>';
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success">Sales item added.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}
			$this->session->set_flashdata('message', $msg);
			redirect('business-center/sales-view/' . encode($sales_id));
		}else{
			redirect('admin');
		}
	}

	public function cancel_sales(){
		$info = $this->_require_login();
		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		$module = 'SALES';

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('sales_id' => $id);
			$join_id = array(
				'outlet_tbl b' => 'a.outlet_id = b.outlet_id AND a.sales_status = 1 AND a.sales_id = ' . $id,
				'bc_tbl c' => 'b.bc_id = c.bc_id'
			);
			$check_id = $this->admin->check_join('sales_tbl a', $join_id, TRUE);
			if($check_id['result'] == TRUE){
				$bc_id = $check_id['info']->bc_id;
				$sales_id = $check_id['info']->sales_id;

				$year  = $check_id['info']->sales_year;
				$budget_status = $this->check_module($module, $year, $bc_id);

				if($budget_status == 1){
					$set = array('sales_status' => 0);
					$remove_sales = $this->admin->update_data('sales_tbl', $set, $where);
					
					if($remove_sales == TRUE){
						$msg = '<div class="alert alert-success">Outlet Sales successfully removed.</strong></div>';
					}else{
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}

					$this->session->set_flashdata('message', $msg);
					redirect('business-center/sales-info/');
				}else{
					redirect('business-center/sales-info/');
				}
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('business-center/sales-info/');
			}
		}
	}

	public function get_sales_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$sales_item_id = clean_data(decode($this->input->post('id')));
			$join_item = array(
				'material_tbl b' => 'a.material_id = b.material_id AND a.sales_item_status = 1 AND a.sales_item_id = ' . $sales_item_id
			);
			$check_item = $this->admin->check_join('sales_item_tbl a', $join_item, TRUE);

			if($check_item['result'] == TRUE){
				$material_code = $check_item['info']->material_code;
				$material_desc = $check_item['info']->material_desc;
				
				$join_get_item = array(
					'sales_item_tbl b' => 'a.sales_item_id = b.sales_item_id AND b.sales_item_status = 1 AND a.sales_det_status = 1 AND b.sales_item_id = ' . $sales_item_id,
				);

				$get_item = $this->admin->get_join('sales_details_tbl a', $join_get_item, FALSE, 'a.sales_det_date ASC', FALSE, 'a.sales_det_qty, a.sales_det_asp, MONTHNAME(a.sales_det_date) as sales_budget_date');

				$qty = array(
					'January' => 0,
					'February' => 0,
					'March' => 0,
					'April' => 0,
					'May' => 0, 
					'June' => 0,
					'July' => 0,
					'August' => 0,
					'September' => 0,
					'October' => 0,
					'November' => 0,
					'December' => 0
				);

				$asp = array(
					'January' => 0,
					'February' => 0,
					'March' => 0,
					'April' => 0,
					'May' => 0, 
					'June' => 0,
					'July' => 0,
					'August' => 0,
					'September' => 0,
					'October' => 0,
					'November' => 0,
					'December' => 0
				);

				$total_qty = 0;
				foreach($get_item as $row_item){
					$qty[$row_item->sales_budget_date] += $row_item->sales_det_qty;
					$asp[$row_item->sales_budget_date] += $row_item->sales_det_asp;
					$total_qty += $row_item->sales_det_qty;
				}


				$details = array(
					'code' => $material_code,
					'desc' => $material_desc,
					'total' => $total_qty,
					'qty' => $qty,
					'asp' => $asp
				);

				$data['result'] = 1;
				$data['info'] = $details;
			}else{
				$data['result'] = 0;
			}
		}else{
			$data['result'] = 0;
		}

		echo json_encode($data);
	}

	public function update_sales_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = $this->input->post('id');
			$qty = clean_data($this->input->post('qty'));
			$asp = clean_data($this->input->post('asp'));

			$count = 0;
			$this->db->trans_start();
			foreach($id as $row_id){
				$item_id = decode($row_id);
				$check_item = $this->admin->check_data('sales_item_tbl', array('sales_item_id' => $item_id), TRUE);

				if($check_item['result'] == TRUE){
					$sales_id = $check_item['info']->sales_id;

					$item_qty = $qty['jan'][$count];
					$item_asp = $asp['jan'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 1, 'sales_det_status' => 1));
					
					$item_qty = $qty['feb'][$count];
					$item_asp = $asp['feb'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 2, 'sales_det_status' => 1));


					$item_qty = $qty['mar'][$count];
					$item_asp = $asp['mar'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 3, 'sales_det_status' => 1));

					$item_qty = $qty['apr'][$count];
					$item_asp = $asp['apr'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 4, 'sales_det_status' => 1));

					$item_qty = $qty['may'][$count];
					$item_asp = $asp['may'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 5, 'sales_det_status' => 1));


					$item_qty = $qty['jun'][$count];
					$item_asp = $asp['jun'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 6, 'sales_det_status' => 1));

					$item_qty = $qty['jul'][$count];
					$item_asp = $asp['jul'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 7, 'sales_det_status' => 1));

					$item_qty = $qty['aug'][$count];
					$item_asp = $asp['aug'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 8, 'sales_det_status' => 1));

					$item_qty = $qty['sep'][$count];
					$item_asp = $asp['sep'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 9, 'sales_det_status' => 1));

					$item_qty = $qty['oct'][$count];
					$item_asp = $asp['oct'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 10, 'sales_det_status' => 1));

					$item_qty = $qty['nov'][$count];
					$item_asp = $asp['nov'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 11, 'sales_det_status' => 1));

					$item_qty = $qty['dec'][$count];
					$item_asp = $asp['dec'][$count];
					$update_item = $this->admin->update_data('sales_details_tbl', array('sales_det_qty' => $item_qty, 'sales_det_asp' => $item_asp), array('sales_item_id' => $item_id, 'MONTH(sales_det_date)' => 12, 'sales_det_status' => 1));
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
					$this->session->set_flashdata('message', $msg);
					redirect('business-center/sales-view/' . encode($sales_id));
				}

				$count++;
			}

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success">Sales successfully updated.</strong></div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('business-center/sales-view/' . encode($sales_id));
		}
	}

	public function upload_sales(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		$check_budget = $this->admin->check_data('close_budget_tbl', array('close_status' => 1));
		
		if($check_budget == FALSE){
			
			$year = $this->_active_year();
			if($_SERVER['REQUEST_METHOD'] == 'POST'){
				$this->load->library('excel');
				ini_set('max_execution_time', 0); 
				ini_set('memory_limit','2048M');
				
				$temp_code = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 10);

				$config['upload_path']   = 'assets/budget-temp';
		        $config['allowed_types'] = 'xls|xlsx|xlsb';
		        $config['file_name'] = 'tmp_' . $temp_code;
		        $this->load->library('upload', $config);
				
		        if (! $this->upload->do_upload('budget_file')) {
		            $error = array('error' => $this->upload->display_errors());
		            $msg = $this->upload->display_errors();
		            $this->session->set_flashdata('message', $msg);
		            redirect('business-center/sales-info');
		        }else{

						$data = array('upload_data' => $this->upload->data());
				        $file_name = $data['upload_data']['file_name'];

						$file = 'assets/budget-temp/' . $file_name;
						$data['file'] = $file_name;

			        	$this->db->trans_start();

						$objPHPExcel = PHPExcel_IOFactory::load($file);
						//get only the Cell Collection
						$cell_collection = $objPHPExcel->getActiveSheet()->getCellCollection();
						$data['excel_data'] = '';
						
						$bc = $objPHPExcel->getActiveSheet()->getCell('B1')->getValue();

						$check_bc = $this->admin->check_data('bc_tbl', array('bc_name' => strtoupper($bc)), TRUE);
						$bc_id = '';
						if($check_bc['result'] == TRUE){
							$bc_id = $check_bc['info']->bc_id;
							$high_column = $objPHPExcel->getActiveSheet()->getHighestColumn();
							$high =PHPExcel_Cell::columnIndexFromString($high_column);
							for($a = 3; $a <= $high; $a = $a + 24){
								
								$column_outlet = PHPExcel_Cell::stringFromColumnIndex($a);
								$column_outlet . '6 - ';
								$outlet_code = $objPHPExcel->getActiveSheet()->getCell($column_outlet . '6')->getValue();
								
								if(!empty($outlet_code)){
									$check_outlet = $this->admin->check_data('outlet_tbl', array('ifs_code' => strtoupper($outlet_code), 'outlet_status_id' => 1), TRUE);

									if($check_outlet['result'] == TRUE){
										$outlet_id = $check_outlet['info']->outlet_id;

										$check_budget = $this->admin->check_data('sales_tbl', array('outlet_id' => $outlet_id, 'sales_year' => $year, 'sales_status' => 1));

										if($check_budget == FALSE){
											$set_sales = array(
												'outlet_id' => $outlet_id,
												'trans_type_id' => 1,
												'user_id' => $user_id,
												'sales_file' => $file,
												'sales_year' => $year,
												'sales_added' => date_now(),
												'sales_status' => 1
											);

											$insert_sales = $this->admin->insert_data('sales_tbl', $set_sales, TRUE);
											$sales_id = $insert_sales['id'];

											$high_row = $objPHPExcel->getActiveSheet()->getHighestRow();
											
											for($b = 9; $b <= $high_row; $b++){
												$qty_column = $column_outlet;
												
												$material_code = $objPHPExcel->getActiveSheet()->getCell('A' . $b)->getValue();

												$check_code = $this->admin->check_data('material_tbl', array('material_code' => strtoupper($material_code), 'material_status' => 1), TRUE);
												if($check_code['result'] == TRUE){

													$checker_qty = $qty_column;
													$jan_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$checker_qty++;
													$feb_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$checker_qty++;
													$mar_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$checker_qty++;
													$apr_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$checker_qty++;
													$may_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$checker_qty++;
													$jun_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$checker_qty++;
													$jul_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$checker_qty++;
													$aug_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$checker_qty++;
													$sep_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$checker_qty++;
													$oct_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$checker_qty++;
													$nov_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();
													$checker_qty++;
													$checker_qty++;
													$dec_qty = $objPHPExcel->getActiveSheet()->getCell($checker_qty . $b)->getValue();

													$total_qty = $jan_qty + $feb_qty + $mar_qty + $apr_qty + $may_qty + $jun_qty + $jul_qty + $aug_qty + $sep_qty + $oct_qty + $nov_qty + $dec_qty;

													if($total_qty > 0){

														$material_id = $check_code['info']->material_id;
														$set_item = array(
															'sales_id' => $sales_id,
															'material_id' => $material_id,
															'user_id' => $user_id,
															'sales_item_added' => date_now(),
															'sales_item_status' => 1
														);

														$insert_item = $this->admin->insert_data('sales_item_tbl', $set_item, TRUE);
														$sales_item_id = $insert_item['id'];


														$date = $year . '-01-01';
														//$jan_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;
														$jan_asp = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;

														$set_details = array(
															'sales_item_id' => $sales_item_id,
															'sales_det_qty' => check_num($jan_qty),
															'sales_det_asp' => check_num($jan_asp),
															'sales_det_date' => $date,
															'sales_det_added' => date_now(),
															'sales_det_status' => 1
														);
														$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

														$date = $year . '-02-01';
														//$feb_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;
														$feb_asp = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;

														$set_details = array(
															'sales_item_id' => $sales_item_id,
															'sales_det_qty' => check_num($feb_qty),
															'sales_det_asp' => check_num($feb_asp),
															'sales_det_date' => $date,
															'sales_det_added' => date_now(),
															'sales_det_status' => 1
														);
														$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);
														
														$date = $year . '-03-01';
														//$mar_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;
														$mar_asp = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;
														
														$set_details = array(
															'sales_item_id' => $sales_item_id,
															'sales_det_qty' => check_num($mar_qty),
															'sales_det_asp' => check_num($mar_asp),
															'sales_det_date' => $date,
															'sales_det_added' => date_now(),
															'sales_det_status' => 1
														);
														$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

														$date = $year . '-04-01';
														//$apr_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;
														$apr_asp = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;

														$set_details = array(
															'sales_item_id' => $sales_item_id,
															'sales_det_qty' => check_num($apr_qty),
															'sales_det_asp' => check_num($apr_asp),
															'sales_det_date' => $date,
															'sales_det_added' => date_now(),
															'sales_det_status' => 1
														);
														$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

														$date = $year . '-05-01';
														//$may_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;
														$may_asp = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;

														$set_details = array(
															'sales_item_id' => $sales_item_id,
															'sales_det_qty' => check_num($may_qty),
															'sales_det_asp' => check_num($may_asp),
															'sales_det_date' => $date,
															'sales_det_added' => date_now(),
															'sales_det_status' => 1
														);
														$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

														$date = $year . '-06-01';
														//$jun_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;
														$jun_asp = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;

														$set_details = array(
															'sales_item_id' => $sales_item_id,
															'sales_det_qty' => check_num($jun_qty),
															'sales_det_asp' => check_num($jun_asp),
															'sales_det_date' => $date,
															'sales_det_added' => date_now(),
															'sales_det_status' => 1
														);
														$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

														$date = $year . '-07-01';
														//$jul_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;
														$jul_asp = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;

														$set_details = array(
															'sales_item_id' => $sales_item_id,
															'sales_det_qty' => check_num($jul_qty),
															'sales_det_asp' => check_num($jul_asp),
															'sales_det_date' => $date,
															'sales_det_added' => date_now(),
															'sales_det_status' => 1
														);
														$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

														$date = $year . '-08-01';
														//$aug_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;
														$aug_asp = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;
														
														
														$set_details = array(
															'sales_item_id' => $sales_item_id,
															'sales_det_qty' => check_num($aug_qty),
															'sales_det_asp' => check_num($aug_asp),
															'sales_det_date' => $date,
															'sales_det_added' => date_now(),
															'sales_det_status' => 1
														);
														$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

														$date = $year . '-09-01';
														//$sep_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;
														$sep_asp = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;

														$set_details = array(
															'sales_item_id' => $sales_item_id,
															'sales_det_qty' => check_num($sep_qty),
															'sales_det_asp' => check_num($sep_asp),
															'sales_det_date' => $date,
															'sales_det_added' => date_now(),
															'sales_det_status' => 1
														);
														$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

														$date = $year . '-10-01';
														//$oct_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;
														$oct_asp = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;

														$set_details = array(
															'sales_item_id' => $sales_item_id,
															'sales_det_qty' => check_num($oct_qty),
															'sales_det_asp' => check_num($oct_asp),
															'sales_det_date' => $date,
															'sales_det_added' => date_now(),
															'sales_det_status' => 1
														);
														$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);

														$date = $year . '-11-01';
														//$nov_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;
														$nov_asp = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;

														$set_details = array(
															'sales_item_id' => $sales_item_id,
															'sales_det_qty' => check_num($nov_qty),
															'sales_det_asp' => check_num($nov_asp),
															'sales_det_date' => $date,
															'sales_det_added' => date_now(),
															'sales_det_status' => 1
														);
														$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);


														$date = $year . '-12-01';
														//$dec_qty = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;
														$dec_asp = $objPHPExcel->getActiveSheet()->getCell($qty_column . $b)->getValue();
														$qty_column++;

														$set_details = array(
															'sales_item_id' => $sales_item_id,
															'sales_det_qty' => check_num($dec_qty),
															'sales_det_asp' => check_num($dec_asp),
															'sales_det_date' => $date,
															'sales_det_added' => date_now(),
															'sales_det_status' => 1
														);
														$insert_details = $this->admin->insert_data('sales_details_tbl', $set_details);
													}
												}else{
													$this->db->trans_rollback();
													$msg = '<div class="alert alert-danger">Material code not exist line ' . $b . '!</div>';
													$this->session->set_flashdata('message', $msg);
													redirect('business-center/sales-info/');
												}
											}
										}else{
											$this->db->trans_rollback();
											$msg = '<div class="alert alert-danger">Outlet (' . $outlet_code . ') already has a data in column ' . $column_outlet . ' !</div>';
											$this->session->set_flashdata('message', $msg);
											redirect('business-center/sales-info/');
										}
									}else{
										$this->db->trans_rollback();
										$msg = '<div class="alert alert-danger">Outlet not exist column ' . $column_outlet . ' !</div>';
										$this->session->set_flashdata('message', $msg);
										redirect('business-center/sales-info/');
									}
								}else{
									$a = $high + 1;
								}
								
							}
						}else{
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Business Center not exist!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect('business-center/sales-info/');
						}

						if($this->db->trans_status() === FALSE){
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect('business-center/sales-info/');
						}else{
							$this->db->trans_commit();
							$msg = '<div class="alert alert-success">Budget uploaded!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect('business-center/sales-info/');
						}
				}
			}else{
				redirect('business-center');
			}
		}else{
			redirect('business-center/sales-info/');
		}
	}

	public function download_sales_templates($id, $brand){


		$year = $this->_active_year();
		$this->load->model('admin_model');
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$bc_id = decode($id);
		$brand_id = decode($brand);
		$check_bc = $this->admin->check_data('bc_tbl', array('bc_id' => $bc_id, 'bc_status' => 1), TRUE);

		if($check_bc['result'] == TRUE){
			$bc_name = $check_bc['info']->bc_name;
			$check_user = $this->admin->check_data('user_tbl', array('user_id' => $user_id), TRUE);
			if($check_user['result'] == TRUE){
				$name = $check_user['info']->user_lname . ', ' . $check_user['info']->user_fname;
				$check_brand = $this->admin->check_data('brand_tbl', array('brand_id' => $brand_id), TRUE);
				if($check_brand['result'] == TRUE){
					$brand_name = $check_brand['info']->brand_name;
				}else{
					exit;
				}

			}else{
				exit;
			}
			
		}else{
			exit;
		}


		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('Sales Templates')
				->setSubject('Sales Module')
				->setDescription('Sales Templates');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);

		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_material = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_mat_code= array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$spreadsheet->getActiveSheet()->getStyle("A1:B4")->applyFromArray($style_info);


		/*$spreadsheet->getActiveSheet()->getStyle("A1:I1")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A1:I1")->applyFromArray($style_info);*/
		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1",'Business Center:')
				->setCellValue("B1",$bc_name)

				->setCellValue("A2","Brand:")
				->setCellValue("B2", $brand_name)

				->setCellValue("A3", "Download Date:")
				->setCellValue("B3", date('m-d-Y'))

				->setCellValue("A4", "User: ")
				->setCellValue("B4", $name);

		$join_outlet = array(
			'outlet_brand_tbl b' => 'a.outlet_id = b.outlet_id AND b.outlet_brand_status = 1 AND a.outlet_status_id = 1',
			'brand_tbl c' => 'b.brand_id = c.brand_id AND c.brand_id = ' . $brand_id,
			'bc_tbl d' => 'a.bc_id = d.bc_id AND d.bc_id = ' . $bc_id,

		);

		$get_outlet = $this->admin->get_join('outlet_tbl a', $join_outlet, FALSE, FALSE, FALSE, FALSE, 'a.outlet_id NOT IN (SELECT x.outlet_id FROM sales_tbl x WHERE a.outlet_id = x.outlet_id AND x.sales_status = 1 AND x.sales_year = ' . $year . ')');
		$start = 3;
		$num = 5;
		$count = 0;
		foreach($get_outlet as $row_outlet){
			$column_name = PHPExcel_Cell::stringFromColumnIndex($start) . $num;
			$column_code = PHPExcel_Cell::stringFromColumnIndex($start) . ($num + 1);
			$column_date_jan = PHPExcel_Cell::stringFromColumnIndex($start) . ($num + 2);
			$column_date_feb = PHPExcel_Cell::stringFromColumnIndex($start + 2) . ($num + 2);
			$column_date_mar = PHPExcel_Cell::stringFromColumnIndex($start + 4) . ($num + 2);
			$column_date_apr = PHPExcel_Cell::stringFromColumnIndex($start + 6) . ($num + 2);
			$column_date_may = PHPExcel_Cell::stringFromColumnIndex($start + 8) . ($num + 2);
			$column_date_jun = PHPExcel_Cell::stringFromColumnIndex($start + 10) . ($num + 2);
			$column_date_jul = PHPExcel_Cell::stringFromColumnIndex($start + 12) . ($num + 2);
			$column_date_aug = PHPExcel_Cell::stringFromColumnIndex($start + 14) . ($num + 2);
			$column_date_sep = PHPExcel_Cell::stringFromColumnIndex($start + 16) . ($num + 2);
			$column_date_oct = PHPExcel_Cell::stringFromColumnIndex($start + 18) . ($num + 2);
			$column_date_nov = PHPExcel_Cell::stringFromColumnIndex($start + 20) . ($num + 2);
			$column_date_dec = PHPExcel_Cell::stringFromColumnIndex($start + 22) . ($num + 2);


			$qty_jan = PHPExcel_Cell::stringFromColumnIndex($start) . ($num + 3);
			$asp_jan = PHPExcel_Cell::stringFromColumnIndex($start + 1) . ($num + 3);
			$qty_feb = PHPExcel_Cell::stringFromColumnIndex($start + 2) . ($num + 3);
			$asp_feb = PHPExcel_Cell::stringFromColumnIndex($start + 3) . ($num + 3);
			$qty_mar = PHPExcel_Cell::stringFromColumnIndex($start + 4) . ($num + 3);
			$asp_mar = PHPExcel_Cell::stringFromColumnIndex($start + 5) . ($num + 3);
			$qty_apr = PHPExcel_Cell::stringFromColumnIndex($start + 6) . ($num + 3);
			$asp_apr = PHPExcel_Cell::stringFromColumnIndex($start + 7) . ($num + 3);
			$qty_may = PHPExcel_Cell::stringFromColumnIndex($start + 8) . ($num + 3);
			$asp_may = PHPExcel_Cell::stringFromColumnIndex($start + 9) . ($num + 3);
			$qty_jun = PHPExcel_Cell::stringFromColumnIndex($start + 10) . ($num + 3);
			$asp_jun = PHPExcel_Cell::stringFromColumnIndex($start + 11) . ($num + 3);
			$qty_jul = PHPExcel_Cell::stringFromColumnIndex($start + 12) . ($num + 3);
			$asp_jul = PHPExcel_Cell::stringFromColumnIndex($start + 13) . ($num + 3);
			$qty_aug = PHPExcel_Cell::stringFromColumnIndex($start + 14) . ($num + 3);
			$asp_aug = PHPExcel_Cell::stringFromColumnIndex($start + 15) . ($num + 3);
			$qty_sep = PHPExcel_Cell::stringFromColumnIndex($start + 16) . ($num + 3);
			$asp_sep = PHPExcel_Cell::stringFromColumnIndex($start + 17) . ($num + 3);
			$qty_oct = PHPExcel_Cell::stringFromColumnIndex($start + 18) . ($num + 3);
			$asp_oct = PHPExcel_Cell::stringFromColumnIndex($start + 19) . ($num + 3);
			$qty_nov = PHPExcel_Cell::stringFromColumnIndex($start + 20) . ($num + 3);
			$asp_nov = PHPExcel_Cell::stringFromColumnIndex($start + 21) . ($num + 3);
			$qty_dec = PHPExcel_Cell::stringFromColumnIndex($start + 22) . ($num + 3);
			$asp_dec = PHPExcel_Cell::stringFromColumnIndex($start + 23) . ($num + 3);

			$end_column = $asp_dec;
			$end_letter = PHPExcel_Cell::stringFromColumnIndex($start + 23);
			
			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue($column_name, $row_outlet->outlet_name)
				->setCellValue($column_code, $row_outlet->ifs_code)
				->setCellValue($column_date_jan, 'Jan ' . $year)
				->setCellValue($column_date_feb, 'Feb ' . $year)
				->setCellValue($column_date_mar, 'Mar ' . $year)
				->setCellValue($column_date_apr, 'Apr ' . $year)
				->setCellValue($column_date_may, 'May ' . $year)
				->setCellValue($column_date_jun, 'Jun ' . $year)
				->setCellValue($column_date_jul, 'Jul ' . $year)
				->setCellValue($column_date_aug, 'Aug ' . $year)
				->setCellValue($column_date_sep, 'Sep ' . $year)
				->setCellValue($column_date_oct, 'Oct ' . $year)
				->setCellValue($column_date_nov, 'Nov ' . $year)
				->setCellValue($column_date_dec, 'Dec ' . $year)
				;

			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue($qty_jan, 'QTY')
				->setCellValue($asp_jan, 'ASP')
				->setCellValue($qty_feb, 'QTY')
				->setCellValue($asp_feb, 'ASP')
				->setCellValue($qty_mar, 'QTY')
				->setCellValue($asp_mar, 'ASP')
				->setCellValue($qty_apr, 'QTY')
				->setCellValue($asp_apr, 'ASP')
				->setCellValue($qty_may, 'QTY')
				->setCellValue($asp_may, 'ASP')
				->setCellValue($qty_jun, 'QTY')
				->setCellValue($asp_jun, 'ASP')
				->setCellValue($qty_jul, 'QTY')
				->setCellValue($asp_jul, 'ASP')
				->setCellValue($qty_aug, 'QTY')
				->setCellValue($asp_aug, 'ASP')
				->setCellValue($qty_sep, 'QTY')
				->setCellValue($asp_sep, 'ASP')
				->setCellValue($qty_oct, 'QTY')
				->setCellValue($asp_oct, 'ASP')
				->setCellValue($qty_nov, 'QTY')
				->setCellValue($asp_nov, 'ASP')
				->setCellValue($qty_dec, 'QTY')
				->setCellValue($asp_dec, 'ASP')
			;	
			
			$column_outlet =  PHPExcel_Cell::stringFromColumnIndex($start + 23);	

			$merge_name = $column_name . ':' . $column_outlet . $num;
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_name);
			
			$merge_code = $column_code . ':' . $column_outlet . ($num + 1);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_code);

			/*January*/
			$start = $start + 1;
			$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);
			$merge_date = $column_date_jan . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

			/*February*/
			$start = $start + 2;
			$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_feb . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

			/*March*/
			$start = $start + 2;
			$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_mar . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);
			
			/*April*/
			$start = $start + 2;
			$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_apr . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

			/*May*/
			$start = $start + 2;
			$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_may . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

			/*June*/
			$start = $start + 2;
			$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_jun . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

			/*July*/
			$start = $start + 2;
			$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_jul . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

			/*August*/
			$start = $start + 2;
			$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_aug . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

			/*September*/
			$start = $start + 2;
			$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_sep . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

			/*October*/
			$start = $start + 2;
			$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_oct . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

			/*November*/
			$start = $start + 2;
			$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_nov . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

			/*December*/
			$start = $start + 2;
			$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_dec . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);

			$start = $start + 1;

			//exit;
		}

		$spreadsheet->getActiveSheet()->getStyle("D5:" . $end_column)->applyFromArray($style_border);


		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A8",'Material Code')
				->setCellValue("B8", 'Material Desc')
				->setCellValue("C8", 'UOM')
		;

		$spreadsheet->getActiveSheet()->getStyle("A8:C8")->applyFromArray($style_border);
		// Rename worksheet

		$join_mat = array(
			'brand_material_tbl b' => 'a.material_id = b.material_id AND b.brand_material_status = 1',
			'brand_tbl c' => 'b.brand_id = c.brand_id AND c.brand_id = ' . $brand_id,
			'unit_tbl d' => 'a.unit_id = d.unit_id'
		);

		$get_mat = $this->admin->get_join('material_tbl a', $join_mat);
		
		$mat_start = 9;
		foreach($get_mat as $row_mat){
			$mat_code_col = 'A' . $mat_start;
			$mat_desc_col = 'B' . $mat_start;
			$mat_uom_col = 'C' . $mat_start;

			$mat_code = $row_mat->material_code;
			$mat_desc = $row_mat->material_desc;
			$mat_uom = $row_mat->unit_name;

			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue($mat_code_col, $mat_code)
				->setCellValue($mat_desc_col, $mat_desc)
				->setCellValue($mat_uom_col, $mat_uom)
			;
			$mat_start++;
		}

		$spreadsheet->getActiveSheet()->getStyle("C9:" . $end_letter . ($mat_start - 1))->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("B9:" . 'B'. ($mat_start - 1))->applyFromArray($style_material);
		$spreadsheet->getActiveSheet()->getStyle("A9:" . 'A'. ($mat_start - 1))->applyFromArray($style_mat_code);

		$spreadsheet->getActiveSheet()->freezePane('D9');
		
		$spreadsheet->getActiveSheet()->protectCells('D5:' . $end_letter . '8', 'b@v1-budgeting');
		$spreadsheet->getActiveSheet()->getStyle('D9:' . $end_letter . ($mat_start - 1))->getProtection()->setLocked(PHPExcel_Style_Protection::PROTECTION_UNPROTECTED);

		$spreadsheet->getActiveSheet()->getProtection()->setSelectLockedCells(true);
		$spreadsheet->getActiveSheet()->getProtection()->setPassword('b@v1-budgeting');
		$spreadsheet->getActiveSheet()->getProtection()->setSheet(true);

	

		$spreadsheet->getActiveSheet()->setTitle('Sales budget templates');

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Budgeting - Sales Templates (' . $brand_name . ') .xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function download_store_expense($brand){


		$year = $this->_active_year();
		$this->load->model('admin_model');
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		$user_info = $this->get_user_info();
		$cost_center_code = $user_info['cost_center_code'];

		$brand_id = decode($brand);
		$check_bc = $this->admin->check_data('bc_tbl', array('cost_center_code' => $cost_center_code, 'bc_status' => 1), TRUE);

		if($check_bc['result'] == TRUE){
			$bc_name = $check_bc['info']->bc_name;
			$check_user = $this->admin->check_data('user_tbl', array('user_id' => $user_id), TRUE);
			if($check_user['result'] == TRUE){
				$name = $check_user['info']->user_lname . ', ' . $check_user['info']->user_fname;
				$check_brand = $this->admin->check_data('brand_tbl', array('brand_id' => $brand_id), TRUE);
				if($check_brand['result'] == TRUE){
					$brand_name = $check_brand['info']->brand_name;
				}else{
					exit;
				}

			}else{
				exit;
			}
			
		}else{
			exit;
		}


		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('OPEX Store Expense Templates')
				->setSubject('Store Expense Module')
				->setDescription('Sales Templates');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);

		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_material = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_mat_code= array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$spreadsheet->getActiveSheet()->getStyle("A1:B4")->applyFromArray($style_info);


		/*$spreadsheet->getActiveSheet()->getStyle("A1:I1")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A1:I1")->applyFromArray($style_info);*/
		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1",'Business Center:')
				->setCellValue("B1",$bc_name)

				->setCellValue("A2","Brand:")
				->setCellValue("B2", $brand_name)

				->setCellValue("A3", "Download Date:")
				->setCellValue("B3", date('m-d-Y'))

				->setCellValue("A4", "User: ")
				->setCellValue("B4", $name);

		$join_outlet = array(
			'outlet_brand_tbl b' => 'a.outlet_id = b.outlet_id AND b.outlet_brand_status = 1',
			'brand_tbl c' => 'b.brand_id = c.brand_id AND c.brand_id = ' . $brand_id,
			'bc_tbl d' => 'a.bc_id = d.bc_id AND d.cost_center_code = "' . $cost_center_code . '"',
			'cost_center_tbl e' => 'a.ifs_code = e.cost_center_code AND e.cost_center_status = 1 '
		);

		$get_outlet = $this->admin->get_join('outlet_tbl a', $join_outlet, FALSE, FALSE, FALSE, FALSE, 'e.cost_center_id NOT IN (SELECT y.cost_center_id FROM gl_transaction_tbl x, gl_transaction_item_tbl y WHERE e.cost_center_id = y.cost_center_id AND x.gl_trans_id = y.gl_trans_id AND x.gl_trans_status = 1 AND y.gl_trans_item_status = 1)');

		$start = 2;
		$num = 5;
		$count = 0;
		foreach($get_outlet as $row_outlet){
			echo $count;
			echo '<br />';
			$count+
			$column_name = PHPExcel_Cell::stringFromColumnIndex($start) . $num;
			$column_code = PHPExcel_Cell::stringFromColumnIndex($start) . ($num + 1);
			$column_date_jan = PHPExcel_Cell::stringFromColumnIndex($start) . ($num + 2);
			$column_date_feb = PHPExcel_Cell::stringFromColumnIndex($start + 1) . ($num + 2);
			$column_date_mar = PHPExcel_Cell::stringFromColumnIndex($start + 2) . ($num + 2);
			$column_date_apr = PHPExcel_Cell::stringFromColumnIndex($start + 3) . ($num + 2);
			$column_date_may = PHPExcel_Cell::stringFromColumnIndex($start + 4) . ($num + 2);
			$column_date_jun = PHPExcel_Cell::stringFromColumnIndex($start + 5) . ($num + 2);
			$column_date_jul = PHPExcel_Cell::stringFromColumnIndex($start + 6) . ($num + 2);
			$column_date_aug = PHPExcel_Cell::stringFromColumnIndex($start + 7) . ($num + 2);
			$column_date_sep = PHPExcel_Cell::stringFromColumnIndex($start + 8) . ($num + 2);
			$column_date_oct = PHPExcel_Cell::stringFromColumnIndex($start + 9) . ($num + 2);
			$column_date_nov = PHPExcel_Cell::stringFromColumnIndex($start + 10) . ($num + 2);
			$column_date_dec = PHPExcel_Cell::stringFromColumnIndex($start + 11) . ($num + 2);


			/*$qty_jan = PHPExcel_Cell::stringFromColumnIndex($start) . ($num + 3);
			$qty_feb = PHPExcel_Cell::stringFromColumnIndex($start + 1) . ($num + 3);
			$qty_mar = PHPExcel_Cell::stringFromColumnIndex($start + 2) . ($num + 3);
			$qty_apr = PHPExcel_Cell::stringFromColumnIndex($start + 3) . ($num + 3);
			$qty_may = PHPExcel_Cell::stringFromColumnIndex($sart + 4) . ($num + 3);
			$qty_jun = PHPExcel_Cell::stringFromColumnIndetx($start + 5) . ($num + 3);
			$qty_jul = PHPExcel_Cell::stringFromColumnIndex($start + 6) . ($num + 3);
			$qty_aug = PHPExcel_Cell::stringFromColumnIndex($start + 7) . ($num + 3);
			$qty_sep = PHPExcel_Cell::stringFromColumnIndex($start + 8) . ($num + 3);
			$qty_oct = PHPExcel_Cell::stringFromColumnIndex($start + 9) . ($num + 3);
			$qty_nov = PHPExcel_Cell::stringFromColumnIndex($start + 10) . ($num + 3);
			$qty_dec = PHPExcel_Cell::stringFromColumnIndex($start + 11) . ($num + 3);*/

			$end_column = PHPExcel_Cell::stringFromColumnIndex($start + 11) . ($num + 3);
			$end_letter = PHPExcel_Cell::stringFromColumnIndex($start + 11);
			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue($column_name, $row_outlet->outlet_name)
				->setCellValue($column_code, $row_outlet->ifs_code)
				->setCellValue($column_date_jan, 'Jan ' . $year)
				->setCellValue($column_date_feb, 'Feb ' . $year)
				->setCellValue($column_date_mar, 'Mar ' . $year)
				->setCellValue($column_date_apr, 'Apr ' . $year)
				->setCellValue($column_date_may, 'May ' . $year)
				->setCellValue($column_date_jun, 'Jun ' . $year)
				->setCellValue($column_date_jul, 'Jul ' . $year)
				->setCellValue($column_date_aug, 'Aug ' . $year)
				->setCellValue($column_date_sep, 'Sep ' . $year)
				->setCellValue($column_date_oct, 'Oct ' . $year)
				->setCellValue($column_date_nov, 'Nov ' . $year)
				->setCellValue($column_date_dec, 'Dec ' . $year)
				;

			/*$spreadsheet->setActiveSheetIndex(0)
				->setCellValue($qty_jan, 'Amount')
				->setCellValue($qty_feb, 'Amount')
				->setCellValue($qty_mar, 'Amount')
				->setCellValue($qty_apr, 'Amount')
				->setCellValue($qty_may, 'Amount')
				->setCellValue($qty_jun, 'Amount')
				->setCellValue($qty_jul, 'QTY')
				->setCellValue($qty_aug, 'QTY')
				->setCellValue($qty_sep, 'QTY')
				->setCellValue($qty_oct, 'QTY')
				->setCellValue($qty_nov, 'QTY')
				->setCellValue($qty_dec, 'QTY')
			;	
			*/
			$column_outlet =  PHPExcel_Cell::stringFromColumnIndex($start + 11);

			$merge_name = $column_name . ':' . $column_outlet . $num;
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_name);
			
			$merge_code = $column_code . ':' . $column_outlet . ($num + 1);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_code);

			/*January*/
			//$start = $start + 1;
			/*$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);
			$merge_date = $column_date_jan . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);*/

			/*February*/
			//$start = $start + 2;
			/*$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_feb . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);*/

			/*March*/
			//$start = $start + 2;
			/*$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_mar . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);*/
			
			/*April*/
			//$start = $start + 2;
			/*$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_apr . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);*/

			/*May*/
			//$start = $start + 2;
			/*$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_may . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);*/

			/*June*/
			//$start = $start + 2;
			/*$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_jun . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);*/

			/*July*/
			//$start = $start + 2;
			/*$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_jul . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);*/

			/*August*/
			//$start = $start + 2;
			/*$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_aug . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);*/

			/*September*/
			//$start = $start + 2;
			/*$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_sep . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);*/

			/*October*/
			//$start = $start + 2;
			/*$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_oct . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);*/

			/*November*/
			//$start = $start + 2;
			/*$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_nov . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);*/

			/*December*/
			//$start = $start + 2;
			/*$outlet_a =  PHPExcel_Cell::stringFromColumnIndex($start);	
			$merge_date = $column_date_dec . ':' . $outlet_a . ($num + 2);
			$spreadsheet->setActiveSheetIndex(0)->mergeCells($merge_date);*/

			$start = $start + 12;
		}

		$spreadsheet->getActiveSheet()->getStyle("C5:" . $end_column)->applyFromArray($style_border);


		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A7",'GL Code')
				->setCellValue("B7", 'GL Name')
		;

		$spreadsheet->getActiveSheet()->getStyle("A7:B7")->applyFromArray($style_border);
		// Rename worksheet

		$join_gl = array(
			'gl_group_tbl b' => "a.gl_group_id = b.gl_group_id AND a.gl_sub_status = 1 AND b.gl_group_name = 'STORE EXPENSES'"
		);

		$get_gl = $this->admin->get_join('gl_subgroup_tbl a', $join_gl);
		
		
		$mat_start = 8;
		foreach($get_gl as $row_gl){
			$gl_code_col = 'A' . $mat_start;
			$gl_name_col = 'B' . $mat_start;

			$gl_code = $row_gl->gl_code;
			$gl_sub_name = $row_gl->gl_sub_name;

			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue($gl_code_col, $gl_code)
				->setCellValue($gl_name_col, $gl_sub_name)
			;
			$mat_start++;
		}

		$spreadsheet->getActiveSheet()->getStyle("C8:" . $end_letter . ($mat_start - 1))->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("B8:" . 'B'. ($mat_start - 1))->applyFromArray($style_material);
		$spreadsheet->getActiveSheet()->getStyle("A8:" . 'A'. ($mat_start - 1))->applyFromArray($style_mat_code);

		$spreadsheet->getActiveSheet()->freezePane('C8');
		
		$spreadsheet->getActiveSheet()->getProtection()->setSheet(true);
		$spreadsheet->getActiveSheet()->protectCells('A1:B4', 'b@v1-budgeting');
		$spreadsheet->getActiveSheet()->getStyle('C8:' . $end_letter . ($mat_start - 1))->getProtection()->setLocked(PHPExcel_Style_Protection::PROTECTION_UNPROTECTED);
		/*$spreadsheet->getActiveSheet()->protectCells('A9:C' . ($mat_start - 1), 'PHPExcel');*/

	

		$spreadsheet->getActiveSheet()->setTitle('OPEX Store Expenses');


		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Budgeting - Store Expense Templates (' . $brand_name . ').xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function employees(){
		$info = $this->_require_login();
		$user_info = $this->get_user_info();
 		$bc_id = $user_info['bc_id'];

		$module = 'MANPOWER';
		$active_year = $this->_active_year();

		$check_budget_status = $this->check_module($module, $active_year, $bc_id);

		if($check_budget_status == 1){
			$data['budget_status'] = 1;
		}else{
			$data['budget_status'] = 0;
		}

		$cost_center_id = $user_info['cost_center_id'];
		$data['title'] = 'Employees';
		$join_emp = array(
			'company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id AND a.emp_status = 1',
			'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id AND c.parent_id =' . $cost_center_id,
			'employee_type_tbl d' => 'a.emp_type_id = d.emp_type_id'
		);

		$data['employee'] = $this->admin->get_join('employee_tbl a', $join_emp);
		$data['type'] = $this->admin->get_data('employee_type_tbl', array('emp_type_status' => 1));
		$data['rank'] = $this->admin->get_data('rank_tbl', array('rank_status' => 1));
		$data['unit'] = $this->admin->get_data('company_unit_tbl', array('company_unit_status' => 1));
		$data['content'] = $this->load->view('bc/bc_employee_content', $data , TRUE);
		$this->load->view('bc/templates', $data);
	}

	public function get_new_emp(){
		$where = array('emp_type_id' => 2 , 'emp_status' => 1);
		$count = $this->admin->get_count('employee_tbl', $where) + 1;
		$format = 'NEW-EMP-';
		if($count > 0 && $count < 10){
			$format .= '00' . $count;
		}else if($count >= 10 && $count < 100){
			$format = $format . '0' . $count;
		}else{
			$format = $format . $count;
		}
		$data['result'] = 1;
		$data['info'] = $format;
		
		echo json_encode($data);
	}

	public function get_emp_cost_center(){
		$unit = decode($this->input->post('unit'));
		$user_info = $this->get_user_info();

		$cost_center_id = $user_info['cost_center_id'];
		$where = array('company_unit_id' => $unit , 'cost_center_type_id != ' => 2, 'cost_center_status' => 1, 'parent_id' => $cost_center_id);
		$get_cost_center = $this->admin->get_data('cost_center_tbl', $where);
		$cost_center_data = '<option value="">Select...</option>';
		foreach($get_cost_center as $row){
			$cost_center_data .= '<option value="' . encode($row->cost_center_id) . '">' . $row->cost_center_desc . '</option>';
		}

		$data['result'] = 1;
		$data['info'] = $cost_center_data;
		
		echo json_encode($data);
	}

	public function add_employee(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		$user_info = $this->get_user_info();
 		$bc_id = $user_info['bc_id'];

		$module = 'MANPOWER';
		$active_year = $this->_active_year();

		$check_budget_status = $this->check_module($module, $active_year, $bc_id);

		if($check_budget_status == 1){

			if($_SERVER['REQUEST_METHOD'] == 'POST'){
				$fname = clean_data($this->input->post('fname'));
				$lname = clean_data($this->input->post('lname'));
				$type = decode(clean_data($this->input->post('type')));
				$emp_no = clean_data($this->input->post('emp_no'));
				$salary = clean_data($this->input->post('salary'));
				$rank = decode(clean_data($this->input->post('rank')));
				$unit = decode(clean_data($this->input->post('unit')));
				$cost_center = decode(clean_data($this->input->post('cost_center')));

				if(!empty($fname) && !empty($fname) && !empty($type) && !empty($emp_no) && !empty($salary) && !empty($rank) && !empty($unit) && !empty($cost_center)){
					$check_code = $this->admin->check_data('cost_center_tbl', array('cost_center_id' =>  $cost_center));
					if($check_code == TRUE){
						$check_unit = $this->admin->check_data('company_unit_tbl', array('company_unit_id' =>  $unit, 'company_unit_status' => 1));
						if($check_unit == TRUE){
							$check_rank = $this->admin->check_data('rank_tbl', array('rank_id' =>  $rank, 'rank_status' => 1));
							if($check_rank == TRUE){
								$check_type = $this->admin->check_data('employee_type_tbl', array('emp_type_id' =>  $type, 'emp_type_status' => 1));
								if($check_type == TRUE){
									$set = array(
										'rank_id' => $rank,
										'company_unit_id' => $unit,
										'cost_center_id' => $cost_center,
										'emp_type_id' => $type,
										'emp_fname' => $fname,
										'emp_lname' => $lname,
										'emp_no' => $emp_no,
										'basic_salary' => $salary,
										'emp_added' => date_now(),
										'emp_status' => 1
									);
									$result = $this->admin->insert_data('employee_tbl', $set);
									
									if($result == TRUE){
										$msg = '<div class="alert alert-success">Employee successfully added.</div>';
									}else{
										$msg = '<div class="alert alert-danger">Error please try again!</div>';
									}
								}else{
									$msg = '<div class="alert alert-danger">Error in type please try again!</div>';	
								}
							}else{
								$msg = '<div class="alert alert-danger">Error in rank please try again!</div>';
							}
						}else{
							$msg = '<div class="alert alert-danger">Error in unit try again!</div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Error in cost center.</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('business-center/employees');
			}else{
				redirect('business-center');
			}
		}else{
			$msg = '<div class="alert alert-danger">Error manpower module is currently locked.</div>';
			$this->session->set_flashdata('message', $msg);
			redirect('business-center/employees');
		}
	}

	public function cancel_employee(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('emp_id' => $id);
			$check_id = $this->admin->check_data('employee_tbl a', $where);
			if($check_id == TRUE){
				$set = array('emp_status' => 0);
				$remove_opex = $this->admin->update_data('employee_tbl', $set, $where);
				
				if($remove_opex == TRUE){
					$msg = '<div class="alert alert-success">Employee successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('business-center/employees');
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('business-center/employees');
			}
		}
	}

	/*ALW for Live Sales*/

	public function live_alw(){
		$info = $this->_require_login();

		$check_budget = $this->admin->check_data('close_budget_tbl', array('close_status' => 1));
		
		if($check_budget == TRUE){
			$data['budget_status'] = 0;
		}else{
			$data['budget_status'] = 1;
		}

		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];

		$data['title'] = 'ALW for Live Sales';
		$year = $this->_active_year();
		$join_alw = array(
			'bc_tbl b' => 'b.bc_id = a.bc_id AND a.sales_live_alw_status = 1 AND a.sales_live_alw_year = ' . $year . ' AND b.bc_id = ' . $bc_id
		);

		$data['alw'] = $this->admin->get_join('sales_live_alw_tbl a', $join_alw, FALSE, FALSE, FALSE, '*, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 1) as alw_jan, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 2) as alw_feb, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 3) as alw_mar, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 4) as alw_apr, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 5) as alw_may, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 6) as alw_jun, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 7) as alw_jul, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 8) as alw_aug, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 9) as alw_sep, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 10) as alw_oct, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 11) as alw_nov, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 12) as alw_dec,');

		$where_bc = 'bc_id NOT IN(SELECT bc_id FROM sales_live_alw_tbl WHERE sales_live_alw_year = ' . $year . ' AND sales_live_alw_status = 1) AND bc_status = 1';
		$data['bc'] = $this->admin->get_data('bc_tbl', $where_bc);
		$data['content'] = $this->load->view('bc/bc_live_alw', $data , TRUE);
		$this->load->view('bc/templates', $data);
	}

	public function add_live_alw(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		$user_info = $this->get_user_info();
		$bc = $user_info['bc_id'];

		$year = $this->_active_year();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$jan = clean_data($this->input->post('jan_qty'));
			$feb = clean_data($this->input->post('feb_qty'));
			$mar = clean_data($this->input->post('mar_qty'));
			$apr = clean_data($this->input->post('apr_qty'));
			$may = clean_data($this->input->post('may_qty'));
			$jun = clean_data($this->input->post('jun_qty'));
			$jul = clean_data($this->input->post('jul_qty'));
			$aug = clean_data($this->input->post('aug_qty'));
			$sep = clean_data($this->input->post('sep_qty'));
			$oct = clean_data($this->input->post('oct_qty'));
			$nov = clean_data($this->input->post('nov_qty'));
			$dec = clean_data($this->input->post('dec_qty'));

			
			if(!empty($bc) && !empty($jan) && !empty($feb) && !empty($mar) && !empty($apr) && !empty($may) && !empty($jun) && !empty($jul) && !empty($aug) && !empty($sep) && !empty($oct) && !empty($nov) && !empty($dec)){
				$check_bc = $this->admin->check_data('bc_tbl', array('bc_id' =>  $bc));
				if($check_bc == TRUE){

					$check_alw = $this->admin->check_data('sales_live_alw_tbl', array('bc_id' => $bc, 'sales_live_alw_year' => $year, 'sales_live_alw_status' => 1));

					if($check_alw == FALSE){
						$this->db->trans_start();
						$set = array(
							'bc_id' => $bc,
							'user_id' => $user_id,
							'sales_live_alw_year' => $year,
							'sales_live_alw_added' => date_now(),
							'sales_live_alw_status' => 1,
						);
						$insert_trans_alw = $this->admin->insert_data('sales_live_alw_tbl', $set, TRUE);
						
						$id = $insert_trans_alw['id'];

						$date = $year . '-01-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $jan,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-02-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $feb,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-03-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $mar,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-04-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $apr,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-05-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $may,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-06-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $jun,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-07-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $jul,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-08-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $aug,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-09-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $sep,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);



						$date = $year . '-10-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $oct,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);



						$date = $year . '-11-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $nov,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);


						$date = $year . '-12-01';
						$set_details = array(
							'sales_live_alw_id' => $id,
							'sales_live_alw_det_value' => $dec,
							'sales_live_alw_det_date' => $date,
							'sales_live_alw_det_status' => 1
						);
						$this->admin->insert_data('sales_live_alw_detail_tbl', $set_details);

						if($this->db->trans_status() === FALSE){
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}else{
							$this->db->trans_commit();
							$msg = '<div class="alert alert-success"><strong>ALW for live sales successfully added.</strong></div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">ALW already exist.</div>';
					}

				}else{
					$msg = '<div class="alert alert-danger">Error in cost center.</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('business-center/live-alw');
		}else{
			redirect('business-center');
		}
	}

	public function get_alw(){
		$id = decode($this->input->post('id'));
		$check_id = $this->admin->check_data('sales_live_alw_tbl', array('sales_live_alw_id' => $id));
		if($check_id == TRUE){

			$join_alw = array(
				'bc_tbl b' => 'b.bc_id = a.bc_id AND a.sales_live_alw_status = 1 AND a.sales_live_alw_id = ' . $id
			);

			$alw = $this->admin->get_join('sales_live_alw_tbl a', $join_alw, TRUE, FALSE, FALSE, '*, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 1) as alw_jan, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 2) as alw_feb, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 3) as alw_mar, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 4) as alw_apr, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 5) as alw_may, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 6) as alw_jun, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 7) as alw_jul, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 8) as alw_aug, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 9) as alw_sep, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 10) as alw_oct, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 11) as alw_nov, (SELECT x.sales_live_alw_det_value FROM sales_live_alw_detail_tbl x WHERE a.sales_live_alw_id = x.sales_live_alw_id AND x.sales_live_alw_det_status = 1 AND MONTH(x.sales_live_alw_det_date) = 12) as alw_dec,');

			$data['result'] = 1;
			$data['info'] = $alw;
		
			echo json_encode($data);
		}
	}

	public function update_live_alw(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$year = $this->_active_year();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode(clean_data($this->input->post('id')));
			$jan = clean_data($this->input->post('jan_qty'));
			$feb = clean_data($this->input->post('feb_qty'));
			$mar = clean_data($this->input->post('mar_qty'));
			$apr = clean_data($this->input->post('apr_qty'));
			$may = clean_data($this->input->post('may_qty'));
			$jun = clean_data($this->input->post('jun_qty'));
			$jul = clean_data($this->input->post('jul_qty'));
			$aug = clean_data($this->input->post('aug_qty'));
			$sep = clean_data($this->input->post('sep_qty'));
			$oct = clean_data($this->input->post('oct_qty'));
			$nov = clean_data($this->input->post('nov_qty'));
			$dec = clean_data($this->input->post('dec_qty'));

			
			if(!empty($id) && !empty($jan) && !empty($feb) && !empty($mar) && !empty($apr) && !empty($may) && !empty($jun) && !empty($jul) && !empty($aug) && !empty($sep) && !empty($oct) && !empty($nov) && !empty($dec)){
				$check_id = $this->admin->check_data('sales_live_alw_tbl', array('sales_live_alw_id' =>  $id , 'sales_live_alw_status' => 1));
				if($check_id == TRUE){

					$this->db->trans_start();
			
					$set_details = array(
						'sales_live_alw_det_value' => $jan
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 1,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $feb
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 2,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $mar
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 3,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);
					

					$set_details = array(
						'sales_live_alw_det_value' => $apr
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 4,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $may
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 5,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $jun
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 6,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $jul
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 7,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $aug
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 8,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $sep
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 9,
						'sales_live_alw_det_status' => 1
					);
					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $oct
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 10,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $nov
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 11,
						'sales_live_alw_det_status' => 1
					);
					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_live_alw_det_value' => $dec
					);

					$where_details = array(
						'sales_live_alw_id' => $id,
						'MONTH(sales_live_alw_det_date)' => 12,
						'sales_live_alw_det_status' => 1
					);

					$this->admin->update_data('sales_live_alw_detail_tbl', $set_details, $where_details);

					if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success"><strong>ALW for live sales successfully added.</strong></div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error in cost center.</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('business-center/live-alw');
		}else{
			redirect('business-center');
		}
	}

	public function cancel_live_alw(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$where = array('sales_live_alw_id' => $id);
			$check_id = $this->admin->check_data('sales_live_alw_tbl a', $where);
			if($check_id == TRUE){
				$set = array('sales_live_alw_status' => 0);
				$remove_opex = $this->admin->update_data('sales_live_alw_tbl', $set, $where);
				
				if($remove_opex == TRUE){
					$msg = '<div class="alert alert-success">ALW for Live Sales successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('business-center/live-alw');
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('business-center/live-alw');
			}
		}
	}

	/*Tactical Price Module*/

	public function tactical_info(){
		$info = $this->_require_login();

		$check_budget = $this->admin->check_data('close_budget_tbl', array('close_status' => 1));
		
		if($check_budget == TRUE){
			$data['budget_status'] = 0;
		}else{
			$data['budget_status'] = 1;
		}

		$data['title'] = 'Tactical Price Info';

		$user_info = $this->get_user_info();
		$cost_center_code = $user_info['cost_center_code'];

		$join_id = array(
			'bc_tbl b' => 'a.cost_center_code = b.cost_center_code AND a.cost_center_code = "' . $cost_center_code .'"'
		);
		$check_id = $this->admin->check_join('cost_center_tbl a', $join_id, TRUE);

		if($check_id['result'] == TRUE){
			$bc_id = $check_id['info']->bc_id;
			$data['bc_name'] = $check_id['info']->bc_name;
			$year = $this->_active_year();
			$join_tactical = array(
				'outlet_tbl b' => 'b.outlet_id = a.outlet_id AND a.sales_tactical_status = 1 AND a.sales_tactical_year = ' . $year . ' AND b.bc_id = ' . $bc_id,
				'outlet_brand_tbl c' => 'b.outlet_id = c.outlet_id AND b.outlet_id = c.outlet_id AND c.outlet_brand_status = 1',
				'brand_tbl d' => 'c.brand_id = d.brand_id'
			);

			$data['tactical'] = $this->admin->get_join('sales_tactical_tbl a', $join_tactical);

			$where_brand = 'brand_type_id = 1 AND brand_status = 1';
			$data['brand'] = $this->admin->get_data('brand_tbl', $where_brand);
			$data['bc_id'] = encode($bc_id);
			$data['content'] = $this->load->view('bc/bc_tactical_info', $data , TRUE);
			$this->load->view('bc/templates', $data);
		}else{
			redirect('business-center/tactical-info');
		}
	}

	public function get_tactical_price_store(){
		$bc_code = decode($this->input->post('bc'));
		$brand_id = decode($this->input->post('brand'));
		$year = $this->_active_year();
		$join_id = array(
			'outlet_brand_tbl b' => 'a.outlet_id = b.outlet_id AND b.outlet_brand_status = 1',
			'brand_tbl c' => 'b.brand_id = c.brand_id AND c.brand_status = 1',
			'brand_type_tbl d' => 'c.brand_type_id = d.brand_type_id AND d.brand_type_status = 1'
		);

		$where = 'a.outlet_id NOT IN(SELECT x.outlet_id FROM sales_tactical_tbl x WHERE x.sales_tactical_year = ' . $year . ' AND x.sales_tactical_status = 1)  AND a.bc_id = "' . $bc_code .'" AND a.outlet_status_id = 1 AND d.brand_type_name = "RETAIL" AND c.brand_id = ' . $brand_id;
		$get_outlet = $this->admin->get_join('outlet_tbl a', $join_id, FALSE, FALSE, FALSE, FALSE, $where);
		$outlet_data = '<option value="">Select...</option>';
		foreach($get_outlet as $row){
			$outlet_data .= '<option value="' . encode($row->outlet_id) . '">' . $row->outlet_name . ' - ' . $row->ifs_code . '</option>';
		}

		$join_material = array(
			'brand_material_tbl b' => 'a.material_id = b.material_id AND a.material_status = 1 AND b.brand_material_status = 1 AND b.brand_id = ' . $brand_id
		);
		$material = $this->admin->get_join('material_tbl a', $join_material);
		$mat_data = '';
		foreach($material as $row_mat){
			$mat_data .= '<tr>' ;
			$mat_data .= '<td><a href="" class="remove-tactical remove"><span class="fa fa-remove"></span></a>&nbsp;&nbsp;&nbsp;<a href="#" class="slider-tactical" data-count="2"><span class="fa fa-sliders"></span></a></td>';
			$mat_data .= '<td><input type="hidden" name="id[]" value="' . encode($row_mat->material_id) . '">' . $row_mat->material_desc . '</td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[jan][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[feb][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[mar][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[apr][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[may][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[jun][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[jul][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[aug][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[sep][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[oct][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[nov][]"></div></td>';
			$mat_data .= '<td><div class="form-group"><input type="text" class="tactical-qty" name="tactical[dec][]"></div></td>';
		}
		$info = array('outlet' => $outlet_data, 'material' => $mat_data);
		$data['result'] = 1;
		$data['info'] = $info;
		
		echo json_encode($data);
	}

	public function add_tactical_price(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		$year = $this->_active_year();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$outlet_id = decode(clean_data($this->input->post('outlet')));
			$material = clean_data($this->input->post('id'));
			$tactical = clean_data($this->input->post('tactical'));
			
			if(!empty($outlet_id) && !empty($material) && !empty($tactical)){

				$join_outlet = array(
					'bc_tbl b' => 'a.bc_id = b.bc_id AND a.outlet_status_id = 1 AND a.outlet_id = ' . $outlet_id . ' AND b.bc_id = ' . $bc_id
				);

				$check_outlet = $this->admin->check_join('outlet_tbl a', $join_outlet, TRUE);
				if($check_outlet['result'] == TRUE){
					$cost_center_code = $check_outlet['info']->cost_center_code;
					$check_tactical = $this->admin->check_data('sales_tactical_tbl', array('outlet_id' => $outlet_id, 'sales_tactical_year' => $year, 'sales_tactical_status' => 1));

					if($check_tactical == FALSE){

						$this->db->trans_start();
						$set = array(
							'outlet_id' => $outlet_id,
							'user_id' => $user_id,
							'sales_tactical_year' => $year,
							'sales_tactical_added' => date_now(),
							'sales_tactical_status' => 1,
						);
						$insert_trans = $this->admin->insert_data('sales_tactical_tbl', $set, TRUE);
						$sales_tactical_id = $insert_trans['id'];

						$count = 0;
						foreach($material as $row_mat){
							$jan = $tactical['jan'][$count];
							$feb = $tactical['feb'][$count];
							$mar = $tactical['mar'][$count];
							$apr = $tactical['apr'][$count];
							$may = $tactical['may'][$count];
							$jun = $tactical['jun'][$count];
							$jul = $tactical['jul'][$count];
							$aug = $tactical['aug'][$count];
							$sep = $tactical['sep'][$count];
							$oct = $tactical['oct'][$count];
							$nov = $tactical['nov'][$count];
							$dec = $tactical['dec'][$count];

							$total = $jan + $feb + $mar + $apr + $may + $jun + $jul + $aug + $sep + $oct + $nov + $dec;
							if($total > 0){
								$material_id = decode($row_mat);
								$check_material = $this->admin->check_data('material_tbl', array('material_id' => $material_id, 'material_status' => 1));
								if($check_material == TRUE){
									$set_item = array(
										'sales_tactical_id' => $sales_tactical_id,
										'material_id' => $material_id,
										'user_id' => $user_id,
										'sales_tactical_item_added' => date_now(),
										'sales_tactical_item_status' => 1
									);


									$insert_item = $this->admin->insert_data('sales_tactical_item_tbl', $set_item, TRUE);
									$sales_tactical_item_id = $insert_item['id'];

									$date = $year . '-01-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $jan,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-02-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $feb,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-03-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $mar,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-04-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $apr,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-05-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $may,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-06-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $jun,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-07-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $jul,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-08-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $aug,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-09-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $sep,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);



									$date = $year . '-10-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $oct,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);



									$date = $year . '-11-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $nov,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);


									$date = $year . '-12-01';
									$set_details = array(
										'sales_tactical_item_id' => $sales_tactical_item_id,
										'amount_type_id' => 2,
										'sales_tactical_det_price' => $dec,
										'sales_tactical_det_date' => $date,
										'sales_tactical_det_status' => 1
									);
									$this->admin->insert_data('sales_tactical_details_tbl', $set_details);

								}else{
									$this->db->trans_rollback();
									$msg = '<div class="alert alert-danger">Material not exist.</div>';
									redirect('business-center/tactical-info/');
								}
							}

							$count++;
						}

						if($this->db->trans_status() === FALSE){
							$this->db->trans_rollback();
							$msg = '<div class="alert alert-danger">Error please try again!</div>';
						}else{
							$this->db->trans_commit();
							$msg = '<div class="alert alert-success"><strong>Tactical Price successfully added.</strong></div>';
						}
					}else{
						$msg = '<div class="alert alert-danger">Outlet tactical price already exist.</div>';
					}

				}else{
					$msg = '<div class="alert alert-danger">Error in outlet.</div>';
				}
				
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('business-center/tactical-info/');
		}else{
			redirect('business-center');
		}
	}

	public function cancel_tactical_price(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$join = array(
				'outlet_tbl b' => ' a.outlet_id = b.outlet_id AND a.sales_tactical_id = ' . $id,
				'bc_tbl c' => 'b.bc_id = c.bc_id', 
			);

			$check_id = $this->admin->check_join('sales_tactical_tbl a', $join, TRUE);
			if($check_id['result'] == TRUE){
				$cost_center = $check_id['info']->cost_center_code;
				$where = array('sales_tactical_id' => $id);
				$set = array('sales_tactical_status' => 0);
				$remove_opex = $this->admin->update_data('sales_tactical_tbl', $set, $where);
				
				if($remove_opex == TRUE){
					$msg = '<div class="alert alert-success">Tactical price successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('business-center/tactical-info/');
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('business-center/tactical-info');
			}
		}
	}

	public function get_tactical(){
		$id = decode($this->input->post('id'));
		$check_id = $this->admin->check_data('sales_tactical_item_tbl', array('sales_tactical_item_id' => $id));
		if($check_id == TRUE){

			$join_tactical = array(
				'sales_tactical_item_tbl b' => 'b.sales_tactical_id = a.sales_tactical_id AND a.sales_tactical_status = 1 AND b.sales_tactical_item_status = 1 AND b.sales_tactical_item_id = ' . $id,
				'material_tbl c' => 'b.material_id = c.material_id',
				'outlet_tbl d' => 'a.outlet_id = d.outlet_id'
			);

			$tactical = $this->admin->get_join('sales_tactical_tbl a', $join_tactical, TRUE, FALSE, FALSE, 'c.material_desc as material, d.outlet_name as outlet, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 1) as tactical_jan, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 2) as tactical_feb, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 3) as tactical_mar, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 4) as tactical_apr, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 5) as tactical_may, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 6) as tactical_jun, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 7) as tactical_jul, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 8) as tactical_aug, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 9) as tactical_sep, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 10) as tactical_oct, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 11) as tactical_nov, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 12) as tactical_dec');

			$data['result'] = 1;
			$data['info'] = $tactical;
		
			echo json_encode($data);
		}
	}

	public function tactical_view($id){
		$info = $this->_require_login();

		$check_budget = $this->admin->check_data('close_budget_tbl', array('close_status' => 1));
		
		if($check_budget == TRUE){
			$data['budget_status'] = 0;
		}else{
			$data['budget_status'] = 1;
		}

		$data['title'] = 'View Tactical Price';

		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		$tactical_id = decode($id);

		$join_id = array(
			'outlet_tbl b' => 'b.outlet_id = a.outlet_id AND a.sales_tactical_status = 1 AND a.sales_tactical_id = ' . $tactical_id,
			'outlet_brand_tbl c' => 'b.outlet_id = c.outlet_id AND b.outlet_id = c.outlet_id AND c.outlet_brand_status = 1',
			'brand_tbl d' => 'c.brand_id = d.brand_id',
			'bc_tbl e' => 'b.bc_id = e.bc_id AND e.bc_id = ' . $bc_id,
		);
		$check_id = $this->admin->check_join('sales_tactical_tbl a', $join_id, TRUE);

		if($check_id['result'] == TRUE){
			$bc_id = $check_id['info']->bc_id;
			$data['bc_name'] = $check_id['info']->bc_name;
			$data['cost_center_code'] = encode($check_id['info']->cost_center_code);
			$data['outlet_name'] = $check_id['info']->outlet_name;
			$year = $this->_active_year();
			$join_tactical = array(
				'sales_tactical_item_tbl b' => 'b.sales_tactical_id = a.sales_tactical_id AND a.sales_tactical_status = 1 AND b.sales_tactical_item_status = 1 AND a.sales_tactical_id = ' . $tactical_id,
				'material_tbl c' => 'b.material_id = c.material_id'
			);

			$data['details'] = $this->admin->get_join('sales_tactical_tbl a', $join_tactical, FALSE, FALSE, FALSE, '*, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 1) as tactical_jan, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 2) as tactical_feb, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 3) as tactical_mar, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 4) as tactical_apr, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 5) as tactical_may,  (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 6) as tactical_jun, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 7) as tactical_jul, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 8) as tactical_aug, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 9) as tactical_sep, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 10) as tactical_oct, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 11) as tactical_nov, (SELECT x.sales_tactical_det_price FROM sales_tactical_details_tbl x WHERE b.sales_tactical_item_id = x.sales_tactical_item_id AND x.sales_tactical_det_status = 1 AND MONTH(x.sales_tactical_det_date) = 12) as tactical_dec, ');

			$where_brand = 'brand_type_id = 1 AND brand_status = 1';
			$data['brand'] = $this->admin->get_data('brand_tbl', $where_brand);
			$data['bc_id'] = encode($bc_id);
			$data['content'] = $this->load->view('bc/bc_tactical_view', $data , TRUE);
			$this->load->view('bc/templates', $data);
		}else{
			redirect('business-center/tactical-info');
		}
	}

	public function update_tactical_price(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$year = $this->_active_year();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode(clean_data($this->input->post('id')));
			$jan = clean_data($this->input->post('jan_qty'));
			$feb = clean_data($this->input->post('feb_qty'));
			$mar = clean_data($this->input->post('mar_qty'));
			$apr = clean_data($this->input->post('apr_qty'));
			$may = clean_data($this->input->post('may_qty'));
			$jun = clean_data($this->input->post('jun_qty'));
			$jul = clean_data($this->input->post('jul_qty'));
			$aug = clean_data($this->input->post('aug_qty'));
			$sep = clean_data($this->input->post('sep_qty'));
			$oct = clean_data($this->input->post('oct_qty'));
			$nov = clean_data($this->input->post('nov_qty'));
			$dec = clean_data($this->input->post('dec_qty'));

			
			if(!empty($id) && !empty($jan) && !empty($feb) && !empty($mar) && !empty($apr) && !empty($may) && !empty($jun) && !empty($jul) && !empty($aug) && !empty($sep) && !empty($oct) && !empty($nov) && !empty($dec)){
				$check_id = $this->admin->check_data('sales_tactical_item_tbl', array('sales_tactical_item_id' =>  $id , 'sales_tactical_item_status' => 1), TRUE);
				if($check_id['result'] == TRUE){
					$tactical_id = $check_id['info']->sales_tactical_id;
					$this->db->trans_start();
			
					$set_details = array(
						'sales_tactical_det_price' => $jan
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 1,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $feb
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 2,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);					


					$set_details = array(
						'sales_tactical_det_price' => $mar
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 3,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);
					

					$set_details = array(
						'sales_tactical_det_price' => $apr
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 4,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $may
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 5,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $jun
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 6,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $jul
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 7,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $aug
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 8,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $sep
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 9,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $oct
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 10,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $nov
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 11,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);


					$set_details = array(
						'sales_tactical_det_price' => $dec
					);

					$where_details = array(
						'sales_tactical_item_id' => $id,
						'MONTH(sales_tactical_det_date)' => 12,
						'sales_tactical_det_status' => 1
					);
					$this->admin->update_data('sales_tactical_details_tbl', $set_details, $where_details);

					if($this->db->trans_status() === FALSE){
						$this->db->trans_rollback();
						$msg = '<div class="alert alert-danger">Error please try again!</div>';
					}else{
						$this->db->trans_commit();
						$msg = '<div class="alert alert-success"><strong>Tactical price successfully updated.</strong></div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error in cost center.</div>';
				}
			}else{
				$msg = '<div class="alert alert-danger">Error make sure all field need are fill up!</div>';
			}

			$this->session->set_flashdata('message', $msg);
			redirect('business-center/tactical-view/' . encode($tactical_id));
		}else{
			redirect('business-center');
		}
	}

	public function cancel_tactical_item(){
		$info = $this->_require_login();
		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$id = decode($this->input->post('id'));
			$join = array(
				'sales_tactical_tbl b' => ' a.sales_tactical_id = b.sales_tactical_id AND a.sales_tactical_item_id = ' . $id
			);

			$check_id = $this->admin->check_join('sales_tactical_item_tbl a', $join, TRUE);
			if($check_id['result'] == TRUE){
				$tactical_id = $check_id['info']->sales_tactical_id;
				$where = array('sales_tactical_item_id' => $id);
				$set = array('sales_tactical_item_status' => 0);
				$remove_item = $this->admin->update_data('sales_tactical_item_tbl', $set, $where);
				
				if($remove_item == TRUE){
					$msg = '<div class="alert alert-success">Tactical item successfully removed.</strong></div>';
				}else{
					$msg = '<div class="alert alert-danger">Error please try again!</div>';
				}

				$this->session->set_flashdata('message', $msg);
				redirect('business-center/tactical-view/' . encode($tactical_id));
			}else{
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$this->session->set_flashdata('message', $msg);
				redirect('business-center/tactical-info/');
			}
		}
	}

	/*Broiler Module*/
	public function view_broiler_summary(){
		$info = $this->_require_login();
		$user_info = $this->get_user_info();
 		$bc_id = $user_info['bc_id'];
		$data['bc_id'] = encode($bc_id);
		$year = $this->_active_year();
		$data['trans_year'] = encode($year);
		$id = decode($bc_id);
		$join_broiler_cost_summary = array(
			'broiler_cost_summary_tbl b' => 'a.broiler_group_id = b.broiler_group_id and b.bc_id =' . $bc_id . ' and YEAR(b.trans_date) = '.$year
		);
		$data['broiler_group'] = $this->admin->get_join('broiler_group_tbl a', $join_broiler_cost_summary, FALSE,'a.broiler_group_name ASC', 'a.broiler_group_id');

		$data['title'] = 'Broiler Cost';
		$data['content'] = $this->load->view('bc/bc_view_broiler_cost_summary_content', $data , TRUE);
		$this->load->view('bc/templates', $data);
	}

	public function view_broiler_trans($bc_id, $broiler_group_id, $broiler_group_name, $trans_year){
		$info = $this->_require_login();
		$data['bc_id'] = $bc_id;
		$data['trans_year'] = $trans_year;
		$data['broiler_group_name'] = decode($broiler_group_name);
		$data['broiler_group_id'] = decode($broiler_group_id);
		$bc_id = decode($bc_id);
		$broiler_group_id = decode($broiler_group_id);
		$trans_year = decode($trans_year);

		$join_broiler_trans = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id and a.bc_id ='.$bc_id,
			'status_tbl d' => 'd.status_id = a.broiler_trans_status and a.broiler_trans_status != 5',
			'broiler_subgroup_tbl e' => 'a.broiler_subgroup_id = e.broiler_subgroup_id',
			'broiler_group_tbl f' => 'e.broiler_group_id = f.broiler_group_id and f.broiler_group_id = '.$broiler_group_id,
			'broiler_trans_dtl_tbl g'	=>	'a.broiler_trans_id = g.broiler_trans_id and YEAR(g.broiler_trans_date) = '.$trans_year
		);
		$data['broiler_trans'] = $this->admin->get_join('broiler_trans_tbl a', $join_broiler_trans, FALSE,'f.broiler_group_name ASC', 'a.broiler_trans_id', 'a.broiler_trans_id, e.broiler_subgroup_name, g.broiler_trans_dtl_id, b.bc_id, f.broiler_group_id, f.broiler_group_name, d.status_id');

		$data['title'] = 'Broiler Cost';
	$data['content'] = $this->load->view('bc/bc_view_broiler_trans_content', $data , TRUE);
		$this->load->view('bc/templates', $data);
	}

	public function prod_trans(){
		$info = $this->_require_login();
		$user_info = $this->get_user_info();
 		$bc_id = $user_info['bc_id'];
 		$data['bc_id'] = encode($bc_id);
		$data['title'] = 'Production Cost';
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$data['year'] = $this->_active_year();
		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id and a.bc_id ='.$bc_id,
			'user_tbl c' => 'a.created_by = c.user_id',
			'status_tbl d' => 'd.status_id = a.prod_trans_status and a.prod_trans_status != 5',
			'prod_trans_dtl_tbl e' => 'a.prod_trans_id = e.prod_trans_id and YEAR(e.prod_trans_dtl_date)= '.$this->_active_year(),
			'material_tbl f' => 'a.prod_id = f.material_id',
			'process_type_tbl g' => 'a.process_type_id = g.process_type_id and g.process_type_id != 5',
			'brand_tbl h' => 'a.brand_id = h.brand_id'
		);
		$data['prod_trans'] = $this->admin->get_join('prod_trans_tbl a', $join, FALSE,'f.material_desc ASC', 'a.prod_trans_id');

		$join = array(
			'material_group_tbl b' => 'a.material_group_id = b.material_group_id and a.material_status = 1 and a.material_group_id <= 10'
		);
		$data['material'] = $this->admin->get_join('material_tbl a', $join, FALSE,'a.material_desc ASC','a.material_code');

		$join = array(
			'ext_prod_trans_dtl_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id and a.bc_id ='.$bc_id.' and YEAR(b.trans_dtl_date)= '.$this->_active_year(),
			'user_tbl c' => 'a.created_by = c.user_id',
			'status_tbl d' => 'd.status_id = a.ext_prod_trans_status and a.ext_prod_trans_status != 5',
			'material_tbl f' => 'a.material_id = f.material_id'
		);
		$data['ext_prod_trans'] = $this->admin->get_join('ext_prod_trans_tbl a', $join, FALSE,'f.material_desc ASC', 'a.ext_prod_trans_id');

		$data['content'] = $this->load->view('bc/bc_prod_trans_content', $data , TRUE);
		$this->load->view('bc/templates', $data);
	}

	public function view_cost_sheet($prod_trans_id, $bc_id, $year, $process_type_id){
		$info = $this->_require_login();
		$user_info = $this->get_user_info();
 		$bc_id = encode($user_info['bc_id']);

		$data['prod_trans_id'] = $prod_trans_id;
		$data['process_type_id'] = $process_type_id;
		$prod_trans_id = decode($prod_trans_id);
		$data['bc_id'] = $bc_id;
		$data['year'] = $year;
		$data['title'] = 'Production Cost';
		$process_type_id = decode($process_type_id);

		$bc_id = decode($bc_id);
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		
		if($process_type_id == 5){
			$order_by = " z.order_base_sales, z.material_desc";
		} else {
			$order_by = " z.order_base, z.material_desc";
		}
		$sql = "SELECT
					*
				FROM
					(
						SELECT
							a.*, b.material_code,
							b.material_desc,
							b.material_id,
							d.component_type,
							d.order_base,
							d.order_base_sales,
							f.amount_type_name,
							g.unit_name,
							i.process_type_id,
							i.process_type_name,
							MONTH (a.prod_trans_dtl_date) AS trans_month
						FROM
							`prod_trans_dtl_tbl` `a`
						JOIN `material_tbl` `b` ON `a`.`article_id` = `b`.`material_id`
						AND `a`.`article_type_id` = 1
						JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
						JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
						AND `a`.`prod_trans_dtl_status` <> 5
						AND `a`.`prod_trans_id` = ".$prod_trans_id."
						LEFT JOIN `unit_tbl` `g` ON `a`.`unit_id` = `g`.`unit_id`
						JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id`
						JOIN `process_type_tbl` `i` ON `h`.`process_type_id` = `i`.`process_type_id`
						UNION ALL
							SELECT
								a.*, b.service_id,
								b.service_desc,
								b.service_code,
								d.component_type,
								d.order_base,
								d.order_base_sales,
								f.amount_type_name,
								NULL AS unit_name,
								i.process_type_id,
								i.process_type_name,
								MONTH (a.prod_trans_dtl_date) AS trans_month
							FROM
								`prod_trans_dtl_tbl` `a`
							JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
							AND `a`.`article_type_id` = 2
							JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
							JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
							AND `a`.`prod_trans_dtl_status` <> 5
							AND `a`.`prod_trans_id` = ".$prod_trans_id."
							JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id`
							JOIN `process_type_tbl` `i` ON `h`.`process_type_id` = `i`.`process_type_id`
					) z
				ORDER BY".$order_by;
		$data['prod_trans'] = $this->admin->get_query($sql);

		$sql = "SELECT
					a.*, b.service_id,
					b.service_desc,
					b.service_code,
					d.component_type,
					d.order_base,
					f.amount_type_name,
					NULL AS unit_name,
					MONTH (a.prod_trans_dtl_date) AS trans_month
				FROM
					`prod_trans_dtl_tbl` `a`
				JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
				AND `a`.`article_type_id` = 2
				JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
				JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
				AND `a`.`prod_trans_dtl_status` <> 5
				AND `a`.`prod_trans_id` = ".$prod_trans_id." and a.component_type_id = 7";
		$data['config_rate'] = $this->admin->get_query($sql);


		foreach($data['prod_trans'] as $row){
			//GET THE RAWMATS FOR THE CLASSIFICATION PROCESS TYPE
			if($row->process_type_id == 2){
				
				if($row->component_type_id == 2){
					$prod_id = $row->article_id;
				}
				$data['fdc_details'] = get_basic_processing_details($prod_id, $bc_id, 1, $year);
			}
		}
		
		/*echo '<pre>';
		print_r($result);
		echo '</pre>';
		exit();*/

		$data['content'] = $this->load->view('bc/bc_view_cost_sheet_content', $data , TRUE);
		$this->load->view('bc/templates', $data);
	}

	public function sales_bom_trans(){
		$info = $this->_require_login();
		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
 		$data['bc_id'] = encode($bc_id);

		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		$data['title'] = 'Sales BOM';
		$data['year'] = $this->_active_year();
		$join = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id and a.bc_id ='.$bc_id,
			'user_tbl c' => 'a.created_by = c.user_id',
			'status_tbl d' => 'd.status_id = a.prod_trans_status and a.prod_trans_status != 5',
			'prod_trans_dtl_tbl e' => 'a.prod_trans_id = e.prod_trans_id and YEAR(e.prod_trans_dtl_date)= '.$this->_active_year(),
			'material_tbl f' => 'a.prod_id = f.material_id',
			'process_type_tbl g' => 'a.process_type_id = g.process_type_id and g.process_type_id = 5',
			'brand_tbl h' => 'a.brand_id = h.brand_id'
		);
		$data['prod_trans'] = $this->admin->get_join('prod_trans_tbl a', $join, FALSE,'f.material_desc ASC', 'a.prod_trans_id');

		$data['content'] = $this->load->view('bc/bc_sales_bom_trans_content', $data , TRUE);
		$this->load->view('bc/templates', $data);
	}

	public function view_prod_trans($id, $bc_id, $process_type_id){
		$info = $this->_require_login();
		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
 		$data['bc_id'] = encode($bc_id);

		$data['prod_trans_id'] = $id;
		$data['process_type_id'] = $process_type_id;
		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_id' => $bc_id), true, 'bc_name');
		if(decode($process_type_id) == 5){
			$data['title'] = 'Sales BOM';
		} else {
			$data['title'] = 'Production Cost';
		}
		$prod_trans_id = decode($id);
		$data['year'] = $this->_active_year();
		$sql = 'SELECT
					*
				FROM
					(
						SELECT
							a.*, b.material_code,
							b.material_desc,
							b.material_id,
							d.component_type,
							d.order_base,
							f.amount_type_name,
							g.unit_name,
							h.process_type_id,
							i.brand_name
						FROM
							`prod_trans_dtl_tbl` `a`
						JOIN `material_tbl` `b` ON `a`.`article_id` = `b`.`material_id`
						AND `a`.`article_type_id` = 1
						JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
						JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
						AND `a`.`prod_trans_dtl_status` <> 5 AND `a`.`prod_trans_id` = '.$prod_trans_id.'
						AND `a`.`show_on_trans` = 1
						left join `unit_tbl` `g` ON `a`.`unit_id` = `g`.`unit_id`
						JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id`
						JOIN `brand_tbl` `i` ON `h`.`brand_id` = `i`.`brand_id`
						UNION ALL
							SELECT
								a.*, b.service_code,
								b.service_desc,
								b.service_code,
								d.component_type,
								d.order_base,
								f.amount_type_name,
								null as unit_name,
								h.process_type_id,
								i.brand_name
							FROM
								`prod_trans_dtl_tbl` `a`
							JOIN `services_tbl` `b` ON `a`.`article_id` = `b`.`service_id`
							AND `a`.`article_type_id` = 2
							JOIN `component_type_tbl` `d` ON `a`.`component_type_id` = `d`.`component_type_id`
							JOIN `amount_type_tbl` `f` ON `a`.`amount_type_id` = `f`.`amount_type_id`
							AND `a`.`prod_trans_dtl_status` <> 5 AND `a`.`prod_trans_id` = '.$prod_trans_id.'
							AND `a`.`show_on_trans` = 1
							JOIN `prod_trans_tbl` `h` ON `a`.`prod_trans_id` = `h`.`prod_trans_id`
							JOIN `brand_tbl` `i` ON `h`.`brand_id` = `i`.`brand_id`
					) z
				group by z.config_prod_dtl_id
				order by z.order_base';
		$data['prod_trans'] = $this->admin->get_query($sql);
		$data['content'] = $this->load->view('bc/bc_view_prod_trans_content', $data , TRUE);
		$this->load->view('bc/templates', $data);
	}

	public function compute_noi(){
		$year = $this->_active_year();

		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','12048M');
		$total_variable = 0;
		$overall_noi = 0;

		$user_info = $this->get_user_info();
 		$bc = $user_info['bc_id']; 

		//Get All Sales item per BC
		$join_material = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
			'material_tbl c' => 'b.material_id = c.material_id',
			'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
			'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
			'brand_tbl f' => 'e.brand_id = f.brand_id',
			'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc 
		);

		$year = $this->_active_year();
		
		$total_cm = 0;
		$overall_cm = 0;
		$total_cost = 0;
		$total_net_sales = 0;
		$total_variable = 0;
		$get_material = $this->admin->get_join('sales_tbl a', $join_material, FALSE, FALSE, 'c.material_id, e.brand_id, d.bc_id');
		
		$get_jan_noi = $this->get_noi_main('2020-01-01', $get_material);
		$overall_noi += $get_jan_noi['overall_cm'];
		$total_variable += $get_jan_noi['variable_cost'];
		$total_net_sales += $get_jan_noi['net_sales'];

		$get_feb_noi = $this->get_noi_main('2020-02-01', $get_material);
		$overall_noi += $get_feb_noi['overall_cm'];
		$total_variable += $get_feb_noi['variable_cost'];
		$total_net_sales += $get_feb_noi['net_sales'];

		$get_mar_noi = $this->get_noi_main('2020-03-01', $get_material);
		$overall_noi += $get_mar_noi['overall_cm'];
		$total_variable += $get_mar_noi['variable_cost'];
		$total_net_sales += $get_mar_noi['net_sales'];

		$get_apr_noi = $this->get_noi_main('2020-04-01', $get_material);
		$overall_noi += $get_apr_noi['overall_cm'];
		$total_variable += $get_apr_noi['variable_cost'];
		$total_net_sales += $get_apr_noi['net_sales'];

		$get_may_noi = $this->get_noi_main('2020-05-01', $get_material);
		$overall_noi += $get_may_noi['overall_cm'];
		$total_variable += $get_may_noi['variable_cost'];
		$total_net_sales += $get_may_noi['net_sales'];

		$get_jun_noi = $this->get_noi_main('2020-06-01', $get_material);
		$overall_noi += $get_jun_noi['overall_cm'];
		$total_variable += $get_jun_noi['variable_cost'];
		$total_net_sales += $get_jun_noi['net_sales'];

		$get_jul_noi = $this->get_noi_main('2020-07-01', $get_material);
		$overall_noi += $get_jul_noi['overall_cm'];
		$total_variable += $get_jul_noi['variable_cost'];
		$total_net_sales += $get_jul_noi['net_sales'];

		$get_aug_noi = $this->get_noi_main('2020-08-01', $get_material);
		$overall_noi += $get_aug_noi['overall_cm'];
		$total_variable += $get_aug_noi['variable_cost'];
		$total_net_sales += $get_aug_noi['net_sales'];

		$get_sep_noi = $this->get_noi_main('2020-09-01', $get_material);
		$overall_noi += $get_sep_noi['overall_cm'];
		$total_variable += $get_sep_noi['variable_cost'];
		$total_net_sales += $get_sep_noi['net_sales'];

		$get_oct_noi = $this->get_noi_main('2020-10-01', $get_material);
		$overall_noi += $get_oct_noi['overall_cm'];
		$total_variable += $get_oct_noi['variable_cost'];
		$total_net_sales += $get_oct_noi['net_sales'];

		$get_nov_noi = $this->get_noi_main('2020-11-01', $get_material);
		$overall_noi += $get_nov_noi['overall_cm'];
		$total_variable += $get_nov_noi['variable_cost'];
		$total_net_sales += $get_nov_noi['net_sales'];

		$get_dec_noi = $this->get_noi_main('2020-12-01', $get_material);
		$overall_noi += $get_dec_noi['overall_cm'];
		$total_variable += $get_dec_noi['variable_cost'];
		$total_net_sales += $get_dec_noi['net_sales'];
		
		$data['overall_noi'] = $overall_noi;
	$data['total_variable'] = $total_variable;
		$data['total_net_sales'] = $total_net_sales;

		/*$data['overall_noi'] = 0;
		$data['total_variable'] = 0;
		$data['total_net_sales'] = 0;*/
		
		return $data;
	}

	public function get_noi_main($date, $get_material){
		$user_info = $this->get_user_info();
 		$bc = $user_info['bc_id'];
		//Get All Sales item per BC
		/*$join_material = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
			'material_tbl c' => 'b.material_id = c.material_id',
			'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
			'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
			'brand_tbl f' => 'e.brand_id = f.brand_id',
			'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc 
		);
		$get_material = $this->admin->get_join('sales_tbl a', $join_material, FALSE, FALSE, 'c.material_id, e.brand_id, d.bc_id');*/
		$year = $this->_active_year();
		
		$total_cm = 0;
		$overall_cm = 0;
		$total_cost = 0;
		$total_variable = 0;
		$net_sales = 0;
		$total_qty = 0;
		$total_kgs = 0;

		$overall_variable = 0;
		$overall_cm = 0;
		$overall_net_sales = 0;
		$live_sales_alw = 1;
		foreach($get_material as $row){
			$material_id = $row->material_id;
			$material_desc = $row->material_desc;
			$brand_id = $row->brand_id;
			$brand_name = $row->brand_name;
			$bc_id = $row->bc_id;
			$bc_name = $row->bc_name;
			
			//Get SKU costing base on generated above and get raw materials
			$check_sku = $this->admin->get_query("SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= " . $material_id . " AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = " . $bc_id . " AND b.prod_trans_dtl_date = '" . $date . "' AND a.brand_id = " . $brand_id . " AND a.process_type_id = 5 AND c.component_type = 'COST OF SALES'", TRUE);
			if(count($check_sku) > 0){
				$raw_mat = $check_sku->sku_material_id;

				//Check if existing in external
				$join_ext = array(
					'ext_prod_trans_dtl_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id AND a.ext_prod_trans_status = 1 AND b.ext_prod_trans_dtl_status = 1 AND a.bc_id = '. $bc_id . ' AND b.trans_dtl_date = "' . $date . '" AND a.material_id = ' . $raw_mat,
				);

				$check_ext_prod = $this->admin->check_join('ext_prod_trans_tbl a', $join_ext, TRUE);
				$total_cost = 0;
				$dressed_ave_wt = 1;
				$live_ave_wt = 1;
				$live_cost = 0;
				/*echo $material_desc . '|' . $brand_name;
				echo '|' . $check_sku->mat_details;
				echo '|' . $date;*/
				//echo '<br />';
				if($check_ext_prod['result'] == TRUE){
					$cost = $check_ext_prod['info']->cost;
					$ave_wgt = $check_ext_prod['info']->ave_wgt;

					if($ave_wgt != 0){
						//$cost = $cost * $ave_wgt;
						$dressed_ave_wt = $ave_wgt;
					}



					$total_cost = $cost;
					/*echo '|' . $total_cost;
					//echo '<br />';*/
				}/*else{
					//Get Production Internal
					if($material_desc == 'LIVE BROILER'){
						$sp = "CALL get_noi_basic(?,?,@total_qty,@total_kgs,@ave_wt,@cost_per_head,@total_cost_amount,@live_sales_alw, @live_cost)";
						$params = array(
							'PARAM_1' => $bc,
							'PARAM_2' => $date,
						);

						$get_data = $this->db->query('SELECT @total_qty as total_qty, @total_kgs as total_kgs, @ave_wt as ave_wt, @cost_per_head as cost_per_head, @total_cost_amount as total_cost_amount, @live_sales_alw as live_sales_alw, @live_cost as live_cost');
						//print_r($get_data);
						$basic =  $get_data->row();
						$live_cost = round($basic->live_cost,3);
					}else{
						$material_sales_id = $material_id;
						$bc = $bc_id;
						$check_sku = $this->admin->get_query("SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details
							FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e
							WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
							AND a.prod_id= " . $material_sales_id . " AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3
							AND a.bc_id = " . $bc . " AND b.prod_trans_dtl_date = '" . $date ."' AND a.brand_id = " . $brand_id . " AND a.process_type_id = 5 AND c.component_type = 'COST OF SALES'", TRUE);
						
						if(count($check_sku) > 0){
							$r = $check_sku->sku_material_id;
							$get_basic = $this->db->query("
								SELECT * FROM (SELECT @r as _id,
									@mat := IFNULL(
										(SELECT d.material_desc
								    	FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d
								   		WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
								        AND a.prod_id=_id AND a.prod_id = d.material_id AND (b.component_type_id = 21
										OR b.component_type_id = 2) AND a.prod_trans_status = 3
								        AND a.bc_id = @bc AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5
								        )
									, '') as mat_desc,

									@unit := IFNULL(
										(SELECT f.unit_name
								    	FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_unit_tbl e, unit_tbl f
								   		WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
								        AND a.prod_id=_id AND a.prod_id = d.material_id AND (b.component_type_id = 21
										OR b.component_type_id = 2) AND a.prod_trans_status = 3 AND d.material_id = e.material_id AND e.valuation_unit = f.unit_id AND e.material_unit_status = 1
								        AND a.bc_id = @bc AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5
								        )
									, '') as mat_unit,

								    @components :=(
										SELECT c.component_type
								    	FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d
								   		WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
								        AND a.prod_id=_id AND a.prod_id = d.material_id AND a.prod_trans_status = 3
								        AND (b.component_type_id = 21
										OR b.component_type_id = 2) AND a.bc_id = @bc
								        AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5
								        
									) as mat_comp,
								               
								    @process :=(
										SELECT b.process_type_name
								    	FROM prod_trans_tbl a, process_type_tbl b
								        WHERE a.prod_id=_id AND a.process_type_id = b.process_type_id
								        AND a.prod_trans_status = 3 AND a.bc_id = @bc AND a.process_type_id != 5
								        
									) as mat_process, 
									
									(
										SELECT @r := b.article_id
								    	FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c
								   		WHERE a.prod_trans_id = b.prod_trans_id
								        AND b.component_type_id = c.component_type_id
								        AND a.prod_id = _id AND (b.component_type_id = 21 OR b.component_type_id = 2)
								        AND a.prod_trans_status = 3 AND a.bc_id = @bc
								        AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5 LIMIT 1
									) as parent,
								    
								    @l := @l + 1 AS level
								    
								FROM
									(
								   	SELECT
								    	@r := " . $r . ",
								        @l := 1,
								        @bc := " . $bc . ",
								        @prod_date := '" .$date . "',
								        @brand := " . $brand_id . ",
								        @cl := 0,
								        @mat := 'test',
								        @rate := 0,
								        @cost := 0,
								        @process := '',
								        @unit := ''
									) vars,
								    
								    prod_trans_tbl
								    WHERE @mat != '' HAVING @r != 225
									
									
								) as noi_data
								    
								ORDER BY level DESC

							");
							$result = $get_basic->result();
							$fresh_dressed_cost = 0;
							$total_cost_amount = 0;
							$this->benchmark->mark('code_start');
							foreach($result as $row){
								$prod_id = $row->_id;
								$mat_unit = $row->mat_unit;
								$process = $row->mat_process;
								$mat_desc = $row->mat_desc;
								if($process == "BASIC PROCESSING"){

									$sp = "CALL get_noi_basic(?,?,@total_qty,@total_kgs,@ave_wt,@cost_per_head,@total_cost_amount,@live_sales_alw, @live_cost)";
									$params = array(
										'PARAM_1' => $bc,
										'PARAM_2' => $date,
									);

									$result_basic = $this->db->query($sp, $params);
									$get_data = $this->db->query('SELECT @total_qty as total_qty, @total_kgs as total_kgs, @ave_wt as ave_wt, @cost_per_head as cost_per_head, @total_cost_amount as total_cost_amount, @live_sales_alw as live_sales_alw, @live_cost as live_cost');
									//print_r($get_data);
									$basic =  $get_data->row();
									$total_qty = round($basic->total_qty,3);
									$total_kgs = round($basic->total_kgs,3);
									$live_ave_wt = round($basic->ave_wt,3);
									$cost_per_head = round($basic->cost_per_head,3);
									$total_cost_amount = round($basic->total_cost_amount,3);
									$live_sales_alw = round($basic->live_sales_alw,3);
									$live_cost = round($basic->live_cost,3);
								}elseif($process == "CLASSIFICATION"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										if($components != 'RAW MATERIALS'){
											$rate = $row_det->rate;
											$cost = $row_det->cost;

											$total_qty = round($total_qty * ($rate / 100));
											$total_kgs = round($total_qty * ($cost),3);
											$total_cost_amount = round($total_kgs * $cost_per_head,3);
										}


									}
								}elseif($process == "FURTHER PROCESS - NECKLESS"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");
									$cost_rec_kgs = 0;
									$cost_rec_amount = 0;
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										$mat_desc = $row_det->material_desc;
										$rate = $row_det->rate;
										$cost = $row_det->cost;
										if($components == 'COST RECOVERY'){
											$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate / 100)), 3);
											$mat_desc . ': ' .  round(($total_kgs * ($rate / 100)) * $cost, 3);
											$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate / 100)) * $cost, 3);
											
										}elseif($components == 'CONVERSION COST'){
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
											$mat_desc . ': ' .  round(($total_qty * $rate),3);
										}else{
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
										}
									}

									$total_cost_amount = round($total_cost_amount  -  $cost_rec_amount, 3);
									$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
								}elseif($process == "FURTHER PROCESS - MARINATION"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component, g.unit_name as mat_det_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f, unit_tbl g WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND c.unit_id = g.unit_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component, 0, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");

										
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										if($row_det->amount_type == 1){
									 		$rate = $row_det->rate / 100;
									 	}else{
									 		$rate = $row_det->rate;
									 	}

										$cost = $row_det->cost;
										$mat_details = $row_det->material_desc;
										if($components == 'MARINADES'){
											$total_cost_amount = round($total_cost_amount + (($total_qty * $rate) * $cost));
										}elseif($components == "PACKAGING"){
											if($rate > 0){
												
												$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 2);
											}
										}elseif($components == "CONVERSION COST"){
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate),3);
										}elseif($components == "RAW MATERIALS"){
											if($row_det->mat_det_unit == 'KG'){
												$multiplier = $rate > 0 ? $total_kgs / $rate : $total_kgs;
											}elseif($row_det->mat_det_unit == 'HD'){
												$multiplier = $rate > 0 ? $total_qty / $rate : $total_qty;
											}
										}
									}

									$total_kgs = round($multiplier, 3);
								}elseif($process == "FURTHER PROCESS - CUT UPS PACKAGING"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");

									$cost_rec_kgs = 0;
									$cost_rec_amount = 0;
									$raw_rate = 0;
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										$mat_details = $row_det->material_desc;
										$rate = $row_det->rate;
										$cost = $row_det->cost;
										if($components == 'COST RECOVERY'){
											$mat_details . ' - ' . round(($total_kgs * ($rate / 100)) * $cost, 3) . ' | ' . number_format(($total_kgs * ($rate / 100)), 3);
											$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate / 100)), 3);
											$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate / 100)) * $cost, 3);
										}elseif($components == 'CONVERSION COST'){
											$mat_details . ' - ' . round(($total_qty * $rate), 3);
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
										}elseif($components == "PACKAGING"){
											if(	$rate > 0){
												$mat_details . ' - ' . round((($total_qty / $rate) * $cost),3);
												$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
											}
										}elseif($components == "RAW MATERIALS"){
											$raw_rate = $rate;
										}else{
											$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
										}
									}

									$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
									$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
									$total_qty = round($total_qty / $raw_rate, 3);
								}elseif($process == "FURTHER PROCESS - CUTTING"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");

									$cost_rec_kgs = 0;
									$cost_rec_amount = 0;
									$raw_rate = 0;
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										$mat_details = $row_det->material_desc;
										$rate = $row_det->rate;
										$cost = $row_det->cost;
										if($components == 'COST RECOVERY'){

											$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate / 100)), 3);
											$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate / 100)) * $cost, 3);
											$mat_details . ' - ' . round(($total_kgs * ($rate / 100)) * $cost, 3) . ' | ' . round(($total_kgs * ($rate / 100)), 3);
										}elseif($components == 'CONVERSION COST'){
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
										}elseif($components == "PACKAGING"){
											if(	$rate > 0){
												$mat_details . ' - ' . round((($total_qty / $rate) * $cost), 3);
												$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
											}
										}elseif($components == "RAW MATERIALS"){
											$raw_rate = $rate;
										}else{
											$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
										}
									}

									$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
									$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
									$total_qty = round($total_qty / $raw_rate, 3);
								}elseif($process == "FURTHER PROCESS - INDIVIDUAL PACKAGING"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");

									$cost_rec_kgs = 0;
									$cost_rec_amount = 0;
									$raw_rate = 0;
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										$mat_details = $row_det->material_desc;
										$rate = $row_det->rate;
										$cost = $row_det->cost;
										if($components == 'COST RECOVERY'){
											$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate / 100)), 3);
											$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate / 100)) * $cost, 3);
										}elseif($components == 'CONVERSION COST'){
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
										}elseif($components == "PACKAGING"){
											if(	$rate > 0){
												$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
											}
										}elseif($components == "RAW MATERIALS"){
											$raw_rate = $rate;
										}else{
											$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
										}
									}

									$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
									$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
									$total_qty = round($total_qty / $raw_rate, 3);
								}
							}
							//echo $this->benchmark->elapsed_time('code_start', 'code_end');
							//echo '<br />';


							$dressed_ave_wt = $total_qty > 0 ? round($total_kgs / $total_qty, 3) : 0;
							$total_cost = $total_kgs > 0 ? round($total_cost_amount / $total_kgs, 3) : 0;
							$total_ave_wgt = $total_qty > 0 ? $total_kgs / $total_qty : 0;
						}else{
							$total_cost = 0;
						}
					}
				}*/
				$production_cost = $total_cost;
				$get_bom = $this->db->query('
					SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details, b.rate, b.cost FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= ' . $material_id . ' AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND a.brand_id = ' . $brand_id . ' AND a.process_type_id = 5 AND c.component_type != \'COST OF SALES\' AND c.component_type != \'SALES REVENUE\'

						UNION ALL

						SELECT e.service_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.service_desc as mat_details, b.rate, b.cost FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, services_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= ' . $material_id . ' AND a.prod_id = d.material_id AND b.article_id = e.service_id AND b.article_type_id = 2 AND a.prod_trans_status = 3 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND a.brand_id = ' . $brand_id . ' AND a.process_type_id = 5
				')->result();
				
				$bom_total = 0;
				$bom_multiplier = 1;
				foreach($get_bom as $row_bom){
					$bom_cost = $row_bom->cost;
					$bom_rate = $row_bom->rate;

					$bom_multiplier = 1;
					if($row_bom->component_type == "COST OF SALES" && $rate > 0){
						$bom_multiplier = $rate;
					}else{
						if($bom_cost > 0){
							$bom_total = $bom_total + ($bom_cost / $bom_rate);
						}else{
							$bom_total = $bom_total + $bom_rate;
						}
					}

				}

				$total_cost = $total_cost + $bom_total;
				$join_sales_item = array(
					'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
					'material_tbl c' => 'b.material_id = c.material_id AND c.material_id = ' . $material_id,
					'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
					'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
					'brand_tbl f' => 'e.brand_id = f.brand_id AND f.brand_id = ' . $brand_id,
					'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc_id,
					'sales_details_tbl h' => 'b.sales_item_id = h.sales_item_id AND h.sales_det_qty > 0 AND h.sales_det_date = "' . $date . '"'
				);

				/*$get_sales_item = $this->admin->get_join('sales_tbl a', $join_sales_item, TRUE, FALSE, FALSE,"h.sales_det_qty as total_qty,
					(CASE 
						WHEN c.material_group_id = 2 THEN
					    ((" . $dressed_ave_wt . " * (h.sales_det_qty)) * 
					    	(
						    	(h.sales_det_asp +
							    	IFNULL(
							    		(
							    			SELECT n.price_adjustment_det_value FROM price_adjustment_tbl m, price_adjustment_details_tbl n WHERE m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
							    		), 
							    	0)
						    	) -
							    IFNULL(
							    	(
							    		SELECT y.sales_tactical_det_price FROM sales_tactical_tbl w, `sales_tactical_item_tbl` `x`, sales_tactical_details_tbl y WHERE w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
							    	),
							    0) / IF(c.vat_type_id = 1, (SELECT tax_value FROM tax_tbl WHERE tax_status = 1), 1)
							)
						)
					    
					    WHEN c.material_code = 225 THEN
					    ((" . $live_ave_wt . " * (h.sales_det_qty)) * 
					    			
					    	(
					    		(h.sales_det_asp + 
					    			IFNULL(
					    				(
					    					SELECT n.price_adjustment_det_value FROM price_adjustment_tbl m, price_adjustment_details_tbl n WHERE m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
					    				), 
					    			0)
					    		) - 

					    		IFNULL(
					    			(
					    				SELECT y.sales_tactical_det_price FROM sales_tactical_tbl w, `sales_tactical_item_tbl` `x`, sales_tactical_details_tbl y WHERE w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
					    			), 
					    		0) / IF(c.vat_type_id = 1, (SELECT tax_value FROM tax_tbl WHERE tax_status = 1), 1)
					    	)
					    )

						ELSE    
					    	SUM(
					    		(h.sales_det_qty) * 
					    			(
					    				(h.sales_det_asp +
					    					IFNULL((SELECT n.price_adjustment_det_value FROM price_adjustment_tbl m, price_adjustment_details_tbl n WHERE m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id),
					    					0)
					    				) - 
					    				IFNULL((SELECT y.sales_tactical_det_price FROM sales_tactical_tbl w, `sales_tactical_item_tbl` `x`, sales_tactical_details_tbl y WHERE w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date),
					    				0) / IF(c.vat_type_id = 1, (SELECT tax_value FROM tax_tbl WHERE tax_status = 1), 1)
					    			)
					    		)
					 END) as total_cm");*/

				/*$get_sales_item = $this->admin->get_join('sales_tbl a', $join_sales_item, TRUE, FALSE, FALSE,' SUM(h.sales_det_qty) as total_qty,
					    	((h.sales_det_qty) * ((h.sales_det_asp + IFNULL((SELECT n.price_adjustment_det_value FROM price_adjustment_tbl m, price_adjustment_details_tbl n WHERE m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id), 0)) - 94.777 - IFNULL((SELECT y.sales_tactical_det_price FROM sales_tactical_tbl w, `sales_tactical_item_tbl` `x`, sales_tactical_details_tbl y WHERE w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date), 0))) as total_cm');*/
				
				$get_sales_item = $this->admin->get_query('

					SELECT SUM(sales.overall_qty * (sales.price / sales.vat)) as net_sales, SUM(sales.overall_qty) as total_qty FROM
						(SELECT
						    c.material_desc,
						    (h.sales_det_qty) AS qty,
						    h.sales_det_asp, IF(c.vat_type_id = 1, 1.12, 1) vat,
						    (
						        CASE WHEN c.material_group_id = 2 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) WHEN c.material_id = 225 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) ELSE h.sales_det_qty
						    END
						) AS overall_qty,
						(
						    h.sales_det_asp + IFNULL(
						        (
						        SELECT
						            n.price_adjustment_det_value
						        FROM
						            price_adjustment_tbl m,
						            price_adjustment_details_tbl n
						        WHERE
						            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
						    ),
						    0
						    )
						) - IFNULL(
						    (
						    SELECT
						        y.sales_tactical_det_price
						    FROM
						        sales_tactical_tbl w,
						        `sales_tactical_item_tbl` `x`,
						        sales_tactical_details_tbl y
						    WHERE
						        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
						),
						0
						) as price
						FROM
						    `sales_tbl` `a`
						JOIN `sales_item_tbl` `b` ON
						    `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1
						JOIN `material_tbl` `c` ON
						    `b`.`material_id` = `c`.`material_id` AND `c`.`material_id` = ' . $material_id . '
						JOIN `outlet_tbl` `d` ON
						    `a`.`outlet_id` = `d`.`outlet_id`
						JOIN `outlet_brand_tbl` `e` ON
						    `d`.`outlet_id` = `e`.`outlet_id` AND `e`.`outlet_brand_status` = 1
						JOIN `brand_tbl` `f` ON
						    `e`.`brand_id` = `f`.`brand_id` AND `f`.`brand_id` = ' . $brand_id . '
						JOIN `bc_tbl` `g` ON
						    `d`.`bc_id` = `g`.`bc_id` AND `g`.`bc_id` = ' . $bc_id . '
						JOIN `sales_details_tbl` `h` ON
						    `b`.`sales_item_id` = `h`.`sales_item_id` AND `h`.`sales_det_qty` > 0 AND `h`.`sales_det_date` = "' . $date . '"
						 ) as sales', TRUE);
				if(count($get_sales_item) > 0){
					$total_qty = $get_sales_item->total_qty;
					$net_sales = $get_sales_item->net_sales;

					//echo $total_qty . '|' . $net_sales;

					if($material_id == 225){
						$variable = ($total_cost + $live_cost) * $total_qty;
					}else{
						$variable = ($total_cost * $total_qty) + ($production_cost * ($bom_multiplier - 1));
					}

					$cm = $net_sales - $variable;

					$overall_variable += $variable;
					$overall_cm += $cm;
					$overall_net_sales += $net_sales;
					/*echo $material_desc;
					echo ' : ';
					echo $net_sales;
					echo '<br />';*/
				}
				/*//echo '<br />';
				echo '|' . $total_qty;
				//echo '<br />';
				echo '|' . $variable;
				//echo '<br />';
				echo '<br />';*/

				$total_cost = 0;
				$bom_multiplier = 0;
			}else{
				echo $material_desc . ' Not Exist!';
				echo '<br />';
			}


		}
		$data['overall_cm'] = $overall_cm;
		$data['variable_cost'] = $overall_variable;
		$data['net_sales'] = $overall_net_sales;
		return $data;
	}


	public function dl_noi_main(){
		$user_info = $this->get_user_info();
 		$bc = $user_info['bc_id'];
		

 		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('Sales Templates')
				->setSubject('Sales Module')
				->setDescription('Sales Templates');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);

		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_material = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_mat_code= array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Date')
				->setCellValue("B1", 'Business Center')
				->setCellValue("C1", 'IFS Code')
				->setCellValue("D1", 'Outlet Name')
				->setCellValue("E1", 'Material Code')
				->setCellValue("F1", 'Material Description')
				->setCellValue("G1", 'Brand')
				->setCellValue("H1", 'Raw Material')
				->setCellValue("I1", 'Cost')
				->setCellValue("J1", 'Rate')
				->setCellValue("K1", 'BOM')
				->setCellValue("L1", 'Cost of Sales')
				->setCellValue("M1", 'Sales QTY')
				->setCellValue("N1", 'Weight')
				->setCellValue("O1", 'QTY')
				->setCellValue("P1", 'Total BOM')
				->setCellValue("Q1", 'Total Cost Sales');
		
		$year = $this->_active_year();
		
		$total_cm = 0;
		$overall_cm = 0;
		$total_cost = 0;
		$total_variable = 0;
		$net_sales = 0;
		$total_qty = 0;
		$total_kgs = 0;

		$overall_variable = 0;
		$overall_cm = 0;
		$overall_net_sales = 0;
		$live_sales_alw = 1;
		$count = 1;
		$join_material = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
			'material_tbl c' => 'b.material_id = c.material_id',
			'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
			'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
			'brand_tbl f' => 'e.brand_id = f.brand_id',
			'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = "' . $bc . '"',
			'vat_type_tbl h' => 'c.vat_type_id = h.vat_type_id',
			'material_group_tbl i' => 'c.material_group_id = i.material_group_id',
			'sales_details_tbl j' => 'b.sales_item_id = j.sales_item_id AND j.sales_det_status = 1' 
		);
		$get_material = $this->admin->get_join('sales_tbl a', $join_material, FALSE, FALSE, 'c.material_id, e.brand_id, d.bc_id, j.sales_det_date');
		$count++;
		foreach($get_material as $row){
			$material_id = $row->material_id;
			$material_desc = $row->material_desc;
			$brand_id = $row->brand_id;
			$brand_name = $row->brand_name;
			$bc_id = $row->bc_id;
			$bc_name = $row->bc_name;
			$date = $row->sales_det_date;
			$ifs_code = $row->ifs_code;
			$outlet_name = $row->outlet_name;
			/*$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("B" . $count, $bc_name)
				->setCellValue("C" . $count, $row->material_code)
				->setCellValue("D" . $count, $row->material_desc)
				->setCellValue("E" . $count, $row->brand_name);*/
			
			//Get SKU costing base on generated above and get raw materials
			$check_sku = $this->admin->get_query("SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= " . $material_id . " AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = " . $bc_id . " AND b.prod_trans_dtl_date = '" . $date . "' AND a.brand_id = " . $brand_id . " AND a.process_type_id = 5 AND c.component_type = 'COST OF SALES'", TRUE);
			if(count($check_sku) > 0){
				$raw_mat = $check_sku->sku_material_id;

				//Check if existing in external
				$join_ext = array(
					'ext_prod_trans_dtl_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id AND a.ext_prod_trans_status = 1 AND b.ext_prod_trans_dtl_status = 1 AND a.bc_id = '. $bc_id . ' AND b.trans_dtl_date = "' . $date . '" AND a.material_id = ' . $raw_mat,
				);

				$check_ext_prod = $this->admin->check_join('ext_prod_trans_tbl a', $join_ext, TRUE);
				$total_cost = 0;
				$dressed_ave_wt = 1;
				$live_ave_wt = 1;
				$live_cost = 0;
				/*echo $material_desc . '|' . $brand_name;
				echo '|' . $check_sku->mat_details;
				echo '|' . $date;*/
				//echo '<br />';
				if($check_ext_prod['result'] == TRUE){
					$cost = $check_ext_prod['info']->cost;
					$ave_wgt = $check_ext_prod['info']->ave_wgt;

					if($ave_wgt != 0){
						//$cost = $cost * $ave_wgt;
						$dressed_ave_wt = $ave_wgt;
					}

					$total_cost = $cost;
					
					$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("L" . $count, $cost);

					/*echo '|' . $total_cost;
					//echo '<br />';*/
					/*$count++;
					$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("L" . $count, $ave_wgt)
					->setCellValue("M" . $count, $cost)
					->setCellValue("N" . $count, $total_cost);*/
				}

				
				$join_sales_item = array(
					'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
					'material_tbl c' => 'b.material_id = c.material_id AND c.material_id = ' . $material_id,
					'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
					'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
					'brand_tbl f' => 'e.brand_id = f.brand_id AND f.brand_id = ' . $brand_id,
					'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc_id,
					'sales_details_tbl h' => 'b.sales_item_id = h.sales_item_id AND h.sales_det_qty > 0 AND h.sales_det_date = "' . $date . '"'
				);
				
				$get_sales_item = $this->admin->get_query('

					SELECT SUM(sales.overall_qty * (sales.price / sales.vat)) as net_sales, SUM(sales.overall_qty) as total_qty, SUM(sales.qty) as sales_qty, IF(sales.material_group_name = "DRESSED" OR sales.material_group_name = "LIVE SALES", "' . $dressed_ave_wt . '", 1) as sales_weight FROM
						(SELECT i.material_group_name,
						    c.material_desc,
						    (h.sales_det_qty) AS qty,
						    h.sales_det_asp, IF(c.vat_type_id = 1, 1.12, 1) vat,
						    (
						        CASE WHEN c.material_group_id = 2 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) WHEN c.material_id = 225 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) ELSE h.sales_det_qty
						    END
						) AS overall_qty,
						(
						    h.sales_det_asp + IFNULL(
						        (
						        SELECT
						            n.price_adjustment_det_value
						        FROM
						            price_adjustment_tbl m,
						            price_adjustment_details_tbl n
						        WHERE
						            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
						    ),
						    0
						    )
						) - IFNULL(
						    (
						    SELECT
						        y.sales_tactical_det_price
						    FROM
						        sales_tactical_tbl w,
						        `sales_tactical_item_tbl` `x`,
						        sales_tactical_details_tbl y
						    WHERE
						        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
						),
						0
						) as price
						FROM
						    `sales_tbl` `a`
						JOIN `sales_item_tbl` `b` ON
						    `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1
						JOIN `material_tbl` `c` ON
						    `b`.`material_id` = `c`.`material_id` AND `c`.`material_id` = ' . $material_id . '
						JOIN `outlet_tbl` `d` ON
						    `a`.`outlet_id` = `d`.`outlet_id`
						JOIN `outlet_brand_tbl` `e` ON
						    `d`.`outlet_id` = `e`.`outlet_id` AND `e`.`outlet_brand_status` = 1
						JOIN `brand_tbl` `f` ON
						    `e`.`brand_id` = `f`.`brand_id` AND `f`.`brand_id` = ' . $brand_id . '
						JOIN `bc_tbl` `g` ON
						    `d`.`bc_id` = `g`.`bc_id` AND `g`.`bc_id` = ' . $bc_id . '
						JOIN `sales_details_tbl` `h` ON
						    `b`.`sales_item_id` = `h`.`sales_item_id` AND `h`.`sales_det_qty` > 0 AND `h`.`sales_det_date` = "' . $date . '"
						JOIN `material_group_tbl` `i` ON `c`.`material_group_id` = `i`.`material_group_id`
						 ) as sales', TRUE);
				if(count($get_sales_item) > 0){
					$total_qty = $get_sales_item->total_qty;
					$sales_qty = $get_sales_item->sales_qty;
					$sales_weight = $get_sales_item->sales_weight;
					$net_sales = $get_sales_item->net_sales;

					//echo $total_qty . '|' . $net_sales;

					/*if($material_id == 225){
						$variable = ($total_cost + $live_cost) * $total_qty;
					}else{
						$variable = ($total_cost * $total_qty) + ($production_cost * ($bom_multiplier - 1));
					}*/
					
					/*$cm = $net_sales - $variable;

					$overall_variable += $variable;
					$overall_cm += $cm;
					$overall_net_sales += $net_sales;*/
					/*echo $material_desc;
					echo ' : ';
					echo $net_sales;
					echo '<br />';*/
				}
				/*//echo '<br />';
				echo '|' . $total_qty;
				//echo '<br />';
				echo '|' . $variable;
				//echo '<br />';
				echo '<br />';*/

				/*$total_cost = 0;*/
				$bom_multiplier = 0;

				$get_bom = $this->db->query('
					SELECT e.material_id as sku_material_id, e.material_desc as sku_material_desc, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details, b.rate, b.cost FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= ' . $material_id . ' AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND a.brand_id = ' . $brand_id . ' AND a.process_type_id = 5 AND c.component_type != \'COST OF SALES\' AND c.component_type != \'SALES REVENUE\'

						UNION ALL

						SELECT e.service_id as sku_material_id, e.service_desc as sku_material_desc, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.service_desc as mat_details, b.rate, b.cost FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, services_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= ' . $material_id . ' AND a.prod_id = d.material_id AND b.article_id = e.service_id AND b.article_type_id = 2 AND a.prod_trans_status = 3 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND a.brand_id = ' . $brand_id . ' AND a.process_type_id = 5
				')->result();
				
				$bom_total = 0;
				$bom_multiplier = 1;

				foreach($get_bom as $row_bom){
					$bom_cost = $row_bom->cost;
					$bom_rate = $row_bom->rate;

					$bom_multiplier = 1;
					if($row_bom->component_type == "COST OF SALES" && $rate > 0){
						$bom_multiplier = $rate;
					}else{
						if($bom_cost > 0){
							$bom_total = $bom_total + ($bom_cost / $bom_rate);

							$total = $bom_cost / $bom_rate;
						}else{
							$bom_total = $bom_total + $bom_rate;
							$total = $bom_rate;
						}
					}


					

					$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A" . $count, $date)
					->setCellValue("B" . $count, $bc_name)
					->setCellValue("C" . $count, $ifs_code)
					->setCellValue("D" . $count, $outlet_name)
					->setCellValue("E" . $count, $row->material_code)
				
					->setCellValue("F" . $count, $row_bom->material_desc)
					->setCellValue("G" . $count, $brand_name)
					->setCellValue("H" . $count, $row_bom->sku_material_desc)
					->setCellValue("I" . $count, $bom_cost)
					->setCellValue("J" . $count, $bom_rate)
					->setCellValue("K" . $count, $total)
					->setCellValue("M" . $count, $sales_qty)
					->setCellValue("N" . $count, $sales_weight)
					->setCellValue("O" . $count, $total_qty)
					->setCellValue("P" . $count, $total * $total_qty)
					->setCellValue("Q" . $count, $total_cost * $total_qty);
					$count++;
					$total_cost = 0;
				}

				$total_cost = $total_cost + $bom_total;
			}else{
				echo $material_desc . ' Not Exist!';
				echo '<br />';
			}
		}

		$spreadsheet->getActiveSheet()->getStyle("A1:Q" . $count)->applyFromArray($style_border);
		foreach(range('A','Q') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}		

		$spreadsheet->getActiveSheet()->setTitle('Sales data');

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Budgeting - Sales data .xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;

		/*$data['overall_cm'] = $overall_cm;
		$data['variable_cost'] = $overall_variable;
		$data['net_sales'] = $overall_net_sales;
		return $data;*/
	}

	public function dl_noi_main_check($bc){
		$user_info = $this->get_user_info();
 		//$bc = $user_info['bc_id'];

 		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('Sales Templates')
				->setSubject('Sales Module')
				->setDescription('Sales Templates');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);

		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_material = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_mat_code= array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Date')
				->setCellValue("B1", 'Business Center')
				->setCellValue("C1", 'IFS Code')
				->setCellValue("D1", 'Outlet Name')
				->setCellValue("E1", 'Material Code')
				->setCellValue("F1", 'Material Description')
				->setCellValue("G1", 'Brand')
				->setCellValue("H1", 'Raw Material')
				->setCellValue("I1", 'Cost')
				->setCellValue("J1", 'Rate')
				->setCellValue("K1", 'BOM')
				->setCellValue("L1", 'Cost of Sales')
				->setCellValue("M1", 'Sales QTY')
				->setCellValue("N1", 'Weight')
				->setCellValue("O1", 'QTY')
				->setCellValue("P1", 'Total BOM')
				->setCellValue("Q1", 'Total Cost Sales');
		
			
		$year = $this->_active_year();
		
		$total_cm = 0;
		$overall_cm = 0;
		$total_cost = 0;
		$total_variable = 0;
		$net_sales = 0;
		$total_qty = 0;
		$total_kgs = 0;

		$overall_variable = 0;
		$overall_cm = 0;
		$overall_net_sales = 0;
		$live_sales_alw = 1;
		$count = 1;
		$join_material = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
			'material_tbl c' => 'b.material_id = c.material_id',
			'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
			'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
			'brand_tbl f' => 'e.brand_id = f.brand_id',
			'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = "' . $bc . '"',
			'vat_type_tbl h' => 'c.vat_type_id = h.vat_type_id',
			'material_group_tbl i' => 'c.material_group_id = i.material_group_id',
			'sales_details_tbl j' => 'b.sales_item_id = j.sales_item_id AND j.sales_det_status = 1' 
		);
		$get_material = $this->admin->get_join('sales_tbl a', $join_material, FALSE, FALSE, 'c.material_id, e.brand_id, d.bc_id, j.sales_det_date');
		$count++;
		foreach($get_material as $row){
			$material_id = $row->material_id;
			$material_desc = $row->material_desc;
			$material_code = $row->material_code;
			$brand_id = $row->brand_id;
			$brand_name = $row->brand_name;
			$bc_id = $row->bc_id;
			$bc_name = $row->bc_name;
			$date = $row->sales_det_date;
			$ifs_code = $row->ifs_code;
			$outlet_name = $row->outlet_name;
			
			//Get SKU costing base on generated above and get raw materials
			$check_sku = $this->admin->get_query("SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details, e.material_desc as mat_code FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= " . $material_id . " AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = " . $bc_id . " AND b.prod_trans_dtl_date = '" . $date . "' AND a.brand_id = " . $brand_id . " AND a.process_type_id = 5 AND c.component_type = 'COST OF SALES'", TRUE);
			if(count($check_sku) > 0){
				$raw_mat = $check_sku->sku_material_id;
				$raw_mat_desc = $check_sku->mat_details;
				$raw_mat_code = $check_sku->mat_code;
				//Check if existing in external
				$join_ext = array(
					'ext_prod_trans_dtl_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id AND a.ext_prod_trans_status = 1 AND b.ext_prod_trans_dtl_status = 1 AND a.bc_id = '. $bc_id . ' AND b.trans_dtl_date = "' . $date . '" AND a.material_id = ' . $raw_mat,
				);

				$check_ext_prod = $this->admin->check_join('ext_prod_trans_tbl a', $join_ext, TRUE);
				$total_cost = 0;
				$dressed_ave_wt = 1;
				$live_ave_wt = 1;
				$live_cost = 0;
				
				if($check_ext_prod['result'] == TRUE){
					$cost = $check_ext_prod['info']->cost;
					$ave_wgt = $check_ext_prod['info']->ave_wgt;

					if($ave_wgt != 0){
						//$cost = $cost * $ave_wgt;
						$dressed_ave_wt = $ave_wgt;
					}

					$total_cost = $cost;
					
					//echo ' - '  . $cost;
					/*$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("L" . $count, $cost);*/
				}

				
				$join_sales_item = array(
					'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
					'material_tbl c' => 'b.material_id = c.material_id AND c.material_id = ' . $material_id,
					'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
					'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
					'brand_tbl f' => 'e.brand_id = f.brand_id AND f.brand_id = ' . $brand_id,
					'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc_id,
					'sales_details_tbl h' => 'b.sales_item_id = h.sales_item_id AND h.sales_det_qty > 0 AND h.sales_det_date = "' . $date . '"'
				);
				
				$get_sales_item = $this->admin->get_query('

					SELECT sales.outlet_name, sales.ifs_code, (sales.overall_qty) as total_qty, (sales.qty) as sales_qty, IF(sales.material_group_name = "DRESSED" OR sales.material_group_name = "LIVE SALES", "' . $dressed_ave_wt . '", 1) as sales_weight FROM
						(SELECT i.material_group_name,
						    c.material_desc,
						    (h.sales_det_qty) AS qty,
						    h.sales_det_asp, IF(c.vat_type_id = 1, 1.12, 1) vat,
						    (
						        CASE WHEN c.material_group_id = 2 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) WHEN c.material_id = 225 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) ELSE h.sales_det_qty
						    END
						) AS overall_qty,
						(
						    h.sales_det_asp + IFNULL(
						        (
						        SELECT
						            n.price_adjustment_det_value
						        FROM
						            price_adjustment_tbl m,
						            price_adjustment_details_tbl n
						        WHERE
						            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
						    ),
						    0
						    )
						) - IFNULL(
						    (
						    SELECT
						        y.sales_tactical_det_price
						    FROM
						        sales_tactical_tbl w,
						        `sales_tactical_item_tbl` `x`,
						        sales_tactical_details_tbl y
						    WHERE
						        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
						),
						0
						) as price,
						d.outlet_name, d.ifs_code
						FROM
						    `sales_tbl` `a`
						JOIN `sales_item_tbl` `b` ON
						    `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1
						JOIN `material_tbl` `c` ON
						    `b`.`material_id` = `c`.`material_id` AND `c`.`material_id` = ' . $material_id . '
						JOIN `outlet_tbl` `d` ON
						    `a`.`outlet_id` = `d`.`outlet_id`
						JOIN `outlet_brand_tbl` `e` ON
						    `d`.`outlet_id` = `e`.`outlet_id` AND `e`.`outlet_brand_status` = 1
						JOIN `brand_tbl` `f` ON
						    `e`.`brand_id` = `f`.`brand_id` AND `f`.`brand_id` = ' . $brand_id . '
						JOIN `bc_tbl` `g` ON
						    `d`.`bc_id` = `g`.`bc_id` AND `g`.`bc_id` = ' . $bc_id . '
						JOIN `sales_details_tbl` `h` ON
						    `b`.`sales_item_id` = `h`.`sales_item_id` AND `h`.`sales_det_qty` > 0 AND `h`.`sales_det_date` = "' . $date . '"
						JOIN `material_group_tbl` `i` ON `c`.`material_group_id` = `i`.`material_group_id`
						 ) as sales');
				
				foreach($get_sales_item as $row_item){
					$total_qty = $row_item->total_qty;
					$sales_qty = $row_item->sales_qty;
					$sales_weight = $row_item->sales_weight;
					/*$net_sales = $row_item->net_sales;*/
					$outlet = $row_item->outlet_name;
					$ifs = $row_item->ifs_code;
				
					$bom_multiplier = 0;

					
					
					$bom_total = 0;
					$bom_multiplier = 1;
					$bom_cost = 0;
					$bom_rate = 0;
					$total = 0;

					$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A" . $count, $date)
					->setCellValue("B" . $count, $bc_name)
					->setCellValue("C" . $count, $ifs)
					->setCellValue("D" . $count, $outlet)
					->setCellValue("E" . $count, $material_code)
				
					->setCellValue("F" . $count, $material_desc)
					->setCellValue("G" . $count, $brand_name)
					->setCellValue("H" . $count, $raw_mat_desc)
					->setCellValue("I" . $count, $bom_cost)
					->setCellValue("J" . $count, $bom_rate)
					->setCellValue("K" . $count, $total)
					->setCellValue("L" . $count, $cost)
					->setCellValue("M" . $count, $sales_qty)
					->setCellValue("N" . $count, $sales_weight)
					->setCellValue("O" . $count, $total_qty * $sales_weight)
					->setCellValue("P" . $count, '0')
					->setCellValue("Q" . $count, $cost * $total_qty);
					$count++;
					$total_cost = 0;
					

					$total_cost = $total_cost + $bom_total;
				}
			}else{
				echo $material_desc . ' Not Exist!';
				echo '<br />';
			}
		}

		$spreadsheet->getActiveSheet()->getStyle("A1:Q" . $count)->applyFromArray($style_border);
		foreach(range('A','Q') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}		

		$spreadsheet->getActiveSheet()->setTitle('Sales data');

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Budgeting - Sales data .xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function dl_net_sales(){
		$user_info = $this->get_user_info();
 		$bc = $user_info['bc_id'];
		

 		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('Sales Templates')
				->setSubject('Sales Module')
				->setDescription('Sales Templates');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);

		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_material = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_mat_code= array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Business Center')
				->setCellValue("B1", 'IFS Code')
				->setCellValue("C1", 'Outlet name')
				->setCellValue("D1", 'Brand')
				->setCellValue("E1", 'Material Code')
				->setCellValue("F1", 'Material Description')
				->setCellValue("G1", 'VAT TYPE')
				->setCellValue("H1", 'Material Group')
				->setCellValue("I1", 'Date')
				->setCellValue("J1", 'Sales QTY')
				->setCellValue("K1", 'ASP')
				->setCellValue("L1", 'Weight')
				->setCellValue("M1", 'Total Qty')
				->setCellValue("N1", 'VAT')
				->setCellValue("O1", 'Price less VAT')
				->setCellValue("P1", 'Adjustment Price')
				->setCellValue("Q1", 'Tactical Price')
				->setCellValue("R1", 'Last Price')
				->setCellValue("S1", 'Net Sales');
		
		$year = $this->_active_year();
		
		$total_cm = 0;
		$overall_cm = 0;
		$total_cost = 0;
		$total_variable = 0;
		$net_sales = 0;
		$total_qty = 0;
		$total_kgs = 0;

		$overall_variable = 0;
		$overall_cm = 0;
		$overall_net_sales = 0;
		$live_sales_alw = 1;
		$count = 1;
		
		$join_material = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
			'material_tbl c' => 'b.material_id = c.material_id',
			'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
			'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
			'brand_tbl f' => 'e.brand_id = f.brand_id',
			'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = "' . $bc . '"',
			'vat_type_tbl h' => 'c.vat_type_id = h.vat_type_id',
			'material_group_tbl i' => 'c.material_group_id = i.material_group_id',
			'sales_details_tbl j' => 'b.sales_item_id = j.sales_item_id AND j.sales_det_status = 1' 
		);
		$get_material = $this->admin->get_join('sales_tbl a', $join_material, FALSE, FALSE, 'c.material_id, e.brand_id, d.bc_id, j.sales_det_date');
		$count++;
		foreach($get_material as $row){
			$material_id = $row->material_id;
			$material_desc = $row->material_desc;
			$brand_id = $row->brand_id;
			$brand_name = $row->brand_name;
			$bc_id = $row->bc_id;
			$bc_name = $row->bc_name;
			$date = $row->sales_det_date;
			
			
			//Get SKU costing base on generated above and get raw materials
			$check_sku = $this->admin->get_query("SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= " . $material_id . " AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = " . $bc_id . " AND b.prod_trans_dtl_date = '" . $date . "' AND a.brand_id = " . $brand_id . " AND a.process_type_id = 5 AND c.component_type = 'COST OF SALES'", TRUE);
			if(count($check_sku) > 0){
				$raw_mat = $check_sku->sku_material_id;

				//Check if existing in external
				$join_ext = array(
					'ext_prod_trans_dtl_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id AND a.ext_prod_trans_status = 1 AND b.ext_prod_trans_dtl_status = 1 AND a.bc_id = '. $bc_id . ' AND b.trans_dtl_date = "' . $date . '" AND a.material_id = ' . $raw_mat,
				);

				$check_ext_prod = $this->admin->check_join('ext_prod_trans_tbl a', $join_ext, TRUE);
				$total_cost = 0;
				$dressed_ave_wt = 1;
				$live_ave_wt = 1;
				$live_cost = 0;
				/*echo $material_desc . '|' . $brand_name;
				echo '|' . $check_sku->mat_details;
				echo '|' . $date;*/
				//echo '<br />';
				if($check_ext_prod['result'] == TRUE){
					$cost = $check_ext_prod['info']->cost;
					$ave_wgt = $check_ext_prod['info']->ave_wgt;

					if($ave_wgt != 0){
						//$cost = $cost * $ave_wgt;
						$dressed_ave_wt = $ave_wgt;
					}

					$total_cost = $cost;
					
					/*$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("J" . $count, $cost);*/

					/*echo '|' . $total_cost;
					//echo '<br />';*/
					/*$count++;
					$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("L" . $count, $ave_wgt)
					->setCellValue("M" . $count, $cost)
					->setCellValue("N" . $count, $total_cost);*/
				}

				
				$join_sales_item = array(
					'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
					'material_tbl c' => 'b.material_id = c.material_id AND c.material_id = ' . $material_id,
					'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
					'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
					'brand_tbl f' => 'e.brand_id = f.brand_id AND f.brand_id = ' . $brand_id,
					'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc_id,
					'sales_details_tbl h' => 'b.sales_item_id = h.sales_item_id AND h.sales_det_qty > 0 AND h.sales_det_date = "' . $date . '"'
				);
				
				$get_sales_item = $this->admin->get_query('

					SELECT sales.*, IF(sales.material_group_name = "DRESSED" OR sales.material_group_name = "LIVE SALES", "' . $dressed_ave_wt . '", 1) as sales_weight FROM
						(SELECT g.bc_name, d.ifs_code, d.outlet_name, f.brand_name, c.material_code, c.material_desc, IF(c.vat_type_id = 1, 1.12, 1) vat, j.vat_type_name, i.material_group_name, h.sales_det_date, h.sales_det_qty, h.sales_det_asp,

							IFNULL(
						        (
						        SELECT
						            n.price_adjustment_det_value
						        FROM
						            price_adjustment_tbl m,
						            price_adjustment_details_tbl n
						        WHERE
						            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
						    	),
						    0) as adjustment_price,

						    IFNULL(
							    (
							    SELECT
							        y.sales_tactical_det_price
							    FROM
							        sales_tactical_tbl w,
							        `sales_tactical_item_tbl` `x`,
							        sales_tactical_details_tbl y
							    WHERE
							        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
								),
							0) as tactical_price,

						    (
						        CASE WHEN c.material_group_id = 2 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) WHEN c.material_id = 225 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) ELSE h.sales_det_qty
						    END
						) AS overall_qty,
						(
						    h.sales_det_asp + IFNULL(
						        (
						        SELECT
						            n.price_adjustment_det_value
						        FROM
						            price_adjustment_tbl m,
						            price_adjustment_details_tbl n
						        WHERE
						            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
						    ),
						    0
						    )
						) - IFNULL(
						    (
						    SELECT
						        y.sales_tactical_det_price
						    FROM
						        sales_tactical_tbl w,
						        `sales_tactical_item_tbl` `x`,
						        sales_tactical_details_tbl y
						    WHERE
						        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
						),
						0
						) as price
						FROM
						    `sales_tbl` `a`
						JOIN `sales_item_tbl` `b` ON
						    `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1
						JOIN `material_tbl` `c` ON
						    `b`.`material_id` = `c`.`material_id` AND `c`.`material_id` = ' . $material_id . '
						JOIN `outlet_tbl` `d` ON
						    `a`.`outlet_id` = `d`.`outlet_id`
						JOIN `outlet_brand_tbl` `e` ON
						    `d`.`outlet_id` = `e`.`outlet_id` AND `e`.`outlet_brand_status` = 1
						JOIN `brand_tbl` `f` ON
						    `e`.`brand_id` = `f`.`brand_id` AND `f`.`brand_id` = ' . $brand_id . '
						JOIN `bc_tbl` `g` ON
						    `d`.`bc_id` = `g`.`bc_id` AND `g`.`bc_id` = ' . $bc_id . '
						JOIN `sales_details_tbl` `h` ON
						    `b`.`sales_item_id` = `h`.`sales_item_id` AND `h`.`sales_det_qty` > 0 AND `h`.`sales_det_date` = "' . $date . '"
						JOIN `material_group_tbl` `i` ON `c`.`material_group_id` = `i`.`material_group_id`
						JOIN `vat_type_tbl` `j` ON `c`.`vat_type_id` = `j`.`vat_type_id`
						 ) as sales');
				

				/*$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A" . $count, 'wewe');*/
				foreach($get_sales_item as $row_sales){
					$bc_name = $row_sales->bc_name;
					$ifs_code = $row_sales->ifs_code;
					$outlet_name = $row_sales->outlet_name;
					$brand_name = $row_sales->brand_name;
					$material_code = $row_sales->material_code;
					$material_desc = $row_sales->material_desc;
					$vat_type_name = $row_sales->vat_type_name;
					$material_group_name = $row_sales->material_group_name;
					$sales_date = $row_sales->sales_det_date;
					$sales_det_qty = $row_sales->sales_det_qty;
					$sales_det_asp = $row_sales->sales_det_asp;
					$sales_weight = $row_sales->sales_weight;
					$total_qty = $sales_det_qty * $sales_weight;
					$vat = $row_sales->vat;
					$price_less_vat = $sales_det_asp / $vat;
					$adjustment_price = $row_sales->adjustment_price;
					$tactical_price = $row_sales->tactical_price;
					$last_price = $price_less_vat - $adjustment_price - $tactical_price;
					$net_sales = $last_price * $total_qty;
					/*$ifs_code = $row_sales->ifs_code;
					$ifs_code = $row_sales->ifs_code;
					$ifs_code = $row_sales->ifs_code;
					$ifs_code = $row_sales->ifs_code;
					$ifs_code = $row_sales->ifs_code;
					$ifs_code = $row_sales->ifs_code;
					$ifs_code = $row_sales->ifs_code;*/
					

					$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A" . $count, $bc_name)
					->setCellValue("B" . $count, $ifs_code)
					->setCellValue("C" . $count, $outlet_name)		
					->setCellValue("D" . $count, $brand_name)
					->setCellValue("E" . $count, $material_code)
					->setCellValue("F" . $count, $material_desc)
					->setCellValue("G" . $count, $vat_type_name)
					->setCellValue("H" . $count, $material_group_name)
					->setCellValue("I" . $count, $sales_date)
					->setCellValue("J" . $count, $sales_det_qty)
					->setCellValue("K" . $count, $sales_det_asp)
					->setCellValue("L" . $count, $sales_weight)
					->setCellValue("M" . $count, $total_qty)
					->setCellValue("N" . $count, $vat)
					->setCellValue("O" . $count, $price_less_vat)
					->setCellValue("P" . $count, $adjustment_price)
					->setCellValue("Q" . $count, $tactical_price)
					->setCellValue("R" . $count, $last_price)
					->setCellValue("S" . $count, $net_sales)
					;
					$count++;
					$total_cost = 0;
				}

				//$total_cost = $total_cost + $bom_total;
			}else{
				echo $material_desc . ' Not Exist!';
				echo '<br />';
			}
		}

		$spreadsheet->getActiveSheet()->getStyle("A1:S" . $count)->applyFromArray($style_border);
		foreach(range('A','S') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}		

		$spreadsheet->getActiveSheet()->setTitle('Sales data');

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Budgeting - Sales data .xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;

		/*$data['overall_cm'] = $overall_cm;
		$data['variable_cost'] = $overall_variable;
		$data['net_sales'] = $overall_net_sales;
		return $data;*/
	}

	public function dl_sales_volume(){
		$user_info = $this->get_user_info();
 		$bc = $user_info['bc_id'];
		

 		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('Sales Templates')
				->setSubject('Sales Module')
				->setDescription('Sales Templates');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);

		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_material = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_mat_code= array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Business Center')
				->setCellValue("B1", 'IFS Code')
				->setCellValue("C1", 'Outlet name')
				->setCellValue("D1", 'Brand')
				->setCellValue("E1", 'Material Code')
				->setCellValue("F1", 'Material Description')
				->setCellValue("G1", 'VAT TYPE')
				->setCellValue("H1", 'Material Group')
				->setCellValue("I1", 'Date')
				->setCellValue("J1", 'Sales QTY')
				->setCellValue("K1", 'Sales Unit')
				->setCellValue("L1", 'Total Sales Volume');
		
		$year = $this->_active_year();
		
		$total_cm = 0;
		$overall_cm = 0;
		$total_cost = 0;
		$total_variable = 0;
		$net_sales = 0;
		$total_qty = 0;
		$total_kgs = 0;

		$overall_variable = 0;
		$overall_cm = 0;
		$overall_net_sales = 0;
		$live_sales_alw = 1;
		$count = 1;
		
		$join_material = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
			'material_tbl c' => 'b.material_id = c.material_id',
			'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
			'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
			'brand_tbl f' => 'e.brand_id = f.brand_id',
			'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = "' . $bc . '"',
			'vat_type_tbl h' => 'c.vat_type_id = h.vat_type_id',
			'material_group_tbl i' => 'c.material_group_id = i.material_group_id',
			'sales_details_tbl j' => 'b.sales_item_id = j.sales_item_id AND j.sales_det_status = 1' 
		);
		$get_material = $this->admin->get_join('sales_tbl a', $join_material, FALSE, FALSE, 'c.material_id, e.brand_id, d.bc_id, j.sales_det_date');
		$count++;
		foreach($get_material as $row){
			$material_id = $row->material_id;
			$material_desc = $row->material_desc;
			$brand_id = $row->brand_id;
			$brand_name = $row->brand_name;
			$bc_id = $row->bc_id;
			$bc_name = $row->bc_name;
			$date = $row->sales_det_date;
			
			
			//Get SKU costing base on generated above and get raw materials
			$check_sku = $this->admin->get_query("SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= " . $material_id . " AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = " . $bc_id . " AND b.prod_trans_dtl_date = '" . $date . "' AND a.brand_id = " . $brand_id . " AND a.process_type_id = 5 AND c.component_type = 'COST OF SALES'", TRUE);
			if(count($check_sku) > 0){
				$raw_mat = $check_sku->sku_material_id;

				//Check if existing in external
				$join_ext = array(
					'ext_prod_trans_dtl_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id AND a.ext_prod_trans_status = 1 AND b.ext_prod_trans_dtl_status = 1 AND a.bc_id = '. $bc_id . ' AND b.trans_dtl_date = "' . $date . '" AND a.material_id = ' . $raw_mat,
				);

				$check_ext_prod = $this->admin->check_join('ext_prod_trans_tbl a', $join_ext, TRUE);
				$total_cost = 0;
				$dressed_ave_wt = 1;
				$live_ave_wt = 1;
				$live_cost = 0;
				/*echo $material_desc . '|' . $brand_name;
				echo '|' . $check_sku->mat_details;
				echo '|' . $date;*/
				//echo '<br />';
				if($check_ext_prod['result'] == TRUE){
					$cost = $check_ext_prod['info']->cost;
					$ave_wgt = $check_ext_prod['info']->ave_wgt;

					if($ave_wgt != 0){
						//$cost = $cost * $ave_wgt;
						$dressed_ave_wt = $ave_wgt;
					}

					$total_cost = $cost;
					
					/*$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("J" . $count, $cost);*/

					/*echo '|' . $total_cost;
					//echo '<br />';*/
					/*$count++;
					$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("L" . $count, $ave_wgt)
					->setCellValue("M" . $count, $cost)
					->setCellValue("N" . $count, $total_cost);*/
				}

				
				$join_sales_item = array(
					'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
					'material_tbl c' => 'b.material_id = c.material_id AND c.material_id = ' . $material_id,
					'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
					'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
					'brand_tbl f' => 'e.brand_id = f.brand_id AND f.brand_id = ' . $brand_id,
					'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc_id,
					'sales_details_tbl h' => 'b.sales_item_id = h.sales_item_id AND h.sales_det_qty > 0 AND h.sales_det_date = "' . $date . '"'
				);
				
				$get_sales_item = $this->admin->get_query('

					SELECT sales.*, IF(sales.material_group_name = "DRESSED" OR sales.material_group_name = "LIVE SALES", "' . $dressed_ave_wt . '", 1) as sales_weight FROM
						(SELECT g.bc_name, d.ifs_code, d.outlet_name, f.brand_name, c.material_code, c.material_desc, IF(c.vat_type_id = 1, 1.12, 1) vat, j.vat_type_name, i.material_group_name, h.sales_det_date, h.sales_det_qty, h.sales_det_asp, k.sales_unit_equivalent,

							IFNULL(
						        (
						        SELECT
						            n.price_adjustment_det_value
						        FROM
						            price_adjustment_tbl m,
						            price_adjustment_details_tbl n
						        WHERE
						            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
						    	),
						    0) as adjustment_price,

						    IFNULL(
							    (
							    SELECT
							        y.sales_tactical_det_price
							    FROM
							        sales_tactical_tbl w,
							        `sales_tactical_item_tbl` `x`,
							        sales_tactical_details_tbl y
							    WHERE
							        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
								),
							0) as tactical_price,

						    (
						        CASE WHEN c.material_group_id = 2 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) WHEN c.material_id = 225 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) ELSE h.sales_det_qty
						    END
						) AS overall_qty,
						(
						    h.sales_det_asp + IFNULL(
						        (
						        SELECT
						            n.price_adjustment_det_value
						        FROM
						            price_adjustment_tbl m,
						            price_adjustment_details_tbl n
						        WHERE
						            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
						    ),
						    0
						    )
						) - IFNULL(
						    (
						    SELECT
						        y.sales_tactical_det_price
						    FROM
						        sales_tactical_tbl w,
						        `sales_tactical_item_tbl` `x`,
						        sales_tactical_details_tbl y
						    WHERE
						        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
						),
						0
						) as price
						FROM
						    `sales_tbl` `a`
						JOIN `sales_item_tbl` `b` ON
						    `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1
						JOIN `material_tbl` `c` ON
						    `b`.`material_id` = `c`.`material_id` AND `c`.`material_id` = ' . $material_id . '
						JOIN `outlet_tbl` `d` ON
						    `a`.`outlet_id` = `d`.`outlet_id`
						JOIN `outlet_brand_tbl` `e` ON
						    `d`.`outlet_id` = `e`.`outlet_id` AND `e`.`outlet_brand_status` = 1
						JOIN `brand_tbl` `f` ON
						    `e`.`brand_id` = `f`.`brand_id` AND `f`.`brand_id` = ' . $brand_id . '
						JOIN `bc_tbl` `g` ON
						    `d`.`bc_id` = `g`.`bc_id` AND `g`.`bc_id` = ' . $bc_id . '
						JOIN `sales_details_tbl` `h` ON
						    `b`.`sales_item_id` = `h`.`sales_item_id` AND `h`.`sales_det_qty` > 0 AND `h`.`sales_det_date` = "' . $date . '"
						JOIN `material_group_tbl` `i` ON `c`.`material_group_id` = `i`.`material_group_id`
						JOIN `vat_type_tbl` `j` ON `c`.`vat_type_id` = `j`.`vat_type_id`
						JOIN `material_unit_tbl` `k` ON `c`.`material_id` = `k`.`material_id` AND `k`.`material_unit_status` = 1
						 ) as sales');
				

				/*$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A" . $count, 'wewe');*/
				foreach($get_sales_item as $row_sales){
					$bc_name = $row_sales->bc_name;
					$ifs_code = $row_sales->ifs_code;
					$outlet_name = $row_sales->outlet_name;
					$brand_name = $row_sales->brand_name;
					$material_code = $row_sales->material_code;
					$material_desc = $row_sales->material_desc;
					$vat_type_name = $row_sales->vat_type_name;
					$material_group_name = $row_sales->material_group_name;
					$sales_date = $row_sales->sales_det_date;
					$sales_det_qty = $row_sales->sales_det_qty;
					$sales_det_asp = $row_sales->sales_det_asp;
					$sales_weight = $row_sales->sales_weight;
					$total_qty = $sales_det_qty * $sales_weight;
					$vat = $row_sales->vat;
					$price_less_vat = $sales_det_asp / $vat;
					$adjustment_price = $row_sales->adjustment_price;
					$tactical_price = $row_sales->tactical_price;
					$last_price = $price_less_vat - $adjustment_price - $tactical_price;
					$net_sales = $last_price * $total_qty;
					$sales_unit_equivalent = $row_sales->sales_unit_equivalent;

					$total_sales_volume = $sales_unit_equivalent == 0 ? 0 : $sales_det_qty / $sales_unit_equivalent;
					/*$ifs_code = $row_sales->ifs_code;
					$ifs_code = $row_sales->ifs_code;
					$ifs_code = $row_sales->ifs_code;
					$ifs_code = $row_sales->ifs_code;
					$ifs_code = $row_sales->ifs_code;
					$ifs_code = $row_sales->ifs_code;
					$ifs_code = $row_sales->ifs_code;*/
					

					$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A" . $count, $bc_name)
					->setCellValue("B" . $count, $ifs_code)
					->setCellValue("C" . $count, $outlet_name)		
					->setCellValue("D" . $count, $brand_name)
					->setCellValue("E" . $count, $material_code)
					->setCellValue("F" . $count, $material_desc)
					->setCellValue("G" . $count, $vat_type_name)
					->setCellValue("H" . $count, $material_group_name)
					->setCellValue("I" . $count, $sales_date)
					->setCellValue("J" . $count, $sales_det_qty)
					->setCellValue("K" . $count, $sales_unit_equivalent)
					->setCellValue("L" . $count, $total_sales_volume)
					;
					$count++;
					$total_cost = 0;
				}

				//$total_cost = $total_cost + $bom_total;
			}else{
				echo $material_desc . ' Not Exist!';
				echo '<br />';
			}
		}

		$spreadsheet->getActiveSheet()->getStyle("A1:L" . $count)->applyFromArray($style_border);
		foreach(range('A','L') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}		

		$spreadsheet->getActiveSheet()->setTitle('Sales data');

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Sales volume - ' . $bc_name . '.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;

		/*$data['overall_cm'] = $overall_cm;
		$data['variable_cost'] = $overall_variable;
		$data['net_sales'] = $overall_net_sales;
		return $data;*/
	}

	public function compute_noi_test(){
		$year = $this->_active_year();

		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','12048M');
		$total_variable = 0;
		$overall_noi = 0;

		$user_info = $this->get_user_info();
 		$bc = $user_info['bc_id']; 

		//Get All Sales item per BC
		$join_material = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
			'material_tbl c' => 'b.material_id = c.material_id',
			'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
			'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
			'brand_tbl f' => 'e.brand_id = f.brand_id',
			'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc 
		);

		$year = $this->_active_year();
		
		$total_cm = 0;
		$overall_cm = 0;
		$total_cost = 0;
		$total_net_sales = 0;
		$total_variable = 0;
		$get_material = $this->admin->get_join('sales_tbl a', $join_material, FALSE, FALSE, 'c.material_id, e.brand_id, d.bc_id');
		
		$get_jan_noi = $this->get_noi_main_test('2020-01-01', $get_material);
		$overall_noi += $get_jan_noi['overall_cm'];
		$total_variable += $get_jan_noi['variable_cost'];
		$total_net_sales += $get_jan_noi['net_sales'];

		$get_feb_noi = $this->get_noi_main_test('2020-02-01', $get_material);
		$overall_noi += $get_feb_noi['overall_cm'];
		$total_variable += $get_feb_noi['variable_cost'];
		$total_net_sales += $get_feb_noi['net_sales'];

		$get_mar_noi = $this->get_noi_main_test('2020-03-01', $get_material);
		$overall_noi += $get_mar_noi['overall_cm'];
		$total_variable += $get_mar_noi['variable_cost'];
		$total_net_sales += $get_mar_noi['net_sales'];

		$get_apr_noi = $this->get_noi_main_test('2020-04-01', $get_material);
		$overall_noi += $get_apr_noi['overall_cm'];
		$total_variable += $get_apr_noi['variable_cost'];
		$total_net_sales += $get_apr_noi['net_sales'];

		$get_may_noi = $this->get_noi_main_test('2020-05-01', $get_material);
		$overall_noi += $get_may_noi['overall_cm'];
		$total_variable += $get_may_noi['variable_cost'];
		$total_net_sales += $get_may_noi['net_sales'];

		$get_jun_noi = $this->get_noi_main_test('2020-06-01', $get_material);
		$overall_noi += $get_jun_noi['overall_cm'];
		$total_variable += $get_jun_noi['variable_cost'];
		$total_net_sales += $get_jun_noi['net_sales'];

		$get_jul_noi = $this->get_noi_main_test('2020-07-01', $get_material);
		$overall_noi += $get_jul_noi['overall_cm'];
		$total_variable += $get_jul_noi['variable_cost'];
		$total_net_sales += $get_jul_noi['net_sales'];

		$get_aug_noi = $this->get_noi_main_test('2020-08-01', $get_material);
		$overall_noi += $get_aug_noi['overall_cm'];
		$total_variable += $get_aug_noi['variable_cost'];
		$total_net_sales += $get_aug_noi['net_sales'];

		$get_sep_noi = $this->get_noi_main_test('2020-09-01', $get_material);
		$overall_noi += $get_sep_noi['overall_cm'];
		$total_variable += $get_sep_noi['variable_cost'];
		$total_net_sales += $get_sep_noi['net_sales'];

		$get_oct_noi = $this->get_noi_main_test('2020-10-01', $get_material);
		$overall_noi += $get_oct_noi['overall_cm'];
		$total_variable += $get_oct_noi['variable_cost'];
		$total_net_sales += $get_oct_noi['net_sales'];

		$get_nov_noi = $this->get_noi_main_test('2020-11-01', $get_material);
		$overall_noi += $get_nov_noi['overall_cm'];
		$total_variable += $get_nov_noi['variable_cost'];
		$total_net_sales += $get_nov_noi['net_sales'];

		$get_dec_noi = $this->get_noi_main_test('2020-12-01', $get_material);
		$overall_noi += $get_dec_noi['overall_cm'];
		$total_variable += $get_dec_noi['variable_cost'];
		$total_net_sales += $get_dec_noi['net_sales'];
		
		$data['overall_noi'] = $overall_noi;
	$data['total_variable'] = $total_variable;
		$data['total_net_sales'] = $total_net_sales;

		/*$data['overall_noi'] = 0;
		$data['total_variable'] = 0;
		$data['total_net_sales'] = 0;*/
		
		return $data;
	}

	public function get_noi_main_test($date, $get_material){
		$user_info = $this->get_user_info();
 		$bc = $user_info['bc_id'];
		//Get All Sales item per BC
		/*$join_material = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
			'material_tbl c' => 'b.material_id = c.material_id',
			'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
			'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
			'brand_tbl f' => 'e.brand_id = f.brand_id',
			'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc 
		);
		$get_material = $this->admin->get_join('sales_tbl a', $join_material, FALSE, FALSE, 'c.material_id, e.brand_id, d.bc_id');*/
		$year = $this->_active_year();
		
		$total_cm = 0;
		$overall_cm = 0;
		$total_cost = 0;
		$total_variable = 0;
		$net_sales = 0;
		$total_qty = 0;
		$total_kgs = 0;

		$overall_variable = 0;
		$overall_cm = 0;
		$overall_net_sales = 0;
		$live_sales_alw = 1;
		foreach($get_material as $row){
			$material_id = $row->material_id;
			echo $material_desc = $row->material_desc;
			echo '|';
			$brand_id = $row->brand_id;
			$brand_name = $row->brand_name;
			$bc_id = $row->bc_id;
			$bc_name = $row->bc_name;
			
			//Get SKU costing base on generated above and get raw materials
			$check_sku = $this->admin->get_query("SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= " . $material_id . " AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = " . $bc_id . " AND b.prod_trans_dtl_date = '" . $date . "' AND a.brand_id = " . $brand_id . " AND a.process_type_id = 5 AND c.component_type = 'COST OF SALES'", TRUE);
			if(count($check_sku) > 0){
				$raw_mat = $check_sku->sku_material_id;
				echo $check_sku->mat_details;

				//Check if existing in external
				$join_ext = array(
					'ext_prod_trans_dtl_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id AND a.ext_prod_trans_status = 1 AND b.ext_prod_trans_dtl_status = 1 AND a.bc_id = '. $bc_id . ' AND b.trans_dtl_date = "' . $date . '" AND a.material_id = ' . $raw_mat,
				);

				$check_ext_prod = $this->admin->check_join('ext_prod_trans_tbl a', $join_ext, TRUE);
				$total_cost = 0;
				$dressed_ave_wt = 1;
				$live_ave_wt = 1;
				$live_cost = 0;
				/*echo $material_desc . '|' . $brand_name;
				echo '|' . $check_sku->mat_details;
				echo '|' . $date;*/
				//echo '<br />';
				if($check_ext_prod['result'] == TRUE){
					$cost = $check_ext_prod['info']->cost;
					$ave_wgt = $check_ext_prod['info']->ave_wgt;

					if($ave_wgt != 0){
						$cost = $cost * $ave_wgt;
						$dressed_ave_wt = $ave_wgt;
					}

					echo '|' . $ave_wgt;
					//echo '<br />';

					$total_cost = $cost;
					/*echo '|' . $total_cost;
					//echo '<br />';*/
				}/*else{
					//Get Production Internal
					if($material_desc == 'LIVE BROILER'){
						$sp = "CALL get_noi_basic(?,?,@total_qty,@total_kgs,@ave_wt,@cost_per_head,@total_cost_amount,@live_sales_alw, @live_cost)";
						$params = array(
							'PARAM_1' => $bc,
							'PARAM_2' => $date,
						);

						$get_data = $this->db->query('SELECT @total_qty as total_qty, @total_kgs as total_kgs, @ave_wt as ave_wt, @cost_per_head as cost_per_head, @total_cost_amount as total_cost_amount, @live_sales_alw as live_sales_alw, @live_cost as live_cost');
						//print_r($get_data);
						$basic =  $get_data->row();
						$live_cost = round($basic->live_cost,3);
					}else{
						$material_sales_id = $material_id;
						$bc = $bc_id;
						$check_sku = $this->admin->get_query("SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details
							FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e
							WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
							AND a.prod_id= " . $material_sales_id . " AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3
							AND a.bc_id = " . $bc . " AND b.prod_trans_dtl_date = '" . $date ."' AND a.brand_id = " . $brand_id . " AND a.process_type_id = 5 AND c.component_type = 'COST OF SALES'", TRUE);
						
						if(count($check_sku) > 0){
							$r = $check_sku->sku_material_id;
							$get_basic = $this->db->query("
								SELECT * FROM (SELECT @r as _id,
									@mat := IFNULL(
										(SELECT d.material_desc
								    	FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d
								   		WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
								        AND a.prod_id=_id AND a.prod_id = d.material_id AND (b.component_type_id = 21
										OR b.component_type_id = 2) AND a.prod_trans_status = 3
								        AND a.bc_id = @bc AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5
								        )
									, '') as mat_desc,

									@unit := IFNULL(
										(SELECT f.unit_name
								    	FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_unit_tbl e, unit_tbl f
								   		WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
								        AND a.prod_id=_id AND a.prod_id = d.material_id AND (b.component_type_id = 21
										OR b.component_type_id = 2) AND a.prod_trans_status = 3 AND d.material_id = e.material_id AND e.valuation_unit = f.unit_id AND e.material_unit_status = 1
								        AND a.bc_id = @bc AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5
								        )
									, '') as mat_unit,

								    @components :=(
										SELECT c.component_type
								    	FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d
								   		WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
								        AND a.prod_id=_id AND a.prod_id = d.material_id AND a.prod_trans_status = 3
								        AND (b.component_type_id = 21
										OR b.component_type_id = 2) AND a.bc_id = @bc
								        AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5
								        
									) as mat_comp,
								               
								    @process :=(
										SELECT b.process_type_name
								    	FROM prod_trans_tbl a, process_type_tbl b
								        WHERE a.prod_id=_id AND a.process_type_id = b.process_type_id
								        AND a.prod_trans_status = 3 AND a.bc_id = @bc AND a.process_type_id != 5
								        
									) as mat_process, 
									
									(
										SELECT @r := b.article_id
								    	FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c
								   		WHERE a.prod_trans_id = b.prod_trans_id
								        AND b.component_type_id = c.component_type_id
								        AND a.prod_id = _id AND (b.component_type_id = 21 OR b.component_type_id = 2)
								        AND a.prod_trans_status = 3 AND a.bc_id = @bc
								        AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5 LIMIT 1
									) as parent,
								    
								    @l := @l + 1 AS level
								    
								FROM
									(
								   	SELECT
								    	@r := " . $r . ",
								        @l := 1,
								        @bc := " . $bc . ",
								        @prod_date := '" .$date . "',
								        @brand := " . $brand_id . ",
								        @cl := 0,
								        @mat := 'test',
								        @rate := 0,
								        @cost := 0,
								        @process := '',
								        @unit := ''
									) vars,
								    
								    prod_trans_tbl
								    WHERE @mat != '' HAVING @r != 225
									
									
								) as noi_data
								    
								ORDER BY level DESC

							");
							$result = $get_basic->result();
							$fresh_dressed_cost = 0;
							$total_cost_amount = 0;
							$this->benchmark->mark('code_start');
							foreach($result as $row){
								$prod_id = $row->_id;
								$mat_unit = $row->mat_unit;
								$process = $row->mat_process;
								$mat_desc = $row->mat_desc;
								if($process == "BASIC PROCESSING"){

									$sp = "CALL get_noi_basic(?,?,@total_qty,@total_kgs,@ave_wt,@cost_per_head,@total_cost_amount,@live_sales_alw, @live_cost)";
									$params = array(
										'PARAM_1' => $bc,
										'PARAM_2' => $date,
									);

									$result_basic = $this->db->query($sp, $params);
									$get_data = $this->db->query('SELECT @total_qty as total_qty, @total_kgs as total_kgs, @ave_wt as ave_wt, @cost_per_head as cost_per_head, @total_cost_amount as total_cost_amount, @live_sales_alw as live_sales_alw, @live_cost as live_cost');
									//print_r($get_data);
									$basic =  $get_data->row();
									$total_qty = round($basic->total_qty,3);
									$total_kgs = round($basic->total_kgs,3);
									$live_ave_wt = round($basic->ave_wt,3);
									$cost_per_head = round($basic->cost_per_head,3);
									$total_cost_amount = round($basic->total_cost_amount,3);
									$live_sales_alw = round($basic->live_sales_alw,3);
									$live_cost = round($basic->live_cost,3);
								}elseif($process == "CLASSIFICATION"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										if($components != 'RAW MATERIALS'){
											$rate = $row_det->rate;
											$cost = $row_det->cost;

											$total_qty = round($total_qty * ($rate / 100));
											$total_kgs = round($total_qty * ($cost),3);
											$total_cost_amount = round($total_kgs * $cost_per_head,3);
										}


									}
								}elseif($process == "FURTHER PROCESS - NECKLESS"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");
									$cost_rec_kgs = 0;
									$cost_rec_amount = 0;
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										$mat_desc = $row_det->material_desc;
										$rate = $row_det->rate;
										$cost = $row_det->cost;
										if($components == 'COST RECOVERY'){
											$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate / 100)), 3);
											$mat_desc . ': ' .  round(($total_kgs * ($rate / 100)) * $cost, 3);
											$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate / 100)) * $cost, 3);
											
										}elseif($components == 'CONVERSION COST'){
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
											$mat_desc . ': ' .  round(($total_qty * $rate),3);
										}else{
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
										}
									}

									$total_cost_amount = round($total_cost_amount  -  $cost_rec_amount, 3);
									$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
								}elseif($process == "FURTHER PROCESS - MARINATION"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component, g.unit_name as mat_det_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f, unit_tbl g WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND c.unit_id = g.unit_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component, 0, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");

										
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										if($row_det->amount_type == 1){
									 		$rate = $row_det->rate / 100;
									 	}else{
									 		$rate = $row_det->rate;
									 	}

										$cost = $row_det->cost;
										$mat_details = $row_det->material_desc;
										if($components == 'MARINADES'){
											$total_cost_amount = round($total_cost_amount + (($total_qty * $rate) * $cost));
										}elseif($components == "PACKAGING"){
											if($rate > 0){
												
												$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 2);
											}
										}elseif($components == "CONVERSION COST"){
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate),3);
										}elseif($components == "RAW MATERIALS"){
											if($row_det->mat_det_unit == 'KG'){
												$multiplier = $rate > 0 ? $total_kgs / $rate : $total_kgs;
											}elseif($row_det->mat_det_unit == 'HD'){
												$multiplier = $rate > 0 ? $total_qty / $rate : $total_qty;
											}
										}
									}

									$total_kgs = round($multiplier, 3);
								}elseif($process == "FURTHER PROCESS - CUT UPS PACKAGING"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");

									$cost_rec_kgs = 0;
									$cost_rec_amount = 0;
									$raw_rate = 0;
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										$mat_details = $row_det->material_desc;
										$rate = $row_det->rate;
										$cost = $row_det->cost;
										if($components == 'COST RECOVERY'){
											$mat_details . ' - ' . round(($total_kgs * ($rate / 100)) * $cost, 3) . ' | ' . number_format(($total_kgs * ($rate / 100)), 3);
											$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate / 100)), 3);
											$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate / 100)) * $cost, 3);
										}elseif($components == 'CONVERSION COST'){
											$mat_details . ' - ' . round(($total_qty * $rate), 3);
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
										}elseif($components == "PACKAGING"){
											if(	$rate > 0){
												$mat_details . ' - ' . round((($total_qty / $rate) * $cost),3);
												$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
											}
										}elseif($components == "RAW MATERIALS"){
											$raw_rate = $rate;
										}else{
											$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
										}
									}

									$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
									$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
									$total_qty = round($total_qty / $raw_rate, 3);
								}elseif($process == "FURTHER PROCESS - CUTTING"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");

									$cost_rec_kgs = 0;
									$cost_rec_amount = 0;
									$raw_rate = 0;
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										$mat_details = $row_det->material_desc;
										$rate = $row_det->rate;
										$cost = $row_det->cost;
										if($components == 'COST RECOVERY'){

											$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate / 100)), 3);
											$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate / 100)) * $cost, 3);
											$mat_details . ' - ' . round(($total_kgs * ($rate / 100)) * $cost, 3) . ' | ' . round(($total_kgs * ($rate / 100)), 3);
										}elseif($components == 'CONVERSION COST'){
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
										}elseif($components == "PACKAGING"){
											if(	$rate > 0){
												$mat_details . ' - ' . round((($total_qty / $rate) * $cost), 3);
												$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
											}
										}elseif($components == "RAW MATERIALS"){
											$raw_rate = $rate;
										}else{
											$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
										}
									}

									$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
									$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
									$total_qty = round($total_qty / $raw_rate, 3);
								}elseif($process == "FURTHER PROCESS - INDIVIDUAL PACKAGING"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");

									$cost_rec_kgs = 0;
									$cost_rec_amount = 0;
									$raw_rate = 0;
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										$mat_details = $row_det->material_desc;
										$rate = $row_det->rate;
										$cost = $row_det->cost;
										if($components == 'COST RECOVERY'){
											$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate / 100)), 3);
											$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate / 100)) * $cost, 3);
										}elseif($components == 'CONVERSION COST'){
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
										}elseif($components == "PACKAGING"){
											if(	$rate > 0){
												$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
											}
										}elseif($components == "RAW MATERIALS"){
											$raw_rate = $rate;
										}else{
											$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
										}
									}

									$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
									$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
									$total_qty = round($total_qty / $raw_rate, 3);
								}
							}
							//echo $this->benchmark->elapsed_time('code_start', 'code_end');
							//echo '<br />';


							$dressed_ave_wt = $total_qty > 0 ? round($total_kgs / $total_qty, 3) : 0;
							$total_cost = $total_kgs > 0 ? round($total_cost_amount / $total_kgs, 3) : 0;
							$total_ave_wgt = $total_qty > 0 ? $total_kgs / $total_qty : 0;
						}else{
							$total_cost = 0;
						}
					}
				}*/
				$production_cost = $total_cost;
				$get_bom = $this->db->query('
					SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details, b.rate, b.cost FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= ' . $material_id . ' AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND a.brand_id = ' . $brand_id . ' AND a.process_type_id = 5 AND c.component_type != \'COST OF SALES\' AND c.component_type != \'SALES REVENUE\'

						UNION ALL

						SELECT e.service_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.service_desc as mat_details, b.rate, b.cost FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, services_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= ' . $material_id . ' AND a.prod_id = d.material_id AND b.article_id = e.service_id AND b.article_type_id = 2 AND a.prod_trans_status = 3 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND a.brand_id = ' . $brand_id . ' AND a.process_type_id = 5
				')->result();
				
				$bom_total = 0;
				$bom_multiplier = 1;
				foreach($get_bom as $row_bom){
					$bom_cost = $row_bom->cost;
					$bom_rate = $row_bom->rate;

					$bom_multiplier = 1;
					if($row_bom->component_type == "COST OF SALES" && $rate > 0){
						$bom_multiplier = $rate;
					}else{
						if($bom_cost > 0){
							$bom_total = $bom_total + ($bom_cost / $bom_rate);
						}else{
							$bom_total = $bom_total + $bom_rate;
						}
					}

				}

				$total_cost = $total_cost + $bom_total;
				$join_sales_item = array(
					'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
					'material_tbl c' => 'b.material_id = c.material_id AND c.material_id = ' . $material_id,
					'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
					'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
					'brand_tbl f' => 'e.brand_id = f.brand_id AND f.brand_id = ' . $brand_id,
					'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc_id,
					'sales_details_tbl h' => 'b.sales_item_id = h.sales_item_id AND h.sales_det_qty > 0 AND h.sales_det_date = "' . $date . '"'
				);

				/*$get_sales_item = $this->admin->get_join('sales_tbl a', $join_sales_item, TRUE, FALSE, FALSE,"h.sales_det_qty as total_qty,
					(CASE 
						WHEN c.material_group_id = 2 THEN
					    ((" . $dressed_ave_wt . " * (h.sales_det_qty)) * 
					    	(
						    	(h.sales_det_asp +
							    	IFNULL(
							    		(
							    			SELECT n.price_adjustment_det_value FROM price_adjustment_tbl m, price_adjustment_details_tbl n WHERE m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
							    		), 
							    	0)
						    	) -
							    IFNULL(
							    	(
							    		SELECT y.sales_tactical_det_price FROM sales_tactical_tbl w, `sales_tactical_item_tbl` `x`, sales_tactical_details_tbl y WHERE w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
							    	),
							    0) / IF(c.vat_type_id = 1, (SELECT tax_value FROM tax_tbl WHERE tax_status = 1), 1)
							)
						)
					    
					    WHEN c.material_code = 225 THEN
					    ((" . $live_ave_wt . " * (h.sales_det_qty)) * 
					    			
					    	(
					    		(h.sales_det_asp + 
					    			IFNULL(
					    				(
					    					SELECT n.price_adjustment_det_value FROM price_adjustment_tbl m, price_adjustment_details_tbl n WHERE m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
					    				), 
					    			0)
					    		) - 

					    		IFNULL(
					    			(
					    				SELECT y.sales_tactical_det_price FROM sales_tactical_tbl w, `sales_tactical_item_tbl` `x`, sales_tactical_details_tbl y WHERE w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
					    			), 
					    		0) / IF(c.vat_type_id = 1, (SELECT tax_value FROM tax_tbl WHERE tax_status = 1), 1)
					    	)
					    )

						ELSE    
					    	SUM(
					    		(h.sales_det_qty) * 
					    			(
					    				(h.sales_det_asp +
					    					IFNULL((SELECT n.price_adjustment_det_value FROM price_adjustment_tbl m, price_adjustment_details_tbl n WHERE m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id),
					    					0)
					    				) - 
					    				IFNULL((SELECT y.sales_tactical_det_price FROM sales_tactical_tbl w, `sales_tactical_item_tbl` `x`, sales_tactical_details_tbl y WHERE w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date),
					    				0) / IF(c.vat_type_id = 1, (SELECT tax_value FROM tax_tbl WHERE tax_status = 1), 1)
					    			)
					    		)
					 END) as total_cm");*/

				/*$get_sales_item = $this->admin->get_join('sales_tbl a', $join_sales_item, TRUE, FALSE, FALSE,' SUM(h.sales_det_qty) as total_qty,
					    	((h.sales_det_qty) * ((h.sales_det_asp + IFNULL((SELECT n.price_adjustment_det_value FROM price_adjustment_tbl m, price_adjustment_details_tbl n WHERE m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id), 0)) - 94.777 - IFNULL((SELECT y.sales_tactical_det_price FROM sales_tactical_tbl w, `sales_tactical_item_tbl` `x`, sales_tactical_details_tbl y WHERE w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date), 0))) as total_cm');*/
				
				$get_sales_item = $this->admin->get_query('

					SELECT SUM(sales.overall_qty * (sales.price / sales.vat)) as net_sales, SUM(sales.overall_qty) as total_qty FROM
						(SELECT
						    c.material_desc,
						    (h.sales_det_qty) AS qty,
						    h.sales_det_asp, IF(c.vat_type_id = 1, 1.12, 1) vat,
						    (
						        CASE WHEN c.material_group_id = 2 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) WHEN c.material_id = 225 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) ELSE h.sales_det_qty
						    END
						) AS overall_qty,
						(
						    h.sales_det_asp + IFNULL(
						        (
						        SELECT
						            n.price_adjustment_det_value
						        FROM
						            price_adjustment_tbl m,
						            price_adjustment_details_tbl n
						        WHERE
						            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
						    ),
						    0
						    )
						) - IFNULL(
						    (
						    SELECT
						        y.sales_tactical_det_price
						    FROM
						        sales_tactical_tbl w,
						        `sales_tactical_item_tbl` `x`,
						        sales_tactical_details_tbl y
						    WHERE
						        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
						),
						0
						) as price
						FROM
						    `sales_tbl` `a`
						JOIN `sales_item_tbl` `b` ON
						    `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1
						JOIN `material_tbl` `c` ON
						    `b`.`material_id` = `c`.`material_id` AND `c`.`material_id` = ' . $material_id . '
						JOIN `outlet_tbl` `d` ON
						    `a`.`outlet_id` = `d`.`outlet_id`
						JOIN `outlet_brand_tbl` `e` ON
						    `d`.`outlet_id` = `e`.`outlet_id` AND `e`.`outlet_brand_status` = 1
						JOIN `brand_tbl` `f` ON
						    `e`.`brand_id` = `f`.`brand_id` AND `f`.`brand_id` = ' . $brand_id . '
						JOIN `bc_tbl` `g` ON
						    `d`.`bc_id` = `g`.`bc_id` AND `g`.`bc_id` = ' . $bc_id . '
						JOIN `sales_details_tbl` `h` ON
						    `b`.`sales_item_id` = `h`.`sales_item_id` AND `h`.`sales_det_qty` > 0 AND `h`.`sales_det_date` = "' . $date . '"
						 ) as sales', TRUE);
				if(count($get_sales_item) > 0){
					$total_qty = $get_sales_item->total_qty;
					echo '|';
					echo  $net_sales = $get_sales_item->net_sales;
					echo '|' . $total_qty;
					echo '<br />';
					//echo $total_qty . '|' . $net_sales;

					if($material_id == 225){
						$variable = ($total_cost + $live_cost) * $total_qty;
					}else{
						$variable = ($total_cost * $total_qty) + ($production_cost * ($bom_multiplier - 1));
					}

					$cm = $net_sales - $variable;

					$overall_variable += $variable;
					$overall_cm += $cm;
					$overall_net_sales += $net_sales;
					/*echo $material_desc;
					echo ' : ';
					echo $net_sales;
					echo '<br />';*/
				}
				/*//echo '<br />';
				echo '|' . $total_qty;
				//echo '<br />';
				echo '|' . $variable;
				//echo '<br />';
				echo '<br />';*/

				$total_cost = 0;
				$bom_multiplier = 0;
			}else{
				echo $material_desc . ' Not Exist!';
				echo '<br />';
			}


		}
		$data['overall_cm'] = $overall_cm;
		$data['variable_cost'] = $overall_variable;
		$data['net_sales'] = $overall_net_sales;
		return $data;
	}

	public function compute_noi2(){
		$year = $this->_active_year();

		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','12048M');
		$total_variable = 0;
		$overall_noi = 0;

		$user_info = $this->get_user_info();
 		$bc = $user_info['bc_id']; 

		//Get All Sales item per BC
		$join_material = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
			'material_tbl c' => 'b.material_id = c.material_id',
			'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
			'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
			'brand_tbl f' => 'e.brand_id = f.brand_id',
			'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc 
		);

		$year = $this->_active_year();
		
		$total_cm = 0;
		$overall_cm = 0;
		$total_cost = 0;
		$total_net_sales = 0;
		$total_variable = 0;
		$get_material = $this->admin->get_join('sales_tbl a', $join_material, FALSE, FALSE, 'c.material_id, e.brand_id, d.bc_id');
		
		$get_jan_noi = $this->get_noi_main2('2020-01-01', $get_material);
		$overall_noi += $get_jan_noi['overall_cm'];
		$total_variable += $get_jan_noi['variable_cost'];
		$total_net_sales += $get_jan_noi['net_sales'];

		$get_feb_noi = $this->get_noi_main2('2020-02-01', $get_material);
		$overall_noi += $get_feb_noi['overall_cm'];
		$total_variable += $get_feb_noi['variable_cost'];
		$total_net_sales += $get_feb_noi['net_sales'];

		/*$get_mar_noi = $this->get_noi_main2('2020-03-01', $get_material);
		$overall_noi += $get_mar_noi['overall_cm'];
		$total_variable += $get_mar_noi['variable_cost'];
		$total_net_sales += $get_mar_noi['net_sales'];

		$get_apr_noi = $this->get_noi_main2('2020-04-01', $get_material);
		$overall_noi += $get_apr_noi['overall_cm'];
		$total_variable += $get_apr_noi['variable_cost'];
		$total_net_sales += $get_apr_noi['net_sales'];

		$get_may_noi = $this->get_noi_main2('2020-05-01', $get_material);
		$overall_noi += $get_may_noi['overall_cm'];
		$total_variable += $get_may_noi['variable_cost'];
		$total_net_sales += $get_may_noi['net_sales'];

		$get_jun_noi = $this->get_noi_main2('2020-06-01', $get_material);
		$overall_noi += $get_jun_noi['overall_cm'];
		$total_variable += $get_jun_noi['variable_cost'];
		$total_net_sales += $get_jun_noi['net_sales'];

		$get_jul_noi = $this->get_noi_main2('2020-07-01', $get_material);
		$overall_noi += $get_jul_noi['overall_cm'];
		$total_variable += $get_jul_noi['variable_cost'];
		$total_net_sales += $get_jul_noi['net_sales'];

		$get_aug_noi = $this->get_noi_main2('2020-08-01', $get_material);
		$overall_noi += $get_aug_noi['overall_cm'];
		$total_variable += $get_aug_noi['variable_cost'];
		$total_net_sales += $get_aug_noi['net_sales'];

		$get_sep_noi = $this->get_noi_main2('2020-09-01', $get_material);
		$overall_noi += $get_sep_noi['overall_cm'];
		$total_variable += $get_sep_noi['variable_cost'];
		$total_net_sales += $get_sep_noi['net_sales'];

		$get_oct_noi = $this->get_noi_main2('2020-10-01', $get_material);
		$overall_noi += $get_oct_noi['overall_cm'];
		$total_variable += $get_oct_noi['variable_cost'];
		$total_net_sales += $get_oct_noi['net_sales'];

		$get_nov_noi = $this->get_noi_main2('2020-11-01', $get_material);
		$overall_noi += $get_nov_noi['overall_cm'];
		$total_variable += $get_nov_noi['variable_cost'];
		$total_net_sales += $get_nov_noi['net_sales'];

		$get_dec_noi = $this->get_noi_main2('2020-12-01', $get_material);
		$overall_noi += $get_dec_noi['overall_cm'];
		$total_net_sales += $get_dec_noi['net_sales'];*/
		
		$data['overall_noi'] = $overall_noi;
		$data['total_variable'] = $total_variable;
		$data['total_net_sales'] = $total_net_sales;

		/*$data['overall_noi'] = 0;
		$data['total_variable'] = 0;
		$data['total_net_sales'] = 0;*/
		
		return $data;
	}

	public function get_noi_main2($date, $get_material){
		$user_info = $this->get_user_info();
 		$bc = $user_info['bc_id'];
		//Get All Sales item per BC
		/*$join_material = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
			'material_tbl c' => 'b.material_id = c.material_id',
			'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
			'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
			'brand_tbl f' => 'e.brand_id = f.brand_id',
			'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc 
		);
		$get_material = $this->admin->get_join('sales_tbl a', $join_material, FALSE, FALSE, 'c.material_id, e.brand_id, d.bc_id');*/
		$year = $this->_active_year();
		
		$total_cm = 0;
		$overall_cm = 0;
		$total_cost = 0;
		$total_variable = 0;
		$net_sales = 0;
		$total_qty = 0;
		$total_kgs = 0;

		$overall_variable = 0;
		$overall_cm = 0;
		$overall_net_sales = 0;
		$live_sales_alw = 1;
		foreach($get_material as $row){
			$material_id = $row->material_id;
			$material_desc = $row->material_desc;
			$brand_id = $row->brand_id;
			$brand_name = $row->brand_name;
			$bc_id = $row->bc_id;
			$bc_name = $row->bc_name;
			
			//Get SKU costing base on generated above and get raw materials
			$check_sku = $this->admin->get_query("SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= " . $material_id . " AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = " . $bc_id . " AND b.prod_trans_dtl_date = '" . $date . "' AND a.brand_id = " . $brand_id . " AND a.process_type_id = 5 AND c.component_type = 'COST OF SALES'", TRUE);
			if(count($check_sku) > 0){
				$raw_mat = $check_sku->sku_material_id;

				//Check if existing in external
				$join_ext = array(
					'ext_prod_trans_dtl_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id AND a.ext_prod_trans_status = 1 AND a.bc_id = '. $bc_id . ' AND b.trans_dtl_date = "' . $date . '" AND a.material_id = ' . $raw_mat,
				);

				$check_ext_prod = $this->admin->check_join('ext_prod_trans_tbl a', $join_ext, TRUE);
				$total_cost = 0;
				$dressed_ave_wt = 1;
				$live_ave_wt = 1;
				$live_cost = 0;
				if($check_ext_prod['result'] == TRUE){
					$cost = $check_ext_prod['info']->cost;
					$ave_wgt = $check_ext_prod['info']->ave_wgt;
					if($ave_wgt != 0){
						$cost = $cost * $ave_wgt;
					}
					
					$total_cost = $cost;
				}else{
					//Get Production Internal
					if($material_desc == 'LIVE BROILER'){
						$sp = "CALL get_noi_basic(?,?,@total_qty,@total_kgs,@ave_wt,@cost_per_head,@total_cost_amount,@live_sales_alw, @live_cost)";
						$params = array(
							'PARAM_1' => $bc,
							'PARAM_2' => $date,
						);

						$get_data = $this->db->query('SELECT @total_qty as total_qty, @total_kgs as total_kgs, @ave_wt as ave_wt, @cost_per_head as cost_per_head, @total_cost_amount as total_cost_amount, @live_sales_alw as live_sales_alw, @live_cost as live_cost');
						//print_r($get_data);
						$basic =  $get_data->row();
						$live_cost = round($basic->live_cost,3);
					}else{
						$material_sales_id = $material_id;
						$bc = $bc_id;
						$check_sku = $this->admin->get_query("SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details
							FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e
							WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
							AND a.prod_id= " . $material_sales_id . " AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3
							AND a.bc_id = " . $bc . " AND b.prod_trans_dtl_date = '" . $date ."' AND a.brand_id = " . $brand_id . " AND a.process_type_id = 5 AND c.component_type = 'COST OF SALES'", TRUE);
						
						if(count($check_sku) > 0){
							$r = $check_sku->sku_material_id;
							$get_basic = $this->db->query("
								SELECT * FROM (SELECT @r as _id,
									@mat := IFNULL(
										(SELECT d.material_desc
								    	FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d
								   		WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
								        AND a.prod_id=_id AND a.prod_id = d.material_id AND (b.component_type_id = 21
										OR b.component_type_id = 2) AND a.prod_trans_status = 3
								        AND a.bc_id = @bc AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5
								        )
									, '') as mat_desc,

									@unit := IFNULL(
										(SELECT f.unit_name
								    	FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_unit_tbl e, unit_tbl f
								   		WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
								        AND a.prod_id=_id AND a.prod_id = d.material_id AND (b.component_type_id = 21
										OR b.component_type_id = 2) AND a.prod_trans_status = 3 AND d.material_id = e.material_id AND e.valuation_unit = f.unit_id AND e.material_unit_status = 1
								        AND a.bc_id = @bc AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5
								        )
									, '') as mat_unit,

								    @components :=(
										SELECT c.component_type
								    	FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d
								   		WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id
								        AND a.prod_id=_id AND a.prod_id = d.material_id AND a.prod_trans_status = 3
								        AND (b.component_type_id = 21
										OR b.component_type_id = 2) AND a.bc_id = @bc
								        AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5
								        
									) as mat_comp,
								               
								    @process :=(
										SELECT b.process_type_name
								    	FROM prod_trans_tbl a, process_type_tbl b
								        WHERE a.prod_id=_id AND a.process_type_id = b.process_type_id
								        AND a.prod_trans_status = 3 AND a.bc_id = @bc AND a.process_type_id != 5
								        
									) as mat_process, 
									
									(
										SELECT @r := b.article_id
								    	FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c
								   		WHERE a.prod_trans_id = b.prod_trans_id
								        AND b.component_type_id = c.component_type_id
								        AND a.prod_id = _id AND (b.component_type_id = 21 OR b.component_type_id = 2)
								        AND a.prod_trans_status = 3 AND a.bc_id = @bc
								        AND b.prod_trans_dtl_date = @prod_date AND a.process_type_id != 5 LIMIT 1
									) as parent,
								    
								    @l := @l + 1 AS level
								    
								FROM
									(
								   	SELECT
								    	@r := " . $r . ",
								        @l := 1,
								        @bc := " . $bc . ",
								        @prod_date := '" .$date . "',
								        @brand := " . $brand_id . ",
								        @cl := 0,
								        @mat := 'test',
								        @rate := 0,
								        @cost := 0,
								        @process := '',
								        @unit := ''
									) vars,
								    
								    prod_trans_tbl
								    WHERE @mat != '' HAVING @r != 225
									
									
								) as noi_data
								    
								ORDER BY level DESC

							");
							$result = $get_basic->result();
							$fresh_dressed_cost = 0;
							$this->benchmark->mark('code_start');
							foreach($result as $row){
								$prod_id = $row->_id;
								$mat_unit = $row->mat_unit;
								$process = $row->mat_process;
								$mat_desc = $row->mat_desc;
								if($process == "BASIC PROCESSING"){

									$sp = "CALL get_noi_basic(?,?,@total_qty,@total_kgs,@ave_wt,@cost_per_head,@total_cost_amount,@live_sales_alw, @live_cost)";
									$params = array(
										'PARAM_1' => $bc,
										'PARAM_2' => $date,
									);

									$result_basic = $this->db->query($sp, $params);
									$get_data = $this->db->query('SELECT @total_qty as total_qty, @total_kgs as total_kgs, @ave_wt as ave_wt, @cost_per_head as cost_per_head, @total_cost_amount as total_cost_amount, @live_sales_alw as live_sales_alw, @live_cost as live_cost');
									//print_r($get_data);
									$basic =  $get_data->row();
									$total_qty = round($basic->total_qty,3);
									$total_kgs = round($basic->total_kgs,3);
									$live_ave_wt = round($basic->ave_wt,3);
									$cost_per_head = round($basic->cost_per_head,3);
									$total_cost_amount = round($basic->total_cost_amount,3);
									$live_sales_alw = round($basic->live_sales_alw,3);
									$live_cost = round($basic->live_cost,3);
								}elseif($process == "CLASSIFICATION"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										if($components != 'RAW MATERIALS'){
											$rate = $row_det->rate;
											$cost = $row_det->cost;

											$total_qty = round($total_qty * ($rate / 100));
											$total_kgs = round($total_qty * ($cost),3);
											$total_cost_amount = round($total_kgs * $cost_per_head,3);
										}


									}
								}elseif($process == "FURTHER PROCESS - NECKLESS"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");
									$cost_rec_kgs = 0;
									$cost_rec_amount = 0;
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										$mat_desc = $row_det->material_desc;
										$rate = $row_det->rate;
										$cost = $row_det->cost;
										if($components == 'COST RECOVERY'){
											$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate / 100)), 3);
											$mat_desc . ': ' .  round(($total_kgs * ($rate / 100)) * $cost, 3);
											$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate / 100)) * $cost, 3);
											
										}elseif($components == 'CONVERSION COST'){
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
											$mat_desc . ': ' .  round(($total_qty * $rate),3);
										}else{
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
										}
									}

									$total_cost_amount = round($total_cost_amount  -  $cost_rec_amount, 3);
									$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
								}elseif($process == "FURTHER PROCESS - MARINATION"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component, g.unit_name as mat_det_unit, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f, unit_tbl g WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND c.unit_id = g.unit_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component, 0, b.amount_type_id as amount_type FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");

										
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										if($row_det->amount_type == 1){
									 		$rate = $row_det->rate / 100;
									 	}else{
									 		$rate = $row_det->rate;
									 	}

										$cost = $row_det->cost;
										$mat_details = $row_det->material_desc;
										if($components == 'MARINADES'){
											$total_cost_amount = round($total_cost_amount + (($total_qty * $rate) * $cost));
										}elseif($components == "PACKAGING"){
											if($rate > 0){
												
												$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 2);
											}
										}elseif($components == "CONVERSION COST"){
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate),3);
										}elseif($components == "RAW MATERIALS"){
											if($row_det->mat_det_unit == 'KG'){
												$multiplier = $rate > 0 ? $total_kgs / $rate : $total_kgs;
											}elseif($row_det->mat_det_unit == 'HD'){
												$multiplier = $rate > 0 ? $total_qty / $rate : $total_qty;
											}
										}
									}

									$total_kgs = round($multiplier, 3);
								}elseif($process == "FURTHER PROCESS - CUT UPS PACKAGING"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");

									$cost_rec_kgs = 0;
									$cost_rec_amount = 0;
									$raw_rate = 0;
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										$mat_details = $row_det->material_desc;
										$rate = $row_det->rate;
										$cost = $row_det->cost;
										if($components == 'COST RECOVERY'){
											$mat_details . ' - ' . round(($total_kgs * ($rate / 100)) * $cost, 3) . ' | ' . number_format(($total_kgs * ($rate / 100)), 3);
											$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate / 100)), 3);
											$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate / 100)) * $cost, 3);
										}elseif($components == 'CONVERSION COST'){
											$mat_details . ' - ' . round(($total_qty * $rate), 3);
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
										}elseif($components == "PACKAGING"){
											if(	$rate > 0){
												$mat_details . ' - ' . round((($total_qty / $rate) * $cost),3);
												$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
											}
										}elseif($components == "RAW MATERIALS"){
											$raw_rate = $rate;
										}else{
											$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
										}
									}

									$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
									$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
									$total_qty = round($total_qty / $raw_rate, 3);
								}elseif($process == "FURTHER PROCESS - CUTTING"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");

									$cost_rec_kgs = 0;
									$cost_rec_amount = 0;
									$raw_rate = 0;
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										$mat_details = $row_det->material_desc;
										$rate = $row_det->rate;
										$cost = $row_det->cost;
										if($components == 'COST RECOVERY'){

											$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate / 100)), 3);
											$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate / 100)) * $cost, 3);
											$mat_details . ' - ' . round(($total_kgs * ($rate / 100)) * $cost, 3) . ' | ' . round(($total_kgs * ($rate / 100)), 3);
										}elseif($components == 'CONVERSION COST'){
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
										}elseif($components == "PACKAGING"){
											if(	$rate > 0){
												$mat_details . ' - ' . round((($total_qty / $rate) * $cost), 3);
												$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
											}
										}elseif($components == "RAW MATERIALS"){
											$raw_rate = $rate;
										}else{
											$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
										}
									}

									$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
									$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
									$total_qty = round($total_qty / $raw_rate, 3);
								}elseif($process == "FURTHER PROCESS - INDIVIDUAL PACKAGING"){
									$get_prod_det = $this->admin->get_query("SELECT a.prod_id, b.rate, b.cost, c.material_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, material_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE  a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 1 AND b.article_id = c.material_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'

										UNION ALL

										SELECT a.prod_id, b.rate, b.cost, c.service_desc, b.component_type_id, d.component_type as det_component, e.component_type as trans_component FROM prod_trans_tbl a, prod_trans_dtl_tbl b, services_tbl c, component_type_tbl d, component_type_tbl e, process_type_tbl f WHERE a.prod_id = " . $prod_id . " AND a.bc_id = " . $bc . " AND a.prod_trans_status = 3 AND a.prod_trans_id = b.prod_trans_id AND b.component_type_id = d.component_type_id AND a.component_type_id = e.component_type_id AND b.article_type_id = 2 AND b.article_id = c.service_id AND a.process_type_id = f.process_type_id AND b.prod_trans_dtl_date = '" . $date . "' AND f.process_type_name = '" . $process . "'");

									$cost_rec_kgs = 0;
									$cost_rec_amount = 0;
									$raw_rate = 0;
									foreach($get_prod_det as $row_det){
										$components = $row_det->det_component;
										$mat_details = $row_det->material_desc;
										$rate = $row_det->rate;
										$cost = $row_det->cost;
										if($components == 'COST RECOVERY'){
											$cost_rec_kgs = round($cost_rec_kgs + ($total_kgs * ($rate / 100)), 3);
											$cost_rec_amount = round($cost_rec_amount + ($total_kgs * ($rate / 100)) * $cost, 3);
										}elseif($components == 'CONVERSION COST'){
											$total_cost_amount = round($total_cost_amount + ($total_qty * $rate), 3);
										}elseif($components == "PACKAGING"){
											if(	$rate > 0){
												$total_cost_amount = round($total_cost_amount + (($total_qty / $rate) * $cost), 3);
											}
										}elseif($components == "RAW MATERIALS"){
											$raw_rate = $rate;
										}else{
											$total_cost_amount = round($total_cost_amount + ($total_qty * $cost), 3);
										}
									}

									$total_kgs = round($total_kgs - $cost_rec_kgs, 3);
									$total_cost_amount = round($total_cost_amount - $cost_rec_amount, 3);
									//$total_qty = round($total_qty / $raw_rate, 3);
								}
							}
							//echo $this->benchmark->elapsed_time('code_start', 'code_end');
							//echo '<br />';

							$dressed_ave_wt = $total_qty > 0 || !empty($total_qty) ? round($total_kgs / $total_qty, 3) : 0;
							$total_cost = $total_kgs > 0 || !empty($total_kgs) ? round($total_cost_amount / $total_kgs, 3) : 0;
							$total_ave_wgt = $total_qty > 0 ? $total_kgs / $total_qty : 0;
						}else{
							$total_cost = 0;
						}
					}
				}
				$production_cost = $total_cost;
				$get_bom = $this->db->query('
					SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details, b.rate, b.cost FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= ' . $material_id . ' AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND a.brand_id = ' . $brand_id . ' AND a.process_type_id = 5 AND c.component_type != \'COST OF SALES\' AND c.component_type != \'SALES REVENUE\'

						UNION ALL

						SELECT e.service_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.service_desc as mat_details, b.rate, b.cost FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, services_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= ' . $material_id . ' AND a.prod_id = d.material_id AND b.article_id = e.service_id AND b.article_type_id = 2 AND a.prod_trans_status = 3 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND a.brand_id = ' . $brand_id . ' AND a.process_type_id = 5
				')->result();
				
				$bom_total = 0;
				$bom_multiplier = 1;
				foreach($get_bom as $row_bom){
					$bom_cost = $row_bom->cost;
					$bom_rate = $row_bom->rate;

					$bom_multiplier = 1;
					if($row_bom->component_type == "COST OF SALES" && $rate > 0){
						$bom_multiplier = $rate;
					}else{
						if($bom_cost > 0){
							$bom_total = $bom_total + ($bom_cost / $bom_rate);
						}else{
							$bom_total = $bom_total + $bom_rate;
						}
					}

				}

				$total_cost = $total_cost + $bom_total;
				$join_sales_item = array(
					'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
					'material_tbl c' => 'b.material_id = c.material_id AND c.material_id = ' . $material_id,
					'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
					'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
					'brand_tbl f' => 'e.brand_id = f.brand_id AND f.brand_id = ' . $brand_id,
					'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc_id,
					'sales_details_tbl h' => 'b.sales_item_id = h.sales_item_id AND h.sales_det_qty > 0 AND h.sales_det_date = "' . $date . '"'
				);

				/*$get_sales_item = $this->admin->get_join('sales_tbl a', $join_sales_item, TRUE, FALSE, FALSE,"h.sales_det_qty as total_qty,
					(CASE 
						WHEN c.material_group_id = 2 THEN
					    ((" . $dressed_ave_wt . " * (h.sales_det_qty)) * 
					    	(
						    	(h.sales_det_asp +
							    	IFNULL(
							    		(
							    			SELECT n.price_adjustment_det_value FROM price_adjustment_tbl m, price_adjustment_details_tbl n WHERE m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
							    		), 
							    	0)
						    	) -
							    IFNULL(
							    	(
							    		SELECT y.sales_tactical_det_price FROM sales_tactical_tbl w, `sales_tactical_item_tbl` `x`, sales_tactical_details_tbl y WHERE w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
							    	),
							    0) / IF(c.vat_type_id = 1, (SELECT tax_value FROM tax_tbl WHERE tax_status = 1), 1)
							)
						)
					    
					    WHEN c.material_code = 225 THEN
					    ((" . $live_ave_wt . " * (h.sales_det_qty)) * 
					    			
					    	(
					    		(h.sales_det_asp + 
					    			IFNULL(
					    				(
					    					SELECT n.price_adjustment_det_value FROM price_adjustment_tbl m, price_adjustment_details_tbl n WHERE m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
					    				), 
					    			0)
					    		) - 

					    		IFNULL(
					    			(
					    				SELECT y.sales_tactical_det_price FROM sales_tactical_tbl w, `sales_tactical_item_tbl` `x`, sales_tactical_details_tbl y WHERE w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
					    			), 
					    		0) / IF(c.vat_type_id = 1, (SELECT tax_value FROM tax_tbl WHERE tax_status = 1), 1)
					    	)
					    )

						ELSE    
					    	SUM(
					    		(h.sales_det_qty) * 
					    			(
					    				(h.sales_det_asp +
					    					IFNULL((SELECT n.price_adjustment_det_value FROM price_adjustment_tbl m, price_adjustment_details_tbl n WHERE m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id),
					    					0)
					    				) - 
					    				IFNULL((SELECT y.sales_tactical_det_price FROM sales_tactical_tbl w, `sales_tactical_item_tbl` `x`, sales_tactical_details_tbl y WHERE w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date),
					    				0) / IF(c.vat_type_id = 1, (SELECT tax_value FROM tax_tbl WHERE tax_status = 1), 1)
					    			)
					    		)
					 END) as total_cm");*/

				/*$get_sales_item = $this->admin->get_join('sales_tbl a', $join_sales_item, TRUE, FALSE, FALSE,' SUM(h.sales_det_qty) as total_qty,
					    	((h.sales_det_qty) * ((h.sales_det_asp + IFNULL((SELECT n.price_adjustment_det_value FROM price_adjustment_tbl m, price_adjustment_details_tbl n WHERE m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id), 0)) - 94.777 - IFNULL((SELECT y.sales_tactical_det_price FROM sales_tactical_tbl w, `sales_tactical_item_tbl` `x`, sales_tactical_details_tbl y WHERE w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date), 0))) as total_cm');*/
				
				$get_sales_item = $this->admin->get_query('

					SELECT SUM(sales.overall_qty * (sales.price / sales.vat)) as net_sales, SUM(sales.overall_qty) as total_qty FROM
						(SELECT
						    c.material_desc,
						    (h.sales_det_qty) AS qty,
						    h.sales_det_asp, IF(c.vat_type_id = 1, 1.12, 1) vat,
						    (
						        CASE WHEN c.material_group_id = 2 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) WHEN c.material_id = 225 THEN(' . $live_sales_alw . ' * h.sales_det_qty) ELSE h.sales_det_qty
						    END
						) AS overall_qty,
						(
						    h.sales_det_asp + IFNULL(
						        (
						        SELECT
						            n.price_adjustment_det_value
						        FROM
						            price_adjustment_tbl m,
						            price_adjustment_details_tbl n
						        WHERE
						            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
						    ),
						    0
						    )
						) - IFNULL(
						    (
						    SELECT
						        y.sales_tactical_det_price
						    FROM
						        sales_tactical_tbl w,
						        `sales_tactical_item_tbl` `x`,
						        sales_tactical_details_tbl y
						    WHERE
						        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
						),
						0
						) as price
						FROM
						    `sales_tbl` `a`
						JOIN `sales_item_tbl` `b` ON
						    `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1
						JOIN `material_tbl` `c` ON
						    `b`.`material_id` = `c`.`material_id` AND `c`.`material_id` = ' . $material_id . '
						JOIN `outlet_tbl` `d` ON
						    `a`.`outlet_id` = `d`.`outlet_id`
						JOIN `outlet_brand_tbl` `e` ON
						    `d`.`outlet_id` = `e`.`outlet_id` AND `e`.`outlet_brand_status` = 1
						JOIN `brand_tbl` `f` ON
						    `e`.`brand_id` = `f`.`brand_id` AND `f`.`brand_id` = ' . $brand_id . '
						JOIN `bc_tbl` `g` ON
						    `d`.`bc_id` = `g`.`bc_id` AND `g`.`bc_id` = ' . $bc_id . '
						JOIN `sales_details_tbl` `h` ON
						    `b`.`sales_item_id` = `h`.`sales_item_id` AND `h`.`sales_det_qty` > 0 AND `h`.`sales_det_date` = "' . $date . '"
						 ) as sales', TRUE);
				if(count($get_sales_item) > 0){
					$total_qty = $get_sales_item->total_qty;
					$net_sales = $get_sales_item->net_sales;
					if($material_id == 225){
						$variable = ($total_cost + $live_cost) * $total_qty;
					}else{
						$variable = ($total_cost * $total_qty) + ($production_cost * ($bom_multiplier - 1));
					}

					$cm = $net_sales - $variable;

					$overall_variable += $variable;
					$overall_cm += $cm;
					$overall_net_sales += $net_sales;
					/*echo $material_desc;
					echo ' : ';
					echo $net_sales;
					echo '<br />';*/
				}

				
				echo $date; 
				echo '<br/>';
				echo $material_desc . ' - ' . $brand_name;
				echo '<br/>';
				echo 'Qty: ' . $total_qty;
				echo '<br/>';	
				echo 'Net Sales: ' . $net_sales;
				echo '<br/>';
				echo 'CM: ' . $cm;
				echo '<br/>';
				echo '<br/>';

				$this->benchmark->mark('code_end');
				
				$total_cost = 0;
				$bom_multiplier = 0;
			}else{
				echo $material_desc . ' Not Exist!';
				echo '<br />';
			}
		}
		echo '<br/>';
		echo '<br/>';
		$data['overall_cm'] = $overall_cm;
		$data['variable_cost'] = $overall_variable;
		$data['net_sales'] = $overall_net_sales;
		return $data;
	}

	public function download_sales(){


		$year = $this->_active_year();
		$this->load->model('admin_model');
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		$user_info = $this->get_user_info();
		$bc_id = $user_info['bc_id'];
		$check_bc = $this->admin->check_data('bc_tbl', array('bc_id' => $bc_id, 'bc_status' => 1), TRUE);

		if($check_bc['result'] == TRUE){
			$bc_name = $check_bc['info']->bc_name;
			$check_user = $this->admin->check_data('user_tbl', array('user_id' => $user_id), TRUE);
			if($check_user['result'] == TRUE){
				$name = $check_user['info']->user_lname . ', ' . $check_user['info']->user_fname;
				
			}else{
				exit;
			}
			
		}else{
			exit;
		}


		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('Sales Templates')
				->setSubject('Sales Module')
				->setDescription('Sales Templates');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);

		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_material = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_mat_code= array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		/*$spreadsheet->getActiveSheet()->getStyle("A1:I1")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A1:I1")->applyFromArray($style_info);*/
		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Business Center')
				->setCellValue("B1", 'IFS Code')
				->setCellValue("C1", 'Outlet name')
				->setCellValue("D1", 'Brand')
				->setCellValue("E1", 'Material Code')
				->setCellValue("F1", 'Material Description')
				->setCellValue("G1", 'VAT Type')
				->setCellValue("H1", 'Material Group')
				->setCellValue("I1", 'Date')
				->setCellValue("J1", 'Qty')
				->setCellValue("K1", 'ASP');

		$get_sales = $this->admin->get_query('SELECT g.bc_name, d.ifs_code, d.outlet_name, f.brand_name, c.material_code, c.material_desc, i.vat_type_name, j.material_group_name, h.sales_det_date, h.sales_det_qty, h.sales_det_asp FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 JOIN `material_tbl` `c` ON `b`.`material_id` = `c`.`material_id` JOIN `outlet_tbl` `d` ON `a`.`outlet_id` = `d`.`outlet_id` JOIN `outlet_brand_tbl` `e` ON `d`.`outlet_id` = `e`.`outlet_id` JOIN `brand_tbl` `f` ON `e`.`brand_id` = `f`.`brand_id` JOIN `bc_tbl` `g` ON `d`.`bc_id` = `g`.`bc_id` JOIN `sales_details_tbl` `h` ON `b`.`sales_item_id` = `h`.`sales_item_id` JOIN vat_type_tbl i ON c.vat_type_id = i.vat_type_id JOIN material_group_tbl j ON c.material_group_id = j.material_group_id AND g.bc_id = ' . $bc_id . ' WHERE e.outlet_brand_status = 1');

		$count = 2;
		foreach($get_sales as $row_sales){
			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $row_sales->bc_name)
				->setCellValue("B" . $count, $row_sales->ifs_code)
				->setCellValue("C" . $count, $row_sales->outlet_name)
				->setCellValue("D" . $count, $row_sales->brand_name)
				->setCellValue("E" . $count, $row_sales->material_code)
				->setCellValue("F" . $count, $row_sales->material_desc)
				->setCellValue("G" . $count, $row_sales->vat_type_name)
				->setCellValue("H" . $count, $row_sales->material_group_name)
				->setCellValue("I" . $count, $row_sales->sales_det_date)
				->setCellValue("J" . $count, $row_sales->sales_det_qty)
				->setCellValue("K" . $count, $row_sales->sales_det_asp);

			$count++;
			//exit;
		}

		$spreadsheet->getActiveSheet()->getStyle("A1:K" . $count)->applyFromArray($style_border);
		foreach(range('A','K') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}		

		$spreadsheet->getActiveSheet()->setTitle('Sales data');

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Budgeting - Sales data .xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}
}