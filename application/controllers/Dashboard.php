
<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Dashboard extends CI_Controller {

	public function __construct() {
		parent::__construct();
		$this->load->model('admin_model', 'admin');
	}

	// Reusable error logger
	protected static function log_error($logFile, $message) {
		$date = date('Y-m-d H:i:s');
		file_put_contents($logFile, "[$date] $message\n", FILE_APPEND);
	}

	// Reusable error handler setter
	protected function set_dashboard_error_handler($logFile) {
		return set_error_handler(function($errno, $errstr, $errfile, $errline) use ($logFile) {
			self::log_error($logFile, "PHP Error [$errno] $errstr in $errfile on line $errline");
			return false;
		});
	}

	public function _active_year(){
		$get_budget = $this->admin->check_data('budget_active_tbl', array('budget_active_status' => 1), TRUE);
		$budget_year = $get_budget['info']->budget_active_year;
		return $budget_year;
	}

	public function _require_login(){

		$login = $this->session->userdata('bavi_purchasing');
		
		if(isset($login)){
			$user_type = decode($login['user_type_id']);
			if(decode($login['user_reset']) != 1){
				if($user_type == "1"){
					return $login;
				}elseif($user_type == "2"){
					return $login;
				}elseif($user_type == "3"){
					return $login;
				}elseif($user_type == "6"){
					return $login;
				}elseif($user_type == "7"){
					return $login;
				}elseif($user_type == "4"){
					redirect('admin/broiler-cost');
				}elseif($user_type == "5"){
					redirect('admin/production-cost');
				}else{
					$this->session->unset_userdata('bavi_purchasing');
					$this->session->sess_destroy();
					redirect();
				}
			}else{
				$this->session->unset_userdata('bavi_purchasing');
				$this->session->sess_destroy();
				redirect('login/change-password/' . $login['user_id']);
			}
		}else{
			$this->session->unset_userdata('bavi_purchasing');
			$this->session->sess_destroy();
			redirect();
		}
	}

	public function get_user_info(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);
		$user_type = decode($info['user_type_id']);

		if($user_type == 1 || $user_type == 2){

			$join_cost = array(
				'user_bc_tbl b' => 'a.user_id = b.user_id AND a.user_status_id = 1 AND b.user_bc_status = 1 AND a.user_id = ' . $user_id,
				'bc_tbl c' => 'b.bc_id = c.bc_id',
				'cost_center_tbl d' => 'c.cost_center_code = d.cost_center_code AND d.cost_center_status = 1'
			);

			$check_cost = $this->admin->get_join('user_tbl a', $join_cost, TRUE, FALSE, FALSE, '*, c.bc_id as bc');
			$data['cost_center_id'] = $check_cost->cost_center_id;
			$data['cost_center_code'] = $check_cost->cost_center_code;
			$data['bc_id'] = $check_cost->bc;
			$data['cost_center_desc'] = $check_cost->cost_center_desc;
		}elseif($user_type == 6){
			$join_cost = array(
				'user_region_tbl b' => 'a.user_id = b.user_id AND a.user_status_id = 1 AND b.user_region_status = 1 AND a.user_id = ' . $user_id,
				'region_tbl c' => 'b.region_id = c.region_id'
			);

			$check_cost = $this->admin->get_join('user_tbl a', $join_cost, TRUE);
			$data['region_id'] = $check_cost->region_id;
		}

		

		return $data;
	}

	public function get_bc_cost_center($bc_id){
		$join_bc = array('cost_center_tbl b' => 'a.cost_center_code = b.cost_center_code AND b.cost_center_status = 1 AND a.bc_id = ' . $bc_id);
		$check_bc = $this->admin->check_join('bc_tbl a', $join_bc, TRUE);
		if($check_bc['result'] == TRUE){
			$cost_center_id = $check_bc['info']->cost_center_id;
			return $cost_center_id;
		}else{
			echo 'Error cost center code not exist. Please try again!';
			exit;
		}
	}

	public function get_unit_cost_center($company_unit_id){
		$join_unit = array('cost_center_tbl b' => 'a.cost_center = b.cost_center_code AND b.cost_center_status = 1 AND a.company_unit_id = ' . $company_unit_id);
		$check_unit = $this->admin->check_join('company_unit_tbl a', $join_unit, TRUE);
		if($check_unit['result'] == TRUE){
			$cost_center_id = $check_unit['info']->cost_center_id;
			return $cost_center_id;
		}else{
			echo 'Error cost center code not exist. Please try again!';
			exit;
		}
	}

	public function get_region_cost_center($region_id){
		$where_bc = array('region_id' => $region_id);
		$get_bc = $this->admin->get_data('bc_tbl a', $where_bc);
		$cost_center_arr = array();
		$bc_arr = array();
		foreach($get_bc as $row){
			$bc_id = $row->bc_id;
			$join_bc = array('cost_center_tbl b' => 'a.cost_center_code = b.cost_center_code AND b.cost_center_status = 1 AND a.bc_id = ' . $bc_id);
			$check_bc = $this->admin->check_join('bc_tbl a', $join_bc, TRUE);
			if($check_bc['result'] == TRUE){
				$cost_center_id = $check_bc['info']->cost_center_id;
				array_push($cost_center_arr, $cost_center_id);
				array_push($bc_arr, $bc_id);
			}
		}
		$cost_center_id = implode(", ", $cost_center_arr);
		$bc = implode(", ", $bc_arr);

		$data['cost_center'] = $cost_center_id;
		$data['bc'] = $bc;
		return $data;
	}

	public function get_national_cost_center(){
		$where_bc = array('bc_status' => 1);
		$get_bc = $this->admin->get_data('bc_tbl a', $where_bc);
		$cost_center_arr = array();
		$bc_arr = array();
		foreach($get_bc as $row){
			$bc_id = $row->bc_id;
			$join_bc = array('cost_center_tbl b' => 'a.cost_center_code = b.cost_center_code AND b.cost_center_status = 1 AND a.bc_id = ' . $bc_id);
			$check_bc = $this->admin->check_join('bc_tbl a', $join_bc, TRUE);
			if($check_bc['result'] == TRUE){
				$cost_center_id = $check_bc['info']->cost_center_id;
				array_push($cost_center_arr, $cost_center_id);
				array_push($bc_arr, $bc_id);
			}
		}
		$cost_center_id = implode(", ", $cost_center_arr);
		$bc = implode(", ", $bc_arr);

		$data['cost_center'] = $cost_center_id;
		$data['bc'] = $bc;
		return $data;
	}

	public function get_trans_region($region_id){
		
		$join_bc = array('region_tbl b' => 'a.region_id = b.region_id AND a.region_id = ' . $region_id);
		$get_bc = $this->admin->get_join('bc_tbl a', $join_bc);
		$ids = array();
		$bc_ids = array();
		$region_name = '';
		foreach($get_bc as $row){
			$bc_id = $row->bc_id;
			$region_name = $row->region_name;
			$join_trans = array('dashboard_transaction_status_tbl b' => 'a.dashboard_trans_status_id = b.dashboard_trans_status_id AND a.bc_id = ' . $bc_id . ' AND dashboard_trans_status_name = "COMPLETED"');
			$check_trans = $this->admin->check_join('dashboard_bc_transaction_tbl a', $join_trans, TRUE, 'a.dashboard_bc_trans_added DESC');
			if($check_trans['result'] == TRUE){
				$trans_id = $check_trans['info']->dashboard_bc_trans_id;
				array_push($ids, $trans_id);

				array_push($bc_ids, $bc_id);
			}
		}

		$trans_id = implode(", " , $ids);
		$bcs = implode(", " , $bc_ids);
		$data['trans_id'] = $trans_id;
		$data['bc_id'] = $bc_id;
		$data['region_name'] = $region_name;
		return $data;
	}

	public function get_trans_national(){
		
		$where_bc = array('bc_status' => 1);
		$get_bc = $this->admin->get_data('bc_tbl a', $where_bc);
		$ids = array();
		$bc_ids = array();
		foreach($get_bc as $row){
			$bc_id = $row->bc_id;
			$join_trans = array('dashboard_transaction_status_tbl b' => 'a.dashboard_trans_status_id = b.dashboard_trans_status_id AND a.bc_id = ' . $bc_id . ' AND dashboard_trans_status_name = "COMPLETED"');
			$check_trans = $this->admin->check_join('dashboard_bc_transaction_tbl a', $join_trans, TRUE, 'a.dashboard_bc_trans_added DESC');
			if($check_trans['result'] == TRUE){
				$trans_id = $check_trans['info']->dashboard_bc_trans_id;
				array_push($ids, $trans_id);
				array_push($bc_ids, $bc_id);
			}
		}

		$trans_id = implode(", " , $ids);
		$bc = implode(", " , $bc_ids);

		$data['trans_id'] = $trans_id;
		$data['bc_id'] = $bc;
		return $data;
	}

	public function get_trans_unit_national(){
		
		$where_unit = array('company_unit_status' => 1);
		$get_unit = $this->admin->get_data('company_unit_tbl a', $where_unit);
		$ids = array();
		foreach($get_unit as $row){
			$company_unit_id = $row->company_unit_id;
			$join_trans = array('dashboard_transaction_status_tbl b' => 'a.dashboard_trans_status_id = b.dashboard_trans_status_id AND a.company_unit_id = ' . $company_unit_id . ' AND dashboard_trans_status_name = "COMPLETED"');
			$check_trans = $this->admin->check_join('dashboard_unit_transaction_tbl a', $join_trans, TRUE, 'a.dashboard_unit_trans_added DESC');
			if($check_trans['result'] == TRUE){
				$trans_id = $check_trans['info']->dashboard_unit_trans_id;
				array_push($ids, $trans_id);
			}
		}

		$trans_id = implode(", " , $ids);
		if(empty($trans_id)){
			$trans_id = 0;
		}

		return $trans_id;
	}

	public function get_trans_bc($trans_id){
		
		$where_bc = 'dashboard_bc_trans_id IN (' . $trans_id . ')';
		$join_bc = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id AND a.dashboard_bc_trans_id IN (' . $trans_id . ')',
			'cost_center_tbl c' => 'b.cost_center_code = c.cost_center_code AND c.cost_center_status = 1'
		);
		$get_bc = $this->admin->get_join('dashboard_bc_transaction_tbl a', $join_bc, FALSE, FALSE, FALSE, '*, (b.bc_id) as bc');
		$bc_ids = array();
		$cost_center_ids = array();
		foreach($get_bc as $row){
			$bc_id = $row->bc;
			$cost_center_id = $row->cost_center_id;
			array_push($bc_ids, $bc_id);
			array_push($cost_center_ids, $cost_center_id);
		}

		$bcs = implode(", " , $bc_ids);
		$cost_centers = implode(", " , $cost_center_ids);
		$data['bc_id'] = $bcs;
		$data['cost_center_id'] = $cost_centers;
		return $data;
	}



	public function logout(){
		$this->session->unset_userdata('bavi_purchasing');
		$this->session->sess_destroy();
		redirect();
	}

	public function index($year = null){
		$info = $this->_require_login();
		$data['title'] = 'Dashboard';

		if($year == null){
			$year = $this->_active_year();
		}

		$data['year'] = $year;
 		$join_bc_trans = array(
			'bc_tbl b' => 'a.bc_id = b.bc_id AND a.dashboard_bc_trans_year = ' . $year,
			'dashboard_transaction_status_tbl c' => 'a.dashboard_trans_status_id = c.dashboard_trans_status_id',
			'user_tbl d' => 'a.user_id = d.user_id'
		);

		$data['trans_bc'] = $this->admin->get_join('dashboard_bc_transaction_tbl a', $join_bc_trans, FALSE,'a.dashboard_bc_trans_added DESC');

		$join_unit_trans = array(
			'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.dashboard_unit_trans_year = ' . $year,
			'dashboard_transaction_status_tbl c' => 'a.dashboard_trans_status_id = c.dashboard_trans_status_id',
			'user_tbl d' => 'a.user_id = d.user_id'
		);

		$data['trans_unit'] = $this->admin->get_join('dashboard_unit_transaction_tbl a', $join_unit_trans, FALSE,'a.dashboard_unit_trans_added DESC');

		$select_region = '
			a.region_name, a.region_id,
			(SELECT COUNT(DISTINCT(y.bc_id)) FROM dashboard_bc_transaction_tbl x, bc_tbl y WHERE x.bc_id = y.bc_id AND a.region_id = y.region_id AND x.dashboard_trans_status_id = 3 AND x.dashboard_bc_trans_year = ' . $year . ') as count_completed

		';
		$data['trans_region'] = $this->admin->get_data('region_tbl a', array('region_status' => 1), FALSE, $select_region);

		$data['bc'] = $this->admin->get_data('bc_tbl', array('bc_status' => 1));
		$data['unit'] = $this->admin->get_data('company_unit_tbl', array('company_unit_status' => 1));
		$data['content'] = $this->load->view('dashboard/dashboard_transaction_content', $data , TRUE);

		$user_type = decode($info['user_type_id']);
		if($user_type == 1){
			$this->load->view('admin/templates', $data);
		}elseif($user_type == 2){
			$this->load->view('bc/templates', $data);
		}elseif($user_type == 3){
			$this->load->view('unit/templates', $data);
		}
	}

	public function add_bc_trans(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$year = clean_data($this->input->post('year'));
			$bc = decode(clean_data($this->input->post('bc')));

			if(!empty($bc) && !empty($year)){
				$check_trans = $this->admin->check_data('dashboard_bc_transaction_tbl', 'bc_id = ' . $bc . ' AND dashboard_bc_trans_year = ' . $year);
				
				if($check_trans == TRUE){
					$check_trans2 = $this->admin->get_query('SELECT * FROM dashboard_bc_transaction_tbl WHERE bc_id = ' . $bc . ' AND dashboard_bc_trans_year = ' . $year . ' ORDER BY dashboard_bc_trans_added DESC LIMIT 1', TRUE);
					if(!empty($check_trans2)){
						$status = $check_trans2->dashboard_trans_status_id;
						if($status == 1 || $status == 2 || $status == 4){
							$msg = '<div class="alert alert-danger">Error Report Cron on going. Please try again later!</div>';
							$this->session->set_flashdata('message', $msg);
							redirect($_SERVER['HTTP_REFERER']);
						}else{
							$set = array(
								'bc_id' => $bc,
								'user_id' => $user_id,
								'dashboard_bc_trans_year' => $year,
								'dashboard_bc_trans_added' => date_now(),
								'dashboard_trans_status_id' => 1
							);

							$result = $this->admin->insert_data('dashboard_bc_transaction_tbl', $set, TRUE);
						}
					}

					if($result == TRUE){	
						$msg = '<div class="alert alert-success">Report is now in Queue.</div>';
						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}else{
						$msg = '<div class="alert alert-danger">Error while inserting data. Please try again!</div>';
					}
				}else{
					$set = array(
						'bc_id' => $bc,
						'user_id' => $user_id,
						'dashboard_bc_trans_year' => $year,
						'dashboard_bc_trans_added' => date_now(),
						'dashboard_trans_status_id' => 1
					);

					$result = $this->admin->insert_data('dashboard_bc_transaction_tbl', $set, TRUE);

					if($result == TRUE){	
						$msg = '<div class="alert alert-success">Report is now in Queue.</div>';
						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}else{
						$msg = '<div class="alert alert-danger">Error while inserting data. Please try again!</div>';
					}
				}
				
			}else{
				$msg = '<div class="alert alert-danger">Error empty data. Please try again!</div>';
			}
		}else{
			redirect('admin');
		}

		$this->session->set_flashdata('message', $msg);
		redirect($_SERVER['HTTP_REFERER']);
	}

	public function add_unit_trans(){
		$info = $this->_require_login();
		$user_id = decode($info['user_id']);

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$year = clean_data($this->input->post('year'));
			$company_unit = decode(clean_data($this->input->post('unit')));
			$cost_center_id = $this->get_unit_cost_center($company_unit);

			if(!empty($company_unit) && !empty($year)){
				$check_trans = $this->admin->check_data('dashboard_unit_transaction_tbl', 'company_unit_id = ' . $company_unit . ' AND dashboard_unit_trans_year = ' . $year . ' AND dashboard_trans_status_id IN (1, 2, 4)');
				if($check_trans == FALSE){
					$set = array(
						'company_unit_id' => $company_unit,
						'cost_center_id' => $cost_center_id,
						'user_id' => $user_id,
						'dashboard_unit_trans_year' => $year,
						'dashboard_unit_trans_added' => date_now(),
						'dashboard_trans_status_id' => 1
					);

					$result = $this->admin->insert_data('dashboard_unit_transaction_tbl', $set, TRUE);

					if($result == TRUE){	
						$msg = '<div class="alert alert-success">Report is now in Queue.</div>';
						$this->session->set_flashdata('message', $msg);
						redirect($_SERVER['HTTP_REFERER']);
					}else{
						$msg = '<div class="alert alert-danger">Error while inserting data. Please try again!</div>';
					}
				}else{
					$msg = '<div class="alert alert-danger">Error Report Cron on going. Please try again later!</div>';
				}
				
			}else{
				$msg = '<div class="alert alert-danger">Error empty data. Please try again!</div>';
			}
		}else{
			redirect('admin');
		}

		$this->session->set_flashdata('message', $msg);
		redirect($_SERVER['HTTP_REFERER']);
	}

	// BC DASHBOARD
	public function process_dashboard($bc_name){
		//$info = $this->_require_login();
		$bc_name = clean_data($bc_name);
		$bc_name = str_replace('-', ' ', $bc_name);

		

		$check_processing = $this->admin->check_data('dashboard_bc_transaction_tbl', array('dashboard_trans_status_id' => 2));

		// var_dump($check_processing);
		if($check_processing == FALSE){
			$join_process = array('bc_tbl b' => "a.bc_id = b.bc_id AND a.dashboard_trans_status_id = 1");
			$order_by = 'a.dashboard_bc_trans_added ASC';
			$get_process = $this->admin->check_join('dashboard_bc_transaction_tbl a', $join_process, TRUE, $order_by);
			
			if($get_process['result'] == TRUE){

				// echo $get_process['info']->bc_name;
				// echo $get_process['info']->dashboard_bc_trans_id;
				// echo " ".$bc_name;
				if($get_process['info']->bc_name == strtoupper($bc_name)){

					

					$dashboard_bc_trans_id = $get_process['info']->dashboard_bc_trans_id;
					$bc_id = $get_process['info']->bc_id;
					$year = $get_process['info']->dashboard_bc_trans_year;
					$this->dashboard($dashboard_bc_trans_id, $bc_id, $year, $bc_name);
				} else {
					echo "{$bc_name} input is not the same as current to process : {$get_process['info']->dashboard_bc_trans_id} - {$get_process['info']->bc_name}.";
				}
			}else{
				echo 'Ongoing Queue';
			}
		}else{
			echo 'Ongoing Process';
		}
	}

	public function dashboard($trans_id, $bc_id, $year, $bc_name){
		// Error log setup
		$logDir = APPPATH . '../assets/ErrorLogs/';
		$logFile = $logDir . "process-dashboard-{$trans_id} {$bc_name}.log";
		if (!file_exists($logDir)) {
			mkdir($logDir, 0777, true);
		}
		if (!file_exists($logFile)) {
			file_put_contents($logFile, "");
			chmod($logFile, 0666);
		}
		$prev_error_handler = $this->set_dashboard_error_handler($logFile);

		try {
			// ...existing code...
			$data['title'] = 'Dashboard';
			ini_set('max_execution_time', 0); 
			ini_set('memory_limit','10048M');
			$cost_center_id = $this->get_bc_cost_center($bc_id);
			$last_year = $year - 1;
			$data['year'] = $year;
			$data['last_year'] = $last_year;
			$set_trans = array('dashboard_trans_status_id' => 2, 'dashboard_bc_trans_process' => date_now());
			$where_trans = array('dashboard_bc_trans_id' => $trans_id);
			$update_trans = $this->admin->update_data('dashboard_bc_transaction_tbl', $set_trans, $where_trans);
			$this->db->trans_start();

			/*Broiler*/
			$get_broiler = $this->get_broiler_dashboard($trans_id, $bc_id, $year);
			/*Sales Mix*/
			$get_sales_mix = $this->sales_mix_data($trans_id, $bc_id, $year);
			
			/*Outlet Count*/
			$get_outlet = $this->get_outlet_data($trans_id, $bc_id, $year);
			/*Employee Count*/
			$get_employee = $this->get_employee_data($trans_id, $bc_id, $year);
			$employee_pdf = $this->employee_pdf_data($trans_id, $bc_id, $year);
			/*Volume*/
			$volume = $this->get_volume_data($trans_id, $bc_id, $year);
			/*Price Assumption*/
			$data['price'] = $this->price_assumption_data($trans_id, $bc_id, $year);
			/*NOI*/
			$compute_noi =  $this->compute_noi($trans_id, $bc_id, $year);
			/*CAPEX*/
			$get_capex = $this->capex_summary_data($trans_id, $bc_id, $year);
			$get_capex_item = $this->capex_report_item_data($trans_id, $bc_id, $cost_center_id, $year);
			$get_capex_group = $this->capex_report_group_data($trans_id, $bc_id, $cost_center_id, $year);
			/*OPEX*/
			$total_opex = $this->opex_nationwide_bc2($trans_id, $bc_id, $year);
			/*OPEX Per GL*/
			$get_opex_data = $this->get_opex_gl_dashboard($trans_id, $bc_id, $year, $cost_center_id, $bc_id);
			$data['opex_tbl'] = $get_opex_data;
			/*OPEX Per Cost Center*/
			$get_opex_cost_center_data = $this->opex_per_cost_center_data($trans_id, $bc_id, $cost_center_id, $year);

			$variable_cost = $compute_noi['total_variable'];
			$data['variable_cost'] = $variable_cost;
			$commission = $compute_noi['total_commission'];
			$data['commission'] = $commission;
			$data['variable_cost'] = $compute_noi['total_variable'];
			$data['total_net_sales'] = $compute_noi['total_net_sales'];
			$net_sales = $compute_noi['total_net_sales'];
			$data['net_sales'] = $net_sales;
			$data['total_opex'] = $total_opex;
			$data['period_cost'] = $total_opex;
			$total_sales_unit = $compute_noi['total_sales_unit'];
			$cm = $net_sales - $variable_cost;
			$period_cost = $total_opex;
			$noi_summary = $cm - $total_opex;
			$noi_percent = $net_sales > 0 ? ($noi_summary / $net_sales) * 100 : 0;
			$get_pnl = $this->get_noi_dashboard($trans_id, $bc_id, $year, $net_sales, $total_sales_unit, $variable_cost, $period_cost, $commission);

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$set_trans = array('dashboard_trans_status_id' => 6, 'dashboard_bc_trans_end' => date_now());
				$where_trans = array('dashboard_bc_trans_id' => $trans_id);
				$update_trans = $this->admin->update_data('dashboard_bc_transaction_tbl', $set_trans, $where_trans);
				$db_error = print_r($this->db->error(), true);
				$this->log_error($logFile, "DB transaction failed and rolled back. DB Error: " . $db_error);
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success">Price successfully adjusted.</strong></div>';
				$set_trans = array('dashboard_trans_status_id' => 3, 'dashboard_bc_trans_end' => date_now());
				$where_trans = array('dashboard_bc_trans_id' => $trans_id);
				$update_trans = $this->admin->update_data('dashboard_bc_transaction_tbl', $set_trans, $where_trans);
				if (file_exists($logFile)) { @unlink($logFile); }
			}

			echo $msg;
		} catch (Throwable $e) {
			$this->log_error($logFile, "Error in dashboard: " . $e->getMessage());
			echo '<div class="alert alert-danger">Error occurred. See log.</div>';
		}

		// Restore previous error handler
		if ($prev_error_handler !== null) {
			set_error_handler($prev_error_handler);
		} else {
			restore_error_handler();
		}
	}

	public function get_broiler_dashboard($trans_id, $bc_id, $year){
		//$info = $this->_require_login();
		
		$trans_year = encode($year);
		$doctype = encode('trans');
		$join = array('bc_tbl b' => 'a.bc_id = b.bc_id');
 		$harvested_actual_data = $this->admin->get_join('broiler_amount_summary_tbl a', $join, false, false, false, 'a.broiler_line_item_id, trans_qty',  array('trans_type_id' => 2, 'YEAR(a.trans_date)' =>	$year - 1,	'a.bc_id'	=>	$bc_id, 'a.trans_status !='	=> 5));

 		$i = 1;
 		$kilo = 1;
 		$feeds = 1;
 		$cg_fee = 1;
 		$medicines = 1;
 		$vaccines = 1;
 		$doc = 1;

 		$actual_harvested_heads = array();
		$actual_harvested_kilo = array();
		$actual_feeds_amount = array();
		$actual_cg_fee_amount = array();
		$actual_medicines_amount = array();
		$actual_vaccines_amount = array();
		$actual_doc_amount = array();
 		if(!empty($harvested_actual_data)){
	 		foreach ($harvested_actual_data as $r) {
	 			if($r->broiler_line_item_id == 7){
		 			$actual_harvested_heads[$i] = $r->trans_qty;
		 			$i++;
	 			}
	 			if($r->broiler_line_item_id == 6){
	 				$actual_harvested_kilo[$kilo] = $r->trans_qty;
		 			$kilo++;
	 			}
	 			if($r->broiler_line_item_id == 5){
	 				$actual_feeds_amount[$feeds] = $r->trans_qty;
		 			$feeds++;
	 			}
	 			if($r->broiler_line_item_id == 4){
	 				$actual_cg_fee_amount[$cg_fee] = $r->trans_qty;
		 			$cg_fee++;
	 			}
	 			if($r->broiler_line_item_id == 3){
	 				$actual_medicines_amount[$medicines] = $r->trans_qty;
		 			$medicines++;
	 			}
	 			if($r->broiler_line_item_id == 2){
	 				$actual_vaccines_amount[$vaccines] = $r->trans_qty;
		 			$vaccines++;
	 			}
	 			if($r->broiler_line_item_id == 1){
	 				$actual_doc_amount[$doc] = $r->trans_qty;
		 			$doc++;
	 			}
	 		}

	 		$actual_harvested_heads = @$actual_harvested_heads;
	 		$actual_harvested_kilo = @$actual_harvested_kilo;
	 		$actual_feeds_amount = @$actual_feeds_amount;
	 		$actual_cg_fee_amount = @$actual_cg_fee_amount;
	 		$actual_medicines_amount = @$actual_medicines_amount;
	 		$actual_vaccines_amount = @$actual_vaccines_amount;
	 		$actual_doc_amount = @$actual_doc_amount;
 		}

 		$join = array('bc_tbl b' => 'a.bc_id = b.bc_id');
 		$previous_harvested_actual_data = $this->admin->get_join('broiler_amount_summary_tbl a', $join, false, false, false, 'a.broiler_line_item_id, trans_qty',  array('trans_type_id' => 2, 'YEAR(a.trans_date)' =>	$year - 2,	'a.bc_id'	=>	$bc_id, 'a.trans_status !='	=> 5));

 		$i = 1;
 		$kilo = 1;
 		$feeds = 1;
 		$cg_fee = 1;
 		$medicines = 1;
 		$vaccines = 1;
 		$doc = 1;

 		$previous_actual_harvested_heads= array();
		$previous_actual_harvested_kilo= array();
		$previous_actual_feeds_amount= array();
		$previous_actual_cg_fee_amount= array();
		$previous_actual_medicines_amount= array();
		$previous_actual_vaccines_amount= array();
		$previous_actual_doc_amount= array();
 		if(!empty($previous_harvested_actual_data)){
 			foreach ($previous_harvested_actual_data as $r) {
	 			
	 			if($r->broiler_line_item_id == 7){
		 			$previous_actual_harvested_heads[$i] = $r->trans_qty;
		 			$i++;
	 			}
	 			if($r->broiler_line_item_id == 6){
	 				$previous_actual_harvested_kilo[$kilo] = $r->trans_qty;
		 			$kilo++;
	 			}
	 			if($r->broiler_line_item_id == 5){
	 				$previous_actual_feeds_amount[$feeds] = $r->trans_qty;
		 			$feeds++;
	 			}
	 			if($r->broiler_line_item_id == 4){
	 				$previous_actual_cg_fee_amount[$cg_fee] = $r->trans_qty;
		 			$cg_fee++;
	 			}
	 			if($r->broiler_line_item_id == 3){
	 				$previous_actual_medicines_amount[$medicines] = $r->trans_qty;
		 			$medicines++;
	 			}
	 			if($r->broiler_line_item_id == 2){
	 				$previous_actual_vaccines_amount[$vaccines] = $r->trans_qty;
		 			$vaccines++;
	 			}
	 			if($r->broiler_line_item_id == 1){
	 				$previous_actual_doc_amount[$doc] = $r->trans_qty;
		 			$doc++;
	 			}
	 		}
	 		$previous_actual_harvested_heads = @$previous_actual_harvested_heads;
	 		$previous_actual_harvested_kilo = @$previous_actual_harvested_kilo;
	 		$previous_actual_feeds_amount = @$previous_actual_feeds_amount;
	 		$previous_actual_cg_fee_amount = @$previous_actual_cg_fee_amount;
	 		$previous_actual_medicines_amount = @$previous_actual_medicines_amount;
	 		$previous_actual_vaccines_amount = @$previous_actual_vaccines_amount;
	 		$previous_actual_doc_amount = @$previous_actual_doc_amount;
 		}

	 	$join = array(
			'broiler_summary_item_tbl b' => 'a.broiler_summary_item_id = b.broiler_summary_item_id and a.bc_id ='.$bc_id.' and YEAR(a.trans_date) = '.$year.' and a.trans_type_id = 1 and a.broiler_summary_status = 1'
		);
		$broiler_summary = $this->admin->get_join('broiler_summary_tbl a', $join, false, 'b.order_count, MONTH(a.trans_date)', false, false, false, false);

		$i = 1;
		$budgeted_harvested_heads = array();
		$budgeted_harvested_kilo = array();
		$budgeted_doc_cost_amount = array();
		$budgeted_growers_fee_amount = array();
		$budgeted_feed_cost_amount = array();
		$budgeted_vaccines_amount = array();
		$budgeted_medicine_amount = array();
		$budgeted_disinfectant_amount = array();
		if(!empty($broiler_summary)){
			foreach ($broiler_summary as $broiler_summary_row) {
				if($broiler_summary_row->broiler_summary_item_id == 33){
					$budgeted_harvested_heads[$i] = $broiler_summary_row->trans_qty;
		 			$i++;

		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 34){
					$budgeted_harvested_kilo[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 35){
					$budgeted_doc_cost_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 1){
					$budgeted_growers_fee_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 37){
					$budgeted_feed_cost_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 45){
					$budgeted_vaccines_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 42){
					$budgeted_medicine_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				} else if($broiler_summary_row->broiler_summary_item_id == 43){
					$budgeted_disinfectant_amount[$i] = $broiler_summary_row->trans_qty;
		 			$i++;
		 			if($i == 13) $i = 1;
				}
			}
			$budgeted_harvested_heads = @$budgeted_harvested_heads;
			$budgeted_harvested_kilo = @$budgeted_harvested_kilo;
			$budgeted_doc_cost_amount = @$budgeted_doc_cost_amount;
			$budgeted_growers_fee_amount = @$budgeted_growers_fee_amount;
			$budgeted_feed_cost_amount = @$budgeted_feed_cost_amount;
			$budgeted_vaccines_amount = @$budgeted_vaccines_amount;
			$budgeted_medicine_amount = @$budgeted_medicine_amount;
			$budgeted_disinfectant_amount = @$budgeted_disinfectant_amount;

		}


		$total_actual_harvested_heads = 0;
		$total_actual_doc = 0;
		$total_actual_feeds = 0;
		$total_actual_cg = 0;
		$total_actual_medicines = 0;
		$total_actual_vaccines = 0;
		$total_actual_harvested_kilo = 0;

		$total_previous_actual_harvested_heads = 0;
		$total_previous_actual_doc = 0;
		$total_previous_actual_feeds = 0;
		$total_previous_actual_cg = 0;
		$total_previous_actual_medicines = 0;
		$total_previous_actual_vaccines = 0;
		$total_previous_actual_harvested_kilo = 0;

		$harvested_heads = 0;
		$harvested_kilo = 0;
		$growers_fee_amount = 0;
		$feed_cost_amount = 0;
		$vaccines_amount = 0;
		$medicine_amount = 0;
		$disinfectant_amount = 0;
		$doc_cost_amount = 0;

		$table = '';
		for ($i=1; $i <=12 ; $i++) {
			//BUDGET BROILER
			$budgeted_harvested_heads[$i] = isset($budgeted_harvested_heads[$i]) ? $budgeted_harvested_heads[$i] : 0;
			$budgeted_harvested_kilo[$i] = isset($budgeted_harvested_kilo[$i]) ? $budgeted_harvested_kilo[$i] : 0;
			$budgeted_doc_cost_amount[$i] = isset($budgeted_doc_cost_amount[$i]) ? $budgeted_doc_cost_amount[$i] : 0;
			$budgeted_growers_fee_amount[$i] = isset($budgeted_growers_fee_amount[$i]) ? $budgeted_growers_fee_amount[$i] : 0;
			$budgeted_feed_cost_amount[$i] = isset($budgeted_feed_cost_amount[$i]) ? $budgeted_feed_cost_amount[$i] : 0;
			$budgeted_vaccines_amount[$i] = isset($budgeted_vaccines_amount[$i]) ? $budgeted_vaccines_amount[$i] : 0;
			$budgeted_medicine_amount[$i] = isset($budgeted_medicine_amount[$i]) ? $budgeted_medicine_amount[$i] : 0;
			$budgeted_disinfectant_amount[$i] = isset($budgeted_disinfectant_amount[$i]) ? $budgeted_disinfectant_amount[$i] : 0;

			$harvested_heads = $harvested_heads + $budgeted_harvested_heads[$i];
			$harvested_kilo = $harvested_kilo + $budgeted_harvested_kilo[$i];
			$doc_cost_amount = $doc_cost_amount + $budgeted_doc_cost_amount[$i];
			$growers_fee_amount = $growers_fee_amount + $budgeted_growers_fee_amount[$i];
			$feed_cost_amount = $feed_cost_amount + $budgeted_feed_cost_amount[$i];
			$vaccines_amount = $vaccines_amount + $budgeted_vaccines_amount[$i];
			$medicine_amount = $medicine_amount + $budgeted_medicine_amount[$i];
			$disinfectant_amount = $disinfectant_amount + $budgeted_disinfectant_amount[$i];

			$doc_ave = $harvested_kilo == 0 ? 0 : $doc_cost_amount/$harvested_kilo;
			$growers_fee_ave = $harvested_kilo == 0 ? 0 : $growers_fee_amount/$harvested_kilo;
			$feed_cost_ave = $harvested_kilo == 0 ? 0 : $feed_cost_amount/$harvested_kilo;
			$vaccines_ave = $harvested_kilo == 0 ? 0 : $vaccines_amount/$harvested_kilo;
			$total = $disinfectant_amount + $medicine_amount;
			$medicine_ave = $harvested_kilo == 0 ? 0 : $total/$harvested_kilo;
			$month = date('F', strtotime($year.'-'.$i.'-01'));
			$actual_harvested_heads[$i] = isset($actual_harvested_heads[$i]) ? $actual_harvested_heads[$i] : 0;

			

			$actual_harvested_kilo[$i] = isset($actual_harvested_kilo[$i]) ? $actual_harvested_kilo[$i] : 0;
			$actual_feeds_amount[$i] = isset($actual_feeds_amount[$i]) ? $actual_feeds_amount[$i] : 0;
			$actual_cg_fee_amount[$i] = isset($actual_cg_fee_amount[$i]) ? $actual_cg_fee_amount[$i] : 0;
			$actual_medicines_amount[$i] = isset($actual_medicines_amount[$i]) ? $actual_medicines_amount[$i] : 0;
			$actual_vaccines_amount[$i] = isset($actual_vaccines_amount[$i]) ? $actual_vaccines_amount[$i] : 0;
			$actual_doc_amount[$i] = isset($actual_doc_amount[$i]) ? $actual_doc_amount[$i] : 0;

			$actual_doc[$i] = $actual_harvested_kilo[$i] == 0 ? 0 : $actual_doc_amount[$i]/$actual_harvested_kilo[$i];
			$actual_feeds[$i] = $actual_harvested_kilo[$i] == 0 ? 0 : $actual_feeds_amount[$i]/$actual_harvested_kilo[$i];
			$actual_cg[$i] = $actual_harvested_kilo[$i] == 0 ? 0 : $actual_cg_fee_amount[$i]/$actual_harvested_kilo[$i];
			$actual_medicines[$i] = $actual_harvested_kilo[$i] == 0 ? 0 : $actual_medicines_amount[$i]/$actual_harvested_kilo[$i];
			$actual_vaccines[$i] = $actual_harvested_kilo[$i] == 0 ? 0 : $actual_vaccines_amount[$i]/$actual_harvested_kilo[$i];
			$actual_broiler_cost[$i] = $actual_doc[$i] + $actual_feeds[$i] + $actual_cg[$i] + $actual_medicines[$i] + $actual_vaccines[$i];

			$total_actual_doc = $total_actual_doc + $actual_doc_amount[$i];
			$total_actual_feeds = $total_actual_feeds + $actual_feeds_amount[$i];
			$total_actual_cg = $total_actual_cg + $actual_cg_fee_amount[$i];
			$total_actual_medicines = $total_actual_medicines + $actual_medicines_amount[$i];
			$total_actual_vaccines = $total_actual_vaccines + $actual_vaccines_amount[$i];
			$total_actual_harvested_kilo = $total_actual_harvested_kilo + $actual_harvested_kilo[$i];

			$previous_actual_doc_amount[$i] = isset($previous_actual_doc_amount[$i]) ? $previous_actual_doc_amount[$i] : 0;
			$previous_actual_feeds_amount[$i] = isset($previous_actual_feeds_amount[$i]) ? $previous_actual_feeds_amount[$i] : 0;
			$previous_actual_cg_fee_amount[$i] = isset($previous_actual_cg_fee_amount[$i]) ? $previous_actual_cg_fee_amount[$i] : 0;
			$previous_actual_medicines_amount[$i] = isset($previous_actual_medicines_amount[$i]) ? $previous_actual_medicines_amount[$i] : 0;
			$previous_actual_vaccines_amount[$i] = isset($previous_actual_vaccines_amount[$i]) ? $previous_actual_vaccines_amount[$i] : 0;
			$previous_actual_harvested_kilo[$i] = isset($previous_actual_harvested_kilo[$i]) ? $previous_actual_harvested_kilo[$i] : 0;
			$previous_actual_harvested_heads[$i] = isset($previous_actual_harvested_heads[$i]) ? $previous_actual_harvested_heads[$i] : 0;

			$previous_actual_doc[$i] = $previous_actual_harvested_kilo[$i] == 0 ? 0 : $previous_actual_doc_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_feeds[$i] = $previous_actual_harvested_kilo[$i] == 0 ? 0 : $previous_actual_feeds_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_cg[$i] = $previous_actual_harvested_kilo[$i] == 0 ? 0 : $previous_actual_cg_fee_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_medicines[$i] = $previous_actual_harvested_kilo[$i] == 0 ? 0 : $previous_actual_medicines_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_vaccines[$i] = $previous_actual_harvested_kilo[$i] == 0 ? 0 : $previous_actual_vaccines_amount[$i]/$previous_actual_harvested_kilo[$i];
			$previous_actual_broiler_cost[$i] = $previous_actual_doc[$i] + $previous_actual_feeds[$i] + $previous_actual_cg[$i] + $previous_actual_medicines[$i] + $previous_actual_vaccines[$i];

			$total_previous_actual_doc = $total_previous_actual_doc + $previous_actual_doc_amount[$i];
			$total_previous_actual_feeds = $total_previous_actual_feeds + $previous_actual_feeds_amount[$i];
			$total_previous_actual_cg = $total_previous_actual_cg + $previous_actual_cg_fee_amount[$i];
			$total_previous_actual_medicines = $total_previous_actual_medicines + $previous_actual_medicines_amount[$i];
			$total_previous_actual_vaccines = $total_previous_actual_vaccines + $previous_actual_vaccines_amount[$i];
			$total_previous_actual_harvested_kilo = $total_previous_actual_harvested_kilo + $previous_actual_harvested_kilo[$i];

			$total_actual_harvested_heads = $total_actual_harvested_heads + $actual_harvested_heads[$i];

			$total_previous_actual_harvested_heads = $total_previous_actual_harvested_heads + $previous_actual_harvested_heads[$i];

			$table .= '<tr>
				<td>'.$month.'</td>
				<td align="right">'.number_format($budgeted_harvested_heads[$i],0,'.',',').'</td>
				<td align="right">'.number_format($actual_harvested_heads[$i],0,'.',',').'</td>
				<td align="right">'.number_format($previous_actual_harvested_heads[$i],0,'.',',').'</td>

				<td align="right">'.number_format(get_broiler_cost(encode($bc_id), $trans_year, $i, $doctype),dec_places_dis(),'.',',').'</td>
				<td align="right">'.number_format($actual_broiler_cost[$i],dec_places_dis(),'.',',').'</td>
				<td align="right">'.number_format($previous_actual_broiler_cost[$i],dec_places_dis(),'.',',').'</td>
			</tr>';

			$date = $year . '-' . $i . '-' . '01'; 
			$set_broiler = array(
				'dashboard_bc_trans_id' => $trans_id,
				'bc_id' => $bc_id,
				'dashboard_broiler_date' => $date,
				'dashboard_broiler_birds' => $budgeted_harvested_heads[$i],
				'dashboard_broiler_birds1' => $actual_harvested_heads[$i],
				'dashboard_broiler_birds2' => $previous_actual_harvested_heads[$i],
				'dashboard_broiler_cost' => get_broiler_cost(encode($bc_id), $trans_year, $i, $doctype),
				'dashboard_broiler_cost1' => $actual_broiler_cost[$i],
				'dashboard_broiler_cost2' => $previous_actual_broiler_cost[$i],
				'dashboard_broiler_added' => date_now(),
				'dashboard_broiler_status' => 1
			);

			$insert_broiler = $this->admin->insert_data('dashboard_broiler_tbl', $set_broiler);
		}

		$broiler_cost_ave = $medicine_ave + $doc_ave + $growers_fee_ave + $feed_cost_ave + $vaccines_ave;
		$total_actual_broiler_cost = $total_actual_doc + $total_actual_feeds + $total_actual_cg + $total_actual_vaccines + $total_actual_medicines;
		$total_actual_broiler_cost = $total_actual_harvested_kilo <= 0 ? 0 : $total_actual_broiler_cost/$total_actual_harvested_kilo;

		$total_previous_actual_broiler_cost = $total_previous_actual_doc + $total_previous_actual_feeds + $total_previous_actual_cg + $total_previous_actual_vaccines + $total_previous_actual_medicines;
		$total_previous_actual_broiler_cost = $total_previous_actual_harvested_kilo <= 0 ? 0 : $total_previous_actual_broiler_cost/$total_previous_actual_harvested_kilo;
		$table .= '<tr>
				<td align="right">TOTAL</td>
				<td align="right">'.number_format($harvested_heads,0,'.',',').'</td>
				<td align="right">'.number_format($total_actual_harvested_heads,0,'.',',').'</td>
				<td align="right">'.number_format($total_previous_actual_harvested_heads,0,'.',',').'</td>
				<td align="right">'.number_format($broiler_cost_ave,dec_places_dis(),'.',',').'</td>
				<td align="right">'.number_format($total_actual_broiler_cost,dec_places_dis(),'.',',').'</td>
				<td align="right">'.number_format($total_previous_actual_broiler_cost,dec_places_dis(),'.',',').'</td>
			</tr>';
		
		$harvested_dif1 = $harvested_heads - $total_actual_harvested_heads;
		$harvested_dif2 = $harvested_heads - $total_previous_actual_harvested_heads;
		$harvested_percent1 = $total_actual_harvested_heads > 0 ? ($harvested_dif1 / $total_actual_harvested_heads) * 100 : 0;
		$harvested_percent2 = $total_previous_actual_harvested_heads > 0 ? ($harvested_dif2 / $total_previous_actual_harvested_heads) * 100 : 0;

 		$harvested_condition1 = '';
 		$harvested_indicator1 = '';
 		if($harvested_heads > $total_actual_harvested_heads){
 			$harvested_condition1 = 'higher';
 			$harvested_indicator1 = 'fa fa-long-arrow-up';
 		}elseif($harvested_heads < $total_actual_harvested_heads){
 			$harvested_condition1 = 'lower';
 			$harvested_indicator1 = 'fa fa-long-arrow-down';
 		}

 		$harvested_condition2 = '';
 		$harvested_indicator2 = '';
 		if($harvested_heads > $total_previous_actual_harvested_heads){
 			$harvested_condition2 = 'higher';
 			$harvested_indicator2 = 'fa fa-long-arrow-up';
 		}elseif($harvested_heads < $total_previous_actual_harvested_heads){
 			$harvested_condition2 = 'lower';
 			$harvested_indicator2 = 'fa fa-long-arrow-down';
 		}

		$broiler_cost_dif1 = round($broiler_cost_ave) - round($total_actual_broiler_cost);
		$broiler_cost_dif2 = round($broiler_cost_ave) - round($total_previous_actual_broiler_cost);
		$broilder_cost_percent1 = $broiler_cost_ave > 0 ? ($broiler_cost_dif1 / $broiler_cost_ave) * 100 : 0;
		$broilder_cost_percent2 = $broiler_cost_ave > 0 ? ($broiler_cost_dif1 / $broiler_cost_ave) * 100 : 0;

		$broiler_cost_condition1 = '';
 		$broiler_cost_indicator1 = '';
 		if($broiler_cost_ave > $total_actual_broiler_cost){
 			$broiler_cost_condition1 = 'higher';
 			$broiler_cost_indicator1 = 'fa fa-long-arrow-up';
 		}elseif($broiler_cost_ave < $total_actual_broiler_cost){
 			$broiler_cost_condition1 = 'lower';
 			$broiler_cost_indicator1 = 'fa fa-long-arrow-down';
 		}

 		$broiler_cost_condition2 = '';
 		$broiler_cost_indicator2 = '';
 		if($broiler_cost_ave > $total_previous_actual_broiler_cost){
 			$broiler_cost_condition2 = 'higher';
 			$broiler_cost_indicator2 = 'fa fa-long-arrow-up';
 		}elseif($broiler_cost_ave < $total_previous_actual_broiler_cost){
 			$broiler_cost_condition2 = 'lower';
 			$broiler_cost_indicator2 = 'fa fa-long-arrow-down';
 		}

		$data['harvested_heads'] = $harvested_heads;
		$data['harvested_heads1'] = $total_actual_harvested_heads;
		$data['harvested_heads2'] = $total_previous_actual_harvested_heads;
		$data['harvested_dif1'] = $harvested_dif1;
		$data['harvested_dif2'] = $harvested_dif2;
		$data['harvested_percent1'] = $harvested_percent1;
		$data['harvested_percent2'] = $harvested_percent2;
		$data['harvested_condition1'] = $harvested_condition1;
		$data['harvested_condition2'] = $harvested_condition2;
		$data['harvested_indicator1'] = $harvested_indicator1;
		$data['harvested_indicator2'] = $harvested_indicator2;


		$data['broiler_cost'] = $broiler_cost_ave;
		$data['broiler_cost1'] = $total_actual_broiler_cost;
		$data['broiler_cost2'] = $total_previous_actual_broiler_cost;
		$data['broiler_cost_dif1'] = $broiler_cost_dif1;
		$data['broiler_cost_dif2'] = $broiler_cost_dif2;
		$data['broilder_cost_percent1'] = $broilder_cost_percent1;
		$data['broilder_cost_percent2'] = $broilder_cost_percent2;
		$data['broiler_cost_condition1'] = $broiler_cost_condition1;
		$data['broiler_cost_condition2'] = $broiler_cost_condition2;
		$data['broiler_cost_indicator1'] = $broiler_cost_indicator1;
		$data['broiler_cost_indicator2'] = $broiler_cost_indicator2;

		$data['tbl'] = $table;
		return $data;
	}

	public function sales_mix_data($trans_id, $bc_id, $year){

		//$info = $this->_require_login();


		$join = array(
			'report_sales_mix_tbl j' => 'i.report_sales_mix_id = j.report_sales_mix_id AND j.report_sales_mix_status = 1 AND i.report_sales_mix_brand_status = 1',			
			'brand_tbl h' => 'i.brand_id = h.brand_id',
			'outlet_brand_tbl g, left' => 'h.brand_id = g.brand_id AND g.outlet_brand_status = 1',
			'outlet_tbl f, left' => 'g.outlet_id = f.outlet_id',

			'sales_tbl a, left' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'sales_item_tbl b, left' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status AND a.sales_year = ' . $year,
			'sales_details_tbl c, left' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d, left' => 'b.material_id = d.material_id',
			'material_unit_tbl e, left' => 'd.material_id = e.material_id AND e.material_unit_status = 1',
			
			
			'material_group_tbl k, left' => "d.material_group_id = k.material_group_id AND k.material_group_name != 'BY-PRODUCTS'"
		);

		
		$having = " total_sales_mix > 0 or total_sales_mix1 > 0 or total_sales_mix2 > 0";

		$sales_mix = $this->admin->get_join('report_sales_mix_brand_tbl i', $join, FALSE, FALSE, 'j.report_sales_mix_id', 'j.report_sales_mix_id, j.report_sales_mix_name, e.sales_unit_equivalent as sales_unit,

			SUM(
				IF(d.material_code = "9100100", 
					IFNULL((SELECT y.sales_live_alw_det_value FROM sales_live_alw_tbl x, sales_live_alw_detail_tbl y WHERE x.sales_live_alw_id = y.sales_live_alw_id AND x.bc_id = ' .  $bc_id . ' AND x.sales_live_alw_status = 1 AND y.sales_live_alw_det_status = 1 AND x.sales_live_alw_year = ' . $year . ' AND y.sales_live_alw_det_date = c.sales_det_date), 1) * sales_det_qty,

				c.sales_det_qty)
					* (c.sales_det_asp - IFNULL((SELECT z.sales_tactical_det_price FROM sales_tactical_tbl x, sales_tactical_item_tbl y, sales_tactical_details_tbl z WHERE x.sales_tactical_id=y.sales_tactical_id AND y.sales_tactical_item_id=z.sales_tactical_item_id AND f.outlet_id = x.outlet_id AND y.material_id=e.material_id AND c.sales_det_date = z.sales_tactical_det_date AND x.sales_tactical_status = 1 AND y.sales_tactical_item_status = 1 AND z.sales_tactical_det_status = 1 AND YEAR(x.sales_tactical_year) = ' . $year . '), 0))) as total_sales_mix,

			IFNULL(
				(SELECT SUM(x.sales_mix_perc) as total_sales_mix1 FROM comparative_net_sales_tbl x WHERE j.report_sales_mix_name = x.segment AND x.comp_net_sales_status = 1 AND YEAR(x.trans_year) = ' . ($year - 1) . ' AND x.bc_id = ' . $bc_id . ')
			, 0) as total_sales_mix1,

			IFNULL(
				(SELECT SUM(x.sales_mix_perc) as total_sales_mix1 FROM comparative_net_sales_tbl x WHERE j.report_sales_mix_name = x.segment AND x.comp_net_sales_status = 1 AND YEAR(x.trans_year) = ' . ($year - 2) . ' AND x.bc_id = ' . $bc_id . ')

			, 0)as total_sales_mix2
			', false, $having, false);
		return $sales_mix;
		

		foreach($sales_mix as $row){
			$report_sales_mix_id = $row->report_sales_mix_id;
			$sales_mix_amount = $row->total_sales_mix === NULL ? 0 : $row->total_sales_mix;
			$sales_mix_amount1 = $row->total_sales_mix1 === NULL ? 0 : $row->total_sales_mix1;
			$sales_mix_amount2 = $row->total_sales_mix2 === NULL ? 0 : $row->total_sales_mix2;
			$set_mix = array(
				'dashboard_bc_trans_id' => $trans_id,
				'bc_id' => $bc_id,
				'report_sales_mix_id' => $report_sales_mix_id,
				'dashboard_sales_mix_amount' => $sales_mix_amount,
				'dashboard_sales_mix_amount1' => $sales_mix_amount1,
				'dashboard_sales_mix_amount2' => $sales_mix_amount2,
				'dashboard_sales_mix_added' => date_now(),
				'dashboard_sales_mix_status' => 1
			);

			$insert_mix = $this->admin->insert_data('dashboard_sales_mix_tbl', $set_mix);
		}
	}

	public function get_outlet_data($trans_id, $bc_id, $year){
		$join_new_outlet = array(
 			'outlet_brand_tbl b' => 'a.outlet_id = b.outlet_id AND a.outlet_status_id = 1 AND b.outlet_brand_status = 1 AND a.bc_id = ' . $bc_id,
 			'brand_tbl c' => 'b.brand_id = c.brand_id',
 			'brand_type_tbl d' => 'c.brand_type_id = d.brand_type_id AND d.brand_type_name = "RETAIL" AND c.brand_name !="RESELLER"	',
 			'outlet_type_tbl e' => 'a.outlet_type_id = e.outlet_type_id AND e.outlet_type_id = 2',
 			'outlet_year_tbl f' => 'a.outlet_id = f.outlet_id AND f.outlet_year_status = 1 AND f.outlet_year = ' . $year
 		);

 		$get_new_outlet = $this->admin->get_join('outlet_tbl a', $join_new_outlet, TRUE, FALSE, FALSE, 'COUNT(a.outlet_id) as outlet_new');
 		$new_outlet_data = $get_new_outlet->outlet_new;

 		$join_old_outlet = array(
 			'outlet_brand_tbl b' => 'a.outlet_id = b.outlet_id AND a.outlet_status_id = 1 AND b.outlet_brand_status = 1 AND a.bc_id = ' . $bc_id,
 			'brand_tbl c' => 'b.brand_id = c.brand_id',
 			'brand_type_tbl d' => 'c.brand_type_id = d.brand_type_id AND d.brand_type_name = "RETAIL" AND c.brand_name !="RESELLER"',
 			'outlet_type_tbl e' => 'a.outlet_type_id = e.outlet_type_id AND e.outlet_type_id = 1',
 			'outlet_year_tbl f' => 'a.outlet_id = f.outlet_id AND f.outlet_year_status = 1 AND f.outlet_year = ' . $year
 		);

 		$get_old_outlet = $this->admin->get_join('outlet_tbl a', $join_old_outlet, TRUE, FALSE, FALSE, 'COUNT(a.outlet_id) as outlet_old');
 		$old_outlet_data = $get_old_outlet->outlet_old;

 		$set_outlet = array(
 			'dashboard_bc_trans_id' => $trans_id,
 			'bc_id' => $bc_id,
 			'dashboard_outlet_new' => $new_outlet_data,
 			'dashboard_outlet_old' => $old_outlet_data,
 			'dashboard_outlet_added' => date_now(),
 			'dashboard_outlet_added' => 1,
 			'dashboard_outlet_status' => 1
 		);

 		$insert_outlet = $this->admin->insert_data('dashboard_outlet_tbl', $set_outlet);
	}

	public function get_employee_data($trans_id, $bc_id, $year){
		$cost_center_id = $this->get_bc_cost_center($bc_id);
		$join_manpower = array(
 			'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.manpower_status = 1 AND b.parent_id = ' . $cost_center_id . ' AND a.manpower_year = ' . $year,
 		);

 		$old_emp_data = 0;
 		$new_emp_data = 0;

 		$get_manpower = $this->admin->get_join('manpower_tbl a', $join_manpower, TRUE, FALSE, FALSE, 'SUM(manpower_old) as emp_old, SUM(manpower_new) as emp_new');
 		$old_emp_data = check_num($get_manpower->emp_old);
 		$new_emp_data = check_num($get_manpower->emp_new);

 		$data['emp_new'] = $new_emp_data;
 		$data['emp_old'] = $old_emp_data;
 		$data['emp_total'] = $new_emp_data + $old_emp_data;

 		$set_emp = array(
 			'dashboard_bc_trans_id' => $trans_id,
 			'bc_id' => $bc_id,
 			'dashboard_bc_manpower_old' => $old_emp_data,
 			'dashboard_bc_manpower_new' => $new_emp_data,
 			'dashboard_bc_manpower_added' => date_now(),
 			'dashboard_bc_manpower_status' => 1
 		);

 		$insert_emp = $this->admin->insert_data('dashboard_bc_manpower_tbl', $set_emp);
	}

	public function employee_pdf_data($trans_id, $bc_id, $year){
		$join_manpower = array(
			'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.manpower_status = 1 AND a.manpower_year = ' . $year . ' AND b.bc_id = ' . $bc_id,
			'company_unit_tbl c' => 'b.company_unit_id = c.company_unit_id',
			'rank_tbl d' => 'a.rank_id = d.rank_id'
		);
		$group_manpower = 'c.company_unit_id, a.manpower_position, d.rank_id';
		$select_manpower = 'SUM(a.manpower_old) as manpower_old, SUM(a.manpower_new) as manpower_new, a.manpower_position, c.company_unit_id, d.rank_id ';
		$order_manpower = 'c.company_unit_name, d.rank_name, a.manpower_position';

	    $get_manpower = $this->admin->get_join('manpower_tbl a', $join_manpower, FALSE, $order_manpower, $group_manpower, $select_manpower);
	    $manpower_grandtotal = 0;
	    $manpower_old_total = 0;
	    $manpower_new_total = 0;
	    foreach($get_manpower as $row_manpower){
	    	$company_unit_id = $row_manpower->company_unit_id;
	    	$rank_id = $row_manpower->rank_id;
	    	$position = $row_manpower->manpower_position;

	    	$manpower_old = $row_manpower->manpower_old;
	    	$manpower_new = $row_manpower->manpower_new;
	    	$manpower_total = $manpower_old + $manpower_new;

	    	$set_manpower = array(
	    		'dashboard_bc_trans_id' => $trans_id,
	    		'bc_id' => $bc_id,
	    		'company_unit_id' => $company_unit_id,
	    		'rank_id' => $rank_id,
	    		'dashboard_bc_manpower_unit_position' => $position,
	    		'dashboard_bc_manpower_unit_old' => $manpower_old,
	    		'dashboard_bc_manpower_unit_new' => $manpower_new,
	    		'dashboard_bc_manpower_unit_total' => $manpower_total,
	    		'dashboard_bc_manpower_unit_added' => date_now(),
	    		'dashboard_bc_manpower_unit_status' => 1
	    	);

	    	$insert_manpower = $this->admin->insert_data('dashboard_bc_manpower_unit_tbl', $set_manpower);

	    }
	}

	public function sales_unit($trans_id, $bc_id, $year){
		$join = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_unit_tbl e' => 'd.material_id = e.material_id AND e.material_unit_status = 1',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id',
			'bc_tbl g' => 'f.bc_id = g.bc_id AND g.bc_id = ' . $bc_id . ' AND a.sales_year = ' . $year 
		);

		$sales_unit = $this->admin->get_join('sales_tbl a', $join, FALSE, FALSE, 'd.material_id', 'd.material_code, d.material_desc, SUM(c.sales_det_qty), e.sales_unit_equivalent as sales_unit, SUM(c.sales_det_qty) / e.sales_unit_equivalent as total_sales_unit');
		return $sales_unit;
	}

	public function _get_comparative_data($field_alias=NULL, $vol_filter=NULL, $bc_id=NULL, $year=NULL){

		$result1 = 0;
		$result2 = 0;
		if($field_alias){
			$new_field_alias = $field_alias.'_salse_unit1';
			$get_data1 = $this->admin->check_query('SELECT SUM(x.sales_unit) as '.$new_field_alias.' FROM comparative_volume_tbl x WHERE x.sales_status = 1 AND x.sales_vol = "'.$vol_filter.'" AND YEAR(x.trans_year) = ' . ($year - 1) . ' AND x.bc_id = ' . $bc_id, TRUE);
			
			
			if($get_data1['result'] == 1){
				$result1 = $get_data1['info']->$new_field_alias;
				
			}
			
			$new_field_alias = $field_alias.'_salse_unit2';
			$get_data2 = $this->admin->check_query('SELECT SUM(x.sales_unit) as '.$new_field_alias.' FROM comparative_volume_tbl x WHERE x.sales_status = 1 AND x.sales_vol = "'.$vol_filter.'" AND YEAR(x.trans_year) = ' . ($year - 2) . ' AND x.bc_id = ' . $bc_id, TRUE);
			
			
			if($get_data2['result'] == 1){
				$result2 = $get_data2['info']->$new_field_alias;
				
			}
		}

		$data['result1'] = $result1;
		$data['result2'] = $result2;

		$result = (object) $data;

		return $result;


	}


	public function volume_report($trans_id, $bc_id, $year){
		//$info = $this->_require_login();

		$join_liver_gizzard = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVER / GIZZARD\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id
		);
		$get_liver_gizzard = $this->admin->get_join('sales_tbl a', $join_liver_gizzard, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as liver_gizzard_sales_unit');
		$data['liver_gizzard'] = $get_liver_gizzard->liver_gizzard_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('liver_gizzard', 'LIVER / GIZZARD', $bc_id, $year);
		$data['liver_gizzard1'] = $get_comparative_dynamic->result1;
		$data['liver_gizzard2'] = $get_comparative_dynamic->result2;
		


		$join_live = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVE SALES\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id
		);
		$get_live = $this->admin->get_join('sales_tbl a', $join_live, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as live_sales_unit, 

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "LIVE SALES" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as live_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "LIVE SALES" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as live_sales_unit2
		');
		$data['live'] = $get_live->live_sales_unit;
		$data['live1'] = $get_live->live_sales_unit1;
		$data['live2'] = $get_live->live_sales_unit2;


		$join_dressed_others = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id AND i.brand_name = \'TRADE DISTRIBUTOR\''
		);
		$get_dressed_others = $this->admin->get_join('sales_tbl a', $join_dressed_others, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_distributor_sales_unit
		');
		$data['dressed_distributor'] = $get_dressed_others->dressed_distributor_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('dressed_distributor', 'DRESSED - DISTRIBUTOR', $bc_id, $year);
		$data['dressed_distributor1'] = $get_comparative_dynamic->result1;
		$data['dressed_distributor2'] = $get_comparative_dynamic->result2;
		

		$join_dressed_dealer = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id AND i.brand_name = \'DEALER\''
		);
		$get_dressed_dealer = $this->admin->get_join('sales_tbl a', $join_dressed_dealer, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_dealer_sales_unit');
		$data['dressed_dealer'] = $get_dressed_dealer->dressed_dealer_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('dressed_dealer', 'DRESSED - DEALER', $bc_id, $year);
		$data['dressed_dealer1'] = $get_comparative_dynamic->result1;
		$data['dressed_dealer2'] = $get_comparative_dynamic->result2;



		

		$join_dressed_hri = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id AND i.brand_name = \'HRI\''
		);

		$get_dressed_hri = $this->admin->get_join('sales_tbl a', $join_dressed_hri, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_hri_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - HRI" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as dressed_hri_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - HRI" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as dressed_hri_sales_unit2

		');
		$data['dressed_hri'] = $get_dressed_hri->dressed_hri_sales_unit;
		$data['dressed_hri1'] = $get_dressed_hri->dressed_hri_sales_unit1;
		$data['dressed_hri2'] = $get_dressed_hri->dressed_hri_sales_unit2;

		$join_dressed_sup = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id AND i.brand_name = \'SUPERMARKET\''
		);

		$get_dressed_sup = $this->admin->get_join('sales_tbl a', $join_dressed_sup, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_sup_sales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - SUPERMARKET" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as dressed_sup_sales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - SUPERMARKET" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as dressed_sup_sales_unit2
		');
		$data['dressed_sup'] = $get_dressed_sup->dressed_sup_sales_unit;
		$data['dressed_sup1'] = $get_dressed_sup->dressed_sup_sales_unit1;
		$data['dressed_sup2'] = $get_dressed_sup->dressed_sup_sales_unit2;


		$join_dressed_retail = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);
		$get_dressed_retail = $this->admin->get_join('sales_tbl a', $join_dressed_retail, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_retail_sales_unit');
		$data['dressed_retail'] = $get_dressed_retail->dressed_retail_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('dressed_retail', 'DRESSED', $bc_id, $year);
		$data['dressed_retail1'] = $get_comparative_dynamic->result1;
		$data['dressed_retail2'] = $get_comparative_dynamic->result2;
		


		$join_dressed_vansales = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRESSED\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND i.brand_name = \'VAN SALES\''
		);

		$get_dressed_vansales = $this->admin->get_join('sales_tbl a', $join_dressed_vansales, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as dressed_vansales_unit,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - VANSALES" AND YEAR(x.trans_year) = ' . ($year - 1) . ') as dressed_vansales_unit1,

			(SELECT SUM(x.sales_unit) FROM comparative_volume_tbl x WHERE g.bc_id = x.bc_id AND x.sales_status = 1 AND x.sales_vol = "DRESSED - VANSALES" AND YEAR(x.trans_year) = ' . ($year - 2) . ') as dressed_vansales_unit2
		');

		$data['dressed_vansales'] = $get_dressed_vansales->dressed_vansales_unit;
		$data['dressed_vansales1'] = $get_dressed_vansales->dressed_vansales_unit1;
		$data['dressed_vansales2'] = $get_dressed_vansales->dressed_vansales_unit2;



		$join_non_marinated = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'NON MARINATED CUT UPS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id'
			/*'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''*/
		);
		$get_non_marinated = $this->admin->get_join('sales_tbl a', $join_non_marinated, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as non_marinated_sales_unit');
		$data['non_marinated'] = $get_non_marinated->non_marinated_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('non_marinated', 'NON MARINATED CUT UPS', $bc_id, $year);
		$data['non_marinated1'] = $get_comparative_dynamic->result1;
		$data['non_marinated2'] = $get_comparative_dynamic->result2;
		


		$join_marinated = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code NOT IN ("1000090", "10200090", "1000401", "1000402")',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id'
			/*'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''*/
		);
		$get_marinated = $this->admin->get_join('sales_tbl a', $join_marinated, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as marinated_sales_unit');
		$data['marinated'] = $get_marinated->marinated_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('marinated', 'MARINATED CUT UPS', $bc_id, $year);
		$data['marinated1'] = $get_comparative_dynamic->result1;
		$data['marinated2'] = $get_comparative_dynamic->result2;
		
		

		// SPICY NECK
		$join_spicy_neck = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = "10200090"',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_spicy_neck = $this->admin->get_join('sales_tbl a', $join_spicy_neck, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as spicy_neck_sales_unit');
		$data['spicy_neck'] = $get_spicy_neck->spicy_neck_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('spicy_neck', 'SPICY NECK', $bc_id, $year);
		$data['spicy_neck1'] = $get_comparative_dynamic->result1;
		$data['spicy_neck2'] = $get_comparative_dynamic->result2;
		
		

		// ROASTED CUTUPS
		$join_roasted_cutups = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'ROASTED CUT UPS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_roasted_cutups = $this->admin->get_join('sales_tbl a', $join_roasted_cutups, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as roasted_cutups_sales_unit');
		$data['roasted_cutups'] = $get_roasted_cutups->roasted_cutups_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('roasted_cutups', 'ROASTED CUT UPS', $bc_id, $year);
		$data['roasted_cutups1'] = $get_comparative_dynamic->result1;
		$data['roasted_cutups2'] = $get_comparative_dynamic->result2;
		

		// ROASTED CHICKEN
		$join_roasted_chicken = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'ROASTED CHICKEN\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);
		$get_roasted_chicken = $this->admin->get_join('sales_tbl a', $join_roasted_chicken, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as roasted_chicken_sales_unit');
		$data['roasted_chicken'] = $get_roasted_chicken->roasted_chicken_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('roasted_chicken', 'ROASTED CHICKEN', $bc_id, $year);
		$data['roasted_chicken1'] = $get_comparative_dynamic->result1;
		$data['roasted_chicken2'] = $get_comparative_dynamic->result2;
		


		$join_marinated_chicken_raw = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CHICKEN (RAW)\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id'
			/*'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''*/
		);
		$get_marinated_chicken_raw = $this->admin->get_join('sales_tbl a', $join_marinated_chicken_raw, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as marinated_chicken_raw_sales_unit');
		$data['marinated_chicken_raw'] = $get_marinated_chicken_raw->marinated_chicken_raw_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('marinated_chicken_raw', 'MARINATED CHICKEN (RAW)', $bc_id, $year);
		$data['marinated_chicken_raw1'] = $get_comparative_dynamic->result1;
		$data['marinated_chicken_raw2'] = $get_comparative_dynamic->result2;
		

		

		$join_other = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER SPECIALTY PRODUCTS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);
		$get_other = $this->admin->get_join('sales_tbl a', $join_other, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as other_sales_unit');
		$data['others'] = $get_other->other_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('others', 'OTHER SPECIALTY PRODUCTS', $bc_id, $year);
		$data['others1'] = $get_comparative_dynamic->result1;
		$data['others2'] = $get_comparative_dynamic->result2;




		$join_add_ons_extras = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'ADD-ONS AND EXTRAS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_add_ons_extras = $this->admin->get_join('sales_tbl a', $join_add_ons_extras, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as add_ons_extras_sales_unit');
		$data['add_ons_extras'] = $get_add_ons_extras->add_ons_extras_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('add_ons_extras', 'ADD-ONS AND EXTRAS', $bc_id, $year);
		$data['add_ons_extras1'] = $get_comparative_dynamic->result1;
		$data['add_ons_extras2'] = $get_comparative_dynamic->result2;



		$join_rice_meal = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'RICE MEAL\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_rice_meal = $this->admin->get_join('sales_tbl a', $join_rice_meal, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as rice_meal_sales_unit');
		$data['rice_meal'] = $get_rice_meal->rice_meal_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('rice_meal', 'RICE MEAL', $bc_id, $year);
		$data['rice_meal1'] = $get_comparative_dynamic->result1;
		$data['rice_meal2'] = $get_comparative_dynamic->result2;

		
		
		
		$join_snacks_desserts = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'SNACKS AND DESSERTS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_snacks_desserts = $this->admin->get_join('sales_tbl a', $join_snacks_desserts, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as snacks_desserts_sales_unit');
		$data['snacks_desserts'] = $get_snacks_desserts->snacks_desserts_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('snacks_desserts', 'SNACKS AND DESSERTS', $bc_id, $year);
		$data['snacks_desserts1'] = $get_comparative_dynamic->result1;
		$data['snacks_desserts2'] = $get_comparative_dynamic->result2;
		
		
		$join_sharing = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'SHARING\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_sharing = $this->admin->get_join('sales_tbl a', $join_sharing, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as sharing_sales_unit');
		$data['sharing'] = $get_sharing->sharing_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('sharing', 'SHARING', $bc_id, $year);
		$data['sharing1'] = $get_comparative_dynamic->result1;
		$data['sharing2'] = $get_comparative_dynamic->result2;

		
		
		
		$join_drinks = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'DRINKS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_drinks = $this->admin->get_join('sales_tbl a', $join_drinks, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as drinks_sales_unit');
		$data['drinks'] = $get_drinks->drinks_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('drinks', 'DRINKS', $bc_id, $year);
		$data['drinks1'] = $get_comparative_dynamic->result1;
		$data['drinks2'] = $get_comparative_dynamic->result2;




		$join_liempo = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIEMPO\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_liempo = $this->admin->get_join('sales_tbl a', $join_liempo, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as liempo_sales_unit');
		$data['liempo'] = $get_liempo->liempo_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('liempo', 'LIEMPO', $bc_id, $year);
		$data['liempo1'] = $get_comparative_dynamic->result1;
		$data['liempo2'] = $get_comparative_dynamic->result2;
		
		

		$join_vap = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER VAP PRODUCTS\'',
			'material_unit_tbl f' => 'd.material_id = f.material_id AND f.material_unit_status = 1',
			'outlet_tbl g' => 'a.outlet_id = g.outlet_id AND g.bc_id = ' . $bc_id,
			'outlet_brand_tbl h' => 'g.outlet_id = h.outlet_id AND h.outlet_brand_status = 1',
			'brand_tbl i' => 'h.brand_id = i.brand_id',
			'brand_type_tbl j' => 'i.brand_type_id = j.brand_type_id AND j.brand_type_name = \'RETAIL\''
		);

		$get_vap = $this->admin->get_join('sales_tbl a', $join_vap, TRUE, FALSE, FALSE, 'SUM(c.sales_det_qty / f.sales_unit_equivalent) as vap_sales_unit');
		$data['vap'] = $get_vap->vap_sales_unit;

		$get_comparative_dynamic = $this->_get_comparative_data('vap', 'VAP', $bc_id, $year);
		$data['vap1'] = $get_comparative_dynamic->result1;
		$data['vap2'] = $get_comparative_dynamic->result2;
		

		$get_transfer = $this->admin->check_data('volume_others_tbl', array('bc_id' => $bc_id, 'volume_others_year' => $year, 'volume_others_status' => 1), TRUE);
		$data['transfer'] = 0;
		$data['transfer1'] = 0;
		$data['transfer2'] = 0;
		if($get_transfer['result'] == TRUE){
			$data['transfer'] = $get_transfer['info']->volume_others_unit;
		}

		return $data;
	}



	public function get_volume_data($trans_id, $bc_id, $year){
		//$info = $this->_require_login();

		$volume = $this->volume_report($trans_id, $bc_id, $year);

		$liver_gizzard = $volume['liver_gizzard'];
		$liver_gizzard1 = $volume['liver_gizzard1'];
		$liver_gizzard2 = $volume['liver_gizzard2'];
		$liver_gizzard_dif1 = $liver_gizzard - $liver_gizzard1;
		$liver_gizzard_dif2 = $liver_gizzard - $liver_gizzard2;
		$liver_gizzard_per1 = $liver_gizzard1 > 0 ? ($liver_gizzard_dif1 / $liver_gizzard1) * 100 : 0;
		$liver_gizzard_per2 = $liver_gizzard2 > 0 ? ($liver_gizzard_dif2 / $liver_gizzard2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'LIVER & GIZZARD',
			'dashboard_volume_unit' => $liver_gizzard,
			'dashboard_volume_unit1' => $liver_gizzard1,
			'dashboard_volume_unit2' => $liver_gizzard2,
			'dashboard_volume_unit_dif1' => $liver_gizzard_dif1,
			'dashboard_volume_unit_dif2' => $liver_gizzard_dif2,
			'dashboard_volume_unit_percent1' => $liver_gizzard_per1,
			'dashboard_volume_unit_percent2' => $liver_gizzard_per2,
			'dashboard_volume_heads' => 0,
			'dashboard_volume_heads1' => 0,
			'dashboard_volume_heads2' => 0,
			'dashboard_volume_heads_dif1' => 0,
			'dashboard_volume_heads_dif2' => 0,
			'dashboard_volume_heads_percent1' => 0,
			'dashboard_volume_heads_percent2' => 0,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);

		$live = $volume['live'];
		$live1 = $volume['live1'];
		$live2 = $volume['live2'];
		$live_dif1 = $live - $live1;
		$live_dif2 = $live - $live2;
		$live_per1 = $live1 > 0 ? ($live_dif1 / $live1) * 100 : 0;
		$live_per2 = $live2 > 0 ? ($live_dif2 / $live2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'LIVE SALES',
			'dashboard_volume_unit' => $live,
			'dashboard_volume_unit1' => $live1,
			'dashboard_volume_unit2' => $live2,
			'dashboard_volume_unit_dif1' => $live_dif1,
			'dashboard_volume_unit_dif2' => $live_dif2,
			'dashboard_volume_unit_percent1' => $live_per1,
			'dashboard_volume_unit_percent2' => $live_per2,
			'dashboard_volume_heads' => $live,
			'dashboard_volume_heads1' => $live1,
			'dashboard_volume_heads2' => $live2,
			'dashboard_volume_heads_dif1' => $live_dif1,
			'dashboard_volume_heads_dif2' => $live_dif2,
			'dashboard_volume_heads_percent1' => $live_per1,
			'dashboard_volume_heads_percent2' => $live_per2,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		//$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);

		$dressed_distributor = $volume['dressed_distributor'];
		$dressed_distributor1 = $volume['dressed_distributor1'];
		$dressed_distributor2 = $volume['dressed_distributor2'];
		$dressed_distributor_dif1 = $dressed_distributor - $dressed_distributor1;
		$dressed_distributor_dif2 = $dressed_distributor - $dressed_distributor2;
		$dressed_distributor_per1 = $dressed_distributor1 > 0 ? ($dressed_distributor_dif1 / $dressed_distributor1) * 100 : 0;
		$dressed_distributor_per2 = $dressed_distributor2 > 0 ? ($dressed_distributor_dif2 / $dressed_distributor2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'DRESSED - DISTRIBUTOR',
			'dashboard_volume_unit' => $dressed_distributor,
			'dashboard_volume_unit1' => $dressed_distributor1,
			'dashboard_volume_unit2' => $dressed_distributor2,
			'dashboard_volume_unit_dif1' => $dressed_distributor_dif1,
			'dashboard_volume_unit_dif2' => $dressed_distributor_dif2,
			'dashboard_volume_unit_percent1' => $dressed_distributor_per1,
			'dashboard_volume_unit_percent2' => $dressed_distributor_per2,
			'dashboard_volume_heads' => $dressed_distributor,
			'dashboard_volume_heads1' => $dressed_distributor1,
			'dashboard_volume_heads2' => $dressed_distributor2,
			'dashboard_volume_heads_dif1' => $dressed_distributor_dif1,
			'dashboard_volume_heads_dif2' => $dressed_distributor_dif2,
			'dashboard_volume_heads_percent1' => $dressed_distributor_per1,
			'dashboard_volume_heads_percent2' => $dressed_distributor_per2,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		//$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);


		$dressed_dealer = $volume['dressed_dealer'];
		$dressed_dealer1 = $volume['dressed_dealer1'];
		$dressed_dealer2 = $volume['dressed_dealer2'];
		$dressed_dealer_dif1 = $dressed_dealer - $dressed_dealer1;
		$dressed_dealer_dif2 = $dressed_dealer - $dressed_dealer2;
		$dressed_dealer_per1 = $dressed_dealer1 > 0 ? ($dressed_dealer_dif1 / $dressed_dealer1) * 100 : 0;
		$dressed_dealer_per2 = $dressed_dealer2 > 0 ? ($dressed_dealer_dif2 / $dressed_dealer2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'DRESSED - DEALER',
			'dashboard_volume_unit' => $dressed_dealer,
			'dashboard_volume_unit1' => $dressed_dealer1,
			'dashboard_volume_unit2' => $dressed_dealer2,
			'dashboard_volume_unit_dif1' => $dressed_dealer_dif1,
			'dashboard_volume_unit_dif2' => $dressed_dealer_dif2,
			'dashboard_volume_unit_percent1' => $dressed_dealer_per1,
			'dashboard_volume_unit_percent2' => $dressed_dealer_per2,
			'dashboard_volume_heads' => $dressed_dealer,
			'dashboard_volume_heads1' => $dressed_dealer1,
			'dashboard_volume_heads2' => $dressed_dealer2,
			'dashboard_volume_heads_dif1' => $dressed_dealer_dif1,
			'dashboard_volume_heads_dif2' => $dressed_dealer_dif2,
			'dashboard_volume_heads_percent1' => $dressed_dealer_per1,
			'dashboard_volume_heads_percent2' => $dressed_dealer_per2,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		//$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);


		$dressed_hri = $volume['dressed_hri'];
		$dressed_hri1 = $volume['dressed_hri1'];
		$dressed_hri2 = $volume['dressed_hri2'];
		$dressed_hri_dif1 = $dressed_hri - $dressed_hri1;
		$dressed_hri_dif2 = $dressed_hri - $dressed_hri2;
		$dressed_hri_per1 = $dressed_hri1 > 0 ? ($dressed_hri_dif1 / $dressed_hri1) * 100 : 0;
		$dressed_hri_per2 = $dressed_hri2 > 0 ? ($dressed_hri_dif2 / $dressed_hri2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'DRESSED - HRI',
			'dashboard_volume_unit' => $dressed_hri,
			'dashboard_volume_unit1' => $dressed_hri1,
			'dashboard_volume_unit2' => $dressed_hri2,
			'dashboard_volume_unit_dif1' => $dressed_hri_dif1,
			'dashboard_volume_unit_dif2' => $dressed_hri_dif2,
			'dashboard_volume_unit_percent1' => $dressed_hri_per1,
			'dashboard_volume_unit_percent2' => $dressed_hri_per2,
			'dashboard_volume_heads' => $dressed_hri,
			'dashboard_volume_heads1' => $dressed_hri1,
			'dashboard_volume_heads2' => $dressed_hri2,
			'dashboard_volume_heads_dif1' => $dressed_hri_dif1,
			'dashboard_volume_heads_dif2' => $dressed_hri_dif2,
			'dashboard_volume_heads_percent1' => $dressed_hri_per1,
			'dashboard_volume_heads_percent2' => $dressed_hri_per2,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		//$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);


		$dressed_sup = $volume['dressed_sup'];
		$dressed_sup1 = $volume['dressed_sup1'];
		$dressed_sup2 = $volume['dressed_sup2'];
		$dressed_sup_dif1 = $dressed_sup - $dressed_sup1;
		$dressed_sup_dif2 = $dressed_sup - $dressed_sup2;
		$dressed_sup_per1 = $dressed_sup1 > 0 ? ($dressed_sup_dif1 / $dressed_sup1) * 100 : 0;
		$dressed_sup_per2 = $dressed_sup2 > 0 ? ($dressed_sup_dif2 / $dressed_sup2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'DRESSED - SUPERMARKET',
			'dashboard_volume_unit' => $dressed_sup,
			'dashboard_volume_unit1' => $dressed_sup1,
			'dashboard_volume_unit2' => $dressed_sup2,
			'dashboard_volume_unit_dif1' => $dressed_sup_dif1,
			'dashboard_volume_unit_dif2' => $dressed_sup_dif2,
			'dashboard_volume_unit_percent1' => $dressed_sup_per1,
			'dashboard_volume_unit_percent2' => $dressed_sup_per2,
			'dashboard_volume_heads' => $dressed_sup,
			'dashboard_volume_heads1' => $dressed_sup1,
			'dashboard_volume_heads2' => $dressed_sup2,
			'dashboard_volume_heads_dif1' => $dressed_sup_dif1,
			'dashboard_volume_heads_dif2' => $dressed_sup_dif2,
			'dashboard_volume_heads_percent1' => $dressed_sup_per1,
			'dashboard_volume_heads_percent2' => $dressed_sup_per2,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		//$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);


		$dressed_vansales = $volume['dressed_vansales'];
		$dressed_vansales1 = $volume['dressed_vansales1'];
		$dressed_vansales2 = $volume['dressed_vansales2'];
		$dressed_vansales_dif1 = $dressed_vansales - $dressed_vansales1;
		$dressed_vansales_dif2 = $dressed_vansales - $dressed_vansales2;
		$dressed_vansales_per1 = $dressed_vansales1 > 0 ? ($dressed_vansales_dif1 / $dressed_vansales1) * 100 : 0;
		$dressed_vansales_per2 = $dressed_vansales2 > 0 ? ($dressed_vansales_dif2 / $dressed_vansales2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'DRESSED - VANSALES',
			'dashboard_volume_unit' => $dressed_vansales,
			'dashboard_volume_unit1' => $dressed_vansales1,
			'dashboard_volume_unit2' => $dressed_vansales2,
			'dashboard_volume_unit_dif1' => $dressed_vansales_dif1,
			'dashboard_volume_unit_dif2' => $dressed_vansales_dif2,
			'dashboard_volume_unit_percent1' => $dressed_vansales_per1,
			'dashboard_volume_unit_percent2' => $dressed_vansales_per2,
			'dashboard_volume_heads' => $dressed_vansales,
			'dashboard_volume_heads1' => $dressed_vansales1,
			'dashboard_volume_heads2' => $dressed_vansales2,
			'dashboard_volume_heads_dif1' => $dressed_vansales_dif1,
			'dashboard_volume_heads_dif2' => $dressed_vansales_dif2,
			'dashboard_volume_heads_percent1' => $dressed_vansales_per1,
			'dashboard_volume_heads_percent2' => $dressed_vansales_per2,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		//$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);


		$dressed_retail = $volume['dressed_retail'];
		$dressed_retail1 = $volume['dressed_retail1'];
		$dressed_retail2 = $volume['dressed_retail2'];
		$dressed_retail_dif1 = $dressed_retail - $dressed_retail1;
		$dressed_retail_dif2 = $dressed_retail - $dressed_retail2;
		$dressed_retail_per1 = $dressed_retail1 > 0 ? ($dressed_retail_dif1 / $dressed_retail1) * 100 : 0;
		$dressed_retail_per2 = $dressed_retail2 > 0 ? ($dressed_retail_dif2 / $dressed_retail2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'DRESSED',
			'dashboard_volume_unit' => $dressed_retail,
			'dashboard_volume_unit1' => $dressed_retail1,
			'dashboard_volume_unit2' => $dressed_retail2,
			'dashboard_volume_unit_dif1' => $dressed_retail_dif1,
			'dashboard_volume_unit_dif2' => $dressed_retail_dif2,
			'dashboard_volume_unit_percent1' => $dressed_retail_per1,
			'dashboard_volume_unit_percent2' => $dressed_retail_per2,
			'dashboard_volume_heads' => $dressed_retail,
			'dashboard_volume_heads1' => $dressed_retail1,
			'dashboard_volume_heads2' => $dressed_retail2,
			'dashboard_volume_heads_dif1' => $dressed_retail_dif1,
			'dashboard_volume_heads_dif2' => $dressed_retail_dif2,
			'dashboard_volume_heads_percent1' => $dressed_retail_per1,
			'dashboard_volume_heads_percent2' => $dressed_retail_per2,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);

		

		$non_marinated = $volume['non_marinated'];
		$non_marinated1 = $volume['non_marinated1'];
		$non_marinated2 = $volume['non_marinated2'];
		$non_marinated_dif1 = $non_marinated - $non_marinated1;
		$non_marinated_dif2 = $non_marinated - $non_marinated2;
		$non_marinated_per1 = $non_marinated1 > 0 ? ($non_marinated_dif1 / $non_marinated1) * 100 : 0;
		$non_marinated_per2 = $non_marinated2 > 0 ? ($non_marinated_dif2 / $non_marinated2) * 100 : 0;


		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'NON MARINATED CUT UPS',
			'dashboard_volume_unit' => $non_marinated,
			'dashboard_volume_unit1' => $non_marinated1,
			'dashboard_volume_unit2' => $non_marinated2,
			'dashboard_volume_unit_dif1' => $non_marinated_dif1,
			'dashboard_volume_unit_dif2' => $non_marinated_dif2,
			'dashboard_volume_unit_percent1' => $non_marinated_per1,
			'dashboard_volume_unit_percent2' => $non_marinated_per2,
			'dashboard_volume_heads' => $non_marinated,
			'dashboard_volume_heads1' => $non_marinated1,
			'dashboard_volume_heads2' => $non_marinated2,
			'dashboard_volume_heads_dif1' => $non_marinated_dif1,
			'dashboard_volume_heads_dif2' => $non_marinated_dif2,
			'dashboard_volume_heads_percent1' => $non_marinated_per1,
			'dashboard_volume_heads_percent2' => $non_marinated_per2,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);


		$marinated = $volume['marinated'];
		$marinated1 = $volume['marinated1'];
		$marinated2 = $volume['marinated2'];
		$marinated_dif1 = $marinated - $marinated1;
		$marinated_dif2 = $marinated - $marinated2;
		$marinated_per1 = $marinated1 > 0 ? ($marinated_dif1 / $marinated1) * 100 : 0;
		$marinated_per2 = $marinated2 > 0 ? ($marinated_dif2 / $marinated2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'MARINATED CUT UPS',
			'dashboard_volume_unit' => $marinated,
			'dashboard_volume_unit1' => $marinated1,
			'dashboard_volume_unit2' => $marinated2,
			'dashboard_volume_unit_dif1' => $marinated_dif1,
			'dashboard_volume_unit_dif2' => $marinated_dif2,
			'dashboard_volume_unit_percent1' => $marinated_per1,
			'dashboard_volume_unit_percent2' => $marinated_per2,
			'dashboard_volume_heads' => $marinated,
			'dashboard_volume_heads1' => $marinated1,
			'dashboard_volume_heads2' => $marinated2,
			'dashboard_volume_heads_dif1' => $marinated_dif1,
			'dashboard_volume_heads_dif2' => $marinated_dif2,
			'dashboard_volume_heads_percent1' => $marinated_per1,
			'dashboard_volume_heads_percent2' => $marinated_per2,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);

		$spicy_neck = $volume['spicy_neck'];
		$spicy_neck1 = $volume['spicy_neck1'];
		$spicy_neck2 = $volume['spicy_neck2'];
		$spicy_neck_dif1 = $spicy_neck - $spicy_neck1;
		$spicy_neck_dif2 = $spicy_neck - $spicy_neck2;
		$spicy_neck_per1 = $spicy_neck1 > 0 ? ($spicy_neck_dif1 / $spicy_neck1) * 100 : 0;
		$spicy_neck_per2 = $spicy_neck2 > 0 ? ($spicy_neck_dif2 / $spicy_neck2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'SPICY NECK',
			'dashboard_volume_unit' => $spicy_neck,
			'dashboard_volume_unit1' => $spicy_neck1,
			'dashboard_volume_unit2' => $spicy_neck2,
			'dashboard_volume_unit_dif1' => $spicy_neck_dif1,
			'dashboard_volume_unit_dif2' => $spicy_neck_dif2,
			'dashboard_volume_unit_percent1' => $spicy_neck_per1,
			'dashboard_volume_unit_percent2' => $spicy_neck_per2,
			'dashboard_volume_heads' => 0,
			'dashboard_volume_heads1' => 0,
			'dashboard_volume_heads2' => 0,
			'dashboard_volume_heads_dif1' => 0,
			'dashboard_volume_heads_dif2' => 0,
			'dashboard_volume_heads_percent1' => 0,
			'dashboard_volume_heads_percent2' => 0,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);

		$roasted_cutups = $volume['roasted_cutups'];
		$roasted_cutups1 = $volume['roasted_cutups1'];
		$roasted_cutups2 = $volume['roasted_cutups2'];
		$roasted_cutups_dif1 = $roasted_cutups - $roasted_cutups1;
		$roasted_cutups_dif2 = $roasted_cutups - $roasted_cutups2;
		$roasted_cutups_per1 = $roasted_cutups1 > 0 ? ($roasted_cutups_dif1 / $roasted_cutups1) * 100 : 0;
		$roasted_cutups_per2 = $roasted_cutups2 > 0 ? ($roasted_cutups_dif2 / $roasted_cutups2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'ROASTED CUT UPS',
			'dashboard_volume_unit' => $roasted_cutups,
			'dashboard_volume_unit1' => $roasted_cutups1,
			'dashboard_volume_unit2' => $roasted_cutups2,
			'dashboard_volume_unit_dif1' => $roasted_cutups_dif1,
			'dashboard_volume_unit_dif2' => $roasted_cutups_dif2,
			'dashboard_volume_unit_percent1' => $roasted_cutups_per1,
			'dashboard_volume_unit_percent2' => $roasted_cutups_per2,
			'dashboard_volume_heads' => $roasted_cutups,
			'dashboard_volume_heads1' => $roasted_cutups1,
			'dashboard_volume_heads2' => $roasted_cutups2,
			'dashboard_volume_heads_dif1' => $roasted_cutups_dif1,
			'dashboard_volume_heads_dif2' => $roasted_cutups_dif2,
			'dashboard_volume_heads_percent1' => $roasted_cutups_per1,
			'dashboard_volume_heads_percent2' => $roasted_cutups_per2,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);

		$roasted_chicken = $volume['roasted_chicken'];
		$roasted_chicken1 = $volume['roasted_chicken1'];
		$roasted_chicken2 = $volume['roasted_chicken2'];
		$roasted_chicken_dif1 = $roasted_chicken - $roasted_chicken1;
		$roasted_chicken_dif2 = $roasted_chicken - $roasted_chicken2;
		$roasted_chicken_per1 = $roasted_chicken1 > 0 ? ($roasted_chicken_dif1 / $roasted_chicken1) * 100 : 0;
		$roasted_chicken_per2 = $roasted_chicken2 > 0 ? ($roasted_chicken_dif2 / $roasted_chicken2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'ROASTED CHICKEN',
			'dashboard_volume_unit' => $roasted_chicken,
			'dashboard_volume_unit1' => $roasted_chicken1,
			'dashboard_volume_unit2' => $roasted_chicken2,
			'dashboard_volume_unit_dif1' => $roasted_chicken_dif1,
			'dashboard_volume_unit_dif2' => $roasted_chicken_dif2,
			'dashboard_volume_unit_percent1' => $roasted_chicken_per1,
			'dashboard_volume_unit_percent2' => $roasted_chicken_per2,
			'dashboard_volume_heads' => $roasted_chicken,
			'dashboard_volume_heads1' => $roasted_chicken1,
			'dashboard_volume_heads2' => $roasted_chicken2,
			'dashboard_volume_heads_dif1' => $roasted_chicken_dif1,
			'dashboard_volume_heads_dif2' => $roasted_chicken_dif2,
			'dashboard_volume_heads_percent1' => $roasted_chicken_per1,
			'dashboard_volume_heads_percent2' => $roasted_chicken_per2,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);

		$marinated_chicken_raw = $volume['marinated_chicken_raw'];
		$marinated_chicken_raw1 = $volume['marinated_chicken_raw1'];
		$marinated_chicken_raw2 = $volume['marinated_chicken_raw2'];
		$marinated_chicken_raw_dif1 = $marinated_chicken_raw - $marinated_chicken_raw1;
		$marinated_chicken_raw_dif2 = $marinated_chicken_raw - $marinated_chicken_raw2;
		$marinated_chicken_raw_per1 = $marinated_chicken_raw1 > 0 ? ($marinated_chicken_raw_dif1 / $marinated_chicken_raw1) * 100 : 0;
		$marinated_chicken_raw_per2 = $marinated_chicken_raw2 > 0 ? ($marinated_chicken_raw_dif2 / $marinated_chicken_raw2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'MARINATED CHICKEN (RAW)',
			'dashboard_volume_unit' => $marinated_chicken_raw,
			'dashboard_volume_unit1' => $marinated_chicken_raw1,
			'dashboard_volume_unit2' => $marinated_chicken_raw2,
			'dashboard_volume_unit_dif1' => $marinated_chicken_raw_dif1,
			'dashboard_volume_unit_dif2' => $marinated_chicken_raw_dif2,
			'dashboard_volume_unit_percent1' => $marinated_chicken_raw_per1,
			'dashboard_volume_unit_percent2' => $marinated_chicken_raw_per2,
			'dashboard_volume_heads' => $marinated_chicken_raw,
			'dashboard_volume_heads1' => $marinated_chicken_raw1,
			'dashboard_volume_heads2' => $marinated_chicken_raw2,
			'dashboard_volume_heads_dif1' => $marinated_chicken_raw_dif1,
			'dashboard_volume_heads_dif2' => $marinated_chicken_raw_dif2,
			'dashboard_volume_heads_percent1' => $marinated_chicken_raw_per1,
			'dashboard_volume_heads_percent2' => $marinated_chicken_raw_per2,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);

		$others = $volume['others'];
		$others1 = $volume['others1'];
		$others2 = $volume['others2'];
		$others_dif1 = $others - $others1;
		$others_dif2 = $others - $others2;
		$others_per1 = $others1 > 0 ? ($others_dif1 / $others1) * 100 : 0;
		$others_per2 = $others2 > 0 ? ($others_dif2 / $others2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'OTHER SPECIALTY PRODUCTS',
			'dashboard_volume_unit' => $others,
			'dashboard_volume_unit1' => $others1,
			'dashboard_volume_unit2' => $others2,
			'dashboard_volume_unit_dif1' => $others_dif1,
			'dashboard_volume_unit_dif2' => $others_dif2,
			'dashboard_volume_unit_percent1' => $others_per1,
			'dashboard_volume_unit_percent2' => $others_per2,
			'dashboard_volume_heads' => $others,
			'dashboard_volume_heads1' => $others1,
			'dashboard_volume_heads2' => $others2,
			'dashboard_volume_heads_dif1' => $others_dif1,
			'dashboard_volume_heads_dif2' => $others_dif2,
			'dashboard_volume_heads_percent1' => $others_per1,
			'dashboard_volume_heads_percent2' => $others_per2,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);
		
		
		$add_ons_extras = $volume['add_ons_extras'];
		$add_ons_extras1 = $volume['add_ons_extras1'];
		$add_ons_extras2 = $volume['add_ons_extras2'];
		$add_ons_extras_dif1 = $add_ons_extras - $add_ons_extras1;
		$add_ons_extras_dif2 = $add_ons_extras - $add_ons_extras2;
		$add_ons_extras_per1 = $add_ons_extras1 > 0 ? ($add_ons_extras_dif1 / $add_ons_extras1) * 100 : 0;
		$add_ons_extras_per2 = $add_ons_extras2 > 0 ? ($add_ons_extras_dif2 / $add_ons_extras2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'ADD-ONS AND EXTRAS',
			'dashboard_volume_unit' => $add_ons_extras,
			'dashboard_volume_unit1' => $add_ons_extras1,
			'dashboard_volume_unit2' => $add_ons_extras2,
			'dashboard_volume_unit_dif1' => $add_ons_extras_dif1,
			'dashboard_volume_unit_dif2' => $add_ons_extras_dif2,
			'dashboard_volume_unit_percent1' => $add_ons_extras_per1,
			'dashboard_volume_unit_percent2' => $add_ons_extras_per2,
			'dashboard_volume_heads' => 0,
			'dashboard_volume_heads1' => 0,
			'dashboard_volume_heads2' => 0,
			'dashboard_volume_heads_dif1' => 0,
			'dashboard_volume_heads_dif2' => 0,
			'dashboard_volume_heads_percent1' => 0,
			'dashboard_volume_heads_percent2' => 0,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);
		
		
		$rice_meal = $volume['rice_meal'];
		$rice_meal1 = $volume['rice_meal1'];
		$rice_meal2 = $volume['rice_meal2'];
		$rice_meal_dif1 = $rice_meal - $rice_meal1;
		$rice_meal_dif2 = $rice_meal - $rice_meal2;
		$rice_meal_per1 = $rice_meal1 > 0 ? ($rice_meal_dif1 / $rice_meal1) * 100 : 0;
		$rice_meal_per2 = $rice_meal2 > 0 ? ($rice_meal_dif2 / $rice_meal2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'RICE MEAL',
			'dashboard_volume_unit' => $rice_meal,
			'dashboard_volume_unit1' => $rice_meal1,
			'dashboard_volume_unit2' => $rice_meal2,
			'dashboard_volume_unit_dif1' => $rice_meal_dif1,
			'dashboard_volume_unit_dif2' => $rice_meal_dif2,
			'dashboard_volume_unit_percent1' => $rice_meal_per1,
			'dashboard_volume_unit_percent2' => $rice_meal_per2,
			'dashboard_volume_heads' => 0,
			'dashboard_volume_heads1' => 0,
			'dashboard_volume_heads2' => 0,
			'dashboard_volume_heads_dif1' => 0,
			'dashboard_volume_heads_dif2' => 0,
			'dashboard_volume_heads_percent1' => 0,
			'dashboard_volume_heads_percent2' => 0,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);
		
		
		$snacks_desserts = $volume['snacks_desserts'];
		$snacks_desserts1 = $volume['snacks_desserts1'];
		$snacks_desserts2 = $volume['snacks_desserts2'];
		$snacks_desserts_dif1 = $snacks_desserts - $snacks_desserts1;
		$snacks_desserts_dif2 = $snacks_desserts - $snacks_desserts2;
		$snacks_desserts_per1 = $snacks_desserts1 > 0 ? ($snacks_desserts_dif1 / $snacks_desserts1) * 100 : 0;
		$snacks_desserts_per2 = $snacks_desserts2 > 0 ? ($snacks_desserts_dif2 / $snacks_desserts2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'SNACKS AND DESSERTS',
			'dashboard_volume_unit' => $snacks_desserts,
			'dashboard_volume_unit1' => $snacks_desserts1,
			'dashboard_volume_unit2' => $snacks_desserts2,
			'dashboard_volume_unit_dif1' => $snacks_desserts_dif1,
			'dashboard_volume_unit_dif2' => $snacks_desserts_dif2,
			'dashboard_volume_unit_percent1' => $snacks_desserts_per1,
			'dashboard_volume_unit_percent2' => $snacks_desserts_per2,
			'dashboard_volume_heads' => 0,
			'dashboard_volume_heads1' => 0,
			'dashboard_volume_heads2' => 0,
			'dashboard_volume_heads_dif1' => 0,
			'dashboard_volume_heads_dif2' => 0,
			'dashboard_volume_heads_percent1' => 0,
			'dashboard_volume_heads_percent2' => 0,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);
		
		
		$sharing = $volume['sharing'];
		$sharing1 = $volume['sharing1'];
		$sharing2 = $volume['sharing2'];
		$sharing_dif1 = $sharing - $sharing1;
		$sharing_dif2 = $sharing - $sharing2;
		$sharing_per1 = $sharing1 > 0 ? ($sharing_dif1 / $sharing1) * 100 : 0;
		$sharing_per2 = $sharing2 > 0 ? ($sharing_dif2 / $sharing2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'SHARING',
			'dashboard_volume_unit' => $sharing,
			'dashboard_volume_unit1' => $sharing1,
			'dashboard_volume_unit2' => $sharing2,
			'dashboard_volume_unit_dif1' => $sharing_dif1,
			'dashboard_volume_unit_dif2' => $sharing_dif2,
			'dashboard_volume_unit_percent1' => $sharing_per1,
			'dashboard_volume_unit_percent2' => $sharing_per2,
			'dashboard_volume_heads' => 0,
			'dashboard_volume_heads1' => 0,
			'dashboard_volume_heads2' => 0,
			'dashboard_volume_heads_dif1' => 0,
			'dashboard_volume_heads_dif2' => 0,
			'dashboard_volume_heads_percent1' => 0,
			'dashboard_volume_heads_percent2' => 0,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);
		
		
		$drinks = $volume['drinks'];
		$drinks1 = $volume['drinks1'];
		$drinks2 = $volume['drinks2'];
		$drinks_dif1 = $drinks - $drinks1;
		$drinks_dif2 = $drinks - $drinks2;
		$drinks_per1 = $drinks1 > 0 ? ($drinks_dif1 / $drinks1) * 100 : 0;
		$drinks_per2 = $drinks2 > 0 ? ($drinks_dif2 / $drinks2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'DRINKS',
			'dashboard_volume_unit' => $drinks,
			'dashboard_volume_unit1' => $drinks1,
			'dashboard_volume_unit2' => $drinks2,
			'dashboard_volume_unit_dif1' => $drinks_dif1,
			'dashboard_volume_unit_dif2' => $drinks_dif2,
			'dashboard_volume_unit_percent1' => $drinks_per1,
			'dashboard_volume_unit_percent2' => $drinks_per2,
			'dashboard_volume_heads' => 0,
			'dashboard_volume_heads1' => 0,
			'dashboard_volume_heads2' => 0,
			'dashboard_volume_heads_dif1' => 0,
			'dashboard_volume_heads_dif2' => 0,
			'dashboard_volume_heads_percent1' => 0,
			'dashboard_volume_heads_percent2' => 0,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);

		$sub_total = $liver_gizzard + $live + $dressed_distributor + $dressed_dealer + $dressed_hri + $dressed_sup + $dressed_retail + $dressed_vansales + $non_marinated + $marinated + $spicy_neck + $roasted_cutups + $roasted_chicken + $marinated_chicken_raw + $others + $add_ons_extras + $rice_meal + $snacks_desserts + $sharing + $drinks;

		$sub_total1 = $liver_gizzard1 + $live1 + $dressed_distributor1 + $dressed_dealer1 + $dressed_hri1 + $dressed_sup1 + $dressed_retail1 + $dressed_vansales1 + $non_marinated1 + $marinated1 + $spicy_neck1 + $roasted_cutups1 + $roasted_chicken1 + $marinated_chicken_raw1 + $others1 + $add_ons_extras1 + $rice_meal1 + $snacks_desserts1 + $sharing1 + $drinks1;

		$sub_total2 = $liver_gizzard2 + $live2 + $dressed_distributor2 + $dressed_dealer2 + $dressed_hri2 + $dressed_sup2 + $dressed_retail2 + $dressed_vansales2 + $non_marinated2 + $marinated2 + $spicy_neck2 + $roasted_cutups2 + $roasted_chicken2 + $marinated_chicken_raw2 + $others2 + $add_ons_extras2 + $rice_meal2 + $snacks_desserts2 + $sharing2 + $drinks2;

		$sub_variance1 = $sub_total - $sub_total1;
		$sub_variance2 = $sub_total - $sub_total2;
		$sub_percent1 = $sub_total1 > 0 ? ($sub_variance1 / $sub_total1) * 100 : 0;
		$sub_percent2 = $sub_total2 > 0 ? ($sub_variance2 / $sub_total2) * 100 : 0;

		$sub_total_hds = $sub_total - $spicy_neck;
		$sub_total_hds1 = $sub_total1 - $spicy_neck1;
		$sub_total_hds2 = $sub_total2 - $spicy_neck2;

		$sub_variance_hds1 = $sub_total_hds - $sub_total_hds1;
		$sub_variance_hds2 = $sub_total_hds - $sub_total_hds2;
		$sub_percent_hds1 = $sub_total_hds1 > 0 ? ($sub_variance_hds1 / $sub_total_hds1) * 100 : 0;
		$sub_percent_hds2 = $sub_total_hds2 > 0 ? ($sub_variance_hds2 / $sub_total_hds2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'Sub Total',
			'dashboard_volume_unit' => $sub_total,
			'dashboard_volume_unit1' => $sub_total1,
			'dashboard_volume_unit2' => $sub_total2,
			'dashboard_volume_unit_dif1' => $sub_variance1,
			'dashboard_volume_unit_dif2' => $sub_variance2,
			'dashboard_volume_unit_percent1' => $sub_percent1,
			'dashboard_volume_unit_percent2' => $sub_percent2,
			'dashboard_volume_heads' => $sub_total_hds,
			'dashboard_volume_heads1' => $sub_total_hds1,
			'dashboard_volume_heads2' => $sub_total_hds2,
			'dashboard_volume_heads_dif1' => $sub_variance1,
			'dashboard_volume_heads_dif2' => $sub_variance2,
			'dashboard_volume_heads_percent1' => $sub_percent_hds1,
			'dashboard_volume_heads_percent2' => $sub_percent_hds2,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);

		$sub_total = $live + $dressed_distributor + $dressed_dealer + $dressed_hri + $dressed_sup + $dressed_retail + $dressed_vansales + $non_marinated + $marinated + $spicy_neck + $roasted_cutups + $roasted_chicken + $marinated_chicken_raw + $others + $add_ons_extras + $rice_meal + $snacks_desserts + $sharing + $drinks;

		$liempo = $volume['liempo'];
		$liempo1 = $volume['liempo1'];
		$liempo2 = $volume['liempo2'];
		$liempo_dif1 = $liempo - $liempo1;
		$liempo_dif2 = $liempo - $liempo2;
		$liempo_per1 = $liempo1 > 0 ? ($liempo_dif1 / $liempo1) * 100 : 0;
		$liempo_per2 = $liempo2 > 0 ? ($liempo_dif2 / $liempo2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'LIEMPO',
			'dashboard_volume_unit' => $liempo,
			'dashboard_volume_unit1' => $liempo1,
			'dashboard_volume_unit2' => $liempo2,
			'dashboard_volume_unit_dif1' => $liempo_dif1,
			'dashboard_volume_unit_dif2' => $liempo_dif2,
			'dashboard_volume_unit_percent1' => $liempo_per1,
			'dashboard_volume_unit_percent2' => $liempo_per2,
			'dashboard_volume_heads' => 0,
			'dashboard_volume_heads1' => 0,
			'dashboard_volume_heads2' => 0,
			'dashboard_volume_heads_dif1' => 0,
			'dashboard_volume_heads_dif2' => 0,
			'dashboard_volume_heads_percent1' => 0,
			'dashboard_volume_heads_percent2' => 0,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);

		$vap = $volume['vap'];
		$vap1 = $volume['vap1'];
		$vap2 = $volume['vap2'];
		$vap_dif1 = $vap - $vap1;
		$vap_dif2 = $vap - $vap2;
		$vap_per1 = $vap1 > 0 ? ($vap_dif1 / $vap1) * 100 : 0;
		$vap_per2 = $vap2 > 0 ? ($vap_dif2 / $vap2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'VAP',
			'dashboard_volume_unit' => $vap,
			'dashboard_volume_unit1' => $vap1,
			'dashboard_volume_unit2' => $vap2,
			'dashboard_volume_unit_dif1' => $vap_dif1,
			'dashboard_volume_unit_dif2' => $vap_dif2,
			'dashboard_volume_unit_percent1' => $vap_per1,
			'dashboard_volume_unit_percent2' => $vap_per2,
			'dashboard_volume_heads' => 0,
			'dashboard_volume_heads1' => 0,
			'dashboard_volume_heads2' => 0,
			'dashboard_volume_heads_dif1' => 0,
			'dashboard_volume_heads_dif2' => 0,
			'dashboard_volume_heads_percent1' => 0,
			'dashboard_volume_heads_percent2' => 0,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);


		//DOA & DDA

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'DP/DOA/DAA',
			'dashboard_volume_unit' => 0,
			'dashboard_volume_unit1' => 0,
			'dashboard_volume_unit2' => 0,
			'dashboard_volume_unit_dif1' => 0,
			'dashboard_volume_unit_dif2' => 0,
			'dashboard_volume_unit_percent1' => 0,
			'dashboard_volume_unit_percent2' => 0,
			'dashboard_volume_heads' => 0,
			'dashboard_volume_heads1' => 0,
			'dashboard_volume_heads2' => 0,
			'dashboard_volume_heads_dif1' => 0,
			'dashboard_volume_heads_dif2' => 0,
			'dashboard_volume_heads_percent1' => 0,
			'dashboard_volume_heads_percent2' => 0,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		//$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);

		$transfer = $volume['transfer'];
		$transfer1 = $volume['transfer1'];
		$transfer2 = $volume['transfer2'];
		$transfer_dif1 = $transfer - $transfer1;
		$transfer_dif2 = $transfer - $transfer2;
		$transfer_per1 = $transfer1 > 0 ? ($transfer_dif1 / $transfer1) * 100 : 0;
		$transfer_per2 = $transfer2 > 0 ? ($transfer_dif2 / $transfer2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'Transfer (In) / Out',
			'dashboard_volume_unit' => $transfer,
			'dashboard_volume_unit1' => $transfer1,
			'dashboard_volume_unit2' => $transfer2,
			'dashboard_volume_unit_dif1' => $transfer_dif1,
			'dashboard_volume_unit_dif2' => $transfer_dif2,
			'dashboard_volume_unit_percent1' => $transfer_per1,
			'dashboard_volume_unit_percent2' => $transfer_per2,
			'dashboard_volume_heads' => $transfer,
			'dashboard_volume_heads1' => $transfer1,
			'dashboard_volume_heads2' => $transfer2,
			'dashboard_volume_heads_dif1' => $transfer_dif1,
			'dashboard_volume_heads_dif2' => $transfer_dif2,
			'dashboard_volume_heads_percent1' => $transfer_per1,
			'dashboard_volume_heads_percent2' => $transfer_per2,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);

		
		$total = $liver_gizzard + $live + $dressed_distributor + $dressed_dealer + $dressed_hri + $dressed_sup + $dressed_retail + $dressed_vansales + $non_marinated + $marinated + $spicy_neck + $roasted_cutups + $roasted_chicken + $marinated_chicken_raw + $others + $add_ons_extras + $rice_meal + $snacks_desserts + $sharing + $drinks + $liempo + $vap + $transfer;

		$total1 = $liver_gizzard1 + $live1 + $dressed_distributor1 + $dressed_dealer1 + $dressed_hri1 + $dressed_sup1 + $dressed_retail1 + $dressed_vansales1 + $non_marinated1 + $marinated1 + $spicy_neck1 + $roasted_cutups1 + $roasted_chicken1 + $marinated_chicken_raw1 + $others1 + $add_ons_extras1 + $rice_meal1 + $snacks_desserts1 + $sharing1 + $drinks1 + $liempo1 + $vap1 + $transfer1;

		$total2 = $liver_gizzard2 + $live2 + $dressed_distributor2 + $dressed_dealer2 + $dressed_hri2 + $dressed_sup2 + $dressed_retail2 + $dressed_vansales2 + $non_marinated2 + $marinated2 + $spicy_neck2 + $roasted_cutups2 + $roasted_chicken2 + $marinated_chicken_raw2 + $others2 + $add_ons_extras2 + $rice_meal2 + $snacks_desserts2 + $sharing2 + $drinks2 + $liempo2 + $vap2 + $transfer2;

		$variance1 = $total - $total1;
		$variance2 = $total - $total2;
		$percent1 = $total1 > 0 ? ($variance1 / $total1) * 100 : 0;
		$percent2 = $total2 > 0 ? ($variance2 / $total2) * 100 : 0;

		$total_heads = $live + $dressed_distributor + $dressed_dealer + $dressed_hri + $dressed_sup + $dressed_retail + $dressed_vansales + $non_marinated + $marinated + $roasted_cutups + $roasted_chicken + $marinated_chicken_raw + $others;

		$total_heads1 = $live1 + $dressed_distributor1 + $dressed_dealer1 + $dressed_hri1 + $dressed_sup1 + $dressed_retail1 + $dressed_vansales1 + $non_marinated1 + $marinated1 + $roasted_cutups1 + $roasted_chicken1 + $marinated_chicken_raw1 + $others1;

		$total_heads2 = $live2 + $dressed_distributor2 + $dressed_dealer2 + $dressed_hri2 + $dressed_sup2 + $dressed_retail2 + $dressed_vansales2 + $non_marinated2 + $marinated2 + $roasted_cutups2 + $roasted_chicken2 + $marinated_chicken_raw2 + $others2;

		$variance_heads1 = $total_heads - $total_heads1;
		$variance_heads2 = $total_heads - $total_heads2;
		$percent_heads1 = $total_heads1 > 0 ? ($variance_heads1 / $total_heads1) * 100 : 0;
		$percent_heads2 = $total_heads2 > 0 ? ($variance_heads2 / $total_heads2) * 100 : 0;

		$set_volume = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_volume_name' => 'Total',
			'dashboard_volume_unit' => $total,
			'dashboard_volume_unit1' => $total1,
			'dashboard_volume_unit2' => $total2,
			'dashboard_volume_unit_dif1' => $variance1,
			'dashboard_volume_unit_dif2' => $variance2,
			'dashboard_volume_unit_percent1' => $percent1,
			'dashboard_volume_unit_percent2' => $percent2,
			'dashboard_volume_heads' => $total_heads,
			'dashboard_volume_heads1' => $total_heads1,
			'dashboard_volume_heads2' => $total_heads2,
			'dashboard_volume_heads_dif1' => $variance_heads1,
			'dashboard_volume_heads_dif2' => $variance_heads2,
			'dashboard_volume_heads_percent1' => $percent_heads1,
			'dashboard_volume_heads_percent2' => $percent_heads2,
			'dashboard_volume_added' => date_now(),
			'dashboard_volume_status' => 1
		);

		$insert_volume = $this->admin->insert_data('dashboard_volume_tbl', $set_volume);

		$volume_tbl = '
			<tr>
	            <td class="text-left">LIVE SALES</td>
	            <td class="text-right">' . number_format($live) . '</td>
	            <td class="text-right">' . number_format($live1) . '</td>
	            <td class="text-right">' . number_format($live2) . '</td>
	            <td class="text-right">' . number_format($live_dif1) . '</td>
	            <td class="text-right">' . number_format($live_per1) . '%</td>
	            <td class="text-right">' . number_format($live_dif2) . '</td>
	            <td class="text-right">' . number_format($live_per2) . '%</td>
	            
	            <td class="text-right">' . number_format($live) . '</td>
	            <td class="text-right">' . number_format($live1) . '</td>
	            <td class="text-right">' . number_format($live2) . '</td>
	            <td class="text-right">' . number_format($live_dif1) . '</td>
	            <td class="text-right">' . number_format($live_per1) . '%</td>
	            <td class="text-right">' . number_format($live_dif2) . '</td>
	            <td class="text-right">' . number_format($live_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">DRESSED - DISTRIBUTOR</td>
	            <td class="text-right">' . number_format($dressed_distributor) . '</td>
	            <td class="text-right">' . number_format($dressed_distributor1) . '</td>
	            <td class="text-right">' . number_format($dressed_distributor2) . '</td>
	            <td class="text-right">' . number_format($dressed_distributor_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_distributor_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_distributor_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_distributor_per2) . '%</td>

	            <td class="text-right">' . number_format($dressed_distributor) . '</td>
	            <td class="text-right">' . number_format($dressed_distributor1) . '</td>
	            <td class="text-right">' . number_format($dressed_distributor2) . '</td>
	            <td class="text-right">' . number_format($dressed_distributor_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_distributor_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_distributor_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_distributor_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">DRESSED - DEALER</td>
	            <td class="text-right">' . number_format($dressed_dealer) . '</td>
	            <td class="text-right">' . number_format($dressed_dealer1) . '</td>
	            <td class="text-right">' . number_format($dressed_dealer2) . '</td>
	            <td class="text-right">' . number_format($dressed_dealer_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_dealer_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_dealer_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_dealer_per2) . '%</td>

	            <td class="text-right">' . number_format($dressed_dealer) . '</td>
	            <td class="text-right">' . number_format($dressed_dealer1) . '</td>
	            <td class="text-right">' . number_format($dressed_dealer2) . '</td>
	            <td class="text-right">' . number_format($dressed_dealer_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_dealer_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_dealer_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_dealer_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">DRESSED - HRI</td>
	            <td class="text-right">' . number_format($dressed_hri) . '</td>
	            <td class="text-right">' . number_format($dressed_hri1) . '</td>
	            <td class="text-right">' . number_format($dressed_hri2) . '</td>
	            <td class="text-right">' . number_format($dressed_hri_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_hri_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_hri_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_hri_per2) . '%</td>

	            <td class="text-right">' . number_format($dressed_hri) . '</td>
	            <td class="text-right">' . number_format($dressed_hri1) . '</td>
	            <td class="text-right">' . number_format($dressed_hri2) . '</td>
	            <td class="text-right">' . number_format($dressed_hri_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_hri_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_hri_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_hri_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">DRESSED - SUPERMARKET</td>
	            <td class="text-right">' . number_format($dressed_sup) . '</td>
	            <td class="text-right">' . number_format($dressed_sup1) . '</td>
	            <td class="text-right">' . number_format($dressed_sup2) . '</td>
	            <td class="text-right">' . number_format($dressed_sup_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_sup_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_sup_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_sup_per2) . '%</td>

	            <td class="text-right">' . number_format($dressed_sup) . '</td>
	            <td class="text-right">' . number_format($dressed_sup1) . '</td>
	            <td class="text-right">' . number_format($dressed_sup2) . '</td>
	            <td class="text-right">' . number_format($dressed_sup_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_sup_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_sup_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_sup_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">DRESSED - VANSALES</td>
	            <td class="text-right">' . number_format($dressed_vansales) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales1) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales2) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_vansales_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales_per2) . '%</td>

	            <td class="text-right">' . number_format($dressed_vansales) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales1) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales2) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_vansales_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_vansales_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">DRESSED</td>
	            <td class="text-right">' . number_format($dressed_retail) . '</td>
	            <td class="text-right">' . number_format($dressed_retail1) . '</td>
	            <td class="text-right">' . number_format($dressed_retail2) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_retail_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_per2) . '%</td>

	            <td class="text-right">' . number_format($dressed_retail) . '</td>
	            <td class="text-right">' . number_format($dressed_retail1) . '</td>
	            <td class="text-right">' . number_format($dressed_retail2) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_dif1) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_per1) . '%</td>
	            <td class="text-right">' . number_format($dressed_retail_dif2) . '</td>
	            <td class="text-right">' . number_format($dressed_retail_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">NON MARINATED CUT UPS</td>
	            <td class="text-right">' . number_format($non_marinated) . '</td>
	            <td class="text-right">' . number_format($non_marinated1) . '</td>
	            <td class="text-right">' . number_format($non_marinated2) . '</td>
	            <td class="text-right">' . number_format($non_marinated_dif1) . '</td>
	            <td class="text-right">' . number_format($non_marinated_per1) . '%</td>
	            <td class="text-right">' . number_format($non_marinated_dif2) . '</td>
	            <td class="text-right">' . number_format($non_marinated_per2) . '%</td>

	            <td class="text-right">' . number_format($non_marinated) . '</td>
	            <td class="text-right">' . number_format($non_marinated1) . '</td>
	            <td class="text-right">' . number_format($non_marinated2) . '</td>
	            <td class="text-right">' . number_format($non_marinated_dif1) . '</td>
	            <td class="text-right">' . number_format($non_marinated_per1) . '%</td>
	            <td class="text-right">' . number_format($non_marinated_dif2) . '</td>
	            <td class="text-right">' . number_format($non_marinated_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">MARINATED CUT UPS</td>
	            <td class="text-right">' . number_format($marinated) . '</td>
	            <td class="text-right">' . number_format($marinated1) . '</td>
	            <td class="text-right">' . number_format($marinated2) . '</td>
	            <td class="text-right">' . number_format($marinated_dif1) . '</td>
	            <td class="text-right">' . number_format($marinated_per1) . '%</td>
	            <td class="text-right">' . number_format($marinated_dif2) . '</td>
	            <td class="text-right">' . number_format($marinated_per2) . '%</td>

	            <td class="text-right">' . number_format($marinated) . '</td>
	            <td class="text-right">' . number_format($marinated1) . '</td>
	            <td class="text-right">' . number_format($marinated2) . '</td>
	            <td class="text-right">' . number_format($marinated_dif1) . '</td>
	            <td class="text-right">' . number_format($marinated_per1) . '%</td>
	            <td class="text-right">' . number_format($marinated_dif2) . '</td>
	            <td class="text-right">' . number_format($marinated_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">SPICY NECK</td>
	            <td class="text-right">' . number_format($spicy_neck) . '</td>
	            <td class="text-right">' . number_format($spicy_neck1) . '</td>
	            <td class="text-right">' . number_format($spicy_neck2) . '</td>
	            <td class="text-right">' . number_format($spicy_neck_dif1) . '</td>
	            <td class="text-right">' . number_format($spicy_neck_per1) . '%</td>
	            <td class="text-right">' . number_format($spicy_neck_dif2) . '</td>
	            <td class="text-right">' . number_format($spicy_neck_per2) . '%</td>

	            <td class="text-right"></td>
	            <td class="text-right"></td>
	            <td class="text-right"></td>
	            <td class="text-right"></td>
	            <td class="text-right"></td>
	            <td class="text-right"></td>
	            <td class="text-right"></td>
	        </tr>

	        <tr>
	            <td class="text-left">ROASTED CUT UPS</td>
	            <td class="text-right">' . number_format($roasted_cutups) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups1) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups2) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_dif1) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_per1) . '%</td>
	            <td class="text-right">' . number_format($roasted_cutups_dif2) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_per2) . '%</td>

	            <td class="text-right">' . number_format($roasted_cutups) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups1) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups2) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_dif1) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_per1) . '%</td>
	            <td class="text-right">' . number_format($roasted_cutups_dif2) . '</td>
	            <td class="text-right">' . number_format($roasted_cutups_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">ROASTED CHICKEN</td>
	            <td class="text-right">' . number_format($roasted_chicken) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken1) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken2) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_dif1) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_per1) . '%</td>
	            <td class="text-right">' . number_format($roasted_chicken_dif2) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_per2) . '%</td>

	            <td class="text-right">' . number_format($roasted_chicken) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken1) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken2) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_dif1) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_per1) . '%</td>
	            <td class="text-right">' . number_format($roasted_chicken_dif2) . '</td>
	            <td class="text-right">' . number_format($roasted_chicken_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">MARINATED CHICKEN (RAW)</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw1) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw2) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_dif1) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_per1) . '%</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_dif2) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_per2) . '%</td>

	            <td class="text-right">' . number_format($marinated_chicken_raw) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw1) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw2) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_dif1) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_per1) . '%</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_dif2) . '</td>
	            <td class="text-right">' . number_format($marinated_chicken_raw_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">OTHER SPECIALTY PRODUCTS</td>
	            <td class="text-right">' . number_format($others) . '</td>
	            <td class="text-right">' . number_format($others1) . '</td>
	            <td class="text-right">' . number_format($others2) . '</td>
	            <td class="text-right">' . number_format($others_dif1) . '</td>
	            <td class="text-right">' . number_format($others_per1) . '%</td>
	            <td class="text-right">' . number_format($others_dif2) . '</td>
	            <td class="text-right">' . number_format($others_per2) . '%</td>

	            <td class="text-right">' . number_format($others) . '</td>
	            <td class="text-right">' . number_format($others1) . '</td>
	            <td class="text-right">' . number_format($others2) . '</td>
	            <td class="text-right">' . number_format($others_dif1) . '</td>
	            <td class="text-right">' . number_format($others_per1) . '%</td>
	            <td class="text-right">' . number_format($others_dif2) . '</td>
	            <td class="text-right">' . number_format($others_per2) . '%</td>
	        </tr>

	        <tr>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	        </tr>

	        <tr style="border-top: 2px solid black; border-bottom: 2px solid black">
	            <td class="text-left"><strong>Sub Total</strong></td>
	            <td class="text-right">' . number_format($sub_total) . '</td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	        </tr>

	        <tr>
	            <td class="text-left">LIEMPO</td>
	            <td class="text-right">' . number_format($liempo) . '</td>
	            <td class="text-right">' . number_format($liempo1) . '</td>
	            <td class="text-right">' . number_format($liempo2) . '</td>
	            <td class="text-right">' . number_format($liempo_dif1) . '</td>
	            <td class="text-right">' . number_format($liempo_per1) . '%</td>
	            <td class="text-right">' . number_format($liempo_dif2) . '</td>
	            <td class="text-right">' . number_format($liempo_per2) . '%</td>

	            <td class="text-right">' . number_format($liempo) . '</td>
	            <td class="text-right">' . number_format($liempo1) . '</td>
	            <td class="text-right">' . number_format($liempo2) . '</td>
	            <td class="text-right">' . number_format($liempo_dif1) . '</td>
	            <td class="text-right">' . number_format($liempo_per1) . '%</td>
	            <td class="text-right">' . number_format($liempo_dif2) . '</td>
	            <td class="text-right">' . number_format($liempo_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">VAP</td>
	            <td class="text-right">' . number_format($vap) . '</td>
	            <td class="text-right">' . number_format($vap1) . '</td>
	            <td class="text-right">' . number_format($vap2) . '</td>
	            <td class="text-right">' . number_format($vap_dif1) . '</td>
	            <td class="text-right">' . number_format($vap_per1) . '%</td>
	            <td class="text-right">' . number_format($vap_dif2) . '</td>
	            <td class="text-right">' . number_format($vap_per2) . '%</td>

	            <td class="text-right">' . number_format($vap) . '</td>
	            <td class="text-right">' . number_format($vap1) . '</td>
	            <td class="text-right">' . number_format($vap2) . '</td>
	            <td class="text-right">' . number_format($vap_dif1) . '</td>
	            <td class="text-right">' . number_format($vap_per1) . '%</td>
	            <td class="text-right">' . number_format($vap_dif2) . '</td>
	            <td class="text-right">' . number_format($vap_per2) . '%</td>
	        </tr>

	        <tr>
	            <td class="text-left">DP/DOA/DAA</td>
	            <td class="text-right"></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	        </tr>

	        <tr>
	            <td class="text-left">Transfer (In) / Out</td>
	            <td class="text-right">' . number_format($transfer) . '</td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td class="text-right">' . number_format($transfer) . '</td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	            <td></td>
	        </tr>

	        <tr style="border-top: 2px solid black; border-bottom: 2px solid black">
	            <td class="text-left"><strong>Total</strong></td>
	            <td class="text-right">' . number_format($total) . '</td>
	            <td class="text-right">' . number_format($total1) . '</td>
	            <td class="text-right">' . number_format($total2) . '</td>
	            <td class="text-right">' . number_format($variance1) . '</td>
	            <td class="text-right">' . number_format($percent1) . '</td>
	            <td class="text-right">' . number_format($variance2) . '</td>
	            <td class="text-right">' . number_format($percent1) . '</td>

	            <td class="text-right">' . number_format($total_heads) . '</td>
	            <td class="text-right">' . number_format($total1) . '</td>
	            <td class="text-right">' . number_format($total2) . '</td>
	            <td class="text-right">' . number_format($variance1) . '</td>
	            <td class="text-right">' . number_format($percent1) . '%</td>
	            <td class="text-right">' . number_format($variance2) . '</td>
	            <td class="text-right">' . number_format($percent1) . '%</td>
	        </tr>
	    ';
	}

	public function price_assumption_data($trans_id, $bc_id, $year){
		//$info = $this->_require_login();

		$count = 0;
		$newline_count = 15;


		/*$data['live_prev'] = 0;
		$data['live_prev2'] = 0;

		$live_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIVE', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

		$data['live_prev_year2_jan'] = 0;
		$data['live_prev_year2_feb'] = 0;
		$data['live_prev_year2_mar'] = 0;
		$data['live_prev_year2_apr'] = 0;
		$data['live_prev_year2_may'] = 0;
		$data['live_prev_year2_jun'] = 0;
		$data['live_prev_year2_jul'] = 0;
		$data['live_prev_year2_aug'] = 0;
		$data['live_prev_year2_sep'] = 0;
		$data['live_prev_year2_oct'] = 0;
		$data['live_prev_year2_nov'] = 0;
		$data['live_prev_year2_dec'] = 0;
		$data['live_prev_year2_avg'] = 0;
		$data['live_prev_year2_min'] = 0;
		$data['live_prev_year2_max'] = 0;

		foreach($live_prev_year2 as $row){
			$data['live_prev_year2_jan'] = $row->jan_price;
			$data['live_prev_year2_feb'] = $row->feb_price;
			$data['live_prev_year2_mar'] = $row->mar_price;
			$data['live_prev_year2_apr'] = $row->apr_price;
			$data['live_prev_year2_may'] = $row->may_price;
			$data['live_prev_year2_jun'] = $row->jun_price;
			$data['live_prev_year2_jul'] = $row->jul_price;
			$data['live_prev_year2_aug'] = $row->aug_price;
			$data['live_prev_year2_sep'] = $row->sep_price;
			$data['live_prev_year2_oct'] = $row->oct_price;
			$data['live_prev_year2_nov'] = $row->nov_price;
			$data['live_prev_year2_dec'] = $row->dec_price;
			$data['live_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['live_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['live_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'LIVE',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['live_prev_year2_jan'],
			'dashboard_price_feb' => $data['live_prev_year2_feb'],
			'dashboard_price_mar' => $data['live_prev_year2_mar'],
			'dashboard_price_apr' => $data['live_prev_year2_apr'],
			'dashboard_price_may' => $data['live_prev_year2_may'],
			'dashboard_price_june' => $data['live_prev_year2_jun'],
			'dashboard_price_july' => $data['live_prev_year2_jul'],
			'dashboard_price_aug' => $data['live_prev_year2_aug'],
			'dashboard_price_sep' => $data['live_prev_year2_sep'],
			'dashboard_price_oct' => $data['live_prev_year2_oct'],
			'dashboard_price_nov' => $data['live_prev_year2_nov'],
			'dashboard_price_dec' => $data['live_prev_year2_dec'],
			'dashboard_price_min' => $data['live_prev_year2_min'],
			'dashboard_price_max' => $data['live_prev_year2_max'],
			'dashboard_price_avg' => $data['live_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$live_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIVE', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['live_prev_year1_jan'] = 0;
		$data['live_prev_year1_feb'] = 0;
		$data['live_prev_year1_mar'] = 0;
		$data['live_prev_year1_apr'] = 0;
		$data['live_prev_year1_may'] = 0;
		$data['live_prev_year1_jun'] = 0;
		$data['live_prev_year1_jul'] = 0;
		$data['live_prev_year1_aug'] = 0;
		$data['live_prev_year1_sep'] = 0;
		$data['live_prev_year1_oct'] = 0;
		$data['live_prev_year1_nov'] = 0;
		$data['live_prev_year1_dec'] = 0;
		$data['live_prev_year1_avg'] = 0;
		$data['live_prev_year1_min'] = 0;
		$data['live_prev_year1_max'] = 0;

		foreach($live_prev_year1 as $row){
			$data['live_prev_year1_jan'] = $row->jan_price;
			$data['live_prev_year1_feb'] = $row->feb_price;
			$data['live_prev_year1_mar'] = $row->mar_price;
			$data['live_prev_year1_apr'] = $row->apr_price;
			$data['live_prev_year1_may'] = $row->may_price;
			$data['live_prev_year1_jun'] = $row->jun_price;
			$data['live_prev_year1_jul'] = $row->jul_price;
			$data['live_prev_year1_aug'] = $row->aug_price;
			$data['live_prev_year1_sep'] = $row->sep_price;
			$data['live_prev_year1_oct'] = $row->oct_price;
			$data['live_prev_year1_nov'] = $row->nov_price;
			$data['live_prev_year1_dec'] = $row->dec_price;
			$data['live_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['live_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['live_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'LIVE',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['live_prev_year1_jan'],
			'dashboard_price_feb' => $data['live_prev_year1_feb'],
			'dashboard_price_mar' => $data['live_prev_year1_mar'],
			'dashboard_price_apr' => $data['live_prev_year1_apr'],
			'dashboard_price_may' => $data['live_prev_year1_may'],
			'dashboard_price_june' => $data['live_prev_year1_jun'],
			'dashboard_price_july' => $data['live_prev_year1_jul'],
			'dashboard_price_aug' => $data['live_prev_year1_aug'],
			'dashboard_price_sep' => $data['live_prev_year1_sep'],
			'dashboard_price_oct' => $data['live_prev_year1_oct'],
			'dashboard_price_nov' => $data['live_prev_year1_nov'],
			'dashboard_price_dec' => $data['live_prev_year1_dec'],
			'dashboard_price_min' => $data['live_prev_year1_min'],
			'dashboard_price_max' => $data['live_prev_year1_max'],
			'dashboard_price_avg' => $data['live_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$join_live = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => "b.material_id = d.material_id AND d.material_desc = 'LIVE BROILER'",
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = "LIVE"'
		);

		$get_live = $this->admin->get_join('sales_tbl a', $join_live, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['live1'] = 0;
		$data['live2'] = 0;
		$data['live3'] = 0;
		$data['live4'] = 0;
		$data['live5'] = 0;
		$data['live6'] = 0;
		$data['live7'] = 0;
		$data['live8'] = 0;
		$data['live9'] = 0;
		$data['live10'] = 0;
		$data['live11'] = 0;
		$data['live12'] = 0;
		$data['live_total'] = 0;
		$data['live_count'] = 0;
		$data['live_avg'] = 0;
		$data['live_min'] = 0;
		$data['live_max'] = 0;

		foreach($get_live as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['live' . $month] = $asp;

			$data['live_total'] += $asp;

			if($asp < $data['live_min'] || $data['live_count'] == 0){
				$data['live_min'] = $asp;
			}

			if($asp > $data['live_max'] || $data['live_count'] == 0){
				$data['live_max'] = $asp;
			}

			$data['live_count']++;
		}

		$data['live_avg'] = $data['live_total'] != 0 ? $data['live_total'] / $data['live_count'] : 0;

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'LIVE',
			'dashboard_price_year' => $year,
			'dashboard_price_jan' => $data['live1'],
			'dashboard_price_feb' => $data['live2'],
			'dashboard_price_mar' => $data['live3'],
			'dashboard_price_apr' => $data['live4'],
			'dashboard_price_may' => $data['live5'],
			'dashboard_price_june' => $data['live6'],
			'dashboard_price_july' => $data['live7'],
			'dashboard_price_aug' => $data['live8'],
			'dashboard_price_sep' => $data['live9'],
			'dashboard_price_oct' => $data['live10'],
			'dashboard_price_nov' => $data['live11'],
			'dashboard_price_dec' => $data['live12'],
			'dashboard_price_min' => $data['live_min'],
			'dashboard_price_max' => $data['live_max'],
			'dashboard_price_avg' => $data['live_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		*/


		/*Van Sales*/

		/*$vansales_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAN SALES', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 2, 'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['vansales_prev_year2_jan'] = 0;
		$data['vansales_prev_year2_feb'] = 0;
		$data['vansales_prev_year2_mar'] = 0;
		$data['vansales_prev_year2_apr'] = 0;
		$data['vansales_prev_year2_may'] = 0;
		$data['vansales_prev_year2_jun'] = 0;
		$data['vansales_prev_year2_jul'] = 0;
		$data['vansales_prev_year2_aug'] = 0;
		$data['vansales_prev_year2_sep'] = 0;
		$data['vansales_prev_year2_oct'] = 0;
		$data['vansales_prev_year2_nov'] = 0;
		$data['vansales_prev_year2_dec'] = 0;
		$data['vansales_prev_year2_avg'] = 0;
		$data['vansales_prev_year2_min'] = 0;
		$data['vansales_prev_year2_max'] = 0;

		foreach($vansales_prev_year2 as $row){
			$data['vansales_prev_year2_jan'] = $row->jan_price;
			$data['vansales_prev_year2_feb'] = $row->feb_price;
			$data['vansales_prev_year2_mar'] = $row->mar_price;
			$data['vansales_prev_year2_apr'] = $row->apr_price;
			$data['vansales_prev_year2_may'] = $row->may_price;
			$data['vansales_prev_year2_jun'] = $row->jun_price;
			$data['vansales_prev_year2_jul'] = $row->jul_price;
			$data['vansales_prev_year2_aug'] = $row->aug_price;
			$data['vansales_prev_year2_sep'] = $row->sep_price;
			$data['vansales_prev_year2_oct'] = $row->oct_price;
			$data['vansales_prev_year2_nov'] = $row->nov_price;
			$data['vansales_prev_year2_dec'] = $row->dec_price;
			$data['vansales_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['vansales_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['vansales_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'VAN SALES',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['vansales_prev_year2_jan'],
			'dashboard_price_feb' => $data['vansales_prev_year2_feb'],
			'dashboard_price_mar' => $data['vansales_prev_year2_mar'],
			'dashboard_price_apr' => $data['vansales_prev_year2_apr'],
			'dashboard_price_may' => $data['vansales_prev_year2_may'],
			'dashboard_price_june' => $data['vansales_prev_year2_jun'],
			'dashboard_price_july' => $data['vansales_prev_year2_jul'],
			'dashboard_price_aug' => $data['vansales_prev_year2_aug'],
			'dashboard_price_sep' => $data['vansales_prev_year2_sep'],
			'dashboard_price_oct' => $data['vansales_prev_year2_oct'],
			'dashboard_price_nov' => $data['vansales_prev_year2_nov'],
			'dashboard_price_dec' => $data['vansales_prev_year2_dec'],
			'dashboard_price_min' => $data['vansales_prev_year2_min'],
			'dashboard_price_max' => $data['vansales_prev_year2_max'],
			'dashboard_price_avg' => $data['vansales_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$vansales_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAN SALES', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['vansales_prev_year1_jan'] = 0;
		$data['vansales_prev_year1_feb'] = 0;
		$data['vansales_prev_year1_mar'] = 0;
		$data['vansales_prev_year1_apr'] = 0;
		$data['vansales_prev_year1_may'] = 0;
		$data['vansales_prev_year1_jun'] = 0;
		$data['vansales_prev_year1_jul'] = 0;
		$data['vansales_prev_year1_aug'] = 0;
		$data['vansales_prev_year1_sep'] = 0;
		$data['vansales_prev_year1_oct'] = 0;
		$data['vansales_prev_year1_nov'] = 0;
		$data['vansales_prev_year1_dec'] = 0;
		$data['vansales_prev_year1_avg'] = 0;
		$data['vansales_prev_year1_min'] = 0;
		$data['vansales_prev_year1_max'] = 0;

		foreach($vansales_prev_year1 as $row){
			$data['vansales_prev_year1_jan'] = $row->jan_price;
			$data['vansales_prev_year1_feb'] = $row->feb_price;
			$data['vansales_prev_year1_mar'] = $row->mar_price;
			$data['vansales_prev_year1_apr'] = $row->apr_price;
			$data['vansales_prev_year1_may'] = $row->may_price;
			$data['vansales_prev_year1_jun'] = $row->jun_price;
			$data['vansales_prev_year1_jul'] = $row->jul_price;
			$data['vansales_prev_year1_aug'] = $row->aug_price;
			$data['vansales_prev_year1_sep'] = $row->sep_price;
			$data['vansales_prev_year1_oct'] = $row->oct_price;
			$data['vansales_prev_year1_nov'] = $row->nov_price;
			$data['vansales_prev_year1_dec'] = $row->dec_price;
			$data['vansales_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['vansales_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['vansales_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'VAN SALES',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['vansales_prev_year1_jan'],
			'dashboard_price_feb' => $data['vansales_prev_year1_feb'],
			'dashboard_price_mar' => $data['vansales_prev_year1_mar'],
			'dashboard_price_apr' => $data['vansales_prev_year1_apr'],
			'dashboard_price_may' => $data['vansales_prev_year1_may'],
			'dashboard_price_june' => $data['vansales_prev_year1_jun'],
			'dashboard_price_july' => $data['vansales_prev_year1_jul'],
			'dashboard_price_aug' => $data['vansales_prev_year1_aug'],
			'dashboard_price_sep' => $data['vansales_prev_year1_sep'],
			'dashboard_price_oct' => $data['vansales_prev_year1_oct'],
			'dashboard_price_nov' => $data['vansales_prev_year1_nov'],
			'dashboard_price_dec' => $data['vansales_prev_year1_dec'],
			'dashboard_price_min' => $data['vansales_prev_year1_min'],
			'dashboard_price_max' => $data['vansales_prev_year1_max'],
			'dashboard_price_avg' => $data['vansales_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$join_vansales = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'VAN SALES\''
		);

		$get_vansales = $this->admin->get_join('sales_tbl a', $join_vansales, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['vansales1'] = 0;
		$data['vansales2'] = 0;
		$data['vansales3'] = 0;
		$data['vansales4'] = 0;
		$data['vansales5'] = 0;
		$data['vansales6'] = 0;
		$data['vansales7'] = 0;
		$data['vansales8'] = 0;
		$data['vansales9'] = 0;
		$data['vansales10'] = 0;
		$data['vansales11'] = 0;
		$data['vansales12'] = 0;
		$data['vansales_total'] = 0;
		$data['vansales_count'] = 0;
		$data['vansales_avg'] = 0;
		$data['vansales_min'] = 0;
		$data['vansales_max'] = 0;

		foreach($get_vansales as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['vansales' . $month] = $asp;
			$data['vansales_total'] += $asp;

			if($asp < $data['vansales_min'] || $data['vansales_count'] == 0){
				$data['vansales_min'] = $asp;
			}

			if($asp > $data['vansales_max'] || $data['vansales_count'] == 0){
				$data['vansales_max'] = $asp;
			}

			$data['vansales_count']++;
		}

		$data['vansales_avg'] = $data['vansales_total'] != 0 ? $data['vansales_total'] / $data['vansales_count'] : 0;

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'VAN SALES',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['vansales1'],
			'dashboard_price_feb' => $data['vansales2'],
			'dashboard_price_mar' => $data['vansales3'],
			'dashboard_price_apr' => $data['vansales4'],
			'dashboard_price_may' => $data['vansales5'],
			'dashboard_price_june' => $data['vansales6'],
			'dashboard_price_july' => $data['vansales7'],
			'dashboard_price_aug' => $data['vansales8'],
			'dashboard_price_sep' => $data['vansales9'],
			'dashboard_price_oct' => $data['vansales10'],
			'dashboard_price_nov' => $data['vansales11'],
			'dashboard_price_dec' => $data['vansales12'],
			'dashboard_price_min' => $data['vansales_min'],
			'dashboard_price_max' => $data['vansales_max'],
			'dashboard_price_avg' => $data['vansales_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$tds_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 2, 'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_prev_year2_jan'] = 0;
		$data['tds_prev_year2_feb'] = 0;
		$data['tds_prev_year2_mar'] = 0;
		$data['tds_prev_year2_apr'] = 0;
		$data['tds_prev_year2_may'] = 0;
		$data['tds_prev_year2_jun'] = 0;
		$data['tds_prev_year2_jul'] = 0;
		$data['tds_prev_year2_aug'] = 0;
		$data['tds_prev_year2_sep'] = 0;
		$data['tds_prev_year2_oct'] = 0;
		$data['tds_prev_year2_nov'] = 0;
		$data['tds_prev_year2_dec'] = 0;
		$data['tds_prev_year2_avg'] = 0;
		$data['tds_prev_year2_min'] = 0;
		$data['tds_prev_year2_max'] = 0;

		foreach($tds_prev_year2 as $row){
			$data['tds_prev_year2_jan'] = $row->jan_price;
			$data['tds_prev_year2_feb'] = $row->feb_price;
			$data['tds_prev_year2_mar'] = $row->mar_price;
			$data['tds_prev_year2_apr'] = $row->apr_price;
			$data['tds_prev_year2_may'] = $row->may_price;
			$data['tds_prev_year2_jun'] = $row->jun_price;
			$data['tds_prev_year2_jul'] = $row->jul_price;
			$data['tds_prev_year2_aug'] = $row->aug_price;
			$data['tds_prev_year2_sep'] = $row->sep_price;
			$data['tds_prev_year2_oct'] = $row->oct_price;
			$data['tds_prev_year2_nov'] = $row->nov_price;
			$data['tds_prev_year2_dec'] = $row->dec_price;
			$data['tds_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['tds_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['tds_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'TDs',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['tds_prev_year2_jan'],
			'dashboard_price_feb' => $data['tds_prev_year2_feb'],
			'dashboard_price_mar' => $data['tds_prev_year2_mar'],
			'dashboard_price_apr' => $data['tds_prev_year2_apr'],
			'dashboard_price_may' => $data['tds_prev_year2_may'],
			'dashboard_price_june' => $data['tds_prev_year2_jun'],
			'dashboard_price_july' => $data['tds_prev_year2_jul'],
			'dashboard_price_aug' => $data['tds_prev_year2_aug'],
			'dashboard_price_sep' => $data['tds_prev_year2_sep'],
			'dashboard_price_oct' => $data['tds_prev_year2_oct'],
			'dashboard_price_nov' => $data['tds_prev_year2_nov'],
			'dashboard_price_dec' => $data['tds_prev_year2_dec'],
			'dashboard_price_min' => $data['tds_prev_year2_min'],
			'dashboard_price_max' => $data['tds_prev_year2_max'],
			'dashboard_price_avg' => $data['tds_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$tds_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_prev_year1_jan'] = 0;
		$data['tds_prev_year1_feb'] = 0;
		$data['tds_prev_year1_mar'] = 0;
		$data['tds_prev_year1_apr'] = 0;
		$data['tds_prev_year1_may'] = 0;
		$data['tds_prev_year1_jun'] = 0;
		$data['tds_prev_year1_jul'] = 0;
		$data['tds_prev_year1_aug'] = 0;
		$data['tds_prev_year1_sep'] = 0;
		$data['tds_prev_year1_oct'] = 0;
		$data['tds_prev_year1_nov'] = 0;
		$data['tds_prev_year1_dec'] = 0;
		$data['tds_prev_year1_avg'] = 0;
		$data['tds_prev_year1_min'] = 0;
		$data['tds_prev_year1_max'] = 0;

		foreach($tds_prev_year1 as $row){
			$data['tds_prev_year1_jan'] = $row->jan_price;
			$data['tds_prev_year1_feb'] = $row->feb_price;
			$data['tds_prev_year1_mar'] = $row->mar_price;
			$data['tds_prev_year1_apr'] = $row->apr_price;
			$data['tds_prev_year1_may'] = $row->may_price;
			$data['tds_prev_year1_jun'] = $row->jun_price;
			$data['tds_prev_year1_jul'] = $row->jul_price;
			$data['tds_prev_year1_aug'] = $row->aug_price;
			$data['tds_prev_year1_sep'] = $row->sep_price;
			$data['tds_prev_year1_oct'] = $row->oct_price;
			$data['tds_prev_year1_nov'] = $row->nov_price;
			$data['tds_prev_year1_dec'] = $row->dec_price;
			$data['tds_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['tds_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['tds_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'TDs',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['tds_prev_year1_jan'],
			'dashboard_price_feb' => $data['tds_prev_year1_feb'],
			'dashboard_price_mar' => $data['tds_prev_year1_mar'],
			'dashboard_price_apr' => $data['tds_prev_year1_apr'],
			'dashboard_price_may' => $data['tds_prev_year1_may'],
			'dashboard_price_june' => $data['tds_prev_year1_jun'],
			'dashboard_price_july' => $data['tds_prev_year1_jul'],
			'dashboard_price_aug' => $data['tds_prev_year1_aug'],
			'dashboard_price_sep' => $data['tds_prev_year1_sep'],
			'dashboard_price_oct' => $data['tds_prev_year1_oct'],
			'dashboard_price_nov' => $data['tds_prev_year1_nov'],
			'dashboard_price_dec' => $data['tds_prev_year1_dec'],
			'dashboard_price_min' => $data['tds_prev_year1_min'],
			'dashboard_price_max' => $data['tds_prev_year1_max'],
			'dashboard_price_avg' => $data['tds_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$join_tds = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'TRADE DISTRIBUTOR\''
		);

		$get_tds = $this->admin->get_join('sales_tbl a', $join_tds, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['tds1'] = 0;
		$data['tds2'] = 0;
		$data['tds3'] = 0;
		$data['tds4'] = 0;
		$data['tds5'] = 0;
		$data['tds6'] = 0;
		$data['tds7'] = 0;
		$data['tds8'] = 0;
		$data['tds9'] = 0;
		$data['tds10'] = 0;
		$data['tds11'] = 0;
		$data['tds12'] = 0;
		$data['tds_total'] = 0;
		$data['tds_count'] = 0;
		$data['tds_avg'] = 0;
		$data['tds_min'] = 0;
		$data['tds_max'] = 0;

		foreach($get_tds as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['tds' . $month] = $asp;
			$data['tds_total'] += $asp;

			if($asp < $data['tds_min'] || $data['tds_count'] == 0){
				$data['tds_min'] = $asp;
			}

			if($asp > $data['tds_max'] || $data['tds_count'] == 0){
				$data['tds_max'] = $asp;
			}

			$data['tds_count']++;
		}

		$data['tds_avg'] = $data['tds_total'] != 0 ? $data['tds_total'] / $data['tds_count'] : 0;

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'TDs',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['tds1'],
			'dashboard_price_feb' => $data['tds2'],
			'dashboard_price_mar' => $data['tds3'],
			'dashboard_price_apr' => $data['tds4'],
			'dashboard_price_may' => $data['tds5'],
			'dashboard_price_june' => $data['tds6'],
			'dashboard_price_july' => $data['tds7'],
			'dashboard_price_aug' => $data['tds8'],
			'dashboard_price_sep' => $data['tds9'],
			'dashboard_price_oct' => $data['tds10'],
			'dashboard_price_nov' => $data['tds11'],
			'dashboard_price_dec' => $data['tds12'],
			'dashboard_price_min' => $data['tds_min'],
			'dashboard_price_max' => $data['tds_max'],
			'dashboard_price_avg' => $data['tds_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);*/


		/*COM SUPERMARKET*/

		/*$smkt_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 2, 'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_prev_year2_jan'] = 0;
		$data['smkt_prev_year2_feb'] = 0;
		$data['smkt_prev_year2_mar'] = 0;
		$data['smkt_prev_year2_apr'] = 0;
		$data['smkt_prev_year2_may'] = 0;
		$data['smkt_prev_year2_jun'] = 0;
		$data['smkt_prev_year2_jul'] = 0;
		$data['smkt_prev_year2_aug'] = 0;
		$data['smkt_prev_year2_sep'] = 0;
		$data['smkt_prev_year2_oct'] = 0;
		$data['smkt_prev_year2_nov'] = 0;
		$data['smkt_prev_year2_dec'] = 0;
		$data['smkt_prev_year2_avg'] = 0;
		$data['smkt_prev_year2_min'] = 0;
		$data['smkt_prev_year2_max'] = 0;

		foreach($smkt_prev_year2 as $row){
			$data['smkt_prev_year2_jan'] = $row->jan_price;
			$data['smkt_prev_year2_feb'] = $row->feb_price;
			$data['smkt_prev_year2_mar'] = $row->mar_price;
			$data['smkt_prev_year2_apr'] = $row->apr_price;
			$data['smkt_prev_year2_may'] = $row->may_price;
			$data['smkt_prev_year2_jun'] = $row->jun_price;
			$data['smkt_prev_year2_jul'] = $row->jul_price;
			$data['smkt_prev_year2_aug'] = $row->aug_price;
			$data['smkt_prev_year2_sep'] = $row->sep_price;
			$data['smkt_prev_year2_oct'] = $row->oct_price;
			$data['smkt_prev_year2_nov'] = $row->nov_price;
			$data['smkt_prev_year2_dec'] = $row->dec_price;
			$data['smkt_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['smkt_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['smkt_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'SUPERMARKET',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['smkt_prev_year2_jan'],
			'dashboard_price_feb' => $data['smkt_prev_year2_feb'],
			'dashboard_price_mar' => $data['smkt_prev_year2_mar'],
			'dashboard_price_apr' => $data['smkt_prev_year2_apr'],
			'dashboard_price_may' => $data['smkt_prev_year2_may'],
			'dashboard_price_june' => $data['smkt_prev_year2_jun'],
			'dashboard_price_july' => $data['smkt_prev_year2_jul'],
			'dashboard_price_aug' => $data['smkt_prev_year2_aug'],
			'dashboard_price_sep' => $data['smkt_prev_year2_sep'],
			'dashboard_price_oct' => $data['smkt_prev_year2_oct'],
			'dashboard_price_nov' => $data['smkt_prev_year2_nov'],
			'dashboard_price_dec' => $data['smkt_prev_year2_dec'],
			'dashboard_price_min' => $data['smkt_prev_year2_min'],
			'dashboard_price_max' => $data['smkt_prev_year2_max'],
			'dashboard_price_avg' => $data['smkt_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$smkt_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SUPERMARKET', 'comp_price_segment' => 'COM', 'comp_price_year' => $year - 1, 'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_prev_year1_jan'] = 0;
		$data['smkt_prev_year1_feb'] = 0;
		$data['smkt_prev_year1_mar'] = 0;
		$data['smkt_prev_year1_apr'] = 0;
		$data['smkt_prev_year1_may'] = 0;
		$data['smkt_prev_year1_jun'] = 0;
		$data['smkt_prev_year1_jul'] = 0;
		$data['smkt_prev_year1_aug'] = 0;
		$data['smkt_prev_year1_sep'] = 0;
		$data['smkt_prev_year1_oct'] = 0;
		$data['smkt_prev_year1_nov'] = 0;
		$data['smkt_prev_year1_dec'] = 0;
		$data['smkt_prev_year1_avg'] = 0;
		$data['smkt_prev_year1_min'] = 0;
		$data['smkt_prev_year1_max'] = 0;

		foreach($smkt_prev_year1 as $row){
			$data['smkt_prev_year1_jan'] = $row->jan_price;
			$data['smkt_prev_year1_feb'] = $row->feb_price;
			$data['smkt_prev_year1_mar'] = $row->mar_price;
			$data['smkt_prev_year1_apr'] = $row->apr_price;
			$data['smkt_prev_year1_may'] = $row->may_price;
			$data['smkt_prev_year1_jun'] = $row->jun_price;
			$data['smkt_prev_year1_jul'] = $row->jul_price;
			$data['smkt_prev_year1_aug'] = $row->aug_price;
			$data['smkt_prev_year1_sep'] = $row->sep_price;
			$data['smkt_prev_year1_oct'] = $row->oct_price;
			$data['smkt_prev_year1_nov'] = $row->nov_price;
			$data['smkt_prev_year1_dec'] = $row->dec_price;
			$data['smkt_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['smkt_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['smkt_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'SUPERMARKET',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['smkt_prev_year1_jan'],
			'dashboard_price_feb' => $data['smkt_prev_year1_feb'],
			'dashboard_price_mar' => $data['smkt_prev_year1_mar'],
			'dashboard_price_apr' => $data['smkt_prev_year1_apr'],
			'dashboard_price_may' => $data['smkt_prev_year1_may'],
			'dashboard_price_june' => $data['smkt_prev_year1_jun'],
			'dashboard_price_july' => $data['smkt_prev_year1_jul'],
			'dashboard_price_aug' => $data['smkt_prev_year1_aug'],
			'dashboard_price_sep' => $data['smkt_prev_year1_sep'],
			'dashboard_price_oct' => $data['smkt_prev_year1_oct'],
			'dashboard_price_nov' => $data['smkt_prev_year1_nov'],
			'dashboard_price_dec' => $data['smkt_prev_year1_dec'],
			'dashboard_price_min' => $data['smkt_prev_year1_min'],
			'dashboard_price_max' => $data['smkt_prev_year1_max'],
			'dashboard_price_avg' => $data['smkt_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$join_smkt = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'SUPERMARKET\''
		);

		$get_smkt = $this->admin->get_join('sales_tbl a', $join_smkt, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['smkt1'] = 0;
		$data['smkt2'] = 0;
		$data['smkt3'] = 0;
		$data['smkt4'] = 0;
		$data['smkt5'] = 0;
		$data['smkt6'] = 0;
		$data['smkt7'] = 0;
		$data['smkt8'] = 0;
		$data['smkt9'] = 0;
		$data['smkt10'] = 0;
		$data['smkt11'] = 0;
		$data['smkt12'] = 0;
		$data['smkt_total'] = 0;
		$data['smkt_count'] = 0;
		$data['smkt_avg'] = 0;
		$data['smkt_min'] = 0;
		$data['smkt_max'] = 0;

		foreach($get_smkt as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['smkt' . $month] = $asp;
			$data['smkt_total'] += $asp;

			if($asp < $data['smkt_min'] || $data['smkt_count'] == 0){
				$data['smkt_min'] = $asp;
			}

			if($asp > $data['smkt_max'] || $data['smkt_count'] == 0){
				$data['smkt_max'] = $asp;
			}

			$data['smkt_count']++;
		}

		$data['smkt_avg'] = $data['smkt_total'] != 0 ? $data['smkt_total'] / $data['smkt_count'] : 0;

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'SUPERMARKET',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['smkt1'],
			'dashboard_price_feb' => $data['smkt2'],
			'dashboard_price_mar' => $data['smkt3'],
			'dashboard_price_apr' => $data['smkt4'],
			'dashboard_price_may' => $data['smkt5'],
			'dashboard_price_june' => $data['smkt6'],
			'dashboard_price_july' => $data['smkt7'],
			'dashboard_price_aug' => $data['smkt8'],
			'dashboard_price_sep' => $data['smkt9'],
			'dashboard_price_oct' => $data['smkt10'],
			'dashboard_price_nov' => $data['smkt11'],
			'dashboard_price_dec' => $data['smkt12'],
			'dashboard_price_min' => $data['smkt_min'],
			'dashboard_price_max' => $data['smkt_max'],
			'dashboard_price_avg' => $data['smkt_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);*/


		/*Chooks-to-Go*/

		$get_ctg_orc = $this->admin->get_query("SELECT p.size_name, AVG(asp_tbl.jan_asp) as orc_jan, AVG(asp_tbl.feb_asp) as orc_feb, AVG(asp_tbl.mar_asp) as orc_mar, AVG(asp_tbl.apr_asp) as orc_apr, AVG(asp_tbl.may_asp) as orc_may, AVG(asp_tbl.jun_asp) as orc_jun, AVG(asp_tbl.jul_asp) as orc_jul, AVG(asp_tbl.aug_asp) as orc_aug, AVG(asp_tbl.sep_asp) as orc_sep, AVG(asp_tbl.oct_asp) as orc_oct, AVG(asp_tbl.nov_asp) as orc_nov, AVG(asp_tbl.dec_asp) as orc_dec FROM material_tbl o, size_tbl p,

			(SELECT m.material_id, m.size_id,

			(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-01-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as jan_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-02-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as feb_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-03-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as mar_asp,
    
   			(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-04-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as apr_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-05-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as may_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-06-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as jun_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-07-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as jul_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-08-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as aug_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-09-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as sep_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-10-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as oct_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-11-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as nov_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'CHOOKS-TO-GO' AND c.sales_det_date = '" . $year . "-12-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as dec_asp
    
			FROM material_size_tbl m, brand_tbl n WHERE m.brand_id = n.brand_id AND m.material_size_status = 1 AND n.brand_name = 'CHOOKS-TO-GO' AND m.is_orc = 1) as asp_tbl

			WHERE o.material_id = asp_tbl.material_id AND p.size_id = asp_tbl.size_id GROUP BY p.size_id"
		);

		$data['ctg_reg1'] = $data['ctg_reg2'] = $data['ctg_reg3'] = $data['ctg_reg4'] = $data['ctg_reg5'] = $data['ctg_reg6'] = $data['ctg_reg7'] = $data['ctg_reg8'] = $data['ctg_reg9'] = $data['ctg_reg10'] = $data['ctg_reg11'] = $data['ctg_reg12'] = $data['ctg_reg_total'] = $data['ctg_reg_count'] = $data['ctg_reg_avg'] = $data['ctg_reg_min'] = $data['ctg_reg_max'] = 0;

		$data['ctg_jbo1'] = $data['ctg_jbo2'] = $data['ctg_jbo3'] = $data['ctg_jbo4'] = $data['ctg_jbo5'] = $data['ctg_jbo6'] = $data['ctg_jbo7'] = $data['ctg_jbo8'] = $data['ctg_jbo9'] = $data['ctg_jbo10'] = $data['ctg_jbo11'] = $data['ctg_jbo12'] = $data['ctg_jbo_total'] = $data['ctg_jbo_count'] = $data['ctg_jbo_avg'] = $data['ctg_jbo_min'] = $data['ctg_jbo_max'] = 0;

		$data['ctg_ss1'] = $data['ctg_ss2'] = $data['ctg_ss3'] = $data['ctg_ss4'] = $data['ctg_ss5'] = $data['ctg_ss6'] = $data['ctg_ss7'] = $data['ctg_ss8'] = $data['ctg_ss9'] = $data['ctg_ss10'] = $data['ctg_ss11'] = $data['ctg_ss12'] = $data['ctg_ss_total'] = $data['ctg_ss_count'] = $data['ctg_ss_avg'] = $data['ctg_ss_min'] = $data['ctg_ss_max'] = 0;

		$data['ctg_bt1'] = $data['ctg_bt2'] = $data['ctg_bt3'] = $data['ctg_bt4'] = $data['ctg_bt5'] = $data['ctg_bt6'] = $data['ctg_bt7'] = $data['ctg_bt8'] = $data['ctg_bt9'] = $data['ctg_bt10'] = $data['ctg_bt11'] = $data['ctg_bt12'] = $data['ctg_bt_total'] = $data['ctg_bt_count'] = $data['ctg_bt_avg'] = $data['ctg_bt_min'] = $data['ctg_bt_max'] = 0;

		$data['ctg_half1'] = $data['ctg_half2'] = $data['ctg_half3'] = $data['ctg_half4'] = $data['ctg_half5'] = $data['ctg_half6'] = $data['ctg_half7'] = $data['ctg_half8'] = $data['ctg_half9'] = $data['ctg_half10'] = $data['ctg_half11'] = $data['ctg_half12'] = $data['ctg_half_total'] = $data['ctg_half_count'] = $data['ctg_half_avg'] = $data['ctg_half_min'] = $data['ctg_half_max'] = 0;

		foreach($get_ctg_orc as $row){

			$orc_size = $row->size_name;
			$orc_jan = $row->orc_jan;
			$orc_feb = $row->orc_feb;
			$orc_mar = $row->orc_mar;
			$orc_apr = $row->orc_apr;
			$orc_may = $row->orc_may;
			$orc_jun = $row->orc_jun;
			$orc_jul = $row->orc_jul;
			$orc_aug = $row->orc_aug;
			$orc_sep = $row->orc_sep;
			$orc_oct = $row->orc_oct;
			$orc_nov = $row->orc_nov;
			$orc_dec = $row->orc_dec;
			$orc_min = min($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_max = max($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_avg = ($orc_jan + $orc_feb + $orc_mar + $orc_apr + $orc_may + $orc_jun + $orc_jul + $orc_aug + $orc_sep + $orc_oct + $orc_nov + $orc_dec) / 12;

			if($orc_size == "REGULAR"){
				$data['ctg_reg1'] = $orc_jan;
				$data['ctg_reg2'] = $orc_feb;
				$data['ctg_reg3'] = $orc_mar;
				$data['ctg_reg4'] = $orc_apr;
				$data['ctg_reg5'] = $orc_may;
				$data['ctg_reg6'] = $orc_jun;
				$data['ctg_reg7'] = $orc_jul;
				$data['ctg_reg8'] = $orc_aug;
				$data['ctg_reg9'] = $orc_sep;
				$data['ctg_reg10'] = $orc_oct;
				$data['ctg_reg11'] = $orc_nov;
				$data['ctg_reg12'] = $orc_dec;
				$data['ctg_reg_avg'] = $orc_avg;
				$data['ctg_reg_min'] = $orc_min;
				$data['ctg_reg_max'] = $orc_max;

				$reg_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - REGULAR', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
				foreach($reg_prev_year2 as $row){
					$data['ctg_reg1_year2'] = $row->jan_price;
					$data['ctg_reg2_year2'] = $row->feb_price;
					$data['ctg_reg3_year2'] = $row->mar_price;
					$data['ctg_reg4_year2'] = $row->apr_price;
					$data['ctg_reg5_year2'] = $row->may_price;
					$data['ctg_reg6_year2'] = $row->jun_price;
					$data['ctg_reg7_year2'] = $row->jul_price;
					$data['ctg_reg8_year2'] = $row->aug_price;
					$data['ctg_reg9_year2'] = $row->sep_price;
					$data['ctg_reg10_year2'] = $row->oct_price;
					$data['ctg_reg11_year2'] = $row->nov_price;
					$data['ctg_reg12_year2'] = $row->dec_price;
					$data['ctg_reg_avg_year2'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_reg_min_year2'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_reg_max_year2'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'CTG',
					'dashboard_price_product' => 'ORC - REGULAR',
					'dashboard_price_year' => ($year - 2),
					'dashboard_price_jan' => $data['ctg_reg1_year2'],
					'dashboard_price_feb' => $data['ctg_reg2_year2'],
					'dashboard_price_mar' => $data['ctg_reg3_year2'],
					'dashboard_price_apr' => $data['ctg_reg4_year2'],
					'dashboard_price_may' => $data['ctg_reg5_year2'],
					'dashboard_price_june' => $data['ctg_reg6_year2'],
					'dashboard_price_july' => $data['ctg_reg7_year2'],
					'dashboard_price_aug' => $data['ctg_reg8_year2'],
					'dashboard_price_sep' => $data['ctg_reg9_year2'],
					'dashboard_price_oct' => $data['ctg_reg10_year2'],
					'dashboard_price_nov' => $data['ctg_reg11_year2'],
					'dashboard_price_dec' => $data['ctg_reg12_year2'],
					'dashboard_price_min' => $data['ctg_reg_min_year2'],
					'dashboard_price_max' => $data['ctg_reg_max_year2'],
					'dashboard_price_avg' => $data['ctg_reg1_year2'],
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

				$reg_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - REGULAR', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($reg_prev_year1 as $row){
					$data['ctg_reg1_year1'] = $row->jan_price;
					$data['ctg_reg2_year1'] = $row->feb_price;
					$data['ctg_reg3_year1'] = $row->mar_price;
					$data['ctg_reg4_year1'] = $row->apr_price;
					$data['ctg_reg5_year1'] = $row->may_price;
					$data['ctg_reg6_year1'] = $row->jun_price;
					$data['ctg_reg7_year1'] = $row->jul_price;
					$data['ctg_reg8_year1'] = $row->aug_price;
					$data['ctg_reg9_year1'] = $row->sep_price;
					$data['ctg_reg10_year1'] = $row->oct_price;
					$data['ctg_reg11_year1'] = $row->nov_price;
					$data['ctg_reg12_year1'] = $row->dec_price;
					$data['ctg_reg_avg_year1'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_reg_min_year1'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_reg_max_year1'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'CTG',
					'dashboard_price_product' => 'ORC - REGULAR',
					'dashboard_price_year' => ($year - 1),
					'dashboard_price_jan' => $data['ctg_reg1_year1'],
					'dashboard_price_feb' => $data['ctg_reg2_year1'],
					'dashboard_price_mar' => $data['ctg_reg3_year1'],
					'dashboard_price_apr' => $data['ctg_reg4_year1'],
					'dashboard_price_may' => $data['ctg_reg5_year1'],
					'dashboard_price_june' => $data['ctg_reg6_year1'],
					'dashboard_price_july' => $data['ctg_reg7_year1'],
					'dashboard_price_aug' => $data['ctg_reg8_year1'],
					'dashboard_price_sep' => $data['ctg_reg9_year1'],
					'dashboard_price_oct' => $data['ctg_reg10_year1'],
					'dashboard_price_nov' => $data['ctg_reg11_year1'],
					'dashboard_price_dec' => $data['ctg_reg12_year1'],
					'dashboard_price_min' => $data['ctg_reg_min_year1'],
					'dashboard_price_max' => $data['ctg_reg_max_year1'],
					'dashboard_price_avg' => $data['ctg_reg_avg_year1'],
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'CTG',
					'dashboard_price_product' => 'ORC - REGULAR',
					'dashboard_price_year' => ($year),
					'dashboard_price_jan' => $orc_jan,
					'dashboard_price_feb' => $orc_feb,
					'dashboard_price_mar' => $orc_mar,
					'dashboard_price_apr' => $orc_apr,
					'dashboard_price_may' => $orc_may,
					'dashboard_price_june' => $orc_jun,
					'dashboard_price_july' => $orc_jul,
					'dashboard_price_aug' => $orc_aug,
					'dashboard_price_sep' => $orc_sep,
					'dashboard_price_oct' => $orc_oct,
					'dashboard_price_nov' => $orc_nov,
					'dashboard_price_dec' => $orc_dec,
					'dashboard_price_min' => $orc_min,
					'dashboard_price_max' => $orc_max,
					'dashboard_price_avg' => $orc_avg,
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);



			}elseif($orc_size == "JUMBO"){
				$data['ctg_jbo1'] = $orc_jan;
				$data['ctg_jbo2'] = $orc_feb;
				$data['ctg_jbo3'] = $orc_mar;
				$data['ctg_jbo4'] = $orc_apr;
				$data['ctg_jbo5'] = $orc_may;
				$data['ctg_jbo6'] = $orc_jun;
				$data['ctg_jbo7'] = $orc_jul;
				$data['ctg_jbo8'] = $orc_aug;
				$data['ctg_jbo9'] = $orc_sep;
				$data['ctg_jbo10'] = $orc_oct;
				$data['ctg_jbo11'] = $orc_nov;
				$data['ctg_jbo12'] = $orc_dec;
				$data['ctg_jbo_avg'] = $orc_avg;
				$data['ctg_jbo_min'] = $orc_min;
				$data['ctg_jbo_max'] = $orc_max;

				$jbo_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - JUMBO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($jbo_prev_year2 as $row){
					$data['ctg_jbo1_year2'] = $row->jan_price;
					$data['ctg_jbo2_year2'] = $row->feb_price;
					$data['ctg_jbo3_year2'] = $row->mar_price;
					$data['ctg_jbo4_year2'] = $row->apr_price;
					$data['ctg_jbo5_year2'] = $row->may_price;
					$data['ctg_jbo6_year2'] = $row->jun_price;
					$data['ctg_jbo7_year2'] = $row->jul_price;
					$data['ctg_jbo8_year2'] = $row->aug_price;
					$data['ctg_jbo9_year2'] = $row->sep_price;
					$data['ctg_jbo10_year2'] = $row->oct_price;
					$data['ctg_jbo11_year2'] = $row->nov_price;
					$data['ctg_jbo12_year2'] = $row->dec_price;
					$data['ctg_jbo_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_jbo_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_jbo_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'CTG',
					'dashboard_price_product' => 'ORC - JUMBO',
					'dashboard_price_year' => ($year - 2),
					'dashboard_price_jan' => $data['ctg_jbo1_year2'],
					'dashboard_price_feb' => $data['ctg_jbo2_year2'],
					'dashboard_price_mar' => $data['ctg_jbo3_year2'],
					'dashboard_price_apr' => $data['ctg_jbo4_year2'],
					'dashboard_price_may' => $data['ctg_jbo5_year2'],
					'dashboard_price_june' => $data['ctg_jbo6_year2'],
					'dashboard_price_july' => $data['ctg_jbo7_year2'],
					'dashboard_price_aug' => $data['ctg_jbo8_year2'],
					'dashboard_price_sep' => $data['ctg_jbo9_year2'],
					'dashboard_price_oct' => $data['ctg_jbo10_year2'],
					'dashboard_price_nov' => $data['ctg_jbo11_year2'],
					'dashboard_price_dec' => $data['ctg_jbo12_year2'],
					'dashboard_price_min' => $data['ctg_jbo_year2_min'],
					'dashboard_price_max' => $data['ctg_jbo_year2_max'],
					'dashboard_price_avg' => $data['ctg_jbo_year2_avg'],
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

				$jbo_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - JUMBO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($jbo_prev_year1 as $row){
					$data['ctg_jbo1_year1'] = $row->jan_price;
					$data['ctg_jbo2_year1'] = $row->feb_price;
					$data['ctg_jbo3_year1'] = $row->mar_price;
					$data['ctg_jbo4_year1'] = $row->apr_price;
					$data['ctg_jbo5_year1'] = $row->may_price;
					$data['ctg_jbo6_year1'] = $row->jun_price;
					$data['ctg_jbo7_year1'] = $row->jul_price;
					$data['ctg_jbo8_year1'] = $row->aug_price;
					$data['ctg_jbo9_year1'] = $row->sep_price;
					$data['ctg_jbo10_year1'] = $row->oct_price;
					$data['ctg_jbo11_year1'] = $row->nov_price;
					$data['ctg_jbo12_year1'] = $row->dec_price;
					$data['ctg_jbo_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_jbo_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_jbo_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'CTG',
					'dashboard_price_product' => 'ORC - JUMBO',
					'dashboard_price_year' => ($year - 1),
					'dashboard_price_jan' => $data['ctg_jbo1_year1'],
					'dashboard_price_feb' => $data['ctg_jbo2_year1'],
					'dashboard_price_mar' => $data['ctg_jbo3_year1'],
					'dashboard_price_apr' => $data['ctg_jbo4_year1'],
					'dashboard_price_may' => $data['ctg_jbo5_year1'],
					'dashboard_price_june' => $data['ctg_jbo6_year1'],
					'dashboard_price_july' => $data['ctg_jbo7_year1'],
					'dashboard_price_aug' => $data['ctg_jbo8_year1'],
					'dashboard_price_sep' => $data['ctg_jbo9_year1'],
					'dashboard_price_oct' => $data['ctg_jbo10_year1'],
					'dashboard_price_nov' => $data['ctg_jbo11_year1'],
					'dashboard_price_dec' => $data['ctg_jbo12_year1'],
					'dashboard_price_min' => $data['ctg_jbo_year1_min'],
					'dashboard_price_max' => $data['ctg_jbo_year1_max'],
					'dashboard_price_avg' => $data['ctg_jbo_year1_avg'],
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'CTG',
					'dashboard_price_product' => 'ORC - JUMBO',
					'dashboard_price_year' => ($year),
					'dashboard_price_jan' => $data['ctg_jbo1'],
					'dashboard_price_feb' => $data['ctg_jbo2'],
					'dashboard_price_mar' => $data['ctg_jbo3'],
					'dashboard_price_apr' => $data['ctg_jbo4'],
					'dashboard_price_may' => $data['ctg_jbo5'],
					'dashboard_price_june' => $data['ctg_jbo6'],
					'dashboard_price_july' => $data['ctg_jbo7'],
					'dashboard_price_aug' => $data['ctg_jbo8'],
					'dashboard_price_sep' => $data['ctg_jbo9'],
					'dashboard_price_oct' => $data['ctg_jbo10'],
					'dashboard_price_nov' => $data['ctg_jbo11'],
					'dashboard_price_dec' => $data['ctg_jbo12'],
					'dashboard_price_min' => $data['ctg_jbo_min'],
					'dashboard_price_max' => $data['ctg_jbo_max'],
					'dashboard_price_avg' => $data['ctg_jbo_avg'],
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

			}elseif($orc_size == "SUPERSIZE"){
				$data['ctg_ss1'] = $orc_jan;
				$data['ctg_ss2'] = $orc_feb;
				$data['ctg_ss3'] = $orc_mar;
				$data['ctg_ss4'] = $orc_apr;
				$data['ctg_ss5'] = $orc_may;
				$data['ctg_ss6'] = $orc_jun;
				$data['ctg_ss7'] = $orc_jul;
				$data['ctg_ss8'] = $orc_aug;
				$data['ctg_ss9'] = $orc_sep;
				$data['ctg_ss10'] = $orc_oct;
				$data['ctg_ss11'] = $orc_nov;
				$data['ctg_ss12'] = $orc_dec;
				$data['ctg_ss_avg'] = $orc_avg;
				$data['ctg_ss_min'] = $orc_min;
				$data['ctg_ss_max'] = $orc_max;

				$ss_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - SUPERSIZE', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2, 'bc_id' =>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($ss_prev_year2 as $row){
					$data['ctg_ss1_year2'] = $row->jan_price;
					$data['ctg_ss2_year2'] = $row->feb_price;
					$data['ctg_ss3_year2'] = $row->mar_price;
					$data['ctg_ss4_year2'] = $row->apr_price;
					$data['ctg_ss5_year2'] = $row->may_price;
					$data['ctg_ss6_year2'] = $row->jun_price;
					$data['ctg_ss7_year2'] = $row->jul_price;
					$data['ctg_ss8_year2'] = $row->aug_price;
					$data['ctg_ss9_year2'] = $row->sep_price;
					$data['ctg_ss10_year2'] = $row->oct_price;
					$data['ctg_ss11_year2'] = $row->nov_price;
					$data['ctg_ss12_year2'] = $row->dec_price;
					$data['ctg_ss_avg_year2'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_ss_min_year2'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_ss_max_year2'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'CTG',
					'dashboard_price_product' => 'ORC - SUPERSIZE',
					'dashboard_price_year' => ($year - 2),
					'dashboard_price_jan' => $data['ctg_ss1_year2'],
					'dashboard_price_feb' => $data['ctg_ss2_year2'],
					'dashboard_price_mar' => $data['ctg_ss3_year2'],
					'dashboard_price_apr' => $data['ctg_ss4_year2'],
					'dashboard_price_may' => $data['ctg_ss5_year2'],
					'dashboard_price_june' => $data['ctg_ss6_year2'],
					'dashboard_price_july' => $data['ctg_ss7_year2'],
					'dashboard_price_aug' => $data['ctg_ss8_year2'],
					'dashboard_price_sep' => $data['ctg_ss9_year2'],
					'dashboard_price_oct' => $data['ctg_ss10_year2'],
					'dashboard_price_nov' => $data['ctg_ss11_year2'],
					'dashboard_price_dec' => $data['ctg_ss12_year2'],
					'dashboard_price_min' => $data['ctg_ss_min_year2'],
					'dashboard_price_max' => $data['ctg_ss_max_year2'],
					'dashboard_price_avg' => $data['ctg_ss_avg_year2'],
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

				$ss_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - SUPERSIZE', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1, 'bc_id' =>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($ss_prev_year1 as $row){
					$data['ctg_ss1_year1'] = $row->jan_price;
					$data['ctg_ss2_year1'] = $row->feb_price;
					$data['ctg_ss3_year1'] = $row->mar_price;
					$data['ctg_ss4_year1'] = $row->apr_price;
					$data['ctg_ss5_year1'] = $row->may_price;
					$data['ctg_ss6_year1'] = $row->jun_price;
					$data['ctg_ss7_year1'] = $row->jul_price;
					$data['ctg_ss8_year1'] = $row->aug_price;
					$data['ctg_ss9_year1'] = $row->sep_price;
					$data['ctg_ss10_year1'] = $row->oct_price;
					$data['ctg_ss11_year1'] = $row->nov_price;
					$data['ctg_ss12_year1'] = $row->dec_price;
					$data['ctg_ss_avg_year1'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_ss_min_year1'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_ss_max_year1'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'CTG',
					'dashboard_price_product' => 'ORC - SUPERSIZE',
					'dashboard_price_year' => ($year - 1),
					'dashboard_price_jan' => $data['ctg_ss1_year1'],
					'dashboard_price_feb' => $data['ctg_ss2_year1'],
					'dashboard_price_mar' => $data['ctg_ss3_year1'],
					'dashboard_price_apr' => $data['ctg_ss4_year1'],
					'dashboard_price_may' => $data['ctg_ss5_year1'],
					'dashboard_price_june' => $data['ctg_ss6_year1'],
					'dashboard_price_july' => $data['ctg_ss7_year1'],
					'dashboard_price_aug' => $data['ctg_ss8_year1'],
					'dashboard_price_sep' => $data['ctg_ss9_year1'],
					'dashboard_price_oct' => $data['ctg_ss10_year1'],
					'dashboard_price_nov' => $data['ctg_ss11_year1'],
					'dashboard_price_dec' => $data['ctg_ss12_year1'],
					'dashboard_price_min' => $data['ctg_ss_min_year1'],
					'dashboard_price_max' => $data['ctg_ss_max_year1'],
					'dashboard_price_avg' => $data['ctg_ss_avg_year1'],
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'CTG',
					'dashboard_price_product' => 'ORC - SUPERSIZE',
					'dashboard_price_year' => ($year),
					'dashboard_price_jan' => $data['ctg_ss1'],
					'dashboard_price_feb' => $data['ctg_ss2'],
					'dashboard_price_mar' => $data['ctg_ss3'],
					'dashboard_price_apr' => $data['ctg_ss4'],
					'dashboard_price_may' => $data['ctg_ss5'],
					'dashboard_price_june' => $data['ctg_ss6'],
					'dashboard_price_july' => $data['ctg_ss7'],
					'dashboard_price_aug' => $data['ctg_ss8'],
					'dashboard_price_sep' => $data['ctg_ss9'],
					'dashboard_price_oct' => $data['ctg_ss10'],
					'dashboard_price_nov' => $data['ctg_ss11'],
					'dashboard_price_dec' => $data['ctg_ss12'],
					'dashboard_price_min' => $data['ctg_ss_min'],
					'dashboard_price_max' => $data['ctg_ss_max'],
					'dashboard_price_avg' => $data['ctg_ss_avg'],
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

			}elseif($orc_size == "BIGTIME"){
				$data['ctg_bt1'] = $orc_jan;
				$data['ctg_bt2'] = $orc_feb;
				$data['ctg_bt3'] = $orc_mar;
				$data['ctg_bt4'] = $orc_apr;
				$data['ctg_bt5'] = $orc_may;
				$data['ctg_bt6'] = $orc_jun;
				$data['ctg_bt7'] = $orc_jul;
				$data['ctg_bt8'] = $orc_aug;
				$data['ctg_bt9'] = $orc_sep;
				$data['ctg_bt10'] = $orc_oct;
				$data['ctg_bt11'] = $orc_nov;
				$data['ctg_bt12'] = $orc_dec;
				$data['ctg_bt_avg'] = $orc_avg;
				$data['cctg_bt_min'] = $orc_min;
				$data['ctg_bt_max'] = $orc_max;


				$bt_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - BIGTIME', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2, 'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($bt_prev_year2 as $row){
					$data['ctg_bt1_year2'] = $row->jan_price;
					$data['ctg_bt2_year2'] = $row->feb_price;
					$data['ctg_bt3_year2'] = $row->mar_price;
					$data['ctg_bt4_year2'] = $row->apr_price;
					$data['ctg_bt5_year2'] = $row->may_price;
					$data['ctg_bt6_year2'] = $row->jun_price;
					$data['ctg_bt7_year2'] = $row->jul_price;
					$data['ctg_bt8_year2'] = $row->aug_price;
					$data['ctg_bt9_year2'] = $row->sep_price;
					$data['ctg_bt10_year2'] = $row->oct_price;
					$data['ctg_bt11_year2'] = $row->nov_price;
					$data['ctg_bt12_year2'] = $row->dec_price;
					$data['ctg_bt_avg_year2'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_bt_min_year2'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_bt_max_year2'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'CTG',
					'dashboard_price_product' => 'ORC - BIGTIME',
					'dashboard_price_year' => ($year - 2),
					'dashboard_price_jan' => $data['ctg_bt1_year2'],
					'dashboard_price_feb' => $data['ctg_bt2_year2'],
					'dashboard_price_mar' => $data['ctg_bt3_year2'],
					'dashboard_price_apr' => $data['ctg_bt4_year2'],
					'dashboard_price_may' => $data['ctg_bt5_year2'],
					'dashboard_price_june' => $data['ctg_bt6_year2'],
					'dashboard_price_july' => $data['ctg_bt7_year2'],
					'dashboard_price_aug' => $data['ctg_bt8_year2'],
					'dashboard_price_sep' => $data['ctg_bt9_year2'],
					'dashboard_price_oct' => $data['ctg_bt10_year2'],
					'dashboard_price_nov' => $data['ctg_bt11_year2'],
					'dashboard_price_dec' => $data['ctg_bt12_year2'],
					'dashboard_price_min' => $data['ctg_bt_min_year2'],
					'dashboard_price_max' => $data['ctg_bt_max_year2'],
					'dashboard_price_avg' => $data['ctg_bt_avg_year2'],
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

				$bt_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - BIGTIME', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1, 'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($bt_prev_year1 as $row){
					$data['ctg_bt1_year1'] = $row->jan_price;
					$data['ctg_bt2_year1'] = $row->feb_price;
					$data['ctg_bt3_year1'] = $row->mar_price;
					$data['ctg_bt4_year1'] = $row->apr_price;
					$data['ctg_bt5_year1'] = $row->may_price;
					$data['ctg_bt6_year1'] = $row->jun_price;
					$data['ctg_bt7_year1'] = $row->jul_price;
					$data['ctg_bt8_year1'] = $row->aug_price;
					$data['ctg_bt9_year1'] = $row->sep_price;
					$data['ctg_bt10_year1'] = $row->oct_price;
					$data['ctg_bt11_year1'] = $row->nov_price;
					$data['ctg_bt12_year1'] = $row->dec_price;
					$data['ctg_bt_avg_year1'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_bt_min_year1'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_bt_max_year1'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'CTG',
					'dashboard_price_product' => 'ORC - BIGTIME',
					'dashboard_price_year' => ($year - 1),
					'dashboard_price_jan' => $data['ctg_bt1_year1'],
					'dashboard_price_feb' => $data['ctg_bt2_year1'],
					'dashboard_price_mar' => $data['ctg_bt3_year1'],
					'dashboard_price_apr' => $data['ctg_bt4_year1'],
					'dashboard_price_may' => $data['ctg_bt5_year1'],
					'dashboard_price_june' => $data['ctg_bt6_year1'],
					'dashboard_price_july' => $data['ctg_bt7_year1'],
					'dashboard_price_aug' => $data['ctg_bt8_year1'],
					'dashboard_price_sep' => $data['ctg_bt9_year1'],
					'dashboard_price_oct' => $data['ctg_bt10_year1'],
					'dashboard_price_nov' => $data['ctg_bt11_year1'],
					'dashboard_price_dec' => $data['ctg_bt12_year1'],
					'dashboard_price_min' => $data['ctg_bt_min_year1'],
					'dashboard_price_max' => $data['ctg_bt_max_year1'],
					'dashboard_price_avg' => $data['ctg_bt_avg_year1'],
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'CTG',
					'dashboard_price_product' => 'ORC - BIGTIME',
					'dashboard_price_year' => ($year),
					'dashboard_price_jan' => $data['ctg_bt1'],
					'dashboard_price_feb' => $data['ctg_bt2'],
					'dashboard_price_mar' => $data['ctg_bt3'],
					'dashboard_price_apr' => $data['ctg_bt4'],
					'dashboard_price_may' => $data['ctg_bt5'],
					'dashboard_price_june' => $data['ctg_bt6'],
					'dashboard_price_july' => $data['ctg_bt7'],
					'dashboard_price_aug' => $data['ctg_bt8'],
					'dashboard_price_sep' => $data['ctg_bt9'],
					'dashboard_price_oct' => $data['ctg_bt10'],
					'dashboard_price_nov' => $data['ctg_bt11'],
					'dashboard_price_dec' => $data['ctg_bt12'],
					'dashboard_price_min' => $data['ctg_bt_min'],
					'dashboard_price_max' => $data['ctg_bt_max'],
					'dashboard_price_avg' => $data['ctg_bt_avg'],
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

			}elseif($orc_size == "HALF"){
				$data['ctg_half1'] = $orc_jan;
				$data['ctg_half2'] = $orc_feb;
				$data['ctg_half3'] = $orc_mar;
				$data['ctg_half4'] = $orc_apr;
				$data['ctg_half5'] = $orc_may;
				$data['ctg_half6'] = $orc_jun;
				$data['ctg_half7'] = $orc_jul;
				$data['ctg_half8'] = $orc_aug;
				$data['ctg_half9'] = $orc_sep;
				$data['ctg_half10'] = $orc_oct;
				$data['ctg_half11'] = $orc_nov;
				$data['ctg_half12'] = $orc_dec;
				$data['ctg_half_avg'] = $orc_avg;
				$data['ctg_half_min'] = $orc_min;
				$data['ctg_half_max'] = $orc_max;

				$half_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - HALF', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($half_prev_year2 as $row){
					$data['ctg_half1_year2'] = $row->jan_price;
					$data['ctg_half2_year2'] = $row->feb_price;
					$data['ctg_half3_year2'] = $row->mar_price;
					$data['ctg_half4_year2'] = $row->apr_price;
					$data['ctg_half5_year2'] = $row->may_price;
					$data['ctg_half6_year2'] = $row->jun_price;
					$data['ctg_half7_year2'] = $row->jul_price;
					$data['ctg_half8_year2'] = $row->aug_price;
					$data['ctg_half9_year2'] = $row->sep_price;
					$data['ctg_half10_year2'] = $row->oct_price;
					$data['ctg_half11_year2'] = $row->nov_price;
					$data['ctg_half12_year2'] = $row->dec_price;
					$data['ctg_half_avg_year2'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_half_min_year2'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_half_max_year2'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'CTG',
					'dashboard_price_product' => 'ORC - HALF',
					'dashboard_price_year' => ($year - 2),
					'dashboard_price_jan' => $data['ctg_half1_year2'],
					'dashboard_price_feb' => $data['ctg_half2_year2'],
					'dashboard_price_mar' => $data['ctg_half3_year2'],
					'dashboard_price_apr' => $data['ctg_half4_year2'],
					'dashboard_price_may' => $data['ctg_half5_year2'],
					'dashboard_price_june' => $data['ctg_half6_year2'],
					'dashboard_price_july' => $data['ctg_half7_year2'],
					'dashboard_price_aug' => $data['ctg_half8_year2'],
					'dashboard_price_sep' => $data['ctg_half9_year2'],
					'dashboard_price_oct' => $data['ctg_half10_year2'],
					'dashboard_price_nov' => $data['ctg_half11_year2'],
					'dashboard_price_dec' => $data['ctg_half12_year2'],
					'dashboard_price_min' => $data['ctg_half_min_year2'],
					'dashboard_price_max' => $data['ctg_half_max_year2'],
					'dashboard_price_avg' => $data['ctg_half_avg_year2'],
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

				$half_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - HALF', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1, 'bc_id' => $bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($half_prev_year1 as $row){
					$data['ctg_half1_year1'] = $row->jan_price;
					$data['ctg_half2_year1'] = $row->feb_price;
					$data['ctg_half3_year1'] = $row->mar_price;
					$data['ctg_half4_year1'] = $row->apr_price;
					$data['ctg_half5_year1'] = $row->may_price;
					$data['ctg_half6_year1'] = $row->jun_price;
					$data['ctg_half7_year1'] = $row->jul_price;
					$data['ctg_half8_year1'] = $row->aug_price;
					$data['ctg_half9_year1'] = $row->sep_price;
					$data['ctg_half10_year1'] = $row->oct_price;
					$data['ctg_half11_year1'] = $row->nov_price;
					$data['ctg_half12_year1'] = $row->dec_price;
					$data['ctg_half_avg_year1'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_half_min_year1'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ctg_half_max_year1'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'CTG',
					'dashboard_price_product' => 'ORC - HALF',
					'dashboard_price_year' => ($year - 1),
					'dashboard_price_jan' => $data['ctg_half1_year1'],
					'dashboard_price_feb' => $data['ctg_half2_year1'],
					'dashboard_price_mar' => $data['ctg_half3_year1'],
					'dashboard_price_apr' => $data['ctg_half4_year1'],
					'dashboard_price_may' => $data['ctg_half5_year1'],
					'dashboard_price_june' => $data['ctg_half6_year1'],
					'dashboard_price_july' => $data['ctg_half7_year1'],
					'dashboard_price_aug' => $data['ctg_half8_year1'],
					'dashboard_price_sep' => $data['ctg_half9_year1'],
					'dashboard_price_oct' => $data['ctg_half10_year1'],
					'dashboard_price_nov' => $data['ctg_half11_year1'],
					'dashboard_price_dec' => $data['ctg_half12_year1'],
					'dashboard_price_min' => $data['ctg_half_min_year1'],
					'dashboard_price_max' => $data['ctg_half_max_year1'],
					'dashboard_price_avg' => $data['ctg_half_avg_year1'],
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'CTG',
					'dashboard_price_product' => 'ORC - HALF',
					'dashboard_price_year' => ($year),
					'dashboard_price_jan' => $data['ctg_half1'],
					'dashboard_price_feb' => $data['ctg_half2'],
					'dashboard_price_mar' => $data['ctg_half3'],
					'dashboard_price_apr' => $data['ctg_half4'],
					'dashboard_price_may' => $data['ctg_half5'],
					'dashboard_price_june' => $data['ctg_half6'],
					'dashboard_price_july' => $data['ctg_half7'],
					'dashboard_price_aug' => $data['ctg_half8'],
					'dashboard_price_sep' => $data['ctg_half9'],
					'dashboard_price_oct' => $data['ctg_half10'],
					'dashboard_price_nov' => $data['ctg_half11'],
					'dashboard_price_dec' => $data['ctg_half12'],
					'dashboard_price_min' => $data['ctg_half_min'],
					'dashboard_price_max' => $data['ctg_half_max'],
					'dashboard_price_avg' => $data['ctg_half_avg'],
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);
			}
		}

		
		/*CTG Liempo*/

		$join_liempo = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code IN (10600002, 10600026, 10600003, 10600027)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "LIEMPO"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_liempo = $this->admin->get_join('sales_tbl a', $join_liempo, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['liempo1'] = 0;
		$data['liempo2'] = 0;
		$data['liempo3'] = 0;
		$data['liempo4'] = 0;
		$data['liempo5'] = 0;
		$data['liempo6'] = 0;
		$data['liempo7'] = 0;
		$data['liempo8'] = 0;
		$data['liempo9'] = 0;
		$data['liempo10'] = 0;
		$data['liempo11'] = 0;
		$data['liempo12'] = 0;
		$data['liempo_total'] = 0;
		$data['liempo_count'] = 0;
		$data['liempo_avg'] = 0;
		$data['liempo_min'] = 0;
		$data['liempo_max'] = 0;

		foreach($get_liempo as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['liempo' . $month] = $asp;
			$data['liempo_total'] += $asp;

			if($asp < $data['liempo_min'] || $data['liempo_count'] == 0){
				$data['liempo_min'] = $asp;
			}

			if($asp > $data['liempo_max'] || $data['liempo_count'] == 0){
				$data['liempo_max'] = $asp;
			}

			$data['liempo_count']++;
		}

		$data['liempo_avg'] = $data['liempo_total'] != 0 ? $data['liempo_total'] / $data['liempo_count'] : 0;

		$ctg_liempo_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=> $bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_liempo_prev_year2_jan'] = 0;
		$data['ctg_liempo_prev_year2_feb'] = 0;
		$data['ctg_liempo_prev_year2_mar'] = 0;
		$data['ctg_liempo_prev_year2_apr'] = 0;
		$data['ctg_liempo_prev_year2_may'] = 0;
		$data['ctg_liempo_prev_year2_jun'] = 0;
		$data['ctg_liempo_prev_year2_jul'] = 0;
		$data['ctg_liempo_prev_year2_aug'] = 0;
		$data['ctg_liempo_prev_year2_sep'] = 0;
		$data['ctg_liempo_prev_year2_oct'] = 0;
		$data['ctg_liempo_prev_year2_nov'] = 0;
		$data['ctg_liempo_prev_year2_dec'] = 0;
		$data['ctg_liempo_prev_year2_avg'] = 0;
		$data['ctg_liempo_prev_year2_min'] = 0;
		$data['ctg_liempo_prev_year2_max'] = 0;

		foreach($ctg_liempo_prev_year2 as $row){
			$data['ctg_liempo_prev_year2_jan'] = $row->jan_price;
			$data['ctg_liempo_prev_year2_feb'] = $row->feb_price;
			$data['ctg_liempo_prev_year2_mar'] = $row->mar_price;
			$data['ctg_liempo_prev_year2_apr'] = $row->apr_price;
			$data['ctg_liempo_prev_year2_may'] = $row->may_price;
			$data['ctg_liempo_prev_year2_jun'] = $row->jun_price;
			$data['ctg_liempo_prev_year2_jul'] = $row->jul_price;
			$data['ctg_liempo_prev_year2_aug'] = $row->aug_price;
			$data['ctg_liempo_prev_year2_sep'] = $row->sep_price;
			$data['ctg_liempo_prev_year2_oct'] = $row->oct_price;
			$data['ctg_liempo_prev_year2_nov'] = $row->nov_price;
			$data['ctg_liempo_prev_year2_dec'] = $row->dec_price;
			$data['ctg_liempo_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_liempo_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_liempo_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'LIEMPO',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ctg_liempo_prev_year2_jan'],
			'dashboard_price_feb' => $data['ctg_liempo_prev_year2_feb'],
			'dashboard_price_mar' => $data['ctg_liempo_prev_year2_mar'],
			'dashboard_price_apr' => $data['ctg_liempo_prev_year2_apr'],
			'dashboard_price_may' => $data['ctg_liempo_prev_year2_may'],
			'dashboard_price_june' => $data['ctg_liempo_prev_year2_jun'],
			'dashboard_price_july' => $data['ctg_liempo_prev_year2_jul'],
			'dashboard_price_aug' => $data['ctg_liempo_prev_year2_aug'],
			'dashboard_price_sep' => $data['ctg_liempo_prev_year2_sep'],
			'dashboard_price_oct' => $data['ctg_liempo_prev_year2_oct'],
			'dashboard_price_nov' => $data['ctg_liempo_prev_year2_nov'],
			'dashboard_price_dec' => $data['ctg_liempo_prev_year2_dec'],
			'dashboard_price_min' => $data['ctg_liempo_prev_year2_min'],
			'dashboard_price_max' => $data['ctg_liempo_prev_year2_max'],
			'dashboard_price_avg' => $data['ctg_liempo_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$ctg_liempo_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=> $bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_liempo_prev_year1_jan'] = 0;
		$data['ctg_liempo_prev_year1_feb'] = 0;
		$data['ctg_liempo_prev_year1_mar'] = 0;
		$data['ctg_liempo_prev_year1_apr'] = 0;
		$data['ctg_liempo_prev_year1_may'] = 0;
		$data['ctg_liempo_prev_year1_jun'] = 0;
		$data['ctg_liempo_prev_year1_jul'] = 0;
		$data['ctg_liempo_prev_year1_aug'] = 0;
		$data['ctg_liempo_prev_year1_sep'] = 0;
		$data['ctg_liempo_prev_year1_oct'] = 0;
		$data['ctg_liempo_prev_year1_nov'] = 0;
		$data['ctg_liempo_prev_year1_dec'] = 0;
		$data['ctg_liempo_prev_year1_avg'] = 0;
		$data['ctg_liempo_prev_year1_min'] = 0;
		$data['ctg_liempo_prev_year1_max'] = 0;

		foreach($ctg_liempo_prev_year1 as $row){
			$data['ctg_liempo_prev_year1_jan'] = $row->jan_price;
			$data['ctg_liempo_prev_year1_feb'] = $row->feb_price;
			$data['ctg_liempo_prev_year1_mar'] = $row->mar_price;
			$data['ctg_liempo_prev_year1_apr'] = $row->apr_price;
			$data['ctg_liempo_prev_year1_may'] = $row->may_price;
			$data['ctg_liempo_prev_year1_jun'] = $row->jun_price;
			$data['ctg_liempo_prev_year1_jul'] = $row->jul_price;
			$data['ctg_liempo_prev_year1_aug'] = $row->aug_price;
			$data['ctg_liempo_prev_year1_sep'] = $row->sep_price;
			$data['ctg_liempo_prev_year1_oct'] = $row->oct_price;
			$data['ctg_liempo_prev_year1_nov'] = $row->nov_price;
			$data['ctg_liempo_prev_year1_dec'] = $row->dec_price;
			$data['ctg_liempo_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_liempo_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_liempo_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'LIEMPO',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ctg_liempo_prev_year1_jan'],
			'dashboard_price_feb' => $data['ctg_liempo_prev_year1_feb'],
			'dashboard_price_mar' => $data['ctg_liempo_prev_year1_mar'],
			'dashboard_price_apr' => $data['ctg_liempo_prev_year1_apr'],
			'dashboard_price_may' => $data['ctg_liempo_prev_year1_may'],
			'dashboard_price_june' => $data['ctg_liempo_prev_year1_jun'],
			'dashboard_price_july' => $data['ctg_liempo_prev_year1_jul'],
			'dashboard_price_aug' => $data['ctg_liempo_prev_year1_aug'],
			'dashboard_price_sep' => $data['ctg_liempo_prev_year1_sep'],
			'dashboard_price_oct' => $data['ctg_liempo_prev_year1_oct'],
			'dashboard_price_nov' => $data['ctg_liempo_prev_year1_nov'],
			'dashboard_price_dec' => $data['ctg_liempo_prev_year1_dec'],
			'dashboard_price_min' => $data['ctg_liempo_prev_year1_min'],
			'dashboard_price_max' => $data['ctg_liempo_prev_year1_max'],
			'dashboard_price_avg' => $data['ctg_liempo_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'LIEMPO',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['liempo1'],
			'dashboard_price_feb' => $data['liempo2'],
			'dashboard_price_mar' => $data['liempo3'],
			'dashboard_price_apr' => $data['liempo4'],
			'dashboard_price_may' => $data['liempo5'],
			'dashboard_price_june' => $data['liempo6'],
			'dashboard_price_july' => $data['liempo7'],
			'dashboard_price_aug' => $data['liempo8'],
			'dashboard_price_sep' => $data['liempo9'],
			'dashboard_price_oct' => $data['liempo10'],
			'dashboard_price_nov' => $data['liempo11'],
			'dashboard_price_dec' => $data['liempo12'],
			'dashboard_price_min' => $data['liempo_min'],
			'dashboard_price_max' => $data['liempo_max'],
			'dashboard_price_avg' => $data['liempo_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*CTG Dressed Chicken*/

		$join_ctg_dressed = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id =' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_dressed = $this->admin->get_join('sales_tbl a', $join_ctg_dressed, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_dressed1'] = 0;
		$data['ctg_dressed2'] = 0;
		$data['ctg_dressed3'] = 0;
		$data['ctg_dressed4'] = 0;
		$data['ctg_dressed5'] = 0;
		$data['ctg_dressed6'] = 0;
		$data['ctg_dressed7'] = 0;
		$data['ctg_dressed8'] = 0;
		$data['ctg_dressed9'] = 0;
		$data['ctg_dressed10'] = 0;
		$data['ctg_dressed11'] = 0;
		$data['ctg_dressed12'] = 0;
		$data['ctg_dressed_total'] = 0;
		$data['ctg_dressed_count'] = 0;
		$data['ctg_dressed_avg'] = 0;
		$data['ctg_dressed_min'] = 0;
		$data['ctg_dressed_max'] = 0;

		foreach($get_ctg_dressed as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_dressed' . $month] = $asp;
			$data['ctg_dressed_total'] += $asp;

			if($asp < $data['ctg_dressed_min'] || $data['ctg_dressed_count'] == 0){
				$data['ctg_dressed_min'] = $asp;
			}

			if($asp > $data['ctg_dressed_max'] || $data['ctg_dressed_count'] == 0){
				$data['ctg_dressed_max'] = $asp;
			}

			$data['ctg_dressed_count']++;
		}

		$data['ctg_dressed_avg'] = $data['ctg_dressed_total'] != 0 ? $data['ctg_dressed_total'] / $data['ctg_dressed_count'] : 0;

		$ctg_dressed_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2, 'bc_id' => $bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_dressed_prev_year2_jan'] = 0;
		$data['ctg_dressed_prev_year2_feb'] = 0;
		$data['ctg_dressed_prev_year2_mar'] = 0;
		$data['ctg_dressed_prev_year2_apr'] = 0;
		$data['ctg_dressed_prev_year2_may'] = 0;
		$data['ctg_dressed_prev_year2_jun'] = 0;
		$data['ctg_dressed_prev_year2_jul'] = 0;
		$data['ctg_dressed_prev_year2_aug'] = 0;
		$data['ctg_dressed_prev_year2_sep'] = 0;
		$data['ctg_dressed_prev_year2_oct'] = 0;
		$data['ctg_dressed_prev_year2_nov'] = 0;
		$data['ctg_dressed_prev_year2_dec'] = 0;
		$data['ctg_dressed_prev_year2_avg'] = 0;
		$data['ctg_dressed_prev_year2_min'] = 0;
		$data['ctg_dressed_prev_year2_max'] = 0;

		foreach($ctg_dressed_prev_year2 as $row){
			$data['ctg_dressed_prev_year2_jan'] = $row->jan_price;
			$data['ctg_dressed_prev_year2_feb'] = $row->feb_price;
			$data['ctg_dressed_prev_year2_mar'] = $row->mar_price;
			$data['ctg_dressed_prev_year2_apr'] = $row->apr_price;
			$data['ctg_dressed_prev_year2_may'] = $row->may_price;
			$data['ctg_dressed_prev_year2_jun'] = $row->jun_price;
			$data['ctg_dressed_prev_year2_jul'] = $row->jul_price;
			$data['ctg_dressed_prev_year2_aug'] = $row->aug_price;
			$data['ctg_dressed_prev_year2_sep'] = $row->sep_price;
			$data['ctg_dressed_prev_year2_oct'] = $row->oct_price;
			$data['ctg_dressed_prev_year2_nov'] = $row->nov_price;
			$data['ctg_dressed_prev_year2_dec'] = $row->dec_price;
			$data['ctg_dressed_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_dressed_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_dressed_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'DRESSED',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ctg_dressed_prev_year2_jan'],
			'dashboard_price_feb' => $data['ctg_dressed_prev_year2_feb'],
			'dashboard_price_mar' => $data['ctg_dressed_prev_year2_mar'],
			'dashboard_price_apr' => $data['ctg_dressed_prev_year2_apr'],
			'dashboard_price_may' => $data['ctg_dressed_prev_year2_may'],
			'dashboard_price_june' => $data['ctg_dressed_prev_year2_jun'],
			'dashboard_price_july' => $data['ctg_dressed_prev_year2_jul'],
			'dashboard_price_aug' => $data['ctg_dressed_prev_year2_aug'],
			'dashboard_price_sep' => $data['ctg_dressed_prev_year2_sep'],
			'dashboard_price_oct' => $data['ctg_dressed_prev_year2_oct'],
			'dashboard_price_nov' => $data['ctg_dressed_prev_year2_nov'],
			'dashboard_price_dec' => $data['ctg_dressed_prev_year2_dec'],
			'dashboard_price_min' => $data['ctg_dressed_prev_year2_min'],
			'dashboard_price_max' => $data['ctg_dressed_prev_year2_max'],
			'dashboard_price_avg' => $data['ctg_dressed_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$ctg_dressed_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1, 'bc_id' => $bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_dressed_prev_year1_jan'] = 0;
		$data['ctg_dressed_prev_year1_feb'] = 0;
		$data['ctg_dressed_prev_year1_mar'] = 0;
		$data['ctg_dressed_prev_year1_apr'] = 0;
		$data['ctg_dressed_prev_year1_may'] = 0;
		$data['ctg_dressed_prev_year1_jun'] = 0;
		$data['ctg_dressed_prev_year1_jul'] = 0;
		$data['ctg_dressed_prev_year1_aug'] = 0;
		$data['ctg_dressed_prev_year1_sep'] = 0;
		$data['ctg_dressed_prev_year1_oct'] = 0;
		$data['ctg_dressed_prev_year1_nov'] = 0;
		$data['ctg_dressed_prev_year1_dec'] = 0;
		$data['ctg_dressed_prev_year1_avg'] = 0;
		$data['ctg_dressed_prev_year1_min'] = 0;
		$data['ctg_dressed_prev_year1_max'] = 0;

		foreach($ctg_dressed_prev_year1 as $row){
			$data['ctg_dressed_prev_year1_jan'] = $row->jan_price;
			$data['ctg_dressed_prev_year1_feb'] = $row->feb_price;
			$data['ctg_dressed_prev_year1_mar'] = $row->mar_price;
			$data['ctg_dressed_prev_year1_apr'] = $row->apr_price;
			$data['ctg_dressed_prev_year1_may'] = $row->may_price;
			$data['ctg_dressed_prev_year1_jun'] = $row->jun_price;
			$data['ctg_dressed_prev_year1_jul'] = $row->jul_price;
			$data['ctg_dressed_prev_year1_aug'] = $row->aug_price;
			$data['ctg_dressed_prev_year1_sep'] = $row->sep_price;
			$data['ctg_dressed_prev_year1_oct'] = $row->oct_price;
			$data['ctg_dressed_prev_year1_nov'] = $row->nov_price;
			$data['ctg_dressed_prev_year1_dec'] = $row->dec_price;
			$data['ctg_dressed_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_dressed_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_dressed_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'DRESSED',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ctg_dressed_prev_year1_jan'],
			'dashboard_price_feb' => $data['ctg_dressed_prev_year1_feb'],
			'dashboard_price_mar' => $data['ctg_dressed_prev_year1_mar'],
			'dashboard_price_apr' => $data['ctg_dressed_prev_year1_apr'],
			'dashboard_price_may' => $data['ctg_dressed_prev_year1_may'],
			'dashboard_price_june' => $data['ctg_dressed_prev_year1_jun'],
			'dashboard_price_july' => $data['ctg_dressed_prev_year1_jul'],
			'dashboard_price_aug' => $data['ctg_dressed_prev_year1_aug'],
			'dashboard_price_sep' => $data['ctg_dressed_prev_year1_sep'],
			'dashboard_price_oct' => $data['ctg_dressed_prev_year1_oct'],
			'dashboard_price_nov' => $data['ctg_dressed_prev_year1_nov'],
			'dashboard_price_dec' => $data['ctg_dressed_prev_year1_dec'],
			'dashboard_price_min' => $data['ctg_dressed_prev_year1_min'],
			'dashboard_price_max' => $data['ctg_dressed_prev_year1_max'],
			'dashboard_price_avg' => $data['ctg_dressed_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'DRESSED',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ctg_dressed1'],
			'dashboard_price_feb' => $data['ctg_dressed2'],
			'dashboard_price_mar' => $data['ctg_dressed3'],
			'dashboard_price_apr' => $data['ctg_dressed4'],
			'dashboard_price_may' => $data['ctg_dressed5'],
			'dashboard_price_june' => $data['ctg_dressed6'],
			'dashboard_price_july' => $data['ctg_dressed7'],
			'dashboard_price_aug' => $data['ctg_dressed8'],
			'dashboard_price_sep' => $data['ctg_dressed9'],
			'dashboard_price_oct' => $data['ctg_dressed10'],
			'dashboard_price_nov' => $data['ctg_dressed11'],
			'dashboard_price_dec' => $data['ctg_dressed12'],
			'dashboard_price_min' => $data['ctg_dressed_min'],
			'dashboard_price_max' => $data['ctg_dressed_max'],
			'dashboard_price_avg' => $data['ctg_dressed_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		/*CTG CHOOKSIES MARINADO*/

		$join_ctg_chooksies = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 10200095 OR d.material_code = 10200096 OR d.material_code = 10200097)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_chooksies = $this->admin->get_join('sales_tbl a', $join_ctg_chooksies, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_chooksies1'] = 0;
		$data['ctg_chooksies2'] = 0;
		$data['ctg_chooksies3'] = 0;
		$data['ctg_chooksies4'] = 0;
		$data['ctg_chooksies5'] = 0;
		$data['ctg_chooksies6'] = 0;
		$data['ctg_chooksies7'] = 0;
		$data['ctg_chooksies8'] = 0;
		$data['ctg_chooksies9'] = 0;
		$data['ctg_chooksies10'] = 0;
		$data['ctg_chooksies11'] = 0;
		$data['ctg_chooksies12'] = 0;
		$data['ctg_chooksies_total'] = 0;
		$data['ctg_chooksies_count'] = 0;
		$data['ctg_chooksies_avg'] = 0;
		$data['ctg_chooksies_min'] = 0;
		$data['ctg_chooksies_max'] = 0;

		foreach($get_ctg_chooksies as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_chooksies' . $month] = $asp;
			$data['ctg_chooksies_total'] += $asp;

			if($asp < $data['ctg_chooksies_min'] || $data['ctg_chooksies_count'] == 0){
				$data['ctg_chooksies_min'] = $asp;
			}

			if($asp > $data['ctg_chooksies_max'] || $data['ctg_chooksies_count'] == 0){
				$data['ctg_chooksies_max'] = $asp;
			}

			$data['ctg_chooksies_count']++;
		}

		$data['ctg_chooksies_avg'] = $data['ctg_chooksies_total'] != 0 ? $data['ctg_chooksies_total'] / $data['ctg_chooksies_count'] : 0;

		$ctg_chooksies_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_chooksies_prev_year2_jan'] = 0;
		$data['ctg_chooksies_prev_year2_feb'] = 0;
		$data['ctg_chooksies_prev_year2_mar'] = 0;
		$data['ctg_chooksies_prev_year2_apr'] = 0;
		$data['ctg_chooksies_prev_year2_may'] = 0;
		$data['ctg_chooksies_prev_year2_jun'] = 0;
		$data['ctg_chooksies_prev_year2_jul'] = 0;
		$data['ctg_chooksies_prev_year2_aug'] = 0;
		$data['ctg_chooksies_prev_year2_sep'] = 0;
		$data['ctg_chooksies_prev_year2_oct'] = 0;
		$data['ctg_chooksies_prev_year2_nov'] = 0;
		$data['ctg_chooksies_prev_year2_dec'] = 0;
		$data['ctg_chooksies_prev_year2_avg'] = 0;
		$data['ctg_chooksies_prev_year2_min'] = 0;
		$data['ctg_chooksies_prev_year2_max'] = 0;

		foreach($ctg_chooksies_prev_year2 as $row){
			$data['ctg_chooksies_prev_year2_jan'] = $row->jan_price;
			$data['ctg_chooksies_prev_year2_feb'] = $row->feb_price;
			$data['ctg_chooksies_prev_year2_mar'] = $row->mar_price;
			$data['ctg_chooksies_prev_year2_apr'] = $row->apr_price;
			$data['ctg_chooksies_prev_year2_may'] = $row->may_price;
			$data['ctg_chooksies_prev_year2_jun'] = $row->jun_price;
			$data['ctg_chooksies_prev_year2_jul'] = $row->jul_price;
			$data['ctg_chooksies_prev_year2_aug'] = $row->aug_price;
			$data['ctg_chooksies_prev_year2_sep'] = $row->sep_price;
			$data['ctg_chooksies_prev_year2_oct'] = $row->oct_price;
			$data['ctg_chooksies_prev_year2_nov'] = $row->nov_price;
			$data['ctg_chooksies_prev_year2_dec'] = $row->dec_price;
			$data['ctg_chooksies_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_chooksies_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_chooksies_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'CHOOKSIES MARINADO',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ctg_chooksies_prev_year2_jan'],
			'dashboard_price_feb' => $data['ctg_chooksies_prev_year2_feb'],
			'dashboard_price_mar' => $data['ctg_chooksies_prev_year2_mar'],
			'dashboard_price_apr' => $data['ctg_chooksies_prev_year2_apr'],
			'dashboard_price_may' => $data['ctg_chooksies_prev_year2_may'],
			'dashboard_price_june' => $data['ctg_chooksies_prev_year2_jun'],
			'dashboard_price_july' => $data['ctg_chooksies_prev_year2_jul'],
			'dashboard_price_aug' => $data['ctg_chooksies_prev_year2_aug'],
			'dashboard_price_sep' => $data['ctg_chooksies_prev_year2_sep'],
			'dashboard_price_oct' => $data['ctg_chooksies_prev_year2_oct'],
			'dashboard_price_nov' => $data['ctg_chooksies_prev_year2_nov'],
			'dashboard_price_dec' => $data['ctg_chooksies_prev_year2_dec'],
			'dashboard_price_min' => $data['ctg_chooksies_prev_year2_min'],
			'dashboard_price_max' => $data['ctg_chooksies_prev_year2_max'],
			'dashboard_price_avg' => $data['ctg_chooksies_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$ctg_chooksies_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_chooksies_prev_year1_jan'] = 0;
		$data['ctg_chooksies_prev_year1_feb'] = 0;
		$data['ctg_chooksies_prev_year1_mar'] = 0;
		$data['ctg_chooksies_prev_year1_apr'] = 0;
		$data['ctg_chooksies_prev_year1_may'] = 0;
		$data['ctg_chooksies_prev_year1_jun'] = 0;
		$data['ctg_chooksies_prev_year1_jul'] = 0;
		$data['ctg_chooksies_prev_year1_aug'] = 0;
		$data['ctg_chooksies_prev_year1_sep'] = 0;
		$data['ctg_chooksies_prev_year1_oct'] = 0;
		$data['ctg_chooksies_prev_year1_nov'] = 0;
		$data['ctg_chooksies_prev_year1_dec'] = 0;
		$data['ctg_chooksies_prev_year1_avg'] = 0;
		$data['ctg_chooksies_prev_year1_min'] = 0;
		$data['ctg_chooksies_prev_year1_max'] = 0;

		foreach($ctg_chooksies_prev_year1 as $row){
			$data['ctg_chooksies_prev_year1_jan'] = $row->jan_price;
			$data['ctg_chooksies_prev_year1_feb'] = $row->feb_price;
			$data['ctg_chooksies_prev_year1_mar'] = $row->mar_price;
			$data['ctg_chooksies_prev_year1_apr'] = $row->apr_price;
			$data['ctg_chooksies_prev_year1_may'] = $row->may_price;
			$data['ctg_chooksies_prev_year1_jun'] = $row->jun_price;
			$data['ctg_chooksies_prev_year1_jul'] = $row->jul_price;
			$data['ctg_chooksies_prev_year1_aug'] = $row->aug_price;
			$data['ctg_chooksies_prev_year1_sep'] = $row->sep_price;
			$data['ctg_chooksies_prev_year1_oct'] = $row->oct_price;
			$data['ctg_chooksies_prev_year1_nov'] = $row->nov_price;
			$data['ctg_chooksies_prev_year1_dec'] = $row->dec_price;
			$data['ctg_chooksies_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_chooksies_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_chooksies_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'CHOOKSIES MARINADO',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ctg_chooksies_prev_year1_jan'],
			'dashboard_price_feb' => $data['ctg_chooksies_prev_year1_feb'],
			'dashboard_price_mar' => $data['ctg_chooksies_prev_year1_mar'],
			'dashboard_price_apr' => $data['ctg_chooksies_prev_year1_apr'],
			'dashboard_price_may' => $data['ctg_chooksies_prev_year1_may'],
			'dashboard_price_june' => $data['ctg_chooksies_prev_year1_jun'],
			'dashboard_price_july' => $data['ctg_chooksies_prev_year1_jul'],
			'dashboard_price_aug' => $data['ctg_chooksies_prev_year1_aug'],
			'dashboard_price_sep' => $data['ctg_chooksies_prev_year1_sep'],
			'dashboard_price_oct' => $data['ctg_chooksies_prev_year1_oct'],
			'dashboard_price_nov' => $data['ctg_chooksies_prev_year1_nov'],
			'dashboard_price_dec' => $data['ctg_chooksies_prev_year1_dec'],
			'dashboard_price_min' => $data['ctg_chooksies_prev_year1_min'],
			'dashboard_price_max' => $data['ctg_chooksies_prev_year1_max'],
			'dashboard_price_avg' => $data['ctg_chooksies_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

				$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'CHOOKSIES MARINADO',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ctg_chooksies1'],
			'dashboard_price_feb' => $data['ctg_chooksies2'],
			'dashboard_price_mar' => $data['ctg_chooksies3'],
			'dashboard_price_apr' => $data['ctg_chooksies4'],
			'dashboard_price_may' => $data['ctg_chooksies5'],
			'dashboard_price_june' => $data['ctg_chooksies6'],
			'dashboard_price_july' => $data['ctg_chooksies7'],
			'dashboard_price_aug' => $data['ctg_chooksies8'],
			'dashboard_price_sep' => $data['ctg_chooksies9'],
			'dashboard_price_oct' => $data['ctg_chooksies10'],
			'dashboard_price_nov' => $data['ctg_chooksies11'],
			'dashboard_price_dec' => $data['ctg_chooksies12'],
			'dashboard_price_min' => $data['ctg_chooksies_min'],
			'dashboard_price_max' => $data['ctg_chooksies_max'],
			'dashboard_price_avg' => $data['ctg_chooksies_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*CTG Chooksies Marinado*/

		$join_ctg_marinado = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code IN (1000638, 10200086)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id =' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_marinado = $this->admin->get_join('sales_tbl a', $join_ctg_marinado, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_marinado1'] = 0;
		$data['ctg_marinado2'] = 0;
		$data['ctg_marinado3'] = 0;
		$data['ctg_marinado4'] = 0;
		$data['ctg_marinado5'] = 0;
		$data['ctg_marinado6'] = 0;
		$data['ctg_marinado7'] = 0;
		$data['ctg_marinado8'] = 0;
		$data['ctg_marinado9'] = 0;
		$data['ctg_marinado10'] = 0;
		$data['ctg_marinado11'] = 0;
		$data['ctg_marinado12'] = 0;
		$data['ctg_marinado_total'] = 0;
		$data['ctg_marinado_count'] = 0;
		$data['ctg_marinado_avg'] = 0;
		$data['ctg_marinado_min'] = 0;
		$data['ctg_marinado_max'] = 0;

		foreach($get_ctg_marinado as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_marinado' . $month] = $asp;
			$data['ctg_marinado_total'] += $asp;

			if($asp < $data['ctg_marinado_min'] || $data['ctg_marinado_count'] == 0){
				$data['ctg_marinado_min'] = $asp;
			}

			if($asp > $data['ctg_marinado_max'] || $data['ctg_marinado_count'] == 0){
				$data['ctg_marinado_max'] = $asp;
			}

			$data['ctg_marinado_count']++;
		}

		$data['ctg_marinado_avg'] = $data['ctg_marinado_total'] != 0 ? $data['ctg_marinado_total'] / $data['ctg_marinado_count'] : 0;

		$ctg_marinado_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_marinado_prev_year2_jan'] = 0;
		$data['ctg_marinado_prev_year2_feb'] = 0;
		$data['ctg_marinado_prev_year2_mar'] = 0;
		$data['ctg_marinado_prev_year2_apr'] = 0;
		$data['ctg_marinado_prev_year2_may'] = 0;
		$data['ctg_marinado_prev_year2_jun'] = 0;
		$data['ctg_marinado_prev_year2_jul'] = 0;
		$data['ctg_marinado_prev_year2_aug'] = 0;
		$data['ctg_marinado_prev_year2_sep'] = 0;
		$data['ctg_marinado_prev_year2_oct'] = 0;
		$data['ctg_marinado_prev_year2_nov'] = 0;
		$data['ctg_marinado_prev_year2_dec'] = 0;
		$data['ctg_marinado_prev_year2_avg'] = 0;
		$data['ctg_marinado_prev_year2_min'] = 0;
		$data['ctg_marinado_prev_year2_max'] = 0;

		foreach($ctg_marinado_prev_year2 as $row){
			$data['ctg_marinado_prev_year2_jan'] = $row->jan_price;
			$data['ctg_marinado_prev_year2_feb'] = $row->feb_price;
			$data['ctg_marinado_prev_year2_mar'] = $row->mar_price;
			$data['ctg_marinado_prev_year2_apr'] = $row->apr_price;
			$data['ctg_marinado_prev_year2_may'] = $row->may_price;
			$data['ctg_marinado_prev_year2_jun'] = $row->jun_price;
			$data['ctg_marinado_prev_year2_jul'] = $row->jul_price;
			$data['ctg_marinado_prev_year2_aug'] = $row->aug_price;
			$data['ctg_marinado_prev_year2_sep'] = $row->sep_price;
			$data['ctg_marinado_prev_year2_oct'] = $row->oct_price;
			$data['ctg_marinado_prev_year2_nov'] = $row->nov_price;
			$data['ctg_marinado_prev_year2_dec'] = $row->dec_price;
			$data['ctg_marinado_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_marinado_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_marinado_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'MARINADO FRIED',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ctg_marinado_prev_year2_jan'],
			'dashboard_price_feb' => $data['ctg_marinado_prev_year2_feb'],
			'dashboard_price_mar' => $data['ctg_marinado_prev_year2_mar'],
			'dashboard_price_apr' => $data['ctg_marinado_prev_year2_apr'],
			'dashboard_price_may' => $data['ctg_marinado_prev_year2_may'],
			'dashboard_price_june' => $data['ctg_marinado_prev_year2_jun'],
			'dashboard_price_july' => $data['ctg_marinado_prev_year2_jul'],
			'dashboard_price_aug' => $data['ctg_marinado_prev_year2_aug'],
			'dashboard_price_sep' => $data['ctg_marinado_prev_year2_sep'],
			'dashboard_price_oct' => $data['ctg_marinado_prev_year2_oct'],
			'dashboard_price_nov' => $data['ctg_marinado_prev_year2_nov'],
			'dashboard_price_dec' => $data['ctg_marinado_prev_year2_dec'],
			'dashboard_price_min' => $data['ctg_marinado_prev_year2_min'],
			'dashboard_price_max' => $data['ctg_marinado_prev_year2_max'],
			'dashboard_price_avg' => $data['ctg_marinado_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$ctg_marinado_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_marinado_prev_year1_jan'] = 0;
		$data['ctg_marinado_prev_year1_feb'] = 0;
		$data['ctg_marinado_prev_year1_mar'] = 0;
		$data['ctg_marinado_prev_year1_apr'] = 0;
		$data['ctg_marinado_prev_year1_may'] = 0;
		$data['ctg_marinado_prev_year1_jun'] = 0;
		$data['ctg_marinado_prev_year1_jul'] = 0;
		$data['ctg_marinado_prev_year1_aug'] = 0;
		$data['ctg_marinado_prev_year1_sep'] = 0;
		$data['ctg_marinado_prev_year1_oct'] = 0;
		$data['ctg_marinado_prev_year1_nov'] = 0;
		$data['ctg_marinado_prev_year1_dec'] = 0;
		$data['ctg_marinado_prev_year1_avg'] = 0;
		$data['ctg_marinado_prev_year1_min'] = 0;
		$data['ctg_marinado_prev_year1_max'] = 0;

		foreach($ctg_marinado_prev_year1 as $row){
			$data['ctg_marinado_prev_year1_jan'] = $row->jan_price;
			$data['ctg_marinado_prev_year1_feb'] = $row->feb_price;
			$data['ctg_marinado_prev_year1_mar'] = $row->mar_price;
			$data['ctg_marinado_prev_year1_apr'] = $row->apr_price;
			$data['ctg_marinado_prev_year1_may'] = $row->may_price;
			$data['ctg_marinado_prev_year1_jun'] = $row->jun_price;
			$data['ctg_marinado_prev_year1_jul'] = $row->jul_price;
			$data['ctg_marinado_prev_year1_aug'] = $row->aug_price;
			$data['ctg_marinado_prev_year1_sep'] = $row->sep_price;
			$data['ctg_marinado_prev_year1_oct'] = $row->oct_price;
			$data['ctg_marinado_prev_year1_nov'] = $row->nov_price;
			$data['ctg_marinado_prev_year1_dec'] = $row->dec_price;
			$data['ctg_marinado_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_marinado_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_marinado_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'MARINADO FRIED',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ctg_marinado_prev_year1_jan'],
			'dashboard_price_feb' => $data['ctg_marinado_prev_year1_feb'],
			'dashboard_price_mar' => $data['ctg_marinado_prev_year1_mar'],
			'dashboard_price_apr' => $data['ctg_marinado_prev_year1_apr'],
			'dashboard_price_may' => $data['ctg_marinado_prev_year1_may'],
			'dashboard_price_june' => $data['ctg_marinado_prev_year1_jun'],
			'dashboard_price_july' => $data['ctg_marinado_prev_year1_jul'],
			'dashboard_price_aug' => $data['ctg_marinado_prev_year1_aug'],
			'dashboard_price_sep' => $data['ctg_marinado_prev_year1_sep'],
			'dashboard_price_oct' => $data['ctg_marinado_prev_year1_oct'],
			'dashboard_price_nov' => $data['ctg_marinado_prev_year1_nov'],
			'dashboard_price_dec' => $data['ctg_marinado_prev_year1_dec'],
			'dashboard_price_min' => $data['ctg_marinado_prev_year1_min'],
			'dashboard_price_max' => $data['ctg_marinado_prev_year1_max'],
			'dashboard_price_avg' => $data['ctg_marinado_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'MARINADO FRIED',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ctg_marinado1'],
			'dashboard_price_feb' => $data['ctg_marinado2'],
			'dashboard_price_mar' => $data['ctg_marinado3'],
			'dashboard_price_apr' => $data['ctg_marinado4'],
			'dashboard_price_may' => $data['ctg_marinado5'],
			'dashboard_price_june' => $data['ctg_marinado6'],
			'dashboard_price_july' => $data['ctg_marinado7'],
			'dashboard_price_aug' => $data['ctg_marinado8'],
			'dashboard_price_sep' => $data['ctg_marinado9'],
			'dashboard_price_oct' => $data['ctg_marinado10'],
			'dashboard_price_nov' => $data['ctg_marinado11'],
			'dashboard_price_dec' => $data['ctg_marinado12'],
			'dashboard_price_min' => $data['ctg_marinado_min'],
			'dashboard_price_max' => $data['ctg_marinado_max'],
			'dashboard_price_avg' => $data['ctg_marinado_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*CTG Spicy Neck*/
		$join_ctg_spicy = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 10200090 OR d.material_code = 1000401 OR d.material_code = 1000402 OR d.material_code = 1000617)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id =' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_spicy = $this->admin->get_join('sales_tbl a', $join_ctg_spicy, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_spicy1'] = 0;
		$data['ctg_spicy2'] = 0;
		$data['ctg_spicy3'] = 0;
		$data['ctg_spicy4'] = 0;
		$data['ctg_spicy5'] = 0;
		$data['ctg_spicy6'] = 0;
		$data['ctg_spicy7'] = 0;
		$data['ctg_spicy8'] = 0;
		$data['ctg_spicy9'] = 0;
		$data['ctg_spicy10'] = 0;
		$data['ctg_spicy11'] = 0;
		$data['ctg_spicy12'] = 0;
		$data['ctg_spicy_total'] = 0;
		$data['ctg_spicy_count'] = 0;
		$data['ctg_spicy_avg'] = 0;
		$data['ctg_spicy_min'] = 0;
		$data['ctg_spicy_max'] = 0;

		foreach($get_ctg_spicy as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_spicy' . $month] = $asp;
			$data['ctg_spicy_total'] += $asp;

			if($asp < $data['ctg_spicy_min'] || $data['ctg_spicy_count'] == 0){
				$data['ctg_spicy_min'] = $asp;
			}

			if($asp > $data['ctg_spicy_max'] || $data['ctg_spicy_count'] == 0){
				$data['ctg_spicy_max'] = $asp;
			}

			$data['ctg_spicy_count']++;
		}

		$data['ctg_spicy_avg'] = $data['ctg_spicy_total'] != 0 ? $data['ctg_spicy_total'] / $data['ctg_spicy_count'] : 0;

		$ctg_spicy_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_spicy_prev_year2_jan'] = 0;
		$data['ctg_spicy_prev_year2_feb'] = 0;
		$data['ctg_spicy_prev_year2_mar'] = 0;
		$data['ctg_spicy_prev_year2_apr'] = 0;
		$data['ctg_spicy_prev_year2_may'] = 0;
		$data['ctg_spicy_prev_year2_jun'] = 0;
		$data['ctg_spicy_prev_year2_jul'] = 0;
		$data['ctg_spicy_prev_year2_aug'] = 0;
		$data['ctg_spicy_prev_year2_sep'] = 0;
		$data['ctg_spicy_prev_year2_oct'] = 0;
		$data['ctg_spicy_prev_year2_nov'] = 0;
		$data['ctg_spicy_prev_year2_dec'] = 0;
		$data['ctg_spicy_prev_year2_avg'] = 0;
		$data['ctg_spicy_prev_year2_min'] = 0;
		$data['ctg_spicy_prev_year2_max'] = 0;

		foreach($ctg_spicy_prev_year2 as $row){
			$data['ctg_spicy_prev_year2_jan'] = $row->jan_price;
			$data['ctg_spicy_prev_year2_feb'] = $row->feb_price;
			$data['ctg_spicy_prev_year2_mar'] = $row->mar_price;
			$data['ctg_spicy_prev_year2_apr'] = $row->apr_price;
			$data['ctg_spicy_prev_year2_may'] = $row->may_price;
			$data['ctg_spicy_prev_year2_jun'] = $row->jun_price;
			$data['ctg_spicy_prev_year2_jul'] = $row->jul_price;
			$data['ctg_spicy_prev_year2_aug'] = $row->aug_price;
			$data['ctg_spicy_prev_year2_sep'] = $row->sep_price;
			$data['ctg_spicy_prev_year2_oct'] = $row->oct_price;
			$data['ctg_spicy_prev_year2_nov'] = $row->nov_price;
			$data['ctg_spicy_prev_year2_dec'] = $row->dec_price;
			$data['ctg_spicy_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_spicy_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_spicy_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'SPICY NECK',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ctg_spicy_prev_year2_jan'],
			'dashboard_price_feb' => $data['ctg_spicy_prev_year2_feb'],
			'dashboard_price_mar' => $data['ctg_spicy_prev_year2_mar'],
			'dashboard_price_apr' => $data['ctg_spicy_prev_year2_apr'],
			'dashboard_price_may' => $data['ctg_spicy_prev_year2_may'],
			'dashboard_price_june' => $data['ctg_spicy_prev_year2_jun'],
			'dashboard_price_july' => $data['ctg_spicy_prev_year2_jul'],
			'dashboard_price_aug' => $data['ctg_spicy_prev_year2_aug'],
			'dashboard_price_sep' => $data['ctg_spicy_prev_year2_sep'],
			'dashboard_price_oct' => $data['ctg_spicy_prev_year2_oct'],
			'dashboard_price_nov' => $data['ctg_spicy_prev_year2_nov'],
			'dashboard_price_dec' => $data['ctg_spicy_prev_year2_dec'],
			'dashboard_price_min' => $data['ctg_spicy_prev_year2_min'],
			'dashboard_price_max' => $data['ctg_spicy_prev_year2_max'],
			'dashboard_price_avg' => $data['ctg_spicy_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$ctg_spicy_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_spicy_prev_year1_jan'] = 0;
		$data['ctg_spicy_prev_year1_feb'] = 0;
		$data['ctg_spicy_prev_year1_mar'] = 0;
		$data['ctg_spicy_prev_year1_apr'] = 0;
		$data['ctg_spicy_prev_year1_may'] = 0;
		$data['ctg_spicy_prev_year1_jun'] = 0;
		$data['ctg_spicy_prev_year1_jul'] = 0;
		$data['ctg_spicy_prev_year1_aug'] = 0;
		$data['ctg_spicy_prev_year1_sep'] = 0;
		$data['ctg_spicy_prev_year1_oct'] = 0;
		$data['ctg_spicy_prev_year1_nov'] = 0;
		$data['ctg_spicy_prev_year1_dec'] = 0;
		$data['ctg_spicy_prev_year1_avg'] = 0;
		$data['ctg_spicy_prev_year1_min'] = 0;
		$data['ctg_spicy_prev_year1_max'] = 0;

		foreach($ctg_spicy_prev_year1 as $row){
			$data['ctg_spicy_prev_year1_jan'] = $row->jan_price;
			$data['ctg_spicy_prev_year1_feb'] = $row->feb_price;
			$data['ctg_spicy_prev_year1_mar'] = $row->mar_price;
			$data['ctg_spicy_prev_year1_apr'] = $row->apr_price;
			$data['ctg_spicy_prev_year1_may'] = $row->may_price;
			$data['ctg_spicy_prev_year1_jun'] = $row->jun_price;
			$data['ctg_spicy_prev_year1_jul'] = $row->jul_price;
			$data['ctg_spicy_prev_year1_aug'] = $row->aug_price;
			$data['ctg_spicy_prev_year1_sep'] = $row->sep_price;
			$data['ctg_spicy_prev_year1_oct'] = $row->oct_price;
			$data['ctg_spicy_prev_year1_nov'] = $row->nov_price;
			$data['ctg_spicy_prev_year1_dec'] = $row->dec_price;
			$data['ctg_spicy_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_spicy_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_spicy_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'SPICY NECK',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ctg_spicy_prev_year1_jan'],
			'dashboard_price_feb' => $data['ctg_spicy_prev_year1_feb'],
			'dashboard_price_mar' => $data['ctg_spicy_prev_year1_mar'],
			'dashboard_price_apr' => $data['ctg_spicy_prev_year1_apr'],
			'dashboard_price_may' => $data['ctg_spicy_prev_year1_may'],
			'dashboard_price_june' => $data['ctg_spicy_prev_year1_jun'],
			'dashboard_price_july' => $data['ctg_spicy_prev_year1_jul'],
			'dashboard_price_aug' => $data['ctg_spicy_prev_year1_aug'],
			'dashboard_price_sep' => $data['ctg_spicy_prev_year1_sep'],
			'dashboard_price_oct' => $data['ctg_spicy_prev_year1_oct'],
			'dashboard_price_nov' => $data['ctg_spicy_prev_year1_nov'],
			'dashboard_price_dec' => $data['ctg_spicy_prev_year1_dec'],
			'dashboard_price_min' => $data['ctg_spicy_prev_year1_min'],
			'dashboard_price_max' => $data['ctg_spicy_prev_year1_max'],
			'dashboard_price_avg' => $data['ctg_spicy_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'SPICY NECK',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ctg_spicy1'],
			'dashboard_price_feb' => $data['ctg_spicy2'],
			'dashboard_price_mar' => $data['ctg_spicy3'],
			'dashboard_price_apr' => $data['ctg_spicy4'],
			'dashboard_price_may' => $data['ctg_spicy5'],
			'dashboard_price_june' => $data['ctg_spicy6'],
			'dashboard_price_july' => $data['ctg_spicy7'],
			'dashboard_price_aug' => $data['ctg_spicy8'],
			'dashboard_price_sep' => $data['ctg_spicy9'],
			'dashboard_price_oct' => $data['ctg_spicy10'],
			'dashboard_price_nov' => $data['ctg_spicy11'],
			'dashboard_price_dec' => $data['ctg_spicy12'],
			'dashboard_price_min' => $data['ctg_spicy_min'],
			'dashboard_price_max' => $data['ctg_spicy_max'],
			'dashboard_price_avg' => $data['ctg_spicy_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		
		/*CTG Nuggets*/

		$join_ctg_nuggets = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 40000016 OR d.material_code = 40000019 OR d.material_code = 40000053)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER VAP PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_nuggets = $this->admin->get_join('sales_tbl a', $join_ctg_nuggets, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_nuggets1'] = 0;
		$data['ctg_nuggets2'] = 0;
		$data['ctg_nuggets3'] = 0;
		$data['ctg_nuggets4'] = 0;
		$data['ctg_nuggets5'] = 0;
		$data['ctg_nuggets6'] = 0;
		$data['ctg_nuggets7'] = 0;
		$data['ctg_nuggets8'] = 0;
		$data['ctg_nuggets9'] = 0;
		$data['ctg_nuggets10'] = 0;
		$data['ctg_nuggets11'] = 0;
		$data['ctg_nuggets12'] = 0;
		$data['ctg_nuggets_total'] = 0;
		$data['ctg_nuggets_count'] = 0;
		$data['ctg_nuggets_avg'] = 0;
		$data['ctg_nuggets_min'] = 0;
		$data['ctg_nuggets_max'] = 0;

		foreach($get_ctg_nuggets as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_nuggets' . $month] = $asp;
			$data['ctg_nuggets_total'] += $asp;

			if($asp < $data['ctg_nuggets_min'] || $data['ctg_nuggets_count'] == 0){
				$data['ctg_nuggets_min'] = $asp;
			}

			if($asp > $data['ctg_nuggets_max'] || $data['ctg_nuggets_count'] == 0){
				$data['ctg_nuggets_max'] = $asp;
			}

			$data['ctg_nuggets_count']++;
		}

		$data['ctg_nuggets_avg'] = $data['ctg_nuggets_total'] != 0 ? $data['ctg_nuggets_total'] / $data['ctg_nuggets_count'] : 0;


		$ctg_nuggets_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-Nuggets', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_nuggets_prev_year2_jan'] = 0;
		$data['ctg_nuggets_prev_year2_feb'] = 0;
		$data['ctg_nuggets_prev_year2_mar'] = 0;
		$data['ctg_nuggets_prev_year2_apr'] = 0;
		$data['ctg_nuggets_prev_year2_may'] = 0;
		$data['ctg_nuggets_prev_year2_jun'] = 0;
		$data['ctg_nuggets_prev_year2_jul'] = 0;
		$data['ctg_nuggets_prev_year2_aug'] = 0;
		$data['ctg_nuggets_prev_year2_sep'] = 0;
		$data['ctg_nuggets_prev_year2_oct'] = 0;
		$data['ctg_nuggets_prev_year2_nov'] = 0;
		$data['ctg_nuggets_prev_year2_dec'] = 0;
		$data['ctg_nuggets_prev_year2_avg'] = 0;
		$data['ctg_nuggets_prev_year2_min'] = 0;
		$data['ctg_nuggets_prev_year2_max'] = 0;

		foreach($ctg_nuggets_prev_year2 as $row){
			$data['ctg_nuggets_prev_year2_jan'] = $row->jan_price;
			$data['ctg_nuggets_prev_year2_feb'] = $row->feb_price;
			$data['ctg_nuggets_prev_year2_mar'] = $row->mar_price;
			$data['ctg_nuggets_prev_year2_apr'] = $row->apr_price;
			$data['ctg_nuggets_prev_year2_may'] = $row->may_price;
			$data['ctg_nuggets_prev_year2_jun'] = $row->jun_price;
			$data['ctg_nuggets_prev_year2_jul'] = $row->jul_price;
			$data['ctg_nuggets_prev_year2_aug'] = $row->aug_price;
			$data['ctg_nuggets_prev_year2_sep'] = $row->sep_price;
			$data['ctg_nuggets_prev_year2_oct'] = $row->oct_price;
			$data['ctg_nuggets_prev_year2_nov'] = $row->nov_price;
			$data['ctg_nuggets_prev_year2_dec'] = $row->dec_price;
			$data['ctg_nuggets_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_nuggets_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_nuggets_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'VAP-Nuggets',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ctg_nuggets_prev_year2_jan'],
			'dashboard_price_feb' => $data['ctg_nuggets_prev_year2_feb'],
			'dashboard_price_mar' => $data['ctg_nuggets_prev_year2_mar'],
			'dashboard_price_apr' => $data['ctg_nuggets_prev_year2_apr'],
			'dashboard_price_may' => $data['ctg_nuggets_prev_year2_may'],
			'dashboard_price_june' => $data['ctg_nuggets_prev_year2_jun'],
			'dashboard_price_july' => $data['ctg_nuggets_prev_year2_jul'],
			'dashboard_price_aug' => $data['ctg_nuggets_prev_year2_aug'],
			'dashboard_price_sep' => $data['ctg_nuggets_prev_year2_sep'],
			'dashboard_price_oct' => $data['ctg_nuggets_prev_year2_oct'],
			'dashboard_price_nov' => $data['ctg_nuggets_prev_year2_nov'],
			'dashboard_price_dec' => $data['ctg_nuggets_prev_year2_dec'],
			'dashboard_price_min' => $data['ctg_nuggets_prev_year2_min'],
			'dashboard_price_max' => $data['ctg_nuggets_prev_year2_max'],
			'dashboard_price_avg' => $data['ctg_nuggets_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$ctg_nuggets_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-Nuggets', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_nuggets_prev_year1_jan'] = 0;
		$data['ctg_nuggets_prev_year1_feb'] = 0;
		$data['ctg_nuggets_prev_year1_mar'] = 0;
		$data['ctg_nuggets_prev_year1_apr'] = 0;
		$data['ctg_nuggets_prev_year1_may'] = 0;
		$data['ctg_nuggets_prev_year1_jun'] = 0;
		$data['ctg_nuggets_prev_year1_jul'] = 0;
		$data['ctg_nuggets_prev_year1_aug'] = 0;
		$data['ctg_nuggets_prev_year1_sep'] = 0;
		$data['ctg_nuggets_prev_year1_oct'] = 0;
		$data['ctg_nuggets_prev_year1_nov'] = 0;
		$data['ctg_nuggets_prev_year1_dec'] = 0;
		$data['ctg_nuggets_prev_year1_avg'] = 0;
		$data['ctg_nuggets_prev_year1_min'] = 0;
		$data['ctg_nuggets_prev_year1_max'] = 0;

		foreach($ctg_nuggets_prev_year1 as $row){
			$data['ctg_nuggets_prev_year1_jan'] = $row->jan_price;
			$data['ctg_nuggets_prev_year1_feb'] = $row->feb_price;
			$data['ctg_nuggets_prev_year1_mar'] = $row->mar_price;
			$data['ctg_nuggets_prev_year1_apr'] = $row->apr_price;
			$data['ctg_nuggets_prev_year1_may'] = $row->may_price;
			$data['ctg_nuggets_prev_year1_jun'] = $row->jun_price;
			$data['ctg_nuggets_prev_year1_jul'] = $row->jul_price;
			$data['ctg_nuggets_prev_year1_aug'] = $row->aug_price;
			$data['ctg_nuggets_prev_year1_sep'] = $row->sep_price;
			$data['ctg_nuggets_prev_year1_oct'] = $row->oct_price;
			$data['ctg_nuggets_prev_year1_nov'] = $row->nov_price;
			$data['ctg_nuggets_prev_year1_dec'] = $row->dec_price;
			$data['ctg_nuggets_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_nuggets_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_nuggets_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'VAP-Nuggets',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ctg_nuggets_prev_year1_jan'],
			'dashboard_price_feb' => $data['ctg_nuggets_prev_year1_feb'],
			'dashboard_price_mar' => $data['ctg_nuggets_prev_year1_mar'],
			'dashboard_price_apr' => $data['ctg_nuggets_prev_year1_apr'],
			'dashboard_price_may' => $data['ctg_nuggets_prev_year1_may'],
			'dashboard_price_june' => $data['ctg_nuggets_prev_year1_jun'],
			'dashboard_price_july' => $data['ctg_nuggets_prev_year1_jul'],
			'dashboard_price_aug' => $data['ctg_nuggets_prev_year1_aug'],
			'dashboard_price_sep' => $data['ctg_nuggets_prev_year1_sep'],
			'dashboard_price_oct' => $data['ctg_nuggets_prev_year1_oct'],
			'dashboard_price_nov' => $data['ctg_nuggets_prev_year1_nov'],
			'dashboard_price_dec' => $data['ctg_nuggets_prev_year1_dec'],
			'dashboard_price_min' => $data['ctg_nuggets_prev_year1_min'],
			'dashboard_price_max' => $data['ctg_nuggets_prev_year1_max'],
			'dashboard_price_avg' => $data['ctg_nuggets_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'VAP-Nuggets',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ctg_nuggets1'],
			'dashboard_price_feb' => $data['ctg_nuggets2'],
			'dashboard_price_mar' => $data['ctg_nuggets3'],
			'dashboard_price_apr' => $data['ctg_nuggets4'],
			'dashboard_price_may' => $data['ctg_nuggets5'],
			'dashboard_price_june' => $data['ctg_nuggets6'],
			'dashboard_price_july' => $data['ctg_nuggets7'],
			'dashboard_price_aug' => $data['ctg_nuggets8'],
			'dashboard_price_sep' => $data['ctg_nuggets9'],
			'dashboard_price_oct' => $data['ctg_nuggets10'],
			'dashboard_price_nov' => $data['ctg_nuggets11'],
			'dashboard_price_dec' => $data['ctg_nuggets12'],
			'dashboard_price_min' => $data['ctg_nuggets_min'],
			'dashboard_price_max' => $data['ctg_nuggets_max'],
			'dashboard_price_avg' => $data['ctg_nuggets_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		/*CTG 11 PC PICA PICA CUTS*/

		$join_ctg_pica = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code IN (10400170, 10200089)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_pica = $this->admin->get_join('sales_tbl a', $join_ctg_pica, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_pica1'] = 0;
		$data['ctg_pica2'] = 0;
		$data['ctg_pica3'] = 0;
		$data['ctg_pica4'] = 0;
		$data['ctg_pica5'] = 0;
		$data['ctg_pica6'] = 0;
		$data['ctg_pica7'] = 0;
		$data['ctg_pica8'] = 0;
		$data['ctg_pica9'] = 0;
		$data['ctg_pica10'] = 0;
		$data['ctg_pica11'] = 0;
		$data['ctg_pica12'] = 0;
		$data['ctg_pica_total'] = 0;
		$data['ctg_pica_count'] = 0;
		$data['ctg_pica_avg'] = 0;
		$data['ctg_pica_min'] = 0;
		$data['ctg_pica_max'] = 0;

		foreach($get_ctg_pica as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_pica' . $month] = $asp;
			$data['ctg_pica_total'] += $asp;

			if($asp < $data['ctg_pica_min'] || $data['ctg_pica_count'] == 0){
				$data['ctg_pica_min'] = $asp;
			}

			if($asp > $data['ctg_pica_max'] || $data['ctg_pica_count'] == 0){
				$data['ctg_pica_max'] = $asp;
			}

			$data['ctg_pica_count']++;
		}

		$data['ctg_pica_avg'] = $data['ctg_pica_total'] != 0 ? $data['ctg_pica_total'] / $data['ctg_pica_count'] : 0;


		$ctg_pica_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_pica_prev_year2_jan'] = 0;
		$data['ctg_pica_prev_year2_feb'] = 0;
		$data['ctg_pica_prev_year2_mar'] = 0;
		$data['ctg_pica_prev_year2_apr'] = 0;
		$data['ctg_pica_prev_year2_may'] = 0;
		$data['ctg_pica_prev_year2_jun'] = 0;
		$data['ctg_pica_prev_year2_jul'] = 0;
		$data['ctg_pica_prev_year2_aug'] = 0;
		$data['ctg_pica_prev_year2_sep'] = 0;
		$data['ctg_pica_prev_year2_oct'] = 0;
		$data['ctg_pica_prev_year2_nov'] = 0;
		$data['ctg_pica_prev_year2_dec'] = 0;
		$data['ctg_pica_prev_year2_avg'] = 0;
		$data['ctg_pica_prev_year2_min'] = 0;
		$data['ctg_pica_prev_year2_max'] = 0;

		foreach($ctg_pica_prev_year2 as $row){
			$data['ctg_pica_prev_year2_jan'] = $row->jan_price;
			$data['ctg_pica_prev_year2_feb'] = $row->feb_price;
			$data['ctg_pica_prev_year2_mar'] = $row->mar_price;
			$data['ctg_pica_prev_year2_apr'] = $row->apr_price;
			$data['ctg_pica_prev_year2_may'] = $row->may_price;
			$data['ctg_pica_prev_year2_jun'] = $row->jun_price;
			$data['ctg_pica_prev_year2_jul'] = $row->jul_price;
			$data['ctg_pica_prev_year2_aug'] = $row->aug_price;
			$data['ctg_pica_prev_year2_sep'] = $row->sep_price;
			$data['ctg_pica_prev_year2_oct'] = $row->oct_price;
			$data['ctg_pica_prev_year2_nov'] = $row->nov_price;
			$data['ctg_pica_prev_year2_dec'] = $row->dec_price;
			$data['ctg_pica_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_pica_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_pica_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => '11 PC',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ctg_pica_prev_year2_jan'],
			'dashboard_price_feb' => $data['ctg_pica_prev_year2_feb'],
			'dashboard_price_mar' => $data['ctg_pica_prev_year2_mar'],
			'dashboard_price_apr' => $data['ctg_pica_prev_year2_apr'],
			'dashboard_price_may' => $data['ctg_pica_prev_year2_may'],
			'dashboard_price_june' => $data['ctg_pica_prev_year2_jun'],
			'dashboard_price_july' => $data['ctg_pica_prev_year2_jul'],
			'dashboard_price_aug' => $data['ctg_pica_prev_year2_aug'],
			'dashboard_price_sep' => $data['ctg_pica_prev_year2_sep'],
			'dashboard_price_oct' => $data['ctg_pica_prev_year2_oct'],
			'dashboard_price_nov' => $data['ctg_pica_prev_year2_nov'],
			'dashboard_price_dec' => $data['ctg_pica_prev_year2_dec'],
			'dashboard_price_min' => $data['ctg_pica_prev_year2_min'],
			'dashboard_price_max' => $data['ctg_pica_prev_year2_max'],
			'dashboard_price_avg' => $data['ctg_pica_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$ctg_pica_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_pica_prev_year1_jan'] = 0;
		$data['ctg_pica_prev_year1_feb'] = 0;
		$data['ctg_pica_prev_year1_mar'] = 0;
		$data['ctg_pica_prev_year1_apr'] = 0;
		$data['ctg_pica_prev_year1_may'] = 0;
		$data['ctg_pica_prev_year1_jun'] = 0;
		$data['ctg_pica_prev_year1_jul'] = 0;
		$data['ctg_pica_prev_year1_aug'] = 0;
		$data['ctg_pica_prev_year1_sep'] = 0;
		$data['ctg_pica_prev_year1_oct'] = 0;
		$data['ctg_pica_prev_year1_nov'] = 0;
		$data['ctg_pica_prev_year1_dec'] = 0;
		$data['ctg_pica_prev_year1_avg'] = 0;
		$data['ctg_pica_prev_year1_min'] = 0;
		$data['ctg_pica_prev_year1_max'] = 0;

		foreach($ctg_pica_prev_year1 as $row){
			$data['ctg_pica_prev_year1_jan'] = $row->jan_price;
			$data['ctg_pica_prev_year1_feb'] = $row->feb_price;
			$data['ctg_pica_prev_year1_mar'] = $row->mar_price;
			$data['ctg_pica_prev_year1_apr'] = $row->apr_price;
			$data['ctg_pica_prev_year1_may'] = $row->may_price;
			$data['ctg_pica_prev_year1_jun'] = $row->jun_price;
			$data['ctg_pica_prev_year1_jul'] = $row->jul_price;
			$data['ctg_pica_prev_year1_aug'] = $row->aug_price;
			$data['ctg_pica_prev_year1_sep'] = $row->sep_price;
			$data['ctg_pica_prev_year1_oct'] = $row->oct_price;
			$data['ctg_pica_prev_year1_nov'] = $row->nov_price;
			$data['ctg_pica_prev_year1_dec'] = $row->dec_price;
			$data['ctg_pica_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_pica_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_pica_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => '11 PC',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ctg_pica_prev_year1_jan'],
			'dashboard_price_feb' => $data['ctg_pica_prev_year1_feb'],
			'dashboard_price_mar' => $data['ctg_pica_prev_year1_mar'],
			'dashboard_price_apr' => $data['ctg_pica_prev_year1_apr'],
			'dashboard_price_may' => $data['ctg_pica_prev_year1_may'],
			'dashboard_price_june' => $data['ctg_pica_prev_year1_jun'],
			'dashboard_price_july' => $data['ctg_pica_prev_year1_jul'],
			'dashboard_price_aug' => $data['ctg_pica_prev_year1_aug'],
			'dashboard_price_sep' => $data['ctg_pica_prev_year1_sep'],
			'dashboard_price_oct' => $data['ctg_pica_prev_year1_oct'],
			'dashboard_price_nov' => $data['ctg_pica_prev_year1_nov'],
			'dashboard_price_dec' => $data['ctg_pica_prev_year1_dec'],
			'dashboard_price_min' => $data['ctg_pica_prev_year1_min'],
			'dashboard_price_max' => $data['ctg_pica_prev_year1_max'],
			'dashboard_price_avg' => $data['ctg_pica_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => '11 PC',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ctg_pica1'],
			'dashboard_price_feb' => $data['ctg_pica2'],
			'dashboard_price_mar' => $data['ctg_pica3'],
			'dashboard_price_apr' => $data['ctg_pica4'],
			'dashboard_price_may' => $data['ctg_pica5'],
			'dashboard_price_june' => $data['ctg_pica6'],
			'dashboard_price_july' => $data['ctg_pica7'],
			'dashboard_price_aug' => $data['ctg_pica8'],
			'dashboard_price_sep' => $data['ctg_pica9'],
			'dashboard_price_oct' => $data['ctg_pica10'],
			'dashboard_price_nov' => $data['ctg_pica11'],
			'dashboard_price_dec' => $data['ctg_pica12'],
			'dashboard_price_min' => $data['ctg_pica_min'],
			'dashboard_price_max' => $data['ctg_pica_max'],
			'dashboard_price_avg' => $data['ctg_pica_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		
		/*1 PC BOSSING CUTS */
		
		$join_ctg_bossing = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code IN (10400836)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_bossing = $this->admin->get_join('sales_tbl a', $join_ctg_bossing, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_bossing1'] = 0;
		$data['ctg_bossing2'] = 0;
		$data['ctg_bossing3'] = 0;
		$data['ctg_bossing4'] = 0;
		$data['ctg_bossing5'] = 0;
		$data['ctg_bossing6'] = 0;
		$data['ctg_bossing7'] = 0;
		$data['ctg_bossing8'] = 0;
		$data['ctg_bossing9'] = 0;
		$data['ctg_bossing10'] = 0;
		$data['ctg_bossing11'] = 0;
		$data['ctg_bossing12'] = 0;
		$data['ctg_bossing_total'] = 0;
		$data['ctg_bossing_count'] = 0;
		$data['ctg_bossing_avg'] = 0;
		$data['ctg_bossing_min'] = 0;
		$data['ctg_bossing_max'] = 0;

		foreach($get_ctg_bossing as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_bossing' . $month] = $asp;
			$data['ctg_bossing_total'] += $asp;

			if($asp < $data['ctg_bossing_min'] || $data['ctg_bossing_count'] == 0){
				$data['ctg_bossing_min'] = $asp;
			}

			if($asp > $data['ctg_bossing_max'] || $data['ctg_bossing_count'] == 0){
				$data['ctg_bossing_max'] = $asp;
			}

			$data['ctg_bossing_count']++;
		}

		$data['ctg_bossing_avg'] = $data['ctg_bossing_total'] != 0 ? $data['ctg_bossing_total'] / $data['ctg_bossing_count'] : 0;


		$ctg_bossing_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '1 PC', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_bossing_prev_year2_jan'] = 0;
		$data['ctg_bossing_prev_year2_feb'] = 0;
		$data['ctg_bossing_prev_year2_mar'] = 0;
		$data['ctg_bossing_prev_year2_apr'] = 0;
		$data['ctg_bossing_prev_year2_may'] = 0;
		$data['ctg_bossing_prev_year2_jun'] = 0;
		$data['ctg_bossing_prev_year2_jul'] = 0;
		$data['ctg_bossing_prev_year2_aug'] = 0;
		$data['ctg_bossing_prev_year2_sep'] = 0;
		$data['ctg_bossing_prev_year2_oct'] = 0;
		$data['ctg_bossing_prev_year2_nov'] = 0;
		$data['ctg_bossing_prev_year2_dec'] = 0;
		$data['ctg_bossing_prev_year2_avg'] = 0;
		$data['ctg_bossing_prev_year2_min'] = 0;
		$data['ctg_bossing_prev_year2_max'] = 0;

		foreach($ctg_bossing_prev_year2 as $row){
			$data['ctg_bossing_prev_year2_jan'] = $row->jan_price;
			$data['ctg_bossing_prev_year2_feb'] = $row->feb_price;
			$data['ctg_bossing_prev_year2_mar'] = $row->mar_price;
			$data['ctg_bossing_prev_year2_apr'] = $row->apr_price;
			$data['ctg_bossing_prev_year2_may'] = $row->may_price;
			$data['ctg_bossing_prev_year2_jun'] = $row->jun_price;
			$data['ctg_bossing_prev_year2_jul'] = $row->jul_price;
			$data['ctg_bossing_prev_year2_aug'] = $row->aug_price;
			$data['ctg_bossing_prev_year2_sep'] = $row->sep_price;
			$data['ctg_bossing_prev_year2_oct'] = $row->oct_price;
			$data['ctg_bossing_prev_year2_nov'] = $row->nov_price;
			$data['ctg_bossing_prev_year2_dec'] = $row->dec_price;
			$data['ctg_bossing_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_bossing_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_bossing_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => '1 PC',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ctg_bossing_prev_year2_jan'],
			'dashboard_price_feb' => $data['ctg_bossing_prev_year2_feb'],
			'dashboard_price_mar' => $data['ctg_bossing_prev_year2_mar'],
			'dashboard_price_apr' => $data['ctg_bossing_prev_year2_apr'],
			'dashboard_price_may' => $data['ctg_bossing_prev_year2_may'],
			'dashboard_price_june' => $data['ctg_bossing_prev_year2_jun'],
			'dashboard_price_july' => $data['ctg_bossing_prev_year2_jul'],
			'dashboard_price_aug' => $data['ctg_bossing_prev_year2_aug'],
			'dashboard_price_sep' => $data['ctg_bossing_prev_year2_sep'],
			'dashboard_price_oct' => $data['ctg_bossing_prev_year2_oct'],
			'dashboard_price_nov' => $data['ctg_bossing_prev_year2_nov'],
			'dashboard_price_dec' => $data['ctg_bossing_prev_year2_dec'],
			'dashboard_price_min' => $data['ctg_bossing_prev_year2_min'],
			'dashboard_price_max' => $data['ctg_bossing_prev_year2_max'],
			'dashboard_price_avg' => $data['ctg_bossing_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$ctg_bossing_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '1 PC', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_bossing_prev_year1_jan'] = 0;
		$data['ctg_bossing_prev_year1_feb'] = 0;
		$data['ctg_bossing_prev_year1_mar'] = 0;
		$data['ctg_bossing_prev_year1_apr'] = 0;
		$data['ctg_bossing_prev_year1_may'] = 0;
		$data['ctg_bossing_prev_year1_jun'] = 0;
		$data['ctg_bossing_prev_year1_jul'] = 0;
		$data['ctg_bossing_prev_year1_aug'] = 0;
		$data['ctg_bossing_prev_year1_sep'] = 0;
		$data['ctg_bossing_prev_year1_oct'] = 0;
		$data['ctg_bossing_prev_year1_nov'] = 0;
		$data['ctg_bossing_prev_year1_dec'] = 0;
		$data['ctg_bossing_prev_year1_avg'] = 0;
		$data['ctg_bossing_prev_year1_min'] = 0;
		$data['ctg_bossing_prev_year1_max'] = 0;

		foreach($ctg_bossing_prev_year1 as $row){
			$data['ctg_bossing_prev_year1_jan'] = $row->jan_price;
			$data['ctg_bossing_prev_year1_feb'] = $row->feb_price;
			$data['ctg_bossing_prev_year1_mar'] = $row->mar_price;
			$data['ctg_bossing_prev_year1_apr'] = $row->apr_price;
			$data['ctg_bossing_prev_year1_may'] = $row->may_price;
			$data['ctg_bossing_prev_year1_jun'] = $row->jun_price;
			$data['ctg_bossing_prev_year1_jul'] = $row->jul_price;
			$data['ctg_bossing_prev_year1_aug'] = $row->aug_price;
			$data['ctg_bossing_prev_year1_sep'] = $row->sep_price;
			$data['ctg_bossing_prev_year1_oct'] = $row->oct_price;
			$data['ctg_bossing_prev_year1_nov'] = $row->nov_price;
			$data['ctg_bossing_prev_year1_dec'] = $row->dec_price;
			$data['ctg_bossing_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_bossing_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_bossing_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}


		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => '1 PC',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ctg_bossing_prev_year1_jan'],
			'dashboard_price_feb' => $data['ctg_bossing_prev_year1_feb'],
			'dashboard_price_mar' => $data['ctg_bossing_prev_year1_mar'],
			'dashboard_price_apr' => $data['ctg_bossing_prev_year1_apr'],
			'dashboard_price_may' => $data['ctg_bossing_prev_year1_may'],
			'dashboard_price_june' => $data['ctg_bossing_prev_year1_jun'],
			'dashboard_price_july' => $data['ctg_bossing_prev_year1_jul'],
			'dashboard_price_aug' => $data['ctg_bossing_prev_year1_aug'],
			'dashboard_price_sep' => $data['ctg_bossing_prev_year1_sep'],
			'dashboard_price_oct' => $data['ctg_bossing_prev_year1_oct'],
			'dashboard_price_nov' => $data['ctg_bossing_prev_year1_nov'],
			'dashboard_price_dec' => $data['ctg_bossing_prev_year1_dec'],
			'dashboard_price_min' => $data['ctg_bossing_prev_year1_min'],
			'dashboard_price_max' => $data['ctg_bossing_prev_year1_max'],
			'dashboard_price_avg' => $data['ctg_bossing_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);



		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => '1 PC',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ctg_bossing1'],
			'dashboard_price_feb' => $data['ctg_bossing2'],
			'dashboard_price_mar' => $data['ctg_bossing3'],
			'dashboard_price_apr' => $data['ctg_bossing4'],
			'dashboard_price_may' => $data['ctg_bossing5'],
			'dashboard_price_june' => $data['ctg_bossing6'],
			'dashboard_price_july' => $data['ctg_bossing7'],
			'dashboard_price_aug' => $data['ctg_bossing8'],
			'dashboard_price_sep' => $data['ctg_bossing9'],
			'dashboard_price_oct' => $data['ctg_bossing10'],
			'dashboard_price_nov' => $data['ctg_bossing11'],
			'dashboard_price_dec' => $data['ctg_bossing12'],
			'dashboard_price_min' => $data['ctg_bossing_min'],
			'dashboard_price_max' => $data['ctg_bossing_max'],
			'dashboard_price_avg' => $data['ctg_bossing_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		
		/*CTG Marinated Raw*/

		$join_ctg_raw = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CHICKEN (RAW)\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_raw = $this->admin->get_join('sales_tbl a', $join_ctg_raw, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_raw1'] = 0;
		$data['ctg_raw2'] = 0;
		$data['ctg_raw3'] = 0;
		$data['ctg_raw4'] = 0;
		$data['ctg_raw5'] = 0;
		$data['ctg_raw6'] = 0;
		$data['ctg_raw7'] = 0;
		$data['ctg_raw8'] = 0;
		$data['ctg_raw9'] = 0;
		$data['ctg_raw10'] = 0;
		$data['ctg_raw11'] = 0;
		$data['ctg_raw12'] = 0;
		$data['ctg_raw_total'] = 0;
		$data['ctg_raw_count'] = 0;
		$data['ctg_raw_avg'] = 0;
		$data['ctg_raw_min'] = 0;
		$data['ctg_raw_max'] = 0;

		foreach($get_ctg_raw as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_raw' . $month] = $asp;
			$data['ctg_raw_total'] += $asp;

			if($asp < $data['ctg_raw_min'] || $data['ctg_raw_count'] == 0){
				$data['ctg_raw_min'] = $asp;
			}

			if($asp > $data['ctg_raw_max'] || $data['ctg_raw_count'] == 0){
				$data['ctg_raw_max'] = $asp;
			}

			$data['ctg_raw_count']++;
		}

		$data['ctg_raw_avg'] = $data['ctg_raw_total'] != 0 ? $data['ctg_raw_total'] / $data['ctg_raw_count'] : 0;


		$ctg_raw_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINATED CHICKEN RAW', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_raw_prev_year2_jan'] = 0;
		$data['ctg_raw_prev_year2_feb'] = 0;
		$data['ctg_raw_prev_year2_mar'] = 0;
		$data['ctg_raw_prev_year2_apr'] = 0;
		$data['ctg_raw_prev_year2_may'] = 0;
		$data['ctg_raw_prev_year2_jun'] = 0;
		$data['ctg_raw_prev_year2_jul'] = 0;
		$data['ctg_raw_prev_year2_aug'] = 0;
		$data['ctg_raw_prev_year2_sep'] = 0;
		$data['ctg_raw_prev_year2_oct'] = 0;
		$data['ctg_raw_prev_year2_nov'] = 0;
		$data['ctg_raw_prev_year2_dec'] = 0;
		$data['ctg_raw_prev_year2_avg'] = 0;
		$data['ctg_raw_prev_year2_min'] = 0;
		$data['ctg_raw_prev_year2_max'] = 0;

		foreach($ctg_raw_prev_year2 as $row){
			$data['ctg_raw_prev_year2_jan'] = $row->jan_price;
			$data['ctg_raw_prev_year2_feb'] = $row->feb_price;
			$data['ctg_raw_prev_year2_mar'] = $row->mar_price;
			$data['ctg_raw_prev_year2_apr'] = $row->apr_price;
			$data['ctg_raw_prev_year2_may'] = $row->may_price;
			$data['ctg_raw_prev_year2_jun'] = $row->jun_price;
			$data['ctg_raw_prev_year2_jul'] = $row->jul_price;
			$data['ctg_raw_prev_year2_aug'] = $row->aug_price;
			$data['ctg_raw_prev_year2_sep'] = $row->sep_price;
			$data['ctg_raw_prev_year2_oct'] = $row->oct_price;
			$data['ctg_raw_prev_year2_nov'] = $row->nov_price;
			$data['ctg_raw_prev_year2_dec'] = $row->dec_price;
			$data['ctg_raw_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_raw_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_raw_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'MARINATED CHICKEN RAW',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ctg_raw_prev_year2_jan'],
			'dashboard_price_feb' => $data['ctg_raw_prev_year2_feb'],
			'dashboard_price_mar' => $data['ctg_raw_prev_year2_mar'],
			'dashboard_price_apr' => $data['ctg_raw_prev_year2_apr'],
			'dashboard_price_may' => $data['ctg_raw_prev_year2_may'],
			'dashboard_price_june' => $data['ctg_raw_prev_year2_jun'],
			'dashboard_price_july' => $data['ctg_raw_prev_year2_jul'],
			'dashboard_price_aug' => $data['ctg_raw_prev_year2_aug'],
			'dashboard_price_sep' => $data['ctg_raw_prev_year2_sep'],
			'dashboard_price_oct' => $data['ctg_raw_prev_year2_oct'],
			'dashboard_price_nov' => $data['ctg_raw_prev_year2_nov'],
			'dashboard_price_dec' => $data['ctg_raw_prev_year2_dec'],
			'dashboard_price_min' => $data['ctg_raw_prev_year2_min'],
			'dashboard_price_max' => $data['ctg_raw_prev_year2_max'],
			'dashboard_price_avg' => $data['ctg_raw_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$ctg_raw_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINATED CHICKEN RAW', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_raw_prev_year1_jan'] = 0;
		$data['ctg_raw_prev_year1_feb'] = 0;
		$data['ctg_raw_prev_year1_mar'] = 0;
		$data['ctg_raw_prev_year1_apr'] = 0;
		$data['ctg_raw_prev_year1_may'] = 0;
		$data['ctg_raw_prev_year1_jun'] = 0;
		$data['ctg_raw_prev_year1_jul'] = 0;
		$data['ctg_raw_prev_year1_aug'] = 0;
		$data['ctg_raw_prev_year1_sep'] = 0;
		$data['ctg_raw_prev_year1_oct'] = 0;
		$data['ctg_raw_prev_year1_nov'] = 0;
		$data['ctg_raw_prev_year1_dec'] = 0;
		$data['ctg_raw_prev_year1_avg'] = 0;
		$data['ctg_raw_prev_year1_min'] = 0;
		$data['ctg_raw_prev_year1_max'] = 0;

		foreach($ctg_raw_prev_year1 as $row){
			$data['ctg_raw_prev_year1_jan'] = $row->jan_price;
			$data['ctg_raw_prev_year1_feb'] = $row->feb_price;
			$data['ctg_raw_prev_year1_mar'] = $row->mar_price;
			$data['ctg_raw_prev_year1_apr'] = $row->apr_price;
			$data['ctg_raw_prev_year1_may'] = $row->may_price;
			$data['ctg_raw_prev_year1_jun'] = $row->jun_price;
			$data['ctg_raw_prev_year1_jul'] = $row->jul_price;
			$data['ctg_raw_prev_year1_aug'] = $row->aug_price;
			$data['ctg_raw_prev_year1_sep'] = $row->sep_price;
			$data['ctg_raw_prev_year1_oct'] = $row->oct_price;
			$data['ctg_raw_prev_year1_nov'] = $row->nov_price;
			$data['ctg_raw_prev_year1_dec'] = $row->dec_price;
			$data['ctg_raw_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_raw_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_raw_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'MARINATED CHICKEN RAW',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ctg_raw_prev_year1_jan'],
			'dashboard_price_feb' => $data['ctg_raw_prev_year1_feb'],
			'dashboard_price_mar' => $data['ctg_raw_prev_year1_mar'],
			'dashboard_price_apr' => $data['ctg_raw_prev_year1_apr'],
			'dashboard_price_may' => $data['ctg_raw_prev_year1_may'],
			'dashboard_price_june' => $data['ctg_raw_prev_year1_jun'],
			'dashboard_price_july' => $data['ctg_raw_prev_year1_jul'],
			'dashboard_price_aug' => $data['ctg_raw_prev_year1_aug'],
			'dashboard_price_sep' => $data['ctg_raw_prev_year1_sep'],
			'dashboard_price_oct' => $data['ctg_raw_prev_year1_oct'],
			'dashboard_price_nov' => $data['ctg_raw_prev_year1_nov'],
			'dashboard_price_dec' => $data['ctg_raw_prev_year1_dec'],
			'dashboard_price_min' => $data['ctg_raw_prev_year1_min'],
			'dashboard_price_max' => $data['ctg_raw_prev_year1_max'],
			'dashboard_price_avg' => $data['ctg_raw_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'MARINATED CHICKEN RAW',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ctg_raw1'],
			'dashboard_price_feb' => $data['ctg_raw2'],
			'dashboard_price_mar' => $data['ctg_raw3'],
			'dashboard_price_apr' => $data['ctg_raw4'],
			'dashboard_price_may' => $data['ctg_raw5'],
			'dashboard_price_june' => $data['ctg_raw6'],
			'dashboard_price_july' => $data['ctg_raw7'],
			'dashboard_price_aug' => $data['ctg_raw8'],
			'dashboard_price_sep' => $data['ctg_raw9'],
			'dashboard_price_oct' => $data['ctg_raw10'],
			'dashboard_price_nov' => $data['ctg_raw11'],
			'dashboard_price_dec' => $data['ctg_raw12'],
			'dashboard_price_min' => $data['ctg_raw_min'],
			'dashboard_price_max' => $data['ctg_raw_max'],
			'dashboard_price_avg' => $data['ctg_raw_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		
		/*CTG Chooksies Cut ups*/

		$join_ctg_cutups = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 10000150',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'NON MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_cutups = $this->admin->get_join('sales_tbl a', $join_ctg_cutups, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_cutups1'] = 0;
		$data['ctg_cutups2'] = 0;
		$data['ctg_cutups3'] = 0;
		$data['ctg_cutups4'] = 0;
		$data['ctg_cutups5'] = 0;
		$data['ctg_cutups6'] = 0;
		$data['ctg_cutups7'] = 0;
		$data['ctg_cutups8'] = 0;
		$data['ctg_cutups9'] = 0;
		$data['ctg_cutups10'] = 0;
		$data['ctg_cutups11'] = 0;
		$data['ctg_cutups12'] = 0;
		$data['ctg_cutups_total'] = 0;
		$data['ctg_cutups_count'] = 0;
		$data['ctg_cutups_avg'] = 0;
		$data['ctg_cutups_min'] = 0;
		$data['ctg_cutups_max'] = 0;

		foreach($get_ctg_cutups as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_cutups' . $month] = $asp;
			$data['ctg_cutups_total'] += $asp;

			if($asp < $data['ctg_cutups_min'] || $data['ctg_cutups_count'] == 0){
				$data['ctg_cutups_min'] = $asp;
			}

			if($asp > $data['ctg_cutups_max'] || $data['ctg_cutups_count'] == 0){
				$data['ctg_cutups_max'] = $asp;
			}

			$data['ctg_cutups_count']++;
		}

		$data['ctg_cutups_avg'] = $data['ctg_cutups_total'] != 0 ? $data['ctg_cutups_total'] / $data['ctg_cutups_count'] : 0;

		$ctg_cutups_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES CUT UPS', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_cutups_prev_year2_jan'] = 0;
		$data['ctg_cutups_prev_year2_feb'] = 0;
		$data['ctg_cutups_prev_year2_mar'] = 0;
		$data['ctg_cutups_prev_year2_apr'] = 0;
		$data['ctg_cutups_prev_year2_may'] = 0;
		$data['ctg_cutups_prev_year2_jun'] = 0;
		$data['ctg_cutups_prev_year2_jul'] = 0;
		$data['ctg_cutups_prev_year2_aug'] = 0;
		$data['ctg_cutups_prev_year2_sep'] = 0;
		$data['ctg_cutups_prev_year2_oct'] = 0;
		$data['ctg_cutups_prev_year2_nov'] = 0;
		$data['ctg_cutups_prev_year2_dec'] = 0;
		$data['ctg_cutups_prev_year2_avg'] = 0;
		$data['ctg_cutups_prev_year2_min'] = 0;
		$data['ctg_cutups_prev_year2_max'] = 0;

		foreach($ctg_cutups_prev_year2 as $row){
			$data['ctg_cutups_prev_year2_jan'] = $row->jan_price;
			$data['ctg_cutups_prev_year2_feb'] = $row->feb_price;
			$data['ctg_cutups_prev_year2_mar'] = $row->mar_price;
			$data['ctg_cutups_prev_year2_apr'] = $row->apr_price;
			$data['ctg_cutups_prev_year2_may'] = $row->may_price;
			$data['ctg_cutups_prev_year2_jun'] = $row->jun_price;
			$data['ctg_cutups_prev_year2_jul'] = $row->jul_price;
			$data['ctg_cutups_prev_year2_aug'] = $row->aug_price;
			$data['ctg_cutups_prev_year2_sep'] = $row->sep_price;
			$data['ctg_cutups_prev_year2_oct'] = $row->oct_price;
			$data['ctg_cutups_prev_year2_nov'] = $row->nov_price;
			$data['ctg_cutups_prev_year2_dec'] = $row->dec_price;
			$data['ctg_cutups_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_cutups_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_cutups_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'CHOOKSIES CUT UPS',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ctg_cutups_prev_year2_jan'],
			'dashboard_price_feb' => $data['ctg_cutups_prev_year2_feb'],
			'dashboard_price_mar' => $data['ctg_cutups_prev_year2_mar'],
			'dashboard_price_apr' => $data['ctg_cutups_prev_year2_apr'],
			'dashboard_price_may' => $data['ctg_cutups_prev_year2_may'],
			'dashboard_price_june' => $data['ctg_cutups_prev_year2_jun'],
			'dashboard_price_july' => $data['ctg_cutups_prev_year2_jul'],
			'dashboard_price_aug' => $data['ctg_cutups_prev_year2_aug'],
			'dashboard_price_sep' => $data['ctg_cutups_prev_year2_sep'],
			'dashboard_price_oct' => $data['ctg_cutups_prev_year2_oct'],
			'dashboard_price_nov' => $data['ctg_cutups_prev_year2_nov'],
			'dashboard_price_dec' => $data['ctg_cutups_prev_year2_dec'],
			'dashboard_price_min' => $data['ctg_cutups_prev_year2_min'],
			'dashboard_price_max' => $data['ctg_cutups_prev_year2_max'],
			'dashboard_price_avg' => $data['ctg_cutups_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$ctg_cutups_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES CUT UPS', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_cutups_prev_year1_jan'] = 0;
		$data['ctg_cutups_prev_year1_feb'] = 0;
		$data['ctg_cutups_prev_year1_mar'] = 0;
		$data['ctg_cutups_prev_year1_apr'] = 0;
		$data['ctg_cutups_prev_year1_may'] = 0;
		$data['ctg_cutups_prev_year1_jun'] = 0;
		$data['ctg_cutups_prev_year1_jul'] = 0;
		$data['ctg_cutups_prev_year1_aug'] = 0;
		$data['ctg_cutups_prev_year1_sep'] = 0;
		$data['ctg_cutups_prev_year1_oct'] = 0;
		$data['ctg_cutups_prev_year1_nov'] = 0;
		$data['ctg_cutups_prev_year1_dec'] = 0;
		$data['ctg_cutups_prev_year1_avg'] = 0;
		$data['ctg_cutups_prev_year1_min'] = 0;
		$data['ctg_cutups_prev_year1_max'] = 0;

		foreach($ctg_cutups_prev_year1 as $row){
			$data['ctg_cutups_prev_year1_jan'] = $row->jan_price;
			$data['ctg_cutups_prev_year1_feb'] = $row->feb_price;
			$data['ctg_cutups_prev_year1_mar'] = $row->mar_price;
			$data['ctg_cutups_prev_year1_apr'] = $row->apr_price;
			$data['ctg_cutups_prev_year1_may'] = $row->may_price;
			$data['ctg_cutups_prev_year1_jun'] = $row->jun_price;
			$data['ctg_cutups_prev_year1_jul'] = $row->jul_price;
			$data['ctg_cutups_prev_year1_aug'] = $row->aug_price;
			$data['ctg_cutups_prev_year1_sep'] = $row->sep_price;
			$data['ctg_cutups_prev_year1_oct'] = $row->oct_price;
			$data['ctg_cutups_prev_year1_nov'] = $row->nov_price;
			$data['ctg_cutups_prev_year1_dec'] = $row->dec_price;
			$data['ctg_cutups_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_cutups_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_cutups_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'CHOOKSIES CUT UPS',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ctg_cutups_prev_year1_jan'],
			'dashboard_price_feb' => $data['ctg_cutups_prev_year1_feb'],
			'dashboard_price_mar' => $data['ctg_cutups_prev_year1_mar'],
			'dashboard_price_apr' => $data['ctg_cutups_prev_year1_apr'],
			'dashboard_price_may' => $data['ctg_cutups_prev_year1_may'],
			'dashboard_price_june' => $data['ctg_cutups_prev_year1_jun'],
			'dashboard_price_july' => $data['ctg_cutups_prev_year1_jul'],
			'dashboard_price_aug' => $data['ctg_cutups_prev_year1_aug'],
			'dashboard_price_sep' => $data['ctg_cutups_prev_year1_sep'],
			'dashboard_price_oct' => $data['ctg_cutups_prev_year1_oct'],
			'dashboard_price_nov' => $data['ctg_cutups_prev_year1_nov'],
			'dashboard_price_dec' => $data['ctg_cutups_prev_year1_dec'],
			'dashboard_price_min' => $data['ctg_cutups_prev_year1_min'],
			'dashboard_price_max' => $data['ctg_cutups_prev_year1_max'],
			'dashboard_price_avg' => $data['ctg_cutups_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'CHOOKSIES CUT UPS',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ctg_cutups1'],
			'dashboard_price_feb' => $data['ctg_cutups2'],
			'dashboard_price_mar' => $data['ctg_cutups3'],
			'dashboard_price_apr' => $data['ctg_cutups4'],
			'dashboard_price_may' => $data['ctg_cutups5'],
			'dashboard_price_june' => $data['ctg_cutups6'],
			'dashboard_price_july' => $data['ctg_cutups7'],
			'dashboard_price_aug' => $data['ctg_cutups8'],
			'dashboard_price_sep' => $data['ctg_cutups9'],
			'dashboard_price_oct' => $data['ctg_cutups10'],
			'dashboard_price_nov' => $data['ctg_cutups11'],
			'dashboard_price_dec' => $data['ctg_cutups12'],
			'dashboard_price_min' => $data['ctg_cutups_min'],
			'dashboard_price_max' => $data['ctg_cutups_max'],
			'dashboard_price_avg' => $data['ctg_cutups_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		
		/*CTG Liver / Gizzard*/

		$join_ctg_liver = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVER / GIZZARD\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS-TO-GO\''
		);

		$get_ctg_liver = $this->admin->get_join('sales_tbl a', $join_ctg_liver, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ctg_liver1'] = 0;
		$data['ctg_liver2'] = 0;
		$data['ctg_liver3'] = 0;
		$data['ctg_liver4'] = 0;
		$data['ctg_liver5'] = 0;
		$data['ctg_liver6'] = 0;
		$data['ctg_liver7'] = 0;
		$data['ctg_liver8'] = 0;
		$data['ctg_liver9'] = 0;
		$data['ctg_liver10'] = 0;
		$data['ctg_liver11'] = 0;
		$data['ctg_liver12'] = 0;
		$data['ctg_liver_total'] = 0;
		$data['ctg_liver_count'] = 0;
		$data['ctg_liver_avg'] = 0;
		$data['ctg_liver_min'] = 0;
		$data['ctg_liver_max'] = 0;

		foreach($get_ctg_liver as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ctg_liver' . $month] = $asp;
			$data['ctg_liver_total'] += $asp;

			if($asp < $data['ctg_liver_min'] || $data['ctg_liver_count'] == 0){
				$data['ctg_liver_min'] = $asp;
			}

			if($asp > $data['ctg_liver_max'] || $data['ctg_liver_count'] == 0){
				$data['ctg_liver_max'] = $asp;
			}

			$data['ctg_liver_count']++;
		}

		$data['ctg_liver_avg'] = $data['ctg_liver_total'] != 0 ? $data['ctg_liver_total'] / $data['ctg_liver_count'] : 0;


		$ctg_liver_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'GIZZARD / LIVER', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_liver_prev_year2_jan'] = 0;
		$data['ctg_liver_prev_year2_feb'] = 0;
		$data['ctg_liver_prev_year2_mar'] = 0;
		$data['ctg_liver_prev_year2_apr'] = 0;
		$data['ctg_liver_prev_year2_may'] = 0;
		$data['ctg_liver_prev_year2_jun'] = 0;
		$data['ctg_liver_prev_year2_jul'] = 0;
		$data['ctg_liver_prev_year2_aug'] = 0;
		$data['ctg_liver_prev_year2_sep'] = 0;
		$data['ctg_liver_prev_year2_oct'] = 0;
		$data['ctg_liver_prev_year2_nov'] = 0;
		$data['ctg_liver_prev_year2_dec'] = 0;
		$data['ctg_liver_prev_year2_avg'] = 0;
		$data['ctg_liver_prev_year2_min'] = 0;
		$data['ctg_liver_prev_year2_max'] = 0;

		foreach($ctg_liver_prev_year2 as $row){
			$data['ctg_liver_prev_year2_jan'] = $row->jan_price;
			$data['ctg_liver_prev_year2_feb'] = $row->feb_price;
			$data['ctg_liver_prev_year2_mar'] = $row->mar_price;
			$data['ctg_liver_prev_year2_apr'] = $row->apr_price;
			$data['ctg_liver_prev_year2_may'] = $row->may_price;
			$data['ctg_liver_prev_year2_jun'] = $row->jun_price;
			$data['ctg_liver_prev_year2_jul'] = $row->jul_price;
			$data['ctg_liver_prev_year2_aug'] = $row->aug_price;
			$data['ctg_liver_prev_year2_sep'] = $row->sep_price;
			$data['ctg_liver_prev_year2_oct'] = $row->oct_price;
			$data['ctg_liver_prev_year2_nov'] = $row->nov_price;
			$data['ctg_liver_prev_year2_dec'] = $row->dec_price;
			$data['ctg_liver_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_liver_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_liver_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'GIZZARD / LIVER',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ctg_liver_prev_year2_jan'],
			'dashboard_price_feb' => $data['ctg_liver_prev_year2_feb'],
			'dashboard_price_mar' => $data['ctg_liver_prev_year2_mar'],
			'dashboard_price_apr' => $data['ctg_liver_prev_year2_apr'],
			'dashboard_price_may' => $data['ctg_liver_prev_year2_may'],
			'dashboard_price_june' => $data['ctg_liver_prev_year2_jun'],
			'dashboard_price_july' => $data['ctg_liver_prev_year2_jul'],
			'dashboard_price_aug' => $data['ctg_liver_prev_year2_aug'],
			'dashboard_price_sep' => $data['ctg_liver_prev_year2_sep'],
			'dashboard_price_oct' => $data['ctg_liver_prev_year2_oct'],
			'dashboard_price_nov' => $data['ctg_liver_prev_year2_nov'],
			'dashboard_price_dec' => $data['ctg_liver_prev_year2_dec'],
			'dashboard_price_min' => $data['ctg_liver_prev_year2_min'],
			'dashboard_price_max' => $data['ctg_liver_prev_year2_max'],
			'dashboard_price_avg' => $data['ctg_liver_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$ctg_liver_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'GIZZARD / LIVER', 'comp_price_segment' => 'CTG', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ctg_liver_prev_year1_jan'] = 0;
		$data['ctg_liver_prev_year1_feb'] = 0;
		$data['ctg_liver_prev_year1_mar'] = 0;
		$data['ctg_liver_prev_year1_apr'] = 0;
		$data['ctg_liver_prev_year1_may'] = 0;
		$data['ctg_liver_prev_year1_jun'] = 0;
		$data['ctg_liver_prev_year1_jul'] = 0;
		$data['ctg_liver_prev_year1_aug'] = 0;
		$data['ctg_liver_prev_year1_sep'] = 0;
		$data['ctg_liver_prev_year1_oct'] = 0;
		$data['ctg_liver_prev_year1_nov'] = 0;
		$data['ctg_liver_prev_year1_dec'] = 0;
		$data['ctg_liver_prev_year1_avg'] = 0;
		$data['ctg_liver_prev_year1_min'] = 0;
		$data['ctg_liver_prev_year1_max'] = 0;

		foreach($ctg_liver_prev_year1 as $row){
			$data['ctg_liver_prev_year1_jan'] = $row->jan_price;
			$data['ctg_liver_prev_year1_feb'] = $row->feb_price;
			$data['ctg_liver_prev_year1_mar'] = $row->mar_price;
			$data['ctg_liver_prev_year1_apr'] = $row->apr_price;
			$data['ctg_liver_prev_year1_may'] = $row->may_price;
			$data['ctg_liver_prev_year1_jun'] = $row->jun_price;
			$data['ctg_liver_prev_year1_jul'] = $row->jul_price;
			$data['ctg_liver_prev_year1_aug'] = $row->aug_price;
			$data['ctg_liver_prev_year1_sep'] = $row->sep_price;
			$data['ctg_liver_prev_year1_oct'] = $row->oct_price;
			$data['ctg_liver_prev_year1_nov'] = $row->nov_price;
			$data['ctg_liver_prev_year1_dec'] = $row->dec_price;
			$data['ctg_liver_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_liver_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ctg_liver_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'GIZZARD / LIVER',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ctg_liver_prev_year1_jan'],
			'dashboard_price_feb' => $data['ctg_liver_prev_year1_feb'],
			'dashboard_price_mar' => $data['ctg_liver_prev_year1_mar'],
			'dashboard_price_apr' => $data['ctg_liver_prev_year1_apr'],
			'dashboard_price_may' => $data['ctg_liver_prev_year1_may'],
			'dashboard_price_june' => $data['ctg_liver_prev_year1_jun'],
			'dashboard_price_july' => $data['ctg_liver_prev_year1_jul'],
			'dashboard_price_aug' => $data['ctg_liver_prev_year1_aug'],
			'dashboard_price_sep' => $data['ctg_liver_prev_year1_sep'],
			'dashboard_price_oct' => $data['ctg_liver_prev_year1_oct'],
			'dashboard_price_nov' => $data['ctg_liver_prev_year1_nov'],
			'dashboard_price_dec' => $data['ctg_liver_prev_year1_dec'],
			'dashboard_price_min' => $data['ctg_liver_prev_year1_min'],
			'dashboard_price_max' => $data['ctg_liver_prev_year1_max'],
			'dashboard_price_avg' => $data['ctg_liver_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'CTG',
			'dashboard_price_product' => 'GIZZARD / LIVER',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ctg_liver1'],
			'dashboard_price_feb' => $data['ctg_liver2'],
			'dashboard_price_mar' => $data['ctg_liver3'],
			'dashboard_price_apr' => $data['ctg_liver4'],
			'dashboard_price_may' => $data['ctg_liver5'],
			'dashboard_price_june' => $data['ctg_liver6'],
			'dashboard_price_july' => $data['ctg_liver7'],
			'dashboard_price_aug' => $data['ctg_liver8'],
			'dashboard_price_sep' => $data['ctg_liver9'],
			'dashboard_price_oct' => $data['ctg_liver10'],
			'dashboard_price_nov' => $data['ctg_liver11'],
			'dashboard_price_dec' => $data['ctg_liver12'],
			'dashboard_price_min' => $data['ctg_liver_min'],
			'dashboard_price_max' => $data['ctg_liver_max'],
			'dashboard_price_avg' => $data['ctg_liver_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*Uling Roasters*/

		/*UR Chicken*/

		/*UR Special TO IMPROVED UR HOT AND SPICY*/
		$join_ur_improved_hot_and_spicy = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code IN (1001363, 1001368, 10400661, 10401005, 10401011, 10401012, 10401006, 10400656, 10400666, 10400765)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_improved_hot_and_spicy = $this->admin->get_join('sales_tbl a', $join_ur_improved_hot_and_spicy, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_improved_hot_and_spicy1'] = 0;
		$data['ur_improved_hot_and_spicy2'] = 0;
		$data['ur_improved_hot_and_spicy3'] = 0;
		$data['ur_improved_hot_and_spicy4'] = 0;
		$data['ur_improved_hot_and_spicy5'] = 0;
		$data['ur_improved_hot_and_spicy6'] = 0;
		$data['ur_improved_hot_and_spicy7'] = 0;
		$data['ur_improved_hot_and_spicy8'] = 0;
		$data['ur_improved_hot_and_spicy9'] = 0;
		$data['ur_improved_hot_and_spicy10'] = 0;
		$data['ur_improved_hot_and_spicy11'] = 0;
		$data['ur_improved_hot_and_spicy12'] = 0;
		$data['ur_improved_hot_and_spicy_total'] = 0;
		$data['ur_improved_hot_and_spicy_count'] = 0;
		$data['ur_improved_hot_and_spicy_avg'] = 0;
		$data['ur_improved_hot_and_spicy_min'] = 0;
		$data['ur_improved_hot_and_spicy_max'] = 0;

		foreach($get_ur_improved_hot_and_spicy as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_improved_hot_and_spicy' . $month] = $asp;
			$data['ur_improved_hot_and_spicy_total'] += $asp;

			if($asp < $data['ur_improved_hot_and_spicy_min'] || $data['ur_improved_hot_and_spicy_count'] == 0){
				$data['ur_improved_hot_and_spicy_min'] = $asp;
			}

			if($asp > $data['ur_improved_hot_and_spicy_max'] || $data['ur_improved_hot_and_spicy_count'] == 0){
				$data['ur_improved_hot_and_spicy_max'] = $asp;
			}

			$data['ur_improved_hot_and_spicy_count']++;
		}

		$data['ur_improved_hot_and_spicy_avg'] = $data['ur_improved_hot_and_spicy_total'] != 0 ? $data['ur_improved_hot_and_spicy_total'] / $data['ur_improved_hot_and_spicy_count'] : 0;

		$ur_improved_hot_and_spicy_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'IMPROVED UR HOT AND SPICY', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_improved_hot_and_spicy_prev_year2_jan'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year2_feb'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year2_mar'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year2_apr'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year2_may'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year2_jun'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year2_jul'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year2_aug'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year2_sep'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year2_oct'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year2_nov'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year2_dec'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year2_avg'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year2_min'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year2_max'] = 0;

		foreach($ur_improved_hot_and_spicy_prev_year2 as $row){
			$data['ur_improved_hot_and_spicy_prev_year2_jan'] = $row->jan_price;
			$data['ur_improved_hot_and_spicy_prev_year2_feb'] = $row->feb_price;
			$data['ur_improved_hot_and_spicy_prev_year2_mar'] = $row->mar_price;
			$data['ur_improved_hot_and_spicy_prev_year2_apr'] = $row->apr_price;
			$data['ur_improved_hot_and_spicy_prev_year2_may'] = $row->may_price;
			$data['ur_improved_hot_and_spicy_prev_year2_jun'] = $row->jun_price;
			$data['ur_improved_hot_and_spicy_prev_year2_jul'] = $row->jul_price;
			$data['ur_improved_hot_and_spicy_prev_year2_aug'] = $row->aug_price;
			$data['ur_improved_hot_and_spicy_prev_year2_sep'] = $row->sep_price;
			$data['ur_improved_hot_and_spicy_prev_year2_oct'] = $row->oct_price;
			$data['ur_improved_hot_and_spicy_prev_year2_nov'] = $row->nov_price;
			$data['ur_improved_hot_and_spicy_prev_year2_dec'] = $row->dec_price;
			$data['ur_improved_hot_and_spicy_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_improved_hot_and_spicy_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_improved_hot_and_spicy_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'IMPROVED UR HOT AND SPICY',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ur_improved_hot_and_spicy_prev_year2_jan'],
			'dashboard_price_feb' => $data['ur_improved_hot_and_spicy_prev_year2_feb'],
			'dashboard_price_mar' => $data['ur_improved_hot_and_spicy_prev_year2_mar'],
			'dashboard_price_apr' => $data['ur_improved_hot_and_spicy_prev_year2_apr'],
			'dashboard_price_may' => $data['ur_improved_hot_and_spicy_prev_year2_may'],
			'dashboard_price_june' => $data['ur_improved_hot_and_spicy_prev_year2_jun'],
			'dashboard_price_july' => $data['ur_improved_hot_and_spicy_prev_year2_jul'],
			'dashboard_price_aug' => $data['ur_improved_hot_and_spicy_prev_year2_aug'],
			'dashboard_price_sep' => $data['ur_improved_hot_and_spicy_prev_year2_sep'],
			'dashboard_price_oct' => $data['ur_improved_hot_and_spicy_prev_year2_oct'],
			'dashboard_price_nov' => $data['ur_improved_hot_and_spicy_prev_year2_nov'],
			'dashboard_price_dec' => $data['ur_improved_hot_and_spicy_prev_year2_dec'],
			'dashboard_price_min' => $data['ur_improved_hot_and_spicy_prev_year2_min'],
			'dashboard_price_max' => $data['ur_improved_hot_and_spicy_prev_year2_max'],
			'dashboard_price_avg' => $data['ur_improved_hot_and_spicy_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$ur_improved_hot_and_spicy_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'IMPROVED UR HOT AND SPICY', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_improved_hot_and_spicy_prev_year1_jan'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year1_feb'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year1_mar'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year1_apr'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year1_may'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year1_jun'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year1_jul'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year1_aug'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year1_sep'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year1_oct'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year1_nov'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year1_dec'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year1_avg'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year1_min'] = 0;
		$data['ur_improved_hot_and_spicy_prev_year1_max'] = 0;

		foreach($ur_improved_hot_and_spicy_prev_year1 as $row){
			$data['ur_improved_hot_and_spicy_prev_year1_jan'] = $row->jan_price;
			$data['ur_improved_hot_and_spicy_prev_year1_feb'] = $row->feb_price;
			$data['ur_improved_hot_and_spicy_prev_year1_mar'] = $row->mar_price;
			$data['ur_improved_hot_and_spicy_prev_year1_apr'] = $row->apr_price;
			$data['ur_improved_hot_and_spicy_prev_year1_may'] = $row->may_price;
			$data['ur_improved_hot_and_spicy_prev_year1_jun'] = $row->jun_price;
			$data['ur_improved_hot_and_spicy_prev_year1_jul'] = $row->jul_price;
			$data['ur_improved_hot_and_spicy_prev_year1_aug'] = $row->aug_price;
			$data['ur_improved_hot_and_spicy_prev_year1_sep'] = $row->sep_price;
			$data['ur_improved_hot_and_spicy_prev_year1_oct'] = $row->oct_price;
			$data['ur_improved_hot_and_spicy_prev_year1_nov'] = $row->nov_price;
			$data['ur_improved_hot_and_spicy_prev_year1_dec'] = $row->dec_price;
			$data['ur_improved_hot_and_spicy_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_improved_hot_and_spicy_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_improved_hot_and_spicy_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'IMPROVED UR HOT AND SPICY',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ur_improved_hot_and_spicy_prev_year1_jan'],
			'dashboard_price_feb' => $data['ur_improved_hot_and_spicy_prev_year1_feb'],
			'dashboard_price_mar' => $data['ur_improved_hot_and_spicy_prev_year1_mar'],
			'dashboard_price_apr' => $data['ur_improved_hot_and_spicy_prev_year1_apr'],
			'dashboard_price_may' => $data['ur_improved_hot_and_spicy_prev_year1_may'],
			'dashboard_price_june' => $data['ur_improved_hot_and_spicy_prev_year1_jun'],
			'dashboard_price_july' => $data['ur_improved_hot_and_spicy_prev_year1_jul'],
			'dashboard_price_aug' => $data['ur_improved_hot_and_spicy_prev_year1_aug'],
			'dashboard_price_sep' => $data['ur_improved_hot_and_spicy_prev_year1_sep'],
			'dashboard_price_oct' => $data['ur_improved_hot_and_spicy_prev_year1_oct'],
			'dashboard_price_nov' => $data['ur_improved_hot_and_spicy_prev_year1_nov'],
			'dashboard_price_dec' => $data['ur_improved_hot_and_spicy_prev_year1_dec'],
			'dashboard_price_min' => $data['ur_improved_hot_and_spicy_prev_year1_min'],
			'dashboard_price_max' => $data['ur_improved_hot_and_spicy_prev_year1_max'],
			'dashboard_price_avg' => $data['ur_improved_hot_and_spicy_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'IMPROVED UR HOT AND SPICY',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ur_improved_hot_and_spicy1'],
			'dashboard_price_feb' => $data['ur_improved_hot_and_spicy2'],
			'dashboard_price_mar' => $data['ur_improved_hot_and_spicy3'],
			'dashboard_price_apr' => $data['ur_improved_hot_and_spicy4'],
			'dashboard_price_may' => $data['ur_improved_hot_and_spicy5'],
			'dashboard_price_june' => $data['ur_improved_hot_and_spicy6'],
			'dashboard_price_july' => $data['ur_improved_hot_and_spicy7'],
			'dashboard_price_aug' => $data['ur_improved_hot_and_spicy8'],
			'dashboard_price_sep' => $data['ur_improved_hot_and_spicy9'],
			'dashboard_price_oct' => $data['ur_improved_hot_and_spicy10'],
			'dashboard_price_nov' => $data['ur_improved_hot_and_spicy11'],
			'dashboard_price_dec' => $data['ur_improved_hot_and_spicy12'],
			'dashboard_price_min' => $data['ur_improved_hot_and_spicy_min'],
			'dashboard_price_max' => $data['ur_improved_hot_and_spicy_max'],
			'dashboard_price_avg' => $data['ur_improved_hot_and_spicy_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);
		

		/*IMPROVED INASAL CLASSIC  TO IMPROVED UR INASAL CLASSIC*/
		$join_ur_improved_inasal_classic = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code IN (1001365, 1001370, 10401013, 10401014, 10400658, 10400663, 10401001, 10401002, 10400232, 10400668)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_improved_inasal_classic = $this->admin->get_join('sales_tbl a', $join_ur_improved_inasal_classic, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_improved_inasal_classic1'] = 0;
		$data['ur_improved_inasal_classic2'] = 0;
		$data['ur_improved_inasal_classic3'] = 0;
		$data['ur_improved_inasal_classic4'] = 0;
		$data['ur_improved_inasal_classic5'] = 0;
		$data['ur_improved_inasal_classic6'] = 0;
		$data['ur_improved_inasal_classic7'] = 0;
		$data['ur_improved_inasal_classic8'] = 0;
		$data['ur_improved_inasal_classic9'] = 0;
		$data['ur_improved_inasal_classic10'] = 0;
		$data['ur_improved_inasal_classic11'] = 0;
		$data['ur_improved_inasal_classic12'] = 0;
		$data['ur_improved_inasal_classic_total'] = 0;
		$data['ur_improved_inasal_classic_count'] = 0;
		$data['ur_improved_inasal_classic_avg'] = 0;
		$data['ur_improved_inasal_classic_min'] = 0;
		$data['ur_improved_inasal_classic_max'] = 0;

		foreach($get_ur_improved_inasal_classic as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_improved_inasal_classic' . $month] = $asp;
			$data['ur_improved_inasal_classic_total'] += $asp;

			if($asp < $data['ur_improved_inasal_classic_min'] || $data['ur_improved_inasal_classic_count'] == 0){
				$data['ur_improved_inasal_classic_min'] = $asp;
			}

			if($asp > $data['ur_improved_inasal_classic_max'] || $data['ur_improved_inasal_classic_count'] == 0){
				$data['ur_improved_inasal_classic_max'] = $asp;
			}

			$data['ur_improved_inasal_classic_count']++;
		}

		$data['ur_improved_inasal_classic_avg'] = $data['ur_improved_inasal_classic_total'] != 0 ? $data['ur_improved_inasal_classic_total'] / $data['ur_improved_inasal_classic_count'] : 0;

		$ur_improved_inasal_classic_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'IMPROVED INASAL CLASSIC', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_improved_inasal_classic_prev_year2_jan'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_feb'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_mar'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_apr'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_may'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_jun'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_jul'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_aug'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_sep'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_oct'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_nov'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_dec'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_avg'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_min'] = 0;
		$data['ur_improved_inasal_classic_prev_year2_max'] = 0;

		foreach($ur_improved_inasal_classic_prev_year2 as $row){
			$data['ur_improved_inasal_classic_prev_year2_jan'] = $row->jan_price;
			$data['ur_improved_inasal_classic_prev_year2_feb'] = $row->feb_price;
			$data['ur_improved_inasal_classic_prev_year2_mar'] = $row->mar_price;
			$data['ur_improved_inasal_classic_prev_year2_apr'] = $row->apr_price;
			$data['ur_improved_inasal_classic_prev_year2_may'] = $row->may_price;
			$data['ur_improved_inasal_classic_prev_year2_jun'] = $row->jun_price;
			$data['ur_improved_inasal_classic_prev_year2_jul'] = $row->jul_price;
			$data['ur_improved_inasal_classic_prev_year2_aug'] = $row->aug_price;
			$data['ur_improved_inasal_classic_prev_year2_sep'] = $row->sep_price;
			$data['ur_improved_inasal_classic_prev_year2_oct'] = $row->oct_price;
			$data['ur_improved_inasal_classic_prev_year2_nov'] = $row->nov_price;
			$data['ur_improved_inasal_classic_prev_year2_dec'] = $row->dec_price;
			$data['ur_improved_inasal_classic_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_improved_inasal_classic_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_improved_inasal_classic_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'IMPROVED INASAL CLASSIC',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ur_improved_inasal_classic_prev_year2_jan'],
			'dashboard_price_feb' => $data['ur_improved_inasal_classic_prev_year2_feb'],
			'dashboard_price_mar' => $data['ur_improved_inasal_classic_prev_year2_mar'],
			'dashboard_price_apr' => $data['ur_improved_inasal_classic_prev_year2_apr'],
			'dashboard_price_may' => $data['ur_improved_inasal_classic_prev_year2_may'],
			'dashboard_price_june' => $data['ur_improved_inasal_classic_prev_year2_jun'],
			'dashboard_price_july' => $data['ur_improved_inasal_classic_prev_year2_jul'],
			'dashboard_price_aug' => $data['ur_improved_inasal_classic_prev_year2_aug'],
			'dashboard_price_sep' => $data['ur_improved_inasal_classic_prev_year2_sep'],
			'dashboard_price_oct' => $data['ur_improved_inasal_classic_prev_year2_oct'],
			'dashboard_price_nov' => $data['ur_improved_inasal_classic_prev_year2_nov'],
			'dashboard_price_dec' => $data['ur_improved_inasal_classic_prev_year2_dec'],
			'dashboard_price_min' => $data['ur_improved_inasal_classic_prev_year2_min'],
			'dashboard_price_max' => $data['ur_improved_inasal_classic_prev_year2_max'],
			'dashboard_price_avg' => $data['ur_improved_inasal_classic_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);



		$ur_improved_inasal_classic_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'IMPROVED INASAL CLASSIC', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_improved_inasal_classic_prev_year1_jan'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_feb'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_mar'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_apr'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_may'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_jun'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_jul'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_aug'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_sep'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_oct'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_nov'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_dec'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_avg'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_min'] = 0;
		$data['ur_improved_inasal_classic_prev_year1_max'] = 0;

		foreach($ur_improved_inasal_classic_prev_year1 as $row){
			$data['ur_improved_inasal_classic_prev_year1_jan'] = $row->jan_price;
			$data['ur_improved_inasal_classic_prev_year1_feb'] = $row->feb_price;
			$data['ur_improved_inasal_classic_prev_year1_mar'] = $row->mar_price;
			$data['ur_improved_inasal_classic_prev_year1_apr'] = $row->apr_price;
			$data['ur_improved_inasal_classic_prev_year1_may'] = $row->may_price;
			$data['ur_improved_inasal_classic_prev_year1_jun'] = $row->jun_price;
			$data['ur_improved_inasal_classic_prev_year1_jul'] = $row->jul_price;
			$data['ur_improved_inasal_classic_prev_year1_aug'] = $row->aug_price;
			$data['ur_improved_inasal_classic_prev_year1_sep'] = $row->sep_price;
			$data['ur_improved_inasal_classic_prev_year1_oct'] = $row->oct_price;
			$data['ur_improved_inasal_classic_prev_year1_nov'] = $row->nov_price;
			$data['ur_improved_inasal_classic_prev_year1_dec'] = $row->dec_price;
			$data['ur_improved_inasal_classic_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_improved_inasal_classic_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_improved_inasal_classic_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'IMPROVED INASAL CLASSIC',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ur_improved_inasal_classic_prev_year1_jan'],
			'dashboard_price_feb' => $data['ur_improved_inasal_classic_prev_year1_feb'],
			'dashboard_price_mar' => $data['ur_improved_inasal_classic_prev_year1_mar'],
			'dashboard_price_apr' => $data['ur_improved_inasal_classic_prev_year1_apr'],
			'dashboard_price_may' => $data['ur_improved_inasal_classic_prev_year1_may'],
			'dashboard_price_june' => $data['ur_improved_inasal_classic_prev_year1_jun'],
			'dashboard_price_july' => $data['ur_improved_inasal_classic_prev_year1_jul'],
			'dashboard_price_aug' => $data['ur_improved_inasal_classic_prev_year1_aug'],
			'dashboard_price_sep' => $data['ur_improved_inasal_classic_prev_year1_sep'],
			'dashboard_price_oct' => $data['ur_improved_inasal_classic_prev_year1_oct'],
			'dashboard_price_nov' => $data['ur_improved_inasal_classic_prev_year1_nov'],
			'dashboard_price_dec' => $data['ur_improved_inasal_classic_prev_year1_dec'],
			'dashboard_price_min' => $data['ur_improved_inasal_classic_prev_year1_min'],
			'dashboard_price_max' => $data['ur_improved_inasal_classic_prev_year1_max'],
			'dashboard_price_avg' => $data['ur_improved_inasal_classic_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'IMPROVED INASAL CLASSIC',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ur_improved_inasal_classic1'],
			'dashboard_price_feb' => $data['ur_improved_inasal_classic2'],
			'dashboard_price_mar' => $data['ur_improved_inasal_classic3'],
			'dashboard_price_apr' => $data['ur_improved_inasal_classic4'],
			'dashboard_price_may' => $data['ur_improved_inasal_classic5'],
			'dashboard_price_june' => $data['ur_improved_inasal_classic6'],
			'dashboard_price_july' => $data['ur_improved_inasal_classic7'],
			'dashboard_price_aug' => $data['ur_improved_inasal_classic8'],
			'dashboard_price_sep' => $data['ur_improved_inasal_classic9'],
			'dashboard_price_oct' => $data['ur_improved_inasal_classic10'],
			'dashboard_price_nov' => $data['ur_improved_inasal_classic11'],
			'dashboard_price_dec' => $data['ur_improved_inasal_classic12'],
			'dashboard_price_min' => $data['ur_improved_inasal_classic_min'],
			'dashboard_price_max' => $data['ur_improved_inasal_classic_max'],
			'dashboard_price_avg' => $data['ur_improved_inasal_classic_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		
		/*IMPROVED SWEET AND SPICY TO IMPROVED SWEET AND SPICY*/

		$join_ur_improved_sweet_and_spicy = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code IN (1001366, 10400659, 10400664, 1001371, 10401003, 10401004, 10401009, 10401010, 10400244, 10400670)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_improved_sweet_and_spicy = $this->admin->get_join('sales_tbl a', $join_ur_improved_sweet_and_spicy, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_improved_sweet_and_spicy1'] = 0;
		$data['ur_improved_sweet_and_spicy2'] = 0;
		$data['ur_improved_sweet_and_spicy3'] = 0;
		$data['ur_improved_sweet_and_spicy4'] = 0;
		$data['ur_improved_sweet_and_spicy5'] = 0;
		$data['ur_improved_sweet_and_spicy6'] = 0;
		$data['ur_improved_sweet_and_spicy7'] = 0;
		$data['ur_improved_sweet_and_spicy8'] = 0;
		$data['ur_improved_sweet_and_spicy9'] = 0;
		$data['ur_improved_sweet_and_spicy10'] = 0;
		$data['ur_improved_sweet_and_spicy11'] = 0;
		$data['ur_improved_sweet_and_spicy12'] = 0;
		$data['ur_improved_sweet_and_spicy_total'] = 0;
		$data['ur_improved_sweet_and_spicy_count'] = 0;
		$data['ur_improved_sweet_and_spicy_avg'] = 0;
		$data['ur_improved_sweet_and_spicy_min'] = 0;
		$data['ur_improved_sweet_and_spicy_max'] = 0;

		foreach($get_ur_improved_sweet_and_spicy as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_improved_sweet_and_spicy' . $month] = $asp;
			$data['ur_improved_sweet_and_spicy_total'] += $asp;

			if($asp < $data['ur_improved_sweet_and_spicy_min'] || $data['ur_improved_sweet_and_spicy_count'] == 0){
				$data['ur_improved_sweet_and_spicy_min'] = $asp;
			}

			if($asp > $data['ur_improved_sweet_and_spicy_max'] || $data['ur_improved_sweet_and_spicy_count'] == 0){
				$data['ur_improved_sweet_and_spicy_max'] = $asp;
			}

			$data['ur_improved_sweet_and_spicy_count']++;
		}

		$data['ur_improved_sweet_and_spicy_avg'] = $data['ur_improved_sweet_and_spicy_total'] != 0 ? $data['ur_improved_sweet_and_spicy_total'] / $data['ur_improved_sweet_and_spicy_count'] : 0;

		$ur_improved_sweet_and_spicy_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'IMPROVED SWEET AND SPICY', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_improved_sweet_and_spicy_prev_year2_jan'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_feb'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_mar'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_apr'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_may'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_jun'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_jul'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_aug'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_sep'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_oct'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_nov'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_dec'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_avg'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_min'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year2_max'] = 0;

		foreach($ur_improved_sweet_and_spicy_prev_year2 as $row){
			$data['ur_improved_sweet_and_spicy_prev_year2_jan'] = $row->jan_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_feb'] = $row->feb_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_mar'] = $row->mar_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_apr'] = $row->apr_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_may'] = $row->may_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_jun'] = $row->jun_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_jul'] = $row->jul_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_aug'] = $row->aug_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_sep'] = $row->sep_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_oct'] = $row->oct_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_nov'] = $row->nov_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_dec'] = $row->dec_price;
			$data['ur_improved_sweet_and_spicy_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_improved_sweet_and_spicy_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_improved_sweet_and_spicy_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'IMPROVED SWEET AND SPICY',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ur_improved_sweet_and_spicy_prev_year2_jan'],
			'dashboard_price_feb' => $data['ur_improved_sweet_and_spicy_prev_year2_feb'],
			'dashboard_price_mar' => $data['ur_improved_sweet_and_spicy_prev_year2_mar'],
			'dashboard_price_apr' => $data['ur_improved_sweet_and_spicy_prev_year2_apr'],
			'dashboard_price_may' => $data['ur_improved_sweet_and_spicy_prev_year2_may'],
			'dashboard_price_june' => $data['ur_improved_sweet_and_spicy_prev_year2_jun'],
			'dashboard_price_july' => $data['ur_improved_sweet_and_spicy_prev_year2_jul'],
			'dashboard_price_aug' => $data['ur_improved_sweet_and_spicy_prev_year2_aug'],
			'dashboard_price_sep' => $data['ur_improved_sweet_and_spicy_prev_year2_sep'],
			'dashboard_price_oct' => $data['ur_improved_sweet_and_spicy_prev_year2_oct'],
			'dashboard_price_nov' => $data['ur_improved_sweet_and_spicy_prev_year2_nov'],
			'dashboard_price_dec' => $data['ur_improved_sweet_and_spicy_prev_year2_dec'],
			'dashboard_price_min' => $data['ur_improved_sweet_and_spicy_prev_year2_min'],
			'dashboard_price_max' => $data['ur_improved_sweet_and_spicy_prev_year2_max'],
			'dashboard_price_avg' => $data['ur_improved_sweet_and_spicy_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$ur_improved_sweet_and_spicy_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'IMPROVED SWEET AND SPICY', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_improved_sweet_and_spicy_prev_year1_jan'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_feb'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_mar'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_apr'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_may'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_jun'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_jul'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_aug'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_sep'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_oct'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_nov'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_dec'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_avg'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_min'] = 0;
		$data['ur_improved_sweet_and_spicy_prev_year1_max'] = 0;

		foreach($ur_improved_sweet_and_spicy_prev_year1 as $row){
			$data['ur_improved_sweet_and_spicy_prev_year1_jan'] = $row->jan_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_feb'] = $row->feb_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_mar'] = $row->mar_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_apr'] = $row->apr_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_may'] = $row->may_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_jun'] = $row->jun_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_jul'] = $row->jul_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_aug'] = $row->aug_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_sep'] = $row->sep_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_oct'] = $row->oct_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_nov'] = $row->nov_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_dec'] = $row->dec_price;
			$data['ur_improved_sweet_and_spicy_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_improved_sweet_and_spicy_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_improved_sweet_and_spicy_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'IMPROVED SWEET AND SPICY',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ur_improved_sweet_and_spicy_prev_year1_jan'],
			'dashboard_price_feb' => $data['ur_improved_sweet_and_spicy_prev_year1_feb'],
			'dashboard_price_mar' => $data['ur_improved_sweet_and_spicy_prev_year1_mar'],
			'dashboard_price_apr' => $data['ur_improved_sweet_and_spicy_prev_year1_apr'],
			'dashboard_price_may' => $data['ur_improved_sweet_and_spicy_prev_year1_may'],
			'dashboard_price_june' => $data['ur_improved_sweet_and_spicy_prev_year1_jun'],
			'dashboard_price_july' => $data['ur_improved_sweet_and_spicy_prev_year1_jul'],
			'dashboard_price_aug' => $data['ur_improved_sweet_and_spicy_prev_year1_aug'],
			'dashboard_price_sep' => $data['ur_improved_sweet_and_spicy_prev_year1_sep'],
			'dashboard_price_oct' => $data['ur_improved_sweet_and_spicy_prev_year1_oct'],
			'dashboard_price_nov' => $data['ur_improved_sweet_and_spicy_prev_year1_nov'],
			'dashboard_price_dec' => $data['ur_improved_sweet_and_spicy_prev_year1_dec'],
			'dashboard_price_min' => $data['ur_improved_sweet_and_spicy_prev_year1_min'],
			'dashboard_price_max' => $data['ur_improved_sweet_and_spicy_prev_year1_max'],
			'dashboard_price_avg' => $data['ur_improved_sweet_and_spicy_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'IMPROVED SWEET AND SPICY',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ur_improved_sweet_and_spicy1'],
			'dashboard_price_feb' => $data['ur_improved_sweet_and_spicy2'],
			'dashboard_price_mar' => $data['ur_improved_sweet_and_spicy3'],
			'dashboard_price_apr' => $data['ur_improved_sweet_and_spicy4'],
			'dashboard_price_may' => $data['ur_improved_sweet_and_spicy5'],
			'dashboard_price_june' => $data['ur_improved_sweet_and_spicy6'],
			'dashboard_price_july' => $data['ur_improved_sweet_and_spicy7'],
			'dashboard_price_aug' => $data['ur_improved_sweet_and_spicy8'],
			'dashboard_price_sep' => $data['ur_improved_sweet_and_spicy9'],
			'dashboard_price_oct' => $data['ur_improved_sweet_and_spicy10'],
			'dashboard_price_nov' => $data['ur_improved_sweet_and_spicy11'],
			'dashboard_price_dec' => $data['ur_improved_sweet_and_spicy12'],
			'dashboard_price_min' => $data['ur_improved_sweet_and_spicy_min'],
			'dashboard_price_max' => $data['ur_improved_sweet_and_spicy_max'],
			'dashboard_price_avg' => $data['ur_improved_sweet_and_spicy_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);
		
		/*UR ORC*/

		$get_ur_orc = $this->admin->get_query("SELECT p.size_name, AVG(asp_tbl.jan_asp) as orc_jan, AVG(asp_tbl.feb_asp) as orc_feb, AVG(asp_tbl.mar_asp) as orc_mar, AVG(asp_tbl.apr_asp) as orc_apr, AVG(asp_tbl.may_asp) as orc_may, AVG(asp_tbl.jun_asp) as orc_jun, AVG(asp_tbl.jul_asp) as orc_jul, AVG(asp_tbl.aug_asp) as orc_aug, AVG(asp_tbl.sep_asp) as orc_sep, AVG(asp_tbl.oct_asp) as orc_oct, AVG(asp_tbl.nov_asp) as orc_nov, AVG(asp_tbl.dec_asp) as orc_dec FROM material_tbl o, size_tbl p,

			(SELECT m.material_id, m.size_id,

			(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-01-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as jan_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-02-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as feb_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-03-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as mar_asp,
    
   			(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-04-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as apr_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-05-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as may_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-06-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as jun_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-07-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as jul_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-08-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as aug_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-09-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as sep_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-10-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as oct_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-11-01' WHERE d.material_id = m.material_id AND f.bc_id = " . $bc_id . ") as nov_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'ULING ROASTER' AND c.sales_det_date = '" . $year . "-01-01' WHERE d.material_id =  m.material_id AND f.bc_id = " . $bc_id . ") as dec_asp
    
			FROM material_size_tbl m, brand_tbl n WHERE m.brand_id = n.brand_id AND m.material_size_status = 1 AND n.brand_name = 'ULING ROASTER') as asp_tbl

			WHERE o.material_id = asp_tbl.material_id AND p.size_id = asp_tbl.size_id GROUP BY p.size_id"
		);
		
		$data['ur_largo1'] = $data['ur_largo2'] = $data['ur_largo3'] = $data['ur_largo4'] = $data['ur_largo5'] = $data['ur_largo6'] = $data['ur_largo7'] = $data['ur_largo8'] = $data['ur_largo9'] = $data['ur_largo10'] = $data['ur_largo11'] = $data['ur_largo12'] = $data['ur_largo_total'] = $data['ur_largo_count'] = $data['ur_largo_avg'] = $data['ur_largo_min'] = $data['ur_largo_max'] = 0;

		$data['ur_plm1'] = $data['ur_plm2'] = $data['ur_plm3'] = $data['ur_plm4'] = $data['ur_plm5'] = $data['ur_plm6'] = $data['ur_plm7'] = $data['ur_plm8'] = $data['ur_plm9'] = $data['ur_plm10'] = $data['ur_plm11'] = $data['ur_plm12'] = $data['ur_plm_total'] = $data['ur_plm_count'] = $data['ur_plm_avg'] = $data['ur_plm_min'] = $data['ur_plm_max'] = 0;

		$data['ur_half1'] = $data['ur_half2'] = $data['ur_half3'] = $data['ur_half4'] = $data['ur_half5'] = $data['ur_half6'] = $data['ur_half7'] = $data['ur_half8'] = $data['ur_half9'] = $data['ur_half10'] = $data['ur_half11'] = $data['ur_half12'] = $data['ur_half_total'] = $data['ur_half_count'] = $data['ur_half_avg'] = $data['ur_half_min'] = $data['ur_half_max'] = 0;

		$data['ur_pequeno1'] = $data['ur_pequeno2'] = $data['ur_pequeno3'] = $data['ur_pequeno4'] = $data['ur_pequeno5'] = $data['ur_pequeno6'] = $data['ur_pequeno7'] = $data['ur_pequeno8'] = $data['ur_pequeno9'] = $data['ur_pequeno10'] = $data['ur_pequeno11'] = $data['ur_pequeno12'] = $data['ur_pequeno_total'] = $data['ur_pequeno_count'] = $data['ur_pequeno_avg'] = $data['ur_pequeno_min'] = $data['ur_pequeno_max'] = 0;

		foreach($get_ur_orc as $row){

			$orc_size = $row->size_name;
			$orc_jan = $row->orc_jan;
			$orc_feb = $row->orc_feb;
			$orc_mar = $row->orc_mar;
			$orc_apr = $row->orc_apr;
			$orc_may = $row->orc_may;
			$orc_jun = $row->orc_jun;
			$orc_jul = $row->orc_jul;
			$orc_aug = $row->orc_aug;
			$orc_sep = $row->orc_sep;
			$orc_oct = $row->orc_oct;
			$orc_nov = $row->orc_nov;
			$orc_dec = $row->orc_dec;
			$orc_min = min($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_max = max($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_avg = ($orc_jan + $orc_feb + $orc_mar + $orc_apr + $orc_may + $orc_jun + $orc_jul + $orc_aug + $orc_sep + $orc_oct + $orc_nov + $orc_dec) / 12;

			if($orc_size == "HALF"){
				$data['ur_half1'] = $orc_jan;
				$data['ur_half2'] = $orc_feb;
				$data['ur_half3'] = $orc_mar;
				$data['ur_half4'] = $orc_apr;
				$data['ur_half5'] = $orc_may;
				$data['ur_half6'] = $orc_jun;
				$data['ur_half7'] = $orc_jul;
				$data['ur_half8'] = $orc_aug;
				$data['ur_half9'] = $orc_sep;
				$data['ur_half10'] = $orc_oct;
				$data['ur_half11'] = $orc_nov;
				$data['ur_half12'] = $orc_dec;
				$data['ur_half_avg'] = $orc_avg;
				$data['ur_half_min'] = $orc_min;
				$data['ur_half_max'] = $orc_max;

				$ur_half_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'HALF', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
				$data['ur_half_prev_year2_jan'] = 0;
				$data['ur_half_prev_year2_feb'] = 0;
				$data['ur_half_prev_year2_mar'] = 0;
				$data['ur_half_prev_year2_apr'] = 0;
				$data['ur_half_prev_year2_may'] = 0;
				$data['ur_half_prev_year2_jun'] = 0;
				$data['ur_half_prev_year2_jul'] = 0;
				$data['ur_half_prev_year2_aug'] = 0;
				$data['ur_half_prev_year2_sep'] = 0;
				$data['ur_half_prev_year2_oct'] = 0;
				$data['ur_half_prev_year2_nov'] = 0;
				$data['ur_half_prev_year2_dec'] = 0;
				$data['ur_half_prev_year2_avg'] = 0;
				$data['ur_half_prev_year2_min'] = 0;
				$data['ur_half_prev_year2_max'] = 0;

				foreach($ur_half_prev_year2 as $row){
					$data['ur_half_prev_year2_jan'] = $row->jan_price;
					$data['ur_half_prev_year2_feb'] = $row->feb_price;
					$data['ur_half_prev_year2_mar'] = $row->mar_price;
					$data['ur_half_prev_year2_apr'] = $row->apr_price;
					$data['ur_half_prev_year2_may'] = $row->may_price;
					$data['ur_half_prev_year2_jun'] = $row->jun_price;
					$data['ur_half_prev_year2_jul'] = $row->jul_price;
					$data['ur_half_prev_year2_aug'] = $row->aug_price;
					$data['ur_half_prev_year2_sep'] = $row->sep_price;
					$data['ur_half_prev_year2_oct'] = $row->oct_price;
					$data['ur_half_prev_year2_nov'] = $row->nov_price;
					$data['ur_half_prev_year2_dec'] = $row->dec_price;
					$data['ur_half_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ur_half_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ur_half_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'UR',
					'dashboard_price_product' => 'HALF',
					'dashboard_price_year' => ($year - 2),
					'dashboard_price_jan' => $data['ur_half_prev_year2_jan'],
					'dashboard_price_feb' => $data['ur_half_prev_year2_feb'],
					'dashboard_price_mar' => $data['ur_half_prev_year2_mar'],
					'dashboard_price_apr' => $data['ur_half_prev_year2_apr'],
					'dashboard_price_may' => $data['ur_half_prev_year2_may'],
					'dashboard_price_june' => $data['ur_half_prev_year2_jun'],
					'dashboard_price_july' => $data['ur_half_prev_year2_jul'],
					'dashboard_price_aug' => $data['ur_half_prev_year2_aug'],
					'dashboard_price_sep' => $data['ur_half_prev_year2_sep'],
					'dashboard_price_oct' => $data['ur_half_prev_year2_oct'],
					'dashboard_price_nov' => $data['ur_half_prev_year2_nov'],
					'dashboard_price_dec' => $data['ur_half_prev_year2_dec'],
					'dashboard_price_min' => $data['ur_half_prev_year2_min'],
					'dashboard_price_max' => $data['ur_half_prev_year2_max'],
					'dashboard_price_avg' => $data['ur_half_prev_year2_avg'],
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


				$ur_half_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'HALF', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
					FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
				
				$data['ur_half_prev_year1_jan'] = 0;
				$data['ur_half_prev_year1_feb'] = 0;
				$data['ur_half_prev_year1_mar'] = 0;
				$data['ur_half_prev_year1_apr'] = 0;
				$data['ur_half_prev_year1_may'] = 0;
				$data['ur_half_prev_year1_jun'] = 0;
				$data['ur_half_prev_year1_jul'] = 0;
				$data['ur_half_prev_year1_aug'] = 0;
				$data['ur_half_prev_year1_sep'] = 0;
				$data['ur_half_prev_year1_oct'] = 0;
				$data['ur_half_prev_year1_nov'] = 0;
				$data['ur_half_prev_year1_dec'] = 0;
				$data['ur_half_prev_year1_avg'] = 0;
				$data['ur_half_prev_year1_min'] = 0;
				$data['ur_half_prev_year1_max'] = 0;

				foreach($ur_half_prev_year1 as $row){
					$data['ur_half_prev_year1_jan'] = $row->jan_price;
					$data['ur_half_prev_year1_feb'] = $row->feb_price;
					$data['ur_half_prev_year1_mar'] = $row->mar_price;
					$data['ur_half_prev_year1_apr'] = $row->apr_price;
					$data['ur_half_prev_year1_may'] = $row->may_price;
					$data['ur_half_prev_year1_jun'] = $row->jun_price;
					$data['ur_half_prev_year1_jul'] = $row->jul_price;
					$data['ur_half_prev_year1_aug'] = $row->aug_price;
					$data['ur_half_prev_year1_sep'] = $row->sep_price;
					$data['ur_half_prev_year1_oct'] = $row->oct_price;
					$data['ur_half_prev_year1_nov'] = $row->nov_price;
					$data['ur_half_prev_year1_dec'] = $row->dec_price;
					$data['ur_half_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ur_half_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['ur_half_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'UR',
					'dashboard_price_product' => 'HALF',
					'dashboard_price_year' => ($year - 1),
					'dashboard_price_jan' => $data['ur_half_prev_year1_jan'],
					'dashboard_price_feb' => $data['ur_half_prev_year1_feb'],
					'dashboard_price_mar' => $data['ur_half_prev_year1_mar'],
					'dashboard_price_apr' => $data['ur_half_prev_year1_apr'],
					'dashboard_price_may' => $data['ur_half_prev_year1_may'],
					'dashboard_price_june' => $data['ur_half_prev_year1_jun'],
					'dashboard_price_july' => $data['ur_half_prev_year1_jul'],
					'dashboard_price_aug' => $data['ur_half_prev_year1_aug'],
					'dashboard_price_sep' => $data['ur_half_prev_year1_sep'],
					'dashboard_price_oct' => $data['ur_half_prev_year1_oct'],
					'dashboard_price_nov' => $data['ur_half_prev_year1_nov'],
					'dashboard_price_dec' => $data['ur_half_prev_year1_dec'],
					'dashboard_price_min' => $data['ur_half_prev_year1_min'],
					'dashboard_price_max' => $data['ur_half_prev_year1_max'],
					'dashboard_price_avg' => $data['ur_half_prev_year1_avg'],
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

				$set_price = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'dashboard_price_segment' => 'UR',
					'dashboard_price_product' => 'HALF',
					'dashboard_price_year' => ($year),
					'dashboard_price_jan' => $data['ur_half1'],
					'dashboard_price_feb' => $data['ur_half2'],
					'dashboard_price_mar' => $data['ur_half3'],
					'dashboard_price_apr' => $data['ur_half4'],
					'dashboard_price_may' => $data['ur_half5'],
					'dashboard_price_june' => $data['ur_half6'],
					'dashboard_price_july' => $data['ur_half7'],
					'dashboard_price_aug' => $data['ur_half8'],
					'dashboard_price_sep' => $data['ur_half9'],
					'dashboard_price_oct' => $data['ur_half10'],
					'dashboard_price_nov' => $data['ur_half11'],
					'dashboard_price_dec' => $data['ur_half12'],
					'dashboard_price_min' => $data['ur_half_min'],
					'dashboard_price_max' => $data['ur_half_max'],
					'dashboard_price_avg' => $data['ur_half_avg'],
					'dashboard_price_added' => date_now(),
					'dashboard_price_status' => 1
				);

				$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);
			}
		}

		/*UR Liempo*/
		$join_ur_liempo = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "LIEMPO"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_liempo = $this->admin->get_join('sales_tbl a', $join_ur_liempo, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_liempo1'] = 0;
		$data['ur_liempo2'] = 0;
		$data['ur_liempo3'] = 0;
		$data['ur_liempo4'] = 0;
		$data['ur_liempo5'] = 0;
		$data['ur_liempo6'] = 0;
		$data['ur_liempo7'] = 0;
		$data['ur_liempo8'] = 0;
		$data['ur_liempo9'] = 0;
		$data['ur_liempo10'] = 0;
		$data['ur_liempo11'] = 0;
		$data['ur_liempo12'] = 0;
		$data['ur_liempo_total'] = 0;
		$data['ur_liempo_count'] = 0;
		$data['ur_liempo_avg'] = 0;
		$data['ur_liempo_min'] = 0;
		$data['ur_liempo_max'] = 0;

		foreach($get_ur_liempo as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_liempo' . $month] = $asp;
			$data['ur_liempo_total'] += $asp;

			if($asp < $data['ur_liempo_min'] || $data['ur_liempo_count'] == 0){
				$data['ur_liempo_min'] = $asp;
			}

			if($asp > $data['ur_liempo_max'] || $data['ur_liempo_count'] == 0){
				$data['ur_liempo_max'] = $asp;
			}

			$data['ur_liempo_count']++;
		}

		$data['ur_liempo_avg'] = $data['ur_liempo_total'] != 0 ? $data['ur_liempo_total'] / $data['ur_liempo_count'] : 0;

		$ur_liempo_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_liempo_prev_year2_jan'] = 0;
		$data['ur_liempo_prev_year2_feb'] = 0;
		$data['ur_liempo_prev_year2_mar'] = 0;
		$data['ur_liempo_prev_year2_apr'] = 0;
		$data['ur_liempo_prev_year2_may'] = 0;
		$data['ur_liempo_prev_year2_jun'] = 0;
		$data['ur_liempo_prev_year2_jul'] = 0;
		$data['ur_liempo_prev_year2_aug'] = 0;
		$data['ur_liempo_prev_year2_sep'] = 0;
		$data['ur_liempo_prev_year2_oct'] = 0;
		$data['ur_liempo_prev_year2_nov'] = 0;
		$data['ur_liempo_prev_year2_dec'] = 0;
		$data['ur_liempo_prev_year2_avg'] = 0;
		$data['ur_liempo_prev_year2_min'] = 0;
		$data['ur_liempo_prev_year2_max'] = 0;

		foreach($ur_liempo_prev_year2 as $row){
			$data['ur_liempo_prev_year2_jan'] = $row->jan_price;
			$data['ur_liempo_prev_year2_feb'] = $row->feb_price;
			$data['ur_liempo_prev_year2_mar'] = $row->mar_price;
			$data['ur_liempo_prev_year2_apr'] = $row->apr_price;
			$data['ur_liempo_prev_year2_may'] = $row->may_price;
			$data['ur_liempo_prev_year2_jun'] = $row->jun_price;
			$data['ur_liempo_prev_year2_jul'] = $row->jul_price;
			$data['ur_liempo_prev_year2_aug'] = $row->aug_price;
			$data['ur_liempo_prev_year2_sep'] = $row->sep_price;
			$data['ur_liempo_prev_year2_oct'] = $row->oct_price;
			$data['ur_liempo_prev_year2_nov'] = $row->nov_price;
			$data['ur_liempo_prev_year2_dec'] = $row->dec_price;
			$data['ur_liempo_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_liempo_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_liempo_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'LIEMPO',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ur_liempo_prev_year2_jan'],
			'dashboard_price_feb' => $data['ur_liempo_prev_year2_feb'],
			'dashboard_price_mar' => $data['ur_liempo_prev_year2_mar'],
			'dashboard_price_apr' => $data['ur_liempo_prev_year2_apr'],
			'dashboard_price_may' => $data['ur_liempo_prev_year2_may'],
			'dashboard_price_june' => $data['ur_liempo_prev_year2_jun'],
			'dashboard_price_july' => $data['ur_liempo_prev_year2_jul'],
			'dashboard_price_aug' => $data['ur_liempo_prev_year2_aug'],
			'dashboard_price_sep' => $data['ur_liempo_prev_year2_sep'],
			'dashboard_price_oct' => $data['ur_liempo_prev_year2_oct'],
			'dashboard_price_nov' => $data['ur_liempo_prev_year2_nov'],
			'dashboard_price_dec' => $data['ur_liempo_prev_year2_dec'],
			'dashboard_price_min' => $data['ur_liempo_prev_year2_min'],
			'dashboard_price_max' => $data['ur_liempo_prev_year2_max'],
			'dashboard_price_avg' => $data['ur_liempo_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$ur_liempo_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_liempo_prev_year1_jan'] = 0;
		$data['ur_liempo_prev_year1_feb'] = 0;
		$data['ur_liempo_prev_year1_mar'] = 0;
		$data['ur_liempo_prev_year1_apr'] = 0;
		$data['ur_liempo_prev_year1_may'] = 0;
		$data['ur_liempo_prev_year1_jun'] = 0;
		$data['ur_liempo_prev_year1_jul'] = 0;
		$data['ur_liempo_prev_year1_aug'] = 0;
		$data['ur_liempo_prev_year1_sep'] = 0;
		$data['ur_liempo_prev_year1_oct'] = 0;
		$data['ur_liempo_prev_year1_nov'] = 0;
		$data['ur_liempo_prev_year1_dec'] = 0;
		$data['ur_liempo_prev_year1_avg'] = 0;
		$data['ur_liempo_prev_year1_min'] = 0;
		$data['ur_liempo_prev_year1_max'] = 0;

		foreach($ur_liempo_prev_year1 as $row){
			$data['ur_liempo_prev_year1_jan'] = $row->jan_price;
			$data['ur_liempo_prev_year1_feb'] = $row->feb_price;
			$data['ur_liempo_prev_year1_mar'] = $row->mar_price;
			$data['ur_liempo_prev_year1_apr'] = $row->apr_price;
			$data['ur_liempo_prev_year1_may'] = $row->may_price;
			$data['ur_liempo_prev_year1_jun'] = $row->jun_price;
			$data['ur_liempo_prev_year1_jul'] = $row->jul_price;
			$data['ur_liempo_prev_year1_aug'] = $row->aug_price;
			$data['ur_liempo_prev_year1_sep'] = $row->sep_price;
			$data['ur_liempo_prev_year1_oct'] = $row->oct_price;
			$data['ur_liempo_prev_year1_nov'] = $row->nov_price;
			$data['ur_liempo_prev_year1_dec'] = $row->dec_price;
			$data['ur_liempo_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_liempo_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_liempo_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'LIEMPO',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ur_liempo_prev_year1_jan'],
			'dashboard_price_feb' => $data['ur_liempo_prev_year1_feb'],
			'dashboard_price_mar' => $data['ur_liempo_prev_year1_mar'],
			'dashboard_price_apr' => $data['ur_liempo_prev_year1_apr'],
			'dashboard_price_may' => $data['ur_liempo_prev_year1_may'],
			'dashboard_price_june' => $data['ur_liempo_prev_year1_jun'],
			'dashboard_price_july' => $data['ur_liempo_prev_year1_jul'],
			'dashboard_price_aug' => $data['ur_liempo_prev_year1_aug'],
			'dashboard_price_sep' => $data['ur_liempo_prev_year1_sep'],
			'dashboard_price_oct' => $data['ur_liempo_prev_year1_oct'],
			'dashboard_price_nov' => $data['ur_liempo_prev_year1_nov'],
			'dashboard_price_dec' => $data['ur_liempo_prev_year1_dec'],
			'dashboard_price_min' => $data['ur_liempo_prev_year1_min'],
			'dashboard_price_max' => $data['ur_liempo_prev_year1_max'],
			'dashboard_price_avg' => $data['ur_liempo_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'LIEMPO',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ur_liempo1'],
			'dashboard_price_feb' => $data['ur_liempo2'],
			'dashboard_price_mar' => $data['ur_liempo3'],
			'dashboard_price_apr' => $data['ur_liempo4'],
			'dashboard_price_may' => $data['ur_liempo5'],
			'dashboard_price_june' => $data['ur_liempo6'],
			'dashboard_price_july' => $data['ur_liempo7'],
			'dashboard_price_aug' => $data['ur_liempo8'],
			'dashboard_price_sep' => $data['ur_liempo9'],
			'dashboard_price_oct' => $data['ur_liempo10'],
			'dashboard_price_nov' => $data['ur_liempo11'],
			'dashboard_price_dec' => $data['ur_liempo12'],
			'dashboard_price_min' => $data['ur_liempo_min'],
			'dashboard_price_max' => $data['ur_liempo_max'],
			'dashboard_price_avg' => $data['ur_liempo_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);
		
		/*UR Dressed*/
		$join_ur_dressed = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_dressed = $this->admin->get_join('sales_tbl a', $join_ur_dressed, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_dressed1'] = 0;
		$data['ur_dressed2'] = 0;
		$data['ur_dressed3'] = 0;
		$data['ur_dressed4'] = 0;
		$data['ur_dressed5'] = 0;
		$data['ur_dressed6'] = 0;
		$data['ur_dressed7'] = 0;
		$data['ur_dressed8'] = 0;
		$data['ur_dressed9'] = 0;
		$data['ur_dressed10'] = 0;
		$data['ur_dressed11'] = 0;
		$data['ur_dressed12'] = 0;
		$data['ur_dressed_total'] = 0;
		$data['ur_dressed_count'] = 0;
		$data['ur_dressed_avg'] = 0;
		$data['ur_dressed_min'] = 0;
		$data['ur_dressed_max'] = 0;

		foreach($get_ur_dressed as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_dressed' . $month] = $asp;
			$data['ur_dressed_total'] += $asp;

			if($asp < $data['ur_dressed_min'] || $data['ur_dressed_count'] == 0){
				$data['ur_dressed_min'] = $asp;
			}

			if($asp > $data['ur_dressed_max'] || $data['ur_dressed_count'] == 0){
				$data['ur_dressed_max'] = $asp;
			}

			$data['ur_dressed_count']++;
		}

		$data['ur_dressed_avg'] = $data['ur_dressed_total'] != 0 ? $data['ur_dressed_total'] / $data['ur_dressed_count'] : 0;

		$ur_dressed_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_dressed_prev_year2_jan'] = 0;
		$data['ur_dressed_prev_year2_feb'] = 0;
		$data['ur_dressed_prev_year2_mar'] = 0;
		$data['ur_dressed_prev_year2_apr'] = 0;
		$data['ur_dressed_prev_year2_may'] = 0;
		$data['ur_dressed_prev_year2_jun'] = 0;
		$data['ur_dressed_prev_year2_jul'] = 0;
		$data['ur_dressed_prev_year2_aug'] = 0;
		$data['ur_dressed_prev_year2_sep'] = 0;
		$data['ur_dressed_prev_year2_oct'] = 0;
		$data['ur_dressed_prev_year2_nov'] = 0;
		$data['ur_dressed_prev_year2_dec'] = 0;
		$data['ur_dressed_prev_year2_avg'] = 0;
		$data['ur_dressed_prev_year2_min'] = 0;
		$data['ur_dressed_prev_year2_max'] = 0;

		foreach($ur_dressed_prev_year2 as $row){
			$data['ur_dressed_prev_year2_jan'] = $row->jan_price;
			$data['ur_dressed_prev_year2_feb'] = $row->feb_price;
			$data['ur_dressed_prev_year2_mar'] = $row->mar_price;
			$data['ur_dressed_prev_year2_apr'] = $row->apr_price;
			$data['ur_dressed_prev_year2_may'] = $row->may_price;
			$data['ur_dressed_prev_year2_jun'] = $row->jun_price;
			$data['ur_dressed_prev_year2_jul'] = $row->jul_price;
			$data['ur_dressed_prev_year2_aug'] = $row->aug_price;
			$data['ur_dressed_prev_year2_sep'] = $row->sep_price;
			$data['ur_dressed_prev_year2_oct'] = $row->oct_price;
			$data['ur_dressed_prev_year2_nov'] = $row->nov_price;
			$data['ur_dressed_prev_year2_dec'] = $row->dec_price;
			$data['ur_dressed_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_dressed_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_dressed_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'DRESSED',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ur_dressed_prev_year2_jan'],
			'dashboard_price_feb' => $data['ur_dressed_prev_year2_feb'],
			'dashboard_price_mar' => $data['ur_dressed_prev_year2_mar'],
			'dashboard_price_apr' => $data['ur_dressed_prev_year2_apr'],
			'dashboard_price_may' => $data['ur_dressed_prev_year2_may'],
			'dashboard_price_june' => $data['ur_dressed_prev_year2_jun'],
			'dashboard_price_july' => $data['ur_dressed_prev_year2_jul'],
			'dashboard_price_aug' => $data['ur_dressed_prev_year2_aug'],
			'dashboard_price_sep' => $data['ur_dressed_prev_year2_sep'],
			'dashboard_price_oct' => $data['ur_dressed_prev_year2_oct'],
			'dashboard_price_nov' => $data['ur_dressed_prev_year2_nov'],
			'dashboard_price_dec' => $data['ur_dressed_prev_year2_dec'],
			'dashboard_price_min' => $data['ur_dressed_prev_year2_min'],
			'dashboard_price_max' => $data['ur_dressed_prev_year2_max'],
			'dashboard_price_avg' => $data['ur_dressed_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$ur_dressed_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_dressed_prev_year1_jan'] = 0;
		$data['ur_dressed_prev_year1_feb'] = 0;
		$data['ur_dressed_prev_year1_mar'] = 0;
		$data['ur_dressed_prev_year1_apr'] = 0;
		$data['ur_dressed_prev_year1_may'] = 0;
		$data['ur_dressed_prev_year1_jun'] = 0;
		$data['ur_dressed_prev_year1_jul'] = 0;
		$data['ur_dressed_prev_year1_aug'] = 0;
		$data['ur_dressed_prev_year1_sep'] = 0;
		$data['ur_dressed_prev_year1_oct'] = 0;
		$data['ur_dressed_prev_year1_nov'] = 0;
		$data['ur_dressed_prev_year1_dec'] = 0;
		$data['ur_dressed_prev_year1_avg'] = 0;
		$data['ur_dressed_prev_year1_min'] = 0;
		$data['ur_dressed_prev_year1_max'] = 0;

		foreach($ur_dressed_prev_year1 as $row){
			$data['ur_dressed_prev_year1_jan'] = $row->jan_price;
			$data['ur_dressed_prev_year1_feb'] = $row->feb_price;
			$data['ur_dressed_prev_year1_mar'] = $row->mar_price;
			$data['ur_dressed_prev_year1_apr'] = $row->apr_price;
			$data['ur_dressed_prev_year1_may'] = $row->may_price;
			$data['ur_dressed_prev_year1_jun'] = $row->jun_price;
			$data['ur_dressed_prev_year1_jul'] = $row->jul_price;
			$data['ur_dressed_prev_year1_aug'] = $row->aug_price;
			$data['ur_dressed_prev_year1_sep'] = $row->sep_price;
			$data['ur_dressed_prev_year1_oct'] = $row->oct_price;
			$data['ur_dressed_prev_year1_nov'] = $row->nov_price;
			$data['ur_dressed_prev_year1_dec'] = $row->dec_price;
			$data['ur_dressed_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_dressed_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_dressed_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'DRESSED',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ur_dressed_prev_year1_jan'],
			'dashboard_price_feb' => $data['ur_dressed_prev_year1_feb'],
			'dashboard_price_mar' => $data['ur_dressed_prev_year1_mar'],
			'dashboard_price_apr' => $data['ur_dressed_prev_year1_apr'],
			'dashboard_price_may' => $data['ur_dressed_prev_year1_may'],
			'dashboard_price_june' => $data['ur_dressed_prev_year1_jun'],
			'dashboard_price_july' => $data['ur_dressed_prev_year1_jul'],
			'dashboard_price_aug' => $data['ur_dressed_prev_year1_aug'],
			'dashboard_price_sep' => $data['ur_dressed_prev_year1_sep'],
			'dashboard_price_oct' => $data['ur_dressed_prev_year1_oct'],
			'dashboard_price_nov' => $data['ur_dressed_prev_year1_nov'],
			'dashboard_price_dec' => $data['ur_dressed_prev_year1_dec'],
			'dashboard_price_min' => $data['ur_dressed_prev_year1_min'],
			'dashboard_price_max' => $data['ur_dressed_prev_year1_max'],
			'dashboard_price_avg' => $data['ur_dressed_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'DRESSED',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ur_dressed1'],
			'dashboard_price_feb' => $data['ur_dressed2'],
			'dashboard_price_mar' => $data['ur_dressed3'],
			'dashboard_price_apr' => $data['ur_dressed4'],
			'dashboard_price_may' => $data['ur_dressed5'],
			'dashboard_price_june' => $data['ur_dressed6'],
			'dashboard_price_july' => $data['ur_dressed7'],
			'dashboard_price_aug' => $data['ur_dressed8'],
			'dashboard_price_sep' => $data['ur_dressed9'],
			'dashboard_price_oct' => $data['ur_dressed10'],
			'dashboard_price_nov' => $data['ur_dressed11'],
			'dashboard_price_dec' => $data['ur_dressed12'],
			'dashboard_price_min' => $data['ur_dressed_min'],
			'dashboard_price_max' => $data['ur_dressed_max'],
			'dashboard_price_avg' => $data['ur_dressed_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);
		

		/*UR CHOOKSIES MARINADO*/

		$join_ur_chooksies = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 10200095 OR d.material_code = 10200096 OR d.material_code = 10200097)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_chooksies = $this->admin->get_join('sales_tbl a', $join_ur_chooksies, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_chooksies1'] = 0;
		$data['ur_chooksies2'] = 0;
		$data['ur_chooksies3'] = 0;
		$data['ur_chooksies4'] = 0;
		$data['ur_chooksies5'] = 0;
		$data['ur_chooksies6'] = 0;
		$data['ur_chooksies7'] = 0;
		$data['ur_chooksies8'] = 0;
		$data['ur_chooksies9'] = 0;
		$data['ur_chooksies10'] = 0;
		$data['ur_chooksies11'] = 0;
		$data['ur_chooksies12'] = 0;
		$data['ur_chooksies_total'] = 0;
		$data['ur_chooksies_count'] = 0;
		$data['ur_chooksies_avg'] = 0;
		$data['ur_chooksies_min'] = 0;
		$data['ur_chooksies_max'] = 0;

		foreach($get_ur_chooksies as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_chooksies' . $month] = $asp;
			$data['ur_chooksies_total'] += $asp;

			if($asp < $data['ur_chooksies_min'] || $data['ur_chooksies_count'] == 0){
				$data['ur_chooksies_min'] = $asp;
			}

			if($asp > $data['ur_chooksies_max'] || $data['ur_chooksies_count'] == 0){
				$data['ur_chooksies_max'] = $asp;
			}

			$data['ur_chooksies_count']++;
		}

		$data['ur_chooksies_avg'] = $data['ur_chooksies_total'] != 0 ? $data['ur_chooksies_total'] / $data['ur_chooksies_count'] : 0;

		$ur_chooksies_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_chooksies_prev_year2_jan'] = 0;
		$data['ur_chooksies_prev_year2_feb'] = 0;
		$data['ur_chooksies_prev_year2_mar'] = 0;
		$data['ur_chooksies_prev_year2_apr'] = 0;
		$data['ur_chooksies_prev_year2_may'] = 0;
		$data['ur_chooksies_prev_year2_jun'] = 0;
		$data['ur_chooksies_prev_year2_jul'] = 0;
		$data['ur_chooksies_prev_year2_aug'] = 0;
		$data['ur_chooksies_prev_year2_sep'] = 0;
		$data['ur_chooksies_prev_year2_oct'] = 0;
		$data['ur_chooksies_prev_year2_nov'] = 0;
		$data['ur_chooksies_prev_year2_dec'] = 0;
		$data['ur_chooksies_prev_year2_avg'] = 0;
		$data['ur_chooksies_prev_year2_min'] = 0;
		$data['ur_chooksies_prev_year2_max'] = 0;

		foreach($ur_chooksies_prev_year2 as $row){
			$data['ur_chooksies_prev_year2_jan'] = $row->jan_price;
			$data['ur_chooksies_prev_year2_feb'] = $row->feb_price;
			$data['ur_chooksies_prev_year2_mar'] = $row->mar_price;
			$data['ur_chooksies_prev_year2_apr'] = $row->apr_price;
			$data['ur_chooksies_prev_year2_may'] = $row->may_price;
			$data['ur_chooksies_prev_year2_jun'] = $row->jun_price;
			$data['ur_chooksies_prev_year2_jul'] = $row->jul_price;
			$data['ur_chooksies_prev_year2_aug'] = $row->aug_price;
			$data['ur_chooksies_prev_year2_sep'] = $row->sep_price;
			$data['ur_chooksies_prev_year2_oct'] = $row->oct_price;
			$data['ur_chooksies_prev_year2_nov'] = $row->nov_price;
			$data['ur_chooksies_prev_year2_dec'] = $row->dec_price;
			$data['ur_chooksies_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_chooksies_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_chooksies_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'CHOOKSIES MARINADO',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ur_chooksies_prev_year2_jan'],
			'dashboard_price_feb' => $data['ur_chooksies_prev_year2_feb'],
			'dashboard_price_mar' => $data['ur_chooksies_prev_year2_mar'],
			'dashboard_price_apr' => $data['ur_chooksies_prev_year2_apr'],
			'dashboard_price_may' => $data['ur_chooksies_prev_year2_may'],
			'dashboard_price_june' => $data['ur_chooksies_prev_year2_jun'],
			'dashboard_price_july' => $data['ur_chooksies_prev_year2_jul'],
			'dashboard_price_aug' => $data['ur_chooksies_prev_year2_aug'],
			'dashboard_price_sep' => $data['ur_chooksies_prev_year2_sep'],
			'dashboard_price_oct' => $data['ur_chooksies_prev_year2_oct'],
			'dashboard_price_nov' => $data['ur_chooksies_prev_year2_nov'],
			'dashboard_price_dec' => $data['ur_chooksies_prev_year2_dec'],
			'dashboard_price_min' => $data['ur_chooksies_prev_year2_min'],
			'dashboard_price_max' => $data['ur_chooksies_prev_year2_max'],
			'dashboard_price_avg' => $data['ur_chooksies_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$ur_chooksies_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_chooksies_prev_year1_jan'] = 0;
		$data['ur_chooksies_prev_year1_feb'] = 0;
		$data['ur_chooksies_prev_year1_mar'] = 0;
		$data['ur_chooksies_prev_year1_apr'] = 0;
		$data['ur_chooksies_prev_year1_may'] = 0;
		$data['ur_chooksies_prev_year1_jun'] = 0;
		$data['ur_chooksies_prev_year1_jul'] = 0;
		$data['ur_chooksies_prev_year1_aug'] = 0;
		$data['ur_chooksies_prev_year1_sep'] = 0;
		$data['ur_chooksies_prev_year1_oct'] = 0;
		$data['ur_chooksies_prev_year1_nov'] = 0;
		$data['ur_chooksies_prev_year1_dec'] = 0;
		$data['ur_chooksies_prev_year1_avg'] = 0;
		$data['ur_chooksies_prev_year1_min'] = 0;
		$data['ur_chooksies_prev_year1_max'] = 0;

		foreach($ur_chooksies_prev_year1 as $row){
			$data['ur_chooksies_prev_year1_jan'] = $row->jan_price;
			$data['ur_chooksies_prev_year1_feb'] = $row->feb_price;
			$data['ur_chooksies_prev_year1_mar'] = $row->mar_price;
			$data['ur_chooksies_prev_year1_apr'] = $row->apr_price;
			$data['ur_chooksies_prev_year1_may'] = $row->may_price;
			$data['ur_chooksies_prev_year1_jun'] = $row->jun_price;
			$data['ur_chooksies_prev_year1_jul'] = $row->jul_price;
			$data['ur_chooksies_prev_year1_aug'] = $row->aug_price;
			$data['ur_chooksies_prev_year1_sep'] = $row->sep_price;
			$data['ur_chooksies_prev_year1_oct'] = $row->oct_price;
			$data['ur_chooksies_prev_year1_nov'] = $row->nov_price;
			$data['ur_chooksies_prev_year1_dec'] = $row->dec_price;
			$data['ur_chooksies_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_chooksies_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_chooksies_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'CHOOKSIES MARINADO',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ur_chooksies_prev_year1_jan'],
			'dashboard_price_feb' => $data['ur_chooksies_prev_year1_feb'],
			'dashboard_price_mar' => $data['ur_chooksies_prev_year1_mar'],
			'dashboard_price_apr' => $data['ur_chooksies_prev_year1_apr'],
			'dashboard_price_may' => $data['ur_chooksies_prev_year1_may'],
			'dashboard_price_june' => $data['ur_chooksies_prev_year1_jun'],
			'dashboard_price_july' => $data['ur_chooksies_prev_year1_jul'],
			'dashboard_price_aug' => $data['ur_chooksies_prev_year1_aug'],
			'dashboard_price_sep' => $data['ur_chooksies_prev_year1_sep'],
			'dashboard_price_oct' => $data['ur_chooksies_prev_year1_oct'],
			'dashboard_price_nov' => $data['ur_chooksies_prev_year1_nov'],
			'dashboard_price_dec' => $data['ur_chooksies_prev_year1_dec'],
			'dashboard_price_min' => $data['ur_chooksies_prev_year1_min'],
			'dashboard_price_max' => $data['ur_chooksies_prev_year1_max'],
			'dashboard_price_avg' => $data['ur_chooksies_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

				$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'CHOOKSIES MARINADO',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ur_chooksies1'],
			'dashboard_price_feb' => $data['ur_chooksies2'],
			'dashboard_price_mar' => $data['ur_chooksies3'],
			'dashboard_price_apr' => $data['ur_chooksies4'],
			'dashboard_price_may' => $data['ur_chooksies5'],
			'dashboard_price_june' => $data['ur_chooksies6'],
			'dashboard_price_july' => $data['ur_chooksies7'],
			'dashboard_price_aug' => $data['ur_chooksies8'],
			'dashboard_price_sep' => $data['ur_chooksies9'],
			'dashboard_price_oct' => $data['ur_chooksies10'],
			'dashboard_price_nov' => $data['ur_chooksies11'],
			'dashboard_price_dec' => $data['ur_chooksies12'],
			'dashboard_price_min' => $data['ur_chooksies_min'],
			'dashboard_price_max' => $data['ur_chooksies_max'],
			'dashboard_price_avg' => $data['ur_chooksies_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*UR Marinado Fried*/

		$join_ur_marinado = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code IN (1000638, 10200086)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_marinado = $this->admin->get_join('sales_tbl a', $join_ur_marinado, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_marinado1'] = 0;
		$data['ur_marinado2'] = 0;
		$data['ur_marinado3'] = 0;
		$data['ur_marinado4'] = 0;
		$data['ur_marinado5'] = 0;
		$data['ur_marinado6'] = 0;
		$data['ur_marinado7'] = 0;
		$data['ur_marinado8'] = 0;
		$data['ur_marinado9'] = 0;
		$data['ur_marinado10'] = 0;
		$data['ur_marinado11'] = 0;
		$data['ur_marinado12'] = 0;
		$data['ur_marinado_total'] = 0;
		$data['ur_marinado_count'] = 0;
		$data['ur_marinado_avg'] = 0;
		$data['ur_marinado_min'] = 0;
		$data['ur_marinado_max'] = 0;

		foreach($get_ur_marinado as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_marinado' . $month] = $asp;
			$data['ur_marinado_total'] += $asp;

			if($asp < $data['ur_marinado_min'] || $data['ur_marinado_count'] == 0){
				$data['ur_marinado_min'] = $asp;
			}

			if($asp > $data['ur_marinado_max'] || $data['ur_marinado_count'] == 0){
				$data['ur_marinado_max'] = $asp;
			}

			$data['ur_marinado_count']++;
		}

		$data['ur_marinado_avg'] = $data['ur_marinado_total'] != 0 ? $data['ur_marinado_total'] / $data['ur_marinado_count'] : 0;

		$ur_marinado_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_marinado_prev_year2_jan'] = 0;
		$data['ur_marinado_prev_year2_feb'] = 0;
		$data['ur_marinado_prev_year2_mar'] = 0;
		$data['ur_marinado_prev_year2_apr'] = 0;
		$data['ur_marinado_prev_year2_may'] = 0;
		$data['ur_marinado_prev_year2_jun'] = 0;
		$data['ur_marinado_prev_year2_jul'] = 0;
		$data['ur_marinado_prev_year2_aug'] = 0;
		$data['ur_marinado_prev_year2_sep'] = 0;
		$data['ur_marinado_prev_year2_oct'] = 0;
		$data['ur_marinado_prev_year2_nov'] = 0;
		$data['ur_marinado_prev_year2_dec'] = 0;
		$data['ur_marinado_prev_year2_avg'] = 0;
		$data['ur_marinado_prev_year2_min'] = 0;
		$data['ur_marinado_prev_year2_max'] = 0;

		foreach($ur_marinado_prev_year2 as $row){
			$data['ur_marinado_prev_year2_jan'] = $row->jan_price;
			$data['ur_marinado_prev_year2_feb'] = $row->feb_price;
			$data['ur_marinado_prev_year2_mar'] = $row->mar_price;
			$data['ur_marinado_prev_year2_apr'] = $row->apr_price;
			$data['ur_marinado_prev_year2_may'] = $row->may_price;
			$data['ur_marinado_prev_year2_jun'] = $row->jun_price;
			$data['ur_marinado_prev_year2_jul'] = $row->jul_price;
			$data['ur_marinado_prev_year2_aug'] = $row->aug_price;
			$data['ur_marinado_prev_year2_sep'] = $row->sep_price;
			$data['ur_marinado_prev_year2_oct'] = $row->oct_price;
			$data['ur_marinado_prev_year2_nov'] = $row->nov_price;
			$data['ur_marinado_prev_year2_dec'] = $row->dec_price;
			$data['ur_marinado_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_marinado_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_marinado_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'MARINADO FRIED',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ur_marinado_prev_year2_jan'],
			'dashboard_price_feb' => $data['ur_marinado_prev_year2_feb'],
			'dashboard_price_mar' => $data['ur_marinado_prev_year2_mar'],
			'dashboard_price_apr' => $data['ur_marinado_prev_year2_apr'],
			'dashboard_price_may' => $data['ur_marinado_prev_year2_may'],
			'dashboard_price_june' => $data['ur_marinado_prev_year2_jun'],
			'dashboard_price_july' => $data['ur_marinado_prev_year2_jul'],
			'dashboard_price_aug' => $data['ur_marinado_prev_year2_aug'],
			'dashboard_price_sep' => $data['ur_marinado_prev_year2_sep'],
			'dashboard_price_oct' => $data['ur_marinado_prev_year2_oct'],
			'dashboard_price_nov' => $data['ur_marinado_prev_year2_nov'],
			'dashboard_price_dec' => $data['ur_marinado_prev_year2_dec'],
			'dashboard_price_min' => $data['ur_marinado_prev_year2_min'],
			'dashboard_price_max' => $data['ur_marinado_prev_year2_max'],
			'dashboard_price_avg' => $data['ur_marinado_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$ur_marinado_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_marinado_prev_year1_jan'] = 0;
		$data['ur_marinado_prev_year1_feb'] = 0;
		$data['ur_marinado_prev_year1_mar'] = 0;
		$data['ur_marinado_prev_year1_apr'] = 0;
		$data['ur_marinado_prev_year1_may'] = 0;
		$data['ur_marinado_prev_year1_jun'] = 0;
		$data['ur_marinado_prev_year1_jul'] = 0;
		$data['ur_marinado_prev_year1_aug'] = 0;
		$data['ur_marinado_prev_year1_sep'] = 0;
		$data['ur_marinado_prev_year1_oct'] = 0;
		$data['ur_marinado_prev_year1_nov'] = 0;
		$data['ur_marinado_prev_year1_dec'] = 0;
		$data['ur_marinado_prev_year1_avg'] = 0;
		$data['ur_marinado_prev_year1_min'] = 0;
		$data['ur_marinado_prev_year1_max'] = 0;

		foreach($ur_marinado_prev_year1 as $row){
			$data['ur_marinado_prev_year1_jan'] = $row->jan_price;
			$data['ur_marinado_prev_year1_feb'] = $row->feb_price;
			$data['ur_marinado_prev_year1_mar'] = $row->mar_price;
			$data['ur_marinado_prev_year1_apr'] = $row->apr_price;
			$data['ur_marinado_prev_year1_may'] = $row->may_price;
			$data['ur_marinado_prev_year1_jun'] = $row->jun_price;
			$data['ur_marinado_prev_year1_jul'] = $row->jul_price;
			$data['ur_marinado_prev_year1_aug'] = $row->aug_price;
			$data['ur_marinado_prev_year1_sep'] = $row->sep_price;
			$data['ur_marinado_prev_year1_oct'] = $row->oct_price;
			$data['ur_marinado_prev_year1_nov'] = $row->nov_price;
			$data['ur_marinado_prev_year1_dec'] = $row->dec_price;
			$data['ur_marinado_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_marinado_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_marinado_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'MARINADO FRIED',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ur_marinado_prev_year1_jan'],
			'dashboard_price_feb' => $data['ur_marinado_prev_year1_feb'],
			'dashboard_price_mar' => $data['ur_marinado_prev_year1_mar'],
			'dashboard_price_apr' => $data['ur_marinado_prev_year1_apr'],
			'dashboard_price_may' => $data['ur_marinado_prev_year1_may'],
			'dashboard_price_june' => $data['ur_marinado_prev_year1_jun'],
			'dashboard_price_july' => $data['ur_marinado_prev_year1_jul'],
			'dashboard_price_aug' => $data['ur_marinado_prev_year1_aug'],
			'dashboard_price_sep' => $data['ur_marinado_prev_year1_sep'],
			'dashboard_price_oct' => $data['ur_marinado_prev_year1_oct'],
			'dashboard_price_nov' => $data['ur_marinado_prev_year1_nov'],
			'dashboard_price_dec' => $data['ur_marinado_prev_year1_dec'],
			'dashboard_price_min' => $data['ur_marinado_prev_year1_min'],
			'dashboard_price_max' => $data['ur_marinado_prev_year1_max'],
			'dashboard_price_avg' => $data['ur_marinado_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'MARINADO FRIED',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ur_marinado1'],
			'dashboard_price_feb' => $data['ur_marinado2'],
			'dashboard_price_mar' => $data['ur_marinado3'],
			'dashboard_price_apr' => $data['ur_marinado4'],
			'dashboard_price_may' => $data['ur_marinado5'],
			'dashboard_price_june' => $data['ur_marinado6'],
			'dashboard_price_july' => $data['ur_marinado7'],
			'dashboard_price_aug' => $data['ur_marinado8'],
			'dashboard_price_sep' => $data['ur_marinado9'],
			'dashboard_price_oct' => $data['ur_marinado10'],
			'dashboard_price_nov' => $data['ur_marinado11'],
			'dashboard_price_dec' => $data['ur_marinado12'],
			'dashboard_price_min' => $data['ur_marinado_min'],
			'dashboard_price_max' => $data['ur_marinado_max'],
			'dashboard_price_avg' => $data['ur_marinado_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*UR Spicy Neck*/

		$join_ur_spicy = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 10200090 OR d.material_code = 1000401 OR d.material_code = 1000402 OR d.material_code = 1000617)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_spicy = $this->admin->get_join('sales_tbl a', $join_ur_spicy, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_spicy1'] = 0;
		$data['ur_spicy2'] = 0;
		$data['ur_spicy3'] = 0;
		$data['ur_spicy4'] = 0;
		$data['ur_spicy5'] = 0;
		$data['ur_spicy6'] = 0;
		$data['ur_spicy7'] = 0;
		$data['ur_spicy8'] = 0;
		$data['ur_spicy9'] = 0;
		$data['ur_spicy10'] = 0;
		$data['ur_spicy11'] = 0;
		$data['ur_spicy12'] = 0;
		$data['ur_spicy_total'] = 0;
		$data['ur_spicy_count'] = 0;
		$data['ur_spicy_avg'] = 0;
		$data['ur_spicy_min'] = 0;
		$data['ur_spicy_max'] = 0;

		foreach($get_ur_spicy as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_spicy' . $month] = $asp;
			$data['ur_spicy_total'] += $asp;

			if($asp < $data['ur_spicy_min'] || $data['ur_spicy_count'] == 0){
				$data['ur_spicy_min'] = $asp;
			}

			if($asp > $data['ur_spicy_max'] || $data['ur_spicy_count'] == 0){
				$data['ur_spicy_max'] = $asp;
			}

			$data['ur_spicy_count']++;
		}

		$data['ur_spicy_avg'] = $data['ur_spicy_total'] != 0 ? $data['ur_spicy_total'] / $data['ur_spicy_count'] : 0;

		$ur_spicy_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_spicy_prev_year2_jan'] = 0;
		$data['ur_spicy_prev_year2_feb'] = 0;
		$data['ur_spicy_prev_year2_mar'] = 0;
		$data['ur_spicy_prev_year2_apr'] = 0;
		$data['ur_spicy_prev_year2_may'] = 0;
		$data['ur_spicy_prev_year2_jun'] = 0;
		$data['ur_spicy_prev_year2_jul'] = 0;
		$data['ur_spicy_prev_year2_aug'] = 0;
		$data['ur_spicy_prev_year2_sep'] = 0;
		$data['ur_spicy_prev_year2_oct'] = 0;
		$data['ur_spicy_prev_year2_nov'] = 0;
		$data['ur_spicy_prev_year2_dec'] = 0;
		$data['ur_spicy_prev_year2_avg'] = 0;
		$data['ur_spicy_prev_year2_min'] = 0;
		$data['ur_spicy_prev_year2_max'] = 0;

		foreach($ur_spicy_prev_year2 as $row){
			$data['ur_spicy_prev_year2_jan'] = $row->jan_price;
			$data['ur_spicy_prev_year2_feb'] = $row->feb_price;
			$data['ur_spicy_prev_year2_mar'] = $row->mar_price;
			$data['ur_spicy_prev_year2_apr'] = $row->apr_price;
			$data['ur_spicy_prev_year2_may'] = $row->may_price;
			$data['ur_spicy_prev_year2_jun'] = $row->jun_price;
			$data['ur_spicy_prev_year2_jul'] = $row->jul_price;
			$data['ur_spicy_prev_year2_aug'] = $row->aug_price;
			$data['ur_spicy_prev_year2_sep'] = $row->sep_price;
			$data['ur_spicy_prev_year2_oct'] = $row->oct_price;
			$data['ur_spicy_prev_year2_nov'] = $row->nov_price;
			$data['ur_spicy_prev_year2_dec'] = $row->dec_price;
			$data['ur_spicy_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_spicy_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_spicy_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'SPICY NECK',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ur_spicy_prev_year2_jan'],
			'dashboard_price_feb' => $data['ur_spicy_prev_year2_feb'],
			'dashboard_price_mar' => $data['ur_spicy_prev_year2_mar'],
			'dashboard_price_apr' => $data['ur_spicy_prev_year2_apr'],
			'dashboard_price_may' => $data['ur_spicy_prev_year2_may'],
			'dashboard_price_june' => $data['ur_spicy_prev_year2_jun'],
			'dashboard_price_july' => $data['ur_spicy_prev_year2_jul'],
			'dashboard_price_aug' => $data['ur_spicy_prev_year2_aug'],
			'dashboard_price_sep' => $data['ur_spicy_prev_year2_sep'],
			'dashboard_price_oct' => $data['ur_spicy_prev_year2_oct'],
			'dashboard_price_nov' => $data['ur_spicy_prev_year2_nov'],
			'dashboard_price_dec' => $data['ur_spicy_prev_year2_dec'],
			'dashboard_price_min' => $data['ur_spicy_prev_year2_min'],
			'dashboard_price_max' => $data['ur_spicy_prev_year2_max'],
			'dashboard_price_avg' => $data['ur_spicy_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$ur_spicy_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_spicy_prev_year1_jan'] = 0;
		$data['ur_spicy_prev_year1_feb'] = 0;
		$data['ur_spicy_prev_year1_mar'] = 0;
		$data['ur_spicy_prev_year1_apr'] = 0;
		$data['ur_spicy_prev_year1_may'] = 0;
		$data['ur_spicy_prev_year1_jun'] = 0;
		$data['ur_spicy_prev_year1_jul'] = 0;
		$data['ur_spicy_prev_year1_aug'] = 0;
		$data['ur_spicy_prev_year1_sep'] = 0;
		$data['ur_spicy_prev_year1_oct'] = 0;
		$data['ur_spicy_prev_year1_nov'] = 0;
		$data['ur_spicy_prev_year1_dec'] = 0;
		$data['ur_spicy_prev_year1_avg'] = 0;
		$data['ur_spicy_prev_year1_min'] = 0;
		$data['ur_spicy_prev_year1_max'] = 0;

		foreach($ur_spicy_prev_year1 as $row){
			$data['ur_spicy_prev_year1_jan'] = $row->jan_price;
			$data['ur_spicy_prev_year1_feb'] = $row->feb_price;
			$data['ur_spicy_prev_year1_mar'] = $row->mar_price;
			$data['ur_spicy_prev_year1_apr'] = $row->apr_price;
			$data['ur_spicy_prev_year1_may'] = $row->may_price;
			$data['ur_spicy_prev_year1_jun'] = $row->jun_price;
			$data['ur_spicy_prev_year1_jul'] = $row->jul_price;
			$data['ur_spicy_prev_year1_aug'] = $row->aug_price;
			$data['ur_spicy_prev_year1_sep'] = $row->sep_price;
			$data['ur_spicy_prev_year1_oct'] = $row->oct_price;
			$data['ur_spicy_prev_year1_nov'] = $row->nov_price;
			$data['ur_spicy_prev_year1_dec'] = $row->dec_price;
			$data['ur_spicy_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_spicy_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_spicy_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'SPICY NECK',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ur_spicy_prev_year1_jan'],
			'dashboard_price_feb' => $data['ur_spicy_prev_year1_feb'],
			'dashboard_price_mar' => $data['ur_spicy_prev_year1_mar'],
			'dashboard_price_apr' => $data['ur_spicy_prev_year1_apr'],
			'dashboard_price_may' => $data['ur_spicy_prev_year1_may'],
			'dashboard_price_june' => $data['ur_spicy_prev_year1_jun'],
			'dashboard_price_july' => $data['ur_spicy_prev_year1_jul'],
			'dashboard_price_aug' => $data['ur_spicy_prev_year1_aug'],
			'dashboard_price_sep' => $data['ur_spicy_prev_year1_sep'],
			'dashboard_price_oct' => $data['ur_spicy_prev_year1_oct'],
			'dashboard_price_nov' => $data['ur_spicy_prev_year1_nov'],
			'dashboard_price_dec' => $data['ur_spicy_prev_year1_dec'],
			'dashboard_price_min' => $data['ur_spicy_prev_year1_min'],
			'dashboard_price_max' => $data['ur_spicy_prev_year1_max'],
			'dashboard_price_avg' => $data['ur_spicy_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'SPICY NECK',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ur_spicy1'],
			'dashboard_price_feb' => $data['ur_spicy2'],
			'dashboard_price_mar' => $data['ur_spicy3'],
			'dashboard_price_apr' => $data['ur_spicy4'],
			'dashboard_price_may' => $data['ur_spicy5'],
			'dashboard_price_june' => $data['ur_spicy6'],
			'dashboard_price_july' => $data['ur_spicy7'],
			'dashboard_price_aug' => $data['ur_spicy8'],
			'dashboard_price_sep' => $data['ur_spicy9'],
			'dashboard_price_oct' => $data['ur_spicy10'],
			'dashboard_price_nov' => $data['ur_spicy11'],
			'dashboard_price_dec' => $data['ur_spicy12'],
			'dashboard_price_min' => $data['ur_spicy_min'],
			'dashboard_price_max' => $data['ur_spicy_max'],
			'dashboard_price_avg' => $data['ur_spicy_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*UR Nuggets*/

		$join_ur_nuggets = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 40000016 OR d.material_code = 40000019 OR d.material_code = 40000053)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER VAP PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_nuggets = $this->admin->get_join('sales_tbl a', $join_ur_nuggets, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_nuggets1'] = 0;
		$data['ur_nuggets2'] = 0;
		$data['ur_nuggets3'] = 0;
		$data['ur_nuggets4'] = 0;
		$data['ur_nuggets5'] = 0;
		$data['ur_nuggets6'] = 0;
		$data['ur_nuggets7'] = 0;
		$data['ur_nuggets8'] = 0;
		$data['ur_nuggets9'] = 0;
		$data['ur_nuggets10'] = 0;
		$data['ur_nuggets11'] = 0;
		$data['ur_nuggets12'] = 0;
		$data['ur_nuggets_total'] = 0;
		$data['ur_nuggets_count'] = 0;
		$data['ur_nuggets_avg'] = 0;
		$data['ur_nuggets_min'] = 0;
		$data['ur_nuggets_max'] = 0;

		foreach($get_ur_nuggets as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_nuggets' . $month] = $asp;
			$data['ur_nuggets_total'] += $asp;

			if($asp < $data['ur_nuggets_min'] || $data['ur_nuggets_count'] == 0){
				$data['ur_nuggets_min'] = $asp;
			}

			if($asp > $data['ur_nuggets_max'] || $data['ur_nuggets_count'] == 0){
				$data['ur_nuggets_max'] = $asp;
			}

			$data['ur_nuggets_count']++;
		}

		$data['ur_nuggets_avg'] = $data['ur_nuggets_total'] != 0 ? $data['ur_nuggets_total'] / $data['ur_nuggets_count'] : 0;


		$ur_nuggets_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-NUGGETS', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_nuggets_prev_year2_jan'] = 0;
		$data['ur_nuggets_prev_year2_feb'] = 0;
		$data['ur_nuggets_prev_year2_mar'] = 0;
		$data['ur_nuggets_prev_year2_apr'] = 0;
		$data['ur_nuggets_prev_year2_may'] = 0;
		$data['ur_nuggets_prev_year2_jun'] = 0;
		$data['ur_nuggets_prev_year2_jul'] = 0;
		$data['ur_nuggets_prev_year2_aug'] = 0;
		$data['ur_nuggets_prev_year2_sep'] = 0;
		$data['ur_nuggets_prev_year2_oct'] = 0;
		$data['ur_nuggets_prev_year2_nov'] = 0;
		$data['ur_nuggets_prev_year2_dec'] = 0;
		$data['ur_nuggets_prev_year2_avg'] = 0;
		$data['ur_nuggets_prev_year2_min'] = 0;
		$data['ur_nuggets_prev_year2_max'] = 0;

		foreach($ur_nuggets_prev_year2 as $row){
			$data['ur_nuggets_prev_year2_jan'] = $row->jan_price;
			$data['ur_nuggets_prev_year2_feb'] = $row->feb_price;
			$data['ur_nuggets_prev_year2_mar'] = $row->mar_price;
			$data['ur_nuggets_prev_year2_apr'] = $row->apr_price;
			$data['ur_nuggets_prev_year2_may'] = $row->may_price;
			$data['ur_nuggets_prev_year2_jun'] = $row->jun_price;
			$data['ur_nuggets_prev_year2_jul'] = $row->jul_price;
			$data['ur_nuggets_prev_year2_aug'] = $row->aug_price;
			$data['ur_nuggets_prev_year2_sep'] = $row->sep_price;
			$data['ur_nuggets_prev_year2_oct'] = $row->oct_price;
			$data['ur_nuggets_prev_year2_nov'] = $row->nov_price;
			$data['ur_nuggets_prev_year2_dec'] = $row->dec_price;
			$data['ur_nuggets_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_nuggets_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_nuggets_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'VAP-NUGGETS',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ur_nuggets_prev_year2_jan'],
			'dashboard_price_feb' => $data['ur_nuggets_prev_year2_feb'],
			'dashboard_price_mar' => $data['ur_nuggets_prev_year2_mar'],
			'dashboard_price_apr' => $data['ur_nuggets_prev_year2_apr'],
			'dashboard_price_may' => $data['ur_nuggets_prev_year2_may'],
			'dashboard_price_june' => $data['ur_nuggets_prev_year2_jun'],
			'dashboard_price_july' => $data['ur_nuggets_prev_year2_jul'],
			'dashboard_price_aug' => $data['ur_nuggets_prev_year2_aug'],
			'dashboard_price_sep' => $data['ur_nuggets_prev_year2_sep'],
			'dashboard_price_oct' => $data['ur_nuggets_prev_year2_oct'],
			'dashboard_price_nov' => $data['ur_nuggets_prev_year2_nov'],
			'dashboard_price_dec' => $data['ur_nuggets_prev_year2_dec'],
			'dashboard_price_min' => $data['ur_nuggets_prev_year2_min'],
			'dashboard_price_max' => $data['ur_nuggets_prev_year2_max'],
			'dashboard_price_avg' => $data['ur_nuggets_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$ur_nuggets_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-NUGGETS', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_nuggets_prev_year1_jan'] = 0;
		$data['ur_nuggets_prev_year1_feb'] = 0;
		$data['ur_nuggets_prev_year1_mar'] = 0;
		$data['ur_nuggets_prev_year1_apr'] = 0;
		$data['ur_nuggets_prev_year1_may'] = 0;
		$data['ur_nuggets_prev_year1_jun'] = 0;
		$data['ur_nuggets_prev_year1_jul'] = 0;
		$data['ur_nuggets_prev_year1_aug'] = 0;
		$data['ur_nuggets_prev_year1_sep'] = 0;
		$data['ur_nuggets_prev_year1_oct'] = 0;
		$data['ur_nuggets_prev_year1_nov'] = 0;
		$data['ur_nuggets_prev_year1_dec'] = 0;
		$data['ur_nuggets_prev_year1_avg'] = 0;
		$data['ur_nuggets_prev_year1_min'] = 0;
		$data['ur_nuggets_prev_year1_max'] = 0;

		foreach($ur_nuggets_prev_year1 as $row){
			$data['ur_nuggets_prev_year1_jan'] = $row->jan_price;
			$data['ur_nuggets_prev_year1_feb'] = $row->feb_price;
			$data['ur_nuggets_prev_year1_mar'] = $row->mar_price;
			$data['ur_nuggets_prev_year1_apr'] = $row->apr_price;
			$data['ur_nuggets_prev_year1_may'] = $row->may_price;
			$data['ur_nuggets_prev_year1_jun'] = $row->jun_price;
			$data['ur_nuggets_prev_year1_jul'] = $row->jul_price;
			$data['ur_nuggets_prev_year1_aug'] = $row->aug_price;
			$data['ur_nuggets_prev_year1_sep'] = $row->sep_price;
			$data['ur_nuggets_prev_year1_oct'] = $row->oct_price;
			$data['ur_nuggets_prev_year1_nov'] = $row->nov_price;
			$data['ur_nuggets_prev_year1_dec'] = $row->dec_price;
			$data['ur_nuggets_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_nuggets_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_nuggets_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'VAP-NUGGETS',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ur_nuggets_prev_year1_jan'],
			'dashboard_price_feb' => $data['ur_nuggets_prev_year1_feb'],
			'dashboard_price_mar' => $data['ur_nuggets_prev_year1_mar'],
			'dashboard_price_apr' => $data['ur_nuggets_prev_year1_apr'],
			'dashboard_price_may' => $data['ur_nuggets_prev_year1_may'],
			'dashboard_price_june' => $data['ur_nuggets_prev_year1_jun'],
			'dashboard_price_july' => $data['ur_nuggets_prev_year1_jul'],
			'dashboard_price_aug' => $data['ur_nuggets_prev_year1_aug'],
			'dashboard_price_sep' => $data['ur_nuggets_prev_year1_sep'],
			'dashboard_price_oct' => $data['ur_nuggets_prev_year1_oct'],
			'dashboard_price_nov' => $data['ur_nuggets_prev_year1_nov'],
			'dashboard_price_dec' => $data['ur_nuggets_prev_year1_dec'],
			'dashboard_price_min' => $data['ur_nuggets_prev_year1_min'],
			'dashboard_price_max' => $data['ur_nuggets_prev_year1_max'],
			'dashboard_price_avg' => $data['ur_nuggets_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'VAP-NUGGETS',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ur_nuggets1'],
			'dashboard_price_feb' => $data['ur_nuggets2'],
			'dashboard_price_mar' => $data['ur_nuggets3'],
			'dashboard_price_apr' => $data['ur_nuggets4'],
			'dashboard_price_may' => $data['ur_nuggets5'],
			'dashboard_price_june' => $data['ur_nuggets6'],
			'dashboard_price_july' => $data['ur_nuggets7'],
			'dashboard_price_aug' => $data['ur_nuggets8'],
			'dashboard_price_sep' => $data['ur_nuggets9'],
			'dashboard_price_oct' => $data['ur_nuggets10'],
			'dashboard_price_nov' => $data['ur_nuggets11'],
			'dashboard_price_dec' => $data['ur_nuggets12'],
			'dashboard_price_min' => $data['ur_nuggets_min'],
			'dashboard_price_max' => $data['ur_nuggets_max'],
			'dashboard_price_avg' => $data['ur_nuggets_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*UR 11 PC PICA PICA CUTS*/

		$join_ur_pica = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code IN (10400170, 10200089)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_pica = $this->admin->get_join('sales_tbl a', $join_ur_pica, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_pica1'] = 0;
		$data['ur_pica2'] = 0;
		$data['ur_pica3'] = 0;
		$data['ur_pica4'] = 0;
		$data['ur_pica5'] = 0;
		$data['ur_pica6'] = 0;
		$data['ur_pica7'] = 0;
		$data['ur_pica8'] = 0;
		$data['ur_pica9'] = 0;
		$data['ur_pica10'] = 0;
		$data['ur_pica11'] = 0;
		$data['ur_pica12'] = 0;
		$data['ur_pica_total'] = 0;
		$data['ur_pica_count'] = 0;
		$data['ur_pica_avg'] = 0;
		$data['ur_pica_min'] = 0;
		$data['ur_pica_max'] = 0;

		foreach($get_ur_pica as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_pica' . $month] = $asp;
			$data['ur_pica_total'] += $asp;

			if($asp < $data['ur_pica_min'] || $data['ur_pica_count'] == 0){
				$data['ur_pica_min'] = $asp;
			}

			if($asp > $data['ur_pica_max'] || $data['ur_pica_count'] == 0){
				$data['ur_pica_max'] = $asp;
			}

			$data['ur_pica_count']++;
		}

		$data['ur_pica_avg'] = $data['ur_pica_total'] != 0 ? $data['ur_pica_total'] / $data['ur_pica_count'] : 0;


		$ur_pica_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_pica_prev_year2_jan'] = 0;
		$data['ur_pica_prev_year2_feb'] = 0;
		$data['ur_pica_prev_year2_mar'] = 0;
		$data['ur_pica_prev_year2_apr'] = 0;
		$data['ur_pica_prev_year2_may'] = 0;
		$data['ur_pica_prev_year2_jun'] = 0;
		$data['ur_pica_prev_year2_jul'] = 0;
		$data['ur_pica_prev_year2_aug'] = 0;
		$data['ur_pica_prev_year2_sep'] = 0;
		$data['ur_pica_prev_year2_oct'] = 0;
		$data['ur_pica_prev_year2_nov'] = 0;
		$data['ur_pica_prev_year2_dec'] = 0;
		$data['ur_pica_prev_year2_avg'] = 0;
		$data['ur_pica_prev_year2_min'] = 0;
		$data['ur_pica_prev_year2_max'] = 0;

		foreach($ur_pica_prev_year2 as $row){
			$data['ur_pica_prev_year2_jan'] = $row->jan_price;
			$data['ur_pica_prev_year2_feb'] = $row->feb_price;
			$data['ur_pica_prev_year2_mar'] = $row->mar_price;
			$data['ur_pica_prev_year2_apr'] = $row->apr_price;
			$data['ur_pica_prev_year2_may'] = $row->may_price;
			$data['ur_pica_prev_year2_jun'] = $row->jun_price;
			$data['ur_pica_prev_year2_jul'] = $row->jul_price;
			$data['ur_pica_prev_year2_aug'] = $row->aug_price;
			$data['ur_pica_prev_year2_sep'] = $row->sep_price;
			$data['ur_pica_prev_year2_oct'] = $row->oct_price;
			$data['ur_pica_prev_year2_nov'] = $row->nov_price;
			$data['ur_pica_prev_year2_dec'] = $row->dec_price;
			$data['ur_pica_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_pica_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_pica_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => '11 PC',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ur_pica_prev_year2_jan'],
			'dashboard_price_feb' => $data['ur_pica_prev_year2_feb'],
			'dashboard_price_mar' => $data['ur_pica_prev_year2_mar'],
			'dashboard_price_apr' => $data['ur_pica_prev_year2_apr'],
			'dashboard_price_may' => $data['ur_pica_prev_year2_may'],
			'dashboard_price_june' => $data['ur_pica_prev_year2_jun'],
			'dashboard_price_july' => $data['ur_pica_prev_year2_jul'],
			'dashboard_price_aug' => $data['ur_pica_prev_year2_aug'],
			'dashboard_price_sep' => $data['ur_pica_prev_year2_sep'],
			'dashboard_price_oct' => $data['ur_pica_prev_year2_oct'],
			'dashboard_price_nov' => $data['ur_pica_prev_year2_nov'],
			'dashboard_price_dec' => $data['ur_pica_prev_year2_dec'],
			'dashboard_price_min' => $data['ur_pica_prev_year2_min'],
			'dashboard_price_max' => $data['ur_pica_prev_year2_max'],
			'dashboard_price_avg' => $data['ur_pica_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$ur_pica_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_pica_prev_year1_jan'] = 0;
		$data['ur_pica_prev_year1_feb'] = 0;
		$data['ur_pica_prev_year1_mar'] = 0;
		$data['ur_pica_prev_year1_apr'] = 0;
		$data['ur_pica_prev_year1_may'] = 0;
		$data['ur_pica_prev_year1_jun'] = 0;
		$data['ur_pica_prev_year1_jul'] = 0;
		$data['ur_pica_prev_year1_aug'] = 0;
		$data['ur_pica_prev_year1_sep'] = 0;
		$data['ur_pica_prev_year1_oct'] = 0;
		$data['ur_pica_prev_year1_nov'] = 0;
		$data['ur_pica_prev_year1_dec'] = 0;
		$data['ur_pica_prev_year1_avg'] = 0;
		$data['ur_pica_prev_year1_min'] = 0;
		$data['ur_pica_prev_year1_max'] = 0;

		foreach($ur_pica_prev_year1 as $row){
			$data['ur_pica_prev_year1_jan'] = $row->jan_price;
			$data['ur_pica_prev_year1_feb'] = $row->feb_price;
			$data['ur_pica_prev_year1_mar'] = $row->mar_price;
			$data['ur_pica_prev_year1_apr'] = $row->apr_price;
			$data['ur_pica_prev_year1_may'] = $row->may_price;
			$data['ur_pica_prev_year1_jun'] = $row->jun_price;
			$data['ur_pica_prev_year1_jul'] = $row->jul_price;
			$data['ur_pica_prev_year1_aug'] = $row->aug_price;
			$data['ur_pica_prev_year1_sep'] = $row->sep_price;
			$data['ur_pica_prev_year1_oct'] = $row->oct_price;
			$data['ur_pica_prev_year1_nov'] = $row->nov_price;
			$data['ur_pica_prev_year1_dec'] = $row->dec_price;
			$data['ur_pica_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_pica_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_pica_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => '11 PC',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ur_pica_prev_year1_jan'],
			'dashboard_price_feb' => $data['ur_pica_prev_year1_feb'],
			'dashboard_price_mar' => $data['ur_pica_prev_year1_mar'],
			'dashboard_price_apr' => $data['ur_pica_prev_year1_apr'],
			'dashboard_price_may' => $data['ur_pica_prev_year1_may'],
			'dashboard_price_june' => $data['ur_pica_prev_year1_jun'],
			'dashboard_price_july' => $data['ur_pica_prev_year1_jul'],
			'dashboard_price_aug' => $data['ur_pica_prev_year1_aug'],
			'dashboard_price_sep' => $data['ur_pica_prev_year1_sep'],
			'dashboard_price_oct' => $data['ur_pica_prev_year1_oct'],
			'dashboard_price_nov' => $data['ur_pica_prev_year1_nov'],
			'dashboard_price_dec' => $data['ur_pica_prev_year1_dec'],
			'dashboard_price_min' => $data['ur_pica_prev_year1_min'],
			'dashboard_price_max' => $data['ur_pica_prev_year1_max'],
			'dashboard_price_avg' => $data['ur_pica_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => '11 PC',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ur_pica1'],
			'dashboard_price_feb' => $data['ur_pica2'],
			'dashboard_price_mar' => $data['ur_pica3'],
			'dashboard_price_apr' => $data['ur_pica4'],
			'dashboard_price_may' => $data['ur_pica5'],
			'dashboard_price_june' => $data['ur_pica6'],
			'dashboard_price_july' => $data['ur_pica7'],
			'dashboard_price_aug' => $data['ur_pica8'],
			'dashboard_price_sep' => $data['ur_pica9'],
			'dashboard_price_oct' => $data['ur_pica10'],
			'dashboard_price_nov' => $data['ur_pica11'],
			'dashboard_price_dec' => $data['ur_pica12'],
			'dashboard_price_min' => $data['ur_pica_min'],
			'dashboard_price_max' => $data['ur_pica_max'],
			'dashboard_price_avg' => $data['ur_pica_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		
		/*UR 1 PC BOSSING CUTS */
		
		$join_ur_bossing = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code IN (10400836)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_bossing = $this->admin->get_join('sales_tbl a', $join_ur_bossing, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_bossing1'] = 0;
		$data['ur_bossing2'] = 0;
		$data['ur_bossing3'] = 0;
		$data['ur_bossing4'] = 0;
		$data['ur_bossing5'] = 0;
		$data['ur_bossing6'] = 0;
		$data['ur_bossing7'] = 0;
		$data['ur_bossing8'] = 0;
		$data['ur_bossing9'] = 0;
		$data['ur_bossing10'] = 0;
		$data['ur_bossing11'] = 0;
		$data['ur_bossing12'] = 0;
		$data['ur_bossing_total'] = 0;
		$data['ur_bossing_count'] = 0;
		$data['ur_bossing_avg'] = 0;
		$data['ur_bossing_min'] = 0;
		$data['ur_bossing_max'] = 0;

		foreach($get_ur_bossing as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_bossing' . $month] = $asp;
			$data['ur_bossing_total'] += $asp;

			if($asp < $data['ur_bossing_min'] || $data['ur_bossing_count'] == 0){
				$data['ur_bossing_min'] = $asp;
			}

			if($asp > $data['ur_bossing_max'] || $data['ur_bossing_count'] == 0){
				$data['ur_bossing_max'] = $asp;
			}

			$data['ur_bossing_count']++;
		}

		$data['ur_bossing_avg'] = $data['ur_bossing_total'] != 0 ? $data['ur_bossing_total'] / $data['ur_bossing_count'] : 0;


		$ur_bossing_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '1 PC', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_bossing_prev_year2_jan'] = 0;
		$data['ur_bossing_prev_year2_feb'] = 0;
		$data['ur_bossing_prev_year2_mar'] = 0;
		$data['ur_bossing_prev_year2_apr'] = 0;
		$data['ur_bossing_prev_year2_may'] = 0;
		$data['ur_bossing_prev_year2_jun'] = 0;
		$data['ur_bossing_prev_year2_jul'] = 0;
		$data['ur_bossing_prev_year2_aug'] = 0;
		$data['ur_bossing_prev_year2_sep'] = 0;
		$data['ur_bossing_prev_year2_oct'] = 0;
		$data['ur_bossing_prev_year2_nov'] = 0;
		$data['ur_bossing_prev_year2_dec'] = 0;
		$data['ur_bossing_prev_year2_avg'] = 0;
		$data['ur_bossing_prev_year2_min'] = 0;
		$data['ur_bossing_prev_year2_max'] = 0;

		foreach($ur_bossing_prev_year2 as $row){
			$data['ur_bossing_prev_year2_jan'] = $row->jan_price;
			$data['ur_bossing_prev_year2_feb'] = $row->feb_price;
			$data['ur_bossing_prev_year2_mar'] = $row->mar_price;
			$data['ur_bossing_prev_year2_apr'] = $row->apr_price;
			$data['ur_bossing_prev_year2_may'] = $row->may_price;
			$data['ur_bossing_prev_year2_jun'] = $row->jun_price;
			$data['ur_bossing_prev_year2_jul'] = $row->jul_price;
			$data['ur_bossing_prev_year2_aug'] = $row->aug_price;
			$data['ur_bossing_prev_year2_sep'] = $row->sep_price;
			$data['ur_bossing_prev_year2_oct'] = $row->oct_price;
			$data['ur_bossing_prev_year2_nov'] = $row->nov_price;
			$data['ur_bossing_prev_year2_dec'] = $row->dec_price;
			$data['ur_bossing_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_bossing_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_bossing_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => '1 PC',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ur_bossing_prev_year2_jan'],
			'dashboard_price_feb' => $data['ur_bossing_prev_year2_feb'],
			'dashboard_price_mar' => $data['ur_bossing_prev_year2_mar'],
			'dashboard_price_apr' => $data['ur_bossing_prev_year2_apr'],
			'dashboard_price_may' => $data['ur_bossing_prev_year2_may'],
			'dashboard_price_june' => $data['ur_bossing_prev_year2_jun'],
			'dashboard_price_july' => $data['ur_bossing_prev_year2_jul'],
			'dashboard_price_aug' => $data['ur_bossing_prev_year2_aug'],
			'dashboard_price_sep' => $data['ur_bossing_prev_year2_sep'],
			'dashboard_price_oct' => $data['ur_bossing_prev_year2_oct'],
			'dashboard_price_nov' => $data['ur_bossing_prev_year2_nov'],
			'dashboard_price_dec' => $data['ur_bossing_prev_year2_dec'],
			'dashboard_price_min' => $data['ur_bossing_prev_year2_min'],
			'dashboard_price_max' => $data['ur_bossing_prev_year2_max'],
			'dashboard_price_avg' => $data['ur_bossing_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$ur_bossing_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '1 PC', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_bossing_prev_year1_jan'] = 0;
		$data['ur_bossing_prev_year1_feb'] = 0;
		$data['ur_bossing_prev_year1_mar'] = 0;
		$data['ur_bossing_prev_year1_apr'] = 0;
		$data['ur_bossing_prev_year1_may'] = 0;
		$data['ur_bossing_prev_year1_jun'] = 0;
		$data['ur_bossing_prev_year1_jul'] = 0;
		$data['ur_bossing_prev_year1_aug'] = 0;
		$data['ur_bossing_prev_year1_sep'] = 0;
		$data['ur_bossing_prev_year1_oct'] = 0;
		$data['ur_bossing_prev_year1_nov'] = 0;
		$data['ur_bossing_prev_year1_dec'] = 0;
		$data['ur_bossing_prev_year1_avg'] = 0;
		$data['ur_bossing_prev_year1_min'] = 0;
		$data['ur_bossing_prev_year1_max'] = 0;

		foreach($ur_bossing_prev_year1 as $row){
			$data['ur_bossing_prev_year1_jan'] = $row->jan_price;
			$data['ur_bossing_prev_year1_feb'] = $row->feb_price;
			$data['ur_bossing_prev_year1_mar'] = $row->mar_price;
			$data['ur_bossing_prev_year1_apr'] = $row->apr_price;
			$data['ur_bossing_prev_year1_may'] = $row->may_price;
			$data['ur_bossing_prev_year1_jun'] = $row->jun_price;
			$data['ur_bossing_prev_year1_jul'] = $row->jul_price;
			$data['ur_bossing_prev_year1_aug'] = $row->aug_price;
			$data['ur_bossing_prev_year1_sep'] = $row->sep_price;
			$data['ur_bossing_prev_year1_oct'] = $row->oct_price;
			$data['ur_bossing_prev_year1_nov'] = $row->nov_price;
			$data['ur_bossing_prev_year1_dec'] = $row->dec_price;
			$data['ur_bossing_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_bossing_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_bossing_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => '1 PC',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ur_bossing_prev_year1_jan'],
			'dashboard_price_feb' => $data['ur_bossing_prev_year1_feb'],
			'dashboard_price_mar' => $data['ur_bossing_prev_year1_mar'],
			'dashboard_price_apr' => $data['ur_bossing_prev_year1_apr'],
			'dashboard_price_may' => $data['ur_bossing_prev_year1_may'],
			'dashboard_price_june' => $data['ur_bossing_prev_year1_jun'],
			'dashboard_price_july' => $data['ur_bossing_prev_year1_jul'],
			'dashboard_price_aug' => $data['ur_bossing_prev_year1_aug'],
			'dashboard_price_sep' => $data['ur_bossing_prev_year1_sep'],
			'dashboard_price_oct' => $data['ur_bossing_prev_year1_oct'],
			'dashboard_price_nov' => $data['ur_bossing_prev_year1_nov'],
			'dashboard_price_dec' => $data['ur_bossing_prev_year1_dec'],
			'dashboard_price_min' => $data['ur_bossing_prev_year1_min'],
			'dashboard_price_max' => $data['ur_bossing_prev_year1_max'],
			'dashboard_price_avg' => $data['ur_bossing_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => '1 PC',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ur_bossing1'],
			'dashboard_price_feb' => $data['ur_bossing2'],
			'dashboard_price_mar' => $data['ur_bossing3'],
			'dashboard_price_apr' => $data['ur_bossing4'],
			'dashboard_price_may' => $data['ur_bossing5'],
			'dashboard_price_june' => $data['ur_bossing6'],
			'dashboard_price_july' => $data['ur_bossing7'],
			'dashboard_price_aug' => $data['ur_bossing8'],
			'dashboard_price_sep' => $data['ur_bossing9'],
			'dashboard_price_oct' => $data['ur_bossing10'],
			'dashboard_price_nov' => $data['ur_bossing11'],
			'dashboard_price_dec' => $data['ur_bossing12'],
			'dashboard_price_min' => $data['ur_bossing_min'],
			'dashboard_price_max' => $data['ur_bossing_max'],
			'dashboard_price_avg' => $data['ur_bossing_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);		

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		
		/*UR Chooksies Cut ups*/

		$join_ur_cutups = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 10000150',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'NON MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_cutups = $this->admin->get_join('sales_tbl a', $join_ur_cutups, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_cutups1'] = 0;
		$data['ur_cutups2'] = 0;
		$data['ur_cutups3'] = 0;
		$data['ur_cutups4'] = 0;
		$data['ur_cutups5'] = 0;
		$data['ur_cutups6'] = 0;
		$data['ur_cutups7'] = 0;
		$data['ur_cutups8'] = 0;
		$data['ur_cutups9'] = 0;
		$data['ur_cutups10'] = 0;
		$data['ur_cutups11'] = 0;
		$data['ur_cutups12'] = 0;
		$data['ur_cutups_total'] = 0;
		$data['ur_cutups_count'] = 0;
		$data['ur_cutups_avg'] = 0;
		$data['ur_cutups_min'] = 0;
		$data['ur_cutups_max'] = 0;

		foreach($get_ur_cutups as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_cutups' . $month] = $asp;
			$data['ur_cutups_total'] += $asp;

			if($asp < $data['ur_cutups_min'] || $data['ur_cutups_count'] == 0){
				$data['ur_cutups_min'] = $asp;
			}

			if($asp > $data['ur_cutups_max'] || $data['ur_cutups_count'] == 0){
				$data['ur_cutups_max'] = $asp;
			}

			$data['ur_cutups_count']++;
		}

		$data['ur_cutups_avg'] = $data['ur_cutups_total'] != 0 ? $data['ur_cutups_total'] / $data['ur_cutups_count'] : 0;


		$ur_cutups_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => ' CHOOKSIES CUTUPS', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_cutups_prev_year2_jan'] = 0;
		$data['ur_cutups_prev_year2_feb'] = 0;
		$data['ur_cutups_prev_year2_mar'] = 0;
		$data['ur_cutups_prev_year2_apr'] = 0;
		$data['ur_cutups_prev_year2_may'] = 0;
		$data['ur_cutups_prev_year2_jun'] = 0;
		$data['ur_cutups_prev_year2_jul'] = 0;
		$data['ur_cutups_prev_year2_aug'] = 0;
		$data['ur_cutups_prev_year2_sep'] = 0;
		$data['ur_cutups_prev_year2_oct'] = 0;
		$data['ur_cutups_prev_year2_nov'] = 0;
		$data['ur_cutups_prev_year2_dec'] = 0;
		$data['ur_cutups_prev_year2_avg'] = 0;
		$data['ur_cutups_prev_year2_min'] = 0;
		$data['ur_cutups_prev_year2_max'] = 0;

		foreach($ur_cutups_prev_year2 as $row){
			$data['ur_cutups_prev_year2_jan'] = $row->jan_price;
			$data['ur_cutups_prev_year2_feb'] = $row->feb_price;
			$data['ur_cutups_prev_year2_mar'] = $row->mar_price;
			$data['ur_cutups_prev_year2_apr'] = $row->apr_price;
			$data['ur_cutups_prev_year2_may'] = $row->may_price;
			$data['ur_cutups_prev_year2_jun'] = $row->jun_price;
			$data['ur_cutups_prev_year2_jul'] = $row->jul_price;
			$data['ur_cutups_prev_year2_aug'] = $row->aug_price;
			$data['ur_cutups_prev_year2_sep'] = $row->sep_price;
			$data['ur_cutups_prev_year2_oct'] = $row->oct_price;
			$data['ur_cutups_prev_year2_nov'] = $row->nov_price;
			$data['ur_cutups_prev_year2_dec'] = $row->dec_price;
			$data['ur_cutups_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_cutups_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_cutups_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'CHOOKSIES CUTUPS',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ur_cutups_prev_year2_jan'],
			'dashboard_price_feb' => $data['ur_cutups_prev_year2_feb'],
			'dashboard_price_mar' => $data['ur_cutups_prev_year2_mar'],
			'dashboard_price_apr' => $data['ur_cutups_prev_year2_apr'],
			'dashboard_price_may' => $data['ur_cutups_prev_year2_may'],
			'dashboard_price_june' => $data['ur_cutups_prev_year2_jun'],
			'dashboard_price_july' => $data['ur_cutups_prev_year2_jul'],
			'dashboard_price_aug' => $data['ur_cutups_prev_year2_aug'],
			'dashboard_price_sep' => $data['ur_cutups_prev_year2_sep'],
			'dashboard_price_oct' => $data['ur_cutups_prev_year2_oct'],
			'dashboard_price_nov' => $data['ur_cutups_prev_year2_nov'],
			'dashboard_price_dec' => $data['ur_cutups_prev_year2_dec'],
			'dashboard_price_min' => $data['ur_cutups_prev_year2_min'],
			'dashboard_price_max' => $data['ur_cutups_prev_year2_max'],
			'dashboard_price_avg' => $data['ur_cutups_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$ur_cutups_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES CUTUPS', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_cutups_prev_year1_jan'] = 0;
		$data['ur_cutups_prev_year1_feb'] = 0;
		$data['ur_cutups_prev_year1_mar'] = 0;
		$data['ur_cutups_prev_year1_apr'] = 0;
		$data['ur_cutups_prev_year1_may'] = 0;
		$data['ur_cutups_prev_year1_jun'] = 0;
		$data['ur_cutups_prev_year1_jul'] = 0;
		$data['ur_cutups_prev_year1_aug'] = 0;
		$data['ur_cutups_prev_year1_sep'] = 0;
		$data['ur_cutups_prev_year1_oct'] = 0;
		$data['ur_cutups_prev_year1_nov'] = 0;
		$data['ur_cutups_prev_year1_dec'] = 0;
		$data['ur_cutups_prev_year1_avg'] = 0;
		$data['ur_cutups_prev_year1_min'] = 0;
		$data['ur_cutups_prev_year1_max'] = 0;

		foreach($ur_cutups_prev_year1 as $row){
			$data['ur_cutups_prev_year1_jan'] = $row->jan_price;
			$data['ur_cutups_prev_year1_feb'] = $row->feb_price;
			$data['ur_cutups_prev_year1_mar'] = $row->mar_price;
			$data['ur_cutups_prev_year1_apr'] = $row->apr_price;
			$data['ur_cutups_prev_year1_may'] = $row->may_price;
			$data['ur_cutups_prev_year1_jun'] = $row->jun_price;
			$data['ur_cutups_prev_year1_jul'] = $row->jul_price;
			$data['ur_cutups_prev_year1_aug'] = $row->aug_price;
			$data['ur_cutups_prev_year1_sep'] = $row->sep_price;
			$data['ur_cutups_prev_year1_oct'] = $row->oct_price;
			$data['ur_cutups_prev_year1_nov'] = $row->nov_price;
			$data['ur_cutups_prev_year1_dec'] = $row->dec_price;
			$data['ur_cutups_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_cutups_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_cutups_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'CHOOKSIES CUTUPS',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ur_cutups_prev_year1_jan'],
			'dashboard_price_feb' => $data['ur_cutups_prev_year1_feb'],
			'dashboard_price_mar' => $data['ur_cutups_prev_year1_mar'],
			'dashboard_price_apr' => $data['ur_cutups_prev_year1_apr'],
			'dashboard_price_may' => $data['ur_cutups_prev_year1_may'],
			'dashboard_price_june' => $data['ur_cutups_prev_year1_jun'],
			'dashboard_price_july' => $data['ur_cutups_prev_year1_jul'],
			'dashboard_price_aug' => $data['ur_cutups_prev_year1_aug'],
			'dashboard_price_sep' => $data['ur_cutups_prev_year1_sep'],
			'dashboard_price_oct' => $data['ur_cutups_prev_year1_oct'],
			'dashboard_price_nov' => $data['ur_cutups_prev_year1_nov'],
			'dashboard_price_dec' => $data['ur_cutups_prev_year1_dec'],
			'dashboard_price_min' => $data['ur_cutups_prev_year1_min'],
			'dashboard_price_max' => $data['ur_cutups_prev_year1_max'],
			'dashboard_price_avg' => $data['ur_cutups_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'CHOOKSIES CUTUPS',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ur_cutups1'],
			'dashboard_price_feb' => $data['ur_cutups2'],
			'dashboard_price_mar' => $data['ur_cutups3'],
			'dashboard_price_apr' => $data['ur_cutups4'],
			'dashboard_price_may' => $data['ur_cutups5'],
			'dashboard_price_june' => $data['ur_cutups6'],
			'dashboard_price_july' => $data['ur_cutups7'],
			'dashboard_price_aug' => $data['ur_cutups8'],
			'dashboard_price_sep' => $data['ur_cutups9'],
			'dashboard_price_oct' => $data['ur_cutups10'],
			'dashboard_price_nov' => $data['ur_cutups11'],
			'dashboard_price_dec' => $data['ur_cutups12'],
			'dashboard_price_min' => $data['ur_cutups_min'],
			'dashboard_price_max' => $data['ur_cutups_max'],
			'dashboard_price_avg' => $data['ur_cutups_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		
		/*UR Liver / Gizzard*/

		$join_ur_liver = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVER / GIZZARD\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'ULING ROASTER\''
		);

		$get_ur_liver = $this->admin->get_join('sales_tbl a', $join_ur_liver, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['ur_liver1'] = 0;
		$data['ur_liver2'] = 0;
		$data['ur_liver3'] = 0;
		$data['ur_liver4'] = 0;
		$data['ur_liver5'] = 0;
		$data['ur_liver6'] = 0;
		$data['ur_liver7'] = 0;
		$data['ur_liver8'] = 0;
		$data['ur_liver9'] = 0;
		$data['ur_liver10'] = 0;
		$data['ur_liver11'] = 0;
		$data['ur_liver12'] = 0;
		$data['ur_liver_total'] = 0;
		$data['ur_liver_count'] = 0;
		$data['ur_liver_avg'] = 0;
		$data['ur_liver_min'] = 0;
		$data['ur_liver_max'] = 0;

		foreach($get_ur_liver as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['ur_liver' . $month] = $asp;
			$data['ur_liver_total'] += $asp;

			if($asp < $data['ur_liver_min'] || $data['ur_liver_count'] == 0){
				$data['ur_cutups_min'] = $asp;
			}

			if($asp > $data['ur_liver_max'] || $data['ur_liver_count'] == 0){
				$data['ur_liver_max'] = $asp;
			}

			$data['ur_liver_count']++;
		}

		$data['ur_liver_avg'] = $data['ur_liver_total'] != 0 ? $data['ur_liver_total'] / $data['ur_liver_count'] : 0;


		$ur_liver_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'GIZZARD / LIVER', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_liver_prev_year2_jan'] = 0;
		$data['ur_liver_prev_year2_feb'] = 0;
		$data['ur_liver_prev_year2_mar'] = 0;
		$data['ur_liver_prev_year2_apr'] = 0;
		$data['ur_liver_prev_year2_may'] = 0;
		$data['ur_liver_prev_year2_jun'] = 0;
		$data['ur_liver_prev_year2_jul'] = 0;
		$data['ur_liver_prev_year2_aug'] = 0;
		$data['ur_liver_prev_year2_sep'] = 0;
		$data['ur_liver_prev_year2_oct'] = 0;
		$data['ur_liver_prev_year2_nov'] = 0;
		$data['ur_liver_prev_year2_dec'] = 0;
		$data['ur_liver_prev_year2_avg'] = 0;
		$data['ur_liver_prev_year2_min'] = 0;
		$data['ur_liver_prev_year2_max'] = 0;

		foreach($ur_liver_prev_year2 as $row){
			$data['ur_liver_prev_year2_jan'] = $row->jan_price;
			$data['ur_liver_prev_year2_feb'] = $row->feb_price;
			$data['ur_liver_prev_year2_mar'] = $row->mar_price;
			$data['ur_liver_prev_year2_apr'] = $row->apr_price;
			$data['ur_liver_prev_year2_may'] = $row->may_price;
			$data['ur_liver_prev_year2_jun'] = $row->jun_price;
			$data['ur_liver_prev_year2_jul'] = $row->jul_price;
			$data['ur_liver_prev_year2_aug'] = $row->aug_price;
			$data['ur_liver_prev_year2_sep'] = $row->sep_price;
			$data['ur_liver_prev_year2_oct'] = $row->oct_price;
			$data['ur_liver_prev_year2_nov'] = $row->nov_price;
			$data['ur_liver_prev_year2_dec'] = $row->dec_price;
			$data['ur_liver_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_liver_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_liver_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'GIZZARD / LIVER',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['ur_liver_prev_year2_jan'],
			'dashboard_price_feb' => $data['ur_liver_prev_year2_feb'],
			'dashboard_price_mar' => $data['ur_liver_prev_year2_mar'],
			'dashboard_price_apr' => $data['ur_liver_prev_year2_apr'],
			'dashboard_price_may' => $data['ur_liver_prev_year2_may'],
			'dashboard_price_june' => $data['ur_liver_prev_year2_jun'],
			'dashboard_price_july' => $data['ur_liver_prev_year2_jul'],
			'dashboard_price_aug' => $data['ur_liver_prev_year2_aug'],
			'dashboard_price_sep' => $data['ur_liver_prev_year2_sep'],
			'dashboard_price_oct' => $data['ur_liver_prev_year2_oct'],
			'dashboard_price_nov' => $data['ur_liver_prev_year2_nov'],
			'dashboard_price_dec' => $data['ur_liver_prev_year2_dec'],
			'dashboard_price_min' => $data['ur_liver_prev_year2_min'],
			'dashboard_price_max' => $data['ur_liver_prev_year2_max'],
			'dashboard_price_avg' => $data['ur_liver_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$ur_liver_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'GIZZARD / LIVER', 'comp_price_segment' => 'UR', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['ur_liver_prev_year1_jan'] = 0;
		$data['ur_liver_prev_year1_feb'] = 0;
		$data['ur_liver_prev_year1_mar'] = 0;
		$data['ur_liver_prev_year1_apr'] = 0;
		$data['ur_liver_prev_year1_may'] = 0;
		$data['ur_liver_prev_year1_jun'] = 0;
		$data['ur_liver_prev_year1_jul'] = 0;
		$data['ur_liver_prev_year1_aug'] = 0;
		$data['ur_liver_prev_year1_sep'] = 0;
		$data['ur_liver_prev_year1_oct'] = 0;
		$data['ur_liver_prev_year1_nov'] = 0;
		$data['ur_liver_prev_year1_dec'] = 0;
		$data['ur_liver_prev_year1_avg'] = 0;
		$data['ur_liver_prev_year1_min'] = 0;
		$data['ur_liver_prev_year1_max'] = 0;

		foreach($ur_liver_prev_year1 as $row){
			$data['ur_liver_prev_year1_jan'] = $row->jan_price;
			$data['ur_liver_prev_year1_feb'] = $row->feb_price;
			$data['ur_liver_prev_year1_mar'] = $row->mar_price;
			$data['ur_liver_prev_year1_apr'] = $row->apr_price;
			$data['ur_liver_prev_year1_may'] = $row->may_price;
			$data['ur_liver_prev_year1_jun'] = $row->jun_price;
			$data['ur_liver_prev_year1_jul'] = $row->jul_price;
			$data['ur_liver_prev_year1_aug'] = $row->aug_price;
			$data['ur_liver_prev_year1_sep'] = $row->sep_price;
			$data['ur_liver_prev_year1_oct'] = $row->oct_price;
			$data['ur_liver_prev_year1_nov'] = $row->nov_price;
			$data['ur_liver_prev_year1_dec'] = $row->dec_price;
			$data['ur_liver_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_liver_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['ur_liver_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'GIZZARD / LIVER',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['ur_liver_prev_year1_jan'],
			'dashboard_price_feb' => $data['ur_liver_prev_year1_feb'],
			'dashboard_price_mar' => $data['ur_liver_prev_year1_mar'],
			'dashboard_price_apr' => $data['ur_liver_prev_year1_apr'],
			'dashboard_price_may' => $data['ur_liver_prev_year1_may'],
			'dashboard_price_june' => $data['ur_liver_prev_year1_jun'],
			'dashboard_price_july' => $data['ur_liver_prev_year1_jul'],
			'dashboard_price_aug' => $data['ur_liver_prev_year1_aug'],
			'dashboard_price_sep' => $data['ur_liver_prev_year1_sep'],
			'dashboard_price_oct' => $data['ur_liver_prev_year1_oct'],
			'dashboard_price_nov' => $data['ur_liver_prev_year1_nov'],
			'dashboard_price_dec' => $data['ur_liver_prev_year1_dec'],
			'dashboard_price_min' => $data['ur_liver_prev_year1_min'],
			'dashboard_price_max' => $data['ur_liver_prev_year1_max'],
			'dashboard_price_avg' => $data['ur_liver_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'UR',
			'dashboard_price_product' => 'GIZZARD / LIVER',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['ur_liver1'],
			'dashboard_price_feb' => $data['ur_liver2'],
			'dashboard_price_mar' => $data['ur_liver3'],
			'dashboard_price_apr' => $data['ur_liver4'],
			'dashboard_price_may' => $data['ur_liver5'],
			'dashboard_price_june' => $data['ur_liver6'],
			'dashboard_price_july' => $data['ur_liver7'],
			'dashboard_price_aug' => $data['ur_liver8'],
			'dashboard_price_sep' => $data['ur_liver9'],
			'dashboard_price_oct' => $data['ur_liver10'],
			'dashboard_price_nov' => $data['ur_liver11'],
			'dashboard_price_dec' => $data['ur_liver12'],
			'dashboard_price_min' => $data['ur_liver_max'],
			'dashboard_price_max' => $data['ur_liver_min'],
			'dashboard_price_avg' => $data['ur_liver_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		
		/*SUPERMARKET Liver / Gizzard*/

		/*$join_smkt_liver = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVER / GIZZARD\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'SUPERMARKET\''
		);

		$get_smkt_liver = $this->admin->get_join('sales_tbl a', $join_smkt_liver, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['smkt_liver1'] = 0;
		$data['smkt_liver2'] = 0;
		$data['smkt_liver3'] = 0;
		$data['smkt_liver4'] = 0;
		$data['smkt_liver5'] = 0;
		$data['smkt_liver6'] = 0;
		$data['smkt_liver7'] = 0;
		$data['smkt_liver8'] = 0;
		$data['smkt_liver9'] = 0;
		$data['smkt_liver10'] = 0;
		$data['smkt_liver11'] = 0;
		$data['smkt_liver12'] = 0;
		$data['smkt_liver_total'] = 0;
		$data['smkt_liver_count'] = 0;
		$data['smkt_liver_avg'] = 0;
		$data['smkt_liver_min'] = 0;
		$data['smkt_liver_max'] = 0;

		foreach($get_smkt_liver as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['smkt_liver' . $month] = $asp;
			$data['smkt_liver_total'] += $asp;

			if($asp < $data['smkt_liver_min'] || $data['smkt_liver_count'] == 0){
				$data['smkt_liver_min'] = $asp;
			}

			if($asp > $data['smkt_liver_max'] || $data['smkt_liver_count'] == 0){
				$data['smkt_liver_max'] = $asp;
			}

			$data['smkt_liver_count']++;
		}

		$data['smkt_liver_avg'] = $data['smkt_liver_total'] != 0 ? $data['smkt_liver_total'] / $data['smkt_liver_count'] : 0;


		$smkt_liver_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - LIVER / GIZZARD', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_liver_prev_year2_jan'] = 0;
		$data['smkt_liver_prev_year2_feb'] = 0;
		$data['smkt_liver_prev_year2_mar'] = 0;
		$data['smkt_liver_prev_year2_apr'] = 0;
		$data['smkt_liver_prev_year2_may'] = 0;
		$data['smkt_liver_prev_year2_jun'] = 0;
		$data['smkt_liver_prev_year2_jul'] = 0;
		$data['smkt_liver_prev_year2_aug'] = 0;
		$data['smkt_liver_prev_year2_sep'] = 0;
		$data['smkt_liver_prev_year2_oct'] = 0;
		$data['smkt_liver_prev_year2_nov'] = 0;
		$data['smkt_liver_prev_year2_dec'] = 0;
		$data['smkt_liver_prev_year2_avg'] = 0;
		$data['smkt_liver_prev_year2_min'] = 0;
		$data['smkt_liver_prev_year2_max'] = 0;

		foreach($smkt_liver_prev_year2 as $row){
			$data['smkt_liver_prev_year2_jan'] = $row->jan_price;
			$data['smkt_liver_prev_year2_feb'] = $row->feb_price;
			$data['smkt_liver_prev_year2_mar'] = $row->mar_price;
			$data['smkt_liver_prev_year2_apr'] = $row->apr_price;
			$data['smkt_liver_prev_year2_may'] = $row->may_price;
			$data['smkt_liver_prev_year2_jun'] = $row->jun_price;
			$data['smkt_liver_prev_year2_jul'] = $row->jul_price;
			$data['smkt_liver_prev_year2_aug'] = $row->aug_price;
			$data['smkt_liver_prev_year2_sep'] = $row->sep_price;
			$data['smkt_liver_prev_year2_oct'] = $row->oct_price;
			$data['smkt_liver_prev_year2_nov'] = $row->nov_price;
			$data['smkt_liver_prev_year2_dec'] = $row->dec_price;
			$data['smkt_liver_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['smkt_liver_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['smkt_liver_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'SMKT - LIVER / GIZZARD',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['smkt_liver_prev_year2_jan'],
			'dashboard_price_feb' => $data['smkt_liver_prev_year2_feb'],
			'dashboard_price_mar' => $data['smkt_liver_prev_year2_mar'],
			'dashboard_price_apr' => $data['smkt_liver_prev_year2_apr'],
			'dashboard_price_may' => $data['smkt_liver_prev_year2_may'],
			'dashboard_price_june' => $data['smkt_liver_prev_year2_jun'],
			'dashboard_price_july' => $data['smkt_liver_prev_year2_jul'],
			'dashboard_price_aug' => $data['smkt_liver_prev_year2_aug'],
			'dashboard_price_sep' => $data['smkt_liver_prev_year2_sep'],
			'dashboard_price_oct' => $data['smkt_liver_prev_year2_oct'],
			'dashboard_price_nov' => $data['smkt_liver_prev_year2_nov'],
			'dashboard_price_dec' => $data['smkt_liver_prev_year2_dec'],
			'dashboard_price_min' => $data['smkt_liver_prev_year2_min'],
			'dashboard_price_max' => $data['smkt_liver_prev_year2_max'],
			'dashboard_price_avg' => $data['smkt_liver_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$smkt_liver_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - LIVER / GIZZARD', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_liver_prev_year1_jan'] = 0;
		$data['smkt_liver_prev_year1_feb'] = 0;
		$data['smkt_liver_prev_year1_mar'] = 0;
		$data['smkt_liver_prev_year1_apr'] = 0;
		$data['smkt_liver_prev_year1_may'] = 0;
		$data['smkt_liver_prev_year1_jun'] = 0;
		$data['smkt_liver_prev_year1_jul'] = 0;
		$data['smkt_liver_prev_year1_aug'] = 0;
		$data['smkt_liver_prev_year1_sep'] = 0;
		$data['smkt_liver_prev_year1_oct'] = 0;
		$data['smkt_liver_prev_year1_nov'] = 0;
		$data['smkt_liver_prev_year1_dec'] = 0;
		$data['smkt_liver_prev_year1_avg'] = 0;
		$data['smkt_liver_prev_year1_min'] = 0;
		$data['smkt_liver_prev_year1_max'] = 0;

		foreach($smkt_liver_prev_year1 as $row){
			$data['smkt_liver_prev_year1_jan'] = $row->jan_price;
			$data['smkt_liver_prev_year1_feb'] = $row->feb_price;
			$data['smkt_liver_prev_year1_mar'] = $row->mar_price;
			$data['smkt_liver_prev_year1_apr'] = $row->apr_price;
			$data['smkt_liver_prev_year1_may'] = $row->may_price;
			$data['smkt_liver_prev_year1_jun'] = $row->jun_price;
			$data['smkt_liver_prev_year1_jul'] = $row->jul_price;
			$data['smkt_liver_prev_year1_aug'] = $row->aug_price;
			$data['smkt_liver_prev_year1_sep'] = $row->sep_price;
			$data['smkt_liver_prev_year1_oct'] = $row->oct_price;
			$data['smkt_liver_prev_year1_nov'] = $row->nov_price;
			$data['smkt_liver_prev_year1_dec'] = $row->dec_price;
			$data['smkt_liver_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['smkt_liver_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['smkt_liver_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'SMKT - LIVER / GIZZARD',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['smkt_liver_prev_year1_jan'],
			'dashboard_price_feb' => $data['smkt_liver_prev_year1_feb'],
			'dashboard_price_mar' => $data['smkt_liver_prev_year1_mar'],
			'dashboard_price_apr' => $data['smkt_liver_prev_year1_apr'],
			'dashboard_price_may' => $data['smkt_liver_prev_year1_may'],
			'dashboard_price_june' => $data['smkt_liver_prev_year1_jun'],
			'dashboard_price_july' => $data['smkt_liver_prev_year1_jul'],
			'dashboard_price_aug' => $data['smkt_liver_prev_year1_aug'],
			'dashboard_price_sep' => $data['smkt_liver_prev_year1_sep'],
			'dashboard_price_oct' => $data['smkt_liver_prev_year1_oct'],
			'dashboard_price_nov' => $data['smkt_liver_prev_year1_nov'],
			'dashboard_price_dec' => $data['smkt_liver_prev_year1_dec'],
			'dashboard_price_min' => $data['smkt_liver_prev_year1_min'],
			'dashboard_price_max' => $data['smkt_liver_prev_year1_max'],
			'dashboard_price_avg' => $data['smkt_liver_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'SMKT - LIVER / GIZZARD',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['smkt_liver1'],
			'dashboard_price_feb' => $data['smkt_liver2'],
			'dashboard_price_mar' => $data['smkt_liver3'],
			'dashboard_price_apr' => $data['smkt_liver4'],
			'dashboard_price_may' => $data['smkt_liver5'],
			'dashboard_price_june' => $data['smkt_liver6'],
			'dashboard_price_july' => $data['smkt_liver7'],
			'dashboard_price_aug' => $data['smkt_liver8'],
			'dashboard_price_sep' => $data['smkt_liver9'],
			'dashboard_price_oct' => $data['smkt_liver10'],
			'dashboard_price_nov' => $data['smkt_liver11'],
			'dashboard_price_dec' => $data['smkt_liver12'],
			'dashboard_price_min' => $data['smkt_liver_max'],
			'dashboard_price_max' => $data['smkt_liver_min'],
			'dashboard_price_avg' => $data['smkt_liver_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);*/

		
		/*SUPERMARKET Marinated Raw*/

		/*$join_smkt_raw = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CHICKEN (RAW)\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'SUPERMARKET\''
		);

		$get_smkt_raw = $this->admin->get_join('sales_tbl a', $join_smkt_raw, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['smkt_raw1'] = 0;
		$data['smkt_raw2'] = 0;
		$data['smkt_raw3'] = 0;
		$data['smkt_raw4'] = 0;
		$data['smkt_raw5'] = 0;
		$data['smkt_raw6'] = 0;
		$data['smkt_raw7'] = 0;
		$data['smkt_raw8'] = 0;
		$data['smkt_raw9'] = 0;
		$data['smkt_raw10'] = 0;
		$data['smkt_raw11'] = 0;
		$data['smkt_raw12'] = 0;
		$data['smkt_raw_total'] = 0;
		$data['smkt_raw_count'] = 0;
		$data['smkt_raw_avg'] = 0;
		$data['smkt_raw_min'] = 0;
		$data['smkt_raw_max'] = 0;

		foreach($get_smkt_raw as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['smkt_raw' . $month] = $asp;
			$data['smkt_raw_total'] += $asp;

			if($asp < $data['smkt_raw_min'] || $data['smkt_raw_count'] == 0){
				$data['smkt_raw_min'] = $asp;
			}

			if($asp > $data['smkt_raw_max'] || $data['smkt_raw_count'] == 0){
				$data['smkt_raw_max'] = $asp;
			}

			$data['smkt_raw_count']++;
		}

		$data['smkt_raw_avg'] = $data['smkt_raw_total'] != 0 ? $data['smkt_raw_total'] / $data['smkt_raw_count'] : 0;


		$smkt_raw_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - MARINATED CHICKEN RAW', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_raw_prev_year2_jan'] = 0;
		$data['smkt_raw_prev_year2_feb'] = 0;
		$data['smkt_raw_prev_year2_mar'] = 0;
		$data['smkt_raw_prev_year2_apr'] = 0;
		$data['smkt_raw_prev_year2_may'] = 0;
		$data['smkt_raw_prev_year2_jun'] = 0;
		$data['smkt_raw_prev_year2_jul'] = 0;
		$data['smkt_raw_prev_year2_aug'] = 0;
		$data['smkt_raw_prev_year2_sep'] = 0;
		$data['smkt_raw_prev_year2_oct'] = 0;
		$data['smkt_raw_prev_year2_nov'] = 0;
		$data['smkt_raw_prev_year2_dec'] = 0;
		$data['smkt_raw_prev_year2_avg'] = 0;
		$data['smkt_raw_prev_year2_min'] = 0;
		$data['smkt_raw_prev_year2_max'] = 0;

		foreach($smkt_raw_prev_year2 as $row){
			$data['smkt_raw_prev_year2_jan'] = $row->jan_price;
			$data['smkt_raw_prev_year2_feb'] = $row->feb_price;
			$data['smkt_raw_prev_year2_mar'] = $row->mar_price;
			$data['smkt_raw_prev_year2_apr'] = $row->apr_price;
			$data['smkt_raw_prev_year2_may'] = $row->may_price;
			$data['smkt_raw_prev_year2_jun'] = $row->jun_price;
			$data['smkt_raw_prev_year2_jul'] = $row->jul_price;
			$data['smkt_raw_prev_year2_aug'] = $row->aug_price;
			$data['smkt_raw_prev_year2_sep'] = $row->sep_price;
			$data['smkt_raw_prev_year2_oct'] = $row->oct_price;
			$data['smkt_raw_prev_year2_nov'] = $row->nov_price;
			$data['smkt_raw_prev_year2_dec'] = $row->dec_price;
			$data['smkt_raw_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['smkt_raw_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['smkt_raw_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'SMKT - MARINATED CHICKEN RAW',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['smkt_raw_prev_year2_jan'],
			'dashboard_price_feb' => $data['smkt_raw_prev_year2_feb'],
			'dashboard_price_mar' => $data['smkt_raw_prev_year2_mar'],
			'dashboard_price_apr' => $data['smkt_raw_prev_year2_apr'],
			'dashboard_price_may' => $data['smkt_raw_prev_year2_may'],
			'dashboard_price_june' => $data['smkt_raw_prev_year2_jun'],
			'dashboard_price_july' => $data['smkt_raw_prev_year2_jul'],
			'dashboard_price_aug' => $data['smkt_raw_prev_year2_aug'],
			'dashboard_price_sep' => $data['smkt_raw_prev_year2_sep'],
			'dashboard_price_oct' => $data['smkt_raw_prev_year2_oct'],
			'dashboard_price_nov' => $data['smkt_raw_prev_year2_nov'],
			'dashboard_price_dec' => $data['smkt_raw_prev_year2_dec'],
			'dashboard_price_min' => $data['smkt_raw_prev_year2_min'],
			'dashboard_price_max' => $data['smkt_raw_prev_year2_max'],
			'dashboard_price_avg' => $data['smkt_raw_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$smkt_raw_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - MARINATED CHICKEN RAW', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_raw_prev_year1_jan'] = 0;
		$data['smkt_raw_prev_year1_feb'] = 0;
		$data['smkt_raw_prev_year1_mar'] = 0;
		$data['smkt_raw_prev_year1_apr'] = 0;
		$data['smkt_raw_prev_year1_may'] = 0;
		$data['smkt_raw_prev_year1_jun'] = 0;
		$data['smkt_raw_prev_year1_jul'] = 0;
		$data['smkt_raw_prev_year1_aug'] = 0;
		$data['smkt_raw_prev_year1_sep'] = 0;
		$data['smkt_raw_prev_year1_oct'] = 0;
		$data['smkt_raw_prev_year1_nov'] = 0;
		$data['smkt_raw_prev_year1_dec'] = 0;
		$data['smkt_raw_prev_year1_avg'] = 0;
		$data['smkt_raw_prev_year1_min'] = 0;
		$data['smkt_raw_prev_year1_max'] = 0;

		foreach($smkt_raw_prev_year1 as $row){
			$data['smkt_raw_prev_year1_jan'] = $row->jan_price;
			$data['smkt_raw_prev_year1_feb'] = $row->feb_price;
			$data['smkt_raw_prev_year1_mar'] = $row->mar_price;
			$data['smkt_raw_prev_year1_apr'] = $row->apr_price;
			$data['smkt_raw_prev_year1_may'] = $row->may_price;
			$data['smkt_raw_prev_year1_jun'] = $row->jun_price;
			$data['smkt_raw_prev_year1_jul'] = $row->jul_price;
			$data['smkt_raw_prev_year1_aug'] = $row->aug_price;
			$data['smkt_raw_prev_year1_sep'] = $row->sep_price;
			$data['smkt_raw_prev_year1_oct'] = $row->oct_price;
			$data['smkt_raw_prev_year1_nov'] = $row->nov_price;
			$data['smkt_raw_prev_year1_dec'] = $row->dec_price;
			$data['smkt_raw_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['smkt_raw_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['smkt_raw_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'SMKT - MARINATED CHICKEN RAW',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['smkt_raw_prev_year1_jan'],
			'dashboard_price_feb' => $data['smkt_raw_prev_year1_feb'],
			'dashboard_price_mar' => $data['smkt_raw_prev_year1_mar'],
			'dashboard_price_apr' => $data['smkt_raw_prev_year1_apr'],
			'dashboard_price_may' => $data['smkt_raw_prev_year1_may'],
			'dashboard_price_june' => $data['smkt_raw_prev_year1_jun'],
			'dashboard_price_july' => $data['smkt_raw_prev_year1_jul'],
			'dashboard_price_aug' => $data['smkt_raw_prev_year1_aug'],
			'dashboard_price_sep' => $data['smkt_raw_prev_year1_sep'],
			'dashboard_price_oct' => $data['smkt_raw_prev_year1_oct'],
			'dashboard_price_nov' => $data['smkt_raw_prev_year1_nov'],
			'dashboard_price_dec' => $data['smkt_raw_prev_year1_dec'],
			'dashboard_price_min' => $data['smkt_raw_prev_year1_min'],
			'dashboard_price_max' => $data['smkt_raw_prev_year1_max'],
			'dashboard_price_avg' => $data['smkt_raw_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'SMKT - MARINATED CHICKEN RAW',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['smkt_raw1'],
			'dashboard_price_feb' => $data['smkt_raw2'],
			'dashboard_price_mar' => $data['smkt_raw3'],
			'dashboard_price_apr' => $data['smkt_raw4'],
			'dashboard_price_may' => $data['smkt_raw5'],
			'dashboard_price_june' => $data['smkt_raw6'],
			'dashboard_price_july' => $data['smkt_raw7'],
			'dashboard_price_aug' => $data['smkt_raw8'],
			'dashboard_price_sep' => $data['smkt_raw9'],
			'dashboard_price_oct' => $data['smkt_raw10'],
			'dashboard_price_nov' => $data['smkt_raw11'],
			'dashboard_price_dec' => $data['smkt_raw12'],
			'dashboard_price_min' => $data['smkt_raw_min'],
			'dashboard_price_max' => $data['smkt_raw_max'],
			'dashboard_price_avg' => $data['smkt_raw_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);*/


		/*SUPERMARKET Marinated Cut ups*/

		/*$join_smkt_marinated = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'SUPERMARKET\''
		);

		$get_smkt_marinated = $this->admin->get_join('sales_tbl a', $join_smkt_marinated, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['smkt_marinated1'] = 0;
		$data['smkt_marinated2'] = 0;
		$data['smkt_marinated3'] = 0;
		$data['smkt_marinated4'] = 0;
		$data['smkt_marinated5'] = 0;
		$data['smkt_marinated6'] = 0;
		$data['smkt_marinated7'] = 0;
		$data['smkt_marinated8'] = 0;
		$data['smkt_marinated9'] = 0;
		$data['smkt_marinated10'] = 0;
		$data['smkt_marinated11'] = 0;
		$data['smkt_marinated12'] = 0;
		$data['smkt_marinated_total'] = 0;
		$data['smkt_marinated_count'] = 0;
		$data['smkt_marinated_avg'] = 0;
		$data['smkt_marinated_min'] = 0;
		$data['smkt_marinated_max'] = 0;

		foreach($get_smkt_marinated as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['smkt_marinated' . $month] = $asp;
			$data['smkt_marinated_total'] += $asp;

			if($asp < $data['smkt_marinated_min'] || $data['smkt_marinated_count'] == 0){
				$data['smkt_marinated_min'] = $asp;
			}

			if($asp > $data['smkt_marinated_max'] || $data['smkt_marinated_count'] == 0){
				$data['smkt_marinated_max'] = $asp;
			}

			$data['smkt_marinated_count']++;
		}

		$data['smkt_marinated_avg'] = $data['smkt_marinated_total'] != 0 ? $data['smkt_marinated_total'] / $data['smkt_marinated_count'] : 0;

		$smkt_marinated_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - MAR CUT UPS', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_marinated_prev_year2_jan'] = 0;
		$data['smkt_marinated_prev_year2_feb'] = 0;
		$data['smkt_marinated_prev_year2_mar'] = 0;
		$data['smkt_marinated_prev_year2_apr'] = 0;
		$data['smkt_marinated_prev_year2_may'] = 0;
		$data['smkt_marinated_prev_year2_jun'] = 0;
		$data['smkt_marinated_prev_year2_jul'] = 0;
		$data['smkt_marinated_prev_year2_aug'] = 0;
		$data['smkt_marinated_prev_year2_sep'] = 0;
		$data['smkt_marinated_prev_year2_oct'] = 0;
		$data['smkt_marinated_prev_year2_nov'] = 0;
		$data['smkt_marinated_prev_year2_dec'] = 0;
		$data['smkt_marinated_prev_year2_avg'] = 0;
		$data['smkt_marinated_prev_year2_min'] = 0;
		$data['smkt_marinated_prev_year2_max'] = 0;

		foreach($smkt_marinated_prev_year2 as $row){
			$data['smkt_marinated_prev_year2_jan'] = $row->jan_price;
			$data['smkt_marinated_prev_year2_feb'] = $row->feb_price;
			$data['smkt_marinated_prev_year2_mar'] = $row->mar_price;
			$data['smkt_marinated_prev_year2_apr'] = $row->apr_price;
			$data['smkt_marinated_prev_year2_may'] = $row->may_price;
			$data['smkt_marinated_prev_year2_jun'] = $row->jun_price;
			$data['smkt_marinated_prev_year2_jul'] = $row->jul_price;
			$data['smkt_marinated_prev_year2_aug'] = $row->aug_price;
			$data['smkt_marinated_prev_year2_sep'] = $row->sep_price;
			$data['smkt_marinated_prev_year2_oct'] = $row->oct_price;
			$data['smkt_marinated_prev_year2_nov'] = $row->nov_price;
			$data['smkt_marinated_prev_year2_dec'] = $row->dec_price;
			$data['smkt_marinated_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['smkt_marinated_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['smkt_marinated_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'SMKT - MAR CUT UPS',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['smkt_marinated_prev_year2_jan'],
			'dashboard_price_feb' => $data['smkt_marinated_prev_year2_feb'],
			'dashboard_price_mar' => $data['smkt_marinated_prev_year2_mar'],
			'dashboard_price_apr' => $data['smkt_marinated_prev_year2_apr'],
			'dashboard_price_may' => $data['smkt_marinated_prev_year2_may'],
			'dashboard_price_june' => $data['smkt_marinated_prev_year2_jun'],
			'dashboard_price_july' => $data['smkt_marinated_prev_year2_jul'],
			'dashboard_price_aug' => $data['smkt_marinated_prev_year2_aug'],
			'dashboard_price_sep' => $data['smkt_marinated_prev_year2_sep'],
			'dashboard_price_oct' => $data['smkt_marinated_prev_year2_oct'],
			'dashboard_price_nov' => $data['smkt_marinated_prev_year2_nov'],
			'dashboard_price_dec' => $data['smkt_marinated_prev_year2_dec'],
			'dashboard_price_min' => $data['smkt_marinated_prev_year2_min'],
			'dashboard_price_max' => $data['smkt_marinated_prev_year2_max'],
			'dashboard_price_avg' => $data['smkt_marinated_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$smkt_marinated_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SMKT - MAR CUT UPS', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['smkt_marinated_prev_year1_jan'] = 0;
		$data['smkt_marinated_prev_year1_feb'] = 0;
		$data['smkt_marinated_prev_year1_mar'] = 0;
		$data['smkt_marinated_prev_year1_apr'] = 0;
		$data['smkt_marinated_prev_year1_may'] = 0;
		$data['smkt_marinated_prev_year1_jun'] = 0;
		$data['smkt_marinated_prev_year1_jul'] = 0;
		$data['smkt_marinated_prev_year1_aug'] = 0;
		$data['smkt_marinated_prev_year1_sep'] = 0;
		$data['smkt_marinated_prev_year1_oct'] = 0;
		$data['smkt_marinated_prev_year1_nov'] = 0;
		$data['smkt_marinated_prev_year1_dec'] = 0;
		$data['smkt_marinated_prev_year1_avg'] = 0;
		$data['smkt_marinated_prev_year1_min'] = 0;
		$data['smkt_marinated_prev_year1_max'] = 0;

		foreach($smkt_marinated_prev_year1 as $row){
			$data['smkt_marinated_prev_year1_jan'] = $row->jan_price;
			$data['smkt_marinated_prev_year1_feb'] = $row->feb_price;
			$data['smkt_marinated_prev_year1_mar'] = $row->mar_price;
			$data['smkt_marinated_prev_year1_apr'] = $row->apr_price;
			$data['smkt_marinated_prev_year1_may'] = $row->may_price;
			$data['smkt_marinated_prev_year1_jun'] = $row->jun_price;
			$data['smkt_marinated_prev_year1_jul'] = $row->jul_price;
			$data['smkt_marinated_prev_year1_aug'] = $row->aug_price;
			$data['smkt_marinated_prev_year1_sep'] = $row->sep_price;
			$data['smkt_marinated_prev_year1_oct'] = $row->oct_price;
			$data['smkt_marinated_prev_year1_nov'] = $row->nov_price;
			$data['smkt_marinated_prev_year1_dec'] = $row->dec_price;
			$data['smkt_marinated_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['smkt_marinated_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['smkt_marinated_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'SMKT - MAR CUT UPS',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['smkt_marinated_prev_year1_jan'],
			'dashboard_price_feb' => $data['smkt_marinated_prev_year1_feb'],
			'dashboard_price_mar' => $data['smkt_marinated_prev_year1_mar'],
			'dashboard_price_apr' => $data['smkt_marinated_prev_year1_apr'],
			'dashboard_price_may' => $data['smkt_marinated_prev_year1_may'],
			'dashboard_price_june' => $data['smkt_marinated_prev_year1_jun'],
			'dashboard_price_july' => $data['smkt_marinated_prev_year1_jul'],
			'dashboard_price_aug' => $data['smkt_marinated_prev_year1_aug'],
			'dashboard_price_sep' => $data['smkt_marinated_prev_year1_sep'],
			'dashboard_price_oct' => $data['smkt_marinated_prev_year1_oct'],
			'dashboard_price_nov' => $data['smkt_marinated_prev_year1_nov'],
			'dashboard_price_dec' => $data['smkt_marinated_prev_year1_dec'],
			'dashboard_price_min' => $data['smkt_marinated_prev_year1_min'],
			'dashboard_price_max' => $data['smkt_marinated_prev_year1_max'],
			'dashboard_price_avg' => $data['smkt_marinated_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'SMKT - MAR CUT UPS',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['smkt_marinated1'],
			'dashboard_price_feb' => $data['smkt_marinated2'],
			'dashboard_price_mar' => $data['smkt_marinated3'],
			'dashboard_price_apr' => $data['smkt_marinated4'],
			'dashboard_price_may' => $data['smkt_marinated5'],
			'dashboard_price_june' => $data['smkt_marinated6'],
			'dashboard_price_july' => $data['smkt_marinated7'],
			'dashboard_price_aug' => $data['smkt_marinated8'],
			'dashboard_price_sep' => $data['smkt_marinated9'],
			'dashboard_price_oct' => $data['smkt_marinated10'],
			'dashboard_price_nov' => $data['smkt_marinated11'],
			'dashboard_price_dec' => $data['smkt_marinated12'],
			'dashboard_price_min' => $data['smkt_marinated_min'],
			'dashboard_price_max' => $data['smkt_marinated_max'],
			'dashboard_price_avg' => $data['smkt_marinated_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);*/


		/*TRADE DISTRIBUTOR Liver / Gizzard*/

		/*$join_tds_liver = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVER / GIZZARD\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'TRADE DISTRIBUTOR\''
		);

		$get_tds_liver = $this->admin->get_join('sales_tbl a', $join_tds_liver, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['tds_liver1'] = 0;
		$data['tds_liver2'] = 0;
		$data['tds_liver3'] = 0;
		$data['tds_liver4'] = 0;
		$data['tds_liver5'] = 0;
		$data['tds_liver6'] = 0;
		$data['tds_liver7'] = 0;
		$data['tds_liver8'] = 0;
		$data['tds_liver9'] = 0;
		$data['tds_liver10'] = 0;
		$data['tds_liver11'] = 0;
		$data['tds_liver12'] = 0;
		$data['tds_liver_total'] = 0;
		$data['tds_liver_count'] = 0;
		$data['tds_liver_avg'] = 0;
		$data['tds_liver_min'] = 0;
		$data['tds_liver_max'] = 0;

		foreach($get_tds_liver as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['tds_liver' . $month] = $asp;
			$data['tds_liver_total'] += $asp;

			if($asp < $data['tds_liver_min'] || $data['tds_liver_count'] == 0){
				$data['tds_liver_min'] = $asp;
			}

			if($asp > $data['tds_liver_max'] || $data['tds_liver_count'] == 0){
				$data['tds_liver_max'] = $asp;
			}

			$data['tds_liver_count']++;
		}

		$data['tds_liver_avg'] = $data['tds_liver_total'] != 0 ? $data['tds_liver_total'] / $data['tds_liver_count'] : 0;


		$tds_liver_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs - LIVER / GIZZARD', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_liver_prev_year2_jan'] = 0;
		$data['tds_liver_prev_year2_feb'] = 0;
		$data['tds_liver_prev_year2_mar'] = 0;
		$data['tds_liver_prev_year2_apr'] = 0;
		$data['tds_liver_prev_year2_may'] = 0;
		$data['tds_liver_prev_year2_jun'] = 0;
		$data['tds_liver_prev_year2_jul'] = 0;
		$data['tds_liver_prev_year2_aug'] = 0;
		$data['tds_liver_prev_year2_sep'] = 0;
		$data['tds_liver_prev_year2_oct'] = 0;
		$data['tds_liver_prev_year2_nov'] = 0;
		$data['tds_liver_prev_year2_dec'] = 0;
		$data['tds_liver_prev_year2_avg'] = 0;
		$data['tds_liver_prev_year2_min'] = 0;
		$data['tds_liver_prev_year2_max'] = 0;

		foreach($tds_liver_prev_year2 as $row){
			$data['tds_liver_prev_year2_jan'] = $row->jan_price;
			$data['tds_liver_prev_year2_feb'] = $row->feb_price;
			$data['tds_liver_prev_year2_mar'] = $row->mar_price;
			$data['tds_liver_prev_year2_apr'] = $row->apr_price;
			$data['tds_liver_prev_year2_may'] = $row->may_price;
			$data['tds_liver_prev_year2_jun'] = $row->jun_price;
			$data['tds_liver_prev_year2_jul'] = $row->jul_price;
			$data['tds_liver_prev_year2_aug'] = $row->aug_price;
			$data['tds_liver_prev_year2_sep'] = $row->sep_price;
			$data['tds_liver_prev_year2_oct'] = $row->oct_price;
			$data['tds_liver_prev_year2_nov'] = $row->nov_price;
			$data['tds_liver_prev_year2_dec'] = $row->dec_price;
			$data['tds_liver_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['tds_liver_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['tds_liver_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'TDs - LIVER / GIZZARD',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['tds_liver_prev_year2_jan'],
			'dashboard_price_feb' => $data['tds_liver_prev_year2_feb'],
			'dashboard_price_mar' => $data['tds_liver_prev_year2_mar'],
			'dashboard_price_apr' => $data['tds_liver_prev_year2_apr'],
			'dashboard_price_may' => $data['tds_liver_prev_year2_may'],
			'dashboard_price_june' => $data['tds_liver_prev_year2_jun'],
			'dashboard_price_july' => $data['tds_liver_prev_year2_jul'],
			'dashboard_price_aug' => $data['tds_liver_prev_year2_aug'],
			'dashboard_price_sep' => $data['tds_liver_prev_year2_sep'],
			'dashboard_price_oct' => $data['tds_liver_prev_year2_oct'],
			'dashboard_price_nov' => $data['tds_liver_prev_year2_nov'],
			'dashboard_price_dec' => $data['tds_liver_prev_year2_dec'],
			'dashboard_price_min' => $data['tds_liver_prev_year2_min'],
			'dashboard_price_max' => $data['tds_liver_prev_year2_max'],
			'dashboard_price_avg' => $data['tds_liver_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$tds_liver_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs - LIVER / GIZZARD', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_liver_prev_year1_jan'] = 0;
		$data['tds_liver_prev_year1_feb'] = 0;
		$data['tds_liver_prev_year1_mar'] = 0;
		$data['tds_liver_prev_year1_apr'] = 0;
		$data['tds_liver_prev_year1_may'] = 0;
		$data['tds_liver_prev_year1_jun'] = 0;
		$data['tds_liver_prev_year1_jul'] = 0;
		$data['tds_liver_prev_year1_aug'] = 0;
		$data['tds_liver_prev_year1_sep'] = 0;
		$data['tds_liver_prev_year1_oct'] = 0;
		$data['tds_liver_prev_year1_nov'] = 0;
		$data['tds_liver_prev_year1_dec'] = 0;
		$data['tds_liver_prev_year1_avg'] = 0;
		$data['tds_liver_prev_year1_min'] = 0;
		$data['tds_liver_prev_year1_max'] = 0;

		foreach($tds_liver_prev_year1 as $row){
			$data['tds_liver_prev_year1_jan'] = $row->jan_price;
			$data['tds_liver_prev_year1_feb'] = $row->feb_price;
			$data['tds_liver_prev_year1_mar'] = $row->mar_price;
			$data['tds_liver_prev_year1_apr'] = $row->apr_price;
			$data['tds_liver_prev_year1_may'] = $row->may_price;
			$data['tds_liver_prev_year1_jun'] = $row->jun_price;
			$data['tds_liver_prev_year1_jul'] = $row->jul_price;
			$data['tds_liver_prev_year1_aug'] = $row->aug_price;
			$data['tds_liver_prev_year1_sep'] = $row->sep_price;
			$data['tds_liver_prev_year1_oct'] = $row->oct_price;
			$data['tds_liver_prev_year1_nov'] = $row->nov_price;
			$data['tds_liver_prev_year1_dec'] = $row->dec_price;
			$data['tds_liver_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['tds_liver_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['tds_liver_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'TDs - LIVER / GIZZARD',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['tds_liver_prev_year1_jan'],
			'dashboard_price_feb' => $data['tds_liver_prev_year1_feb'],
			'dashboard_price_mar' => $data['tds_liver_prev_year1_mar'],
			'dashboard_price_apr' => $data['tds_liver_prev_year1_apr'],
			'dashboard_price_may' => $data['tds_liver_prev_year1_may'],
			'dashboard_price_june' => $data['tds_liver_prev_year1_jun'],
			'dashboard_price_july' => $data['tds_liver_prev_year1_jul'],
			'dashboard_price_aug' => $data['tds_liver_prev_year1_aug'],
			'dashboard_price_sep' => $data['tds_liver_prev_year1_sep'],
			'dashboard_price_oct' => $data['tds_liver_prev_year1_oct'],
			'dashboard_price_nov' => $data['tds_liver_prev_year1_nov'],
			'dashboard_price_dec' => $data['tds_liver_prev_year1_dec'],
			'dashboard_price_min' => $data['tds_liver_prev_year1_min'],
			'dashboard_price_max' => $data['tds_liver_prev_year1_max'],
			'dashboard_price_avg' => $data['tds_liver_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'TDs - LIVER / GIZZARD',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['tds_liver1'],
			'dashboard_price_feb' => $data['tds_liver2'],
			'dashboard_price_mar' => $data['tds_liver3'],
			'dashboard_price_apr' => $data['tds_liver4'],
			'dashboard_price_may' => $data['tds_liver5'],
			'dashboard_price_june' => $data['tds_liver6'],
			'dashboard_price_july' => $data['tds_liver7'],
			'dashboard_price_aug' => $data['tds_liver8'],
			'dashboard_price_sep' => $data['tds_liver9'],
			'dashboard_price_oct' => $data['tds_liver10'],
			'dashboard_price_nov' => $data['tds_liver11'],
			'dashboard_price_dec' => $data['tds_liver12'],
			'dashboard_price_min' => $data['tds_liver_min'],
			'dashboard_price_max' => $data['tds_liver_max'],
			'dashboard_price_avg' => $data['tds_liver_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);*/


	
		/*TRADE DISTRIBUTOR Marinated Raw*/
		
		/*$join_tds_raw = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CHICKEN (RAW)\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'TRADE DISTRIBUTOR\''
		);

		$get_tds_raw = $this->admin->get_join('sales_tbl a', $join_tds_raw, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['tds_raw1'] = 0;
		$data['tds_raw2'] = 0;
		$data['tds_raw3'] = 0;
		$data['tds_raw4'] = 0;
		$data['tds_raw5'] = 0;
		$data['tds_raw6'] = 0;
		$data['tds_raw7'] = 0;
		$data['tds_raw8'] = 0;
		$data['tds_raw9'] = 0;
		$data['tds_raw10'] = 0;
		$data['tds_raw11'] = 0;
		$data['tds_raw12'] = 0;
		$data['tds_raw_total'] = 0;
		$data['tds_raw_count'] = 0;
		$data['tds_raw_avg'] = 0;
		$data['tds_raw_min'] = 0;
		$data['tds_raw_max'] = 0;

		foreach($get_tds_raw as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['tds_raw' . $month] = $asp;
			$data['tds_raw_total'] += $asp;

			if($asp < $data['tds_raw_min'] || $data['tds_raw_count'] == 0){
				$data['tds_raw_min'] = $asp;
			}

			if($asp > $data['tds_raw_max'] || $data['tds_raw_count'] == 0){
				$data['tds_raw_max'] = $asp;
			}

			$data['tds_raw_count']++;
		}

		$data['tds_raw_avg'] = $data['tds_raw_total'] != 0 ? $data['tds_raw_total'] / $data['tds_raw_count'] : 0;

		$tds_raw_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs - MARINATED CHICKEN RAW', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_raw_prev_year2_jan'] = 0;
		$data['tds_raw_prev_year2_feb'] = 0;
		$data['tds_raw_prev_year2_mar'] = 0;
		$data['tds_raw_prev_year2_apr'] = 0;
		$data['tds_raw_prev_year2_may'] = 0;
		$data['tds_raw_prev_year2_jun'] = 0;
		$data['tds_raw_prev_year2_jul'] = 0;
		$data['tds_raw_prev_year2_aug'] = 0;
		$data['tds_raw_prev_year2_sep'] = 0;
		$data['tds_raw_prev_year2_oct'] = 0;
		$data['tds_raw_prev_year2_nov'] = 0;
		$data['tds_raw_prev_year2_dec'] = 0;
		$data['tds_raw_prev_year2_avg'] = 0;
		$data['tds_raw_prev_year2_min'] = 0;
		$data['tds_raw_prev_year2_max'] = 0;

		foreach($tds_raw_prev_year2 as $row){
			$data['tds_raw_prev_year2_jan'] = $row->jan_price;
			$data['tds_raw_prev_year2_feb'] = $row->feb_price;
			$data['tds_raw_prev_year2_mar'] = $row->mar_price;
			$data['tds_raw_prev_year2_apr'] = $row->apr_price;
			$data['tds_raw_prev_year2_may'] = $row->may_price;
			$data['tds_raw_prev_year2_jun'] = $row->jun_price;
			$data['tds_raw_prev_year2_jul'] = $row->jul_price;
			$data['tds_raw_prev_year2_aug'] = $row->aug_price;
			$data['tds_raw_prev_year2_sep'] = $row->sep_price;
			$data['tds_raw_prev_year2_oct'] = $row->oct_price;
			$data['tds_raw_prev_year2_nov'] = $row->nov_price;
			$data['tds_raw_prev_year2_dec'] = $row->dec_price;
			$data['tds_raw_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['tds_raw_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['tds_raw_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'TDs - MARINATED CHICKEN RAW',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['tds_raw_prev_year2_jan'],
			'dashboard_price_feb' => $data['tds_raw_prev_year2_feb'],
			'dashboard_price_mar' => $data['tds_raw_prev_year2_mar'],
			'dashboard_price_apr' => $data['tds_raw_prev_year2_apr'],
			'dashboard_price_may' => $data['tds_raw_prev_year2_may'],
			'dashboard_price_june' => $data['tds_raw_prev_year2_jun'],
			'dashboard_price_july' => $data['tds_raw_prev_year2_jul'],
			'dashboard_price_aug' => $data['tds_raw_prev_year2_aug'],
			'dashboard_price_sep' => $data['tds_raw_prev_year2_sep'],
			'dashboard_price_oct' => $data['tds_raw_prev_year2_oct'],
			'dashboard_price_nov' => $data['tds_raw_prev_year2_nov'],
			'dashboard_price_dec' => $data['tds_raw_prev_year2_dec'],
			'dashboard_price_min' => $data['tds_raw_prev_year2_min'],
			'dashboard_price_max' => $data['tds_raw_prev_year2_max'],
			'dashboard_price_avg' => $data['tds_raw_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$tds_raw_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'TDs - MARINATED CHICKEN RAW', 'comp_price_segment' => 'REYAL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['tds_raw_prev_year1_jan'] = 0;
		$data['tds_raw_prev_year1_feb'] = 0;
		$data['tds_raw_prev_year1_mar'] = 0;
		$data['tds_raw_prev_year1_apr'] = 0;
		$data['tds_raw_prev_year1_may'] = 0;
		$data['tds_raw_prev_year1_jun'] = 0;
		$data['tds_raw_prev_year1_jul'] = 0;
		$data['tds_raw_prev_year1_aug'] = 0;
		$data['tds_raw_prev_year1_sep'] = 0;
		$data['tds_raw_prev_year1_oct'] = 0;
		$data['tds_raw_prev_year1_nov'] = 0;
		$data['tds_raw_prev_year1_dec'] = 0;
		$data['tds_raw_prev_year1_avg'] = 0;
		$data['tds_raw_prev_year1_min'] = 0;
		$data['tds_raw_prev_year1_max'] = 0;

		foreach($tds_raw_prev_year1 as $row){
			$data['tds_raw_prev_year1_jan'] = $row->jan_price;
			$data['tds_raw_prev_year1_feb'] = $row->feb_price;
			$data['tds_raw_prev_year1_mar'] = $row->mar_price;
			$data['tds_raw_prev_year1_apr'] = $row->apr_price;
			$data['tds_raw_prev_year1_may'] = $row->may_price;
			$data['tds_raw_prev_year1_jun'] = $row->jun_price;
			$data['tds_raw_prev_year1_jul'] = $row->jul_price;
			$data['tds_raw_prev_year1_aug'] = $row->aug_price;
			$data['tds_raw_prev_year1_sep'] = $row->sep_price;
			$data['tds_raw_prev_year1_oct'] = $row->oct_price;
			$data['tds_raw_prev_year1_nov'] = $row->nov_price;
			$data['tds_raw_prev_year1_dec'] = $row->dec_price;
			$data['tds_raw_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['tds_raw_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['tds_raw_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'TDs - MARINATED CHICKEN RAW',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['tds_raw_prev_year1_jan'],
			'dashboard_price_feb' => $data['tds_raw_prev_year1_feb'],
			'dashboard_price_mar' => $data['tds_raw_prev_year1_mar'],
			'dashboard_price_apr' => $data['tds_raw_prev_year1_apr'],
			'dashboard_price_may' => $data['tds_raw_prev_year1_may'],
			'dashboard_price_june' => $data['tds_raw_prev_year1_jun'],
			'dashboard_price_july' => $data['tds_raw_prev_year1_jul'],
			'dashboard_price_aug' => $data['tds_raw_prev_year1_aug'],
			'dashboard_price_sep' => $data['tds_raw_prev_year1_sep'],
			'dashboard_price_oct' => $data['tds_raw_prev_year1_oct'],
			'dashboard_price_nov' => $data['tds_raw_prev_year1_nov'],
			'dashboard_price_dec' => $data['tds_raw_prev_year1_dec'],
			'dashboard_price_min' => $data['tds_raw_prev_year1_min'],
			'dashboard_price_max' => $data['tds_raw_prev_year1_max'],
			'dashboard_price_avg' => $data['tds_raw_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'COM',
			'dashboard_price_product' => 'TDs - MARINATED CHICKEN RAW',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['tds_raw1'],
			'dashboard_price_feb' => $data['tds_raw2'],
			'dashboard_price_mar' => $data['tds_raw3'],
			'dashboard_price_apr' => $data['tds_raw4'],
			'dashboard_price_may' => $data['tds_raw5'],
			'dashboard_price_june' => $data['tds_raw6'],
			'dashboard_price_july' => $data['tds_raw7'],
			'dashboard_price_aug' => $data['tds_raw8'],
			'dashboard_price_sep' => $data['tds_raw9'],
			'dashboard_price_oct' => $data['tds_raw10'],
			'dashboard_price_nov' => $data['tds_raw11'],
			'dashboard_price_dec' => $data['tds_raw12'],
			'dashboard_price_min' => $data['tds_raw_min'],
			'dashboard_price_max' => $data['tds_raw_max'],
			'dashboard_price_avg' => $data['tds_raw_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);*/

		/*Resellers*/
		
		$get_rsl_orc = $this->admin->get_query("SELECT p.size_name, AVG(asp_tbl.jan_asp) as orc_jan, AVG(asp_tbl.feb_asp) as orc_feb, AVG(asp_tbl.mar_asp) as orc_mar, AVG(asp_tbl.apr_asp) as orc_apr, AVG(asp_tbl.may_asp) as orc_may, AVG(asp_tbl.jun_asp) as orc_jun, AVG(asp_tbl.jul_asp) as orc_jul, AVG(asp_tbl.aug_asp) as orc_aug, AVG(asp_tbl.sep_asp) as orc_sep, AVG(asp_tbl.oct_asp) as orc_oct, AVG(asp_tbl.nov_asp) as orc_nov, AVG(asp_tbl.dec_asp) as orc_dec FROM material_tbl o, size_tbl p,

			(SELECT m.material_id, m.size_id,

			(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-01-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as jan_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-02-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as feb_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-03-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as mar_asp,
    
   			(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-04-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as apr_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-05-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as may_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-06-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as jun_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-07-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as jul_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-08-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as aug_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-09-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as sep_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-10-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as oct_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-11-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as nov_asp,
    
    		(SELECT AVG(c.sales_det_asp) FROM `sales_tbl` `a` JOIN `sales_item_tbl` `b` ON `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND `a`.`sales_year` = " . $year . " JOIN `sales_details_tbl` `c` ON `b`.`sales_item_id` = `c`.`sales_item_id` AND `c`.`sales_det_status` = 1 JOIN `material_tbl` `d` ON `b`.`material_id` = `d`.`material_id` JOIN `material_group_tbl` `e` ON `d`.`material_group_id` = `e`.`material_group_id` JOIN `outlet_tbl` `f` ON `a`.`outlet_id` = `f`.`outlet_id` JOIN `outlet_brand_tbl` `g` ON `f`.`outlet_id` = `g`.`outlet_id` AND `g`.`outlet_brand_status` = 1 JOIN `brand_tbl` `h` ON `g`.`brand_id` = `h`.`brand_id` AND `h`.`brand_name` = 'RESELLER' AND c.sales_det_date = '" . $year . "-12-01' WHERE d.material_id = m.material_id AND c.sales_det_asp > 0 AND f.bc_id = " . $bc_id . ") as dec_asp
    
			FROM material_size_tbl m, brand_tbl n WHERE m.brand_id = n.brand_id AND m.material_size_status = 1 AND n.brand_name = 'RESELLER' AND m.is_orc = 1) as asp_tbl

			WHERE o.material_id = asp_tbl.material_id AND p.size_id = asp_tbl.size_id GROUP BY p.size_id"
		);

		$data['rsl_reg1'] = $data['rsl_reg2'] = $data['rsl_reg3'] = $data['rsl_reg4'] = $data['rsl_reg5'] = $data['rsl_reg6'] = $data['rsl_reg7'] = $data['rsl_reg8'] = $data['rsl_reg9'] = $data['rsl_reg10'] = $data['rsl_reg11'] = $data['rsl_reg12'] = $data['rsl_reg_total'] = $data['rsl_reg_count'] = $data['rsl_reg_avg'] = $data['rsl_reg_min'] = $data['rsl_reg_max'] = 0;

		$data['rsl_jbo1'] = $data['rsl_jbo2'] = $data['rsl_jbo3'] = $data['rsl_jbo4'] = $data['rsl_jbo5'] = $data['rsl_jbo6'] = $data['rsl_jbo7'] = $data['rsl_jbo8'] = $data['rsl_jbo9'] = $data['rsl_jbo10'] = $data['rsl_jbo11'] = $data['rsl_jbo12'] = $data['rsl_jbo_total'] = $data['rsl_jbo_count'] = $data['rsl_jbo_avg'] = $data['rsl_jbo_min'] = $data['rsl_jbo_max'] = 0;

		$data['rsl_ss1'] = $data['rsl_ss2'] = $data['rsl_ss3'] = $data['rsl_ss4'] = $data['rsl_ss5'] = $data['rsl_ss6'] = $data['rsl_ss7'] = $data['rsl_ss8'] = $data['rsl_ss9'] = $data['rsl_ss10'] = $data['rsl_ss11'] = $data['rsl_ss12'] = $data['rsl_ss_total'] = $data['rsl_ss_count'] = $data['rsl_ss_avg'] = $data['rsl_ss_min'] = $data['rsl_ss_max'] = 0;

		$data['rsl_bt1'] = $data['rsl_bt2'] = $data['rsl_bt3'] = $data['rsl_bt4'] = $data['rsl_bt5'] = $data['rsl_bt6'] = $data['rsl_bt7'] = $data['rsl_bt8'] = $data['rsl_bt9'] = $data['rsl_bt10'] = $data['rsl_bt11'] = $data['rsl_bt12'] = $data['rsl_bt_total'] = $data['rsl_bt_count'] = $data['rsl_bt_avg'] = $data['rsl_bt_min'] = $data['rsl_bt_max'] = 0;

		$data['rsl_half1'] = $data['rsl_half2'] = $data['rsl_half3'] = $data['rsl_half4'] = $data['rsl_half5'] = $data['rsl_half6'] = $data['rsl_half7'] = $data['rsl_half8'] = $data['rsl_half9'] = $data['rsl_half10'] = $data['rsl_half11'] = $data['rsl_half12'] = $data['rsl_half_total'] = $data['rsl_half_count'] = $data['rsl_half_avg'] = $data['rsl_half_min'] = $data['rsl_half_max'] = 0;

		$data['rsl_reg1_year2'] = 0;
		$data['rsl_reg2_year2'] = 0;
		$data['rsl_reg3_year2'] = 0;
		$data['rsl_reg4_year2'] = 0;
		$data['rsl_reg5_year2'] = 0;
		$data['rsl_reg6_year2'] = 0;
		$data['rsl_reg7_year2'] = 0;
		$data['rsl_reg8_year2'] = 0;
		$data['rsl_reg9_year2'] = 0;
		$data['rsl_reg10_year2'] = 0;
		$data['rsl_reg11_year2'] = 0;
		$data['rsl_reg12_year2'] = 0;
		$data['rsl_reg_avg_year2'] = 0;
		$data['rsl_reg_min_year2'] = 0;
		$data['rsl_reg_max_year2'] = 0;

		$data['rsl_reg1_year1'] = 0;
		$data['rsl_reg2_year1'] = 0;
		$data['rsl_reg3_year1'] = 0;
		$data['rsl_reg4_year1'] = 0;
		$data['rsl_reg5_year1'] = 0;
		$data['rsl_reg6_year1'] = 0;
		$data['rsl_reg7_year1'] = 0;
		$data['rsl_reg8_year1'] = 0;
		$data['rsl_reg9_year1'] = 0;
		$data['rsl_reg10_year1'] = 0;
		$data['rsl_reg11_year1'] = 0;
		$data['rsl_reg12_year1'] = 0;
		$data['rsl_reg_avg_year1'] = 0;
		$data['rsl_reg_min_year1'] = 0;
		$data['rsl_reg_max_year1'] = 0;

		$data['rsl_jbo1_year2'] = 0;
		$data['rsl_jbo2_year2'] = 0;
		$data['rsl_jbo3_year2'] = 0;
		$data['rsl_jbo4_year2'] = 0;
		$data['rsl_jbo5_year2'] = 0;
		$data['rsl_jbo6_year2'] = 0;
		$data['rsl_jbo7_year2'] = 0;
		$data['rsl_jbo8_year2'] = 0;
		$data['rsl_jbo9_year2'] = 0;
		$data['rsl_jbo10_year2'] = 0;
		$data['rsl_jbo11_year2'] = 0;
		$data['rsl_jbo12_year2'] = 0;
		$data['rsl_jbo_year2_avg'] = 0;
		$data['rsl_jbo_year2_min'] = 0;
		$data['rsl_jbo_year2_max'] = 0;

		$data['rsl_jbo1_year2'] = 0;
		$data['rsl_jbo2_year2'] = 0;
		$data['rsl_jbo3_year2'] = 0;
		$data['rsl_jbo4_year2'] = 0;
		$data['rsl_jbo5_year2'] = 0;
		$data['rsl_jbo6_year2'] = 0;
		$data['rsl_jbo7_year2'] = 0;
		$data['rsl_jbo8_year2'] = 0;
		$data['rsl_jbo9_year2'] = 0;
		$data['rsl_jbo10_year2'] = 0;
		$data['rsl_jbo11_year2'] = 0;
		$data['rsl_jbo12_year2'] = 0;
		$data['rsl_jbo_year2_avg'] = 0;
		$data['rsl_jbo_year2_min'] = 0;
		$data['rsl_jbo_year2_max'] = 0;


		$data['rsl_jbo1_year1'] = 0;
		$data['rsl_jbo2_year1'] = 0;
		$data['rsl_jbo3_year1'] = 0;
		$data['rsl_jbo4_year1'] = 0;
		$data['rsl_jbo5_year1'] = 0;
		$data['rsl_jbo6_year1'] = 0;
		$data['rsl_jbo7_year1'] = 0;
		$data['rsl_jbo8_year1'] = 0;
		$data['rsl_jbo9_year1'] = 0;
		$data['rsl_jbo10_year1'] = 0;
		$data['rsl_jbo11_year1'] = 0;
		$data['rsl_jbo12_year1'] = 0;
		$data['rsl_jbo_year1_avg'] = 0;
		$data['rsl_jbo_year1_min'] = 0;
		$data['rsl_jbo_year1_max'] = 0;

		$data['rsl_ss1_year2'] = 0;
		$data['rsl_ss2_year2'] = 0;
		$data['rsl_ss3_year2'] = 0;
		$data['rsl_ss4_year2'] = 0;
		$data['rsl_ss5_year2'] = 0;
		$data['rsl_ss6_year2'] = 0;
		$data['rsl_ss7_year2'] = 0;
		$data['rsl_ss8_year2'] = 0;
		$data['rsl_ss9_year2'] = 0;
		$data['rsl_ss10_year2'] = 0;
		$data['rsl_ss11_year2'] = 0;
		$data['rsl_ss12_year2'] = 0;
		$data['rsl_ss_avg_year2'] = 0;
		$data['rsl_ss_min_year2'] = 0;
		$data['rsl_ss_max_year2'] = 0;


		$data['rsl_ss1_year1'] = 0;
		$data['rsl_ss2_year1'] = 0;
		$data['rsl_ss3_year1'] = 0;
		$data['rsl_ss4_year1'] = 0;
		$data['rsl_ss5_year1'] = 0;
		$data['rsl_ss6_year1'] = 0;
		$data['rsl_ss7_year1'] = 0;
		$data['rsl_ss8_year1'] = 0;
		$data['rsl_ss9_year1'] = 0;
		$data['rsl_ss10_year1'] = 0;
		$data['rsl_ss11_year1'] = 0;
		$data['rsl_ss12_year1'] = 0;
		$data['rsl_ss_avg_year1'] = 0;
		$data['rsl_ss_min_year1'] = 0;
		$data['rsl_ss_max_year1'] = 0;

		$data['rsl_bt1_year2'] = 0;
		$data['rsl_bt2_year2'] = 0;
		$data['rsl_bt3_year2'] = 0;
		$data['rsl_bt4_year2'] = 0;
		$data['rsl_bt5_year2'] = 0;
		$data['rsl_bt6_year2'] = 0;
		$data['rsl_bt7_year2'] = 0;
		$data['rsl_bt8_year2'] = 0;
		$data['rsl_bt9_year2'] = 0;
		$data['rsl_bt10_year2'] = 0;
		$data['rsl_bt11_year2'] = 0;
		$data['rsl_bt12_year2'] = 0;
		$data['rsl_bt_avg_year2'] = 0;
		$data['rsl_bt_min_year2'] = 0;
		$data['rsl_bt_max_year2'] = 0;

		$data['rsl_bt1_year1'] = 0;
		$data['rsl_bt2_year1'] = 0;
		$data['rsl_bt3_year1'] = 0;
		$data['rsl_bt4_year1'] = 0;
		$data['rsl_bt5_year1'] = 0;
		$data['rsl_bt6_year1'] = 0;
		$data['rsl_bt7_year1'] = 0;
		$data['rsl_bt8_year1'] = 0;
		$data['rsl_bt9_year1'] = 0;
		$data['rsl_bt10_year1'] = 0;
		$data['rsl_bt11_year1'] = 0;
		$data['rsl_bt12_year1'] = 0;
		$data['rsl_bt_avg_year1'] = 0;
		$data['rsl_bt_min_year1'] = 0;
		$data['rsl_bt_max_year1'] = 0;

		$data['rsl_half1_year2'] = 0;
		$data['rsl_half2_year2'] = 0;
		$data['rsl_half3_year2'] = 0;
		$data['rsl_half4_year2'] = 0;
		$data['rsl_half5_year2'] = 0;
		$data['rsl_half6_year2'] = 0;
		$data['rsl_half7_year2'] = 0;
		$data['rsl_half8_year2'] = 0;
		$data['rsl_half9_year2'] = 0;
		$data['rsl_half10_year2'] = 0;
		$data['rsl_half11_year2'] = 0;
		$data['rsl_half12_year2'] = 0;
		$data['rsl_half_avg_year2'] = 0;
		$data['rsl_half_min_year2'] = 0;
		$data['rsl_half_max_year2'] = 0;

		$data['rsl_half1_year1'] = 0;
		$data['rsl_half2_year1'] = 0;
		$data['rsl_half3_year1'] = 0;
		$data['rsl_half4_year1'] = 0;
		$data['rsl_half5_year1'] = 0;
		$data['rsl_half6_year1'] = 0;
		$data['rsl_half7_year1'] = 0;
		$data['rsl_half8_year1'] = 0;
		$data['rsl_half9_year1'] = 0;
		$data['rsl_half10_year1'] = 0;
		$data['rsl_half11_year1'] = 0;
		$data['rsl_half12_year1'] = 0;
		$data['rsl_half_avg_year1'] = 0;
		$data['rsl_half_min_year1'] = 0;
		$data['rsl_half_max_year1'] = 0;

		foreach($get_rsl_orc as $row){
			$orc_size = $row->size_name;
			$orc_jan = $row->orc_jan;
			$orc_feb = $row->orc_feb;
			$orc_mar = $row->orc_mar;
			$orc_apr = $row->orc_apr;
			$orc_may = $row->orc_may;
			$orc_jun = $row->orc_jun;
			$orc_jul = $row->orc_jul;
			$orc_aug = $row->orc_aug;
			$orc_sep = $row->orc_sep;
			$orc_oct = $row->orc_oct;
			$orc_nov = $row->orc_nov;
			$orc_dec = $row->orc_dec;
			$orc_min = min($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_max = max($orc_jan, $orc_feb, $orc_mar, $orc_apr, $orc_may, $orc_jun, $orc_jul, $orc_aug, $orc_sep, $orc_oct, $orc_nov, $orc_dec);
			$orc_avg = ($orc_jan + $orc_feb + $orc_mar + $orc_apr + $orc_may + $orc_jun + $orc_jul + $orc_aug + $orc_sep + $orc_oct + $orc_nov + $orc_dec) / 12;

			if($orc_size == "REGULAR"){
				$data['rsl_reg1'] = $orc_jan;
				$data['rsl_reg2'] = $orc_feb;
				$data['rsl_reg3'] = $orc_mar;
				$data['rsl_reg4'] = $orc_apr;
				$data['rsl_reg5'] = $orc_may;
				$data['rsl_reg6'] = $orc_jun;
				$data['rsl_reg7'] = $orc_jul;
				$data['rsl_reg8'] = $orc_aug;
				$data['rsl_reg9'] = $orc_sep;
				$data['rsl_reg10'] = $orc_oct;
				$data['rsl_reg11'] = $orc_nov;
				$data['rsl_reg12'] = $orc_dec;
				$data['rsl_reg_avg'] = $orc_avg;
				$data['rsl_reg_min'] = $orc_min;
				$data['rsl_reg_max'] = $orc_max;

				$reg_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - REGULAR', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($reg_prev_year2 as $row){
					$data['rsl_reg1_year2'] = $row->jan_price;
					$data['rsl_reg2_year2'] = $row->feb_price;
					$data['rsl_reg3_year2'] = $row->mar_price;
					$data['rsl_reg4_year2'] = $row->apr_price;
					$data['rsl_reg5_year2'] = $row->may_price;
					$data['rsl_reg6_year2'] = $row->jun_price;
					$data['rsl_reg7_year2'] = $row->jul_price;
					$data['rsl_reg8_year2'] = $row->aug_price;
					$data['rsl_reg9_year2'] = $row->sep_price;
					$data['rsl_reg10_year2'] = $row->oct_price;
					$data['rsl_reg11_year2'] = $row->nov_price;
					$data['rsl_reg12_year2'] = $row->dec_price;
					$data['rsl_reg_avg_year2'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_reg_min_year2'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_reg_max_year2'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

				$reg_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - REGULAR', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($reg_prev_year1 as $row){
					$data['rsl_reg1_year1'] = $row->jan_price;
					$data['rsl_reg2_year1'] = $row->feb_price;
					$data['rsl_reg3_year1'] = $row->mar_price;
					$data['rsl_reg4_year1'] = $row->apr_price;
					$data['rsl_reg5_year1'] = $row->may_price;
					$data['rsl_reg6_year1'] = $row->jun_price;
					$data['rsl_reg7_year1'] = $row->jul_price;
					$data['rsl_reg8_year1'] = $row->aug_price;
					$data['rsl_reg9_year1'] = $row->sep_price;
					$data['rsl_reg10_year1'] = $row->oct_price;
					$data['rsl_reg11_year1'] = $row->nov_price;
					$data['rsl_reg12_year1'] = $row->dec_price;
					$data['rsl_reg_avg_year1'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_reg_min_year1'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_reg_max_year1'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

			}elseif($orc_size == "JUMBO"){
				$data['rsl_jbo1'] = $orc_jan;
				$data['rsl_jbo2'] = $orc_feb;
				$data['rsl_jbo3'] = $orc_mar;
				$data['rsl_jbo4'] = $orc_apr;
				$data['rsl_jbo5'] = $orc_may;
				$data['rsl_jbo6'] = $orc_jun;
				$data['rsl_jbo7'] = $orc_jul;
				$data['rsl_jbo8'] = $orc_aug;
				$data['rsl_jbo9'] = $orc_sep;
				$data['rsl_jbo10'] = $orc_oct;
				$data['rsl_jbo11'] = $orc_nov;
				$data['rsl_jbo12'] = $orc_dec;
				$data['rsl_jbo_avg'] = $orc_avg;
				$data['rsl_jbo_min'] = $orc_min;
				$data['rsl_jbo_max'] = $orc_max;

				$jbo_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - JUMBO', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($jbo_prev_year2 as $row){
					$data['rsl_jbo1_year2'] = $row->jan_price;
					$data['rsl_jbo2_year2'] = $row->feb_price;
					$data['rsl_jbo3_year2'] = $row->mar_price;
					$data['rsl_jbo4_year2'] = $row->apr_price;
					$data['rsl_jbo5_year2'] = $row->may_price;
					$data['rsl_jbo6_year2'] = $row->jun_price;
					$data['rsl_jbo7_year2'] = $row->jul_price;
					$data['rsl_jbo8_year2'] = $row->aug_price;
					$data['rsl_jbo9_year2'] = $row->sep_price;
					$data['rsl_jbo10_year2'] = $row->oct_price;
					$data['rsl_jbo11_year2'] = $row->nov_price;
					$data['rsl_jbo12_year2'] = $row->dec_price;
					$data['rsl_jbo_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_jbo_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_jbo_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

				$jbo_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - JUMBO', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($jbo_prev_year1 as $row){
					$data['rsl_jbo1_year1'] = $row->jan_price;
					$data['rsl_jbo2_year1'] = $row->feb_price;
					$data['rsl_jbo3_year1'] = $row->mar_price;
					$data['rsl_jbo4_year1'] = $row->apr_price;
					$data['rsl_jbo5_year1'] = $row->may_price;
					$data['rsl_jbo6_year1'] = $row->jun_price;
					$data['rsl_jbo7_year1'] = $row->jul_price;
					$data['rsl_jbo8_year1'] = $row->aug_price;
					$data['rsl_jbo9_year1'] = $row->sep_price;
					$data['rsl_jbo10_year1'] = $row->oct_price;
					$data['rsl_jbo11_year1'] = $row->nov_price;
					$data['rsl_jbo12_year1'] = $row->dec_price;
					$data['rsl_jbo_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_jbo_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_jbo_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

			}elseif($orc_size == "SUPERSIZE"){
				$data['rsl_ss1'] = $orc_jan;
				$data['rsl_ss2'] = $orc_feb;
				$data['rsl_ss3'] = $orc_mar;
				$data['rsl_ss4'] = $orc_apr;
				$data['rsl_ss5'] = $orc_may;
				$data['rsl_ss6'] = $orc_jun;
				$data['rsl_ss7'] = $orc_jul;
				$data['rsl_ss8'] = $orc_aug;
				$data['rsl_ss9'] = $orc_sep;
				$data['rsl_ss10'] = $orc_oct;
				$data['rsl_ss11'] = $orc_nov;
				$data['rsl_ss12'] = $orc_dec;
				$data['rsl_ss_avg'] = $orc_avg;
				$data['rsl_ss_min'] = $orc_min;
				$data['rsl_ss_max'] = $orc_max;

				$ss_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - SUPERSIZE', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2, 'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($ss_prev_year2 as $row){
					$data['rsl_ss1_year2'] = $row->jan_price;
					$data['rsl_ss2_year2'] = $row->feb_price;
					$data['rsl_ss3_year2'] = $row->mar_price;
					$data['rsl_ss4_year2'] = $row->apr_price;
					$data['rsl_ss5_year2'] = $row->may_price;
					$data['rsl_ss6_year2'] = $row->jun_price;
					$data['rsl_ss7_year2'] = $row->jul_price;
					$data['rsl_ss8_year2'] = $row->aug_price;
					$data['rsl_ss9_year2'] = $row->sep_price;
					$data['rsl_ss10_year2'] = $row->oct_price;
					$data['rsl_ss11_year2'] = $row->nov_price;
					$data['rsl_ss12_year2'] = $row->dec_price;
					$data['rsl_ss_avg_year2'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_ss_min_year2'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_ss_max_year2'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

				$ss_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - SUPERSIZE', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1, 'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($ss_prev_year1 as $row){
					$data['rsl_ss1_year1'] = $row->jan_price;
					$data['rsl_ss2_year1'] = $row->feb_price;
					$data['rsl_ss3_year1'] = $row->mar_price;
					$data['rsl_ss4_year1'] = $row->apr_price;
					$data['rsl_ss5_year1'] = $row->may_price;
					$data['rsl_ss6_year1'] = $row->jun_price;
					$data['rsl_ss7_year1'] = $row->jul_price;
					$data['rsl_ss8_year1'] = $row->aug_price;
					$data['rsl_ss9_year1'] = $row->sep_price;
					$data['rsl_ss10_year1'] = $row->oct_price;
					$data['rsl_ss11_year1'] = $row->nov_price;
					$data['rsl_ss12_year1'] = $row->dec_price;
					$data['rsl_ss_avg_year1'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_ss_min_year1'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_ss_max_year1'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

			}elseif($orc_size == "BIGTIME"){
				$data['rsl_bt1'] = $orc_jan;
				$data['rsl_bt2'] = $orc_feb;
				$data['rsl_bt3'] = $orc_mar;
				$data['rsl_bt4'] = $orc_apr;
				$data['rsl_bt5'] = $orc_may;
				$data['rsl_bt6'] = $orc_jun;
				$data['rsl_bt7'] = $orc_jul;
				$data['rsl_bt8'] = $orc_aug;
				$data['rsl_bt9'] = $orc_sep;
				$data['rsl_bt10'] = $orc_oct;
				$data['rsl_bt11'] = $orc_nov;
				$data['rsl_bt12'] = $orc_dec;
				$data['rsl_bt_avg'] = $orc_avg;
				$data['crsl_bt_min'] = $orc_min;
				$data['rsl_bt_max'] = $orc_max;


				$bt_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - BIGTIME', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2, 'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($bt_prev_year2 as $row){
					$data['rsl_bt1_year2'] = $row->jan_price;
					$data['rsl_bt2_year2'] = $row->feb_price;
					$data['rsl_bt3_year2'] = $row->mar_price;
					$data['rsl_bt4_year2'] = $row->apr_price;
					$data['rsl_bt5_year2'] = $row->may_price;
					$data['rsl_bt6_year2'] = $row->jun_price;
					$data['rsl_bt7_year2'] = $row->jul_price;
					$data['rsl_bt8_year2'] = $row->aug_price;
					$data['rsl_bt9_year2'] = $row->sep_price;
					$data['rsl_bt10_year2'] = $row->oct_price;
					$data['rsl_bt11_year2'] = $row->nov_price;
					$data['rsl_bt12_year2'] = $row->dec_price;
					$data['rsl_bt_avg_year2'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_bt_min_year2'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_bt_max_year2'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

				$bt_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - BIGTIME', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1, 'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($bt_prev_year1 as $row){
					$data['rsl_bt1_year1'] = $row->jan_price;
					$data['rsl_bt2_year1'] = $row->feb_price;
					$data['rsl_bt3_year1'] = $row->mar_price;
					$data['rsl_bt4_year1'] = $row->apr_price;
					$data['rsl_bt5_year1'] = $row->may_price;
					$data['rsl_bt6_year1'] = $row->jun_price;
					$data['rsl_bt7_year1'] = $row->jul_price;
					$data['rsl_bt8_year1'] = $row->aug_price;
					$data['rsl_bt9_year1'] = $row->sep_price;
					$data['rsl_bt10_year1'] = $row->oct_price;
					$data['rsl_bt11_year1'] = $row->nov_price;
					$data['rsl_bt12_year1'] = $row->dec_price;
					$data['rsl_bt_avg_year1'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_bt_min_year1'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_bt_max_year1'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

			}elseif($orc_size == "HALF"){
				$data['rsl_half1'] = $orc_jan;
				$data['rsl_half2'] = $orc_feb;
				$data['rsl_half3'] = $orc_mar;
				$data['rsl_half4'] = $orc_apr;
				$data['rsl_half5'] = $orc_may;
				$data['rsl_half6'] = $orc_jun;
				$data['rsl_half7'] = $orc_jul;
				$data['rsl_half8'] = $orc_aug;
				$data['rsl_half9'] = $orc_sep;
				$data['rsl_half10'] = $orc_oct;
				$data['rsl_half11'] = $orc_nov;
				$data['rsl_half12'] = $orc_dec;
				$data['rsl_half_avg'] = $orc_avg;
				$data['rsl_half_min'] = $orc_min;
				$data['rsl_half_max'] = $orc_max;

				$half_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - HALF', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($half_prev_year2 as $row){
					$data['rsl_half1_year2'] = $row->jan_price;
					$data['rsl_half2_year2'] = $row->feb_price;
					$data['rsl_half3_year2'] = $row->mar_price;
					$data['rsl_half4_year2'] = $row->apr_price;
					$data['rsl_half5_year2'] = $row->may_price;
					$data['rsl_half6_year2'] = $row->jun_price;
					$data['rsl_half7_year2'] = $row->jul_price;
					$data['rsl_half8_year2'] = $row->aug_price;
					$data['rsl_half9_year2'] = $row->sep_price;
					$data['rsl_half10_year2'] = $row->oct_price;
					$data['rsl_half11_year2'] = $row->nov_price;
					$data['rsl_half12_year2'] = $row->dec_price;
					$data['rsl_half_avg_year2'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_half_min_year2'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_half_max_year2'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}

				$half_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'ORC - HALF', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

				foreach($half_prev_year1 as $row){
					$data['rsl_half1_year1'] = $row->jan_price;
					$data['rsl_half2_year1'] = $row->feb_price;
					$data['rsl_half3_year1'] = $row->mar_price;
					$data['rsl_half4_year1'] = $row->apr_price;
					$data['rsl_half5_year1'] = $row->may_price;
					$data['rsl_half6_year1'] = $row->jun_price;
					$data['rsl_half7_year1'] = $row->jul_price;
					$data['rsl_half8_year1'] = $row->aug_price;
					$data['rsl_half9_year1'] = $row->sep_price;
					$data['rsl_half10_year1'] = $row->oct_price;
					$data['rsl_half11_year1'] = $row->nov_price;
					$data['rsl_half12_year1'] = $row->dec_price;
					$data['rsl_half_avg_year1'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_half_min_year1'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

					$data['rsl_half_max_year1'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
				}
			}
		}

		/*RSL ORC Regular*/

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'ORC - REGULAR',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['rsl_reg1_year2'],
			'dashboard_price_feb' => $data['rsl_reg2_year2'],
			'dashboard_price_mar' => $data['rsl_reg3_year2'],
			'dashboard_price_apr' => $data['rsl_reg4_year2'],
			'dashboard_price_may' => $data['rsl_reg5_year2'],
			'dashboard_price_june' => $data['rsl_reg6_year2'],
			'dashboard_price_july' => $data['rsl_reg7_year2'],
			'dashboard_price_aug' => $data['rsl_reg8_year2'],
			'dashboard_price_sep' => $data['rsl_reg9_year2'],
			'dashboard_price_oct' => $data['rsl_reg10_year2'],
			'dashboard_price_nov' => $data['rsl_reg11_year2'],
			'dashboard_price_dec' => $data['rsl_reg12_year2'],
			'dashboard_price_min' => $data['rsl_reg_min_year2'],
			'dashboard_price_max' => $data['rsl_reg_max_year2'],
			'dashboard_price_avg' => $data['rsl_reg_avg_year2'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'ORC - REGULAR',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['rsl_reg1_year1'],
			'dashboard_price_feb' => $data['rsl_reg2_year1'],
			'dashboard_price_mar' => $data['rsl_reg3_year1'],
			'dashboard_price_apr' => $data['rsl_reg4_year1'],
			'dashboard_price_may' => $data['rsl_reg5_year1'],
			'dashboard_price_june' => $data['rsl_reg6_year1'],
			'dashboard_price_july' => $data['rsl_reg7_year1'],
			'dashboard_price_aug' => $data['rsl_reg8_year1'],
			'dashboard_price_sep' => $data['rsl_reg9_year1'],
			'dashboard_price_oct' => $data['rsl_reg10_year1'],
			'dashboard_price_nov' => $data['rsl_reg11_year1'],
			'dashboard_price_dec' => $data['rsl_reg12_year1'],
			'dashboard_price_min' => $data['rsl_reg_min_year1'],
			'dashboard_price_max' => $data['rsl_reg_max_year1'],
			'dashboard_price_avg' => $data['rsl_reg_avg_year1'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'ORC - REGULAR',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['rsl_reg1'],
			'dashboard_price_feb' => $data['rsl_reg2'],
			'dashboard_price_mar' => $data['rsl_reg3'],
			'dashboard_price_apr' => $data['rsl_reg4'],
			'dashboard_price_may' => $data['rsl_reg5'],
			'dashboard_price_june' => $data['rsl_reg6'],
			'dashboard_price_july' => $data['rsl_reg7'],
			'dashboard_price_aug' => $data['rsl_reg8'],
			'dashboard_price_sep' => $data['rsl_reg9'],
			'dashboard_price_oct' => $data['rsl_reg10'],
			'dashboard_price_nov' => $data['rsl_reg11'],
			'dashboard_price_dec' => $data['rsl_reg12'],
			'dashboard_price_min' => $data['rsl_reg_min'],
			'dashboard_price_max' => $data['rsl_reg_max'],
			'dashboard_price_avg' => $data['rsl_reg_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		
		/*RSL ORC JUMBO*/

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'ORC - JUMBO',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['rsl_jbo1_year2'],
			'dashboard_price_feb' => $data['rsl_jbo2_year2'],
			'dashboard_price_mar' => $data['rsl_jbo3_year2'],
			'dashboard_price_apr' => $data['rsl_jbo4_year2'],
			'dashboard_price_may' => $data['rsl_jbo5_year2'],
			'dashboard_price_june' => $data['rsl_jbo6_year2'],
			'dashboard_price_july' => $data['rsl_jbo7_year2'],
			'dashboard_price_aug' => $data['rsl_jbo8_year2'],
			'dashboard_price_sep' => $data['rsl_jbo9_year2'],
			'dashboard_price_oct' => $data['rsl_jbo10_year2'],
			'dashboard_price_nov' => $data['rsl_jbo11_year2'],
			'dashboard_price_dec' => $data['rsl_jbo12_year2'],
			'dashboard_price_min' => $data['rsl_jbo_year2_min'],
			'dashboard_price_max' => $data['rsl_jbo_year2_max'],
			'dashboard_price_avg' => $data['rsl_jbo_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'ORC - JUMBO',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['rsl_jbo1_year1'],
			'dashboard_price_feb' => $data['rsl_jbo2_year1'],
			'dashboard_price_mar' => $data['rsl_jbo3_year1'],
			'dashboard_price_apr' => $data['rsl_jbo4_year1'],
			'dashboard_price_may' => $data['rsl_jbo5_year1'],
			'dashboard_price_june' => $data['rsl_jbo6_year1'],
			'dashboard_price_july' => $data['rsl_jbo7_year1'],
			'dashboard_price_aug' => $data['rsl_jbo8_year1'],
			'dashboard_price_sep' => $data['rsl_jbo9_year1'],
			'dashboard_price_oct' => $data['rsl_jbo10_year1'],
			'dashboard_price_nov' => $data['rsl_jbo11_year1'],
			'dashboard_price_dec' => $data['rsl_jbo12_year1'],
			'dashboard_price_min' => $data['rsl_jbo_year1_min'],
			'dashboard_price_max' => $data['rsl_jbo_year1_max'],
			'dashboard_price_avg' => $data['rsl_jbo_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'ORC - JUMBO',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['rsl_jbo1'],
			'dashboard_price_feb' => $data['rsl_jbo2'],
			'dashboard_price_mar' => $data['rsl_jbo3'],
			'dashboard_price_apr' => $data['rsl_jbo4'],
			'dashboard_price_may' => $data['rsl_jbo5'],
			'dashboard_price_june' => $data['rsl_jbo6'],
			'dashboard_price_july' => $data['rsl_jbo7'],
			'dashboard_price_aug' => $data['rsl_jbo8'],
			'dashboard_price_sep' => $data['rsl_jbo9'],
			'dashboard_price_oct' => $data['rsl_jbo10'],
			'dashboard_price_nov' => $data['rsl_jbo11'],
			'dashboard_price_dec' => $data['rsl_jbo12'],
			'dashboard_price_min' => $data['rsl_jbo_min'],
			'dashboard_price_max' => $data['rsl_jbo_max'],
			'dashboard_price_avg' => $data['rsl_jbo_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*RSL ORC SUPERSIZE*/

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'ORC - SUPERSIZE',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['rsl_ss1_year2'],
			'dashboard_price_feb' => $data['rsl_ss2_year2'],
			'dashboard_price_mar' => $data['rsl_ss3_year2'],
			'dashboard_price_apr' => $data['rsl_ss4_year2'],
			'dashboard_price_may' => $data['rsl_ss5_year2'],
			'dashboard_price_june' => $data['rsl_ss6_year2'],
			'dashboard_price_july' => $data['rsl_ss7_year2'],
			'dashboard_price_aug' => $data['rsl_ss8_year2'],
			'dashboard_price_sep' => $data['rsl_ss9_year2'],
			'dashboard_price_oct' => $data['rsl_ss10_year2'],
			'dashboard_price_nov' => $data['rsl_ss11_year2'],
			'dashboard_price_dec' => $data['rsl_ss12_year2'],
			'dashboard_price_min' => $data['rsl_ss_min_year2'],
			'dashboard_price_max' => $data['rsl_ss_max_year2'],
			'dashboard_price_avg' => $data['rsl_ss_avg_year2'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'ORC - SUPERSIZE',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['rsl_ss1_year1'],
			'dashboard_price_feb' => $data['rsl_ss2_year1'],
			'dashboard_price_mar' => $data['rsl_ss3_year1'],
			'dashboard_price_apr' => $data['rsl_ss4_year1'],
			'dashboard_price_may' => $data['rsl_ss5_year1'],
			'dashboard_price_june' => $data['rsl_ss6_year1'],
			'dashboard_price_july' => $data['rsl_ss7_year1'],
			'dashboard_price_aug' => $data['rsl_ss8_year1'],
			'dashboard_price_sep' => $data['rsl_ss9_year1'],
			'dashboard_price_oct' => $data['rsl_ss10_year1'],
			'dashboard_price_nov' => $data['rsl_ss11_year1'],
			'dashboard_price_dec' => $data['rsl_ss12_year1'],
			'dashboard_price_min' => $data['rsl_ss_min_year1'],
			'dashboard_price_max' => $data['rsl_ss_max_year1'],
			'dashboard_price_avg' => $data['rsl_ss_avg_year1'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'ORC - SUPERSIZE',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['rsl_ss1'],
			'dashboard_price_feb' => $data['rsl_ss2'],
			'dashboard_price_mar' => $data['rsl_ss3'],
			'dashboard_price_apr' => $data['rsl_ss4'],
			'dashboard_price_may' => $data['rsl_ss5'],
			'dashboard_price_june' => $data['rsl_ss6'],
			'dashboard_price_july' => $data['rsl_ss7'],
			'dashboard_price_aug' => $data['rsl_ss8'],
			'dashboard_price_sep' => $data['rsl_ss9'],
			'dashboard_price_oct' => $data['rsl_ss10'],
			'dashboard_price_nov' => $data['rsl_ss11'],
			'dashboard_price_dec' => $data['rsl_ss12'],
			'dashboard_price_min' => $data['rsl_ss_min'],
			'dashboard_price_max' => $data['rsl_ss_max'],
			'dashboard_price_avg' => $data['rsl_ss_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*RSL ORC BIGTIME*/

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'ORC - BIGTIME',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['rsl_bt1_year2'],
			'dashboard_price_feb' => $data['rsl_bt2_year2'],
			'dashboard_price_mar' => $data['rsl_bt3_year2'],
			'dashboard_price_apr' => $data['rsl_bt4_year2'],
			'dashboard_price_may' => $data['rsl_bt5_year2'],
			'dashboard_price_june' => $data['rsl_bt6_year2'],
			'dashboard_price_july' => $data['rsl_bt7_year2'],
			'dashboard_price_aug' => $data['rsl_bt8_year2'],
			'dashboard_price_sep' => $data['rsl_bt9_year2'],
			'dashboard_price_oct' => $data['rsl_bt10_year2'],
			'dashboard_price_nov' => $data['rsl_bt11_year2'],
			'dashboard_price_dec' => $data['rsl_bt12_year2'],
			'dashboard_price_min' => $data['rsl_bt_min_year2'],
			'dashboard_price_max' => $data['rsl_bt_max_year2'],
			'dashboard_price_avg' => $data['rsl_bt_avg_year2'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'ORC - BIGTIME',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['rsl_bt1_year1'],
			'dashboard_price_feb' => $data['rsl_bt2_year1'],
			'dashboard_price_mar' => $data['rsl_bt3_year1'],
			'dashboard_price_apr' => $data['rsl_bt4_year1'],
			'dashboard_price_may' => $data['rsl_bt5_year1'],
			'dashboard_price_june' => $data['rsl_bt6_year1'],
			'dashboard_price_july' => $data['rsl_bt7_year1'],
			'dashboard_price_aug' => $data['rsl_bt8_year1'],
			'dashboard_price_sep' => $data['rsl_bt9_year1'],
			'dashboard_price_oct' => $data['rsl_bt10_year1'],
			'dashboard_price_nov' => $data['rsl_bt11_year1'],
			'dashboard_price_dec' => $data['rsl_bt12_year1'],
			'dashboard_price_min' => $data['rsl_bt_min_year1'],
			'dashboard_price_max' => $data['rsl_bt_max_year1'],
			'dashboard_price_avg' => $data['rsl_bt_avg_year1'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'ORC - BIGTIME',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['rsl_bt1'],
			'dashboard_price_feb' => $data['rsl_bt2'],
			'dashboard_price_mar' => $data['rsl_bt3'],
			'dashboard_price_apr' => $data['rsl_bt4'],
			'dashboard_price_may' => $data['rsl_bt5'],
			'dashboard_price_june' => $data['rsl_bt6'],
			'dashboard_price_july' => $data['rsl_bt7'],
			'dashboard_price_aug' => $data['rsl_bt8'],
			'dashboard_price_sep' => $data['rsl_bt9'],
			'dashboard_price_oct' => $data['rsl_bt10'],
			'dashboard_price_nov' => $data['rsl_bt11'],
			'dashboard_price_dec' => $data['rsl_bt12'],
			'dashboard_price_min' => $data['rsl_bt_min'],
			'dashboard_price_max' => $data['rsl_bt_max'],
			'dashboard_price_avg' => $data['rsl_bt_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*RSL ORC HALF*/

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'ORC - HALF',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['rsl_half1_year2'],
			'dashboard_price_feb' => $data['rsl_half2_year2'],
			'dashboard_price_mar' => $data['rsl_half3_year2'],
			'dashboard_price_apr' => $data['rsl_half4_year2'],
			'dashboard_price_may' => $data['rsl_half5_year2'],
			'dashboard_price_june' => $data['rsl_half6_year2'],
			'dashboard_price_july' => $data['rsl_half7_year2'],
			'dashboard_price_aug' => $data['rsl_half8_year2'],
			'dashboard_price_sep' => $data['rsl_half9_year2'],
			'dashboard_price_oct' => $data['rsl_half10_year2'],
			'dashboard_price_nov' => $data['rsl_half11_year2'],
			'dashboard_price_dec' => $data['rsl_half12_year2'],
			'dashboard_price_min' => $data['rsl_half_min_year2'],
			'dashboard_price_max' => $data['rsl_half_max_year2'],
			'dashboard_price_avg' => $data['rsl_half_avg_year2'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'ORC - HALF',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['rsl_half1_year1'],
			'dashboard_price_feb' => $data['rsl_half2_year1'],
			'dashboard_price_mar' => $data['rsl_half3_year1'],
			'dashboard_price_apr' => $data['rsl_half4_year1'],
			'dashboard_price_may' => $data['rsl_half5_year1'],
			'dashboard_price_june' => $data['rsl_half6_year1'],
			'dashboard_price_july' => $data['rsl_half7_year1'],
			'dashboard_price_aug' => $data['rsl_half8_year1'],
			'dashboard_price_sep' => $data['rsl_half9_year1'],
			'dashboard_price_oct' => $data['rsl_half10_year1'],
			'dashboard_price_nov' => $data['rsl_half11_year1'],
			'dashboard_price_dec' => $data['rsl_half12_year1'],
			'dashboard_price_min' => $data['rsl_half_min_year1'],
			'dashboard_price_max' => $data['rsl_half_max_year1'],
			'dashboard_price_avg' => $data['rsl_half_avg_year1'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'ORC - HALF',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['rsl_half1'],
			'dashboard_price_feb' => $data['rsl_half2'],
			'dashboard_price_mar' => $data['rsl_half3'],
			'dashboard_price_apr' => $data['rsl_half4'],
			'dashboard_price_may' => $data['rsl_half5'],
			'dashboard_price_june' => $data['rsl_half6'],
			'dashboard_price_july' => $data['rsl_half7'],
			'dashboard_price_aug' => $data['rsl_half8'],
			'dashboard_price_sep' => $data['rsl_half9'],
			'dashboard_price_oct' => $data['rsl_half10'],
			'dashboard_price_nov' => $data['rsl_half11'],
			'dashboard_price_dec' => $data['rsl_half12'],
			'dashboard_price_min' => $data['rsl_half_min'],
			'dashboard_price_max' => $data['rsl_half_max'],
			'dashboard_price_avg' => $data['rsl_half_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		
		/*RSL Liempo*/

		$join_rsl_liempo = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "LIEMPO"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_liempo = $this->admin->get_join('sales_tbl a', $join_rsl_liempo, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_liempo1'] = 0;
		$data['rsl_liempo2'] = 0;
		$data['rsl_liempo3'] = 0;
		$data['rsl_liempo4'] = 0;
		$data['rsl_liempo5'] = 0;
		$data['rsl_liempo6'] = 0;
		$data['rsl_liempo7'] = 0;
		$data['rsl_liempo8'] = 0;
		$data['rsl_liempo9'] = 0;
		$data['rsl_liempo10'] = 0;
		$data['rsl_liempo11'] = 0;
		$data['rsl_liempo12'] = 0;
		$data['rsl_liempo_total'] = 0;
		$data['rsl_liempo_count'] = 0;
		$data['rsl_liempo_avg'] = 0;
		$data['rsl_liempo_min'] = 0;
		$data['rsl_liempo_max'] = 0;

		foreach($get_rsl_liempo as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_liempo' . $month] = $asp;
			$data['rsl_liempo_total'] += $asp;

			if($asp < $data['rsl_liempo_min'] || $data['rsl_liempo_count'] == 0){
				$data['rsl_liempo_min'] = $asp;
			}

			if($asp > $data['rsl_liempo_max'] || $data['rsl_liempo_count'] == 0){
				$data['rsl_liempo_max'] = $asp;
			}

			$data['rsl_liempo_count']++;
		}

		$data['rsl_liempo_avg'] = $data['rsl_liempo_total'] != 0 ? $data['rsl_liempo_total'] / $data['rsl_liempo_count'] : 0;

		$rsl_liempo_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_liempo_prev_year2_jan'] = 0;
		$data['rsl_liempo_prev_year2_feb'] = 0;
		$data['rsl_liempo_prev_year2_mar'] = 0;
		$data['rsl_liempo_prev_year2_apr'] = 0;
		$data['rsl_liempo_prev_year2_may'] = 0;
		$data['rsl_liempo_prev_year2_jun'] = 0;
		$data['rsl_liempo_prev_year2_jul'] = 0;
		$data['rsl_liempo_prev_year2_aug'] = 0;
		$data['rsl_liempo_prev_year2_sep'] = 0;
		$data['rsl_liempo_prev_year2_oct'] = 0;
		$data['rsl_liempo_prev_year2_nov'] = 0;
		$data['rsl_liempo_prev_year2_dec'] = 0;
		$data['rsl_liempo_prev_year2_avg'] = 0;
		$data['rsl_liempo_prev_year2_min'] = 0;
		$data['rsl_liempo_prev_year2_max'] = 0;

		foreach($rsl_liempo_prev_year2 as $row){
			$data['rsl_liempo_prev_year2_jan'] = $row->jan_price;
			$data['rsl_liempo_prev_year2_feb'] = $row->feb_price;
			$data['rsl_liempo_prev_year2_mar'] = $row->mar_price;
			$data['rsl_liempo_prev_year2_apr'] = $row->apr_price;
			$data['rsl_liempo_prev_year2_may'] = $row->may_price;
			$data['rsl_liempo_prev_year2_jun'] = $row->jun_price;
			$data['rsl_liempo_prev_year2_jul'] = $row->jul_price;
			$data['rsl_liempo_prev_year2_aug'] = $row->aug_price;
			$data['rsl_liempo_prev_year2_sep'] = $row->sep_price;
			$data['rsl_liempo_prev_year2_oct'] = $row->oct_price;
			$data['rsl_liempo_prev_year2_nov'] = $row->nov_price;
			$data['rsl_liempo_prev_year2_dec'] = $row->dec_price;
			$data['rsl_liempo_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_liempo_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_liempo_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'LIEMPO',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['rsl_liempo_prev_year2_jan'],
			'dashboard_price_feb' => $data['rsl_liempo_prev_year2_feb'],
			'dashboard_price_mar' => $data['rsl_liempo_prev_year2_mar'],
			'dashboard_price_apr' => $data['rsl_liempo_prev_year2_apr'],
			'dashboard_price_may' => $data['rsl_liempo_prev_year2_may'],
			'dashboard_price_june' => $data['rsl_liempo_prev_year2_jun'],
			'dashboard_price_july' => $data['rsl_liempo_prev_year2_jul'],
			'dashboard_price_aug' => $data['rsl_liempo_prev_year2_aug'],
			'dashboard_price_sep' => $data['rsl_liempo_prev_year2_sep'],
			'dashboard_price_oct' => $data['rsl_liempo_prev_year2_oct'],
			'dashboard_price_nov' => $data['rsl_liempo_prev_year2_nov'],
			'dashboard_price_dec' => $data['rsl_liempo_prev_year2_dec'],
			'dashboard_price_min' => $data['rsl_liempo_prev_year2_min'],
			'dashboard_price_max' => $data['rsl_liempo_prev_year2_max'],
			'dashboard_price_avg' => $data['rsl_liempo_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$rsl_liempo_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'LIEMPO', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_liempo_prev_year1_jan'] = 0;
		$data['rsl_liempo_prev_year1_feb'] = 0;
		$data['rsl_liempo_prev_year1_mar'] = 0;
		$data['rsl_liempo_prev_year1_apr'] = 0;
		$data['rsl_liempo_prev_year1_may'] = 0;
		$data['rsl_liempo_prev_year1_jun'] = 0;
		$data['rsl_liempo_prev_year1_jul'] = 0;
		$data['rsl_liempo_prev_year1_aug'] = 0;
		$data['rsl_liempo_prev_year1_sep'] = 0;
		$data['rsl_liempo_prev_year1_oct'] = 0;
		$data['rsl_liempo_prev_year1_nov'] = 0;
		$data['rsl_liempo_prev_year1_dec'] = 0;
		$data['rsl_liempo_prev_year1_avg'] = 0;
		$data['rsl_liempo_prev_year1_min'] = 0;
		$data['rsl_liempo_prev_year1_max'] = 0;

		foreach($rsl_liempo_prev_year1 as $row){
			$data['rsl_liempo_prev_year1_jan'] = $row->jan_price;
			$data['rsl_liempo_prev_year1_feb'] = $row->feb_price;
			$data['rsl_liempo_prev_year1_mar'] = $row->mar_price;
			$data['rsl_liempo_prev_year1_apr'] = $row->apr_price;
			$data['rsl_liempo_prev_year1_may'] = $row->may_price;
			$data['rsl_liempo_prev_year1_jun'] = $row->jun_price;
			$data['rsl_liempo_prev_year1_jul'] = $row->jul_price;
			$data['rsl_liempo_prev_year1_aug'] = $row->aug_price;
			$data['rsl_liempo_prev_year1_sep'] = $row->sep_price;
			$data['rsl_liempo_prev_year1_oct'] = $row->oct_price;
			$data['rsl_liempo_prev_year1_nov'] = $row->nov_price;
			$data['rsl_liempo_prev_year1_dec'] = $row->dec_price;
			$data['rsl_liempo_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_liempo_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_liempo_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'LIEMPO',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['rsl_liempo_prev_year1_jan'],
			'dashboard_price_feb' => $data['rsl_liempo_prev_year1_feb'],
			'dashboard_price_mar' => $data['rsl_liempo_prev_year1_mar'],
			'dashboard_price_apr' => $data['rsl_liempo_prev_year1_apr'],
			'dashboard_price_may' => $data['rsl_liempo_prev_year1_may'],
			'dashboard_price_june' => $data['rsl_liempo_prev_year1_jun'],
			'dashboard_price_july' => $data['rsl_liempo_prev_year1_jul'],
			'dashboard_price_aug' => $data['rsl_liempo_prev_year1_aug'],
			'dashboard_price_sep' => $data['rsl_liempo_prev_year1_sep'],
			'dashboard_price_oct' => $data['rsl_liempo_prev_year1_oct'],
			'dashboard_price_nov' => $data['rsl_liempo_prev_year1_nov'],
			'dashboard_price_dec' => $data['rsl_liempo_prev_year1_dec'],
			'dashboard_price_min' => $data['rsl_liempo_prev_year1_min'],
			'dashboard_price_max' => $data['rsl_liempo_prev_year1_max'],
			'dashboard_price_avg' => $data['rsl_liempo_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'LIEMPO',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['rsl_liempo1'],
			'dashboard_price_feb' => $data['rsl_liempo2'],
			'dashboard_price_mar' => $data['rsl_liempo3'],
			'dashboard_price_apr' => $data['rsl_liempo4'],
			'dashboard_price_may' => $data['rsl_liempo5'],
			'dashboard_price_june' => $data['rsl_liempo6'],
			'dashboard_price_july' => $data['rsl_liempo7'],
			'dashboard_price_aug' => $data['rsl_liempo8'],
			'dashboard_price_sep' => $data['rsl_liempo9'],
			'dashboard_price_oct' => $data['rsl_liempo10'],
			'dashboard_price_nov' => $data['rsl_liempo11'],
			'dashboard_price_dec' => $data['rsl_liempo12'],
			'dashboard_price_min' => $data['rsl_liempo_min'],
			'dashboard_price_max' => $data['rsl_liempo_max'],
			'dashboard_price_avg' => $data['rsl_liempo_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*Reseller Dressed Chicken*/

		$join_rsl_dressed = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = "DRESSED"',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id =' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_dressed = $this->admin->get_join('sales_tbl a', $join_rsl_dressed, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_dressed1'] = 0;
		$data['rsl_dressed2'] = 0;
		$data['rsl_dressed3'] = 0;
		$data['rsl_dressed4'] = 0;
		$data['rsl_dressed5'] = 0;
		$data['rsl_dressed6'] = 0;
		$data['rsl_dressed7'] = 0;
		$data['rsl_dressed8'] = 0;
		$data['rsl_dressed9'] = 0;
		$data['rsl_dressed10'] = 0;
		$data['rsl_dressed11'] = 0;
		$data['rsl_dressed12'] = 0;
		$data['rsl_dressed_total'] = 0;
		$data['rsl_dressed_count'] = 0;
		$data['rsl_dressed_avg'] = 0;
		$data['rsl_dressed_min'] = 0;
		$data['rsl_dressed_max'] = 0;

		foreach($get_rsl_dressed as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_dressed' . $month] = $asp;
			$data['rsl_dressed_total'] += $asp;

			if($asp < $data['rsl_dressed_min'] || $data['rsl_dressed_count'] == 0){
				$data['rsl_dressed_min'] = $asp;
			}

			if($asp > $data['rsl_dressed_max'] || $data['rsl_dressed_count'] == 0){
				$data['rsl_dressed_max'] = $asp;
			}

			$data['rsl_dressed_count']++;
		}

		$data['rsl_dressed_avg'] = $data['rsl_dressed_total'] != 0 ? $data['rsl_dressed_total'] / $data['rsl_dressed_count'] : 0;

		$rsl_dressed_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_dressed_prev_year2_jan'] = 0;
		$data['rsl_dressed_prev_year2_feb'] = 0;
		$data['rsl_dressed_prev_year2_mar'] = 0;
		$data['rsl_dressed_prev_year2_apr'] = 0;
		$data['rsl_dressed_prev_year2_may'] = 0;
		$data['rsl_dressed_prev_year2_jun'] = 0;
		$data['rsl_dressed_prev_year2_jul'] = 0;
		$data['rsl_dressed_prev_year2_aug'] = 0;
		$data['rsl_dressed_prev_year2_sep'] = 0;
		$data['rsl_dressed_prev_year2_oct'] = 0;
		$data['rsl_dressed_prev_year2_nov'] = 0;
		$data['rsl_dressed_prev_year2_dec'] = 0;
		$data['rsl_dressed_prev_year2_avg'] = 0;
		$data['rsl_dressed_prev_year2_min'] = 0;
		$data['rsl_dressed_prev_year2_max'] = 0;

		foreach($rsl_dressed_prev_year2 as $row){
			$data['rsl_dressed_prev_year2_jan'] = $row->jan_price;
			$data['rsl_dressed_prev_year2_feb'] = $row->feb_price;
			$data['rsl_dressed_prev_year2_mar'] = $row->mar_price;
			$data['rsl_dressed_prev_year2_apr'] = $row->apr_price;
			$data['rsl_dressed_prev_year2_may'] = $row->may_price;
			$data['rsl_dressed_prev_year2_jun'] = $row->jun_price;
			$data['rsl_dressed_prev_year2_jul'] = $row->jul_price;
			$data['rsl_dressed_prev_year2_aug'] = $row->aug_price;
			$data['rsl_dressed_prev_year2_sep'] = $row->sep_price;
			$data['rsl_dressed_prev_year2_oct'] = $row->oct_price;
			$data['rsl_dressed_prev_year2_nov'] = $row->nov_price;
			$data['rsl_dressed_prev_year2_dec'] = $row->dec_price;
			$data['rsl_dressed_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_dressed_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_dressed_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'DRESSED',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['rsl_dressed_prev_year2_jan'],
			'dashboard_price_feb' => $data['rsl_dressed_prev_year2_feb'],
			'dashboard_price_mar' => $data['rsl_dressed_prev_year2_mar'],
			'dashboard_price_apr' => $data['rsl_dressed_prev_year2_apr'],
			'dashboard_price_may' => $data['rsl_dressed_prev_year2_may'],
			'dashboard_price_june' => $data['rsl_dressed_prev_year2_jun'],
			'dashboard_price_july' => $data['rsl_dressed_prev_year2_jul'],
			'dashboard_price_aug' => $data['rsl_dressed_prev_year2_aug'],
			'dashboard_price_sep' => $data['rsl_dressed_prev_year2_sep'],
			'dashboard_price_oct' => $data['rsl_dressed_prev_year2_oct'],
			'dashboard_price_nov' => $data['rsl_dressed_prev_year2_nov'],
			'dashboard_price_dec' => $data['rsl_dressed_prev_year2_dec'],
			'dashboard_price_min' => $data['rsl_dressed_prev_year2_min'],
			'dashboard_price_max' => $data['rsl_dressed_prev_year2_max'],
			'dashboard_price_avg' => $data['rsl_dressed_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$rsl_dressed_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'DRESSED', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_dressed_prev_year1_jan'] = 0;
		$data['rsl_dressed_prev_year1_feb'] = 0;
		$data['rsl_dressed_prev_year1_mar'] = 0;
		$data['rsl_dressed_prev_year1_apr'] = 0;
		$data['rsl_dressed_prev_year1_may'] = 0;
		$data['rsl_dressed_prev_year1_jun'] = 0;
		$data['rsl_dressed_prev_year1_jul'] = 0;
		$data['rsl_dressed_prev_year1_aug'] = 0;
		$data['rsl_dressed_prev_year1_sep'] = 0;
		$data['rsl_dressed_prev_year1_oct'] = 0;
		$data['rsl_dressed_prev_year1_nov'] = 0;
		$data['rsl_dressed_prev_year1_dec'] = 0;
		$data['rsl_dressed_prev_year1_avg'] = 0;
		$data['rsl_dressed_prev_year1_min'] = 0;
		$data['rsl_dressed_prev_year1_max'] = 0;

		foreach($rsl_dressed_prev_year1 as $row){
			$data['rsl_dressed_prev_year1_jan'] = $row->jan_price;
			$data['rsl_dressed_prev_year1_feb'] = $row->feb_price;
			$data['rsl_dressed_prev_year1_mar'] = $row->mar_price;
			$data['rsl_dressed_prev_year1_apr'] = $row->apr_price;
			$data['rsl_dressed_prev_year1_may'] = $row->may_price;
			$data['rsl_dressed_prev_year1_jun'] = $row->jun_price;
			$data['rsl_dressed_prev_year1_jul'] = $row->jul_price;
			$data['rsl_dressed_prev_year1_aug'] = $row->aug_price;
			$data['rsl_dressed_prev_year1_sep'] = $row->sep_price;
			$data['rsl_dressed_prev_year1_oct'] = $row->oct_price;
			$data['rsl_dressed_prev_year1_nov'] = $row->nov_price;
			$data['rsl_dressed_prev_year1_dec'] = $row->dec_price;
			$data['rsl_dressed_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_dressed_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_dressed_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'DRESSED',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['rsl_dressed_prev_year1_jan'],
			'dashboard_price_feb' => $data['rsl_dressed_prev_year1_feb'],
			'dashboard_price_mar' => $data['rsl_dressed_prev_year1_mar'],
			'dashboard_price_apr' => $data['rsl_dressed_prev_year1_apr'],
			'dashboard_price_may' => $data['rsl_dressed_prev_year1_may'],
			'dashboard_price_june' => $data['rsl_dressed_prev_year1_jun'],
			'dashboard_price_july' => $data['rsl_dressed_prev_year1_jul'],
			'dashboard_price_aug' => $data['rsl_dressed_prev_year1_aug'],
			'dashboard_price_sep' => $data['rsl_dressed_prev_year1_sep'],
			'dashboard_price_oct' => $data['rsl_dressed_prev_year1_oct'],
			'dashboard_price_nov' => $data['rsl_dressed_prev_year1_nov'],
			'dashboard_price_dec' => $data['rsl_dressed_prev_year1_dec'],
			'dashboard_price_min' => $data['rsl_dressed_prev_year1_min'],
			'dashboard_price_max' => $data['rsl_dressed_prev_year1_max'],
			'dashboard_price_avg' => $data['rsl_dressed_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'DRESSED',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['rsl_dressed1'],
			'dashboard_price_feb' => $data['rsl_dressed2'],
			'dashboard_price_mar' => $data['rsl_dressed3'],
			'dashboard_price_apr' => $data['rsl_dressed4'],
			'dashboard_price_may' => $data['rsl_dressed5'],
			'dashboard_price_june' => $data['rsl_dressed6'],
			'dashboard_price_july' => $data['rsl_dressed7'],
			'dashboard_price_aug' => $data['rsl_dressed8'],
			'dashboard_price_sep' => $data['rsl_dressed9'],
			'dashboard_price_oct' => $data['rsl_dressed10'],
			'dashboard_price_nov' => $data['rsl_dressed11'],
			'dashboard_price_dec' => $data['rsl_dressed12'],
			'dashboard_price_min' => $data['rsl_dressed_min'],
			'dashboard_price_max' => $data['rsl_dressed_max'],
			'dashboard_price_avg' => $data['rsl_dressed_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*Reseller Chooksies Marinado*/

		$join_rsl_chooksies = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 10200095 OR d.material_code = 10200096 OR d.material_code = 10200097)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id =' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_chooksies = $this->admin->get_join('sales_tbl a', $join_rsl_chooksies, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_chooksies1'] = 0;
		$data['rsl_chooksies2'] = 0;
		$data['rsl_chooksies3'] = 0;
		$data['rsl_chooksies4'] = 0;
		$data['rsl_chooksies5'] = 0;
		$data['rsl_chooksies6'] = 0;
		$data['rsl_chooksies7'] = 0;
		$data['rsl_chooksies8'] = 0;
		$data['rsl_chooksies9'] = 0;
		$data['rsl_chooksies10'] = 0;
		$data['rsl_chooksies11'] = 0;
		$data['rsl_chooksies12'] = 0;
		$data['rsl_chooksies_total'] = 0;
		$data['rsl_chooksies_count'] = 0;
		$data['rsl_chooksies_avg'] = 0;
		$data['rsl_chooksies_min'] = 0;
		$data['rsl_chooksies_max'] = 0;

		foreach($get_rsl_chooksies as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_chooksies' . $month] = $asp;
			$data['rsl_chooksies_total'] += $asp;

			if($asp < $data['rsl_chooksies_min'] || $data['rsl_chooksies_count'] == 0){
				$data['rsl_chooksies_min'] = $asp;
			}

			if($asp > $data['rsl_chooksies_max'] || $data['rsl_chooksies_count'] == 0){
				$data['rsl_chooksies_max'] = $asp;
			}

			$data['rsl_chooksies_count']++;
		}

		$data['rsl_chooksies_avg'] = $data['rsl_chooksies_total'] != 0 ? $data['rsl_chooksies_total'] / $data['rsl_chooksies_count'] : 0;


		$rsl_chooksies_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_chooksies_prev_year2_jan'] = 0;
		$data['rsl_chooksies_prev_year2_feb'] = 0;
		$data['rsl_chooksies_prev_year2_mar'] = 0;
		$data['rsl_chooksies_prev_year2_apr'] = 0;
		$data['rsl_chooksies_prev_year2_may'] = 0;
		$data['rsl_chooksies_prev_year2_jun'] = 0;
		$data['rsl_chooksies_prev_year2_jul'] = 0;
		$data['rsl_chooksies_prev_year2_aug'] = 0;
		$data['rsl_chooksies_prev_year2_sep'] = 0;
		$data['rsl_chooksies_prev_year2_oct'] = 0;
		$data['rsl_chooksies_prev_year2_nov'] = 0;
		$data['rsl_chooksies_prev_year2_dec'] = 0;
		$data['rsl_chooksies_prev_year2_avg'] = 0;
		$data['rsl_chooksies_prev_year2_min'] = 0;
		$data['rsl_chooksies_prev_year2_max'] = 0;

		foreach($rsl_chooksies_prev_year2 as $row){
			$data['rsl_chooksies_prev_year2_jan'] = $row->jan_price;
			$data['rsl_chooksies_prev_year2_feb'] = $row->feb_price;
			$data['rsl_chooksies_prev_year2_mar'] = $row->mar_price;
			$data['rsl_chooksies_prev_year2_apr'] = $row->apr_price;
			$data['rsl_chooksies_prev_year2_may'] = $row->may_price;
			$data['rsl_chooksies_prev_year2_jun'] = $row->jun_price;
			$data['rsl_chooksies_prev_year2_jul'] = $row->jul_price;
			$data['rsl_chooksies_prev_year2_aug'] = $row->aug_price;
			$data['rsl_chooksies_prev_year2_sep'] = $row->sep_price;
			$data['rsl_chooksies_prev_year2_oct'] = $row->oct_price;
			$data['rsl_chooksies_prev_year2_nov'] = $row->nov_price;
			$data['rsl_chooksies_prev_year2_dec'] = $row->dec_price;
			$data['rsl_chooksies_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_chooksies_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_chooksies_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'CHOOKSIES MARINADO',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['rsl_chooksies_prev_year2_jan'],
			'dashboard_price_feb' => $data['rsl_chooksies_prev_year2_feb'],
			'dashboard_price_mar' => $data['rsl_chooksies_prev_year2_mar'],
			'dashboard_price_apr' => $data['rsl_chooksies_prev_year2_apr'],
			'dashboard_price_may' => $data['rsl_chooksies_prev_year2_may'],
			'dashboard_price_june' => $data['rsl_chooksies_prev_year2_jun'],
			'dashboard_price_july' => $data['rsl_chooksies_prev_year2_jul'],
			'dashboard_price_aug' => $data['rsl_chooksies_prev_year2_aug'],
			'dashboard_price_sep' => $data['rsl_chooksies_prev_year2_sep'],
			'dashboard_price_oct' => $data['rsl_chooksies_prev_year2_oct'],
			'dashboard_price_nov' => $data['rsl_chooksies_prev_year2_nov'],
			'dashboard_price_dec' => $data['rsl_chooksies_prev_year2_dec'],
			'dashboard_price_min' => $data['rsl_chooksies_prev_year2_min'],
			'dashboard_price_max' => $data['rsl_chooksies_prev_year2_max'],
			'dashboard_price_avg' => $data['rsl_chooksies_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$rsl_chooksies_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES MARINADO', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_chooksies_prev_year1_jan'] = 0;
		$data['rsl_chooksies_prev_year1_feb'] = 0;
		$data['rsl_chooksies_prev_year1_mar'] = 0;
		$data['rsl_chooksies_prev_year1_apr'] = 0;
		$data['rsl_chooksies_prev_year1_may'] = 0;
		$data['rsl_chooksies_prev_year1_jun'] = 0;
		$data['rsl_chooksies_prev_year1_jul'] = 0;
		$data['rsl_chooksies_prev_year1_aug'] = 0;
		$data['rsl_chooksies_prev_year1_sep'] = 0;
		$data['rsl_chooksies_prev_year1_oct'] = 0;
		$data['rsl_chooksies_prev_year1_nov'] = 0;
		$data['rsl_chooksies_prev_year1_dec'] = 0;
		$data['rsl_chooksies_prev_year1_avg'] = 0;
		$data['rsl_chooksies_prev_year1_min'] = 0;
		$data['rsl_chooksies_prev_year1_max'] = 0;

		foreach($rsl_chooksies_prev_year1 as $row){
			$data['rsl_chooksies_prev_year1_jan'] = $row->jan_price;
			$data['rsl_chooksies_prev_year1_feb'] = $row->feb_price;
			$data['rsl_chooksies_prev_year1_mar'] = $row->mar_price;
			$data['rsl_chooksies_prev_year1_apr'] = $row->apr_price;
			$data['rsl_chooksies_prev_year1_may'] = $row->may_price;
			$data['rsl_chooksies_prev_year1_jun'] = $row->jun_price;
			$data['rsl_chooksies_prev_year1_jul'] = $row->jul_price;
			$data['rsl_chooksies_prev_year1_aug'] = $row->aug_price;
			$data['rsl_chooksies_prev_year1_sep'] = $row->sep_price;
			$data['rsl_chooksies_prev_year1_oct'] = $row->oct_price;
			$data['rsl_chooksies_prev_year1_nov'] = $row->nov_price;
			$data['rsl_chooksies_prev_year1_dec'] = $row->dec_price;
			$data['rsl_chooksies_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_chooksies_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_chooksies_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'CHOOKSIES MARINADO',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['rsl_chooksies_prev_year1_jan'],
			'dashboard_price_feb' => $data['rsl_chooksies_prev_year1_feb'],
			'dashboard_price_mar' => $data['rsl_chooksies_prev_year1_mar'],
			'dashboard_price_apr' => $data['rsl_chooksies_prev_year1_apr'],
			'dashboard_price_may' => $data['rsl_chooksies_prev_year1_may'],
			'dashboard_price_june' => $data['rsl_chooksies_prev_year1_jun'],
			'dashboard_price_july' => $data['rsl_chooksies_prev_year1_jul'],
			'dashboard_price_aug' => $data['rsl_chooksies_prev_year1_aug'],
			'dashboard_price_sep' => $data['rsl_chooksies_prev_year1_sep'],
			'dashboard_price_oct' => $data['rsl_chooksies_prev_year1_oct'],
			'dashboard_price_nov' => $data['rsl_chooksies_prev_year1_nov'],
			'dashboard_price_dec' => $data['rsl_chooksies_prev_year1_dec'],
			'dashboard_price_min' => $data['rsl_chooksies_prev_year1_min'],
			'dashboard_price_max' => $data['rsl_chooksies_prev_year1_max'],
			'dashboard_price_avg' => $data['rsl_chooksies_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'CHOOKSIES MARINADO',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['rsl_chooksies1'],
			'dashboard_price_feb' => $data['rsl_chooksies2'],
			'dashboard_price_mar' => $data['rsl_chooksies3'],
			'dashboard_price_apr' => $data['rsl_chooksies4'],
			'dashboard_price_may' => $data['rsl_chooksies5'],
			'dashboard_price_june' => $data['rsl_chooksies6'],
			'dashboard_price_july' => $data['rsl_chooksies7'],
			'dashboard_price_aug' => $data['rsl_chooksies8'],
			'dashboard_price_sep' => $data['rsl_chooksies9'],
			'dashboard_price_oct' => $data['rsl_chooksies10'],
			'dashboard_price_nov' => $data['rsl_chooksies11'],
			'dashboard_price_dec' => $data['rsl_chooksies12'],
			'dashboard_price_min' => $data['rsl_chooksies_min'],
			'dashboard_price_max' => $data['rsl_chooksies_max'],
			'dashboard_price_avg' => $data['rsl_chooksies_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*Reseller Marinado Fried*/

		$join_rsl_marinado = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code IN (1000638, 10200086)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id =' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_marinado = $this->admin->get_join('sales_tbl a', $join_rsl_marinado, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_marinado1'] = 0;
		$data['rsl_marinado2'] = 0;
		$data['rsl_marinado3'] = 0;
		$data['rsl_marinado4'] = 0;
		$data['rsl_marinado5'] = 0;
		$data['rsl_marinado6'] = 0;
		$data['rsl_marinado7'] = 0;
		$data['rsl_marinado8'] = 0;
		$data['rsl_marinado9'] = 0;
		$data['rsl_marinado10'] = 0;
		$data['rsl_marinado11'] = 0;
		$data['rsl_marinado12'] = 0;
		$data['rsl_marinado_total'] = 0;
		$data['rsl_marinado_count'] = 0;
		$data['rsl_marinado_avg'] = 0;
		$data['rsl_marinado_min'] = 0;
		$data['rsl_marinado_max'] = 0;

		foreach($get_rsl_marinado as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_marinado' . $month] = $asp;
			$data['rsl_marinado_total'] += $asp;

			if($asp < $data['rsl_marinado_min'] || $data['rsl_marinado_count'] == 0){
				$data['rsl_marinado_min'] = $asp;
			}

			if($asp > $data['rsl_marinado_max'] || $data['rsl_marinado_count'] == 0){
				$data['rsl_marinado_max'] = $asp;
			}

			$data['rsl_marinado_count']++;
		}

		$data['rsl_marinado_avg'] = $data['rsl_marinado_total'] != 0 ? $data['rsl_marinado_total'] / $data['rsl_marinado_count'] : 0;

		$rsl_marinado_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_marinado_prev_year2_jan'] = 0;
		$data['rsl_marinado_prev_year2_feb'] = 0;
		$data['rsl_marinado_prev_year2_mar'] = 0;
		$data['rsl_marinado_prev_year2_apr'] = 0;
		$data['rsl_marinado_prev_year2_may'] = 0;
		$data['rsl_marinado_prev_year2_jun'] = 0;
		$data['rsl_marinado_prev_year2_jul'] = 0;
		$data['rsl_marinado_prev_year2_aug'] = 0;
		$data['rsl_marinado_prev_year2_sep'] = 0;
		$data['rsl_marinado_prev_year2_oct'] = 0;
		$data['rsl_marinado_prev_year2_nov'] = 0;
		$data['rsl_marinado_prev_year2_dec'] = 0;
		$data['rsl_marinado_prev_year2_avg'] = 0;
		$data['rsl_marinado_prev_year2_min'] = 0;
		$data['rsl_marinado_prev_year2_max'] = 0;

		foreach($rsl_marinado_prev_year2 as $row){
			$data['rsl_marinado_prev_year2_jan'] = $row->jan_price;
			$data['rsl_marinado_prev_year2_feb'] = $row->feb_price;
			$data['rsl_marinado_prev_year2_mar'] = $row->mar_price;
			$data['rsl_marinado_prev_year2_apr'] = $row->apr_price;
			$data['rsl_marinado_prev_year2_may'] = $row->may_price;
			$data['rsl_marinado_prev_year2_jun'] = $row->jun_price;
			$data['rsl_marinado_prev_year2_jul'] = $row->jul_price;
			$data['rsl_marinado_prev_year2_aug'] = $row->aug_price;
			$data['rsl_marinado_prev_year2_sep'] = $row->sep_price;
			$data['rsl_marinado_prev_year2_oct'] = $row->oct_price;
			$data['rsl_marinado_prev_year2_nov'] = $row->nov_price;
			$data['rsl_marinado_prev_year2_dec'] = $row->dec_price;
			$data['rsl_marinado_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_marinado_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_marinado_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'MARINADO FRIED',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['rsl_marinado_prev_year2_jan'],
			'dashboard_price_feb' => $data['rsl_marinado_prev_year2_feb'],
			'dashboard_price_mar' => $data['rsl_marinado_prev_year2_mar'],
			'dashboard_price_apr' => $data['rsl_marinado_prev_year2_apr'],
			'dashboard_price_may' => $data['rsl_marinado_prev_year2_may'],
			'dashboard_price_june' => $data['rsl_marinado_prev_year2_jun'],
			'dashboard_price_july' => $data['rsl_marinado_prev_year2_jul'],
			'dashboard_price_aug' => $data['rsl_marinado_prev_year2_aug'],
			'dashboard_price_sep' => $data['rsl_marinado_prev_year2_sep'],
			'dashboard_price_oct' => $data['rsl_marinado_prev_year2_oct'],
			'dashboard_price_nov' => $data['rsl_marinado_prev_year2_nov'],
			'dashboard_price_dec' => $data['rsl_marinado_prev_year2_dec'],
			'dashboard_price_min' => $data['rsl_marinado_prev_year2_min'],
			'dashboard_price_max' => $data['rsl_marinado_prev_year2_max'],
			'dashboard_price_avg' => $data['rsl_marinado_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$rsl_marinado_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINADO FRIED', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_marinado_prev_year1_jan'] = 0;
		$data['rsl_marinado_prev_year1_feb'] = 0;
		$data['rsl_marinado_prev_year1_mar'] = 0;
		$data['rsl_marinado_prev_year1_apr'] = 0;
		$data['rsl_marinado_prev_year1_may'] = 0;
		$data['rsl_marinado_prev_year1_jun'] = 0;
		$data['rsl_marinado_prev_year1_jul'] = 0;
		$data['rsl_marinado_prev_year1_aug'] = 0;
		$data['rsl_marinado_prev_year1_sep'] = 0;
		$data['rsl_marinado_prev_year1_oct'] = 0;
		$data['rsl_marinado_prev_year1_nov'] = 0;
		$data['rsl_marinado_prev_year1_dec'] = 0;
		$data['rsl_marinado_prev_year1_avg'] = 0;
		$data['rsl_marinado_prev_year1_min'] = 0;
		$data['rsl_marinado_prev_year1_max'] = 0;

		foreach($rsl_marinado_prev_year1 as $row){
			$data['rsl_marinado_prev_year1_jan'] = $row->jan_price;
			$data['rsl_marinado_prev_year1_feb'] = $row->feb_price;
			$data['rsl_marinado_prev_year1_mar'] = $row->mar_price;
			$data['rsl_marinado_prev_year1_apr'] = $row->apr_price;
			$data['rsl_marinado_prev_year1_may'] = $row->may_price;
			$data['rsl_marinado_prev_year1_jun'] = $row->jun_price;
			$data['rsl_marinado_prev_year1_jul'] = $row->jul_price;
			$data['rsl_marinado_prev_year1_aug'] = $row->aug_price;
			$data['rsl_marinado_prev_year1_sep'] = $row->sep_price;
			$data['rsl_marinado_prev_year1_oct'] = $row->oct_price;
			$data['rsl_marinado_prev_year1_nov'] = $row->nov_price;
			$data['rsl_marinado_prev_year1_dec'] = $row->dec_price;
			$data['rsl_marinado_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_marinado_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_marinado_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'MARINADO FRIED',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['rsl_marinado_prev_year1_jan'],
			'dashboard_price_feb' => $data['rsl_marinado_prev_year1_feb'],
			'dashboard_price_mar' => $data['rsl_marinado_prev_year1_mar'],
			'dashboard_price_apr' => $data['rsl_marinado_prev_year1_apr'],
			'dashboard_price_may' => $data['rsl_marinado_prev_year1_may'],
			'dashboard_price_june' => $data['rsl_marinado_prev_year1_jun'],
			'dashboard_price_july' => $data['rsl_marinado_prev_year1_jul'],
			'dashboard_price_aug' => $data['rsl_marinado_prev_year1_aug'],
			'dashboard_price_sep' => $data['rsl_marinado_prev_year1_sep'],
			'dashboard_price_oct' => $data['rsl_marinado_prev_year1_oct'],
			'dashboard_price_nov' => $data['rsl_marinado_prev_year1_nov'],
			'dashboard_price_dec' => $data['rsl_marinado_prev_year1_dec'],
			'dashboard_price_min' => $data['rsl_marinado_prev_year1_min'],
			'dashboard_price_max' => $data['rsl_marinado_prev_year1_max'],
			'dashboard_price_avg' => $data['rsl_marinado_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'MARINADO FRIED',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['rsl_marinado1'],
			'dashboard_price_feb' => $data['rsl_marinado2'],
			'dashboard_price_mar' => $data['rsl_marinado3'],
			'dashboard_price_apr' => $data['rsl_marinado4'],
			'dashboard_price_may' => $data['rsl_marinado5'],
			'dashboard_price_june' => $data['rsl_marinado6'],
			'dashboard_price_july' => $data['rsl_marinado7'],
			'dashboard_price_aug' => $data['rsl_marinado8'],
			'dashboard_price_sep' => $data['rsl_marinado9'],
			'dashboard_price_oct' => $data['rsl_marinado10'],
			'dashboard_price_nov' => $data['rsl_marinado11'],
			'dashboard_price_dec' => $data['rsl_marinado12'],
			'dashboard_price_min' => $data['rsl_marinado_min'],
			'dashboard_price_max' => $data['rsl_marinado_max'],
			'dashboard_price_avg' => $data['rsl_marinado_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$join_rsl_spicy = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 10200090 OR d.material_code = 1000401 OR d.material_code = 1000402 OR d.material_code = 1000617)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id =' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		
		/*Reseller Spicy Neck*/

		$get_rsl_spicy = $this->admin->get_join('sales_tbl a', $join_rsl_spicy, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_spicy1'] = 0;
		$data['rsl_spicy2'] = 0;
		$data['rsl_spicy3'] = 0;
		$data['rsl_spicy4'] = 0;
		$data['rsl_spicy5'] = 0;
		$data['rsl_spicy6'] = 0;
		$data['rsl_spicy7'] = 0;
		$data['rsl_spicy8'] = 0;
		$data['rsl_spicy9'] = 0;
		$data['rsl_spicy10'] = 0;
		$data['rsl_spicy11'] = 0;
		$data['rsl_spicy12'] = 0;
		$data['rsl_spicy_total'] = 0;
		$data['rsl_spicy_count'] = 0;
		$data['rsl_spicy_avg'] = 0;
		$data['rsl_spicy_min'] = 0;
		$data['rsl_spicy_max'] = 0;

		foreach($get_rsl_spicy as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_spicy' . $month] = $asp;
			$data['rsl_spicy_total'] += $asp;

			if($asp < $data['rsl_spicy_min'] || $data['rsl_spicy_count'] == 0){
				$data['rsl_spicy_min'] = $asp;
			}

			if($asp > $data['rsl_spicy_max'] || $data['rsl_spicy_count'] == 0){
				$data['rsl_spicy_max'] = $asp;
			}

			$data['rsl_spicy_count']++;
		}

		$data['rsl_spicy_avg'] = $data['rsl_spicy_total'] != 0 ? $data['rsl_spicy_total'] / $data['rsl_spicy_count'] : 0;

		$rsl_spicy_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_spicy_prev_year2_jan'] = 0;
		$data['rsl_spicy_prev_year2_feb'] = 0;
		$data['rsl_spicy_prev_year2_mar'] = 0;
		$data['rsl_spicy_prev_year2_apr'] = 0;
		$data['rsl_spicy_prev_year2_may'] = 0;
		$data['rsl_spicy_prev_year2_jun'] = 0;
		$data['rsl_spicy_prev_year2_jul'] = 0;
		$data['rsl_spicy_prev_year2_aug'] = 0;
		$data['rsl_spicy_prev_year2_sep'] = 0;
		$data['rsl_spicy_prev_year2_oct'] = 0;
		$data['rsl_spicy_prev_year2_nov'] = 0;
		$data['rsl_spicy_prev_year2_dec'] = 0;
		$data['rsl_spicy_prev_year2_avg'] = 0;
		$data['rsl_spicy_prev_year2_min'] = 0;
		$data['rsl_spicy_prev_year2_max'] = 0;

		foreach($rsl_spicy_prev_year2 as $row){
			$data['rsl_spicy_prev_year2_jan'] = $row->jan_price;
			$data['rsl_spicy_prev_year2_feb'] = $row->feb_price;
			$data['rsl_spicy_prev_year2_mar'] = $row->mar_price;
			$data['rsl_spicy_prev_year2_apr'] = $row->apr_price;
			$data['rsl_spicy_prev_year2_may'] = $row->may_price;
			$data['rsl_spicy_prev_year2_jun'] = $row->jun_price;
			$data['rsl_spicy_prev_year2_jul'] = $row->jul_price;
			$data['rsl_spicy_prev_year2_aug'] = $row->aug_price;
			$data['rsl_spicy_prev_year2_sep'] = $row->sep_price;
			$data['rsl_spicy_prev_year2_oct'] = $row->oct_price;
			$data['rsl_spicy_prev_year2_nov'] = $row->nov_price;
			$data['rsl_spicy_prev_year2_dec'] = $row->dec_price;
			$data['rsl_spicy_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_spicy_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_spicy_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'SPICY NECK',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['rsl_spicy_prev_year2_jan'],
			'dashboard_price_feb' => $data['rsl_spicy_prev_year2_feb'],
			'dashboard_price_mar' => $data['rsl_spicy_prev_year2_mar'],
			'dashboard_price_apr' => $data['rsl_spicy_prev_year2_apr'],
			'dashboard_price_may' => $data['rsl_spicy_prev_year2_may'],
			'dashboard_price_june' => $data['rsl_spicy_prev_year2_jun'],
			'dashboard_price_july' => $data['rsl_spicy_prev_year2_jul'],
			'dashboard_price_aug' => $data['rsl_spicy_prev_year2_aug'],
			'dashboard_price_sep' => $data['rsl_spicy_prev_year2_sep'],
			'dashboard_price_oct' => $data['rsl_spicy_prev_year2_oct'],
			'dashboard_price_nov' => $data['rsl_spicy_prev_year2_nov'],
			'dashboard_price_dec' => $data['rsl_spicy_prev_year2_dec'],
			'dashboard_price_min' => $data['rsl_spicy_prev_year2_min'],
			'dashboard_price_max' => $data['rsl_spicy_prev_year2_max'],
			'dashboard_price_avg' => $data['rsl_spicy_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$rsl_spicy_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'SPICY NECK', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_spicy_prev_year1_jan'] = 0;
		$data['rsl_spicy_prev_year1_feb'] = 0;
		$data['rsl_spicy_prev_year1_mar'] = 0;
		$data['rsl_spicy_prev_year1_apr'] = 0;
		$data['rsl_spicy_prev_year1_may'] = 0;
		$data['rsl_spicy_prev_year1_jun'] = 0;
		$data['rsl_spicy_prev_year1_jul'] = 0;
		$data['rsl_spicy_prev_year1_aug'] = 0;
		$data['rsl_spicy_prev_year1_sep'] = 0;
		$data['rsl_spicy_prev_year1_oct'] = 0;
		$data['rsl_spicy_prev_year1_nov'] = 0;
		$data['rsl_spicy_prev_year1_dec'] = 0;
		$data['rsl_spicy_prev_year1_avg'] = 0;
		$data['rsl_spicy_prev_year1_min'] = 0;
		$data['rsl_spicy_prev_year1_max'] = 0;

		foreach($rsl_spicy_prev_year1 as $row){
			$data['rsl_spicy_prev_year1_jan'] = $row->jan_price;
			$data['rsl_spicy_prev_year1_feb'] = $row->feb_price;
			$data['rsl_spicy_prev_year1_mar'] = $row->mar_price;
			$data['rsl_spicy_prev_year1_apr'] = $row->apr_price;
			$data['rsl_spicy_prev_year1_may'] = $row->may_price;
			$data['rsl_spicy_prev_year1_jun'] = $row->jun_price;
			$data['rsl_spicy_prev_year1_jul'] = $row->jul_price;
			$data['rsl_spicy_prev_year1_aug'] = $row->aug_price;
			$data['rsl_spicy_prev_year1_sep'] = $row->sep_price;
			$data['rsl_spicy_prev_year1_oct'] = $row->oct_price;
			$data['rsl_spicy_prev_year1_nov'] = $row->nov_price;
			$data['rsl_spicy_prev_year1_dec'] = $row->dec_price;
			$data['rsl_spicy_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_spicy_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price)); 

			$data['rsl_spicy_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'SPICY NECK',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['rsl_spicy_prev_year1_jan'],
			'dashboard_price_feb' => $data['rsl_spicy_prev_year1_feb'],
			'dashboard_price_mar' => $data['rsl_spicy_prev_year1_mar'],
			'dashboard_price_apr' => $data['rsl_spicy_prev_year1_apr'],
			'dashboard_price_may' => $data['rsl_spicy_prev_year1_may'],
			'dashboard_price_june' => $data['rsl_spicy_prev_year1_jun'],
			'dashboard_price_july' => $data['rsl_spicy_prev_year1_jul'],
			'dashboard_price_aug' => $data['rsl_spicy_prev_year1_aug'],
			'dashboard_price_sep' => $data['rsl_spicy_prev_year1_sep'],
			'dashboard_price_oct' => $data['rsl_spicy_prev_year1_oct'],
			'dashboard_price_nov' => $data['rsl_spicy_prev_year1_nov'],
			'dashboard_price_dec' => $data['rsl_spicy_prev_year1_dec'],
			'dashboard_price_min' => $data['rsl_spicy_prev_year1_min'],
			'dashboard_price_max' => $data['rsl_spicy_prev_year1_max'],
			'dashboard_price_avg' => $data['rsl_spicy_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'SPICY NECK',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['rsl_spicy1'],
			'dashboard_price_feb' => $data['rsl_spicy2'],
			'dashboard_price_mar' => $data['rsl_spicy3'],
			'dashboard_price_apr' => $data['rsl_spicy4'],
			'dashboard_price_may' => $data['rsl_spicy5'],
			'dashboard_price_june' => $data['rsl_spicy6'],
			'dashboard_price_july' => $data['rsl_spicy7'],
			'dashboard_price_aug' => $data['rsl_spicy8'],
			'dashboard_price_sep' => $data['rsl_spicy9'],
			'dashboard_price_oct' => $data['rsl_spicy10'],
			'dashboard_price_nov' => $data['rsl_spicy11'],
			'dashboard_price_dec' => $data['rsl_spicy12'],
			'dashboard_price_min' => $data['rsl_spicy_min'],
			'dashboard_price_max' => $data['rsl_spicy_max'],
			'dashboard_price_avg' => $data['rsl_spicy_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*Reseller Nuggets*/

		$join_rsl_nuggets = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND (d.material_code = 40000016 OR d.material_code = 40000019 OR d.material_code = 40000053)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'OTHER VAP PRODUCTS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_nuggets = $this->admin->get_join('sales_tbl a', $join_rsl_nuggets, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_nuggets1'] = 0;
		$data['rsl_nuggets2'] = 0;
		$data['rsl_nuggets3'] = 0;
		$data['rsl_nuggets4'] = 0;
		$data['rsl_nuggets5'] = 0;
		$data['rsl_nuggets6'] = 0;
		$data['rsl_nuggets7'] = 0;
		$data['rsl_nuggets8'] = 0;
		$data['rsl_nuggets9'] = 0;
		$data['rsl_nuggets10'] = 0;
		$data['rsl_nuggets11'] = 0;
		$data['rsl_nuggets12'] = 0;
		$data['rsl_nuggets_total'] = 0;
		$data['rsl_nuggets_count'] = 0;
		$data['rsl_nuggets_avg'] = 0;
		$data['rsl_nuggets_min'] = 0;
		$data['rsl_nuggets_max'] = 0;

		foreach($get_rsl_nuggets as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_nuggets' . $month] = $asp;
			$data['rsl_nuggets_total'] += $asp;

			if($asp < $data['rsl_nuggets_min'] || $data['rsl_nuggets_count'] == 0){
				$data['rsl_nuggets_min'] = $asp;
			}

			if($asp > $data['rsl_nuggets_max'] || $data['rsl_nuggets_count'] == 0){
				$data['rsl_nuggets_max'] = $asp;
			}

			$data['rsl_nuggets_count']++;
		}

		$data['rsl_nuggets_avg'] = $data['rsl_nuggets_total'] != 0 ? $data['rsl_nuggets_total'] / $data['rsl_nuggets_count'] : 0;


		$rsl_nuggets_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-Nuggets', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_nuggets_prev_year2_jan'] = 0;
		$data['rsl_nuggets_prev_year2_feb'] = 0;
		$data['rsl_nuggets_prev_year2_mar'] = 0;
		$data['rsl_nuggets_prev_year2_apr'] = 0;
		$data['rsl_nuggets_prev_year2_may'] = 0;
		$data['rsl_nuggets_prev_year2_jun'] = 0;
		$data['rsl_nuggets_prev_year2_jul'] = 0;
		$data['rsl_nuggets_prev_year2_aug'] = 0;
		$data['rsl_nuggets_prev_year2_sep'] = 0;
		$data['rsl_nuggets_prev_year2_oct'] = 0;
		$data['rsl_nuggets_prev_year2_nov'] = 0;
		$data['rsl_nuggets_prev_year2_dec'] = 0;
		$data['rsl_nuggets_prev_year2_avg'] = 0;
		$data['rsl_nuggets_prev_year2_min'] = 0;
		$data['rsl_nuggets_prev_year2_max'] = 0;

		foreach($rsl_nuggets_prev_year2 as $row){
			$data['rsl_nuggets_prev_year2_jan'] = $row->jan_price;
			$data['rsl_nuggets_prev_year2_feb'] = $row->feb_price;
			$data['rsl_nuggets_prev_year2_mar'] = $row->mar_price;
			$data['rsl_nuggets_prev_year2_apr'] = $row->apr_price;
			$data['rsl_nuggets_prev_year2_may'] = $row->may_price;
			$data['rsl_nuggets_prev_year2_jun'] = $row->jun_price;
			$data['rsl_nuggets_prev_year2_jul'] = $row->jul_price;
			$data['rsl_nuggets_prev_year2_aug'] = $row->aug_price;
			$data['rsl_nuggets_prev_year2_sep'] = $row->sep_price;
			$data['rsl_nuggets_prev_year2_oct'] = $row->oct_price;
			$data['rsl_nuggets_prev_year2_nov'] = $row->nov_price;
			$data['rsl_nuggets_prev_year2_dec'] = $row->dec_price;
			$data['rsl_nuggets_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_nuggets_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_nuggets_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'VAP-NUGGETS',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['rsl_nuggets_prev_year2_jan'],
			'dashboard_price_feb' => $data['rsl_nuggets_prev_year2_feb'],
			'dashboard_price_mar' => $data['rsl_nuggets_prev_year2_mar'],
			'dashboard_price_apr' => $data['rsl_nuggets_prev_year2_apr'],
			'dashboard_price_may' => $data['rsl_nuggets_prev_year2_may'],
			'dashboard_price_june' => $data['rsl_nuggets_prev_year2_jun'],
			'dashboard_price_july' => $data['rsl_nuggets_prev_year2_jul'],
			'dashboard_price_aug' => $data['rsl_nuggets_prev_year2_aug'],
			'dashboard_price_sep' => $data['rsl_nuggets_prev_year2_sep'],
			'dashboard_price_oct' => $data['rsl_nuggets_prev_year2_oct'],
			'dashboard_price_nov' => $data['rsl_nuggets_prev_year2_nov'],
			'dashboard_price_dec' => $data['rsl_nuggets_prev_year2_dec'],
			'dashboard_price_min' => $data['rsl_nuggets_prev_year2_min'],
			'dashboard_price_max' => $data['rsl_nuggets_prev_year2_max'],
			'dashboard_price_avg' => $data['rsl_nuggets_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$rsl_nuggets_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'VAP-Nuggets', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_nuggets_prev_year1_jan'] = 0;
		$data['rsl_nuggets_prev_year1_feb'] = 0;
		$data['rsl_nuggets_prev_year1_mar'] = 0;
		$data['rsl_nuggets_prev_year1_apr'] = 0;
		$data['rsl_nuggets_prev_year1_may'] = 0;
		$data['rsl_nuggets_prev_year1_jun'] = 0;
		$data['rsl_nuggets_prev_year1_jul'] = 0;
		$data['rsl_nuggets_prev_year1_aug'] = 0;
		$data['rsl_nuggets_prev_year1_sep'] = 0;
		$data['rsl_nuggets_prev_year1_oct'] = 0;
		$data['rsl_nuggets_prev_year1_nov'] = 0;
		$data['rsl_nuggets_prev_year1_dec'] = 0;
		$data['rsl_nuggets_prev_year1_avg'] = 0;
		$data['rsl_nuggets_prev_year1_min'] = 0;
		$data['rsl_nuggets_prev_year1_max'] = 0;

		foreach($rsl_nuggets_prev_year1 as $row){
			$data['rsl_nuggets_prev_year1_jan'] = $row->jan_price;
			$data['rsl_nuggets_prev_year1_feb'] = $row->feb_price;
			$data['rsl_nuggets_prev_year1_mar'] = $row->mar_price;
			$data['rsl_nuggets_prev_year1_apr'] = $row->apr_price;
			$data['rsl_nuggets_prev_year1_may'] = $row->may_price;
			$data['rsl_nuggets_prev_year1_jun'] = $row->jun_price;
			$data['rsl_nuggets_prev_year1_jul'] = $row->jul_price;
			$data['rsl_nuggets_prev_year1_aug'] = $row->aug_price;
			$data['rsl_nuggets_prev_year1_sep'] = $row->sep_price;
			$data['rsl_nuggets_prev_year1_oct'] = $row->oct_price;
			$data['rsl_nuggets_prev_year1_nov'] = $row->nov_price;
			$data['rsl_nuggets_prev_year1_dec'] = $row->dec_price;
			$data['rsl_nuggets_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_nuggets_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_nuggets_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'VAP-NUGGETS',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['rsl_nuggets_prev_year1_jan'],
			'dashboard_price_feb' => $data['rsl_nuggets_prev_year1_feb'],
			'dashboard_price_mar' => $data['rsl_nuggets_prev_year1_mar'],
			'dashboard_price_apr' => $data['rsl_nuggets_prev_year1_apr'],
			'dashboard_price_may' => $data['rsl_nuggets_prev_year1_may'],
			'dashboard_price_june' => $data['rsl_nuggets_prev_year1_jun'],
			'dashboard_price_july' => $data['rsl_nuggets_prev_year1_jul'],
			'dashboard_price_aug' => $data['rsl_nuggets_prev_year1_aug'],
			'dashboard_price_sep' => $data['rsl_nuggets_prev_year1_sep'],
			'dashboard_price_oct' => $data['rsl_nuggets_prev_year1_oct'],
			'dashboard_price_nov' => $data['rsl_nuggets_prev_year1_nov'],
			'dashboard_price_dec' => $data['rsl_nuggets_prev_year1_dec'],
			'dashboard_price_min' => $data['rsl_nuggets_prev_year1_min'],
			'dashboard_price_max' => $data['rsl_nuggets_prev_year1_max'],
			'dashboard_price_avg' => $data['rsl_nuggets_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'VAP-NUGGETS',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['rsl_nuggets1'],
			'dashboard_price_feb' => $data['rsl_nuggets2'],
			'dashboard_price_mar' => $data['rsl_nuggets3'],
			'dashboard_price_apr' => $data['rsl_nuggets4'],
			'dashboard_price_may' => $data['rsl_nuggets5'],
			'dashboard_price_june' => $data['rsl_nuggets6'],
			'dashboard_price_july' => $data['rsl_nuggets7'],
			'dashboard_price_aug' => $data['rsl_nuggets8'],
			'dashboard_price_sep' => $data['rsl_nuggets9'],
			'dashboard_price_oct' => $data['rsl_nuggets10'],
			'dashboard_price_nov' => $data['rsl_nuggets11'],
			'dashboard_price_dec' => $data['rsl_nuggets12'],
			'dashboard_price_min' => $data['rsl_nuggets_min'],
			'dashboard_price_max' => $data['rsl_nuggets_max'],
			'dashboard_price_avg' => $data['rsl_nuggets_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		/*UR 11 PC PICA PICA CUTS*/

		$join_rsl_pica = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code IN (10400170, 10200089)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_pica = $this->admin->get_join('sales_tbl a', $join_rsl_pica, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_pica1'] = 0;
		$data['rsl_pica2'] = 0;
		$data['rsl_pica3'] = 0;
		$data['rsl_pica4'] = 0;
		$data['rsl_pica5'] = 0;
		$data['rsl_pica6'] = 0;
		$data['rsl_pica7'] = 0;
		$data['rsl_pica8'] = 0;
		$data['rsl_pica9'] = 0;
		$data['rsl_pica10'] = 0;
		$data['rsl_pica11'] = 0;
		$data['rsl_pica12'] = 0;
		$data['rsl_pica_total'] = 0;
		$data['rsl_pica_count'] = 0;
		$data['rsl_pica_avg'] = 0;
		$data['rsl_pica_min'] = 0;
		$data['rsl_pica_max'] = 0;

		foreach($get_rsl_pica as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_pica' . $month] = $asp;
			$data['rsl_pica_total'] += $asp;

			if($asp < $data['rsl_pica_min'] || $data['rsl_pica_count'] == 0){
				$data['rsl_pica_min'] = $asp;
			}

			if($asp > $data['rsl_pica_max'] || $data['rsl_pica_count'] == 0){
				$data['rsl_pica_max'] = $asp;
			}

			$data['rsl_pica_count']++;
		}

		$data['rsl_pica_avg'] = $data['rsl_pica_total'] != 0 ? $data['rsl_pica_total'] / $data['rsl_pica_count'] : 0;


		$rsl_pica_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_pica_prev_year2_jan'] = 0;
		$data['rsl_pica_prev_year2_feb'] = 0;
		$data['rsl_pica_prev_year2_mar'] = 0;
		$data['rsl_pica_prev_year2_apr'] = 0;
		$data['rsl_pica_prev_year2_may'] = 0;
		$data['rsl_pica_prev_year2_jun'] = 0;
		$data['rsl_pica_prev_year2_jul'] = 0;
		$data['rsl_pica_prev_year2_aug'] = 0;
		$data['rsl_pica_prev_year2_sep'] = 0;
		$data['rsl_pica_prev_year2_oct'] = 0;
		$data['rsl_pica_prev_year2_nov'] = 0;
		$data['rsl_pica_prev_year2_dec'] = 0;
		$data['rsl_pica_prev_year2_avg'] = 0;
		$data['rsl_pica_prev_year2_min'] = 0;
		$data['rsl_pica_prev_year2_max'] = 0;

		foreach($rsl_pica_prev_year2 as $row){
			$data['rsl_pica_prev_year2_jan'] = $row->jan_price;
			$data['rsl_pica_prev_year2_feb'] = $row->feb_price;
			$data['rsl_pica_prev_year2_mar'] = $row->mar_price;
			$data['rsl_pica_prev_year2_apr'] = $row->apr_price;
			$data['rsl_pica_prev_year2_may'] = $row->may_price;
			$data['rsl_pica_prev_year2_jun'] = $row->jun_price;
			$data['rsl_pica_prev_year2_jul'] = $row->jul_price;
			$data['rsl_pica_prev_year2_aug'] = $row->aug_price;
			$data['rsl_pica_prev_year2_sep'] = $row->sep_price;
			$data['rsl_pica_prev_year2_oct'] = $row->oct_price;
			$data['rsl_pica_prev_year2_nov'] = $row->nov_price;
			$data['rsl_pica_prev_year2_dec'] = $row->dec_price;
			$data['rsl_pica_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_pica_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_pica_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => '11 PC',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['rsl_pica_prev_year2_jan'],
			'dashboard_price_feb' => $data['rsl_pica_prev_year2_feb'],
			'dashboard_price_mar' => $data['rsl_pica_prev_year2_mar'],
			'dashboard_price_apr' => $data['rsl_pica_prev_year2_apr'],
			'dashboard_price_may' => $data['rsl_pica_prev_year2_may'],
			'dashboard_price_june' => $data['rsl_pica_prev_year2_jun'],
			'dashboard_price_july' => $data['rsl_pica_prev_year2_jul'],
			'dashboard_price_aug' => $data['rsl_pica_prev_year2_aug'],
			'dashboard_price_sep' => $data['rsl_pica_prev_year2_sep'],
			'dashboard_price_oct' => $data['rsl_pica_prev_year2_oct'],
			'dashboard_price_nov' => $data['rsl_pica_prev_year2_nov'],
			'dashboard_price_dec' => $data['rsl_pica_prev_year2_dec'],
			'dashboard_price_min' => $data['rsl_pica_prev_year2_min'],
			'dashboard_price_max' => $data['rsl_pica_prev_year2_max'],
			'dashboard_price_avg' => $data['rsl_pica_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$rsl_pica_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '11 PC', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_pica_prev_year1_jan'] = 0;
		$data['rsl_pica_prev_year1_feb'] = 0;
		$data['rsl_pica_prev_year1_mar'] = 0;
		$data['rsl_pica_prev_year1_apr'] = 0;
		$data['rsl_pica_prev_year1_may'] = 0;
		$data['rsl_pica_prev_year1_jun'] = 0;
		$data['rsl_pica_prev_year1_jul'] = 0;
		$data['rsl_pica_prev_year1_aug'] = 0;
		$data['rsl_pica_prev_year1_sep'] = 0;
		$data['rsl_pica_prev_year1_oct'] = 0;
		$data['rsl_pica_prev_year1_nov'] = 0;
		$data['rsl_pica_prev_year1_dec'] = 0;
		$data['rsl_pica_prev_year1_avg'] = 0;
		$data['rsl_pica_prev_year1_min'] = 0;
		$data['rsl_pica_prev_year1_max'] = 0;

		foreach($rsl_pica_prev_year1 as $row){
			$data['rsl_pica_prev_year1_jan'] = $row->jan_price;
			$data['rsl_pica_prev_year1_feb'] = $row->feb_price;
			$data['rsl_pica_prev_year1_mar'] = $row->mar_price;
			$data['rsl_pica_prev_year1_apr'] = $row->apr_price;
			$data['rsl_pica_prev_year1_may'] = $row->may_price;
			$data['rsl_pica_prev_year1_jun'] = $row->jun_price;
			$data['rsl_pica_prev_year1_jul'] = $row->jul_price;
			$data['rsl_pica_prev_year1_aug'] = $row->aug_price;
			$data['rsl_pica_prev_year1_sep'] = $row->sep_price;
			$data['rsl_pica_prev_year1_oct'] = $row->oct_price;
			$data['rsl_pica_prev_year1_nov'] = $row->nov_price;
			$data['rsl_pica_prev_year1_dec'] = $row->dec_price;
			$data['rsl_pica_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_pica_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_pica_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => '11 PC',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['rsl_pica_prev_year1_jan'],
			'dashboard_price_feb' => $data['rsl_pica_prev_year1_feb'],
			'dashboard_price_mar' => $data['rsl_pica_prev_year1_mar'],
			'dashboard_price_apr' => $data['rsl_pica_prev_year1_apr'],
			'dashboard_price_may' => $data['rsl_pica_prev_year1_may'],
			'dashboard_price_june' => $data['rsl_pica_prev_year1_jun'],
			'dashboard_price_july' => $data['rsl_pica_prev_year1_jul'],
			'dashboard_price_aug' => $data['rsl_pica_prev_year1_aug'],
			'dashboard_price_sep' => $data['rsl_pica_prev_year1_sep'],
			'dashboard_price_oct' => $data['rsl_pica_prev_year1_oct'],
			'dashboard_price_nov' => $data['rsl_pica_prev_year1_nov'],
			'dashboard_price_dec' => $data['rsl_pica_prev_year1_dec'],
			'dashboard_price_min' => $data['rsl_pica_prev_year1_min'],
			'dashboard_price_max' => $data['rsl_pica_prev_year1_max'],
			'dashboard_price_avg' => $data['rsl_pica_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => '11 PC',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['rsl_pica1'],
			'dashboard_price_feb' => $data['rsl_pica2'],
			'dashboard_price_mar' => $data['rsl_pica3'],
			'dashboard_price_apr' => $data['rsl_pica4'],
			'dashboard_price_may' => $data['rsl_pica5'],
			'dashboard_price_june' => $data['rsl_pica6'],
			'dashboard_price_july' => $data['rsl_pica7'],
			'dashboard_price_aug' => $data['rsl_pica8'],
			'dashboard_price_sep' => $data['rsl_pica9'],
			'dashboard_price_oct' => $data['rsl_pica10'],
			'dashboard_price_nov' => $data['rsl_pica11'],
			'dashboard_price_dec' => $data['rsl_pica12'],
			'dashboard_price_min' => $data['rsl_pica_min'],
			'dashboard_price_max' => $data['rsl_pica_max'],
			'dashboard_price_avg' => $data['rsl_pica_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*RSL 1 PC BOSSING CUTS */
		
		$join_rsl_bossing = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code IN (10400836)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_bossing = $this->admin->get_join('sales_tbl a', $join_rsl_bossing, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_bossing1'] = 0;
		$data['rsl_bossing2'] = 0;
		$data['rsl_bossing3'] = 0;
		$data['rsl_bossing4'] = 0;
		$data['rsl_bossing5'] = 0;
		$data['rsl_bossing6'] = 0;
		$data['rsl_bossing7'] = 0;
		$data['rsl_bossing8'] = 0;
		$data['rsl_bossing9'] = 0;
		$data['rsl_bossing10'] = 0;
		$data['rsl_bossing11'] = 0;
		$data['rsl_bossing12'] = 0;
		$data['rsl_bossing_total'] = 0;
		$data['rsl_bossing_count'] = 0;
		$data['rsl_bossing_avg'] = 0;
		$data['rsl_bossing_min'] = 0;
		$data['rsl_bossing_max'] = 0;

		foreach($get_rsl_bossing as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_bossing' . $month] = $asp;
			$data['rsl_bossing_total'] += $asp;

			if($asp < $data['rsl_bossing_min'] || $data['rsl_bossing_count'] == 0){
				$data['rsl_bossing_min'] = $asp;
			}

			if($asp > $data['rsl_bossing_max'] || $data['rsl_bossing_count'] == 0){
				$data['rsl_bossing_max'] = $asp;
			}

			$data['rsl_bossing_count']++;
		}

		$data['rsl_bossing_avg'] = $data['rsl_bossing_total'] != 0 ? $data['rsl_bossing_total'] / $data['rsl_bossing_count'] : 0;


		$rsl_bossing_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '1 PC', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

		
		$data['rsl_bossing_prev_year2_jan'] = 0;
		$data['rsl_bossing_prev_year2_feb'] = 0;
		$data['rsl_bossing_prev_year2_mar'] = 0;
		$data['rsl_bossing_prev_year2_apr'] = 0;
		$data['rsl_bossing_prev_year2_may'] = 0;
		$data['rsl_bossing_prev_year2_jun'] = 0;
		$data['rsl_bossing_prev_year2_jul'] = 0;
		$data['rsl_bossing_prev_year2_aug'] = 0;
		$data['rsl_bossing_prev_year2_sep'] = 0;
		$data['rsl_bossing_prev_year2_oct'] = 0;
		$data['rsl_bossing_prev_year2_nov'] = 0;
		$data['rsl_bossing_prev_year2_dec'] = 0;
		$data['rsl_bossing_prev_year2_avg'] = 0;
		$data['rsl_bossing_prev_year2_min'] = 0;
		$data['rsl_bossing_prev_year2_max'] = 0;



		foreach($rsl_bossing_prev_year2 as $row){
			$data['rsl_bossing_prev_year2_jan'] = $row->jan_price;
			$data['rsl_bossing_prev_year2_feb'] = $row->feb_price;
			$data['rsl_bossing_prev_year2_mar'] = $row->mar_price;
			$data['rsl_bossing_prev_year2_apr'] = $row->apr_price;
			$data['rsl_bossing_prev_year2_may'] = $row->may_price;
			$data['rsl_bossing_prev_year2_jun'] = $row->jun_price;
			$data['rsl_bossing_prev_year2_jul'] = $row->jul_price;
			$data['rsl_bossing_prev_year2_aug'] = $row->aug_price;
			$data['rsl_bossing_prev_year2_sep'] = $row->sep_price;
			$data['rsl_bossing_prev_year2_oct'] = $row->oct_price;
			$data['rsl_bossing_prev_year2_nov'] = $row->nov_price;
			$data['rsl_bossing_prev_year2_dec'] = $row->dec_price;
			$data['rsl_bossing_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_bossing_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_bossing_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => '1 PC',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['rsl_bossing_prev_year2_jan'],
			'dashboard_price_feb' => $data['rsl_bossing_prev_year2_feb'],
			'dashboard_price_mar' => $data['rsl_bossing_prev_year2_mar'],
			'dashboard_price_apr' => $data['rsl_bossing_prev_year2_apr'],
			'dashboard_price_may' => $data['rsl_bossing_prev_year2_may'],
			'dashboard_price_june' => $data['rsl_bossing_prev_year2_jun'],
			'dashboard_price_july' => $data['rsl_bossing_prev_year2_jul'],
			'dashboard_price_aug' => $data['rsl_bossing_prev_year2_aug'],
			'dashboard_price_sep' => $data['rsl_bossing_prev_year2_sep'],
			'dashboard_price_oct' => $data['rsl_bossing_prev_year2_oct'],
			'dashboard_price_nov' => $data['rsl_bossing_prev_year2_nov'],
			'dashboard_price_dec' => $data['rsl_bossing_prev_year2_dec'],
			'dashboard_price_min' => $data['rsl_bossing_prev_year2_min'],
			'dashboard_price_max' => $data['rsl_bossing_prev_year2_max'],
			'dashboard_price_avg' => $data['rsl_bossing_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$rsl_bossing_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '1 PC', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_bossing_prev_year1_jan'] = 0;
		$data['rsl_bossing_prev_year1_feb'] = 0;
		$data['rsl_bossing_prev_year1_mar'] = 0;
		$data['rsl_bossing_prev_year1_apr'] = 0;
		$data['rsl_bossing_prev_year1_may'] = 0;
		$data['rsl_bossing_prev_year1_jun'] = 0;
		$data['rsl_bossing_prev_year1_jul'] = 0;
		$data['rsl_bossing_prev_year1_aug'] = 0;
		$data['rsl_bossing_prev_year1_sep'] = 0;
		$data['rsl_bossing_prev_year1_oct'] = 0;
		$data['rsl_bossing_prev_year1_nov'] = 0;
		$data['rsl_bossing_prev_year1_dec'] = 0;
		$data['rsl_bossing_prev_year1_avg'] = 0;
		$data['rsl_bossing_prev_year1_min'] = 0;
		$data['rsl_bossing_prev_year1_max'] = 0;

		foreach($rsl_bossing_prev_year1 as $row){
			$data['rsl_bossing_prev_year1_jan'] = $row->jan_price;
			$data['rsl_bossing_prev_year1_feb'] = $row->feb_price;
			$data['rsl_bossing_prev_year1_mar'] = $row->mar_price;
			$data['rsl_bossing_prev_year1_apr'] = $row->apr_price;
			$data['rsl_bossing_prev_year1_may'] = $row->may_price;
			$data['rsl_bossing_prev_year1_jun'] = $row->jun_price;
			$data['rsl_bossing_prev_year1_jul'] = $row->jul_price;
			$data['rsl_bossing_prev_year1_aug'] = $row->aug_price;
			$data['rsl_bossing_prev_year1_sep'] = $row->sep_price;
			$data['rsl_bossing_prev_year1_oct'] = $row->oct_price;
			$data['rsl_bossing_prev_year1_nov'] = $row->nov_price;
			$data['rsl_bossing_prev_year1_dec'] = $row->dec_price;
			$data['rsl_bossing_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_bossing_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_bossing_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => '1 PC',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['rsl_bossing_prev_year1_jan'],
			'dashboard_price_feb' => $data['rsl_bossing_prev_year1_feb'],
			'dashboard_price_mar' => $data['rsl_bossing_prev_year1_mar'],
			'dashboard_price_apr' => $data['rsl_bossing_prev_year1_apr'],
			'dashboard_price_may' => $data['rsl_bossing_prev_year1_may'],
			'dashboard_price_june' => $data['rsl_bossing_prev_year1_jun'],
			'dashboard_price_july' => $data['rsl_bossing_prev_year1_jul'],
			'dashboard_price_aug' => $data['rsl_bossing_prev_year1_aug'],
			'dashboard_price_sep' => $data['rsl_bossing_prev_year1_sep'],
			'dashboard_price_oct' => $data['rsl_bossing_prev_year1_oct'],
			'dashboard_price_nov' => $data['rsl_bossing_prev_year1_nov'],
			'dashboard_price_dec' => $data['rsl_bossing_prev_year1_dec'],
			'dashboard_price_min' => $data['rsl_bossing_prev_year1_min'],
			'dashboard_price_max' => $data['rsl_bossing_prev_year1_max'],
			'dashboard_price_avg' => $data['rsl_bossing_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => '1 PC',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['rsl_bossing1'],
			'dashboard_price_feb' => $data['rsl_bossing2'],
			'dashboard_price_mar' => $data['rsl_bossing3'],
			'dashboard_price_apr' => $data['rsl_bossing4'],
			'dashboard_price_may' => $data['rsl_bossing5'],
			'dashboard_price_june' => $data['rsl_bossing6'],
			'dashboard_price_july' => $data['rsl_bossing7'],
			'dashboard_price_aug' => $data['rsl_bossing8'],
			'dashboard_price_sep' => $data['rsl_bossing9'],
			'dashboard_price_oct' => $data['rsl_bossing10'],
			'dashboard_price_nov' => $data['rsl_bossing11'],
			'dashboard_price_dec' => $data['rsl_bossing12'],
			'dashboard_price_min' => $data['rsl_bossing_min'],
			'dashboard_price_max' => $data['rsl_bossing_max'],
			'dashboard_price_avg' => $data['rsl_bossing_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*Reseller Marinated Raw*/

		$join_rsl_raw = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'MARINATED CHICKEN (RAW)\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_raw = $this->admin->get_join('sales_tbl a', $join_rsl_raw, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_raw1'] = 0;
		$data['rsl_raw2'] = 0;
		$data['rsl_raw3'] = 0;
		$data['rsl_raw4'] = 0;
		$data['rsl_raw5'] = 0;
		$data['rsl_raw6'] = 0;
		$data['rsl_raw7'] = 0;
		$data['rsl_raw8'] = 0;
		$data['rsl_raw9'] = 0;
		$data['rsl_raw10'] = 0;
		$data['rsl_raw11'] = 0;
		$data['rsl_raw12'] = 0;
		$data['rsl_raw_total'] = 0;
		$data['rsl_raw_count'] = 0;
		$data['rsl_raw_avg'] = 0;
		$data['rsl_raw_min'] = 0;
		$data['rsl_raw_max'] = 0;

		foreach($get_rsl_raw as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_raw' . $month] = $asp;
			$data['rsl_raw_total'] += $asp;

			if($asp < $data['rsl_raw_min'] || $data['rsl_raw_count'] == 0){
				$data['rsl_raw_min'] = $asp;
			}

			if($asp > $data['rsl_raw_max'] || $data['rsl_raw_count'] == 0){
				$data['rsl_raw_max'] = $asp;
			}

			$data['rsl_raw_count']++;
		}

		$data['rsl_raw_avg'] = $data['rsl_raw_total'] != 0 ? $data['rsl_raw_total'] / $data['rsl_raw_count'] : 0;


		$rsl_raw_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINATED CHICKEN RAW', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_raw_prev_year2_jan'] = 0;
		$data['rsl_raw_prev_year2_feb'] = 0;
		$data['rsl_raw_prev_year2_mar'] = 0;
		$data['rsl_raw_prev_year2_apr'] = 0;
		$data['rsl_raw_prev_year2_may'] = 0;
		$data['rsl_raw_prev_year2_jun'] = 0;
		$data['rsl_raw_prev_year2_jul'] = 0;
		$data['rsl_raw_prev_year2_aug'] = 0;
		$data['rsl_raw_prev_year2_sep'] = 0;
		$data['rsl_raw_prev_year2_oct'] = 0;
		$data['rsl_raw_prev_year2_nov'] = 0;
		$data['rsl_raw_prev_year2_dec'] = 0;
		$data['rsl_raw_prev_year2_avg'] = 0;
		$data['rsl_raw_prev_year2_min'] = 0;
		$data['rsl_raw_prev_year2_max'] = 0;

		foreach($rsl_raw_prev_year2 as $row){
			$data['rsl_raw_prev_year2_jan'] = $row->jan_price;
			$data['rsl_raw_prev_year2_feb'] = $row->feb_price;
			$data['rsl_raw_prev_year2_mar'] = $row->mar_price;
			$data['rsl_raw_prev_year2_apr'] = $row->apr_price;
			$data['rsl_raw_prev_year2_may'] = $row->may_price;
			$data['rsl_raw_prev_year2_jun'] = $row->jun_price;
			$data['rsl_raw_prev_year2_jul'] = $row->jul_price;
			$data['rsl_raw_prev_year2_aug'] = $row->aug_price;
			$data['rsl_raw_prev_year2_sep'] = $row->sep_price;
			$data['rsl_raw_prev_year2_oct'] = $row->oct_price;
			$data['rsl_raw_prev_year2_nov'] = $row->nov_price;
			$data['rsl_raw_prev_year2_dec'] = $row->dec_price;
			$data['rsl_raw_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_raw_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_raw_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'MARINATED CHICKEN RAW',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['rsl_raw_prev_year2_jan'],
			'dashboard_price_feb' => $data['rsl_raw_prev_year2_feb'],
			'dashboard_price_mar' => $data['rsl_raw_prev_year2_mar'],
			'dashboard_price_apr' => $data['rsl_raw_prev_year2_apr'],
			'dashboard_price_may' => $data['rsl_raw_prev_year2_may'],
			'dashboard_price_june' => $data['rsl_raw_prev_year2_jun'],
			'dashboard_price_july' => $data['rsl_raw_prev_year2_jul'],
			'dashboard_price_aug' => $data['rsl_raw_prev_year2_aug'],
			'dashboard_price_sep' => $data['rsl_raw_prev_year2_sep'],
			'dashboard_price_oct' => $data['rsl_raw_prev_year2_oct'],
			'dashboard_price_nov' => $data['rsl_raw_prev_year2_nov'],
			'dashboard_price_dec' => $data['rsl_raw_prev_year2_dec'],
			'dashboard_price_min' => $data['rsl_raw_prev_year2_min'],
			'dashboard_price_max' => $data['rsl_raw_prev_year2_max'],
			'dashboard_price_avg' => $data['rsl_raw_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$rsl_raw_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'MARINATED CHICKEN RAW', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_raw_prev_year1_jan'] = 0;
		$data['rsl_raw_prev_year1_feb'] = 0;
		$data['rsl_raw_prev_year1_mar'] = 0;
		$data['rsl_raw_prev_year1_apr'] = 0;
		$data['rsl_raw_prev_year1_may'] = 0;
		$data['rsl_raw_prev_year1_jun'] = 0;
		$data['rsl_raw_prev_year1_jul'] = 0;
		$data['rsl_raw_prev_year1_aug'] = 0;
		$data['rsl_raw_prev_year1_sep'] = 0;
		$data['rsl_raw_prev_year1_oct'] = 0;
		$data['rsl_raw_prev_year1_nov'] = 0;
		$data['rsl_raw_prev_year1_dec'] = 0;
		$data['rsl_raw_prev_year1_avg'] = 0;
		$data['rsl_raw_prev_year1_min'] = 0;
		$data['rsl_raw_prev_year1_max'] = 0;

		foreach($rsl_raw_prev_year1 as $row){
			$data['rsl_raw_prev_year1_jan'] = $row->jan_price;
			$data['rsl_raw_prev_year1_feb'] = $row->feb_price;
			$data['rsl_raw_prev_year1_mar'] = $row->mar_price;
			$data['rsl_raw_prev_year1_apr'] = $row->apr_price;
			$data['rsl_raw_prev_year1_may'] = $row->may_price;
			$data['rsl_raw_prev_year1_jun'] = $row->jun_price;
			$data['rsl_raw_prev_year1_jul'] = $row->jul_price;
			$data['rsl_raw_prev_year1_aug'] = $row->aug_price;
			$data['rsl_raw_prev_year1_sep'] = $row->sep_price;
			$data['rsl_raw_prev_year1_oct'] = $row->oct_price;
			$data['rsl_raw_prev_year1_nov'] = $row->nov_price;
			$data['rsl_raw_prev_year1_dec'] = $row->dec_price;
			$data['rsl_raw_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_raw_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_raw_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'MARINATED CHICKEN RAW',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['rsl_raw_prev_year1_jan'],
			'dashboard_price_feb' => $data['rsl_raw_prev_year1_feb'],
			'dashboard_price_mar' => $data['rsl_raw_prev_year1_mar'],
			'dashboard_price_apr' => $data['rsl_raw_prev_year1_apr'],
			'dashboard_price_may' => $data['rsl_raw_prev_year1_may'],
			'dashboard_price_june' => $data['rsl_raw_prev_year1_jun'],
			'dashboard_price_july' => $data['rsl_raw_prev_year1_jul'],
			'dashboard_price_aug' => $data['rsl_raw_prev_year1_aug'],
			'dashboard_price_sep' => $data['rsl_raw_prev_year1_sep'],
			'dashboard_price_oct' => $data['rsl_raw_prev_year1_oct'],
			'dashboard_price_nov' => $data['rsl_raw_prev_year1_nov'],
			'dashboard_price_dec' => $data['rsl_raw_prev_year1_dec'],
			'dashboard_price_min' => $data['rsl_raw_prev_year1_min'],
			'dashboard_price_max' => $data['rsl_raw_prev_year1_max'],
			'dashboard_price_avg' => $data['rsl_raw_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'MARINATED CHICKEN RAW',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['rsl_raw1'],
			'dashboard_price_feb' => $data['rsl_raw2'],
			'dashboard_price_mar' => $data['rsl_raw3'],
			'dashboard_price_apr' => $data['rsl_raw4'],
			'dashboard_price_may' => $data['rsl_raw5'],
			'dashboard_price_june' => $data['rsl_raw6'],
			'dashboard_price_july' => $data['rsl_raw7'],
			'dashboard_price_aug' => $data['rsl_raw8'],
			'dashboard_price_sep' => $data['rsl_raw9'],
			'dashboard_price_oct' => $data['rsl_raw10'],
			'dashboard_price_nov' => $data['rsl_raw11'],
			'dashboard_price_dec' => $data['rsl_raw12'],
			'dashboard_price_min' => $data['rsl_raw_min'],
			'dashboard_price_max' => $data['rsl_raw_max'],
			'dashboard_price_avg' => $data['rsl_raw_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*Reseller Chooksies Cut ups*/

		$join_rsl_cutups = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code = 10000150',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'NON MARINATED CUT UPS\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_cutups = $this->admin->get_join('sales_tbl a', $join_rsl_cutups, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_cutups1'] = 0;
		$data['rsl_cutups2'] = 0;
		$data['rsl_cutups3'] = 0;
		$data['rsl_cutups4'] = 0;
		$data['rsl_cutups5'] = 0;
		$data['rsl_cutups6'] = 0;
		$data['rsl_cutups7'] = 0;
		$data['rsl_cutups8'] = 0;
		$data['rsl_cutups9'] = 0;
		$data['rsl_cutups10'] = 0;
		$data['rsl_cutups11'] = 0;
		$data['rsl_cutups12'] = 0;
		$data['rsl_cutups_total'] = 0;
		$data['rsl_cutups_count'] = 0;
		$data['rsl_cutups_avg'] = 0;
		$data['rsl_cutups_min'] = 0;
		$data['rsl_cutups_max'] = 0;

		foreach($get_rsl_cutups as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_cutups' . $month] = $asp;
			if($asp > 0){
				$data['rsl_cutups_total'] += $asp;
				$data['rsl_cutups_count']++;

				if($asp < $data['rsl_cutups_min'] || $data['rsl_cutups_count'] == 0){
					$data['rsl_cutups_min'] = $asp;
				}

				if($asp > $data['rsl_cutups_max'] || $data['rsl_cutups_count'] == 0){
					$data['rsl_cutups_max'] = $asp;
				}
			}
		}

		$data['rsl_cutups_avg'] = $data['rsl_cutups_total'] != 0 ? $data['rsl_cutups_total'] / $data['rsl_cutups_count'] : 0;

		$rsl_cutups_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES CUT UPS', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_cutups_prev_year2_jan'] = 0;
		$data['rsl_cutups_prev_year2_feb'] = 0;
		$data['rsl_cutups_prev_year2_mar'] = 0;
		$data['rsl_cutups_prev_year2_apr'] = 0;
		$data['rsl_cutups_prev_year2_may'] = 0;
		$data['rsl_cutups_prev_year2_jun'] = 0;
		$data['rsl_cutups_prev_year2_jul'] = 0;
		$data['rsl_cutups_prev_year2_aug'] = 0;
		$data['rsl_cutups_prev_year2_sep'] = 0;
		$data['rsl_cutups_prev_year2_oct'] = 0;
		$data['rsl_cutups_prev_year2_nov'] = 0;
		$data['rsl_cutups_prev_year2_dec'] = 0;
		$data['rsl_cutups_prev_year2_avg'] = 0;
		$data['rsl_cutups_prev_year2_min'] = 0;
		$data['rsl_cutups_prev_year2_max'] = 0;

		foreach($rsl_cutups_prev_year2 as $row){
			$data['rsl_cutups_prev_year2_jan'] = $row->jan_price;
			$data['rsl_cutups_prev_year2_feb'] = $row->feb_price;
			$data['rsl_cutups_prev_year2_mar'] = $row->mar_price;
			$data['rsl_cutups_prev_year2_apr'] = $row->apr_price;
			$data['rsl_cutups_prev_year2_may'] = $row->may_price;
			$data['rsl_cutups_prev_year2_jun'] = $row->jun_price;
			$data['rsl_cutups_prev_year2_jul'] = $row->jul_price;
			$data['rsl_cutups_prev_year2_aug'] = $row->aug_price;
			$data['rsl_cutups_prev_year2_sep'] = $row->sep_price;
			$data['rsl_cutups_prev_year2_oct'] = $row->oct_price;
			$data['rsl_cutups_prev_year2_nov'] = $row->nov_price;
			$data['rsl_cutups_prev_year2_dec'] = $row->dec_price;
			$data['rsl_cutups_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_cutups_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_cutups_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'CHOOKSIES CUT UPS',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['rsl_cutups_prev_year2_jan'],
			'dashboard_price_feb' => $data['rsl_cutups_prev_year2_feb'],
			'dashboard_price_mar' => $data['rsl_cutups_prev_year2_mar'],
			'dashboard_price_apr' => $data['rsl_cutups_prev_year2_apr'],
			'dashboard_price_may' => $data['rsl_cutups_prev_year2_may'],
			'dashboard_price_june' => $data['rsl_cutups_prev_year2_jun'],
			'dashboard_price_july' => $data['rsl_cutups_prev_year2_jul'],
			'dashboard_price_aug' => $data['rsl_cutups_prev_year2_aug'],
			'dashboard_price_sep' => $data['rsl_cutups_prev_year2_sep'],
			'dashboard_price_oct' => $data['rsl_cutups_prev_year2_oct'],
			'dashboard_price_nov' => $data['rsl_cutups_prev_year2_nov'],
			'dashboard_price_dec' => $data['rsl_cutups_prev_year2_dec'],
			'dashboard_price_min' => $data['rsl_cutups_prev_year2_min'],
			'dashboard_price_max' => $data['rsl_cutups_prev_year2_max'],
			'dashboard_price_avg' => $data['rsl_cutups_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		$rsl_cutups_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'CHOOKSIES CUT UPS', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_cutups_prev_year1_jan'] = 0;
		$data['rsl_cutups_prev_year1_feb'] = 0;
		$data['rsl_cutups_prev_year1_mar'] = 0;
		$data['rsl_cutups_prev_year1_apr'] = 0;
		$data['rsl_cutups_prev_year1_may'] = 0;
		$data['rsl_cutups_prev_year1_jun'] = 0;
		$data['rsl_cutups_prev_year1_jul'] = 0;
		$data['rsl_cutups_prev_year1_aug'] = 0;
		$data['rsl_cutups_prev_year1_sep'] = 0;
		$data['rsl_cutups_prev_year1_oct'] = 0;
		$data['rsl_cutups_prev_year1_nov'] = 0;
		$data['rsl_cutups_prev_year1_dec'] = 0;
		$data['rsl_cutups_prev_year1_avg'] = 0;
		$data['rsl_cutups_prev_year1_min'] = 0;
		$data['rsl_cutups_prev_year1_max'] = 0;

		foreach($rsl_cutups_prev_year1 as $row){
			$data['rsl_cutups_prev_year1_jan'] = $row->jan_price;
			$data['rsl_cutups_prev_year1_feb'] = $row->feb_price;
			$data['rsl_cutups_prev_year1_mar'] = $row->mar_price;
			$data['rsl_cutups_prev_year1_apr'] = $row->apr_price;
			$data['rsl_cutups_prev_year1_may'] = $row->may_price;
			$data['rsl_cutups_prev_year1_jun'] = $row->jun_price;
			$data['rsl_cutups_prev_year1_jul'] = $row->jul_price;
			$data['rsl_cutups_prev_year1_aug'] = $row->aug_price;
			$data['rsl_cutups_prev_year1_sep'] = $row->sep_price;
			$data['rsl_cutups_prev_year1_oct'] = $row->oct_price;
			$data['rsl_cutups_prev_year1_nov'] = $row->nov_price;
			$data['rsl_cutups_prev_year1_dec'] = $row->dec_price;
			$data['rsl_cutups_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_cutups_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_cutups_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'CHOOKSIES CUT UPS',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['rsl_cutups_prev_year1_jan'],
			'dashboard_price_feb' => $data['rsl_cutups_prev_year1_feb'],
			'dashboard_price_mar' => $data['rsl_cutups_prev_year1_mar'],
			'dashboard_price_apr' => $data['rsl_cutups_prev_year1_apr'],
			'dashboard_price_may' => $data['rsl_cutups_prev_year1_may'],
			'dashboard_price_june' => $data['rsl_cutups_prev_year1_jun'],
			'dashboard_price_july' => $data['rsl_cutups_prev_year1_jul'],
			'dashboard_price_aug' => $data['rsl_cutups_prev_year1_aug'],
			'dashboard_price_sep' => $data['rsl_cutups_prev_year1_sep'],
			'dashboard_price_oct' => $data['rsl_cutups_prev_year1_oct'],
			'dashboard_price_nov' => $data['rsl_cutups_prev_year1_nov'],
			'dashboard_price_dec' => $data['rsl_cutups_prev_year1_dec'],
			'dashboard_price_min' => $data['rsl_cutups_prev_year1_min'],
			'dashboard_price_max' => $data['rsl_cutups_prev_year1_max'],
			'dashboard_price_avg' => $data['rsl_cutups_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'CHOOKSIES CUT UPS',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['rsl_cutups1'],
			'dashboard_price_feb' => $data['rsl_cutups2'],
			'dashboard_price_mar' => $data['rsl_cutups3'],
			'dashboard_price_apr' => $data['rsl_cutups4'],
			'dashboard_price_may' => $data['rsl_cutups5'],
			'dashboard_price_june' => $data['rsl_cutups6'],
			'dashboard_price_july' => $data['rsl_cutups7'],
			'dashboard_price_aug' => $data['rsl_cutups8'],
			'dashboard_price_sep' => $data['rsl_cutups9'],
			'dashboard_price_oct' => $data['rsl_cutups10'],
			'dashboard_price_nov' => $data['rsl_cutups11'],
			'dashboard_price_dec' => $data['rsl_cutups12'],
			'dashboard_price_min' => $data['rsl_cutups_min'],
			'dashboard_price_max' => $data['rsl_cutups_max'],
			'dashboard_price_avg' => $data['rsl_cutups_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		
		/*Reseller Liver / Gizzard*/

		$join_rsl_liver = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id AND e.material_group_name = \'LIVER / GIZZARD\'',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'RESELLER\''
		);

		$get_rsl_liver = $this->admin->get_join('sales_tbl a', $join_rsl_liver, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['rsl_liver1'] = 0;
		$data['rsl_liver2'] = 0;
		$data['rsl_liver3'] = 0;
		$data['rsl_liver4'] = 0;
		$data['rsl_liver5'] = 0;
		$data['rsl_liver6'] = 0;
		$data['rsl_liver7'] = 0;
		$data['rsl_liver8'] = 0;
		$data['rsl_liver9'] = 0;
		$data['rsl_liver10'] = 0;
		$data['rsl_liver11'] = 0;
		$data['rsl_liver12'] = 0;
		$data['rsl_liver_total'] = 0;
		$data['rsl_liver_count'] = 0;
		$data['rsl_liver_avg'] = 0;
		$data['rsl_liver_min'] = 0;
		$data['rsl_liver_max'] = 0;

		foreach($get_rsl_liver as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['rsl_liver' . $month] = $asp;
			$data['rsl_liver_total'] += $asp;

			if($asp < $data['rsl_liver_min'] || $data['rsl_liver_count'] == 0){
				$data['rsl_cutups_min'] = $asp;
			}

			if($asp > $data['rsl_liver_max'] || $data['rsl_liver_count'] == 0){
				$data['rsl_liver_max'] = $asp;
			}

			$data['rsl_liver_count']++;
		}

		$data['rsl_liver_avg'] = $data['rsl_liver_total'] != 0 ? $data['rsl_liver_total'] / $data['rsl_liver_count'] : 0;


		$rsl_liver_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'GIZZARD / LIVER', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_liver_prev_year2_jan'] = 0;
		$data['rsl_liver_prev_year2_feb'] = 0;
		$data['rsl_liver_prev_year2_mar'] = 0;
		$data['rsl_liver_prev_year2_apr'] = 0;
		$data['rsl_liver_prev_year2_may'] = 0;
		$data['rsl_liver_prev_year2_jun'] = 0;
		$data['rsl_liver_prev_year2_jul'] = 0;
		$data['rsl_liver_prev_year2_aug'] = 0;
		$data['rsl_liver_prev_year2_sep'] = 0;
		$data['rsl_liver_prev_year2_oct'] = 0;
		$data['rsl_liver_prev_year2_nov'] = 0;
		$data['rsl_liver_prev_year2_dec'] = 0;
		$data['rsl_liver_prev_year2_avg'] = 0;
		$data['rsl_liver_prev_year2_min'] = 0;
		$data['rsl_liver_prev_year2_max'] = 0;

		foreach($rsl_liver_prev_year2 as $row){
			$data['rsl_liver_prev_year2_jan'] = $row->jan_price;
			$data['rsl_liver_prev_year2_feb'] = $row->feb_price;
			$data['rsl_liver_prev_year2_mar'] = $row->mar_price;
			$data['rsl_liver_prev_year2_apr'] = $row->apr_price;
			$data['rsl_liver_prev_year2_may'] = $row->may_price;
			$data['rsl_liver_prev_year2_jun'] = $row->jun_price;
			$data['rsl_liver_prev_year2_jul'] = $row->jul_price;
			$data['rsl_liver_prev_year2_aug'] = $row->aug_price;
			$data['rsl_liver_prev_year2_sep'] = $row->sep_price;
			$data['rsl_liver_prev_year2_oct'] = $row->oct_price;
			$data['rsl_liver_prev_year2_nov'] = $row->nov_price;
			$data['rsl_liver_prev_year2_dec'] = $row->dec_price;
			$data['rsl_liver_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_liver_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_liver_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'GIZZARD / LIVER',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['rsl_liver_prev_year2_jan'],
			'dashboard_price_feb' => $data['rsl_liver_prev_year2_feb'],
			'dashboard_price_mar' => $data['rsl_liver_prev_year2_mar'],
			'dashboard_price_apr' => $data['rsl_liver_prev_year2_apr'],
			'dashboard_price_may' => $data['rsl_liver_prev_year2_may'],
			'dashboard_price_june' => $data['rsl_liver_prev_year2_jun'],
			'dashboard_price_july' => $data['rsl_liver_prev_year2_jul'],
			'dashboard_price_aug' => $data['rsl_liver_prev_year2_aug'],
			'dashboard_price_sep' => $data['rsl_liver_prev_year2_sep'],
			'dashboard_price_oct' => $data['rsl_liver_prev_year2_oct'],
			'dashboard_price_nov' => $data['rsl_liver_prev_year2_nov'],
			'dashboard_price_dec' => $data['rsl_liver_prev_year2_dec'],
			'dashboard_price_min' => $data['rsl_liver_prev_year2_min'],
			'dashboard_price_max' => $data['rsl_liver_prev_year2_max'],
			'dashboard_price_avg' => $data['rsl_liver_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$rsl_liver_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => 'GIZZARD / LIVER', 'comp_price_segment' => 'RSL', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['rsl_liver_prev_year1_jan'] = 0;
		$data['rsl_liver_prev_year1_feb'] = 0;
		$data['rsl_liver_prev_year1_mar'] = 0;
		$data['rsl_liver_prev_year1_apr'] = 0;
		$data['rsl_liver_prev_year1_may'] = 0;
		$data['rsl_liver_prev_year1_jun'] = 0;
		$data['rsl_liver_prev_year1_jul'] = 0;
		$data['rsl_liver_prev_year1_aug'] = 0;
		$data['rsl_liver_prev_year1_sep'] = 0;
		$data['rsl_liver_prev_year1_oct'] = 0;
		$data['rsl_liver_prev_year1_nov'] = 0;
		$data['rsl_liver_prev_year1_dec'] = 0;
		$data['rsl_liver_prev_year1_avg'] = 0;
		$data['rsl_liver_prev_year1_min'] = 0;
		$data['rsl_liver_prev_year1_max'] = 0;

		foreach($rsl_liver_prev_year1 as $row){
			$data['rsl_liver_prev_year1_jan'] = $row->jan_price;
			$data['rsl_liver_prev_year1_feb'] = $row->feb_price;
			$data['rsl_liver_prev_year1_mar'] = $row->mar_price;
			$data['rsl_liver_prev_year1_apr'] = $row->apr_price;
			$data['rsl_liver_prev_year1_may'] = $row->may_price;
			$data['rsl_liver_prev_year1_jun'] = $row->jun_price;
			$data['rsl_liver_prev_year1_jul'] = $row->jul_price;
			$data['rsl_liver_prev_year1_aug'] = $row->aug_price;
			$data['rsl_liver_prev_year1_sep'] = $row->sep_price;
			$data['rsl_liver_prev_year1_oct'] = $row->oct_price;
			$data['rsl_liver_prev_year1_nov'] = $row->nov_price;
			$data['rsl_liver_prev_year1_dec'] = $row->dec_price;
			$data['rsl_liver_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rsl_liver_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['rls_liver_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'GIZZARD / LIVER',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['rsl_liver_prev_year1_jan'],
			'dashboard_price_feb' => $data['rsl_liver_prev_year1_feb'],
			'dashboard_price_mar' => $data['rsl_liver_prev_year1_mar'],
			'dashboard_price_apr' => $data['rsl_liver_prev_year1_apr'],
			'dashboard_price_may' => $data['rsl_liver_prev_year1_may'],
			'dashboard_price_june' => $data['rsl_liver_prev_year1_jun'],
			'dashboard_price_july' => $data['rsl_liver_prev_year1_jul'],
			'dashboard_price_aug' => $data['rsl_liver_prev_year1_aug'],
			'dashboard_price_sep' => $data['rsl_liver_prev_year1_sep'],
			'dashboard_price_oct' => $data['rsl_liver_prev_year1_oct'],
			'dashboard_price_nov' => $data['rsl_liver_prev_year1_nov'],
			'dashboard_price_dec' => $data['rsl_liver_prev_year1_dec'],
			'dashboard_price_min' => $data['rsl_liver_prev_year1_min'],
			'dashboard_price_max' => $data['rsl_liver_prev_year1_max'],
			'dashboard_price_avg' => $data['rsl_liver_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'RSL',
			'dashboard_price_product' => 'GIZZARD / LIVER',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['rsl_liver1'],
			'dashboard_price_feb' => $data['rsl_liver2'],
			'dashboard_price_mar' => $data['rsl_liver3'],
			'dashboard_price_apr' => $data['rsl_liver4'],
			'dashboard_price_may' => $data['rsl_liver5'],
			'dashboard_price_june' => $data['rsl_liver6'],
			'dashboard_price_july' => $data['rsl_liver7'],
			'dashboard_price_aug' => $data['rsl_liver8'],
			'dashboard_price_sep' => $data['rsl_liver9'],
			'dashboard_price_oct' => $data['rsl_liver10'],
			'dashboard_price_nov' => $data['rsl_liver11'],
			'dashboard_price_dec' => $data['rsl_liver12'],
			'dashboard_price_min' => $data['rsl_liver_min'],
			'dashboard_price_max' => $data['rsl_liver_max'],
			'dashboard_price_avg' => $data['rsl_liver_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);


		/*EXP 2 PC FRIED CHICKEN MEAL */
		
		$join_exp_fried_chix_meal = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'sales_details_tbl c' => 'b.sales_item_id = c.sales_item_id AND c.sales_det_status = 1',
			'material_tbl d' => 'b.material_id = d.material_id AND d.material_code IN (10400864)',
			'material_group_tbl e' => 'd.material_group_id = e.material_group_id',
			'outlet_tbl f' => 'a.outlet_id = f.outlet_id AND f.bc_id = ' . $bc_id,
			'outlet_brand_tbl g' => 'f.outlet_id = g.outlet_id AND g.outlet_brand_status = 1',
			'brand_tbl h' => 'g.brand_id  = h.brand_id AND h.brand_name = \'CHOOKS EXPRESS\''
		);

		$get_exp_fried_chix_meal = $this->admin->get_join('sales_tbl a', $join_exp_fried_chix_meal, FALSE, FALSE, 'YEAR(c.sales_det_date), MONTH(c.sales_det_date)', 'AVG(NULLIF(c.sales_det_asp, 0)) as asp, MONTH(c.sales_det_date) asp_date');

		$data['exp_fried_chix_meal1'] = 0;
		$data['exp_fried_chix_meal2'] = 0;
		$data['exp_fried_chix_meal3'] = 0;
		$data['exp_fried_chix_meal4'] = 0;
		$data['exp_fried_chix_meal5'] = 0;
		$data['exp_fried_chix_meal6'] = 0;
		$data['exp_fried_chix_meal7'] = 0;
		$data['exp_fried_chix_meal8'] = 0;
		$data['exp_fried_chix_meal9'] = 0;
		$data['exp_fried_chix_meal10'] = 0;
		$data['exp_fried_chix_meal11'] = 0;
		$data['exp_fried_chix_meal12'] = 0;
		$data['exp_fried_chix_meal_total'] = 0;
		$data['exp_fried_chix_meal_count'] = 0;
		$data['exp_fried_chix_meal_avg'] = 0;
		$data['exp_fried_chix_meal_min'] = 0;
		$data['exp_fried_chix_meal_max'] = 0;

		foreach($get_exp_fried_chix_meal as $row){
			$asp = $row->asp;
			$month = $row->asp_date;
			$data['exp_fried_chix_meal' . $month] = $asp;
			$data['exp_fried_chix_meal_total'] += $asp;

			if($asp < $data['exp_fried_chix_meal_min'] || $data['exp_fried_chix_meal_count'] == 0){
				$data['exp_fried_chix_meal_min'] = $asp;
			}

			if($asp > $data['exp_fried_chix_meal_max'] || $data['exp_fried_chix_meal_count'] == 0){
				$data['exp_fried_chix_meal_max'] = $asp;
			}

			$data['exp_fried_chix_meal_count']++;
		}

		$data['exp_fried_chix_meal_avg'] = $data['exp_fried_chix_meal_total'] != 0 ? $data['exp_fried_chix_meal_total'] / $data['exp_fried_chix_meal_count'] : 0;


		$exp_fried_chix_meal_prev_year2 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '2 PC FRIED CHICKEN MEAL', 'comp_price_segment' => 'EXP', 'comp_price_year' => $year - 2,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');

		
		$data['exp_fried_chix_meal_prev_year2_jan'] = 0;
		$data['exp_fried_chix_meal_prev_year2_feb'] = 0;
		$data['exp_fried_chix_meal_prev_year2_mar'] = 0;
		$data['exp_fried_chix_meal_prev_year2_apr'] = 0;
		$data['exp_fried_chix_meal_prev_year2_may'] = 0;
		$data['exp_fried_chix_meal_prev_year2_jun'] = 0;
		$data['exp_fried_chix_meal_prev_year2_jul'] = 0;
		$data['exp_fried_chix_meal_prev_year2_aug'] = 0;
		$data['exp_fried_chix_meal_prev_year2_sep'] = 0;
		$data['exp_fried_chix_meal_prev_year2_oct'] = 0;
		$data['exp_fried_chix_meal_prev_year2_nov'] = 0;
		$data['exp_fried_chix_meal_prev_year2_dec'] = 0;
		$data['exp_fried_chix_meal_prev_year2_avg'] = 0;
		$data['exp_fried_chix_meal_prev_year2_min'] = 0;
		$data['exp_fried_chix_meal_prev_year2_max'] = 0;



		foreach($exp_fried_chix_meal_prev_year2 as $row){
			$data['exp_fried_chix_meal_prev_year2_jan'] = $row->jan_price;
			$data['exp_fried_chix_meal_prev_year2_feb'] = $row->feb_price;
			$data['exp_fried_chix_meal_prev_year2_mar'] = $row->mar_price;
			$data['exp_fried_chix_meal_prev_year2_apr'] = $row->apr_price;
			$data['exp_fried_chix_meal_prev_year2_may'] = $row->may_price;
			$data['exp_fried_chix_meal_prev_year2_jun'] = $row->jun_price;
			$data['exp_fried_chix_meal_prev_year2_jul'] = $row->jul_price;
			$data['exp_fried_chix_meal_prev_year2_aug'] = $row->aug_price;
			$data['exp_fried_chix_meal_prev_year2_sep'] = $row->sep_price;
			$data['exp_fried_chix_meal_prev_year2_oct'] = $row->oct_price;
			$data['exp_fried_chix_meal_prev_year2_nov'] = $row->nov_price;
			$data['exp_fried_chix_meal_prev_year2_dec'] = $row->dec_price;
			$data['exp_fried_chix_meal_prev_year2_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['exp_fried_chix_meal_prev_year2_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['exp_fried_chix_meal_prev_year2_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'EXP',
			'dashboard_price_product' => '2 PC FRIED CHICKEN MEAL',
			'dashboard_price_year' => ($year - 2),
			'dashboard_price_jan' => $data['exp_fried_chix_meal_prev_year2_jan'],
			'dashboard_price_feb' => $data['exp_fried_chix_meal_prev_year2_feb'],
			'dashboard_price_mar' => $data['exp_fried_chix_meal_prev_year2_mar'],
			'dashboard_price_apr' => $data['exp_fried_chix_meal_prev_year2_apr'],
			'dashboard_price_may' => $data['exp_fried_chix_meal_prev_year2_may'],
			'dashboard_price_june' => $data['exp_fried_chix_meal_prev_year2_jun'],
			'dashboard_price_july' => $data['exp_fried_chix_meal_prev_year2_jul'],
			'dashboard_price_aug' => $data['exp_fried_chix_meal_prev_year2_aug'],
			'dashboard_price_sep' => $data['exp_fried_chix_meal_prev_year2_sep'],
			'dashboard_price_oct' => $data['exp_fried_chix_meal_prev_year2_oct'],
			'dashboard_price_nov' => $data['exp_fried_chix_meal_prev_year2_nov'],
			'dashboard_price_dec' => $data['exp_fried_chix_meal_prev_year2_dec'],
			'dashboard_price_min' => $data['exp_fried_chix_meal_prev_year2_min'],
			'dashboard_price_max' => $data['exp_fried_chix_meal_prev_year2_max'],
			'dashboard_price_avg' => $data['exp_fried_chix_meal_prev_year2_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$exp_fried_chix_meal_prev_year1 = $this->admin->get_data('comparative_price_tbl', array('comp_price_product' => '2 PC FRIED CHICKEN MEAL', 'comp_price_segment' => 'EXP', 'comp_price_year' => $year - 1,	'bc_id'	=>	$bc_id, 'comp_price_status' => 1), 
			FALSE, 'AVG(comp_price_jan) as jan_price, AVG(comp_price_feb) as feb_price, AVG(comp_price_mar) as mar_price, AVG(comp_price_apr) as apr_price, AVG(comp_price_may) as may_price, AVG(comp_price_jun) as jun_price, AVG(comp_price_jul) as jul_price, AVG(comp_price_aug) as aug_price, AVG(comp_price_sep) as sep_price, AVG(comp_price_oct) as oct_price, AVG(comp_price_nov) as nov_price, AVG(comp_price_dec) as dec_price');
		
		$data['exp_fried_chix_meal_prev_year1_jan'] = 0;
		$data['exp_fried_chix_meal_prev_year1_feb'] = 0;
		$data['exp_fried_chix_meal_prev_year1_mar'] = 0;
		$data['exp_fried_chix_meal_prev_year1_apr'] = 0;
		$data['exp_fried_chix_meal_prev_year1_may'] = 0;
		$data['exp_fried_chix_meal_prev_year1_jun'] = 0;
		$data['exp_fried_chix_meal_prev_year1_jul'] = 0;
		$data['exp_fried_chix_meal_prev_year1_aug'] = 0;
		$data['exp_fried_chix_meal_prev_year1_sep'] = 0;
		$data['exp_fried_chix_meal_prev_year1_oct'] = 0;
		$data['exp_fried_chix_meal_prev_year1_nov'] = 0;
		$data['exp_fried_chix_meal_prev_year1_dec'] = 0;
		$data['exp_fried_chix_meal_prev_year1_avg'] = 0;
		$data['exp_fried_chix_meal_prev_year1_min'] = 0;
		$data['exp_fried_chix_meal_prev_year1_max'] = 0;

		foreach($exp_fried_chix_meal_prev_year1 as $row){
			$data['exp_fried_chix_meal_prev_year1_jan'] = $row->jan_price;
			$data['exp_fried_chix_meal_prev_year1_feb'] = $row->feb_price;
			$data['exp_fried_chix_meal_prev_year1_mar'] = $row->mar_price;
			$data['exp_fried_chix_meal_prev_year1_apr'] = $row->apr_price;
			$data['exp_fried_chix_meal_prev_year1_may'] = $row->may_price;
			$data['exp_fried_chix_meal_prev_year1_jun'] = $row->jun_price;
			$data['exp_fried_chix_meal_prev_year1_jul'] = $row->jul_price;
			$data['exp_fried_chix_meal_prev_year1_aug'] = $row->aug_price;
			$data['exp_fried_chix_meal_prev_year1_sep'] = $row->sep_price;
			$data['exp_fried_chix_meal_prev_year1_oct'] = $row->oct_price;
			$data['exp_fried_chix_meal_prev_year1_nov'] = $row->nov_price;
			$data['exp_fried_chix_meal_prev_year1_dec'] = $row->dec_price;
			$data['exp_fried_chix_meal_prev_year1_avg'] = get_average(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['exp_fried_chix_meal_prev_year1_min'] = get_min(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));

			$data['exp_fried_chix_meal_prev_year1_max'] = get_max(array($row->jan_price, $row->feb_price, $row->mar_price, $row->apr_price, $row->may_price, $row->jun_price, $row->jul_price, $row->aug_price, $row->sep_price, $row->oct_price, $row->nov_price, $row->dec_price));
		}

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'EXP',
			'dashboard_price_product' => '2 PC FRIED CHICKEN MEAL',
			'dashboard_price_year' => ($year - 1),
			'dashboard_price_jan' => $data['exp_fried_chix_meal_prev_year1_jan'],
			'dashboard_price_feb' => $data['exp_fried_chix_meal_prev_year1_feb'],
			'dashboard_price_mar' => $data['exp_fried_chix_meal_prev_year1_mar'],
			'dashboard_price_apr' => $data['exp_fried_chix_meal_prev_year1_apr'],
			'dashboard_price_may' => $data['exp_fried_chix_meal_prev_year1_may'],
			'dashboard_price_june' => $data['exp_fried_chix_meal_prev_year1_jun'],
			'dashboard_price_july' => $data['exp_fried_chix_meal_prev_year1_jul'],
			'dashboard_price_aug' => $data['exp_fried_chix_meal_prev_year1_aug'],
			'dashboard_price_sep' => $data['exp_fried_chix_meal_prev_year1_sep'],
			'dashboard_price_oct' => $data['exp_fried_chix_meal_prev_year1_oct'],
			'dashboard_price_nov' => $data['exp_fried_chix_meal_prev_year1_nov'],
			'dashboard_price_dec' => $data['exp_fried_chix_meal_prev_year1_dec'],
			'dashboard_price_min' => $data['exp_fried_chix_meal_prev_year1_min'],
			'dashboard_price_max' => $data['exp_fried_chix_meal_prev_year1_max'],
			'dashboard_price_avg' => $data['exp_fried_chix_meal_prev_year1_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		$set_price = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_price_segment' => 'EXP',
			'dashboard_price_product' => '2 PC FRIED CHICKEN MEAL',
			'dashboard_price_year' => ($year),
			'dashboard_price_jan' => $data['exp_fried_chix_meal1'],
			'dashboard_price_feb' => $data['exp_fried_chix_meal2'],
			'dashboard_price_mar' => $data['exp_fried_chix_meal3'],
			'dashboard_price_apr' => $data['exp_fried_chix_meal4'],
			'dashboard_price_may' => $data['exp_fried_chix_meal5'],
			'dashboard_price_june' => $data['exp_fried_chix_meal6'],
			'dashboard_price_july' => $data['exp_fried_chix_meal7'],
			'dashboard_price_aug' => $data['exp_fried_chix_meal8'],
			'dashboard_price_sep' => $data['exp_fried_chix_meal9'],
			'dashboard_price_oct' => $data['exp_fried_chix_meal10'],
			'dashboard_price_nov' => $data['exp_fried_chix_meal11'],
			'dashboard_price_dec' => $data['exp_fried_chix_meal12'],
			'dashboard_price_min' => $data['exp_fried_chix_meal_min'],
			'dashboard_price_max' => $data['exp_fried_chix_meal_max'],
			'dashboard_price_avg' => $data['exp_fried_chix_meal_avg'],
			'dashboard_price_added' => date_now(),
			'dashboard_price_status' => 1
		);

		$insert_price = $this->admin->insert_data('dashboard_price_tbl', $set_price);

		return $data;

	}

	public function compute_noi($trans_id, $bc_id, $year){
		//$info = $this->_require_login();

		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','8048M');
		$total_variable = 0;
		$overall_noi = 0;

		$bc = $bc_id;

		//Get All Sales item per BC
		$join_material = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'material_tbl c' => 'b.material_id = c.material_id',
			'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
			'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
			'brand_tbl f' => 'e.brand_id = f.brand_id',
			'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc,
			'material_group_tbl h' => 'c.material_group_id = h.material_group_id'
		);

		
		$total_cm = 0;
		$overall_cm = 0;
		$total_cost = 0;
		$total_net_sales = 0;
		$total_variable = 0;
		$total_sales_unit = 0;
		$total_commission = 0;
		$total_customer_commission = 0;
		$get_material = $this->admin->get_join('sales_tbl a', $join_material, FALSE, FALSE, 'c.material_id, e.brand_id, d.bc_id', '*, c.material_id as mat_id, h.material_group_name');
		// echo '<pre>';
		// print_r($get_material);
		// echo '</pre>';
		// exit;

		$get_jan_noi = $this->get_noi_main3($trans_id, $bc_id, $year . '-01-01', $get_material);

		// echo '<pre>';
		// print_r($get_jan_noi);
		// echo '</pre>';
		// exit;

		$overall_noi += $get_jan_noi['overall_cm'];
		$total_variable += $get_jan_noi['variable_cost'];
		$total_net_sales += $get_jan_noi['net_sales'];
		$total_sales_unit += $get_jan_noi['sales_unit'];
		$total_commission += $get_jan_noi['commission'];
		$total_customer_commission += $get_jan_noi['customer_commission'];

		$month = $year . '-01-01';
		$check_summary = $this->admin->check_data('dashboard_month_bc_summary_tbl', array('dashboard_bc_trans_id' => $trans_id, 'bc_id' => $bc_id, 'dashboard_month_bc_summary_date ' => $month, 'dashboard_month_bc_summary_status' => 1), TRUE);
		if($check_summary['result'] == TRUE){
			$sales_unit = $get_jan_noi['sales_unit'];
			$net_sales = $get_jan_noi['net_sales'];
			$variable_cost = $get_jan_noi['variable_cost'];
			$noi = $get_jan_noi['overall_cm'];
			$commission = $get_jan_noi['commission'];
			$customer_commission = $get_jan_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;
			
			$summary_id = $check_summary['info']->dashboard_month_bc_summary_id;
			$set_summary = array(
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_updated' => date_now()
			);

			$where_summary = array('dashboard_month_bc_summary_id' => $summary_id);
			$update_summary = $this->admin->update_data('dashboard_month_bc_summary_tbl', $set_summary, $where_summary);
		}else{
			$sales_unit = $get_jan_noi['sales_unit'];
			$net_sales = $get_jan_noi['net_sales'];
			$variable_cost = $get_jan_noi['variable_cost'];
			$noi = $get_jan_noi['overall_cm'];
			$commission = $get_jan_noi['commission'];
			$customer_commission = $get_jan_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;

			$set_summary = array(
				'dashboard_bc_trans_id' => $trans_id,
				'bc_id' => $bc_id,
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_date' => $month,
				'dashboard_month_bc_summary_year' => $year,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_added' => date_now(),
				'dashboard_month_bc_summary_updated' => date_now(),
				'dashboard_month_bc_summary_status' => 1
			);

			$insert_summary = $this->admin->insert_data('dashboard_month_bc_summary_tbl', $set_summary);
		}


		/*February NOI*/

		$get_feb_noi = $this->get_noi_main3($trans_id, $bc_id, $year . '-02-01', $get_material);
		$overall_noi += $get_feb_noi['overall_cm'];
		$total_variable += $get_feb_noi['variable_cost'];
		$total_net_sales += $get_feb_noi['net_sales'];
		$total_sales_unit += $get_feb_noi['sales_unit'];
		$total_commission += $get_feb_noi['commission'];
		$total_customer_commission += $get_feb_noi['customer_commission'];

		$month = $year . '-02-01';
		$check_summary = $this->admin->check_data('dashboard_month_bc_summary_tbl', array('dashboard_bc_trans_id' => $trans_id, 'bc_id' => $bc_id, 'dashboard_month_bc_summary_date ' => $month, 'dashboard_month_bc_summary_status' => 1), TRUE);
		if($check_summary['result'] == TRUE){
			$sales_unit = $get_feb_noi['sales_unit'];
			$net_sales = $get_feb_noi['net_sales'];
			$variable_cost = $get_feb_noi['variable_cost'];
			$noi = $get_feb_noi['overall_cm'];
			$commission = $get_feb_noi['commission'];
			$customer_commission = $get_feb_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;
			
			$summary_id = $check_summary['info']->dashboard_month_bc_summary_id;
			$set_summary = array(
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_updated' => date_now()
			);

			$where_summary = array('dashboard_month_bc_summary_id' => $summary_id);
			$update_summary = $this->admin->update_data('dashboard_month_bc_summary_tbl', $set_summary, $where_summary);
		}else{
			$sales_unit = $get_feb_noi['sales_unit'];
			$net_sales = $get_feb_noi['net_sales'];
			$variable_cost = $get_feb_noi['variable_cost'];
			$noi = $get_feb_noi['overall_cm'];
			$commission = $get_feb_noi['commission'];
			$customer_commission = $get_feb_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;

			$set_summary = array(
				'dashboard_bc_trans_id' => $trans_id,
				'bc_id' => $bc_id,
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_date' => $month,
				'dashboard_month_bc_summary_year' => $year,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_added' => date_now(),
				'dashboard_month_bc_summary_updated' => date_now(),
				'dashboard_month_bc_summary_status' => 1
			);

			$insert_summary = $this->admin->insert_data('dashboard_month_bc_summary_tbl', $set_summary);
		}
		

		/*March NOI*/

		$get_mar_noi = $this->get_noi_main3($trans_id, $bc_id, $year . '-03-01', $get_material);
		$overall_noi += $get_mar_noi['overall_cm'];
		$total_variable += $get_mar_noi['variable_cost'];
		$total_net_sales += $get_mar_noi['net_sales'];
		$total_sales_unit += $get_mar_noi['sales_unit'];
		$total_commission += $get_mar_noi['commission'];
		$total_customer_commission += $get_mar_noi['customer_commission'];


		$month = $year . '-03-01';
		$check_summary = $this->admin->check_data('dashboard_month_bc_summary_tbl', array('dashboard_bc_trans_id' => $trans_id, 'bc_id' => $bc_id, 'dashboard_month_bc_summary_date ' => $month, 'dashboard_month_bc_summary_status' => 1), TRUE);
		if($check_summary['result'] == TRUE){
			$sales_unit = $get_mar_noi['sales_unit'];
			$net_sales = $get_mar_noi['net_sales'];
			$variable_cost = $get_mar_noi['variable_cost'];
			$noi = $get_mar_noi['overall_cm'];
			$commission = $get_mar_noi['commission'];
			$customer_commission = $get_mar_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;
			
			$summary_id = $check_summary['info']->dashboard_month_bc_summary_id;
			$set_summary = array(
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_updated' => date_now()
			);

			$where_summary = array('dashboard_month_bc_summary_id' => $summary_id);
			$update_summary = $this->admin->update_data('dashboard_month_bc_summary_tbl', $set_summary, $where_summary);
		}else{
			$sales_unit = $get_mar_noi['sales_unit'];
			$net_sales = $get_mar_noi['net_sales'];
			$variable_cost = $get_mar_noi['variable_cost'];
			$noi = $get_mar_noi['overall_cm'];
			$commission = $get_mar_noi['commission'];
			$customer_commission = $get_mar_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;

			$set_summary = array(
				'dashboard_bc_trans_id' => $trans_id, 
				'bc_id' => $bc_id,
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_date' => $month,
				'dashboard_month_bc_summary_year' => $year,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_added' => date_now(),
				'dashboard_month_bc_summary_updated' => date_now(),
				'dashboard_month_bc_summary_status' => 1
			);

			$insert_summary = $this->admin->insert_data('dashboard_month_bc_summary_tbl', $set_summary);
		}


		/*April NOI*/

		$get_apr_noi = $this->get_noi_main3($trans_id, $bc_id, $year . '-04-01', $get_material);
		$overall_noi += $get_apr_noi['overall_cm'];
		$total_variable += $get_apr_noi['variable_cost'];
		$total_net_sales += $get_apr_noi['net_sales'];
		$total_sales_unit += $get_apr_noi['sales_unit'];
		$total_commission += $get_apr_noi['commission'];
		$total_customer_commission += $get_apr_noi['customer_commission'];

		$month = $year . '-04-01';
		$check_summary = $this->admin->check_data('dashboard_month_bc_summary_tbl', array('dashboard_bc_trans_id' => $trans_id, 'bc_id' => $bc_id, 'dashboard_month_bc_summary_date ' => $month, 'dashboard_month_bc_summary_status' => 1), TRUE);
		if($check_summary['result'] == TRUE){
			$sales_unit = $get_apr_noi['sales_unit'];
			$net_sales = $get_apr_noi['net_sales'];
			$variable_cost = $get_apr_noi['variable_cost'];
			$noi = $get_apr_noi['overall_cm'];
			$commission = $get_apr_noi['commission'];
			$customer_commission = $get_apr_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;
			
			$summary_id = $check_summary['info']->dashboard_month_bc_summary_id;
			$set_summary = array(
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_updated' => date_now()
			);

			$where_summary = array('dashboard_month_bc_summary_id' => $summary_id);
			$update_summary = $this->admin->update_data('dashboard_month_bc_summary_tbl', $set_summary, $where_summary);
		}else{
			$sales_unit = $get_apr_noi['sales_unit'];
			$net_sales = $get_apr_noi['net_sales'];
			$variable_cost = $get_apr_noi['variable_cost'];
			$noi = $get_apr_noi['overall_cm'];
			$commission = $get_apr_noi['commission'];
			$customer_commission = $get_apr_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;

			$set_summary = array(
				'dashboard_bc_trans_id' => $trans_id, 
				'bc_id' => $bc_id,
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_date' => $month,
				'dashboard_month_bc_summary_year' => $year,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_added' => date_now(),
				'dashboard_month_bc_summary_updated' => date_now(),
				'dashboard_month_bc_summary_status' => 1
			);

			$insert_summary = $this->admin->insert_data('dashboard_month_bc_summary_tbl', $set_summary);
		}


		/*May NOI*/

		$get_may_noi = $this->get_noi_main3($trans_id, $bc_id, $year . '-05-01', $get_material);
		$overall_noi += $get_may_noi['overall_cm'];
		$total_variable += $get_may_noi['variable_cost'];
		$total_net_sales += $get_may_noi['net_sales'];
		$total_sales_unit += $get_may_noi['sales_unit'];
		$total_commission += $get_may_noi['commission'];
		$total_customer_commission += $get_may_noi['customer_commission'];

		$month = $year . '-05-01';
		$check_summary = $this->admin->check_data('dashboard_month_bc_summary_tbl', array('dashboard_bc_trans_id' => $trans_id, 'bc_id' => $bc_id, 'dashboard_month_bc_summary_date ' => $month, 'dashboard_month_bc_summary_status' => 1), TRUE);
		if($check_summary['result'] == TRUE){
			$sales_unit = $get_may_noi['sales_unit'];
			$net_sales = $get_may_noi['net_sales'];
			$variable_cost = $get_may_noi['variable_cost'];
			$noi = $get_may_noi['overall_cm'];
			$commission = $get_may_noi['commission'];
			$customer_commission = $get_may_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;
			
			$summary_id = $check_summary['info']->dashboard_month_bc_summary_id;
			$set_summary = array(
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_updated' => date_now()
			);

			$where_summary = array('dashboard_month_bc_summary_id' => $summary_id);
			$update_summary = $this->admin->update_data('dashboard_month_bc_summary_tbl', $set_summary, $where_summary);
		}else{
			$sales_unit = $get_may_noi['sales_unit'];
			$net_sales = $get_may_noi['net_sales'];
			$variable_cost = $get_may_noi['variable_cost'];
			$noi = $get_may_noi['overall_cm'];
			$commission = $get_may_noi['commission'];
			$customer_commission = $get_may_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;

			$set_summary = array(
				'dashboard_bc_trans_id' => $trans_id, 
				'bc_id' => $bc_id,
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_date' => $month,
				'dashboard_month_bc_summary_year' => $year,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_added' => date_now(),
				'dashboard_month_bc_summary_updated' => date_now(),
				'dashboard_month_bc_summary_status' => 1
			);

			$insert_summary = $this->admin->insert_data('dashboard_month_bc_summary_tbl', $set_summary);
		}


		/*June NOI*/

		$get_jun_noi = $this->get_noi_main3($trans_id, $bc_id, $year . '-06-01', $get_material);
		$overall_noi += $get_jun_noi['overall_cm'];
		$total_variable += $get_jun_noi['variable_cost'];
		$total_net_sales += $get_jun_noi['net_sales'];
		$total_sales_unit += $get_jun_noi['sales_unit'];
		$total_commission += $get_jun_noi['commission'];
		$total_customer_commission += $get_jun_noi['customer_commission'];

		$month = $year . '-06-01';
		$check_summary = $this->admin->check_data('dashboard_month_bc_summary_tbl', array('dashboard_bc_trans_id' => $trans_id, 'bc_id' => $bc_id, 'dashboard_month_bc_summary_date ' => $month, 'dashboard_month_bc_summary_status' => 1), TRUE);
		if($check_summary['result'] == TRUE){
			$sales_unit = $get_jun_noi['sales_unit'];
			$net_sales = $get_jun_noi['net_sales'];
			$variable_cost = $get_jun_noi['variable_cost'];
			$noi = $get_jun_noi['overall_cm'];
			$commission = $get_jun_noi['commission'];
			$customer_commission = $get_jun_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;
			
			$summary_id = $check_summary['info']->dashboard_month_bc_summary_id;
			$set_summary = array(
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_updated' => date_now()
			);

			$where_summary = array('dashboard_month_bc_summary_id' => $summary_id);
			$update_summary = $this->admin->update_data('dashboard_month_bc_summary_tbl', $set_summary, $where_summary);
		}else{
			$sales_unit = $get_jun_noi['sales_unit'];
			$net_sales = $get_jun_noi['net_sales'];
			$variable_cost = $get_jun_noi['variable_cost'];
			$noi = $get_jun_noi['overall_cm'];
			$commission = $get_jun_noi['commission'];
			$customer_commission = $get_jun_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;

			$set_summary = array(
				'dashboard_bc_trans_id' => $trans_id, 
				'bc_id' => $bc_id,
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_date' => $month,
				'dashboard_month_bc_summary_year' => $year,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_added' => date_now(),
				'dashboard_month_bc_summary_updated' => date_now(),
				'dashboard_month_bc_summary_status' => 1
			);

			$insert_summary = $this->admin->insert_data('dashboard_month_bc_summary_tbl', $set_summary);
		}


		/*July NOI*/

		$get_jul_noi = $this->get_noi_main3($trans_id, $bc_id, $year . '-07-01', $get_material);
		$overall_noi += $get_jul_noi['overall_cm'];
		$total_variable += $get_jul_noi['variable_cost'];
		$total_net_sales += $get_jul_noi['net_sales'];
		$total_sales_unit += $get_jul_noi['sales_unit'];
		$total_commission += $get_jul_noi['commission'];
		$total_customer_commission += $get_jul_noi['customer_commission'];

		$month = $year . '-07-01';
		$check_summary = $this->admin->check_data('dashboard_month_bc_summary_tbl', array('dashboard_bc_trans_id' => $trans_id, 'bc_id' => $bc_id, 'dashboard_month_bc_summary_date ' => $month, 'dashboard_month_bc_summary_status' => 1), TRUE);
		if($check_summary['result'] == TRUE){
			$sales_unit = $get_jul_noi['sales_unit'];
			$net_sales = $get_jul_noi['net_sales'];
			$variable_cost = $get_jul_noi['variable_cost'];
			$noi = $get_jul_noi['overall_cm'];
			$commission = $get_jul_noi['commission'];
			$customer_commission = $get_jul_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;
			
			$summary_id = $check_summary['info']->dashboard_month_bc_summary_id;
			$set_summary = array(
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_updated' => date_now()
			);

			$where_summary = array('dashboard_month_bc_summary_id' => $summary_id);
			$update_summary = $this->admin->update_data('dashboard_month_bc_summary_tbl', $set_summary, $where_summary);
		}else{
			$sales_unit = $get_jul_noi['sales_unit'];
			$net_sales = $get_jul_noi['net_sales'];
			$variable_cost = $get_jul_noi['variable_cost'];
			$noi = $get_jul_noi['overall_cm'];
			$commission = $get_jul_noi['commission'];
			$customer_commission = $get_jul_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;

			$set_summary = array(
				'dashboard_bc_trans_id' => $trans_id, 
				'bc_id' => $bc_id,
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_date' => $month,
				'dashboard_month_bc_summary_year' => $year,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_added' => date_now(),
				'dashboard_month_bc_summary_updated' => date_now(),
				'dashboard_month_bc_summary_status' => 1
			);

			$insert_summary = $this->admin->insert_data('dashboard_month_bc_summary_tbl', $set_summary);
		}

		/*August NOI*/

		$get_aug_noi = $this->get_noi_main3($trans_id, $bc_id, $year . '-08-01', $get_material);
		$overall_noi += $get_aug_noi['overall_cm'];
		$total_variable += $get_aug_noi['variable_cost'];
		$total_net_sales += $get_aug_noi['net_sales'];
		$total_sales_unit += $get_aug_noi['sales_unit'];
		$total_commission += $get_aug_noi['commission'];
		$total_customer_commission += $get_aug_noi['customer_commission'];

		$month = $year . '-08-01';
		$check_summary = $this->admin->check_data('dashboard_month_bc_summary_tbl', array('dashboard_bc_trans_id' => $trans_id, 'bc_id' => $bc_id, 'dashboard_month_bc_summary_date ' => $month, 'dashboard_month_bc_summary_status' => 1), TRUE);
		if($check_summary['result'] == TRUE){
			$sales_unit = $get_aug_noi['sales_unit'];
			$net_sales = $get_aug_noi['net_sales'];
			$variable_cost = $get_aug_noi['variable_cost'];
			$noi = $get_aug_noi['overall_cm'];
			$commission = $get_aug_noi['commission'];
			$customer_commission = $get_aug_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;
			
			$summary_id = $check_summary['info']->dashboard_month_bc_summary_id;
			$set_summary = array(
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_updated' => date_now()
			);

			$where_summary = array('dashboard_month_bc_summary_id' => $summary_id);
			$update_summary = $this->admin->update_data('dashboard_month_bc_summary_tbl', $set_summary, $where_summary);
		}else{
			$sales_unit = $get_aug_noi['sales_unit'];
			$net_sales = $get_aug_noi['net_sales'];
			$variable_cost = $get_aug_noi['variable_cost'];
			$noi = $get_aug_noi['overall_cm'];
			$commission = $get_aug_noi['commission'];
			$customer_commission = $get_aug_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;

			$set_summary = array(
				'dashboard_bc_trans_id' => $trans_id, 
				'bc_id' => $bc_id,
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_date' => $month,
				'dashboard_month_bc_summary_year' => $year,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_added' => date_now(),
				'dashboard_month_bc_summary_updated' => date_now(),
				'dashboard_month_bc_summary_status' => 1
			);

			$insert_summary = $this->admin->insert_data('dashboard_month_bc_summary_tbl', $set_summary);
		}


		/*September NOI*/

		$get_sep_noi = $this->get_noi_main3($trans_id, $bc_id, $year . '-09-01', $get_material);
		$overall_noi += $get_sep_noi['overall_cm'];
		$total_variable += $get_sep_noi['variable_cost'];
		$total_net_sales += $get_sep_noi['net_sales'];
		$total_sales_unit += $get_sep_noi['sales_unit'];
		$total_commission += $get_sep_noi['commission'];
		$total_customer_commission += $get_sep_noi['customer_commission'];

		$month = $year . '-09-01';
		$check_summary = $this->admin->check_data('dashboard_month_bc_summary_tbl', array('dashboard_bc_trans_id' => $trans_id, 'bc_id' => $bc_id, 'dashboard_month_bc_summary_date ' => $month, 'dashboard_month_bc_summary_status' => 1), TRUE);
		if($check_summary['result'] == TRUE){
			$sales_unit = $get_sep_noi['sales_unit'];
			$net_sales = $get_sep_noi['net_sales'];
			$variable_cost = $get_sep_noi['variable_cost'];
			$noi = $get_sep_noi['overall_cm'];
			$commission = $get_sep_noi['commission'];
			$customer_commission = $get_sep_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;
			
			$summary_id = $check_summary['info']->dashboard_month_bc_summary_id;
			$set_summary = array(
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_updated' => date_now()
			);

			$where_summary = array('dashboard_month_bc_summary_id' => $summary_id);
			$update_summary = $this->admin->update_data('dashboard_month_bc_summary_tbl', $set_summary, $where_summary);
		}else{
			$sales_unit = $get_sep_noi['sales_unit'];
			$net_sales = $get_sep_noi['net_sales'];
			$variable_cost = $get_sep_noi['variable_cost'];
			$noi = $get_sep_noi['overall_cm'];
			$commission = $get_sep_noi['commission'];
			$customer_commission = $get_sep_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;

			$set_summary = array(
				'dashboard_bc_trans_id' => $trans_id, 
				'bc_id' => $bc_id,
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_date' => $month,
				'dashboard_month_bc_summary_year' => $year,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_added' => date_now(),
				'dashboard_month_bc_summary_updated' => date_now(),
				'dashboard_month_bc_summary_status' => 1
			);

			$insert_summary = $this->admin->insert_data('dashboard_month_bc_summary_tbl', $set_summary);
		}


		/*October NOI*/

		$get_oct_noi = $this->get_noi_main3($trans_id, $bc_id, $year . '-10-01', $get_material);
		$overall_noi += $get_oct_noi['overall_cm'];
		$total_variable += $get_oct_noi['variable_cost'];
		$total_net_sales += $get_oct_noi['net_sales'];
		$total_sales_unit += $get_oct_noi['sales_unit'];
		$total_commission += $get_oct_noi['commission'];
		$total_customer_commission += $get_oct_noi['customer_commission'];

		$month = $year . '-10-01';
		$check_summary = $this->admin->check_data('dashboard_month_bc_summary_tbl', array('dashboard_bc_trans_id' => $trans_id, 'bc_id' => $bc_id, 'dashboard_month_bc_summary_date ' => $month, 'dashboard_month_bc_summary_status' => 1), TRUE);
		if($check_summary['result'] == TRUE){
			$sales_unit = $get_oct_noi['sales_unit'];
			$net_sales = $get_oct_noi['net_sales'];
			$variable_cost = $get_oct_noi['variable_cost'];
			$noi = $get_oct_noi['overall_cm'];
			$commission = $get_oct_noi['commission'];
			$customer_commission = $get_oct_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;
			
			$summary_id = $check_summary['info']->dashboard_month_bc_summary_id;
			$set_summary = array(
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_updated' => date_now()
			);

			$where_summary = array('dashboard_month_bc_summary_id' => $summary_id);
			$update_summary = $this->admin->update_data('dashboard_month_bc_summary_tbl', $set_summary, $where_summary);
		}else{
			$sales_unit = $get_oct_noi['sales_unit'];
			$net_sales = $get_oct_noi['net_sales'];
			$variable_cost = $get_oct_noi['variable_cost'];
			$noi = $get_oct_noi['overall_cm'];
			$commission = $get_oct_noi['commission'];
			$customer_commission = $get_oct_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;

			$set_summary = array(
				'dashboard_bc_trans_id' => $trans_id, 
				'bc_id' => $bc_id,
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_date' => $month,
				'dashboard_month_bc_summary_year' => $year,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_added' => date_now(),
				'dashboard_month_bc_summary_updated' => date_now(),
				'dashboard_month_bc_summary_status' => 1
			);

			$insert_summary = $this->admin->insert_data('dashboard_month_bc_summary_tbl', $set_summary);
		}


		/*November NOI*/

		$get_nov_noi = $this->get_noi_main3($trans_id, $bc_id, $year . '-11-01', $get_material);
		$overall_noi += $get_nov_noi['overall_cm'];
		$total_variable += $get_nov_noi['variable_cost'];
		$total_net_sales += $get_nov_noi['net_sales'];
		$total_sales_unit += $get_nov_noi['sales_unit'];
		$total_commission += $get_nov_noi['commission'];
		$total_customer_commission += $get_nov_noi['customer_commission'];

		$month = $year . '-11-01';
		$check_summary = $this->admin->check_data('dashboard_month_bc_summary_tbl', array('dashboard_bc_trans_id' => $trans_id, 'bc_id' => $bc_id, 'dashboard_month_bc_summary_date ' => $month, 'dashboard_month_bc_summary_status' => 1), TRUE);
		if($check_summary['result'] == TRUE){
			$sales_unit = $get_nov_noi['sales_unit'];
			$net_sales = $get_nov_noi['net_sales'];
			$variable_cost = $get_nov_noi['variable_cost'];
			$noi = $get_nov_noi['overall_cm'];
			$commission = $get_nov_noi['commission'];
			$customer_commission = $get_nov_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;
			
			$summary_id = $check_summary['info']->dashboard_month_bc_summary_id;
			$set_summary = array(
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_updated' => date_now()
			);

			$where_summary = array('dashboard_month_bc_summary_id' => $summary_id);
			$update_summary = $this->admin->update_data('dashboard_month_bc_summary_tbl', $set_summary, $where_summary);
		}else{
			$sales_unit = $get_nov_noi['sales_unit'];
			$net_sales = $get_nov_noi['net_sales'];
			$variable_cost = $get_nov_noi['variable_cost'];
			$noi = $get_nov_noi['overall_cm'];
			$commission = $get_nov_noi['commission'];
			$customer_commission = $get_nov_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;

			$set_summary = array(
				'dashboard_bc_trans_id' => $trans_id, 
				'bc_id' => $bc_id,
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_date' => $month,
				'dashboard_month_bc_summary_year' => $year,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_added' => date_now(),
				'dashboard_month_bc_summary_updated' => date_now(),
				'dashboard_month_bc_summary_status' => 1
			);

			$insert_summary = $this->admin->insert_data('dashboard_month_bc_summary_tbl', $set_summary);
		}


		/*December NOI*/

		$get_dec_noi = $this->get_noi_main3($trans_id, $bc_id, $year . '-12-01', $get_material);
		$overall_noi += $get_dec_noi['overall_cm'];
		$total_variable += $get_dec_noi['variable_cost'];
		$total_net_sales += $get_dec_noi['net_sales'];
		$total_sales_unit += $get_dec_noi['sales_unit'];
		$total_commission += $get_dec_noi['commission'];
		$total_customer_commission += $get_dec_noi['customer_commission'];

		$month = $year . '-12-01';
		$check_summary = $this->admin->check_data('dashboard_month_bc_summary_tbl', array('dashboard_bc_trans_id' => $trans_id, 'bc_id' => $bc_id, 'dashboard_month_bc_summary_date ' => $month, 'dashboard_month_bc_summary_status' => 1), TRUE);
		if($check_summary['result'] == TRUE){
			$sales_unit = $get_dec_noi['sales_unit'];
			$net_sales = $get_dec_noi['net_sales'];
			$variable_cost = $get_dec_noi['variable_cost'];
			$noi = $get_dec_noi['overall_cm'];
			$commission = $get_dec_noi['commission'];
			$customer_commission = $get_dec_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;
			
			$summary_id = $check_summary['info']->dashboard_month_bc_summary_id;
			$set_summary = array(
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_updated' => date_now()
			);

			$where_summary = array('dashboard_month_bc_summary_id' => $summary_id);
			$update_summary = $this->admin->update_data('dashboard_month_bc_summary_tbl', $set_summary, $where_summary);
		}else{
			$sales_unit = $get_dec_noi['sales_unit'];
			$net_sales = $get_dec_noi['net_sales'];
			$variable_cost = $get_dec_noi['variable_cost'];
			$noi = $get_dec_noi['overall_cm'];
			$commission = $get_dec_noi['commission'];
			$customer_commission = $get_dec_noi['customer_commission'];
			$margin = $net_sales - $variable_cost;

			$set_summary = array(
				'dashboard_bc_trans_id' => $trans_id, 
				'bc_id' => $bc_id,
				'dashboard_month_bc_summary_sales_unit' => $sales_unit,
				'dashboard_month_bc_summary_date' => $month,
				'dashboard_month_bc_summary_year' => $year,
				'dashboard_month_bc_summary_net_sales' => $net_sales,
				'dashboard_month_bc_summary_variable_cost' => $variable_cost,
				'dashboard_month_bc_summary_margin' => $margin,
				'dashboard_month_bc_summary_noi' => $noi,
				'dashboard_month_bc_summary_commission' => $commission + $customer_commission,
				'dashboard_month_bc_summary_added' => date_now(),
				'dashboard_month_bc_summary_updated' => date_now(),
				'dashboard_month_bc_summary_status' => 1
			);

			$insert_summary = $this->admin->insert_data('dashboard_month_bc_summary_tbl', $set_summary);
		}
		
		$data['overall_noi'] = $overall_noi;
		$data['total_variable'] = $total_variable;
		$data['total_net_sales'] = $total_net_sales;
		$data['total_sales_unit'] = $total_sales_unit;
		$data['total_commission'] = $total_commission;
		$data['total_customer_commission'] = $total_customer_commission;
		return $data;
	}

	/*public function get_noi_main3($trans_id, $bc_id, $date, $get_material){
		
		//$info = $this->_require_login();

 		$bc = $bc_id;		
		$total_cm = 0;
		$overall_cm = 0;
		$total_cost = 0;
		$total_variable = 0;
		$net_sales = 0;
		$total_qty = 0;
		$total_kgs = 0;

		$overall_variable = 0;
		$overall_cm = 0;
		$overall_net_sales = 0;
		$overall_sales_unit = 0;
		$overall_commission = 0;
		$overall_customer_commission = 0;
		$live_sales_alw = 1;
		$brand_summary = array();
		foreach($get_material as $row){
			$material_id = $row->mat_id;
			$material_code = $row->material_code;
			$material_desc = $row->material_desc;
			$brand_id = $row->brand_id;
			$brand_name = $row->brand_name;
			$bc_id = $row->bc_id;
			$bc_name = $row->bc_name;
			$material_group_name = $row->material_group_name;

			
			//Get SKU costing base on generated above and get raw materials
			$check_sku = $this->admin->get_query("SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details, b.total_cost, b.ave_wgt, f.material_group_name,

				IFNULL((SELECT y.sales_live_alw_det_value FROM sales_live_alw_tbl x, sales_live_alw_detail_tbl y WHERE x.sales_live_alw_id = y.sales_live_alw_id AND x.sales_live_alw_status = 1 AND y.sales_live_alw_det_status = 1 AND sales_live_alw_det_date = '" . $date . "' AND x.bc_id = " . $bc_id . "), 1) as live_ave_wt

			 FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e, material_group_tbl f WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= " . $material_id . " AND a.prod_id = d.material_id AND b.article_id = e.material_id AND d.material_group_id = f.material_group_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = " . $bc_id . " AND b.prod_trans_dtl_date = '" . $date . "' AND a.brand_id = " . $brand_id . " AND a.process_type_id = 5 AND c.component_type = 'COST OF SALES'", TRUE);

			$total_cost = 0;
			$dressed_ave_wt = 1;
			$live_ave_wt = 1;
			$live_cost = 0;

			if(!empty($check_sku)){
				$total_cost = 0;
				$raw_mat = $check_sku->sku_material_id;
				$raw_mat_desc = $check_sku->mat_details;
				$live_ave_wt = $check_sku->live_ave_wt;
				$dressed_ave_wt = $check_sku->ave_wgt;
				$material_group = $check_sku->material_group_name;

				//Check if existing in external
				$join_ext = array(
					'ext_prod_trans_dtl_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id AND a.ext_prod_trans_status = 1 AND b.ext_prod_trans_dtl_status = 1 AND a.bc_id = '. $bc_id . ' AND b.trans_dtl_date = "' . $date . '" AND a.material_id = ' . $raw_mat,
				);

				$check_ext_prod = $this->admin->check_join('ext_prod_trans_tbl a', $join_ext, TRUE);
				if($check_ext_prod['result'] == TRUE){
					$cost = $check_ext_prod['info']->cost;
					$ave_wgt = $check_ext_prod['info']->ave_wgt;
					$dressed_ave_wt = $ave_wgt;
					$total_cost = $cost;
				}else{
					$raw_mat_cost = 0;
					if($material_group == 'LIVE SALES'){
						$join_cost = array(
							'prod_trans_dtl_tbl b' => 'a.prod_trans_id = b.prod_trans_id AND a.prod_trans_status = 3 AND a.process_type_id != 5 AND b.article_type_id = 1 AND b.component_type_id = 2 AND b.prod_trans_dtl_status = 1 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND b.article_id = ' . $raw_mat
						);
						$check_cost = $this->admin->check_join('prod_trans_tbl a', $join_cost, TRUE);
						$raw_mat_cost = 0;
						if($check_cost['result'] == TRUE){
							$raw_mat_cost = $check_cost['info']->cost;
						}

					}elseif($material_group == 'BY-PRODUCTS' ||  $material_group == 'LIVER / GIZZARD'){
						$join_cost = array(
							'prod_trans_dtl_tbl b' => 'a.prod_trans_id = b.prod_trans_id AND a.prod_trans_status = 3 AND a.process_type_id != 5 AND b.article_type_id = 1 AND b.component_type_id = 4 AND b.prod_trans_dtl_status = 1 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND b.article_id = ' . $raw_mat
						);
						$check_cost = $this->admin->check_join('prod_trans_tbl a', $join_cost, TRUE);
						$raw_mat_cost = 0;
						if($check_cost['result'] == TRUE){
							$raw_mat_cost = $check_cost['info']->cost;
						}
					}else{
						$join_cost = array(
							'prod_trans_dtl_tbl b' => 'a.prod_trans_id = b.prod_trans_id AND a.prod_trans_status = 3 AND a.process_type_id != 5 AND b.article_type_id = 1 AND b.component_type_id = 1 AND b.prod_trans_dtl_status = 1 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND a.prod_id = ' . $raw_mat
						);
						$check_cost = $this->admin->check_join('prod_trans_tbl a', $join_cost, TRUE);
						$raw_mat_cost = 0;
						$ave_wgt = 1;
						if($check_cost['result'] == TRUE){
							$raw_mat_cost = $check_cost['info']->cost;
							$ave_wgt = $check_cost['info']->ave_wgt;
						}

						$dressed_ave_wt = $ave_wgt;
					}

					$total_cost = $raw_mat_cost;
				}

				$production_cost = $total_cost;
				
				
				$bom_total = 0;
				$bom_multiplier = 1;
				$bom_commision = 0;
				$bom_commision_type = 0;
					
				$join_bom = array('bom_summary_details_tbl b' => 'a.bom_summary_id = b.bom_summary_id AND a.bom_summary_status = 1 AND b.bom_summary_det_status = 1 AND a.bc_id = ' . $bc_id . ' AND a.brand_id = ' . $brand_id . ' AND a.material_id = ' . $material_id . ' AND b.bom_summary_det_date = "' . $date . '"');

				$check_bom = $this->admin->check_join('bom_summary_tbl a', $join_bom, TRUE);
				if($check_bom['result'] == TRUE){
					$bom_total = $check_bom['info']->bom_summary_det_total;
					$bom_multiplier = $check_bom['info']->bom_summary_det_multi;
					$bom_commision = $check_bom['info']->bom_summary_det_commision;
					$bom_commision_type = $check_bom['info']->amount_type_id;
				}

				$total_cost = $production_cost + $bom_total;
				$join_sales_item = array(
					'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
					'material_tbl c' => 'b.material_id = c.material_id AND c.material_id = ' . $material_id,
					'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
					'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
					'brand_tbl f' => 'e.brand_id = f.brand_id AND f.brand_id = ' . $brand_id,
					'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc_id,
					'sales_details_tbl h' => 'b.sales_item_id = h.sales_item_id AND h.sales_det_qty > 0 AND h.sales_det_date = "' . $date . '"'
				);
				if(empty($dressed_ave_wt)){
					$dressed_ave_wt = 1;
				}
				
				$get_sales_item = $this->admin->get_query('

					SELECT SUM(sales.overall_qty * (sales.price / sales.vat)) as net_sales, SUM(sales.overall_qty) as total_qty, SUM(sales.qty) as sales_qty, SUM(sales.sales_unit) sales_unit, asp, SUM(sales_commission) as customer_commission,
						IF(sales.material_group_name = "DRESSED", "' . $dressed_ave_wt . '", IF(sales.material_group_name = "LIVE SALES", "' . $live_ave_wt . '", 1)) as sales_weight, sales.brand_id

					FROM
						(SELECT
							f.brand_id,
							i.material_group_name,
						    c.material_desc,
						    (h.sales_det_qty) AS qty,
						    h.sales_det_asp, IF(c.vat_type_id = 1, 1.12, 1) vat,
						    
						    @total_qty :=(
						        CASE WHEN c.material_group_id = 2 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) WHEN c.material_id = 225 THEN(' . $live_ave_wt . ' * h.sales_det_qty) ELSE h.sales_det_qty
						    	END
							) AS overall_qty,
						(
						    h.sales_det_asp + IFNULL(
						        (
						        SELECT
						            n.price_adjustment_det_value
						        FROM
						            price_adjustment_tbl m,
						            price_adjustment_details_tbl n
						        WHERE
						            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
						    ),
						    0
						    )
						) - IFNULL(
						    (
						    SELECT
						        y.sales_tactical_det_price
						    FROM
						        sales_tactical_tbl w,
						        `sales_tactical_item_tbl` `x`,
						        sales_tactical_details_tbl y
						    WHERE
						        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
						),
						0
						) as price,

						(
							SELECT IF(
								z.amount_type_name = "PERCENT", (@total_qty * h.sales_det_asp) * (y.sales_commission_det_value / 100),
								IF(z.amount_type_name = "AMOUNT", @total_qty * y.sales_commission_det_value, 0)

							) FROM sales_commission_tbl x, sales_commission_details_tbl y, amount_type_tbl z WHERE x.sales_commission_id = y.sales_commission_id AND x.amount_type_id = z.amount_type_id AND x.sales_commission_status = 1 AND y.sales_commission_det_status = 1 AND x.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_commission_det_date = h.sales_det_date
						) as sales_commission,

						(h.sales_det_qty/j.sales_unit_equivalent) as sales_unit,

						h.sales_det_asp as asp

						FROM
						    `sales_tbl` `a`
						JOIN `sales_item_tbl` `b` ON
						    `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1
						JOIN `material_tbl` `c` ON
						    `b`.`material_id` = `c`.`material_id` AND `c`.`material_id` = ' . $material_id . '
						JOIN `outlet_tbl` `d` ON
						    `a`.`outlet_id` = `d`.`outlet_id`
						JOIN `outlet_brand_tbl` `e` ON
						    `d`.`outlet_id` = `e`.`outlet_id` AND `e`.`outlet_brand_status` = 1
						JOIN `brand_tbl` `f` ON
						    `e`.`brand_id` = `f`.`brand_id` AND `f`.`brand_id` = ' . $brand_id . '
						JOIN `bc_tbl` `g` ON
						    `d`.`bc_id` = `g`.`bc_id` AND `g`.`bc_id` = ' . $bc_id . '
						JOIN `sales_details_tbl` `h` ON
						    `b`.`sales_item_id` = `h`.`sales_item_id` AND `h`.`sales_det_qty` > 0 AND `h`.`sales_det_date` = "' . $date . '"
						JOIN `material_group_tbl` `i` ON `c`.`material_group_id` = `i`.`material_group_id`

						JOIN material_unit_tbl j ON c.material_id = j.material_id AND j.material_unit_status = 1

						 ) as sales', TRUE);


				$net_sales = 0;
				$total_qty = 0;
				$sales_unit = 0;
				$variable = 0;
				$cm = 0;
				$commission = 0;
				$total_sales = 0;
				$customer_commission = 0;
				if(!empty($get_sales_item)){
					$sales_qty = $get_sales_item->sales_qty;
					$total_qty = $get_sales_item->total_qty;
					$net_sales = $get_sales_item->net_sales;
					$sales_weight = $get_sales_item->sales_weight;
					$sales_unit = $get_sales_item->sales_unit;
					$total_sales = $get_sales_item->asp * $total_qty;
					$customer_commission = $get_sales_item->customer_commission;

					if($material_id == 225){
						$variable = $total_cost * $total_qty;
						if($bom_commision_type == 1){ //Percent
							if($bom_commision > 0){
								$commission = $total_sales * ($bom_commision / 100);
							}else{
								$commission = 0;
							}
						}elseif($bom_commision_type == 2){
							$commission = $total_qty * $bom_commision;
						}
					}else{
						$variable = $total_cost * $total_qty;
						if($bom_commision_type == 1){ //Percent
							if($bom_commision > 0){
								$commission = $total_sales * ($bom_commision / 100);
							}else{
								$commission = 0;
							}
						}elseif($bom_commision_type == 2){
							$commission = $total_qty * $bom_commision;
						}
					}


					if(is_null($net_sales)){
						$net_sales = 0;
					}

					$cm = $net_sales - $variable;

					$overall_commission += $commission;
					$overall_customer_commission += $customer_commission;

					$overall_variable += $variable;
					$overall_cm += $cm;
					$overall_net_sales += $net_sales;
					$overall_sales_unit += $sales_unit;

					$where_summary = array(
						'dashboard_bc_trans_id' => $trans_id,
						'bc_id' => $bc_id,
						'brand_id' => $brand_id,
						'material_id' => $material_id,
						'dashboard_brand_summary_date' => $date,
						'dashboard_brand_summary_status' => 1
					);

					$check_summary = $this->admin->check_data('dashboard_brand_summary_tbl', $where_summary, TRUE);
					if($check_summary['result'] == TRUE){
						$dashboard_brand_summary_id = $check_summary['info']->dashboard_brand_summary_id;

						$where_brand_noi = array('dashboard_brand_summary_id' => $dashboard_brand_summary_id);
						$set_brand_noi = array(
							'dashboard_brand_summary_noi' => $cm,
							'dashboard_brand_summary_net_sales' => $net_sales,
							'dashboard_brand_summary_sales_unit' => $sales_unit,
							'dashboard_brand_summary_variable_cost' => $variable + $commission + $customer_commission,
							'dashboard_brand_summary_status' => 1
						);

						$insert_brand_noi = $this->admin->update_data('dashboard_brand_summary_tbl', $set_brand_noi, $where_brand_noi);
					}else{
						
						if($sales_unit == null){
							$sales_unit = 0;
						}


						$set_brand_noi = array(
							'dashboard_bc_trans_id' => $trans_id,
							'bc_id' => $bc_id,
							'brand_id' => $brand_id,
							'material_id' => $material_id,
							'dashboard_brand_summary_date' => $date,
							'dashboard_brand_summary_noi' => $cm,
							'dashboard_brand_summary_net_sales' => $net_sales,
							'dashboard_brand_summary_sales_unit' => $sales_unit,
							'dashboard_brand_summary_variable_cost' => $variable + $commission + $customer_commission,
							'dashboard_brand_summary_added' => date_now(),
							'dashboard_brand_summary_status' => 1
						);

						$insert_brand_noi = $this->admin->insert_data('dashboard_brand_summary_tbl', $set_brand_noi);
					}

					$this->_sales_unit_allocation($trans_id, $material_id, $bc_id, $brand_id, $date, $sales_unit);

					$total_commission = 0;
					$sales_kgs = 0;
					if($sales_qty > 0){
						$total_commission = $commission + $customer_commission;

						if($material_group_name == 'DRESSED'){
							$sales_kgs = $total_qty;
						}

						$get_variable = $this->_variable_cost($trans_id,$material_id, $material_group_name, $bc_id, $brand_id, $date, $sales_qty, $sales_kgs, $customer_commission, $production_cost);

						$pass_on_price = $get_variable['pass_on_price'];
						$overall_variable += $pass_on_price;
					}

				}else{
					
				}
				
				$total_cost = 0;
				$bom_multiplier = 0;
			}else{

				$production_cost = 0;
				
				
				$bom_total = 0;
				$bom_multiplier = 1;
				$bom_commision = 0;
				$bom_commision_type = 0;
					
				$join_bom = array('bom_summary_details_tbl b' => 'a.bom_summary_id = b.bom_summary_id AND a.bom_summary_status = 1 AND b.bom_summary_det_status = 1 AND a.bc_id = ' . $bc_id . ' AND a.brand_id = ' . $brand_id . ' AND a.material_id = ' . $material_id . ' AND b.bom_summary_det_date = "' . $date . '"');

				$check_bom = $this->admin->check_join('bom_summary_tbl a', $join_bom, TRUE);
				if($check_bom['result'] == TRUE){
					$bom_total = $check_bom['info']->bom_summary_det_total;
					$bom_multiplier = $check_bom['info']->bom_summary_det_multi;
					$bom_commision = $check_bom['info']->bom_summary_det_commision;
					$bom_commision_type = $check_bom['info']->amount_type_id;
				}

				$total_cost = $production_cost + $bom_total;
				$join_sales_item = array(
					'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
					'material_tbl c' => 'b.material_id = c.material_id AND c.material_id = ' . $material_id,
					'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
					'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
					'brand_tbl f' => 'e.brand_id = f.brand_id AND f.brand_id = ' . $brand_id,
					'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc_id,
					'sales_details_tbl h' => 'b.sales_item_id = h.sales_item_id AND h.sales_det_qty > 0 AND h.sales_det_date = "' . $date . '"'
				);
				if(empty($dressed_ave_wt)){
					$dressed_ave_wt = 1;
				}
				
				$get_sales_item = $this->admin->get_query('

					SELECT SUM(sales.overall_qty * (sales.price / sales.vat)) as net_sales, SUM(sales.overall_qty) as total_qty, SUM(sales.qty) as sales_qty, SUM(sales.sales_unit) sales_unit, asp, SUM(sales_commission) as customer_commission,
						IF(sales.material_group_name = "DRESSED", "' . $dressed_ave_wt . '", IF(sales.material_group_name = "LIVE SALES", "' . $live_ave_wt . '", 1)) as sales_weight, sales.brand_id

					FROM
						(SELECT
							f.brand_id,
							i.material_group_name,
						    c.material_desc,
						    (h.sales_det_qty) AS qty,
						    h.sales_det_asp, IF(c.vat_type_id = 1, 1.12, 1) vat,
						    
						    @total_qty :=(
						        CASE WHEN c.material_group_id = 2 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) WHEN c.material_id = 225 THEN(' . $live_ave_wt . ' * h.sales_det_qty) ELSE h.sales_det_qty
						    	END
							) AS overall_qty,
						(
						    h.sales_det_asp + IFNULL(
						        (
						        SELECT
						            n.price_adjustment_det_value
						        FROM
						            price_adjustment_tbl m,
						            price_adjustment_details_tbl n
						        WHERE
						            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
						    ),
						    0
						    )
						) - IFNULL(
						    (
						    SELECT
						        y.sales_tactical_det_price
						    FROM
						        sales_tactical_tbl w,
						        `sales_tactical_item_tbl` `x`,
						        sales_tactical_details_tbl y
						    WHERE
						        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
						),
						0
						) as price,

						(
							SELECT IF(
								z.amount_type_name = "PERCENT", (@total_qty * h.sales_det_asp) * (y.sales_commission_det_value / 100),
								IF(z.amount_type_name = "AMOUNT", @total_qty * y.sales_commission_det_value, 0)

							) FROM sales_commission_tbl x, sales_commission_details_tbl y, amount_type_tbl z WHERE x.sales_commission_id = y.sales_commission_id AND x.amount_type_id = z.amount_type_id AND x.sales_commission_status = 1 AND y.sales_commission_det_status = 1 AND x.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_commission_det_date = h.sales_det_date
						) as sales_commission,

						(h.sales_det_qty/j.sales_unit_equivalent) as sales_unit,

						h.sales_det_asp as asp

						FROM
						    `sales_tbl` `a`
						JOIN `sales_item_tbl` `b` ON
						    `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1
						JOIN `material_tbl` `c` ON
						    `b`.`material_id` = `c`.`material_id` AND `c`.`material_id` = ' . $material_id . '
						JOIN `outlet_tbl` `d` ON
						    `a`.`outlet_id` = `d`.`outlet_id`
						JOIN `outlet_brand_tbl` `e` ON
						    `d`.`outlet_id` = `e`.`outlet_id` AND `e`.`outlet_brand_status` = 1
						JOIN `brand_tbl` `f` ON
						    `e`.`brand_id` = `f`.`brand_id` AND `f`.`brand_id` = ' . $brand_id . '
						JOIN `bc_tbl` `g` ON
						    `d`.`bc_id` = `g`.`bc_id` AND `g`.`bc_id` = ' . $bc_id . '
						JOIN `sales_details_tbl` `h` ON
						    `b`.`sales_item_id` = `h`.`sales_item_id` AND `h`.`sales_det_qty` > 0 AND `h`.`sales_det_date` = "' . $date . '"
						JOIN `material_group_tbl` `i` ON `c`.`material_group_id` = `i`.`material_group_id`

						JOIN material_unit_tbl j ON c.material_id = j.material_id AND j.material_unit_status = 1

						 ) as sales', TRUE);


				$net_sales = 0;
				$total_qty = 0;
				$sales_unit = 0;
				$variable = 0;
				$cm = 0;
				$commission = 0;
				$total_sales = 0;
				$customer_commission = 0;
				if(!empty($get_sales_item)){
					$sales_qty = $get_sales_item->sales_qty;
					$total_qty = $get_sales_item->total_qty;
					$net_sales = $get_sales_item->net_sales;
					$sales_weight = $get_sales_item->sales_weight;
					$sales_unit = $get_sales_item->sales_unit;
					$total_sales = $get_sales_item->asp * $total_qty;
					$customer_commission = $get_sales_item->customer_commission;

					if($material_id == 225){
						$variable = $total_cost * $total_qty;
						if($bom_commision_type == 1){ //Percent
							if($bom_commision > 0){
								$commission = $total_sales * ($bom_commision / 100);
							}else{
								$commission = 0;
							}
						}elseif($bom_commision_type == 2){
							$commission = $total_qty * $bom_commision;
						}
					}else{
						$variable = $total_cost * $total_qty;
						if($bom_commision_type == 1){ //Percent
							if($bom_commision > 0){
								$commission = $total_sales * ($bom_commision / 100);
							}else{
								$commission = 0;
							}
						}elseif($bom_commision_type == 2){
							$commission = $total_qty * $bom_commision;
						}
					}


					if(is_null($net_sales)){
						$net_sales = 0;
					}

					$cm = $net_sales - $variable;

					$overall_commission += $commission;
					$overall_customer_commission += $customer_commission;

					$overall_variable += $variable;
					$overall_cm += $cm;
					$overall_net_sales += $net_sales;
					$overall_sales_unit += $sales_unit;

					$where_summary = array(
						'dashboard_bc_trans_id' => $trans_id,
						'bc_id' => $bc_id,
						'brand_id' => $brand_id,
						'material_id' => $material_id,
						'dashboard_brand_summary_date' => $date,
						'dashboard_brand_summary_status' => 1
					);

					$check_summary = $this->admin->check_data('dashboard_brand_summary_tbl', $where_summary, TRUE);
					if($check_summary['result'] == TRUE){
						$dashboard_brand_summary_id = $check_summary['info']->dashboard_brand_summary_id;

						$where_brand_noi = array('dashboard_brand_summary_id' => $dashboard_brand_summary_id);
						$set_brand_noi = array(
							'dashboard_brand_summary_noi' => $cm,
							'dashboard_brand_summary_net_sales' => $net_sales,
							'dashboard_brand_summary_sales_unit' => $sales_unit,
							'dashboard_brand_summary_variable_cost' => $variable + $commission + $customer_commission,
							'dashboard_brand_summary_status' => 1
						);

						$insert_brand_noi = $this->admin->update_data('dashboard_brand_summary_tbl', $set_brand_noi, $where_brand_noi);
					}else{
						
						if($sales_unit == null){
							$sales_unit = 0;
						}


						$set_brand_noi = array(
							'dashboard_bc_trans_id' => $trans_id,
							'bc_id' => $bc_id,
							'brand_id' => $brand_id,
							'material_id' => $material_id,
							'dashboard_brand_summary_date' => $date,
							'dashboard_brand_summary_noi' => $cm,
							'dashboard_brand_summary_net_sales' => $net_sales,
							'dashboard_brand_summary_sales_unit' => $sales_unit,
							'dashboard_brand_summary_variable_cost' => $variable + $commission + $customer_commission,
							'dashboard_brand_summary_added' => date_now(),
							'dashboard_brand_summary_status' => 1
						);

						$insert_brand_noi = $this->admin->insert_data('dashboard_brand_summary_tbl', $set_brand_noi);
					}

					$this->_sales_unit_allocation($trans_id, $material_id, $bc_id, $brand_id, $date, $sales_unit);

					$total_commission = 0;
					$sales_kgs = 0;
					$pass_on_price = 0;
					if($sales_qty > 0){
						$total_commission = $commission + $customer_commission;

						if($material_group_name == 'DRESSED'){
							$sales_kgs = $total_qty;
						}

						$get_variable = $this->_variable_cost($trans_id,$material_id, $material_group_name, $bc_id, $brand_id, $date, $sales_qty, $sales_kgs, $customer_commission, $production_cost);

						$pass_on_price = $get_variable['pass_on_price'];
						$overall_variable += $pass_on_price;
					}
				}else{
					
				}
				
				$total_cost = 0;
				$bom_multiplier = 0;
			}
		}

		$data['overall_cm'] = $overall_cm;
		$data['variable_cost'] = $overall_variable + $overall_commission + $overall_customer_commission;
		$data['net_sales'] = $overall_net_sales;
		$data['sales_unit'] = $overall_sales_unit;
		$data['commission'] = $overall_commission;
		$data['customer_commission'] = $overall_customer_commission;
		return $data;
	}*/

	public function get_noi_main3($trans_id, $bc_id, $date, $get_material){
		
		//$info = $this->_require_login();

 		$bc = $bc_id;		
		$total_cm = 0;
		$overall_cm = 0;
		$total_cost = 0;
		$total_variable = 0;
		$net_sales = 0;
		$total_qty = 0;
		$total_kgs = 0;

		$overall_variable = 0;
		$overall_cm = 0;
		$overall_net_sales = 0;
		$overall_sales_unit = 0;
		$overall_commission = 0;
		$overall_customer_commission = 0;
		$live_sales_alw = 1;
		$brand_summary = array();
		foreach($get_material as $row){
			$material_id = $row->mat_id;
			$material_code = $row->material_code;
			$material_desc = $row->material_desc;
			$brand_id = $row->brand_id;
			$brand_name = $row->brand_name;
			$bc_id = $row->bc_id;
			$bc_name = $row->bc_name;
			$material_group_name = $row->material_group_name;

			
			//Get SKU costing base on generated above and get raw materials
			$check_sku = $this->admin->get_query("SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details, b.total_cost, b.ave_wgt, f.material_group_name,

				IFNULL((SELECT y.sales_live_alw_det_value FROM sales_live_alw_tbl x, sales_live_alw_detail_tbl y WHERE x.sales_live_alw_id = y.sales_live_alw_id AND x.sales_live_alw_status = 1 AND y.sales_live_alw_det_status = 1 AND sales_live_alw_det_date = '" . $date . "' AND x.bc_id = " . $bc_id . "), 1) as live_ave_wt

			 FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e, material_group_tbl f WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= " . $material_id . " AND a.prod_id = d.material_id AND b.article_id = e.material_id AND d.material_group_id = f.material_group_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = " . $bc_id . " AND b.prod_trans_dtl_date = '" . $date . "' AND a.brand_id = " . $brand_id . " AND a.process_type_id = 5 AND b.prod_trans_dtl_status <> 5 AND c.component_type = 'COST OF SALES'", TRUE);

			$total_cost = 0;
			$dressed_ave_wt = 1;
			$live_ave_wt = 1;
			$live_cost = 0;

			if(!empty($check_sku)){
				$total_cost = 0;
				$raw_mat = $check_sku->sku_material_id;
				$raw_mat_desc = $check_sku->mat_details;
				$live_ave_wt = $check_sku->live_ave_wt;
				$dressed_ave_wt = $check_sku->ave_wgt;
				$material_group = $check_sku->material_group_name;

				//Check if existing in external
				$join_ext = array(
					'ext_prod_trans_dtl_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id AND a.ext_prod_trans_status = 1 AND b.ext_prod_trans_dtl_status = 1 AND a.bc_id = '. $bc_id . ' AND b.trans_dtl_date = "' . $date . '" AND a.material_id = ' . $raw_mat,
				);

				$check_ext_prod = $this->admin->check_join('ext_prod_trans_tbl a', $join_ext, TRUE);
				if($check_ext_prod['result'] == TRUE){
					$cost = $check_ext_prod['info']->cost;
					$ave_wgt = $check_ext_prod['info']->ave_wgt;
					$dressed_ave_wt = $ave_wgt;
					$total_cost = $cost;
				}else{
					$raw_mat_cost = 0;
					if($material_group == 'LIVE SALES'){
						$join_cost = array(
							'prod_trans_dtl_tbl b' => 'a.prod_trans_id = b.prod_trans_id AND a.prod_trans_status = 3 AND a.process_type_id != 5 AND b.article_type_id = 1 AND b.component_type_id = 2 AND b.prod_trans_dtl_status = 1 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND b.article_id = ' . $raw_mat
						);
						$check_cost = $this->admin->check_join('prod_trans_tbl a', $join_cost, TRUE);
						$raw_mat_cost = 0;
						if($check_cost['result'] == TRUE){
							$raw_mat_cost = $check_cost['info']->cost;
						}

					}elseif($material_group == 'BY-PRODUCTS' ||  $material_group == 'LIVER / GIZZARD'){
						$join_cost = array(
							'prod_trans_dtl_tbl b' => 'a.prod_trans_id = b.prod_trans_id AND a.prod_trans_status = 3 AND a.process_type_id != 5 AND b.article_type_id = 1 AND b.component_type_id = 4 AND b.prod_trans_dtl_status = 1 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND b.article_id = ' . $raw_mat
						);
						$check_cost = $this->admin->check_join('prod_trans_tbl a', $join_cost, TRUE);
						$raw_mat_cost = 0;
						if($check_cost['result'] == TRUE){
							$raw_mat_cost = $check_cost['info']->cost;
						}
					}else{
						$join_cost = array(
							'prod_trans_dtl_tbl b' => 'a.prod_trans_id = b.prod_trans_id AND a.prod_trans_status = 3 AND a.process_type_id != 5 AND b.article_type_id = 1 AND b.component_type_id = 1 AND b.prod_trans_dtl_status = 1 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND a.prod_id = ' . $raw_mat
						);
						$check_cost = $this->admin->check_join('prod_trans_tbl a', $join_cost, TRUE);
						$raw_mat_cost = 0;
						$ave_wgt = 1;
						if($check_cost['result'] == TRUE){
							$raw_mat_cost = $check_cost['info']->cost;
							$ave_wgt = $check_cost['info']->ave_wgt;
						}

						$dressed_ave_wt = $ave_wgt;
					}

					$total_cost = $raw_mat_cost;
				}

				$production_cost = $total_cost;
				
				
				$bom_total = 0;
				$bom_multiplier = 1;
				$bom_commision = 0;
				$bom_commision_type = 0;
					
				$join_bom = array('bom_summary_details_tbl b' => 'a.bom_summary_id = b.bom_summary_id AND a.bom_summary_status = 1 AND b.bom_summary_det_status = 1 AND a.bc_id = ' . $bc_id . ' AND a.brand_id = ' . $brand_id . ' AND a.material_id = ' . $material_id . ' AND b.bom_summary_det_date = "' . $date . '"');

				$check_bom = $this->admin->check_join('bom_summary_tbl a', $join_bom, TRUE);
				if($check_bom['result'] == TRUE){
					$bom_total = $check_bom['info']->bom_summary_det_total;
					$bom_multiplier = $check_bom['info']->bom_summary_det_multi;
					$bom_commision = $check_bom['info']->bom_summary_det_commision;
					$bom_commision_type = $check_bom['info']->amount_type_id;
				}

				$total_cost = $production_cost + $bom_total;
				$join_sales_item = array(
					'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
					'material_tbl c' => 'b.material_id = c.material_id AND c.material_id = ' . $material_id,
					'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
					'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
					'brand_tbl f' => 'e.brand_id = f.brand_id AND f.brand_id = ' . $brand_id,
					'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc_id,
					'sales_details_tbl h' => 'b.sales_item_id = h.sales_item_id AND h.sales_det_qty > 0 AND h.sales_det_date = "' . $date . '"'
				);
				if(empty($dressed_ave_wt) || $dressed_ave_wt <= 0){
					$dressed_ave_wt = 1;
				}
				$sql = '

				SELECT IFNULL(SUM(sales.overall_qty * (sales.price / sales.vat)), 0) as net_sales, IFNULL(SUM(sales.overall_qty), 0) as total_qty, IFNULL(SUM(sales.qty), 0) as sales_qty, IFNULL(SUM(sales.sales_unit), 0) sales_unit, asp, IFNULL(SUM(sales_commission), 0) as customer_commission,
					IF(sales.material_group_name = "DRESSED", "' . $dressed_ave_wt . '", IF(sales.material_group_name = "LIVE SALES", "' . $live_ave_wt . '", 1)) as sales_weight, sales.brand_id, sales.outlet_id

				FROM
					(SELECT
						d.outlet_id,
						f.brand_id,
						i.material_group_name,
						c.material_desc,
						(h.sales_det_qty) AS qty,
						h.sales_det_asp, IF(c.vat_type_id = 1, 1.12, 1) vat,
						
						@total_qty :=(
							CASE WHEN c.material_group_id = 2 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) WHEN c.material_id = 225 THEN(' . $live_ave_wt . ' * h.sales_det_qty) ELSE h.sales_det_qty
							END
						) AS overall_qty,
					(
						h.sales_det_asp + IFNULL(
							(
							SELECT
								n.price_adjustment_det_value
							FROM
								price_adjustment_tbl m,
								price_adjustment_details_tbl n
							WHERE
								m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
						),
						0
						)
					) - IFNULL(
						(
						SELECT
							y.sales_tactical_det_price
						FROM
							sales_tactical_tbl w,
							`sales_tactical_item_tbl` `x`,
							sales_tactical_details_tbl y
						WHERE
							w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
					),
					0
					) as price,

					(
						SELECT IF(
							z.amount_type_name = "PERCENT", (@total_qty * h.sales_det_asp) * (y.sales_commission_det_value / 100),
							IF(z.amount_type_name = "AMOUNT", @total_qty * y.sales_commission_det_value, 0)

						) FROM sales_commission_tbl x, sales_commission_details_tbl y, amount_type_tbl z WHERE x.sales_commission_id = y.sales_commission_id AND x.amount_type_id = z.amount_type_id AND x.sales_commission_status = 1 AND y.sales_commission_det_status = 1 AND x.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_commission_det_date = h.sales_det_date
					) as sales_commission,

					(h.sales_det_qty/j.sales_unit_equivalent) as sales_unit,

					h.sales_det_asp as asp

					FROM
						`sales_tbl` `a`
					JOIN `sales_item_tbl` `b` ON
						`a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1
					JOIN `material_tbl` `c` ON
						`b`.`material_id` = `c`.`material_id` AND `c`.`material_id` = ' . $material_id . '
					JOIN `outlet_tbl` `d` ON
						`a`.`outlet_id` = `d`.`outlet_id`
					JOIN `outlet_brand_tbl` `e` ON
						`d`.`outlet_id` = `e`.`outlet_id` AND `e`.`outlet_brand_status` = 1
					JOIN `brand_tbl` `f` ON
						`e`.`brand_id` = `f`.`brand_id` AND `f`.`brand_id` = ' . $brand_id . '
					JOIN `bc_tbl` `g` ON
						`d`.`bc_id` = `g`.`bc_id` AND `g`.`bc_id` = ' . $bc_id . '
					JOIN `sales_details_tbl` `h` ON
						`b`.`sales_item_id` = `h`.`sales_item_id` AND `h`.`sales_det_qty` > 0 AND `h`.`sales_det_date` = "' . $date . '"
					JOIN `material_group_tbl` `i` ON `c`.`material_group_id` = `i`.`material_group_id`

					JOIN material_unit_tbl j ON c.material_id = j.material_id AND j.material_unit_status = 1

					 ) as sales

					GROUP BY sales.outlet_id
				';
				// return $sql;
				$get_sales_item = $this->admin->get_query($sql);


				$sales_qty = 0;
				$net_sales = 0;
				$total_qty = 0;
				$sales_unit = 0;
				$sales_weight = 0;;
				$variable = 0;
				$cm = 0;
				$commission = 0;
				$total_sales = 0;
				$customer_commission = 0;

				foreach($get_sales_item as $row_cust){
					$cust_sales_qty = $row_cust->sales_qty;
					$cust_total_qty = $row_cust->total_qty;
					$cust_net_sales = $row_cust->net_sales;
					$cust_sales_weight = $row_cust->sales_weight;
					$cust_sales_unit = $row_cust->sales_unit;
					$cust_total_sales = $row_cust->asp * $cust_total_qty;
					$cust_customer_commission = $row_cust->customer_commission;

					$outlet_id = $row_cust->outlet_id;

					$cust_commission = 0;

					if($material_id == 225){
						$cust_variable = $total_cost * $cust_total_qty;
						if($bom_commision_type == 1){ //Percent
							if($bom_commision > 0){
								$cust_commission = $cust_total_sales * ($bom_commision / 100);
							}else{
								$cust_commission = 0;
							}
						}elseif($bom_commision_type == 2){
							$cust_commission = $cust_total_qty * $bom_commision;
						}
					}else{
						$cust_variable = $total_cost * $cust_total_qty;
						if($bom_commision_type == 1){ //Percent
							if($bom_commision > 0){
								$cust_commission = $cust_total_sales * ($bom_commision / 100);
							}else{
								$cust_commission = 0;
							}
						}elseif($bom_commision_type == 2){
							$cust_commission = $cust_total_qty * $bom_commision;
						}
					}

					

					$cust_cm = $cust_net_sales - $cust_variable;

					$set_cust_noi = array(
						'dashboard_bc_trans_id' => $trans_id,
						'outlet_id' => $outlet_id,
						'bc_id' => $bc_id,
						'brand_id' => $brand_id,
						'material_id' => $material_id,
						'dashboard_cust_summary_date' => $date,
						'dashboard_cust_summary_noi' => $cust_cm,
						'dashboard_cust_summary_net_sales' => $cust_net_sales,
						'dashboard_cust_summary_sales_unit' => $cust_sales_unit,
						'dashboard_cust_summary_variable_cost' => $cust_variable + $cust_commission + $cust_customer_commission,
						'dashboard_cust_summary_added' => date_now(),
						'dashboard_cust_summary_status' => 1
					);

					$insert_cust_noi = $this->admin->insert_data('dashboard_customer_summary_tbl', $set_cust_noi);

					$sales_qty += $cust_sales_qty;
					$total_qty += $cust_total_qty;
					$net_sales += $cust_net_sales;
					$sales_weight += $cust_sales_weight;
					$sales_unit += $cust_sales_unit;
					$total_sales += $cust_total_sales;
					$customer_commission += $cust_customer_commission;

				}

				/*$sales_qty = $get_sales_item->sales_qty;
				$total_qty = $get_sales_item->total_qty;
				$net_sales = $get_sales_item->net_sales;
				$sales_weight = $get_sales_item->sales_weight;
				$sales_unit = $get_sales_item->sales_unit;
				$total_sales = $get_sales_item->asp * $total_qty;
				$customer_commission = $get_sales_item->customer_commission;*/

				if($material_id == 225){
					$variable = $total_cost * $total_qty;
					if($bom_commision_type == 1){ //Percent
						if($bom_commision > 0){
							$commission = $total_sales * ($bom_commision / 100);
						}else{
							$commission = 0;
						}
					}elseif($bom_commision_type == 2){
						$commission = $total_qty * $bom_commision;
					}
				}else{
					$variable = $total_cost * $total_qty;
					if($bom_commision_type == 1){ //Percent
						if($bom_commision > 0){
							$commission = $total_sales * ($bom_commision / 100);
						}else{
							$commission = 0;
						}
					}elseif($bom_commision_type == 2){
						$commission = $total_qty * $bom_commision;
					}
				}


				if(is_null($net_sales)){
					$net_sales = 0;
				}

				$cm = $net_sales - $variable;

				$overall_commission += $commission;
				$overall_customer_commission += $customer_commission;

				$overall_variable += $variable;
				$overall_cm += $cm;
				$overall_net_sales += $net_sales;
				$overall_sales_unit += $sales_unit;

				$where_summary = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'brand_id' => $brand_id,
					'material_id' => $material_id,
					'dashboard_brand_summary_date' => $date,
					'dashboard_brand_summary_status' => 1
				);

				$check_summary = $this->admin->check_data('dashboard_brand_summary_tbl', $where_summary, TRUE);
				if($check_summary['result'] == TRUE){
					$dashboard_brand_summary_id = $check_summary['info']->dashboard_brand_summary_id;

					$where_brand_noi = array('dashboard_brand_summary_id' => $dashboard_brand_summary_id);
					$set_brand_noi = array(
						'dashboard_brand_summary_noi' => $cm,
						'dashboard_brand_summary_net_sales' => $net_sales,
						'dashboard_brand_summary_sales_unit' => $sales_unit,
						'dashboard_brand_summary_variable_cost' => $variable + $commission + $customer_commission,
						'dashboard_brand_summary_status' => 1
					);

					$insert_brand_noi = $this->admin->update_data('dashboard_brand_summary_tbl', $set_brand_noi, $where_brand_noi);
				}else{
					
					if($sales_unit == null){
						$sales_unit = 0;
					}


					$set_brand_noi = array(
						'dashboard_bc_trans_id' => $trans_id,
						'bc_id' => $bc_id,
						'brand_id' => $brand_id,
						'material_id' => $material_id,
						'dashboard_brand_summary_date' => $date,
						'dashboard_brand_summary_noi' => $cm,
						'dashboard_brand_summary_net_sales' => $net_sales,
						'dashboard_brand_summary_sales_unit' => $sales_unit,
						'dashboard_brand_summary_variable_cost' => $variable + $commission + $customer_commission,
						'dashboard_brand_summary_added' => date_now(),
						'dashboard_brand_summary_status' => 1
					);

					$insert_brand_noi = $this->admin->insert_data('dashboard_brand_summary_tbl', $set_brand_noi);
				}

				$this->_sales_unit_allocation($trans_id, $material_id, $bc_id, $brand_id, $date, $sales_unit);

				$total_commission = 0;
				$sales_kgs = 0;
				if($sales_qty > 0){
					$total_commission = $commission + $customer_commission;

					if($material_group_name == 'DRESSED'){
						$sales_kgs = $total_qty;
					}

					$get_variable = $this->_variable_cost($trans_id,$material_id, $material_group_name, $bc_id, $brand_id, $date, $sales_qty, $sales_kgs, $customer_commission, $production_cost);

					$pass_on_price = $get_variable['pass_on_price'];
					$overall_variable += $pass_on_price;
				}
				
				$total_cost = 0;
				$bom_multiplier = 0;
			}else{

				$production_cost = 0;
				
				
				$bom_total = 0;
				$bom_multiplier = 1;
				$bom_commision = 0;
				$bom_commision_type = 0;
					
				$join_bom = array('bom_summary_details_tbl b' => 'a.bom_summary_id = b.bom_summary_id AND a.bom_summary_status = 1 AND b.bom_summary_det_status = 1 AND a.bc_id = ' . $bc_id . ' AND a.brand_id = ' . $brand_id . ' AND a.material_id = ' . $material_id . ' AND b.bom_summary_det_date = "' . $date . '"');

				$check_bom = $this->admin->check_join('bom_summary_tbl a', $join_bom, TRUE);
				if($check_bom['result'] == TRUE){
					$bom_total = $check_bom['info']->bom_summary_det_total;
					$bom_multiplier = $check_bom['info']->bom_summary_det_multi;
					$bom_commision = $check_bom['info']->bom_summary_det_commision;
					$bom_commision_type = $check_bom['info']->amount_type_id;
				}

				$total_cost = $production_cost + $bom_total;
				$join_sales_item = array(
					'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
					'material_tbl c' => 'b.material_id = c.material_id AND c.material_id = ' . $material_id,
					'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
					'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
					'brand_tbl f' => 'e.brand_id = f.brand_id AND f.brand_id = ' . $brand_id,
					'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc_id,
					'sales_details_tbl h' => 'b.sales_item_id = h.sales_item_id AND h.sales_det_qty > 0 AND h.sales_det_date = "' . $date . '"'
				);
				if(empty($dressed_ave_wt) || $dressed_ave_wt <= 0){
					$dressed_ave_wt = 1;
				}
				
				$get_sales_item = $this->admin->get_query('

					SELECT IFNULL(SUM(sales.overall_qty * (sales.price / sales.vat)), 0) as net_sales, IFNULL(SUM(sales.overall_qty), 0) as total_qty, IFNULL(SUM(sales.qty), 0) as sales_qty, IFNULL(SUM(sales.sales_unit), 0) sales_unit, asp, IFNULL(SUM(sales_commission), 0) as customer_commission,
						IF(sales.material_group_name = "DRESSED", "' . $dressed_ave_wt . '", IF(sales.material_group_name = "LIVE SALES", "' . $live_ave_wt . '", 1)) as sales_weight, sales.brand_id, sales.outlet_id

					FROM
						(SELECT
							d.outlet_id,
							f.brand_id,
							i.material_group_name,
						    c.material_desc,
						    (h.sales_det_qty) AS qty,
						    h.sales_det_asp, IF(c.vat_type_id = 1, 1.12, 1) vat,
						    
						    @total_qty :=(
						        CASE WHEN c.material_group_id = 2 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) WHEN c.material_id = 225 THEN(' . $live_ave_wt . ' * h.sales_det_qty) ELSE h.sales_det_qty
						    	END
							) AS overall_qty,
						(
						    h.sales_det_asp + IFNULL(
						        (
						        SELECT
						            n.price_adjustment_det_value
						        FROM
						            price_adjustment_tbl m,
						            price_adjustment_details_tbl n
						        WHERE
						            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
						    ),
						    0
						    )
						) - IFNULL(
						    (
						    SELECT
						        y.sales_tactical_det_price
						    FROM
						        sales_tactical_tbl w,
						        `sales_tactical_item_tbl` `x`,
						        sales_tactical_details_tbl y
						    WHERE
						        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
						),
						0
						) as price,

						(
							SELECT IF(
								z.amount_type_name = "PERCENT", (@total_qty * h.sales_det_asp) * (y.sales_commission_det_value / 100),
								IF(z.amount_type_name = "AMOUNT", @total_qty * y.sales_commission_det_value, 0)

							) FROM sales_commission_tbl x, sales_commission_details_tbl y, amount_type_tbl z WHERE x.sales_commission_id = y.sales_commission_id AND x.amount_type_id = z.amount_type_id AND x.sales_commission_status = 1 AND y.sales_commission_det_status = 1 AND x.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_commission_det_date = h.sales_det_date
						) as sales_commission,

						(h.sales_det_qty/j.sales_unit_equivalent) as sales_unit,

						h.sales_det_asp as asp

						FROM
						    `sales_tbl` `a`
						JOIN `sales_item_tbl` `b` ON
						    `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1
						JOIN `material_tbl` `c` ON
						    `b`.`material_id` = `c`.`material_id` AND `c`.`material_id` = ' . $material_id . '
						JOIN `outlet_tbl` `d` ON
						    `a`.`outlet_id` = `d`.`outlet_id`
						JOIN `outlet_brand_tbl` `e` ON
						    `d`.`outlet_id` = `e`.`outlet_id` AND `e`.`outlet_brand_status` = 1
						JOIN `brand_tbl` `f` ON
						    `e`.`brand_id` = `f`.`brand_id` AND `f`.`brand_id` = ' . $brand_id . '
						JOIN `bc_tbl` `g` ON
						    `d`.`bc_id` = `g`.`bc_id` AND `g`.`bc_id` = ' . $bc_id . '
						JOIN `sales_details_tbl` `h` ON
						    `b`.`sales_item_id` = `h`.`sales_item_id` AND `h`.`sales_det_qty` > 0 AND `h`.`sales_det_date` = "' . $date . '"
						JOIN `material_group_tbl` `i` ON `c`.`material_group_id` = `i`.`material_group_id`

						JOIN material_unit_tbl j ON c.material_id = j.material_id AND j.material_unit_status = 1

						
					) as sales

					GROUP BY sales.outlet_id
						'
				);

				$sales_qty = 0;
				$net_sales = 0;
				$total_qty = 0;
				$sales_unit = 0;
				$sales_weight = 0;;
				$variable = 0;
				$cm = 0;
				$commission = 0;
				$total_sales = 0;
				$customer_commission = 0;

				foreach($get_sales_item as $row_cust){
					$cust_sales_qty = $row_cust->sales_qty;
					$cust_total_qty = $row_cust->total_qty;
					$cust_net_sales = $row_cust->net_sales;
					$cust_sales_weight = $row_cust->sales_weight;
					$cust_sales_unit = $row_cust->sales_unit;
					$cust_total_sales = $row_cust->asp * $cust_total_qty;
					$cust_customer_commission = $row_cust->customer_commission;

					$outlet_id = $row_cust->outlet_id;

					$cust_commission = 0;

					if($material_id == 225){
						$cust_variable = $total_cost * $cust_total_qty;
						if($bom_commision_type == 1){ //Percent
							if($bom_commision > 0){
								$cust_commission = $cust_total_sales * ($bom_commision / 100);
							}else{
								$cust_commission = 0;
							}
						}elseif($bom_commision_type == 2){
							$cust_commission = $cust_total_qty * $bom_commision;
						}
					}else{
						$cust_variable = $total_cost * $cust_total_qty;
						if($bom_commision_type == 1){ //Percent
							if($bom_commision > 0){
								$cust_commission = $cust_total_sales * ($bom_commision / 100);
							}else{
								$cust_commission = 0;
							}
						}elseif($bom_commision_type == 2){
							$cust_commission = $cust_total_qty * $bom_commision;
						}
					}

					

					$cust_cm = $cust_net_sales - $cust_variable;

					$set_cust_noi = array(
						'dashboard_bc_trans_id' => $trans_id,
						'outlet_id' => $outlet_id,
						'bc_id' => $bc_id,
						'brand_id' => $brand_id,
						'material_id' => $material_id,
						'dashboard_cust_summary_date' => $date,
						'dashboard_cust_summary_noi' => $cust_cm,
						'dashboard_cust_summary_net_sales' => $cust_net_sales,
						'dashboard_cust_summary_sales_unit' => $cust_sales_unit,
						'dashboard_cust_summary_variable_cost' => $cust_variable + @$cust_commission + $cust_customer_commission,
						'dashboard_cust_summary_added' => date_now(),
						'dashboard_cust_summary_status' => 1
					);

					$insert_cust_noi = $this->admin->insert_data('dashboard_customer_summary_tbl', $set_cust_noi);

					$sales_qty += $cust_sales_qty;
					$total_qty += $cust_total_qty;
					$net_sales += $cust_net_sales;
					$sales_weight += $cust_sales_weight;
					$sales_unit += $cust_sales_unit;
					$total_sales += $cust_total_sales;
					$customer_commission += $cust_customer_commission;

				}

				/*$sales_qty = $get_sales_item->sales_qty;
				$total_qty = $get_sales_item->total_qty;
				$net_sales = $get_sales_item->net_sales;
				$sales_weight = $get_sales_item->sales_weight;
				$sales_unit = $get_sales_item->sales_unit;
				$total_sales = $get_sales_item->asp * $total_qty;
				$customer_commission = $get_sales_item->customer_commission;*/

				if($material_id == 225){
					$variable = $total_cost * $total_qty;
					if($bom_commision_type == 1){ //Percent
						if($bom_commision > 0){
							$commission = $total_sales * ($bom_commision / 100);
						}else{
							$commission = 0;
						}
					}elseif($bom_commision_type == 2){
						$commission = $total_qty * $bom_commision;
					}
				}else{
					$variable = $total_cost * $total_qty;
					if($bom_commision_type == 1){ //Percent
						if($bom_commision > 0){
							$commission = $total_sales * ($bom_commision / 100);
						}else{
							$commission = 0;
						}
					}elseif($bom_commision_type == 2){
						$commission = $total_qty * $bom_commision;
					}
				}


				if(is_null($net_sales)){
					$net_sales = 0;
				}

				$cm = $net_sales - $variable;

				$overall_commission += $commission;
				$overall_customer_commission += $customer_commission;

				$overall_variable += $variable;
				$overall_cm += $cm;
				$overall_net_sales += $net_sales;
				$overall_sales_unit += $sales_unit;

				$where_summary = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'brand_id' => $brand_id,
					'material_id' => $material_id,
					'dashboard_brand_summary_date' => $date,
					'dashboard_brand_summary_status' => 1
				);

				$check_summary = $this->admin->check_data('dashboard_brand_summary_tbl', $where_summary, TRUE);
				if($check_summary['result'] == TRUE){
					$dashboard_brand_summary_id = $check_summary['info']->dashboard_brand_summary_id;

					$where_brand_noi = array('dashboard_brand_summary_id' => $dashboard_brand_summary_id);
					$set_brand_noi = array(
						'dashboard_brand_summary_noi' => $cm,
						'dashboard_brand_summary_net_sales' => $net_sales,
						'dashboard_brand_summary_sales_unit' => $sales_unit,
						'dashboard_brand_summary_variable_cost' => $variable + $commission + $customer_commission,
						'dashboard_brand_summary_status' => 1
					);

					$insert_brand_noi = $this->admin->update_data('dashboard_brand_summary_tbl', $set_brand_noi, $where_brand_noi);
				}else{
					
					if($sales_unit == null){
						$sales_unit = 0;
					}


					$set_brand_noi = array(
						'dashboard_bc_trans_id' => $trans_id,
						'bc_id' => $bc_id,
						'brand_id' => $brand_id,
						'material_id' => $material_id,
						'dashboard_brand_summary_date' => $date,
						'dashboard_brand_summary_noi' => $cm,
						'dashboard_brand_summary_net_sales' => $net_sales,
						'dashboard_brand_summary_sales_unit' => $sales_unit,
						'dashboard_brand_summary_variable_cost' => $variable + $commission + $customer_commission,
						'dashboard_brand_summary_added' => date_now(),
						'dashboard_brand_summary_status' => 1
					);

					$insert_brand_noi = $this->admin->insert_data('dashboard_brand_summary_tbl', $set_brand_noi);
				}

				$this->_sales_unit_allocation($trans_id, $material_id, $bc_id, $brand_id, $date, $sales_unit);

				$total_commission = 0;
				$sales_kgs = 0;
				$pass_on_price = 0;
				if($sales_qty > 0){
					$total_commission = $commission + $customer_commission;

					if($material_group_name == 'DRESSED'){
						$sales_kgs = $total_qty;
					}

					$get_variable = $this->_variable_cost($trans_id,$material_id, $material_group_name, $bc_id, $brand_id, $date, $sales_qty, $sales_kgs, $customer_commission, $production_cost);

					$pass_on_price = $get_variable['pass_on_price'];
					$overall_variable += $pass_on_price;
				}
				
				$total_cost = 0;
				$bom_multiplier = 0;
			}
		}

		$data['overall_cm'] = $overall_cm;
		$data['variable_cost'] = $overall_variable + $overall_commission + $overall_customer_commission;
		$data['net_sales'] = $overall_net_sales;
		$data['sales_unit'] = $overall_sales_unit;
		$data['commission'] = $overall_commission;
		$data['customer_commission'] = $overall_customer_commission;
		return $data;
	}

	public function _sales_unit_allocation($trans_id, $material_id, $bc_id, $brand_id, $date, $sales_unit){

		$get_mat_allocation = $this->admin->get_data('material_allocation_tbl', array('material_id' => $material_id, 'material_allocation_status' => 1));
		
		foreach($get_mat_allocation as $row){

			$allocation_type = $row->allocation_type_id;
			$check_allocation = $this->admin->check_data('dashboard_bc_allocation_tbl', array('dashboard_bc_trans_id' => $trans_id,'bc_id' => $bc_id, 'brand_id' => $brand_id, 'allocation_type_id' => $allocation_type, 'dashboard_bc_allocation_date' => $date, 'dashboard_bc_allocation_status' => 1), TRUE);
			if($check_allocation['result'] == TRUE){
				$dashboard_bc_allocation_id = $check_allocation['info']->dashboard_bc_allocation_id;
				$dashboard_allocation = $check_allocation['info']->dashboard_bc_allocation_sales_unit;
				$dashboard_allocation += $sales_unit;

				$set_allocation = array('dashboard_bc_allocation_sales_unit' => $dashboard_allocation);
				$where_allocation = array('dashboard_bc_allocation_id' => $dashboard_bc_allocation_id);
				$update_allocation = $this->admin->update_data('dashboard_bc_allocation_tbl', $set_allocation, $where_allocation);

			}else{
				if($sales_unit == null){
					$sales_unit = 0;
				}

				$set_allocation = array(
					'dashboard_bc_trans_id' => $trans_id,
					'bc_id' => $bc_id,
					'brand_id' => $brand_id,
					'allocation_type_id' => $allocation_type,
					'dashboard_bc_allocation_date' => $date,
					'dashboard_bc_allocation_sales_unit' => $sales_unit,
					'dashboard_bc_allocation_added' => date_now(),
					'dashboard_bc_allocation_status' => 1
				);

				$insert_allocation = $this->admin->insert_data('dashboard_bc_allocation_tbl', $set_allocation);
			}
		}
	}

	public function _variable_cost($trans_id, $material_id, $material_group, $bc_id, $brand_id, $date, $sales_qty, $sales_kgs, $sales_commision, $production_cost){

		$where_cost = array('dashboard_bc_trans_id' => $trans_id, 'bc_id' => $bc_id, 'material_id' => $material_id, 'brand_id' => $brand_id, 'dashboard_variable_cost_date' => $date, 'dashboard_variable_cost_status' => 1);
		$check_cost = $this->admin->check_data('dashboard_variable_cost_tbl', $where_cost, TRUE);
		if($check_cost['result'] == TRUE){

			/*Update Variable Cost*/

			$variable_cost_id = $check_cost['info']->dashboard_variable_cost_id;
			$variable_cost_qty = $check_cost['info']->dashboard_variable_cost_qty;
			$variable_cost_kgs = $check_cost['info']->dashboard_variable_cost_kgs;

			$total_qty = $variable_cost_qty + $sales_qty;
			$total_kgs = $variable_cost_kgs + $sales_kgs;
			
			$set_var_cost = array(
				'dashboard_variable_cost_qty' => $total_qty,
				'dashboard_variable_cost_kgs' => $total_kgs
			);

			$where_var_cost = array('dashboard_variable_cost_id' => $variable_cost_id);
			$update_var_cost = $this->admin->update_data('dashboard_variable_cost_tbl', $set_var_cost, $where_var_cost);

		}else{

			/*Insert Variable Cost*/

			$total_qty = $sales_qty;
			$total_kgs = $sales_kgs;

			$set_var_cost = array(
				'dashboard_bc_trans_id' => $trans_id,
				'bc_id' => $bc_id,
				'material_id' => $material_id,
				'brand_id' => $brand_id,
				'dashboard_variable_cost_qty' => $total_qty,
				'dashboard_variable_cost_kgs' => $total_kgs,
				'dashboard_variable_cost_date' => $date,
				'dashboard_variable_cost_added' => date_now(),
				'dashboard_variable_cost_status' => 1
			);

			$insert_var_cost = $this->admin->insert_data('dashboard_variable_cost_tbl', $set_var_cost, TRUE);
			$variable_cost_id = $insert_var_cost['id'];
		}

		
		//Get Material BOM

		$get_bom = $this->db->query('
			SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, c.component_type_id, d.material_desc, d.material_id, e.material_desc as mat_details, b.rate, b.cost, b.amount_type_id FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= ' . $material_id . ' AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND a.brand_id = ' . $brand_id . ' AND a.process_type_id = 5 AND b.prod_trans_dtl_status <> 5 AND c.component_type NOT IN ("SALES REVENUE", "SALES COMMISSION", "COST OF SALES")

				UNION ALL

				SELECT e.service_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, c.component_type_id, d.material_desc, d.material_id, e.service_desc as mat_details, b.rate, b.cost, b.amount_type_id FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, services_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= ' . $material_id . ' AND a.prod_id = d.material_id AND b.article_id = e.service_id AND b.article_type_id = 2 AND a.prod_trans_status = 3 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND a.brand_id = ' . $brand_id . ' AND a.process_type_id = 5 AND b.prod_trans_dtl_status <> 5
		')->result();
		
		$bom_total = 0;
		$bom_multiplier = 1;
		$amount_type = 0;
		$pass_on_price = 0;
		foreach($get_bom as $row_bom){
			$bom_cost = $row_bom->cost;
			$bom_rate = $row_bom->rate;
			$component_type_id = $row_bom->component_type_id;

			if($bom_rate > 0){
				$bom_cost = $bom_cost / $bom_rate;
			}

			$percent = 0;
			if($row_bom->mat_details == 'PERCENT MARKUP'){
				if($production_cost > 0){
					if($row_bom->amount_type_id == 1){//Percent
						$percent = $bom_cost / 100;
						$bom_cost = $production_cost * $percent;
					}else{
						$bom_cost = $bom_cost;
					}
				}else{
					$bom_cost = 0;
				}

				if($material_group == 'DRESSED'){
					$pass_on_price += $sales_kgs * $bom_cost;
				}else{
					$pass_on_price += $sales_qty * $bom_cost;
				}

				/*echo $percent . '|' . $bom_cost . '|' . $production_cost . '|' . $sales_kgs . ' = ' . $pass_on_price;
				exit;*/
			}

			if($material_group == 'DRESSED'){
				$bom_total = $sales_kgs * $bom_cost;
			}else{
				$bom_total = $sales_qty * $bom_cost;
			}

			$set_var_cost_det = array(
				'dashboard_variable_cost_id' => $variable_cost_id,
				'component_type_id' => $component_type_id,
				'dashboard_variable_cost_det_amount' => $bom_total,
				'dashboard_variable_cost_det_added' => date_now(),
				'dashboard_variable_cost_det_status' => 1
			);

			$insert_var_cost_det = $this->admin->insert_data('dashboard_variable_cost_details_tbl', $set_var_cost_det);
		}

		
		/*Insert Commission*/

		if($sales_commision > 0){
			$set_var_cost_det = array(
				'dashboard_variable_cost_id' => $variable_cost_id,
				'component_type_id' => 23,
				'dashboard_variable_cost_det_amount' => $sales_commision,
				'dashboard_variable_cost_det_added' => date_now(),
				'dashboard_variable_cost_det_status' => 1
			);

			$insert_var_cost_det = $this->admin->insert_data('dashboard_variable_cost_details_tbl', $set_var_cost_det);
		}

		/*Insert Production Cost, Cost of Sales*/

		if($production_cost > 0){

			if($material_group == 'DRESSED'){
				$total_production_cost = $sales_kgs * $production_cost;
			}else{
				$total_production_cost = $sales_qty * $production_cost;	
			}

			
			$set_var_cost_det = array(
				'dashboard_variable_cost_id' => $variable_cost_id,
				'component_type_id' => 21,
				'dashboard_variable_cost_det_amount' => $total_production_cost,
				'dashboard_variable_cost_det_added' => date_now(),
				'dashboard_variable_cost_det_status' => 1
			);

			$insert_var_cost_det = $this->admin->insert_data('dashboard_variable_cost_details_tbl', $set_var_cost_det);
		}


		/*Insert Production Cost*/

		/*if($production_cost > 0){

			if($material_group == 'DRESSED'){
				$total_production_cost = $sales_kgs * $production_cost;
			}else{
				$total_production_cost = $sales_qty * $production_cost;	
			}

			
			$set_var_cost_det = array(
				'dashboard_variable_cost_id' => $variable_cost_id,
				'component_type_id' => 21,
				'dashboard_variable_cost_det_amount' => $total_production_cost,
				'dashboard_variable_cost_det_added' => date_now(),
				'dashboard_variable_cost_det_status' => 1
			);

			$insert_var_cost_det = $this->admin->insert_data('dashboard_variable_cost_details_tbl', $set_var_cost_det);
		}*/

		$data['pass_on_price'] = $pass_on_price;
		return $data;
	}

	public function opex_nationwide_bc2($trans_id, $bc_id, $year){
		//$info = $this->_require_login();

		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','4048M');

		$cost_center_id = $this->get_bc_cost_center($bc_id);

		$join_opex = array(
			'gl_transaction_item_tbl b' => 'a.gl_trans_item_id = b.gl_trans_item_id AND b.gl_trans_item_status = 1 AND a.gl_trans_det_status=1',
			'gl_transaction_tbl c' => 'b.gl_trans_id=c.gl_trans_id AND c.gl_trans_status = 1 AND c.gl_year = ' . $year,
			'gl_subgroup_tbl d' => 'b.gl_sub_id=d.gl_sub_id',
			'gl_group_tbl e' => 'd.gl_group_id = e.gl_group_id',
			'cost_center_tbl f' => 'b.cost_center_id = f.cost_center_id AND f.parent_id = ' . $cost_center_id,
			'cost_center_group_tbl g' => 'f.cost_center_group_id = g.cost_center_group_id',
			'cost_center_allocation_tbl h, LEFT' => 'f.cost_center_id = h.cost_center_id AND h.cost_center_allocation_status = 1'
		);

		$opex_bc_gl = $this->admin->get_join('gl_transaction_details_tbl a', $join_opex, FALSE, 'g.cost_center_group_id, b.gl_sub_id, a.opex_budget_date ASC', 'f.cost_center_id, g.cost_center_group_id, b.gl_sub_id, a.opex_budget_date', 'DATE(a.opex_budget_date) as date, g.cost_center_group_id, b.gl_sub_id, e.gl_group_name, d.gl_code, d.gl_sub_name, SUM(a.opex_amount) total_amount, h.allocation_type_id, f.cost_center_desc, f.cost_center_id');


		$opex_total = 0;
		foreach($opex_bc_gl as $row_gl){
			$cost_center_group_id = $row_gl->cost_center_group_id;
			$gl_sub_id = $row_gl->gl_sub_id;
			$date = $row_gl->date;
			$total_amount = $row_gl->total_amount;
			$allocation_type = $row_gl->allocation_type_id;

			$where_gl = 'cost_center_id = ' . $cost_center_id . ' AND cost_center_group_id = ' . $cost_center_group_id . ' AND gl_sub_id = ' . $gl_sub_id . ' AND dashboard_opex_date = "' . $date . '" AND dashboard_bc_trans_id = ' . $trans_id . ' AND dashboard_opex_status = 1';
			$check_gl = $this->admin->check_data('dashboard_opex_tbl', $where_gl, TRUE);

			if($check_gl['result'] == TRUE){
				$id = $check_gl['info']->dashboard_opex_id;
				$status = $check_gl['info']->dashboard_opex_status;
				$current_amount = $check_gl['info']->dashboard_opex_amount;
				$amount = $total_amount + $current_amount;

				$where_gl = array('dashboard_opex_id' => $id);

				$set_gl = array(
					'dashboard_opex_amount' => $amount,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);

				$insert_gl = $this->admin->update_data('dashboard_opex_tbl', $set_gl, $where_gl);
			}else{
				$set_gl = array(
					'dashboard_bc_trans_id' => $trans_id,
					'cost_center_id' => $cost_center_id,
					'cost_center_group_id' => $cost_center_group_id,
					'gl_sub_id' => $gl_sub_id,
					'dashboard_opex_amount' => $total_amount,
					'dashboard_opex_date' => $date,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);	

				$insert_gl = $this->admin->insert_data('dashboard_opex_tbl', $set_gl);
			}
			
			$opex_total += $total_amount;

			//OPEX Allocation
			if(!empty($allocation_type) == TRUE){
				$this->_compute_opex_allocation_bc($trans_id, $bc_id, $date, $cost_center_group_id, $allocation_type, $cost_center_group_id, $total_amount);
			}


			/*OPEX Per Store*/
			$check_opex_store = $this->_check_store_opex($trans_id, $row_gl->cost_center_id, $date, $total_amount);
		}

		$bc_depre_sub = $this->_get_depreciation_dashboard($cost_center_id, $year, $bc_id);
		$depreciation1 = $bc_depre_sub['depreciation1']; // FROM depre bc uploading
		$depreciation2 = $bc_depre_sub['depreciation2']; // FROM CAPEX DEPRE

		$depre = "DEPRECIATION EXPENSES";

		$opex_arr = array();
		
		foreach($depreciation1 as $row_sub){
			$cost_center_group_id = $row_sub->cost_center_group_id;
			$depre_cost_center_id = $row_sub->cost_center_id;
			$gl_sub_id = $row_sub->gl_sub_id;
			$gl_sub_name = $row_sub->ag_name;
			$gl_code = $row_sub->ag_gl_code;

			$depre_date = $row_sub->budget_date;

			$total_amount = $row_sub->total;
				

			$where_gl = 'cost_center_id = ' . $cost_center_id . ' AND cost_center_group_id = ' . $cost_center_group_id . ' AND gl_sub_id = ' . $gl_sub_id . ' AND dashboard_opex_date = "' . $depre_date . '" AND dashboard_bc_trans_id = ' . $trans_id . ' AND dashboard_opex_status = 1';
			$check_gl = $this->admin->check_data('dashboard_opex_tbl', $where_gl, TRUE);
			if($check_gl['result'] == TRUE){
				$id = $check_gl['info']->dashboard_opex_id;
				$status = $check_gl['info']->dashboard_opex_status;
				$current_amount = $check_gl['info']->dashboard_opex_amount;
				$amount = $total_amount + $current_amount;

				$where_gl = array('dashboard_opex_id' => $id);
				$set_gl = array(
					'dashboard_opex_amount' => $amount,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);


				$insert_gl = $this->admin->update_data('dashboard_opex_tbl', $set_gl, $where_gl);
			}else{
				$set_gl = array(
					'dashboard_bc_trans_id' => $trans_id,
					'cost_center_id' => $cost_center_id,
					'cost_center_group_id' => $cost_center_group_id,
					'gl_sub_id' => $gl_sub_id,
					'dashboard_opex_amount' => $total_amount,
					'dashboard_opex_date' => $depre_date,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);	

				$insert_gl = $this->admin->insert_data('dashboard_opex_tbl', $set_gl);
			}

			$bc_arr_depre = new stdClass;
			$bc_arr_depre->gl_sub_id = $gl_sub_id;
			$bc_arr_depre->gl_group_name = $depre;
			$bc_arr_depre->gl_sub_name = $gl_sub_name;
			$bc_arr_depre->gl_code = $gl_code;
			$bc_arr_depre->total_amount = $total_amount;
			array_push($opex_bc_gl, $bc_arr_depre);

			$opex_total += $total_amount;

			//OPEX Allocation

			$check_allocation = $this->admin->check_data('cost_center_allocation_tbl', array('cost_center_id' => $depre_cost_center_id, 'cost_center_allocation_status' => 1), TRUE);
			if($check_allocation['result'] == TRUE){
				$allocation_type = $check_allocation['info']->allocation_type_id;
				$this->_compute_opex_allocation_bc($trans_id, $bc_id, $depre_date, $cost_center_group_id, $allocation_type, $cost_center_group_id, $total_amount);
			}

			/*OPEX Per Store*/
			$check_opex_store = $this->_check_store_opex($trans_id, $depre_cost_center_id, $depre_date, $total_amount);
		}
		

		$total2 = 0;
		foreach($depreciation2 as $row_sub){
			$cost_center_group_id = $row_sub->cost_center_group_id;
			$depre_cost_center_id = $row_sub->cost_center_id;
			$gl_sub_id = $row_sub->gl_sub_id;
			$gl_sub_name = $row_sub->ag_name;
			$gl_code = $row_sub->ag_gl_code;
			$allocation_type = $row_sub->allocation_type;

			$amount = $row_sub->total;
			
			$total_opex = 0;

			//January
			$depre_date = $year . '-01-01';	
			$total_amount = $row_sub->jan_opex;
			$where_gl = 'cost_center_id = ' . $cost_center_id . ' AND cost_center_group_id = ' . $cost_center_group_id . ' AND gl_sub_id = ' . $gl_sub_id . ' AND dashboard_opex_date = "' . $depre_date . '" AND dashboard_bc_trans_id = ' . $trans_id . ' AND dashboard_opex_status = 1';
			$check_gl = $this->admin->check_data('dashboard_opex_tbl', $where_gl, TRUE);

			if($check_gl['result'] == TRUE){
				$id = $check_gl['info']->dashboard_opex_id;
				$status = $check_gl['info']->dashboard_opex_status;
				$current_amount = $check_gl['info']->dashboard_opex_amount;
				$amount = $total_amount + $current_amount;

				$where_gl = array('dashboard_opex_id' => $id);
				$set_gl = array(
					'dashboard_opex_amount' => $amount,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);

				$insert_gl = $this->admin->update_data('dashboard_opex_tbl', $set_gl, $where_gl);
			}else{
				$set_gl = array(
					'dashboard_bc_trans_id' => $trans_id,
					'cost_center_id' => $cost_center_id,
					'cost_center_group_id' => $cost_center_group_id,
					'gl_sub_id' => $gl_sub_id,
					'dashboard_opex_amount' => $total_amount,
					'dashboard_opex_date' => $depre_date,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);	

				$insert_gl = $this->admin->insert_data('dashboard_opex_tbl', $set_gl);
			}

			if(!empty($allocation_type)){
				$this->_compute_opex_allocation_bc($trans_id, $bc_id, $depre_date, $cost_center_group_id, $allocation_type, $cost_center_group_id, $total_amount);
			}

			$total_opex += $total_amount;

			/*OPEX Per Store*/
			$check_opex_store = $this->_check_store_opex($trans_id, $depre_cost_center_id, $depre_date, $total_amount);


			//February
			$depre_date = $year . '-02-01';	
			$total_amount = $row_sub->feb_opex;
			$where_gl = 'cost_center_id = ' . $cost_center_id . ' AND cost_center_group_id = ' . $cost_center_group_id . ' AND gl_sub_id = ' . $gl_sub_id . ' AND dashboard_opex_date = "' . $depre_date . '" AND dashboard_bc_trans_id = ' . $trans_id . ' AND dashboard_opex_status = 1';
			$check_gl = $this->admin->check_data('dashboard_opex_tbl', $where_gl, TRUE);

			if($check_gl['result'] == TRUE){
				$id = $check_gl['info']->dashboard_opex_id;
				$status = $check_gl['info']->dashboard_opex_status;
				$current_amount = $check_gl['info']->dashboard_opex_amount;
				$amount = $total_amount + $current_amount;

				$where_gl = array('dashboard_opex_id' => $id);
				$set_gl = array(
					'dashboard_opex_amount' => $amount,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);

				$insert_gl = $this->admin->update_data('dashboard_opex_tbl', $set_gl, $where_gl);
			}else{
				$set_gl = array(
					'dashboard_bc_trans_id' => $trans_id,
					'cost_center_id' => $cost_center_id,
					'cost_center_group_id' => $cost_center_group_id,
					'gl_sub_id' => $gl_sub_id,
					'dashboard_opex_amount' => $total_amount,
					'dashboard_opex_date' => $depre_date,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);	

				$insert_gl = $this->admin->insert_data('dashboard_opex_tbl', $set_gl);
			}

			if(!empty($allocation_type)){
				$this->_compute_opex_allocation_bc($trans_id, $bc_id, $depre_date, $cost_center_group_id, $allocation_type, $cost_center_group_id, $total_amount);
			}

			$total_opex += $total_amount;

			/*OPEX Per Store*/
			$check_opex_store = $this->_check_store_opex($trans_id, $depre_cost_center_id, $depre_date, $total_amount);


			//March
			$depre_date = $year . '-03-01';	
			$total_amount = $row_sub->mar_opex;
			$where_gl = 'cost_center_id = ' . $cost_center_id . ' AND cost_center_group_id = ' . $cost_center_group_id . ' AND gl_sub_id = ' . $gl_sub_id . ' AND dashboard_opex_date = "' . $depre_date . '" AND dashboard_bc_trans_id = ' . $trans_id . ' AND dashboard_opex_status = 1';
			$check_gl = $this->admin->check_data('dashboard_opex_tbl', $where_gl, TRUE);

			if($check_gl['result'] == TRUE){
				$id = $check_gl['info']->dashboard_opex_id;
				$status = $check_gl['info']->dashboard_opex_status;
				$current_amount = $check_gl['info']->dashboard_opex_amount;
				$amount = $total_amount + $current_amount;

				$where_gl = array('dashboard_opex_id' => $id);
				$set_gl = array(
					'dashboard_opex_amount' => $amount,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);

				$insert_gl = $this->admin->update_data('dashboard_opex_tbl', $set_gl, $where_gl);
			}else{
				$set_gl = array(
					'dashboard_bc_trans_id' => $trans_id,
					'cost_center_id' => $cost_center_id,
					'cost_center_group_id' => $cost_center_group_id,
					'gl_sub_id' => $gl_sub_id,
					'dashboard_opex_amount' => $total_amount,
					'dashboard_opex_date' => $depre_date,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);	

				$insert_gl = $this->admin->insert_data('dashboard_opex_tbl', $set_gl);
			}

			if(!empty($allocation_type)){
				$this->_compute_opex_allocation_bc($trans_id, $bc_id, $depre_date, $cost_center_group_id, $allocation_type, $cost_center_group_id, $total_amount);
			}

			$total_opex += $total_amount;

			/*OPEX Per Store*/
			$check_opex_store = $this->_check_store_opex($trans_id, $depre_cost_center_id, $depre_date, $total_amount);


			//April
			$depre_date = $year . '-04-01';	
			$total_amount = $row_sub->apr_opex;
			$where_gl = 'cost_center_id = ' . $cost_center_id . ' AND cost_center_group_id = ' . $cost_center_group_id . ' AND gl_sub_id = ' . $gl_sub_id . ' AND dashboard_opex_date = "' . $depre_date . '" AND dashboard_bc_trans_id = ' . $trans_id . ' AND dashboard_opex_status = 1';
			$check_gl = $this->admin->check_data('dashboard_opex_tbl', $where_gl, TRUE);

			if($check_gl['result'] == TRUE){
				$id = $check_gl['info']->dashboard_opex_id;
				$status = $check_gl['info']->dashboard_opex_status;
				$current_amount = $check_gl['info']->dashboard_opex_amount;
				$amount = $total_amount + $current_amount;

				$where_gl = array('dashboard_opex_id' => $id);
				$set_gl = array(
					'dashboard_opex_amount' => $amount,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);

				$insert_gl = $this->admin->update_data('dashboard_opex_tbl', $set_gl, $where_gl);
			}else{
				$set_gl = array(
					'dashboard_bc_trans_id' => $trans_id,
					'cost_center_id' => $cost_center_id,
					'cost_center_group_id' => $cost_center_group_id,
					'gl_sub_id' => $gl_sub_id,
					'dashboard_opex_amount' => $total_amount,
					'dashboard_opex_date' => $depre_date,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);	

				$insert_gl = $this->admin->insert_data('dashboard_opex_tbl', $set_gl);
			}

			if(!empty($allocation_type)){
				$this->_compute_opex_allocation_bc($trans_id, $bc_id, $depre_date, $cost_center_group_id, $allocation_type, $cost_center_group_id, $total_amount);
			}

			$total_opex += $total_amount;

			/*OPEX Per Store*/
			$check_opex_store = $this->_check_store_opex($trans_id, $depre_cost_center_id, $depre_date, $total_amount);



			//May
			$depre_date = $year . '-05-01';	
			$total_amount = $row_sub->may_opex;
			
			$where_gl = 'cost_center_id = ' . $cost_center_id . ' AND cost_center_group_id = ' . $cost_center_group_id . ' AND gl_sub_id = ' . $gl_sub_id . ' AND dashboard_opex_date = "' . $depre_date . '" AND dashboard_bc_trans_id = ' . $trans_id . ' AND dashboard_opex_status = 1';
			$check_gl = $this->admin->check_data('dashboard_opex_tbl', $where_gl, TRUE);

			if($check_gl['result'] == TRUE){
				$id = $check_gl['info']->dashboard_opex_id;
				$status = $check_gl['info']->dashboard_opex_status;
				$current_amount = $check_gl['info']->dashboard_opex_amount;
				$amount = $total_amount + $current_amount;

				$where_gl = array('dashboard_opex_id' => $id);
				$set_gl = array(
					'dashboard_opex_amount' => $amount,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);

				$insert_gl = $this->admin->update_data('dashboard_opex_tbl', $set_gl, $where_gl);
			}else{
				$set_gl = array(
					'dashboard_bc_trans_id' => $trans_id,
					'cost_center_id' => $cost_center_id,
					'cost_center_group_id' => $cost_center_group_id,
					'gl_sub_id' => $gl_sub_id,
					'dashboard_opex_amount' => $total_amount,
					'dashboard_opex_date' => $depre_date,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);	

				$insert_gl = $this->admin->insert_data('dashboard_opex_tbl', $set_gl);
			}

			if(!empty($allocation_type)){
				$this->_compute_opex_allocation_bc($trans_id, $bc_id, $depre_date, $cost_center_group_id, $allocation_type, $cost_center_group_id, $total_amount);
			}

			$total_opex += $total_amount;

			/*OPEX Per Store*/
			$check_opex_store = $this->_check_store_opex($trans_id, $depre_cost_center_id, $depre_date, $total_amount);


			//June
			$depre_date = $year . '-06-01';	
			$total_amount = $row_sub->jun_opex;
			$where_gl = 'cost_center_id = ' . $cost_center_id . ' AND cost_center_group_id = ' . $cost_center_group_id . ' AND gl_sub_id = ' . $gl_sub_id . ' AND dashboard_opex_date = "' . $depre_date . '" AND dashboard_bc_trans_id = ' . $trans_id . ' AND dashboard_opex_status = 1';
			$check_gl = $this->admin->check_data('dashboard_opex_tbl', $where_gl, TRUE);

			if($check_gl['result'] == TRUE){
				$id = $check_gl['info']->dashboard_opex_id;
				$status = $check_gl['info']->dashboard_opex_status;
				$current_amount = $check_gl['info']->dashboard_opex_amount;
				$amount = $total_amount + $current_amount;

				$where_gl = array('dashboard_opex_id' => $id);
				$set_gl = array(
					'dashboard_opex_amount' => $amount,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);

				$insert_gl = $this->admin->update_data('dashboard_opex_tbl', $set_gl, $where_gl);
			}else{
				$set_gl = array(
					'dashboard_bc_trans_id' => $trans_id,
					'cost_center_id' => $cost_center_id,
					'cost_center_group_id' => $cost_center_group_id,
					'gl_sub_id' => $gl_sub_id,
					'dashboard_opex_amount' => $total_amount,
					'dashboard_opex_date' => $depre_date,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);	

				$insert_gl = $this->admin->insert_data('dashboard_opex_tbl', $set_gl);
			}

			if(!empty($allocation_type)){
				$this->_compute_opex_allocation_bc($trans_id, $bc_id, $depre_date, $cost_center_group_id, $allocation_type, $cost_center_group_id, $total_amount);
			}

			$total_opex += $total_amount;

			/*OPEX Per Store*/
			$check_opex_store = $this->_check_store_opex($trans_id, $depre_cost_center_id, $depre_date, $total_amount);


			//July
			$depre_date = $year . '-07-01';	
			$total_amount = $row_sub->jul_opex;
			$where_gl = 'cost_center_id = ' . $cost_center_id . ' AND cost_center_group_id = ' . $cost_center_group_id . ' AND gl_sub_id = ' . $gl_sub_id . ' AND dashboard_opex_date = "' . $depre_date . '" AND dashboard_bc_trans_id = ' . $trans_id . ' AND dashboard_opex_status = 1';
			$check_gl = $this->admin->check_data('dashboard_opex_tbl', $where_gl, TRUE);

			if($check_gl['result'] == TRUE){
				$id = $check_gl['info']->dashboard_opex_id;
				$status = $check_gl['info']->dashboard_opex_status;
				$current_amount = $check_gl['info']->dashboard_opex_amount;
				$amount = $total_amount + $current_amount;

				$where_gl = array('dashboard_opex_id' => $id);
				$set_gl = array(
					'dashboard_opex_amount' => $amount,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);

				$insert_gl = $this->admin->update_data('dashboard_opex_tbl', $set_gl, $where_gl);
			}else{
				$set_gl = array(
					'dashboard_bc_trans_id' => $trans_id,
					'cost_center_id' => $cost_center_id,
					'cost_center_group_id' => $cost_center_group_id,
					'gl_sub_id' => $gl_sub_id,
					'dashboard_opex_amount' => $total_amount,
					'dashboard_opex_date' => $depre_date,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);	

				$insert_gl = $this->admin->insert_data('dashboard_opex_tbl', $set_gl);
			}

			if(!empty($allocation_type)){
				$this->_compute_opex_allocation_bc($trans_id, $bc_id, $depre_date, $cost_center_group_id, $allocation_type, $cost_center_group_id, $total_amount);
			}

			$total_opex += $total_amount;

			/*OPEX Per Store*/
			$check_opex_store = $this->_check_store_opex($trans_id, $depre_cost_center_id, $depre_date, $total_amount);



			//August
			$depre_date = $year . '-08-01';	
			$total_amount = $row_sub->aug_opex;
			$where_gl = 'cost_center_id = ' . $cost_center_id . ' AND cost_center_group_id = ' . $cost_center_group_id . ' AND gl_sub_id = ' . $gl_sub_id . ' AND dashboard_opex_date = "' . $depre_date . '" AND dashboard_bc_trans_id = ' . $trans_id . ' AND dashboard_opex_status = 1';
			$check_gl = $this->admin->check_data('dashboard_opex_tbl', $where_gl, TRUE);

			if($check_gl['result'] == TRUE){
				$id = $check_gl['info']->dashboard_opex_id;
				$status = $check_gl['info']->dashboard_opex_status;
				$current_amount = $check_gl['info']->dashboard_opex_amount;
				$amount = $total_amount + $current_amount;

				$where_gl = array('dashboard_opex_id' => $id);
				$set_gl = array(
					'dashboard_opex_amount' => $amount,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);

				$insert_gl = $this->admin->update_data('dashboard_opex_tbl', $set_gl, $where_gl);
			}else{
				$set_gl = array(
					'dashboard_bc_trans_id' => $trans_id,
					'cost_center_id' => $cost_center_id,
					'cost_center_group_id' => $cost_center_group_id,
					'gl_sub_id' => $gl_sub_id,
					'dashboard_opex_amount' => $total_amount,
					'dashboard_opex_date' => $depre_date,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);	

				$insert_gl = $this->admin->insert_data('dashboard_opex_tbl', $set_gl);
			}

			if(!empty($allocation_type)){
				$this->_compute_opex_allocation_bc($trans_id, $bc_id, $depre_date, $cost_center_group_id, $allocation_type, $cost_center_group_id, $total_amount);
			}

			$total_opex += $total_amount;

			/*OPEX Per Store*/
			$check_opex_store = $this->_check_store_opex($trans_id, $depre_cost_center_id, $depre_date, $total_amount);


			//September
			$depre_date = $year . '-09-01';	
			$total_amount = $row_sub->sep_opex;
			$where_gl = 'cost_center_id = ' . $cost_center_id . ' AND cost_center_group_id = ' . $cost_center_group_id . ' AND gl_sub_id = ' . $gl_sub_id . ' AND dashboard_opex_date = "' . $depre_date . '" AND dashboard_bc_trans_id = ' . $trans_id . ' AND dashboard_opex_status = 1';
			$check_gl = $this->admin->check_data('dashboard_opex_tbl', $where_gl, TRUE);

			if($check_gl['result'] == TRUE){
				$id = $check_gl['info']->dashboard_opex_id;
				$status = $check_gl['info']->dashboard_opex_status;
				$current_amount = $check_gl['info']->dashboard_opex_amount;
				$amount = $total_amount + $current_amount;

				$where_gl = array('dashboard_opex_id' => $id);
				$set_gl = array(
					'dashboard_opex_amount' => $amount,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);

				$insert_gl = $this->admin->update_data('dashboard_opex_tbl', $set_gl, $where_gl);
			}else{
				$set_gl = array(
					'dashboard_bc_trans_id' => $trans_id,
					'cost_center_id' => $cost_center_id,
					'cost_center_group_id' => $cost_center_group_id,
					'gl_sub_id' => $gl_sub_id,
					'dashboard_opex_amount' => $total_amount,
					'dashboard_opex_date' => $depre_date,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);	

				$insert_gl = $this->admin->insert_data('dashboard_opex_tbl', $set_gl);
			}

			if(!empty($allocation_type)){
				$this->_compute_opex_allocation_bc($trans_id, $bc_id, $depre_date, $cost_center_group_id, $allocation_type, $cost_center_group_id, $total_amount);
			}

			$total_opex += $total_amount;

			/*OPEX Per Store*/
			$check_opex_store = $this->_check_store_opex($trans_id, $depre_cost_center_id, $depre_date, $total_amount);


			//October
			$depre_date = $year . '-10-01';	
			$total_amount = $row_sub->oct_opex;
			$where_gl = 'cost_center_id = ' . $cost_center_id . ' AND cost_center_group_id = ' . $cost_center_group_id . ' AND gl_sub_id = ' . $gl_sub_id . ' AND dashboard_opex_date = "' . $depre_date . '" AND dashboard_bc_trans_id = ' . $trans_id . ' AND dashboard_opex_status = 1';
			$check_gl = $this->admin->check_data('dashboard_opex_tbl', $where_gl, TRUE);

			if($check_gl['result'] == TRUE){
				$id = $check_gl['info']->dashboard_opex_id;
				$status = $check_gl['info']->dashboard_opex_status;
				$current_amount = $check_gl['info']->dashboard_opex_amount;
				$amount = $total_amount + $current_amount;

				$where_gl = array('dashboard_opex_id' => $id);
				$set_gl = array(
					'dashboard_opex_amount' => $amount,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);

				$insert_gl = $this->admin->update_data('dashboard_opex_tbl', $set_gl, $where_gl);
			}else{
				$set_gl = array(
					'dashboard_bc_trans_id' => $trans_id,
					'cost_center_id' => $cost_center_id,
					'cost_center_group_id' => $cost_center_group_id,
					'gl_sub_id' => $gl_sub_id,
					'dashboard_opex_amount' => $total_amount,
					'dashboard_opex_date' => $depre_date,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);

				$insert_gl = $this->admin->insert_data('dashboard_opex_tbl', $set_gl);
			}

			if(!empty($allocation_type)){
				$this->_compute_opex_allocation_bc($trans_id, $bc_id, $depre_date, $cost_center_group_id, $allocation_type, $cost_center_group_id, $total_amount);
			}

			$total_opex += $total_amount;

			/*OPEX Per Store*/
			$check_opex_store = $this->_check_store_opex($trans_id, $depre_cost_center_id, $depre_date, $total_amount);


			//November
			$depre_date = $year . '-11-01';	
			$total_amount = $row_sub->nov_opex;
			$where_gl = 'cost_center_id = ' . $cost_center_id . ' AND cost_center_group_id = ' . $cost_center_group_id . ' AND gl_sub_id = ' . $gl_sub_id . ' AND dashboard_opex_date = "' . $depre_date . '" AND dashboard_bc_trans_id = ' . $trans_id . ' AND dashboard_opex_status = 1';
			$check_gl = $this->admin->check_data('dashboard_opex_tbl', $where_gl, TRUE);

			if($check_gl['result'] == TRUE){
				$id = $check_gl['info']->dashboard_opex_id;
				$status = $check_gl['info']->dashboard_opex_status;
				$current_amount = $check_gl['info']->dashboard_opex_amount;
				$amount = $total_amount + $current_amount;

				$where_gl = array('dashboard_opex_id' => $id);
				$set_gl = array(
					'dashboard_opex_amount' => $amount,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);

				$insert_gl = $this->admin->update_data('dashboard_opex_tbl', $set_gl, $where_gl);
			}else{
				$set_gl = array(
					'dashboard_bc_trans_id' => $trans_id,
					'cost_center_id' => $cost_center_id,
					'cost_center_group_id' => $cost_center_group_id,
					'gl_sub_id' => $gl_sub_id,
					'dashboard_opex_amount' => $total_amount,
					'dashboard_opex_date' => $depre_date,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);	

				$insert_gl = $this->admin->insert_data('dashboard_opex_tbl', $set_gl);
			}

			if(!empty($allocation_type)){
				$this->_compute_opex_allocation_bc($trans_id, $bc_id, $depre_date, $cost_center_group_id, $allocation_type, $cost_center_group_id, $total_amount);
			}

			$total_opex += $total_amount;

			/*OPEX Per Store*/
			$check_opex_store = $this->_check_store_opex($trans_id, $depre_cost_center_id, $depre_date, $total_amount);


			//December
			$depre_date = $year . '-12-01';	
			$total_amount = $row_sub->dec_opex;
			$where_gl = 'cost_center_id = ' . $cost_center_id . ' AND cost_center_group_id = ' . $cost_center_group_id . ' AND gl_sub_id = ' . $gl_sub_id . ' AND dashboard_opex_date = "' . $depre_date . '" AND dashboard_bc_trans_id = ' . $trans_id . ' AND dashboard_opex_status = 1';
			$check_gl = $this->admin->check_data('dashboard_opex_tbl', $where_gl, TRUE);

			if($check_gl['result'] == TRUE){
				$id = $check_gl['info']->dashboard_opex_id;
				$status = $check_gl['info']->dashboard_opex_status;
				$current_amount = $check_gl['info']->dashboard_opex_amount;
				$amount = $total_amount + $current_amount;

				$where_gl = array('dashboard_opex_id' => $id);
				$set_gl = array(
					'dashboard_opex_amount' => $amount,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);

				$insert_gl = $this->admin->update_data('dashboard_opex_tbl', $set_gl, $where_gl);
			}else{
				$set_gl = array(
					'dashboard_bc_trans_id' => $trans_id,
					'cost_center_id' => $cost_center_id,
					'cost_center_group_id' => $cost_center_group_id,
					'gl_sub_id' => $gl_sub_id,
					'dashboard_opex_amount' => $total_amount,
					'dashboard_opex_date' => $depre_date,
					'dashboard_opex_added' => date_now(),
					'dashboard_opex_status' => 1
				);	

				$insert_gl = $this->admin->insert_data('dashboard_opex_tbl', $set_gl);
			}

			if(!empty($allocation_type)){
				$this->_compute_opex_allocation_bc($trans_id, $bc_id, $depre_date, $cost_center_group_id, $allocation_type, $cost_center_group_id, $total_amount);
			}

			$total_opex += $total_amount;

			/*OPEX Per Store*/
			$check_opex_store = $this->_check_store_opex($trans_id, $depre_cost_center_id, $depre_date, $total_amount);


			$total2 += $total_opex;

			$bc_arr_depre = new stdClass;
			$bc_arr_depre->gl_sub_id = $gl_sub_id;
			$bc_arr_depre->gl_group_name = $depre;
			$bc_arr_depre->gl_sub_name = $gl_sub_name;
			$bc_arr_depre->gl_code = $gl_code;
			$bc_arr_depre->total_amount = $total_opex;
			array_push($opex_bc_gl, $bc_arr_depre);

			$opex_total += $total_opex;
		}

		return $opex_total;
	}

	public function _check_store_opex($trans_id, $cost_center_id, $date, $amount){

		$check_opex_store = $this->admin->check_data('dashboard_opex_store_tbl', array('cost_center_id' => $cost_center_id, 'dashboard_bc_trans_id' => $trans_id, 'dashboard_opex_store_status' => 1, 'dashboard_opex_store_date' => $date), TRUE);
		if($check_opex_store['result'] == TRUE){
			$dashhoard_opex_store_id = $check_opex_store['info']->dashboard_opex_store_id;
			$current_store_amount = $check_opex_store['info']->dashboard_opex_store_amount;
			$store_amount = $current_store_amount + $amount;

			$set_opex_store = array(
				'dashboard_opex_store_amount' => $store_amount
			);

			$where_opex_store = array('dashboard_opex_store_id' => $dashhoard_opex_store_id);
			$update_opex_store = $this->admin->update_data('dashboard_opex_store_tbl', $set_opex_store, $where_opex_store);

		}else{

			$set_opex_store = array(
				'dashboard_bc_trans_id' => $trans_id,
				'cost_center_id' => $cost_center_id,
				'dashboard_opex_store_date' => $date,
				'dashboard_opex_store_amount' => $amount,
				'dashboard_opex_store_added' => date_now(),
				'dashboard_opex_store_status' => 1
			);

			$insert_opex_store = $this->admin->insert_data('dashboard_opex_store_tbl', $set_opex_store);
		}
	}

	public function _get_depreciation_dashboard($cost_center, $year, $bc_id){
		//$info = $this->_require_login();
		$get_depreciation1 = $this->admin->get_query('

			SELECT "" as ag_name, "" as asset_group, y.gl_code as ag_gl_code, SUM(x.depreciation_bc_amount) as total, x.depreciation_bc_date as budget_date, y.gl_sub_id, y.gl_sub_name, m.cost_center_group_id, z.cost_center_id, z.cost_center_type_id FROM depreciation_bc_tbl x, gl_subgroup_tbl y, cost_center_tbl z, cost_center_group_tbl m WHERE x.gl_sub_id = y.gl_sub_id AND x.cost_center_id = z.cost_center_id AND z.cost_center_group_id = m.cost_center_group_id  AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ' AND x.depreciation_bc_status = 1 GROUP BY z.cost_center_id, y.gl_sub_id, x.depreciation_bc_date
		');
		

		$get_depreciation2 = $this->admin->get_query('
		 	SELECT e.ag_name, d.asg_name as asset_group, e.ag_gl_code, (b.capex_price / b.capex_lifespan) as total, c.capex_qty, c.capex_budget_date as budget_date, MONTH(c.capex_budget_date) as budget_month,  i.cost_center_group_id, f.cost_center_id, f.cost_center_type_id, 
		 		
		 		IF(MONTH(c.capex_budget_date) <= 1, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as jan_opex,
		 		IF(MONTH(c.capex_budget_date) <= 2, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as feb_opex,
		 		IF(MONTH(c.capex_budget_date) <= 3, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as mar_opex,
		 		IF(MONTH(c.capex_budget_date) <= 4, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as apr_opex,
		 		IF(MONTH(c.capex_budget_date) <= 5, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as may_opex,
		 		IF(MONTH(c.capex_budget_date) <= 6, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as jun_opex,
		 		IF(MONTH(c.capex_budget_date) <= 7, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as jul_opex,
		 		IF(MONTH(c.capex_budget_date) <= 8, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as aug_opex,
		 		IF(MONTH(c.capex_budget_date) <= 9, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as sep_opex,
		 		IF(MONTH(c.capex_budget_date) <= 10, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as oct_opex,
		 		IF(MONTH(c.capex_budget_date) <= 11, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as nov_opex,
		 		IF(MONTH(c.capex_budget_date) <= 12, (b.capex_price / b.capex_lifespan) * c.capex_qty, 0) as dec_opex,

		 		(SELECT x.gl_sub_name FROM gl_subgroup_tbl x WHERE e.ag_gl_code = x.gl_code AND x.gl_sub_status = 1 LIMIT 1) as gl_sub_name,

		 		(SELECT x.gl_sub_id FROM gl_subgroup_tbl x WHERE e.ag_gl_code = x.gl_code AND x.gl_sub_status = 1 LIMIT 1) as gl_sub_id,

		 		(SELECT x.allocation_type_id FROM cost_center_allocation_tbl x WHERE f.cost_center_id = x.cost_center_id AND x.cost_center_allocation_status = 1 LIMIT 1) as allocation_type

			FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g, cost_center_group_tbl i WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND f.cost_center_group_id = i.cost_center_group_id AND g.trans_type_id = 1 AND a.ag_trans_status = 1 AND b.ag_trans_item_status = 1 AND c.ag_trans_det_status=1 AND f.parent_id=' . $cost_center . ' AND a.ag_trans_budget_year = ' . $year . '
		');

		 $data['depreciation1'] = $get_depreciation1;
		 $data['depreciation2'] = $get_depreciation2;

		return $data;
	}

	public function _compute_opex_allocation_bc($trans_id, $bc_id, $date, $cost_center_group_id, $allocation_type_id, $current_cost_center_group, $total_amount){

		$where_allocation = 'a.dashboard_bc_allocation_status = 1 AND a.allocation_type_id = ' . $allocation_type_id . ' AND a.dashboard_bc_allocation_date = "' . $date . '" AND a.bc_id = ' . $bc_id . ' AND a.dashboard_bc_trans_id = ' . $trans_id;
		$select_allocation = 'SUM(a.dashboard_bc_allocation_sales_unit) as total_sales_unit, a.allocation_type_id, b.cost_center_group_id';
		$join_allocation = array(
			'brand_tbl b' => 'a.brand_id = b.brand_id',
			'cost_center_group_tbl c' => 'b.cost_center_group_id = c.cost_center_group_id'
		);
		$get_allocation = $this->admin->get_join('dashboard_bc_allocation_tbl a', $join_allocation, FALSE, FALSE, 'c.cost_center_group_id, a.allocation_type_id, a.dashboard_bc_allocation_date', $select_allocation, $where_allocation);
		
		$total_sales_unit = 0;
		$allocation_sales_unit = 0;
		$arr_sales_unit = array();
		$count = 0;
		
		foreach($get_allocation as $row_allocation){
			$total_sales_unit += $row_allocation->total_sales_unit;
			$cost_center_group_id = $row_allocation->cost_center_group_id;

			$arr_sales_unit[$count] = array('cost_center_group_id' => $cost_center_group_id, 'allocation_type_id' => $row_allocation->allocation_type_id, 'sales_unit' => $row_allocation->total_sales_unit);
			$count++;
			
		}

		foreach($arr_sales_unit as $row_sales){
			
			$allocation_amount = 0;
			$allocation_sales_unit = $row_sales['sales_unit'];
			$row_cost_center = $row_sales['cost_center_group_id'];
			

			if($allocation_sales_unit > 0){
				$allocation_amount = ($allocation_sales_unit / $total_sales_unit) * $total_amount;
			}
			

			if($current_cost_center_group == $row_sales['cost_center_group_id']){
				$allocation_amount = ($allocation_amount - $total_amount);
			}

			$check_allocation_opex = $this->admin->check_data('dashboard_allocation_opex_tbl', array('dashboard_bc_trans_id' => $trans_id, 'cost_center_group_id' => $row_cost_center, 'bc_id' => $bc_id, 'dashboard_allocation_opex_date' => $date, 'dashboard_allocation_opex_status' => 1), TRUE);

			if($check_allocation_opex['result'] == TRUE){
				$id = $check_allocation_opex['info']->dashboard_allocation_opex_id;
				$current_amount = $check_allocation_opex['info']->dashboard_allocation_opex_amount;
				$allocation_amount += $current_amount;

				$set_allocation_opex = array('dashboard_allocation_opex_amount' => $allocation_amount);
				
				$where_allocation_opex = array('dashboard_allocation_opex_id' => $id);
				$update_allocation_opex = $this->admin->update_data('dashboard_allocation_opex_tbl', $set_allocation_opex, $where_allocation_opex);

			}else{

				$set_allocation_opex = array(
					'dashboard_bc_trans_id' => $trans_id,
					'cost_center_group_id' => $row_cost_center,
					'bc_id' => $bc_id,
					'dashboard_allocation_opex_amount' => $allocation_amount,
					'dashboard_allocation_opex_date' => $date,
					'dashboard_allocation_opex_added' => date_now(),
					'dashboard_allocation_opex_status' => 1
				);
				$insert_allocation_opex = $this->admin->insert_data('dashboard_allocation_opex_tbl', $set_allocation_opex);
			}
		}
	}

	public function capex_summary_data($trans_id, $bc_id, $year){
		//$info = $this->_require_login();

		$cost_center_id = $this->get_bc_cost_center($bc_id);

		$join = array(
			'asset_group_transaction_item_tbl b' => 'a.ag_trans_id = b.ag_trans_id AND a.ag_trans_status = 1 AND b.ag_trans_item_status = 1 AND a.cost_center_id = ' . $cost_center_id . ' AND a.ag_trans_budget_year = ' . $year,
			'asset_group_transaction_details_tbl c' => 'b.ag_trans_item_id = c.ag_trans_item_id AND c.ag_trans_det_status = 1',
			'asset_subgroup_tbl d' => 'b.asg_id = d.asg_id',
			'asset_group_tbl e' => 'd.ag_id = e.ag_id',
		);

		$capex = $this->admin->get_join('asset_group_transaction_tbl a', $join, TRUE, FALSE, FALSE, '

			SUM(b.capex_price * c.capex_qty) as total_capex,

			(SELECT SUM(x.comp_capex_val) FROM comparative_capex_tbl x WHERE x.bc_id = ' . $bc_id .' AND x.comp_capex_status = 1 AND x.comp_capex_year = ' . ($year - 1) . ') as total_capex1, 

			(SELECT SUM(x.comp_capex_val) FROM comparative_capex_tbl x WHERE x.bc_id = ' . $bc_id .' AND x.comp_capex_status = 1 AND x.comp_capex_year = ' . ($year - 2) . ') as total_capex2

			');


		$capex_amount = check_num($capex->total_capex);
		$capex_amount1 = check_num($capex->total_capex1);
		$capex_amount2 = check_num($capex->total_capex2);

		$set_capex = array(
			'dashboard_bc_trans_id' => $trans_id,
			'bc_id' => $bc_id,
			'dashboard_bc_capex_summary_amount' => $capex_amount,
			'dashboard_bc_capex_summary_amount1' => $capex_amount1,
			'dashboard_bc_capex_summary_amount2' => $capex_amount2,
			'dashboard_bc_capex_summary_added' => date_now(),
			'dashboard_bc_capex_summary_status' => 1
		);

		$insert_capex = $this->admin->insert_data('dashboard_bc_capex_summary_tbl', $set_capex);
	}

	public function get_opex_gl_dashboard($trans_id, $bc_id, $year, $cost_center_id){
		//$info = $this->_require_login();

		$get_opex_account = $this->_get_opex_per_account($bc_id, $year, $cost_center_id);
		$opex_per_account_tbl = '';
		$total = 0;
		$total1 = 0;
		$total2 = 0;

		foreach($get_opex_account as $row_opex_acc){
			$gl_sub_id = $row_opex_acc->gl_sub_id;

	    	$opex_acc_total = $row_opex_acc->total;
	    	$opex_acc_total1 = $row_opex_acc->total1;
	    	$opex_acc_total2 = $row_opex_acc->total2;

	    	$opex_acc_dif1 = $opex_acc_total1 - $opex_acc_total;
	    	$opex_acc_dif2 = $opex_acc_total2 - $opex_acc_total;
	    	$opex_acc_per1 = $opex_acc_total1 != 0 ? ($opex_acc_dif1/$opex_acc_total1) * 100 : 0;
	    	$opex_acc_per2 = $opex_acc_total2 != 0 ? ($opex_acc_dif2/$opex_acc_total2) * 100 : 0;

	    	$opex_per_account_tbl .= '
	    		<tr>
	    			<td>' . $row_opex_acc->gl_sub_name . '</td>
	    			<td align="right">' . number_format($opex_acc_total) . '</td>
	    			<td align="right">' . number_format($opex_acc_total1) . '</td>
	    			<td align="right">' . number_format($opex_acc_total2) . '</td>
	    			<td align="right">' . number_format($opex_acc_dif1) . '</td>
	    			<td align="right">' . number_formaT($opex_acc_per1) . '%</td>
	    			<td align="right">' . number_format($opex_acc_dif2) . '</td>
	    			<td align="right">' . number_format($opex_acc_per2) . '%</td>
	    		</tr>

	    	';

	    	$total += $opex_acc_total;
	    	$total1 += $opex_acc_total1;
	    	$total2 += $opex_acc_total2;

	    	$set_opex_gl = array(
	    		'dashboard_bc_trans_id' => $trans_id,
	    		'bc_id' => $bc_id,
	    		'gl_sub_id' => $gl_sub_id,
	    		'dashboard_bc_opex_gl_amount' => $opex_acc_total,
	    		'dashboard_bc_opex_gl_amount1' => $opex_acc_total1,
	    		'dashboard_bc_opex_gl_amount2' => $opex_acc_total2,
	    		'dashboard_bc_opex_gl_percent1' => $opex_acc_per1,
	    		'dashboard_bc_opex_gl_percent2' => $opex_acc_per2,
	    		'dashboard_bc_opex_gl_dif1' => $opex_acc_dif1,
	    		'dashboard_bc_opex_gl_dif2' => $opex_acc_dif2,
	    		'dashboard_bc_opex_gl_added' => date_now(),
	    		'dashboard_bc_opex_gl_status' => 1
	    	);

	    	$insert_opex_gl = $this->admin->insert_data('dashboard_bc_opex_gl_tbl', $set_opex_gl);
	    }

	    $total_dif1 = $total - $total1;
	    $total_dif2 = $total - $total2;

	    $total_per1 = $total1 != 0 ? ($total_dif1/$total1) * 100 : 0;
	    $total_per2 = $total2 != 0 ? ($total_dif2/$total2) * 100 : 0;

	    $opex_per_account_tbl .= '
	    	<tr>
	    		<td><strong>Total</td>
	    		<td align="right"><strong>' . number_format($total) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total1) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total2) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total_dif1) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total_per1) . '%</strong></td>
	    		<td align="right"><strong>' . number_format($total_dif2) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total_per2) . '%</strong></td>
	    	</tr>
	    ';

	    return $opex_per_account_tbl;
	}

	public function _get_opex_per_account($bc_id, $year, $cost_center_id){
		//$info = $this->_require_login();

		$opex_gl = $this->admin->get_query('

			SELECT opex.gl_group_name, opex.gl_sub_name, opex.gl_code, opex.gl_sub_id, SUM(total) as total, SUM(total1) as total1, SUM(total2) as total2 
			FROM(

				(SELECT `e`.`gl_group_name`, `d`.`gl_sub_name`, d.gl_code, d.gl_sub_id, SUM(a.opex_amount) total, 0 as total1, 0 as total2

				FROM `gl_transaction_details_tbl` `a` JOIN `gl_transaction_item_tbl` `b` ON `a`.`gl_trans_item_id` = `b`.`gl_trans_item_id` AND `b`.`gl_trans_item_status` = 1 AND `a`.`gl_trans_det_status`=1 JOIN `gl_transaction_tbl` `c` ON `b`.`gl_trans_id`=`c`.`gl_trans_id` AND `c`.`gl_trans_status`=1 AND `c`.`gl_year`= ' . $year . ' JOIN `gl_subgroup_tbl` `d` ON `b`.`gl_sub_id`=`d`.`gl_sub_id` JOIN `gl_group_tbl` `e` ON `d`.`gl_group_id` = `e`.`gl_group_id` AND `e`.`gl_group_show` = 1 JOIN `cost_center_tbl` `f` ON `b`.`cost_center_id` = `f`.`cost_center_id` AND `f`.`cost_center_id` AND `f`.`parent_id`=' . $cost_center_id . ' GROUP BY `d`.`gl_code` ORDER BY `e`.`gl_group_name`
				)

				UNION

				(SELECT comp_tbl.gl_group_name, comp_tbl.gl_sub_name, comp_tbl.gl_code, comp_tbl.gl_sub_id, SUM(comp_tbl.total) as total, SUM(comp_tbl.total1) as total1, SUM(comp_tbl.total2) as total2

				FROM
					(SELECT z.gl_group_name, y.gl_sub_name, y.gl_code, y.gl_sub_id, 0 as total, SUM(x.cost) as total1, 0 as total2 FROM comparative_opex_gl_tbl x, gl_subgroup_tbl y, gl_group_tbl z WHERE x.gl_sub_id = y.gl_sub_id AND y.gl_group_id = z.gl_group_id AND x.bc_id = ' . $bc_id . ' AND x.comp_opex_gl_status = 1 AND YEAR(x.trans_year) = '  . ($year - 1) . ' GROUP BY y.gl_code

					UNION


					SELECT z.gl_group_name, y.gl_sub_name, y.gl_code, y.gl_sub_id, 0 as total, 0 as total1, SUM(x.cost) as total2 FROM comparative_opex_gl_tbl x, gl_subgroup_tbl y, gl_group_tbl z WHERE x.gl_sub_id = y.gl_sub_id AND y.gl_group_id = z.gl_group_id AND x.bc_id = ' . $bc_id . ' AND x.comp_opex_gl_status = 1 AND YEAR(x.trans_year) = '  . ($year - 2) . ' GROUP BY y.gl_code
					) as comp_tbl

				GROUP BY comp_tbl.gl_code
				)
				) as opex
			GROUP BY opex.gl_code

		');

		$depre_sub = $this->get_depreciation_subgroup($cost_center_id, $year, $bc_id);
		$depre = "DEPRECIATION EXPENSES";
		foreach($depre_sub as $row_sub){
			$gl_sub_id = $row_sub->gl_sub_id;
			$gl_sub_name = $row_sub->gl_sub_name;
			$depre_amount = $row_sub->total;
			$arr_depre = new stdClass;
			$arr_depre->gl_sub_id = $gl_sub_id;
			$arr_depre->gl_group_name = $depre;
			$arr_depre->gl_sub_name = $gl_sub_name;
			$arr_depre->total = $depre_amount;
			$arr_depre->total1 = 0;
			$arr_depre->total2 = 0;

			$key = array_search($gl_sub_name, array_column($opex_gl, 'gl_sub_name'));
			if(!empty($key)){
				$opex_gl[$key]->total += $depre_amount;
			}else{
				array_push($opex_gl, $arr_depre);	
			}
		}

		return $opex_gl;
	}

	public function get_depreciation_subgroup($cost_center, $year, $bc_id){
		//$info = $this->_require_login();
		$get_depreciation = $this->admin->get_query('
			SELECT 
				ag_name, asset_group, ag_gl_code, SUM(total) as total, SUM(total1) as total1, SUM(total2) as total2, budget_date, gl_sub_name, gl_sub_id

				
			FROM
			(

				(
					SELECT e.ag_name, d.asg_name as asset_group, e.ag_gl_code, SUM((b.capex_price / b.capex_lifespan) * (13-MONTH(c.capex_budget_date)) * c.capex_qty) as total, 0 as total1, 0 as total2, MONTH(c.capex_budget_date) as budget_date, 

					(SELECT x.gl_sub_name FROM gl_subgroup_tbl x WHERE e.ag_gl_code = x.gl_code AND x.gl_sub_status = 1 LIMIT 1) as gl_sub_name,

					(SELECT x.gl_sub_id FROM gl_subgroup_tbl x WHERE e.ag_gl_code = x.gl_code AND x.gl_sub_status = 1 LIMIT 1) as gl_sub_id

					FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND g.trans_type_id = 1 AND a.ag_trans_status = 1 AND b.ag_trans_item_status = 1 AND c.ag_trans_det_status=1 AND f.parent_id=' . $cost_center . ' AND YEAR(c.capex_budget_date)=' . $year . ' GROUP BY gl_sub_id
				)

				UNION

				(
					SELECT "", "", y.gl_code, SUM(x.depreciation_bc_amount) as total, 0 as total1, 0 as total2, x.depreciation_bc_date, y.gl_sub_name, y.gl_sub_id FROM depreciation_bc_tbl x, gl_subgroup_tbl y WHERE x.gl_sub_id = y.gl_sub_id  AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = "' . $bc_id . '" AND x.depreciation_bc_status = 1 GROUP BY y.gl_sub_id
				)

				UNION


				(
					SELECT "", "", y.gl_code, 0 as total, SUM(x.cost) as total1, 0 as total2, "",  y.gl_sub_name, y.gl_sub_id FROM comparative_opex_gl_tbl x, gl_subgroup_tbl y, gl_group_tbl z WHERE x.gl_sub_id = y.gl_sub_id AND y.gl_group_id = z.gl_group_id AND x.bc_id = ' . $bc_id . ' AND x.comp_opex_gl_status = 1 AND YEAR(x.trans_year) = ' . ($year - 1) . ' AND z.gl_group_name = "DEPRECIATION EXPENSES" GROUP BY y.gl_sub_id
				)

				UNION

				(
					SELECT "", "", y.gl_code, 0 as total1, 0 as total1, SUM(x.cost) as total2, "",  y.gl_sub_name, y.gl_sub_id FROM comparative_opex_gl_tbl x, gl_subgroup_tbl y, gl_group_tbl z WHERE x.gl_sub_id = y.gl_sub_id AND y.gl_group_id = z.gl_group_id AND x.bc_id = ' . $bc_id . ' AND x.comp_opex_gl_status = 1 AND YEAR(x.trans_year) = ' . ($year - 2) . ' AND z.gl_group_name = "DEPRECIATION EXPENSES" GROUP BY y.gl_sub_id
				)

			)depreciation_bc_tbl


			GROUP BY gl_sub_name
		');

		return $get_depreciation;
	}

	/*public function opex_per_cost_center_data($trans_id, $bc_id, $cost_center, $year){
		//$info = $this->_require_login();

		$opex_bc_gl = $this->admin->get_query('
			
			SELECT opex.cost_center_id, opex.cost_center_desc, opex.date, opex.cost_center_group_id, opex.gl_sub_id, opex.gl_group_name, opex.gl_code, opex.gl_sub_name, opex.cost_center_group_name, opex.cost_center_type_id, SUM(total) as total, SUM(total1) as total1, SUM(total2) as total2

			FROM
				(SELECT `f`.`cost_center_id`, `f`.`cost_center_desc`, DATE(a.opex_budget_date) as date, `g`.`cost_center_group_id`, `b`.`gl_sub_id`, `e`.`gl_group_name`, `d`.`gl_code`, `d`.`gl_sub_name`, `cost_center_group_name`, `cost_center_type_id`,  SUM(a.opex_amount) total, 0 as total1, 0 as total2 

				FROM `gl_transaction_details_tbl` `a` JOIN `gl_transaction_item_tbl` `b` ON `a`.`gl_trans_item_id` = `b`.`gl_trans_item_id` AND `b`.`gl_trans_item_status` = 1 AND `a`.`gl_trans_det_status`=1 JOIN `gl_transaction_tbl` `c` ON `b`.`gl_trans_id`=`c`.`gl_trans_id` AND `c`.`gl_trans_status` = 1 AND c.gl_year = ' . $year . ' JOIN `gl_subgroup_tbl` `d` ON `b`.`gl_sub_id`=`d`.`gl_sub_id` JOIN `gl_group_tbl` `e` ON `d`.`gl_group_id` = `e`.`gl_group_id` JOIN `cost_center_tbl` `f` ON `b`.`cost_center_id` = `f`.`cost_center_id` AND (`f`.`cost_center_type_id` = 7 OR `f`.`cost_center_type_id` = 8 OR `f`.`cost_center_type_id` = 10) AND `f`.`parent_id` = ' . $cost_center . ' JOIN `cost_center_group_tbl` `g` ON `f`.`cost_center_group_id` = `g`.`cost_center_group_id` GROUP BY `f`.`cost_center_desc` 

				UNION

				SELECT comp_tbl.cost_center_id, comp_tbl.cost_center_desc, comp_tbl.date, comp_tbl.cost_center_group_id, comp_tbl.gl_sub_id, comp_tbl.gl_group_name, comp_tbl.gl_code, comp_tbl.gl_sub_name, comp_tbl.cost_center_group_name, comp_tbl.cost_center_type_id, SUM(total) as total, SUM(total1) as total1, SUM(total2) as total2
				FROM 
					(SELECT n.cost_center_id, n.cost_center_desc, DATE(m.trans_year) as date, n.cost_center_group_id, o.gl_sub_id, p.gl_group_name, o.gl_code, o.gl_sub_name, q.cost_center_group_name, n.cost_center_type_id, 0 total, (m.cost) as total1, 0 as total2 FROM comparative_opex_gl_tbl m, cost_center_tbl n, gl_subgroup_tbl o, gl_group_tbl p, cost_center_group_tbl q WHERE m.cost_center_id = n.cost_center_id AND m.gl_sub_id = o.gl_sub_id AND o.gl_group_id = p.gl_group_id AND n.cost_center_group_id = q.cost_center_group_id AND m.comp_opex_gl_status = 1 AND YEAR(m.trans_year) = ' . ($year - 1) .' AND m.bc_id = ' . $bc_id . '

					UNION

					SELECT n.cost_center_id, n.cost_center_desc, DATE(m.trans_year) as date, n.cost_center_group_id, o.gl_sub_id, p.gl_group_name, o.gl_code, o.gl_sub_name, q.cost_center_group_name, n.cost_center_type_id, 0 total, 0 as total1, (m.cost) as total2 FROM comparative_opex_gl_tbl m, cost_center_tbl n, gl_subgroup_tbl o, gl_group_tbl p, cost_center_group_tbl q WHERE m.cost_center_id = n.cost_center_id AND m.gl_sub_id = o.gl_sub_id AND o.gl_group_id = p.gl_group_id AND n.cost_center_group_id = q.cost_center_group_id AND m.comp_opex_gl_status = 1 AND YEAR(m.trans_year) = ' . ($year - 2) .' AND m.bc_id = ' . $bc_id . '
					) as comp_tbl GROUP BY comp_tbl.cost_center_desc, comp_tbl.gl_sub_id
				) as opex

				GROUP BY opex.cost_center_desc, opex.gl_sub_id ORDER BY opex.cost_center_desc, opex.gl_sub_id, opex.date ASC

		');

		$opex_total = 0;
		$opex_arr = array();
		foreach($opex_bc_gl as $row_gl){
			$cost_center_id = $row_gl->cost_center_id;
			$cost_center_desc = $row_gl->cost_center_desc;
			$date = $row_gl->date;
			$cost_center_group_id = $row_gl->cost_center_group_id;
			$gl_sub_id = $row_gl->gl_sub_id;
			$gl_group_name = $row_gl->gl_group_name;
			$gl_code = $row_gl->gl_code;
			$gl_sub_name = $row_gl->gl_sub_name;
			$total_amount = $row_gl->total;
			$total_amount1 = $row_gl->total1;
			$total_amount2 = $row_gl->total2;
			$cost_center_group_name = $row_gl->cost_center_group_name;
			$cost_center_type_id = $row_gl->cost_center_type_id;

			if(!array_key_exists($cost_center_desc, $opex_arr)){
				$opex_arr[$cost_center_desc]['cost_center_id'] = $cost_center_id;
				$opex_arr[$cost_center_desc]['cost_center_desc'] = $cost_center_desc;
				$opex_arr[$cost_center_desc]['date'] = $date;
				$opex_arr[$cost_center_desc]['cost_center_group_id'] = $cost_center_group_id;
				$opex_arr[$cost_center_desc]['gl_sub_id'] = $gl_sub_id;
				$opex_arr[$cost_center_desc]['gl_group_name'] = $gl_group_name;
				$opex_arr[$cost_center_desc]['gl_code'] = $gl_code;
				$opex_arr[$cost_center_desc]['gl_sub_name'] = $gl_sub_name;
				$opex_arr[$cost_center_desc]['total_amount'] = $total_amount;
				$opex_arr[$cost_center_desc]['total_amount1'] = $total_amount1;
				$opex_arr[$cost_center_desc]['total_amount2'] = $total_amount2;
				$opex_arr[$cost_center_desc]['cost_center_group_name'] = $cost_center_group_name;
				$opex_arr[$cost_center_desc]['cost_center_type_id'] = $cost_center_type_id;
			}else{
				$opex_arr[$cost_center_desc]['total_amount'] += $total_amount;
				$opex_arr[$cost_center_desc]['total_amount1'] += $total_amount1;
				$opex_arr[$cost_center_desc]['total_amount2'] += $total_amount2;
			}

			$opex_total += $total_amount;
		}

		$bc_depre_sub = $this->_get_depreciation_per_cost_center($cost_center, $year, $bc_id);
		$depre = "DEPRECIATION EXPENSES";

		foreach($bc_depre_sub as $row_sub){
			$cost_center_id = $row_sub->cost_center_id;
			$cost_center_desc = $row_sub->cost_center_desc;
			$depre_date = $row_sub->budget_date;
			$depre_cost_center_id = $row_sub->cost_center_id;
			$gl_code = $row_sub->ag_gl_code;
			$cost_center_group_name = $row_sub->cost_center_group_name;
			$cost_center_type_id = $row_sub->cost_center_type_id;
			
			$total_amount = $row_sub->total;
			$total_amount1 = 0;
			$total_amount2 = 0;
			if(!array_key_exists($cost_center_desc, $opex_arr)){
				$opex_arr[$cost_center_desc]['cost_center_id'] = $cost_center_id;
				$opex_arr[$cost_center_desc]['cost_center_desc'] = $cost_center_desc;
				$opex_arr[$cost_center_desc]['date'] = $depre_date;
				$opex_arr[$cost_center_desc]['gl_group_name'] = $depre;
				$opex_arr[$cost_center_desc]['gl_code'] = $gl_code;
				$opex_arr[$cost_center_desc]['total_amount'] = $total_amount;
				$opex_arr[$cost_center_desc]['total_amount1'] = $total_amount1;
				$opex_arr[$cost_center_desc]['total_amount2'] = $total_amount2;
				$opex_arr[$cost_center_desc]['cost_center_group_name'] = $cost_center_group_name;
				$opex_arr[$cost_center_desc]['cost_center_type_id'] = $cost_center_type_id;
			}else{
				$opex_arr[$cost_center_desc]['total_amount'] += $total_amount;
				$opex_arr[$cost_center_desc]['total_amount1'] += $total_amount1;
				$opex_arr[$cost_center_desc]['total_amount2'] += $total_amount2;
			}

			$opex_total += $total_amount;
		}

		foreach($opex_arr as $row){
			$cost_center_id = $row['cost_center_id'];
			$opex_amount = $row['total_amount'];
			$opex_amount1 = $row['total_amount1'];
			$opex_amount2 = $row['total_amount2'];
			$set_opex = array(
				'dashboard_bc_trans_id' => $trans_id,
				'bc_id' => $bc_id,
				'cost_center_id' => $cost_center_id,
				'dashboard_bc_opex_cost_center_amount' => $opex_amount,
				'dashboard_bc_opex_cost_center_amount1' => $opex_amount1,
				'dashboard_bc_opex_cost_center_amount2' => $opex_amount2,
				'dashboard_bc_opex_cost_center_added' => date_now(),
				'dashboard_bc_opex_cost_center_status' => 1
			);

			$insert_opex = $this->admin->insert_data('dashboard_bc_opex_cost_center_tbl', $set_opex);
		}

	}*/

	public function opex_per_cost_center_data($trans_id, $bc_id, $cost_center, $year){
		//$info = $this->_require_login();

		/*$opex_bc_gl = $this->admin->get_query('
			
			SELECT opex.cost_center_id, opex.cost_center_desc, opex.date, opex.cost_center_group_id, opex.gl_sub_id, opex.gl_group_name, opex.gl_code, opex.gl_sub_name, opex.cost_center_group_name, opex.cost_center_type_id, SUM(total) as total, SUM(total1) as total1, SUM(total2) as total2

			FROM
				(SELECT `f`.`cost_center_id`, `f`.`cost_center_desc`, DATE(a.opex_budget_date) as date, `g`.`cost_center_group_id`, `b`.`gl_sub_id`, `e`.`gl_group_name`, `d`.`gl_code`, `d`.`gl_sub_name`, `cost_center_group_name`, `cost_center_type_id`,  SUM(a.opex_amount) total, 0 as total1, 0 as total2 

				FROM `gl_transaction_details_tbl` `a` JOIN `gl_transaction_item_tbl` `b` ON `a`.`gl_trans_item_id` = `b`.`gl_trans_item_id` AND `b`.`gl_trans_item_status` = 1 AND `a`.`gl_trans_det_status`=1 JOIN `gl_transaction_tbl` `c` ON `b`.`gl_trans_id`=`c`.`gl_trans_id` AND `c`.`gl_trans_status` = 1 AND c.gl_year = ' . $year . ' JOIN `gl_subgroup_tbl` `d` ON `b`.`gl_sub_id`=`d`.`gl_sub_id` JOIN `gl_group_tbl` `e` ON `d`.`gl_group_id` = `e`.`gl_group_id` JOIN `cost_center_tbl` `f` ON `b`.`cost_center_id` = `f`.`cost_center_id` AND (`f`.`cost_center_type_id` = 7 OR `f`.`cost_center_type_id` = 8 OR `f`.`cost_center_type_id` = 10) AND `f`.`parent_id` = ' . $cost_center . ' JOIN `cost_center_group_tbl` `g` ON `f`.`cost_center_group_id` = `g`.`cost_center_group_id` GROUP BY `f`.`cost_center_desc` 

				UNION

				SELECT comp_tbl.cost_center_id, comp_tbl.cost_center_desc, comp_tbl.date, comp_tbl.cost_center_group_id, comp_tbl.gl_sub_id, comp_tbl.gl_group_name, comp_tbl.gl_code, comp_tbl.gl_sub_name, comp_tbl.cost_center_group_name, comp_tbl.cost_center_type_id, SUM(total) as total, SUM(total1) as total1, SUM(total2) as total2
				FROM 
					(SELECT n.cost_center_id, n.cost_center_desc, DATE(m.trans_year) as date, n.cost_center_group_id, o.gl_sub_id, p.gl_group_name, o.gl_code, o.gl_sub_name, q.cost_center_group_name, n.cost_center_type_id, 0 total, (m.cost) as total1, 0 as total2 FROM comparative_opex_gl_tbl m, cost_center_tbl n, gl_subgroup_tbl o, gl_group_tbl p, cost_center_group_tbl q WHERE m.cost_center_id = n.cost_center_id AND m.gl_sub_id = o.gl_sub_id AND o.gl_group_id = p.gl_group_id AND n.cost_center_group_id = q.cost_center_group_id AND m.comp_opex_gl_status = 1 AND YEAR(m.trans_year) = ' . ($year - 1) .' AND m.bc_id = ' . $bc_id . '

					UNION

					SELECT n.cost_center_id, n.cost_center_desc, DATE(m.trans_year) as date, n.cost_center_group_id, o.gl_sub_id, p.gl_group_name, o.gl_code, o.gl_sub_name, q.cost_center_group_name, n.cost_center_type_id, 0 total, 0 as total1, (m.cost) as total2 FROM comparative_opex_gl_tbl m, cost_center_tbl n, gl_subgroup_tbl o, gl_group_tbl p, cost_center_group_tbl q WHERE m.cost_center_id = n.cost_center_id AND m.gl_sub_id = o.gl_sub_id AND o.gl_group_id = p.gl_group_id AND n.cost_center_group_id = q.cost_center_group_id AND m.comp_opex_gl_status = 1 AND YEAR(m.trans_year) = ' . ($year - 2) .' AND m.bc_id = ' . $bc_id . '
					) as comp_tbl GROUP BY comp_tbl.cost_center_desc, comp_tbl.gl_sub_id
				) as opex

				GROUP BY opex.cost_center_desc, opex.gl_sub_id ORDER BY opex.cost_center_desc, opex.gl_sub_id, opex.date ASC

		');*/

		$opex_bc_gl = $this->admin->get_query('
			
			SELECT opex_tbl.cost_center_id, opex_tbl.cost_center_desc, opex_tbl.date, opex_tbl.cost_center_group_id, opex_tbl.gl_sub_id, opex_tbl.gl_group_name, opex_tbl.gl_code, opex_tbl.gl_sub_name, opex_tbl.cost_center_group_name, opex_tbl.cost_center_type_id, SUM(opex_tbl.total) as total, SUM(opex_tbl.total1) as total1, SUM(opex_tbl.total2) as total2

			FROM 

			(SELECT * 

				FROM(SELECT
				        `f`.`cost_center_id`,
				        `f`.`cost_center_desc`,
				        DATE(a.opex_budget_date) AS date,
				        `g`.`cost_center_group_id`,
				        `b`.`gl_sub_id`,
				        `e`.`gl_group_name`,
				        `d`.`gl_code`,
				        `d`.`gl_sub_name`,
				        `cost_center_group_name`,
				        `cost_center_type_id`,
				        SUM(a.opex_amount) total,
				        0 AS total1,
				        0 AS total2
				    FROM
				        `gl_transaction_details_tbl` `a`
				    JOIN
				        `gl_transaction_item_tbl` `b`
				    ON
				        `a`.`gl_trans_item_id` = `b`.`gl_trans_item_id` AND `b`.`gl_trans_item_status` = 1 AND `a`.`gl_trans_det_status` = 1
				    JOIN
				        `gl_transaction_tbl` `c`
				    ON
				        `b`.`gl_trans_id` = `c`.`gl_trans_id` AND `c`.`gl_trans_status` = 1 AND c.gl_year = ' . $year . '
				    JOIN
				        `gl_subgroup_tbl` `d`
				    ON
				        `b`.`gl_sub_id` = `d`.`gl_sub_id`
				    JOIN
				        `gl_group_tbl` `e`
				    ON
				        `d`.`gl_group_id` = `e`.`gl_group_id`
				    JOIN
				        `cost_center_tbl` `f`
				    ON
				        `b`.`cost_center_id` = `f`.`cost_center_id` AND(
				            `f`.`cost_center_type_id` = 7 OR `f`.`cost_center_type_id` = 8 OR `f`.`cost_center_type_id` = 10
				        ) AND `f`.`parent_id` = ' . $cost_center . '
				    JOIN
				        `cost_center_group_tbl` `g`
				    ON
				        `f`.`cost_center_group_id` = `g`.`cost_center_group_id`
				    GROUP BY
				        `f`.`cost_center_desc`, d.gl_sub_id

				) as opex

				UNION

				SELECT *

				FROM (SELECT
					    n.cost_center_id,
					    n.cost_center_desc,
					    DATE(m.trans_year) AS DATE,
					    n.cost_center_group_id,
					    o.gl_sub_id,
					    p.gl_group_name,
					    o.gl_code,
					    o.gl_sub_name,
					    q.cost_center_group_name,
					    n.cost_center_type_id,
					    0 total,
					    SUM(m.cost) AS total1,
					    0 AS total2
					FROM
					    comparative_opex_gl_tbl m,
					    cost_center_tbl n,
					    gl_subgroup_tbl o,
					    gl_group_tbl p,
					    cost_center_group_tbl q
					WHERE
					    m.cost_center_id = n.cost_center_id AND m.gl_sub_id = o.gl_sub_id AND o.gl_group_id = p.gl_group_id AND n.cost_center_group_id = q.cost_center_group_id AND m.comp_opex_gl_status = 1 AND YEAR(m.trans_year) = ' . ($year - 1) . ' AND m.bc_id = ' . $bc_id . '

					GROUP BY n.cost_center_id, o.gl_sub_id
				      
				) as opex1

				UNION

				SELECT *

				FROM (SELECT
					    n.cost_center_id,
					    n.cost_center_desc,
					    DATE(m.trans_year) AS date,
					    n.cost_center_group_id,
					    o.gl_sub_id,
					    p.gl_group_name,
					    o.gl_code,
					    o.gl_sub_name,
					    q.cost_center_group_name,
					    n.cost_center_type_id,
					    0 total,
					    0 AS total1,
					    SUM(m.cost) AS total2
					FROM
					    comparative_opex_gl_tbl m,
					    cost_center_tbl n,
					    gl_subgroup_tbl o,
					    gl_group_tbl p,
					    cost_center_group_tbl q
					WHERE
					    m.cost_center_id = n.cost_center_id AND m.gl_sub_id = o.gl_sub_id AND o.gl_group_id = p.gl_group_id AND n.cost_center_group_id = q.cost_center_group_id AND m.comp_opex_gl_status = 1 AND YEAR(m.trans_year) = ' . ($year - 2) . ' AND m.bc_id = ' . $bc_id . '
					GROUP BY n.cost_center_id, o.gl_sub_id
				      
				) as opex2
			) as opex_tbl

			GROUP BY opex_tbl.cost_center_desc, opex_tbl.gl_sub_id
			ORDER BY opex_tbl.cost_center_desc, opex_tbl.gl_sub_id, opex_tbl.date ASC

		');

		$opex_total = 0;
		$opex_arr = array();
		foreach($opex_bc_gl as $row_gl){
			$cost_center_id = $row_gl->cost_center_id;
			$cost_center_desc = $row_gl->cost_center_desc;
			$date = $row_gl->date;
			$cost_center_group_id = $row_gl->cost_center_group_id;
			$gl_sub_id = $row_gl->gl_sub_id;
			$gl_group_name = $row_gl->gl_group_name;
			$gl_code = $row_gl->gl_code;
			$gl_sub_name = $row_gl->gl_sub_name;
			$total_amount = $row_gl->total;
			$total_amount1 = $row_gl->total1;
			$total_amount2 = $row_gl->total2;
			$cost_center_group_name = $row_gl->cost_center_group_name;
			$cost_center_type_id = $row_gl->cost_center_type_id;

			if(!array_key_exists($cost_center_desc, $opex_arr)){
				$opex_arr[$cost_center_desc]['cost_center_id'] = $cost_center_id;
				$opex_arr[$cost_center_desc]['cost_center_desc'] = $cost_center_desc;
				$opex_arr[$cost_center_desc]['date'] = $date;
				$opex_arr[$cost_center_desc]['cost_center_group_id'] = $cost_center_group_id;
				$opex_arr[$cost_center_desc]['gl_sub_id'] = $gl_sub_id;
				$opex_arr[$cost_center_desc]['gl_group_name'] = $gl_group_name;
				$opex_arr[$cost_center_desc]['gl_code'] = $gl_code;
				$opex_arr[$cost_center_desc]['gl_sub_name'] = $gl_sub_name;
				$opex_arr[$cost_center_desc]['total_amount'] = $total_amount;
				$opex_arr[$cost_center_desc]['total_amount1'] = $total_amount1;
				$opex_arr[$cost_center_desc]['total_amount2'] = $total_amount2;
				$opex_arr[$cost_center_desc]['cost_center_group_name'] = $cost_center_group_name;
				$opex_arr[$cost_center_desc]['cost_center_type_id'] = $cost_center_type_id;
			}else{
				$opex_arr[$cost_center_desc]['total_amount'] += $total_amount;
				$opex_arr[$cost_center_desc]['total_amount1'] += $total_amount1;
				$opex_arr[$cost_center_desc]['total_amount2'] += $total_amount2;
			}

			$opex_total += $total_amount;
		}

		$bc_depre_sub = $this->_get_depreciation_per_cost_center($cost_center, $year, $bc_id);
		$depre = "DEPRECIATION EXPENSES";

		foreach($bc_depre_sub as $row_sub){
			$cost_center_id = $row_sub->cost_center_id;
			$cost_center_desc = $row_sub->cost_center_desc;
			$depre_date = $row_sub->budget_date;
			$depre_cost_center_id = $row_sub->cost_center_id;
			$gl_code = $row_sub->ag_gl_code;
			$cost_center_group_name = $row_sub->cost_center_group_name;
			$cost_center_type_id = $row_sub->cost_center_type_id;
			
			$total_amount = $row_sub->total;
			$total_amount1 = 0;
			$total_amount2 = 0;
			if(!array_key_exists($cost_center_desc, $opex_arr)){
				$opex_arr[$cost_center_desc]['cost_center_id'] = $cost_center_id;
				$opex_arr[$cost_center_desc]['cost_center_desc'] = $cost_center_desc;
				$opex_arr[$cost_center_desc]['date'] = $depre_date;
				$opex_arr[$cost_center_desc]['gl_group_name'] = $depre;
				$opex_arr[$cost_center_desc]['gl_code'] = $gl_code;
				$opex_arr[$cost_center_desc]['total_amount'] = $total_amount;
				$opex_arr[$cost_center_desc]['total_amount1'] = $total_amount1;
				$opex_arr[$cost_center_desc]['total_amount2'] = $total_amount2;
				$opex_arr[$cost_center_desc]['cost_center_group_name'] = $cost_center_group_name;
				$opex_arr[$cost_center_desc]['cost_center_type_id'] = $cost_center_type_id;
			}else{
				$opex_arr[$cost_center_desc]['total_amount'] += $total_amount;
				$opex_arr[$cost_center_desc]['total_amount1'] += $total_amount1;
				$opex_arr[$cost_center_desc]['total_amount2'] += $total_amount2;
			}

			$opex_total += $total_amount;
		}

		foreach($opex_arr as $row){
			$cost_center_id = $row['cost_center_id'];
			$opex_amount = $row['total_amount'];
			$opex_amount1 = $row['total_amount1'];
			$opex_amount2 = $row['total_amount2'];
			$set_opex = array(
				'dashboard_bc_trans_id' => $trans_id,
				'bc_id' => $bc_id,
				'cost_center_id' => $cost_center_id,
				'dashboard_bc_opex_cost_center_amount' => $opex_amount,
				'dashboard_bc_opex_cost_center_amount1' => $opex_amount1,
				'dashboard_bc_opex_cost_center_amount2' => $opex_amount2,
				'dashboard_bc_opex_cost_center_added' => date_now(),
				'dashboard_bc_opex_cost_center_status' => 1
			);

			$insert_opex = $this->admin->insert_data('dashboard_bc_opex_cost_center_tbl', $set_opex);
		}

	}

	public function _get_depreciation_per_cost_center($cost_center, $year, $bc_id){
		//$info = $this->_require_login();

		$get_depreciation = $this->admin->get_query('
			SELECT
				cost_center_desc, asset_group, ag_gl_code, SUM(total) as total, budget_date, gl_sub_id, gl_sub_name, cost_center_group_id, cost_center_id, cost_center_group_name, cost_center_type_id
			FROM
			(
				SELECT f.cost_center_desc, d.asg_name as asset_group, e.ag_gl_code, SUM((b.capex_price / b.capex_lifespan) * (13-MONTH(c.capex_budget_date)) * c.capex_qty) as total, c.capex_budget_date as budget_date,

				(SELECT x1.gl_sub_id FROM gl_subgroup_tbl x1 WHERE x1.gl_code = e.ag_gl_code AND x1.gl_sub_status = 1 LIMIT 1)as gl_sub_id,

    			(SELECT x1.gl_sub_id FROM gl_subgroup_tbl x1 WHERE x1.gl_code = e.ag_gl_code AND x1.gl_sub_status = 1 LIMIT 1)as gl_sub_name,

				i.cost_center_group_id, f.cost_center_id, f.cost_center_type_id,

				(SELECT x.cost_center_group_name FROM cost_center_group_tbl x WHERE x.cost_center_group_id = i.cost_center_group_id) AS cost_center_group_name

				FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g, cost_center_group_tbl i WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND f.cost_center_group_id = i.cost_center_group_id AND g.trans_type_id = 1 AND a.ag_trans_status = 1 AND b.ag_trans_item_status = 1 AND c.ag_trans_det_status=1 AND f.parent_id=' . $cost_center . ' AND YEAR(c.capex_budget_date)=' . $year . ' GROUP BY f.cost_center_id, gl_sub_id

				UNION

				
				SELECT z.cost_center_desc, "", y.gl_code, SUM(x.depreciation_bc_amount) as total, x.depreciation_bc_date, y.gl_sub_id, y.gl_sub_name, m.cost_center_group_id, z.cost_center_id, z.cost_center_type_id,

					(SELECT x.cost_center_group_name FROM cost_center_group_tbl x WHERE x.cost_center_group_id = z.cost_center_group_id) AS cost_center_group_name 

				FROM depreciation_bc_tbl x, gl_subgroup_tbl y, cost_center_tbl z, cost_center_group_tbl m WHERE x.gl_sub_id = y.gl_sub_id AND x.cost_center_id = z.cost_center_id AND z.cost_center_group_id = m.cost_center_group_id  AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ' AND x.depreciation_bc_status = 1 GROUP BY z.cost_center_id, y.gl_sub_id
			) depre_tbl

			GROUP BY cost_center_id, gl_sub_id
			
		 ');
		return $get_depreciation;
	}

	public function get_noi_dashboard($trans_id, $bc_id, $year, $net_sales, $sales_unit, $variable_cost, $period_cost, $commission){
	    $check_noi1 = $this->admin->check_data('comparative_pnl_tbl', array('bc_id' => $bc_id, 'comp_pnl_year' => ($year - 1), 'comp_pnl_status' => 1), TRUE);

	    $check_noi2 = $this->admin->check_data('comparative_pnl_tbl', array('bc_id' => $bc_id, 'comp_pnl_year' => ($year - 2), 'comp_pnl_status' => 1), TRUE);

    	$variable_cost_unit = $sales_unit > 0 ? $variable_cost / $sales_unit : 0;
    	$margin = $net_sales - $variable_cost;
    	$margin_unit = $sales_unit > 0 ?  $margin / $sales_unit : 0;
    	$margin_percent = $net_sales > 0 ? ($margin / $net_sales) * 100 : 0;

    	$period_cost_unit = $sales_unit > 0 ? $period_cost / $sales_unit : 0;

    	$others = 0;
    	$others_unit = 0;
    	$noi = $margin - $period_cost - $others;
    	$noi_unit = $sales_unit > 0 ? $noi / $sales_unit : 0;
    	$noi_percent = number_format($net_sales > 0 ? ($noi / $net_sales) * 100 : 0);


	    $net_sales1 = 0;
    	$sales_unit1 = 0;
    	$variable_cost1 = 0;
    	$commission1 = 0;
    	$period_cost1 = 0;
    	$margin1 = 0;
    	$cm_percent1 = 0;
    	$noi1 = 0;
    	$noi_unit1 = 0;
    	$noi_percent1 = 0;
    	$others1 = 0;
    	$others_unit1 = 0;
	    if($check_noi1['result'] == TRUE){
	    	$net_sales1 = $check_noi1['info']->comp_pnl_net_sales;
	    	$sales_unit1 = $check_noi1['info']->comp_pnl_sales_volume;
	    	$variable_cost1 = $check_noi1['info']->comp_pnl_variable_cost;
	    	$commission1 = 0;
	    	$period_cost1 = $check_noi1['info']->comp_pnl_period_cost;
	    	$margin1 = $net_sales1 - $variable_cost1;
	    	$cm_percent1 = $net_sales1 > 0 ? ($margin1 / $net_sales1) * 100 : 0;

	    	$others1 = $check_noi1['info']->comp_pnl_other;
	    	$others_unit1 = $sales_unit1 > 0 ? - $others1 / $sales_unit1 : 0; 
	    	$noi1 = $margin1 - $period_cost1 - $others1;
	    	$noi_unit1 = $sales_unit1 > 0 ? ($noi1 / $sales_unit1) : 0;
	    	$noi_percent1 = $net_sales1 > 0 ? ($noi1 / $net_sales1) * 100 : 0;

	    }

	    $net_sales2 = 0;
    	$sales_unit2 = 0;
    	$variable_cost2 = 0;
    	$commission2 = 0;
    	$period_cost2 = 0;
    	$margin2 = 0;
    	$cm_percent2 = 0;
    	$noi2 = 0;
    	$noi_unit2 = 0;
    	$noi_percent2 = 0;
    	$others2 = 0;
    	$others_unit2 = 0;
	    if($check_noi2['result'] == TRUE){
	    	$net_sales2 = $check_noi2['info']->comp_pnl_net_sales;
	    	$sales_unit2 = $check_noi2['info']->comp_pnl_sales_volume;
	    	$variable_cost2 = $check_noi2['info']->comp_pnl_variable_cost;
	    	$commission2 = 0;
	    	$period_cost2 = $check_noi2['info']->comp_pnl_period_cost;
	    	$margin2 = $net_sales2 - $variable_cost2;
	    	$cm_percent2 = $net_sales2 > 0 ? ($margin2 / $net_sales2) * 100 : 0;

	    	$others2 = $check_noi2['info']->comp_pnl_other;
	    	$others_unit2 = $sales_unit2 > 0 ? - $others2 / $sales_unit2 : 0; 
	    	$noi2 = $margin2 - $period_cost2 - $others2;
	    	$noi_unit2 = $sales_unit2 > 0 ? ($noi2 / $sales_unit2) : 0;
	    	$noi_percent2 = $net_sales2 > 0 ? ($noi2 / $net_sales2) * 100 : 0;
	    }


    	$nsp = $sales_unit > 0 ? $net_sales/$sales_unit : 0;
    	$nsp1 = $sales_unit1 > 0 ? $net_sales1/$sales_unit1 : 0;
    	$nsp2 = $sales_unit2 > 0 ? $net_sales2/$sales_unit2 : 0;

    	$variable_cost_unit1 = $sales_unit1 > 0 ? $variable_cost1 / $sales_unit1 : 0;
    	$variable_cost_unit2 = $sales_unit2 > 0 ? $variable_cost2 / $sales_unit2 : 0;

    	$margin1 = $net_sales1 - $variable_cost1;
    	$margin2 = $net_sales2 - $variable_cost2;

    	$margin_unit1 = $sales_unit1 > 0 ?  $margin1 / $sales_unit1 : 0;
    	$margin_unit2 = $sales_unit2 > 0 ?  $margin2 / $sales_unit2 : 0;

    	$margin_percent1 = $net_sales1 > 0 ? ($margin1 / $net_sales1) * 100 : 0;
    	$margin_percent2 = $net_sales2 > 0 ? ($margin2 / $net_sales2) * 100 : 0;

    	$period_cost_unit1 = $sales_unit1 > 0 ? $period_cost1 / $sales_unit1 : 0;
    	$period_cost_unit2 = $sales_unit2 > 0 ? $period_cost2 / $sales_unit2 : 0;

    	$net_sales_dif1 = $net_sales - $net_sales1;
    	$net_sales_dif2 = $net_sales - $net_sales2;
    	$net_sales_percent1 = $net_sales1 > 0 ? ($net_sales_dif1 / $net_sales1) * 100 : 0;
    	$net_sales_percent2 = $net_sales2 > 0 ? ($net_sales_dif2 / $net_sales2) * 100 : 0;

    	$net_sales_condition1 = $net_sales_dif1 > 0 ? 'higher' :  'lower';
    	$net_sales_condition2 = $net_sales_dif2 > 0 ? 'higher' :  'lower';

    	$nsp_dif1 = $nsp - $nsp1;
    	$nsp_dif2 = $nsp - $nsp2;
    	$nsp_percent1 = $nsp1 > 0 ? ($nsp_dif1 / $nsp1) * 100 : 0;
    	$nsp_percent2 = $nsp2 > 0 ? ($nsp_dif2 / $nsp2) * 100 : 0;

    	$sales_unit_dif1 = $sales_unit - $sales_unit1;
    	$sales_unit_dif2 = $sales_unit - $sales_unit2;
    	$sales_unit_percent1 = $sales_unit1 > 0 ? ($sales_unit_dif1 / $sales_unit1) * 100 : 0;
    	$sales_unit_percent2 = $sales_unit2 > 0 ? ($sales_unit_dif2 / $sales_unit2) * 100 : 0;
    	$sales_unit_condition1 = $sales_unit_dif1 > 0 ? 'higher' :  'lower';
    	$sales_unit_condition2 = $sales_unit_dif2 > 0 ? 'higher' :  'lower';

    	$variable_cost_dif1 = $variable_cost - $variable_cost1;
    	$variable_cost_dif2 = $variable_cost - $variable_cost2;
    	$variable_cost_percent1 = $variable_cost1 > 0 ? ($variable_cost_dif1 / $variable_cost1) * 100 : 0;
    	$variable_cost_percent2 = $variable_cost2 > 0 ? ($variable_cost_dif2 / $variable_cost2) * 100 : 0;

    	$commission_dif1 = $commission - $commission1;
    	$commission_dif2 = $commission - $commission2;
    	$commission_percent1 = $commission1 > 0 ? ($commission_dif1 / $commission1) * 100 : 0;
    	$commission_percent2 = $commission2 > 0 ? ($commission_dif2 / $commission2) * 100 : 0;

    	$variable_cost_unit_dif1 = $variable_cost_unit - $variable_cost_unit1;
    	$variable_cost_unit_dif2 = $variable_cost_unit - $variable_cost_unit2;
    	$varialbe_cost_unit_percent1 = $variable_cost_unit1 > 0 ? ($variable_cost_unit_dif1 / $variable_cost_unit1) * 100 : 0;
    	$varialbe_cost_unit_percent2 = $variable_cost_unit1 > 0 ? ($variable_cost_unit_dif2 / $variable_cost_unit1) * 100 : 0;

    	$margin_dif1 = $margin - $margin1;
    	$margin_dif2 = $margin - $margin2;
    	$margin_percent1 = $margin1 > 0 ? ($margin_dif1 / $margin1) * 100 : 0;
    	$margin_percent2 = $margin2 > 0 ? ($margin_dif2 / $margin2) * 100 : 0;

    	$margin_unit_dif1 = $margin_unit - $margin_unit1;
    	$margin_unit_dif2 = $margin_unit - $margin_unit2;
    	$margin_unit_percent1 = $margin_unit1 > 0 ? ($margin_unit_dif1 / $margin_unit1) * 100 : 0;
    	$margin_unit_percent2 = $margin_unit2 > 0 ? ($margin_unit_dif2 / $margin_unit2) * 100 : 0;

    	$cm_percent_dif1 = $margin_percent - $cm_percent1;
    	$cm_percent_dif2 = $margin_percent - $cm_percent2;
    	$cm_percent_dif_percent1 = $cm_percent1 > 0 ? ($cm_percent_dif1 / $cm_percent1) * 100 : 0;
    	$cm_percent_dif_percent2 = $cm_percent2 > 0 ? ($cm_percent_dif2 / $cm_percent2) * 100 : 0;

    	$period_cost_dif1 = $period_cost - $period_cost1;
    	$period_cost_dif2 = $period_cost - $period_cost2;
    	$period_cost_percent1 = $period_cost1 > 0 ? ($period_cost_dif1 / $period_cost1) * 100 : 0;
    	$period_cost_percent2 = $period_cost2 > 0 ? ($period_cost_dif2 / $period_cost2) * 100 : 0;

    	$period_cost_unit_dif1 = $period_cost_unit - $period_cost_unit1;
    	$period_cost_unit_dif2 = $period_cost_unit - $period_cost_unit2;
    	$period_cost_unit_percent1 = $period_cost_unit1 > 0 ? ($period_cost_unit_dif1 / $period_cost_unit1) * 100 : 0;
    	$period_cost_unit_percent2 = $period_cost_unit2 > 0 ? ($period_cost_unit_dif2 / $period_cost_unit2) * 100 : 0;

    	$noi_dif1 = $noi - $noi1;
    	$noi_dif2 = $noi - $noi2;
    	$noi_dif_percent1 = $noi1 != 0 ? ($noi_dif1 / $noi1) * 100 : 0;
    	$noi_dif_percent2 = $noi2 != 0 ? ($noi_dif2 / $noi2) * 100 : 0;
    	$noi_condition1 = $noi_dif1 > 0 ? 'higher' :  'lower';
    	$noi_condition2 = $noi_dif2 > 0 ? 'higher' :  'lower';

    	$noi_unit_dif1 = $noi_unit - $noi_unit1;
    	$noi_unit_dif2 = $noi_unit - $noi_unit2;
    	$noi_unit_percent1 = $noi_unit1 > 0 ? ($noi_unit_dif1 / $noi_unit1) * 100 : 0;
    	$noi_unit_percent2 = $noi_unit2 > 0 ? ($noi_unit_dif2 / $noi_unit2) * 100 : 0;

    	$noi_percent_dif1 = $noi_percent - $noi_percent1;
    	$noi_percent_dif2 = $noi_percent - $noi_percent2;
    	$noi_percent_percent1 = $noi_percent1 > 0 ? ($noi_percent_dif1 / $noi_percent1) * 100 : 0;
    	$noi_percent_percent2 = $noi_percent2 > 0 ? ($noi_percent_dif2 / $noi_percent2) * 100 : 0;

    	$nsp = $sales_unit > 0 ? $net_sales / $sales_unit : 0;
	    $nsp1 = $sales_unit1 > 0 ? $net_sales1 / $sales_unit1 : 0;
	    $nsp2 = $sales_unit2 > 0 ? $net_sales1 / $sales_unit2 : 0;

	    $others_dif1 = $others - $others1;
	    $others_dif2 = $others - $others2;
	    $others_percent1 = $others > 0 ? ($others_dif1 / $others1) *100 : 0;
	    $others_percent2 = $others > 0 ? ($others_dif2 / $others2) *100 : 0;

	    $others_unit_dif1 = $others_unit - $others_unit1;
    	$others_unit_dif2 = $others_unit - $others_unit2;
    	$others_unit_percent1 = $others_unit1 > 0 ? ($others_unit_dif1 / $others_unit1) * 100 : 0;
    	$others_unit_percent2 = $others_unit2 > 0 ? ($others_unit_dif2 / $others_unit2) * 100 : 0;

	    $set_pnl = array(
	    	'dashboard_bc_trans_id' => $trans_id,
 			'bc_id' => $bc_id,
 			'dashboard_bc_summary_year' => $year,
 			'dashboard_bc_summary_sales_unit' => $sales_unit,
 			'dashboard_bc_summary_net_sales' => $net_sales,
 			'dashboard_bc_summary_variable_cost' => $variable_cost,
 			'dashboard_bc_summary_margin' => $margin,
 			'dashboard_bc_summary_period_cost' => $period_cost,
 			'dashboard_bc_summary_noi' => $noi,
 			'dashboard_bc_summary_noi_percent' => $noi_percent,
 			'dashboard_bc_summary_others' => 0,
 			'dashboard_bc_summary_added' => date_now(),
 			'dashboard_bc_summary_updated' => date_now(),
 			'dashboard_bc_summary_status' => 1,
 		);
	    
	    $insert_pnl = $this->admin->insert_data('dashboard_bc_summary_tbl', $set_pnl);

	    $set_pnl1 = array(
	    	'dashboard_bc_trans_id' => $trans_id,
 			'bc_id' => $bc_id,
 			'dashboard_bc_summary_year' => ($year - 1),
 			'dashboard_bc_summary_sales_unit' => $sales_unit1,
 			'dashboard_bc_summary_net_sales' => $net_sales1,
 			'dashboard_bc_summary_variable_cost' => $variable_cost1,
 			'dashboard_bc_summary_margin' => $margin1,
 			'dashboard_bc_summary_period_cost' => $period_cost1,
 			'dashboard_bc_summary_noi' => $noi1,
 			'dashboard_bc_summary_noi_percent' => $noi_percent1,
 			'dashboard_bc_summary_others' => $others1,
 			'dashboard_bc_summary_added' => date_now(),
 			'dashboard_bc_summary_updated' => date_now(),
 			'dashboard_bc_summary_status' => 1,
 		);

	    $insert_pnl1 = $this->admin->insert_data('dashboard_bc_summary_tbl', $set_pnl1);

	    $set_pnl2 = array(
	    	'dashboard_bc_trans_id' => $trans_id,
 			'bc_id' => $bc_id,
 			'dashboard_bc_summary_year' => ($year - 2),
 			'dashboard_bc_summary_sales_unit' => $sales_unit2,
 			'dashboard_bc_summary_net_sales' => $net_sales2,
 			'dashboard_bc_summary_variable_cost' => $variable_cost2,
 			'dashboard_bc_summary_margin' => $margin2,
 			'dashboard_bc_summary_period_cost' => $period_cost2,
 			'dashboard_bc_summary_noi' => $noi2,
 			'dashboard_bc_summary_noi_percent' => $noi_percent2,
 			'dashboard_bc_summary_others' => $others2,
 			'dashboard_bc_summary_added' => date_now(),
 			'dashboard_bc_summary_updated' => date_now(),
 			'dashboard_bc_summary_status' => 1,
 		);

	    $insert_pnl2 = $this->admin->insert_data('dashboard_bc_summary_tbl', $set_pnl2);
	}

	public function view_dashboard($type = 'BC', $year = null, $id = null){
		$info = $this->_require_login();
		$user_type = decode($info['user_type_id']);
		$data['user_type'] = $user_type;
		$data['title'] = 'Dashboard';

		$type = decode($type);
		$data['type'] = $type;
		$year = decode($year);
		$trans_unit_id = '';
		if($type == 'BC'){
			$trans_id = decode($id);
			if($user_type == 2){
				$user_info = $this->get_user_info();
				$user_bc_id = $user_info['bc_id'];

				$join_trans = array('bc_tbl b' => 'a.bc_id = b.bc_id AND a.dashboard_trans_status_id = 3 AND a.bc_id = ' . $user_bc_id . ' AND a.dashboard_bc_trans_id = ' . $trans_id);
			}elseif($user_type == 6){
				$user_info = $this->get_user_info();
				$user_region_id = $user_info['region_id'];

				$join_trans = array(
					'bc_tbl b' => 'a.bc_id = b.bc_id AND a.dashboard_trans_status_id = 3 AND a.bc_id AND a.dashboard_bc_trans_id = ' . $trans_id,
					'region_tbl c' => 'b.region_id = c.region_id AND c.region_id = ' . $user_region_id
				);


			}elseif($user_type == 1 || $user_type == 7){
				$join_trans = array('bc_tbl b' => 'a.bc_id = b.bc_id AND a.dashboard_trans_status_id = 3 AND a.dashboard_bc_trans_id = ' . $trans_id);
			}else{
				echo "Sorry you don't have access to this report.";
				exit;
			}

			$check_trans = $this->admin->check_join('dashboard_bc_transaction_tbl a', $join_trans, TRUE);
			if($check_trans['result'] == TRUE){
				$bc_name = $check_trans['info']->bc_name;
				$report_type = 'BUSINESS CENTER';
				$data['dashboard_type'] = $bc_name . ' ' . $report_type . ' DASHBOARD';
			}else{
				echo 'Invalid Transaction. Please try again!';
				exit;
			}
		}elseif($type == 'REGIONAL'){

			$id = decode($id);
			if($user_type == 1 || $user_type == 7){
				$get_details = $this->get_trans_region($id);
			}elseif($user_type == 6){
				$user_info = $this->get_user_info();
				$user_region_id = $user_info['region_id'];
				if($user_region_id == $id){
					$get_details = $this->get_trans_region($id);
				}else{
					echo "Sorry you don't have access to this report.";
					exit;
				}
			}else{
				echo "Sorry you don't have access to this report.";
				exit;
			}

			$trans_id = $get_details['trans_id'];
			$region_name = $get_details['region_name'];
			$data['dashboard_type'] = $region_name . ' ' . ' REGION ' . 'DASHBOARD';

		}elseif($type == 'NATIONAL'){
			if($user_type == 1 || $user_type == 7){
				$get_details = $this->get_trans_national();
				$trans_id = $get_details['trans_id'];
				$trans_unit_id = $this->get_trans_unit_national();
				$data['dashboard_type'] = 'NATIONAL DASHBOARD';
			}else{
				echo "Sorry you don't have access to this report.";
				exit;
			}
		}

		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','4048M');


		$data['year'] = $year;
		$data['last_year'] = $year - 1;

		/*NOI*/

		$get_noi = $this->get_noi_data($trans_id, $year, null, $type, $trans_unit_id, $id);
		$data['sales_unit_report'] = $get_noi['sales_unit_report'];
		$data['sales_unit'] = $get_noi['sales_unit'];
		$data['sales_unit1'] = $get_noi['sales_unit1'];
		$data['sales_unit2'] = $get_noi['sales_unit2'];

		$data['net_sales_report'] = $get_noi['net_sales_report'];
		$data['net_sales'] = $get_noi['net_sales'];
		$data['net_sales1'] = $get_noi['net_sales1'];
		$data['net_sales2'] = $get_noi['net_sales2'];

		$data['noi_report'] = $get_noi['noi_report'];
		$data['noi'] = $get_noi['noi'];
		$data['noi1'] = $get_noi['noi1'];
		$data['noi2'] = $get_noi['noi2'];
    	$data['pnl_tbl'] = $get_noi['pnl_tbl'];


		/*Broiler*/

		$get_broiler = $this->get_broiler_data($trans_id, $year);
		$data['harvest_tbl'] = $get_broiler['broiler_tbl'];
    	$data['harvest_report'] = $get_broiler['birds_report'];
    	$data['harvested_heads'] = $get_broiler['birds'];
    	$data['harvested_heads1'] = $get_broiler['birds1'];
    	$data['harvested_heads2'] = $get_broiler['birds2'];

		$data['broiler_cost_report'] = $get_broiler['cost_report'];
		$data['broiler_cost'] = $get_broiler['cost'];
    	$data['broiler_cost1'] = $get_broiler['cost1'];
    	$data['broiler_cost2'] = $get_broiler['cost2'];


    	/*Sales Mix*/

    	$get_sales_mix = $this->get_sales_mix_report_data($trans_id, $year);
    	$data['sales_mix_tbl'] = $get_sales_mix['sales_mix_tbl'];
    	$data['sales_mix_total'] = $get_sales_mix['sales_mix_total'];
    	$data['sales_mix'] = $get_sales_mix['sales_mix'];

    	
    	/*Employeee/Manpower*/

		$get_employee = $this->get_employee_report_data($trans_id, $year, null, $type, $trans_unit_id);
		$data['employee_report'] = $get_employee['employee_report'];
		$data['employee_new'] = $get_employee['employee_new'];
		


		/*Outlet*/

		$outlet_report = $this->get_outlet_report_data($trans_id, $year, null, $type, $trans_unit_id);
		$data['outlet_report'] = $outlet_report;

		
		/*CAPEX*/

		$get_capex = $this->get_capex_summary_report_data($trans_id, $year, null, $type, $trans_unit_id);

		$data['capex_report'] = $get_capex['capex_report'];
		$data['capex'] = $get_capex['capex'];
		$data['capex1'] = $get_capex['capex1'];
		$data['capex2'] = $get_capex['capex2'];


		/*Volume*/

 		$data['volume_tbl'] = $this->get_volume_report_data($trans_id);
 		$data['price_tbl'] = $this->price_assumption_report_data($trans_id, $year);

 		$get_opex = $this->opex_report_data($trans_id, $year, $type, $trans_unit_id);
 		$data['opex_tbl'] = $get_opex['opex_tbl'];
 		$data['opex'] = $get_opex['opex'];
 		$data['opex1'] = $get_opex['opex1'];
 		$data['opex2'] = $get_opex['opex2'];
 		$data['opex_report'] = $get_opex['opex_report'];

 		$get_cm_store = $this->get_cm_store_data($trans_id);
 		$data['cm_store_tbl'] = $get_cm_store['cm_tbl'];

		$data['content'] = $this->load->view('dashboard/dashboard_view_content', $data , TRUE);

		$user_type = decode($info['user_type_id']);
		if($user_type == 1){
			$this->load->view('admin/templates', $data);
		}elseif($user_type == 2){
			$this->load->view('bc/templates', $data);
		}elseif($user_type == 3){
			$this->load->view('unit/templates', $data);
		}elseif($user_type == 6){
			$this->load->view('region/templates', $data);
		}elseif($user_type == 7){
			$this->load->view('national/templates', $data);
		}
		

	}

	public function get_broiler_data($trans_id, $year, $report_type = null){
		$info = $this->_require_login();

		$where_broiler = 'dashboard_bc_trans_id IN (' .  $trans_id . ') AND dashboard_broiler_status = 1';
		$select_broiler = 'SUM(dashboard_broiler_birds) as dashboard_broiler_birds, SUM(dashboard_broiler_birds1) as dashboard_broiler_birds1, SUM(dashboard_broiler_birds2) as dashboard_broiler_birds2, SUM(dashboard_broiler_cost) as dashboard_broiler_cost, SUM(dashboard_broiler_cost1) as dashboard_broiler_cost1, SUM(dashboard_broiler_cost2) as dashboard_broiler_cost2, dashboard_broiler_date';
		$get_broiler = $this->admin->get_data('dashboard_broiler_tbl', $where_broiler, FALSE, $select_broiler, FALSE, 'dashboard_broiler_date');
		$birds_arr = array();
		$cost_arr = array();

		$broiler_tbl = '';
		$total_birds = 0;
		$total_birds1 = 0;
		$total_birds2 = 0;

		$total_cost = 0;
		$total_cost1 = 0;
		$total_cost2 = 0;

		foreach($get_broiler as $row){
			$birds = $row->dashboard_broiler_birds;
			$birds1 = $row->dashboard_broiler_birds1;
			$birds2 = $row->dashboard_broiler_birds2;

			$cost = $row->dashboard_broiler_cost;
			$cost1 = $row->dashboard_broiler_cost1;
			$cost2 = $row->dashboard_broiler_cost2;

			$month = date('F', strtotime($row->dashboard_broiler_date));

			$broiler_tbl .= '<tr>
				<td>' . $month . '</td>
				<td align="right">' . number_format($birds,0,'.',',') . '</td>
				<td align="right">' . number_format($birds1,0,'.',',') . '</td>
				<td align="right">' . number_format($birds2,0,'.',',') . '</td>

				<td align="right">' . number_format($cost,dec_places_dis(),'.',',') . '</td>
				<td align="right">' . number_format($cost1,dec_places_dis(),'.',',') . '</td>
				<td align="right">' . number_format($cost2,dec_places_dis(),'.',',') . '</td>
			</tr>';

			$total_birds += $birds;
			$total_birds1 += $birds1;
			$total_birds2 += $birds2;

			$total_cost += $cost;
			$total_cost1 += $cost1;
			$total_cost2 += $cost2;
		}

		$broiler_tbl .= '
			<tr>
				<td align="right">TOTAL</td>
				<td align="right">' . number_format($total_birds,0,'.',',') . '</td>
				<td align="right">' . number_format($total_birds1,0,'.',',') . '</td>
				<td align="right">' . number_format($total_birds2,0,'.',',') . '</td>
				<td align="right">' . number_format($total_cost,dec_places_dis(),'.',',') . '</td>
				<td align="right">' . number_format($total_cost1,dec_places_dis(),'.',',') . '</td>
				<td align="right">' . number_format($total_cost2,dec_places_dis(),'.',',') . '</td>
			</tr>
		';
		
		$harvested_dif1 = $total_birds - $total_birds1;
		$harvested_dif2 = $total_birds - $total_birds2;
		$harvested_percent1 = $total_birds > 0 ? ($harvested_dif1 / $total_birds) * 100 : 0;
		$harvested_percent2 = $total_birds > 0 ? ($harvested_dif2 / $total_birds) * 100 : 0;

 		$harvested_condition1 = '';
 		$harvested_indicator1 = '';
 		if($total_birds > $total_birds1){
 			$harvested_condition1 = 'higher';
 			$harvested_indicator1 = 'fa fa-long-arrow-up';
 		}elseif($total_birds < $total_birds1){
 			$harvested_condition1 = 'lower';
 			$harvested_indicator1 = 'fa fa-long-arrow-down';
 		}

 		$harvested_condition2 = '';
 		$harvested_indicator2 = '';
 		if($total_birds > $total_birds2){
 			$harvested_condition2 = 'higher';
 			$harvested_indicator2 = 'fa fa-long-arrow-up';
 		}elseif($total_birds < $total_birds2){
 			$harvested_condition2 = 'lower';
 			$harvested_indicator2 = 'fa fa-long-arrow-down';
 		}

		$broiler_cost_dif1 = round($total_cost) - round($total_cost1);
		$broiler_cost_dif2 = round($total_cost) - round($total_cost2);
		$broilder_cost_percent1 = $total_cost > 0 ? ($broiler_cost_dif1 / $total_cost) * 100 : 0;
		$broilder_cost_percent2 = $total_cost > 0 ? ($broiler_cost_dif1 / $total_cost) * 100 : 0;

		$broiler_cost_condition1 = '';
 		$broiler_cost_indicator1 = '';
 		if($total_cost > $total_cost1){
 			$broiler_cost_condition1 = 'higher';
 			$broiler_cost_indicator1 = 'fa fa-long-arrow-up';
 		}elseif($total_cost < $total_cost1){
 			$broiler_cost_condition1 = 'lower';
 			$broiler_cost_indicator1 = 'fa fa-long-arrow-down';
 		}

 		$broiler_cost_condition2 = '';
 		$broiler_cost_indicator2 = '';
 		if($total_cost > $total_cost2){
 			$broiler_cost_condition2 = 'higher';
 			$broiler_cost_indicator2 = 'fa fa-long-arrow-up';
 		}elseif($total_cost < $total_cost2){
 			$broiler_cost_condition2 = 'lower';
 			$broiler_cost_indicator2 = 'fa fa-long-arrow-down';
 		}

 		$broiler_cost_sign1 = $broiler_cost_dif1 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';
 		$broiler_cost_sign1 = $broiler_cost_dif1 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';


 		if($report_type == null){
 			$broiler_report = "Harvestable birds is <span class='dashboard-num'>" . convert_num($total_birds) . "</span> which is <span class='dashboard-num'>" . number_format($harvested_percent1) ."%</span> <span class='" . $harvested_indicator1 . "'></span>" . $harvested_condition1 . " than " . ($year - 1) . "'s <span class='dashboard-num'>" . convert_num($total_birds1) ."</span> and <span class='dashboard-num'>" . number_format($harvested_percent2) . "%</span> <span class='" . $harvested_indicator2 . "'></span>" . $harvested_condition2 . " " . ($year - 2) . " of <span class='dashboard-num'>" . convert_num($total_birds2) . "</span>";

	    	$cost_report = 'Broiler cost is <span class="dashboard-num">₱' . number_format($total_cost, 2) . '</span>, <span class="dashboard-num">₱' .number_format( $broiler_cost_dif1, 2) . '</span> <span class="' . $broiler_cost_indicator1 . '"></span> per kilo ' . $broiler_cost_condition1 . ' than ' . ($year - 1) . '\'s <span class="dashboard-num">₱' . number_format($total_cost1, 2) . '</span> and <span class="dashboard-num">₱' . number_format($total_cost2, 2) . '</span> <span class="' . $broiler_cost_indicator2 . '"></span> ' . ' ' . $broiler_cost_condition2 . ' than ' . ($year - 2) . ' <span class="dashboard-num">₱' . number_format($total_cost2, 2) . '</span>.'; 
 		}elseif($report_type == 'PDF'){
 			$broiler_report = "Harvestable birds is " . convert_num($total_birds) . " which is " . number_format($harvested_percent1) ."%" . $harvested_condition1 . " than " . ($year - 1) . "'s " . convert_num($total_birds1) ." and " . number_format($harvested_percent2) . "% " . $harvested_condition2 . " " . ($year - 2) . " of " . convert_num($total_birds2);

	    	$cost_report = 'Broiler cost is ₱' . number_format($total_cost, 2) . ', ₱' . number_format( $broiler_cost_dif1, 2) . ' per kilo ' . $broiler_cost_condition1 . ' than ' . ($year - 1) . '\'s ₱' . number_format($total_cost1, 2) . ' and ₱' . number_format($total_cost2, 2) . ' ' . $broiler_cost_condition2 . ' than ' . ($year - 2) . ' ₱' . number_format($total_cost2, 2) . '.'; 
 		}
	    

	    $data['broiler_tbl'] = $broiler_tbl;
	    $data['birds_report'] = $broiler_report;
	    $data['birds'] = $total_birds;
	    $data['birds1'] = $total_birds1;
	    $data['birds2'] = $total_birds2;

	    $data['cost_report'] = $cost_report;
	    $data['cost'] = $total_cost;
	    $data['cost1'] = $total_cost1;
	    $data['cost2'] = $total_cost2;

	    return $data;
	}

	public function get_noi_data($trans_id, $year, $report_type = null, $type = null, $trans_unit_id = null, $id){
		$info = $this->_require_login();

		$where_noi ='dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_bc_summary_year = ' . $year . ' AND dashboard_bc_summary_status = 1';
		$select_noi = 'SUM(dashboard_bc_summary_sales_unit) as dashboard_bc_summary_sales_unit, SUM(dashboard_bc_summary_net_sales) as dashboard_bc_summary_net_sales, SUM(dashboard_bc_summary_variable_cost) as dashboard_bc_summary_variable_cost, SUM(dashboard_bc_summary_period_cost) as dashboard_bc_summary_period_cost, SUM(dashboard_bc_summary_others) as dashboard_bc_summary_others';
		$get_noi = $this->admin->check_data('dashboard_bc_summary_tbl', $where_noi, TRUE, $select_noi);

		$sales_unit = 0;
		$net_sales = 0;
		$variable_cost = 0;
		$period_cost = 0;
		$margin = 0;
		$cm_percent = 0;
		$others = 0;
		$others_unit = 0;
		$noi = 0;
		$noi_unit = 0;
		$noi_percent = 0;

		$fixed_cost = 0;
		$interest_cost = 0;
		$gae_cost = 0;
		$unit_cost = 0;
		$unit_expense = 0;

		$fixed_cost1 = 0;
		$interest_cost1 = 0;
		$gae_cost1 = 0;
		$unit_cost1 = 0;
		$unit_expense1 = 0;

		$fixed_cost2 = 0;
		$interest_cost2 = 0;
		$gae_cost2 = 0;
		$unit_cost2 = 0;
		$unit_expense2 = 0;

		$region_cost = 0;
		$region_cost1 = 0;
		$region_cost2 = 0;

		if($get_noi['result'] == TRUE){
			$sales_unit = $get_noi['info']->dashboard_bc_summary_sales_unit;
			$net_sales = $get_noi['info']->dashboard_bc_summary_net_sales;
			$variable_cost = $get_noi['info']->dashboard_bc_summary_variable_cost;
			$period_cost = $get_noi['info']->dashboard_bc_summary_period_cost;

			if($type == 'NATIONAL'){
				$select_unit_opex = 'SUM(dashboard_unit_opex_cost_center_amount) as unit_opex, SUM(dashboard_unit_opex_cost_center_amount1) as unit_opex1, SUM(dashboard_unit_opex_cost_center_amount2) as unit_opex2';
				$join_fixed_cost = array(
					'gl_subgroup_tbl b' => 'a.gl_sub_id = b.gl_sub_id AND a.dashboard_unit_opex_cost_center_status = 1 AND b.gl_class_id = 1 AND a.dashboard_unit_trans_id IN (' . $trans_unit_id . ')'
				);
				$get_fixed_cost = $this->admin->get_join('dashboard_unit_opex_cost_center_tbl a', $join_fixed_cost, TRUE, FALSE, FALSE, $select_unit_opex);

				$fixed_cost = $get_fixed_cost->unit_opex;
				$fixed_cost1 = $get_fixed_cost->unit_opex1;
				$fixed_cost2 = $get_fixed_cost->unit_opex2;

				$select_interest_opex = 'SUM(dashboard_unit_opex_cost_center_amount) as unit_opex, SUM(dashboard_unit_opex_cost_center_amount1) as unit_opex1, SUM(dashboard_unit_opex_cost_center_amount2) as unit_opex2';
				$join_interest_cost = array(
					'gl_subgroup_tbl b' => 'a.gl_sub_id = b.gl_sub_id AND a.dashboard_unit_opex_cost_center_status = 1 AND b.gl_class_id = 2 AND a.dashboard_unit_trans_id IN (' . $trans_unit_id . ')'
				);
				$get_interest_cost = $this->admin->get_join('dashboard_unit_opex_cost_center_tbl a', $join_interest_cost, TRUE, FALSE, FALSE, $select_interest_opex);

				$check_interest_cost = $this->admin->check_data('dashboard_interest_tbl', array('dashboard_interest_year' => $year, 'dashboard_interest_status' => 1), TRUE);
				if($check_interest_cost['result'] == TRUE){
					$interest_cost = $check_interest_cost['info']->dashboard_interest_amount;
					$interest_cost1 = $check_interest_cost['info']->dashboard_interest_amount1;
					$interest_cost2 = $check_interest_cost['info']->dashboard_interest_amount2;
				}

				$select_gae_opex = 'SUM(dashboard_unit_opex_cost_center_amount) as unit_opex, SUM(dashboard_unit_opex_cost_center_amount1) as unit_opex1, SUM(dashboard_unit_opex_cost_center_amount2) as unit_opex2';
				$join_gae_cost = array(
					'gl_subgroup_tbl b' => 'a.gl_sub_id = b.gl_sub_id AND a.dashboard_unit_opex_cost_center_status = 1 AND b.gl_class_id = 3 AND a.dashboard_unit_trans_id IN (' . $trans_unit_id . ')'
				);
				$get_gae_cost = $this->admin->get_join('dashboard_unit_opex_cost_center_tbl a', $join_gae_cost, TRUE, FALSE, FALSE, $select_gae_opex);

				$check_gae_cost = $this->admin->check_data('dashboard_gae_tbl', array('dashboard_gae_year' => $year, 'dashboard_gae_status' => 1), TRUE);
				if($check_gae_cost['result'] == TRUE){
					$gae_cost = $check_gae_cost['info']->dashboard_gae_amount;
					$gae_cost1 = $check_gae_cost['info']->dashboard_gae_amount1;
					$gae_cost2 = $check_gae_cost['info']->dashboard_gae_amount2;
				}

				$unit_cost = $fixed_cost + $interest_cost + $gae_cost;
				$unit_cost1 = $fixed_cost1 + $interest_cost1 + $gae_cost1;
				$unit_cost2 = $fixed_cost2 + $interest_cost2 + $gae_cost2;
			}elseif($type == "REGIONAL"){
				$select_region_opex = 'SUM(dashboard_unit_opex_cost_center_amount) as region_opex, SUM(dashboard_unit_opex_cost_center_amount1) as region_opex1, SUM(dashboard_unit_opex_cost_center_amount2) as region_opex2';
				$join_region_cost = array(
					'gl_subgroup_tbl b' => 'a.gl_sub_id = b.gl_sub_id AND a.dashboard_unit_opex_cost_center_status = 1 AND b.gl_class_id = 1',
					'company_unit_tbl c' => 'a.company_unit_id = c.company_unit_id',
					'region_unit_link_tbl d' => 'c.company_unit_id = d.company_unit_id AND d.region_id = ' . $id
				);

				$get_region_cost = $this->admin->check_join('dashboard_unit_opex_cost_center_tbl a', $join_region_cost, TRUE, FALSE, FALSE, $select_region_opex);
				if($get_region_cost['result'] == TRUE){
					$region_cost = $get_region_cost['info']->region_opex;
					$region_cost1 = $get_region_cost['info']->region_opex1;
					$region_cost2 = $get_region_cost['info']->region_opex2;
				}
			}


			$margin = $net_sales - $variable_cost;
			$cm_percent = $net_sales > 0 ? ($margin / $net_sales) * 100 : 0;

			$others = $get_noi['info']->dashboard_bc_summary_others;
			$others_unit = $sales_unit > 0 ? - $others / $sales_unit : 0;

			$noi = $margin - $period_cost - $others;
			$noi_unit = $sales_unit > 0 ? ($noi / $sales_unit) : 0;
			$noi_percent = $net_sales > 0 ? ($noi / $net_sales) * 100 : 0;
		}

		$where_noi1 = 'dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_bc_summary_year = ' . ($year - 1) . ' AND dashboard_bc_summary_status = 1';
		$select_noi1 = 'SUM(dashboard_bc_summary_sales_unit) as dashboard_bc_summary_sales_unit, SUM(dashboard_bc_summary_net_sales) as dashboard_bc_summary_net_sales, SUM(dashboard_bc_summary_variable_cost) as dashboard_bc_summary_variable_cost, SUM(dashboard_bc_summary_period_cost) as dashboard_bc_summary_period_cost, SUM(dashboard_bc_summary_others) as dashboard_bc_summary_others';
		$get_noi1 = $this->admin->check_data('dashboard_bc_summary_tbl', $where_noi1, TRUE, $select_noi1);

		$sales_unit1 = 0;
		$net_sales1 = 0;
		$variable_cost1 = 0;
		$period_cost1 = 0;
		$margin1 = 0;
		$cm_percent1 = 0;
		$others1 = 0;
		$others_unit1 = 0;
		$noi1 = 0;
		$noi_unit1 = 0;
		$noi_percent1 = 0;

		

		if($get_noi1['result'] == TRUE){
			$sales_unit1 = $get_noi1['info']->dashboard_bc_summary_sales_unit;
			$net_sales1 = $get_noi1['info']->dashboard_bc_summary_net_sales;
			$variable_cost1 = $get_noi1['info']->dashboard_bc_summary_variable_cost;
			$period_cost1 = $get_noi1['info']->dashboard_bc_summary_period_cost;
			$margin1 = $net_sales1 - $variable_cost1;
			$cm_percent1 = $net_sales1 > 0 ? ($margin1 / $net_sales1) * 100 : 0;
			
			$others1 = $get_noi1['info']->dashboard_bc_summary_others;
			$others_unit1 = $sales_unit1 > 0 ? - $others1 / $sales_unit1 : 0;

			$noi1 = $margin1 - $period_cost1 - $others1;
			$noi_unit1 = $sales_unit1 > 0 ? ($noi1 / $sales_unit1) : 0;
			$noi_percent1 = $net_sales1 > 0 ? ($noi1 / $net_sales1) * 100 : 0;
		}

		$where_noi2 = 'dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_bc_summary_year = ' . ($year - 2) . ' AND dashboard_bc_summary_status = 1';
		$select_noi2 = 'SUM(dashboard_bc_summary_sales_unit) as dashboard_bc_summary_sales_unit, SUM(dashboard_bc_summary_net_sales) as dashboard_bc_summary_net_sales, SUM(dashboard_bc_summary_variable_cost) as dashboard_bc_summary_variable_cost, SUM(dashboard_bc_summary_period_cost) as dashboard_bc_summary_period_cost, SUM(dashboard_bc_summary_others) as dashboard_bc_summary_others';
		$get_noi2 = $this->admin->check_data('dashboard_bc_summary_tbl', $where_noi2, TRUE, $select_noi2);

		$sales_unit2 = 0;
		$net_sales2 = 0;
		$variable_cost2 = 0;
		$period_cost2 = 0;
		$margin2 = 0;
		$cm_percent2 = 0;
		$others2 = 0;
		$others_unit2 = 0;
		$noi2 = 0;
		$noi_unit2 = 0;
		$noi_percent2 = 0;

		if($get_noi2['result'] == TRUE){
			$sales_unit2 = $get_noi2['info']->dashboard_bc_summary_sales_unit;
			$net_sales2 = $get_noi2['info']->dashboard_bc_summary_net_sales;
			$variable_cost2 = $get_noi2['info']->dashboard_bc_summary_variable_cost;
			$period_cost2 = $get_noi2['info']->dashboard_bc_summary_period_cost;
			$margin2 = $net_sales2 - $variable_cost2;
			$cm_percent2 = $net_sales2 > 0 ? ($margin2 / $net_sales2) * 100 : 0;
			
			$others2 = $get_noi2['info']->dashboard_bc_summary_others;
			$others_unit2 = $sales_unit2 > 0 ? - $others2 / $sales_unit2 : 0;

			$noi2 = $margin2 - $period_cost2 - $others2;
	    	$noi_unit2 = $sales_unit2 > 0 ? ($noi2 / $sales_unit2) : 0;
	    	$noi_percent2 = $net_sales2 > 0 ? ($noi2 / $net_sales2) * 100 : 0;
		}

		$nsp = $sales_unit > 0 ? $net_sales/$sales_unit : 0;
    	$nsp1 = $sales_unit1 > 0 ? $net_sales1/$sales_unit1 : 0;
    	$nsp2 = $sales_unit2 > 0 ? $net_sales2/$sales_unit2 : 0;

    	$variable_cost_unit = $sales_unit > 0 ? $variable_cost / $sales_unit : 0;
    	$variable_cost_unit1 = $sales_unit1 > 0 ? $variable_cost1 / $sales_unit1 : 0;
    	$variable_cost_unit2 = $sales_unit2 > 0 ? $variable_cost2 / $sales_unit2 : 0;

    	$margin = $net_sales - $variable_cost;
    	$margin1 = $net_sales1 - $variable_cost1;
    	$margin2 = $net_sales2 - $variable_cost2;

    	$margin_unit = $sales_unit > 0 ?  $margin / $sales_unit : 0;
    	$margin_unit1 = $sales_unit1 > 0 ?  $margin1 / $sales_unit1 : 0;
    	$margin_unit2 = $sales_unit2 > 0 ?  $margin2 / $sales_unit2 : 0;

    	$margin_percent1 = $net_sales > 0 ? ($margin / $net_sales) * 100 : 0;
    	$margin_percent1 = $net_sales1 > 0 ? ($margin1 / $net_sales1) * 100 : 0;
    	$margin_percent2 = $net_sales2 > 0 ? ($margin2 / $net_sales2) * 100 : 0;

    	$period_cost_unit = $sales_unit > 0 ? $period_cost / $sales_unit : 0;
    	$period_cost_unit1 = $sales_unit1 > 0 ? $period_cost1 / $sales_unit1 : 0;
    	$period_cost_unit2 = $sales_unit2 > 0 ? $period_cost2 / $sales_unit2 : 0;

    	$net_sales_dif1 = $net_sales - $net_sales1;
    	$net_sales_dif2 = $net_sales - $net_sales2;

    	$net_sales_percent1 = $net_sales1 > 0 ? ($net_sales_dif1 / $net_sales1) * 100 : 0;
    	$net_sales_percent2 = $net_sales2 > 0 ? ($net_sales_dif2 / $net_sales2) * 100 : 0;

    	$net_sales_condition1 = $net_sales_dif1 > 0 ? 'higher' :  'lower';
    	$net_sales_condition2 = $net_sales_dif2 > 0 ? 'higher' :  'lower';

    	$nsp_dif1 = $nsp - $nsp1;
    	$nsp_dif2 = $nsp - $nsp2;
    	$nsp_percent1 = $nsp1 > 0 ? ($nsp_dif1 / $nsp1) * 100 : 0;
    	$nsp_percent2 = $nsp2 > 0 ? ($nsp_dif2 / $nsp2) * 100 : 0;

    	$sales_unit_dif1 = $sales_unit - $sales_unit1;
    	$sales_unit_dif2 = $sales_unit - $sales_unit2;
    	$sales_unit_percent1 = $sales_unit1 > 0 ? ($sales_unit_dif1 / $sales_unit1) * 100 : 0;
    	$sales_unit_percent2 = $sales_unit2 > 0 ? ($sales_unit_dif2 / $sales_unit2) * 100 : 0;
    	$sales_unit_condition1 = $sales_unit_dif1 > 0 ? 'higher' :  'lower';
    	$sales_unit_condition2 = $sales_unit_dif2 > 0 ? 'higher' :  'lower';

    	$variable_cost_dif1 = $variable_cost - $variable_cost1;
    	$variable_cost_dif2 = $variable_cost - $variable_cost2;
    	$variable_cost_percent1 = $variable_cost1 > 0 ? ($variable_cost_dif1 / $variable_cost1) * 100 : 0;
    	$variable_cost_percent2 = $variable_cost2 > 0 ? ($variable_cost_dif2 / $variable_cost2) * 100 : 0;

    	/*$commission_dif1 = $commission - $commission1;
    	$commission_dif2 = $commission - $commission2;
    	$commission_percent1 = $commission1 > 0 ? ($commission_dif1 / $commission1) * 100 : 0;
    	$commission_percent2 = $commission2 > 0 ? ($commission_dif2 / $commission2) * 100 : 0;*/

    	$variable_cost_unit_dif1 = $variable_cost_unit - $variable_cost_unit1;
    	$variable_cost_unit_dif2 = $variable_cost_unit - $variable_cost_unit2;
    	$varialbe_cost_unit_percent1 = $variable_cost_unit1 > 0 ? ($variable_cost_unit_dif1 / $variable_cost_unit1) * 100 : 0;
    	$varialbe_cost_unit_percent2 = $variable_cost_unit1 > 0 ? ($variable_cost_unit_dif2 / $variable_cost_unit1) * 100 : 0;

    	$margin_dif1 = $margin - $margin1;
    	$margin_dif2 = $margin - $margin2;
    	$margin_percent = $net_sales > 0 ? ($margin / $net_sales) * 100 : 0;
    	$margin_percent1 = $margin1 > 0 ? ($margin_dif1 / $margin1) * 100 : 0;
    	$margin_percent2 = $margin2 > 0 ? ($margin_dif2 / $margin2) * 100 : 0;

    	$margin_unit_dif1 = $margin_unit - $margin_unit1;
    	$margin_unit_dif2 = $margin_unit - $margin_unit2;
    	$margin_unit_percent1 = $margin_unit1 > 0 ? ($margin_unit_dif1 / $margin_unit1) * 100 : 0;
    	$margin_unit_percent2 = $margin_unit2 > 0 ? ($margin_unit_dif2 / $margin_unit2) * 100 : 0;

    	$cm_percent_dif1 = $margin_percent - $margin_percent1;
    	$cm_percent_dif2 = $margin_percent - $margin_percent2;
    	$cm_percent_dif_percent1 = $margin_percent1 > 0 ? ($cm_percent_dif1 / $margin_percent1) * 100 : 0;
    	$cm_percent_dif_percent2 = $margin_percent2 > 0 ? ($cm_percent_dif2 / $margin_percent2) * 100 : 0;

    	$period_cost_dif1 = $period_cost - $period_cost1;
    	$period_cost_dif2 = $period_cost - $period_cost2;
    	$period_cost_percent1 = $period_cost1 > 0 ? ($period_cost_dif1 / $period_cost1) * 100 : 0;
    	$period_cost_percent2 = $period_cost2 > 0 ? ($period_cost_dif2 / $period_cost2) * 100 : 0;

    	$period_cost_unit_dif1 = $period_cost_unit - $period_cost_unit1;
    	$period_cost_unit_dif2 = $period_cost_unit - $period_cost_unit2;
    	$period_cost_unit_percent1 = $period_cost_unit1 > 0 ? ($period_cost_unit_dif1 / $period_cost_unit1) * 100 : 0;
    	$period_cost_unit_percent2 = $period_cost_unit2 > 0 ? ($period_cost_unit_dif2 / $period_cost_unit2) * 100 : 0;

    	$noi_dif1 = $noi - $noi1;
    	$noi_dif2 = $noi - $noi2;
    	$noi_dif_percent1 = $noi1 != 0 ? ($noi_dif1 / $noi1) * 100 : 0;
    	$noi_dif_percent2 = $noi2 != 0 ? ($noi_dif2 / $noi2) * 100 : 0;
    	$noi_condition1 = $noi_dif1 > 0 ? 'higher' :  'lower';
    	$noi_condition2 = $noi_dif2 > 0 ? 'higher' :  'lower';

    	$noi_unit_dif1 = $noi_unit - $noi_unit1;
    	$noi_unit_dif2 = $noi_unit - $noi_unit2;
    	$noi_unit_percent1 = $noi_unit1 > 0 ? ($noi_unit_dif1 / $noi_unit1) * 100 : 0;
    	$noi_unit_percent2 = $noi_unit2 > 0 ? ($noi_unit_dif2 / $noi_unit2) * 100 : 0;

    	$noi_percent_dif1 = $noi_percent - $noi_percent1;
    	$noi_percent_dif2 = $noi_percent - $noi_percent2;
    	$noi_percent_percent1 = $noi_percent1 > 0 ? ($noi_percent_dif1 / $noi_percent1) * 100 : 0;
    	$noi_percent_percent2 = $noi_percent2 > 0 ? ($noi_percent_dif2 / $noi_percent2) * 100 : 0;

    	$nsp = $sales_unit > 0 ? $net_sales / $sales_unit : 0;
	    $nsp1 = $sales_unit1 > 0 ? $net_sales1 / $sales_unit1 : 0;
	    $nsp2 = $sales_unit2 > 0 ? $net_sales2 / $sales_unit2 : 0;

	    $others_dif1 = $others - $others1;
	    $others_dif2 = $others - $others2;
	    $others_percent1 = $others > 0 ? ($others_dif1 / $others1) *100 : 0;
	    $others_percent2 = $others > 0 ? ($others_dif2 / $others2) *100 : 0;

	    $others_unit_dif1 = $others_unit - $others_unit1;
    	$others_unit_dif2 = $others_unit - $others_unit2;
    	$others_unit_percent1 = $others_unit1 > 0 ? ($others_unit_dif1 / $others_unit1) * 100 : 0;
    	$others_unit_percent2 = $others_unit2 > 0 ? ($others_unit_dif2 / $others_unit2) * 100 : 0;

    	$region_cost_dif1 = $region_cost - $region_cost1;
    	$region_cost_dif2 = $region_cost - $region_cost2;
    	$region_cost_percent1 = $region_cost1 > 0 ? ($region_cost_dif1 / $region_cost1) * 100 : 0;
    	$region_cost_percent2 = $region_cost2 > 0 ? ($region_cost_dif2 / $region_cost2) * 100 : 0;



    	if($report_type == null){
	    	$pnl_tbl = '
	            <tr>
	    			<td><strong>Sales Volume, in Unit</strong></td>
	    			<td align="right"><a href="' . base_url('dashboard/dl-sales-volume/' . encode($type) . '/' . encode($trans_id) . '/' . $year) . '" target="_blank">' . number_format($sales_unit/1000) . '</a></td>
	    			<td align="right">' . number_format($sales_unit1/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit2/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit_dif1/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit_percent1) . '%</td>
	    			<td align="right">' . number_format($sales_unit_dif2/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit_percent2) . '%</td>

	    		</tr>

	    		<tr>
	    			<td><strong>NET SALES</strong></td>
	    			<td align="right"><a href="' . base_url('dashboard/dl-net-sales/' . encode($type) . '/' . encode($trans_id) . '/' . $year) . '" target="_blank">' . number_format($net_sales/1000) . '</a></td>
	    			<td align="right">' . number_format($net_sales1/1000) . '</td>
	    			<td align="right">' . number_format($net_sales2/1000) . '</td>
	    			<td align="right">' . number_format($net_sales_dif1/1000) . '</td>
	    			<td align="right">' . number_format($net_sales_percent1) . '%</td>
	    			<td align="right">' . number_format($net_sales_dif2/1000) . '</td>
	    			<td align="right">' . number_format($net_sales_percent2) . '%</td>
	    		</tr>


	    		<tr>
	    			<td><strong>NSP per Unit (P)</strong></td>
	    			<td align="right">' . number_format($nsp, 2) . '</td>
	    			<td align="right">' . number_format($nsp1, 2) . '</td>
	    			<td align="right">' . number_format($nsp2, 2) . '</td>
	    			<td align="right">' . number_format($nsp_dif1, 2) . '</td>
	    			<td align="right">' . number_format($nsp_percent1) . '%</td>
	    			<td align="right">' . number_format($nsp_dif2, 2) . '</td>
	    			<td align="right">' . number_format($nsp_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Variable Cost</strong></td>
	    			<td align="right"><a href="' . base_url('dashboard/dl-noi-main-new/' . $type . '/' . encode($trans_id) . '/' . $year) . '" target="_blank">' . number_format($variable_cost/1000) . '</a></td>
	    			<td align="right">' . number_format($variable_cost1/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost2/1000) . '</td>
	    			<td align="right">' . number_format(($variable_cost_dif1/1000) * -1) . '</td>
	    			<td align="right">' . number_format(($variable_cost_percent1) * -1) . '%</td>
	    			<td align="right">' . number_format(($variable_cost_dif2/1000) * -1) . '</td>
	    			<td align="right">' . number_format(($variable_cost_percent2) * -1) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Var. Cost per Unit (P)</strong></td>
	    			<td align="right">' . number_format($variable_cost_unit, 2) . '</td>
	    			<td align="right">' . number_format($variable_cost_unit1, 2) . '</td>
	    			<td align="right">' . number_format($variable_cost_unit2, 2) . '</td>
	    			<td align="right">' . number_format(($variable_cost_unit_dif1) * -1, 2) . '</td>
	    			<td align="right">' . number_format(($varialbe_cost_unit_percent1) * -1) . '%</td>
	    			<td align="right">' . number_format(($variable_cost_unit_dif2) * -1, 2) . '</td>
	    			<td align="right">' . number_format(($varialbe_cost_unit_percent2 * -1)) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Contribution Margin</strong></td>
	    			<td align="right">' . number_format($margin/1000) . '</td>
	    			<td align="right">' . number_format($margin1/1000) . '</td>
	    			<td align="right">' . number_format($margin2/1000) . '</td>
	    			<td align="right">' . number_format($margin_dif1/1000) . '</td>
	    			<td align="right">' . number_format($margin_percent1) . '%</td>
	    			<td align="right">' . number_format($margin_dif2/1000) . '</td>
	    			<td align="right">' . number_format($margin_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>CM per Unit (P)</strong></td>
	    			<td align="right">' . number_format($margin_unit, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit1, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit2, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit_dif1, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit_percent1) . '%</td>
	    			<td align="right">' . number_format($margin_unit_dif2, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>CM %</strong></td>
	    			<td align="right">' . number_format($margin_percent) . '%</td>
	    			<td align="right">' . number_format($cm_percent1) . '%</td>
	    			<td align="right">' . number_format($cm_percent2) . '%</td>
	    			<td align="right">' . number_format($cm_percent_dif1) . '%</td>
	    			<td align="right">' . number_format($cm_percent_dif_percent1) . '%</td>
	    			<td align="right">' . number_format($cm_percent_dif2) . '%</td>
	    			<td align="right">' . number_format($cm_percent_dif_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Period Cost</strong></td>
	    			<td align="right"><a href="' . base_url('dashboard/download-opex/' . $type . '/' . encode($trans_id) . '/' . $year) . '" target="_blank">' . number_format($period_cost/1000) . '</a</td>
	    			<td align="right">' . number_format($period_cost1/1000) . '</td>
	    			<td align="right">' . number_format($period_cost2/1000) . '</td>
	    			<td align="right">' . number_format(($period_cost_dif1/1000) * -1) . '</td>
	    			<td align="right">' . number_format(($period_cost_percent1) * -1) . '%</td>
	    			<td align="right">' . number_format(($period_cost_dif2/1000) * -1) . '</td>
	    			<td align="right">' . number_format(($period_cost_percent2) * -1) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Period Cost per Unit (P)</strong></td>
	    			<td align="right">' . number_format($period_cost_unit, 2) . '</td>
	    			<td align="right">' . number_format($period_cost_unit1, 2) . '</td>
	    			<td align="right">' . number_format($period_cost_unit2, 2) . '</td>
	    			<td align="right">' . number_format(($period_cost_unit_dif1) * -1, 2) . '</td>
	    			<td align="right">' . number_format($period_cost_unit_percent1 * -1) . '%</td>
	    			<td align="right">' . number_format(($period_cost_unit_dif2 * -1), 2) . '</td>
	    			<td align="right">' . number_format($period_cost_unit_percent2 * -1) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Other Income/Expenses</strong></td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($others1 / 1000) . '</td>
	    			<td align="right">' . number_format($others2 / 1000). '</td>
	    			<td align="right">' . number_format(($others_dif1 * -1) / 1000)  . '</td>
	    			<td align="right">' . number_format($others_percent1 * -1) . '%</td>
	    			<td align="right">' . number_format(($others_dif2 * -1) / 1000) . '</td>
	    			<td align="right">' . number_format($others_percent2 * -1) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Others per Unit (P)</strong></td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($others_unit1, 2) . '</td>
	    			<td align="right">' . number_format($others_unit2, 2) . '</td>
	    			<td align="right">' . number_format(($others_unit_dif1) * -1, 2) . '</td>
	    			<td align="right">' . number_format($others_unit_percent1 * -1) . '%</td>
	    			<td align="right">' . number_format(($others_unit_dif2) * -1, 2) . '</td>
	    			<td align="right">' . number_format($others_unit_percent2 * -1) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Net Operating Income</strong></td>
	    			<td align="right">' . number_format($noi/1000) . '</td>
	    			<td align="right">' . number_format($noi1/1000) . '</td>
	    			<td align="right">' . number_format($noi2/1000) . '</td>
	    			<td align="right">' . number_format($noi_dif1/1000) . '</td>
	    			<td align="right">' . number_format($noi_dif_percent1) . '%</td>
	    			<td align="right">' . number_format($noi_dif2/1000) . '</td>
	    			<td align="right">' . number_format($noi_dif_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>NOI per Unit (P)</strong></td>
	    			<td align="right">' . number_format($noi_unit, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit1, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit2, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit_dif1, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit_percent1) . '%</td>
	    			<td align="right">' . number_format($noi_unit_dif2, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>NOI to Sales</strong></td>
	    			<td align="right">' . number_format($noi_percent) . '%</td>
	    			<td align="right">' . number_format($noi_percent1) . '%</td>
	    			<td align="right">' . number_format($noi_percent2) . '%</td>
	    			<td align="right">' . number_format($noi_percent_dif1) . '%</td>
	    			<td align="right">' . number_format($noi_percent_percent1) . '%</td>
	    			<td align="right">' . number_format($noi_percent_dif2) . '%</td>
	    			<td align="right">' . number_format($noi_percent_percent2) . '%</td>
	    		</tr>
		    ';

		    if($type == 'NATIONAL'){

		    	$unit_cost_dif1 = $unit_cost - $unit_cost1;
    			$unit_cost_dif2 = $unit_cost - $unit_cost2;
	    		$unit_cost_percent1 = $unit_cost1 > 0 ? ($unit_cost_dif1 / $unit_cost1) * 100 : 0;
	    		$unit_cost_percent2 = $unit_cost2 > 0 ? ($unit_cost_dif2 / $unit_cost2) * 100 : 0;

	    		$fixed_cost_dif1 = $fixed_cost - $fixed_cost1;
    			$fixed_cost_dif2 = $fixed_cost - $fixed_cost2;
	    		$fixed_cost_percent1 = $fixed_cost1 > 0 ? ($fixed_cost_dif1 / $fixed_cost1) * 100 : 0;
	    		$fixed_cost_percent2 = $fixed_cost2 > 0 ? ($fixed_cost_dif2 / $fixed_cost2) * 100 : 0;


		    	$gae_cost_dif1 = $gae_cost - $gae_cost1;
    			$gae_cost_dif2 = $gae_cost - $gae_cost2;
	    		$gae_cost_percent1 = $gae_cost1 > 0 ? ($gae_cost_dif1 / $gae_cost1) * 100 : 0;
	    		$gae_cost_percent2 = $gae_cost2 > 0 ? ($gae_cost_dif2 / $gae_cost2) * 100 : 0;

	    		$interest_cost_dif1 = $interest_cost - $interest_cost1;
    			$interest_cost_dif2 = $interest_cost - $interest_cost2;
	    		$interest_cost_percent1 = $interest_cost1 > 0 ? ($interest_cost_dif1 / $interest_cost1) * 100 : 0;
	    		$interest_cost_percent2 = $interest_cost2 > 0 ? ($interest_cost_dif2 / $interest_cost2) * 100 : 0;

	    		$noi_ho = $noi - $unit_cost;
	    		$noi_ho1 = $noi1 - $unit_cost1;
	    		$noi_ho2 = $noi2 - $unit_cost2;

	    		$noi_ho_dif1 = $noi_ho - $noi_ho1;
    			$noi_ho_dif2 = $noi_ho - $noi_ho2;
	    		$noi_ho_percent1 = $noi_ho1 > 0 ? ($noi_ho_dif1 / $noi_ho1) * 100 : 0;
	    		$noi_ho_percent2 = $noi_ho2 > 0 ? ($noi_ho_dif2 / $noi_ho2) * 100 : 0;

	    		$unit_expense_dif1 = $unit_expense - $unit_expense1;
	    		$unit_expense_dif2 = $unit_expense - $unit_expense2;
	    		$unit_expense_percent1 = $unit_expense1 > 0 ? ($unit_expense_dif1 / $unit_expense1) * 100 : 0;
	    		$unit_expense_percent2 = $unit_expense2 > 0 ? ($unit_expense_dif2 / $unit_expense2) * 100 : 0;

	    		$noi_after_ho = $noi_ho - $unit_expense;
	    		$noi_after_ho1 = $noi_ho1 - $unit_expense1;
	    		$noi_after_ho2 = $noi_ho2 - $unit_expense2;

	    		$noi_after_ho_dif1 = $noi_after_ho - $noi_after_ho1;
    			$noi_after_ho_dif2 = $noi_after_ho - $noi_after_ho2;
	    		$noi_after_ho_percent1 = $noi_after_ho1 > 0 ? ($noi_after_ho_dif1 / $noi_after_ho1) * 100 : 0;
	    		$noi_after_ho_percent2 = $noi_after_ho2 > 0 ? ($noi_after_ho_dif2 / $noi_after_ho2) * 100 : 0;

	    		$noi_to_sales = $net_sales > 0 ? ($noi_after_ho / $net_sales) * 100 : 0;
	    		$noi_to_sales1 = $net_sales1 > 0 ? ($noi_after_ho1 / $net_sales1) * 100 : 0;
	    		$noi_to_sales2 = $net_sales2 > 0 ? ($noi_after_ho2 / $net_sales2) * 100 : 0;

	    		$noi_to_sales_dif1 = $noi_to_sales - $noi_to_sales1;
    			$noi_to_sales_dif2 = $noi_to_sales - $noi_to_sales2;
	    		$noi_to_sales_percent1 = $noi_to_sales1 > 0 ? ($noi_to_sales_dif1 / $noi_to_sales1) * 100 : 0;
	    		$noi_to_sales_percent2 = $noi_to_sales2 > 0 ? ($noi_to_sales_dif2 / $noi_to_sales2) * 100 : 0;

		    	$pnl_tbl .= '
			    	<tr>
		    			<td><strong>Head Office Expenses</strong></td>
		    			<td align="right">' . number_format($unit_cost/1000) . '</td>
		    			<td align="right">' . number_format($unit_cost1/1000) . '</td>
		    			<td align="right">' . number_format($unit_cost2/1000) . '</td>
		    			<td align="right">' . number_format(($unit_cost_dif1/1000)) . '</td>
		    			<td align="right">' . number_format(($unit_cost_percent1)) . '%</td>
		    			<td align="right">' . number_format(($unit_cost_dif2/1000)) . '</td>
		    			<td align="right">' . number_format(($unit_cost_percent2)) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>HO Fixed Cost</strong></td>
		    			<td align="right">' . number_format($fixed_cost/1000) . '</td>
		    			<td align="right">' . number_format($fixed_cost1/1000) . '</td>
		    			<td align="right">' . number_format($fixed_cost2/1000) . '</td>
		    			<td align="right">' . number_format(($fixed_cost_dif1/1000)) . '</td>
		    			<td align="right">' . number_format(($fixed_cost_percent1)) . '%</td>
		    			<td align="right">' . number_format(($fixed_cost_dif2/1000)) . '</td>
		    			<td align="right">' . number_format(($fixed_cost_percent2)) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>GAE</strong></td>
		    			<td align="right">' . number_format($gae_cost/1000) . '</td>
		    			<td align="right">' . number_format($gae_cost1/1000) . '</td>
		    			<td align="right">' . number_format($gae_cost2/1000) . '</td>
		    			<td align="right">' . number_format(($gae_cost_dif1/1000)) . '</td>
		    			<td align="right">' . number_format(($gae_cost_percent1)) . '%</td>
		    			<td align="right">' . number_format(($gae_cost_dif2/1000)) . '</td>
		    			<td align="right">' . number_format(($gae_cost_percent2)) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Interest Expense</strong></td>
		    			<td align="right">' . number_format($interest_cost/1000) . '</td>
		    			<td align="right">' . number_format($interest_cost1/1000) . '</td>
		    			<td align="right">' . number_format($interest_cost2/1000) . '</td>
		    			<td align="right">' . number_format(($interest_cost_dif1/1000) * -1) . '</td>
		    			<td align="right">' . number_format(($interest_cost_percent1) * -1) . '%</td>
		    			<td align="right">' . number_format(($interest_cost_dif2/1000) * -1) . '</td>
		    			<td align="right">' . number_format(($interest_cost_percent2) * -1) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>NOI</strong></td>
		    			<td align="right">' . number_format($noi_ho/1000) . '</td>
		    			<td align="right">' . number_format($noi_ho1/1000) . '</td>
		    			<td align="right">' . number_format($noi_ho2/1000) . '</td>
		    			<td align="right">' . number_format(($noi_ho_dif1/1000)) . '</td>
		    			<td align="right">' . number_format(($noi_ho_percent1)) . '%</td>
		    			<td align="right">' . number_format(($noi_ho_dif2/1000)) . '</td>
		    			<td align="right">' . number_format(($noi_ho_percent2)) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Other Income/Expenses</strong></td>
		    			<td align="right">' . number_format($unit_expense/1000) . '</td>
		    			<td align="right">' . number_format($unit_expense1/1000) . '</td>
		    			<td align="right">' . number_format($unit_expense2/1000) . '</td>
		    			<td align="right">' . number_format(($unit_expense_dif1/1000)) . '</td>
		    			<td align="right">' . number_format(($unit_expense_percent1)) . '%</td>
		    			<td align="right">' . number_format(($unit_expense_dif2/1000)) . '</td>
		    			<td align="right">' . number_format(($unit_expense_percent2)) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>NOI After HO Expenses</strong></td>
		    			<td align="right">' . number_format($noi_after_ho/1000) . '</td>
		    			<td align="right">' . number_format($noi_after_ho1/1000) . '</td>
		    			<td align="right">' . number_format($noi_after_ho2/1000) . '</td>
		    			<td align="right">' . number_format(($noi_after_ho_dif1/1000)) . '</td>
		    			<td align="right">' . number_format(($noi_after_ho_percent1)) . '%</td>
		    			<td align="right">' . number_format(($noi_after_ho_dif2/1000)) . '</td>
		    			<td align="right">' . number_format(($noi_after_ho_percent2)) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>% NOI to Sales</strong></td>
		    			<td align="right">' . number_format($noi_to_sales) . '%</td>
		    			<td align="right">' . number_format($noi_to_sales1) . '%</td>
		    			<td align="right">' . number_format($noi_to_sales2) . '%</td>
		    			<td align="right">' . number_format(($noi_to_sales_dif1)) . '%</td>
		    			<td align="right">' . number_format(($noi_to_sales_percent1)) . '%</td>
		    			<td align="right">' . number_format(($noi_to_sales_dif2)) . '%</td>
		    			<td align="right">' . number_format(($noi_to_sales_percent2)) . '%</td>
		    		</tr>

		    	';
		    }elseif($type == 'REGIONAL'){

		    	$noi = $margin - $period_cost - $others - $region_cost;
				$noi_unit = $sales_unit > 0 ? ($noi / $sales_unit) : 0;
				$noi_percent = $net_sales > 0 ? ($noi / $net_sales) * 100 : 0;

				$noi1 = $margin1 - $period_cost1 - $others1 - $region_cost1;
				$noi_unit1 = $sales_unit1 > 0 ? ($noi1 / $sales_unit1) : 0;
				$noi_percent1 = $net_sales1 > 0 ? ($noi1 / $net_sales1) * 100 : 0;

				$noi2 = $margin2 - $period_cost2 - $others2 - $region_cost2;
				$noi_unit2 = $sales_unit2 > 0 ? ($noi2 / $sales_unit2) : 0;
				$noi_percent2 = $net_sales2 > 0 ? ($noi2 / $net_sales2) * 100 : 0;

				$noi_dif1 = $noi - $noi1;
		    	$noi_dif2 = $noi - $noi2;
		    	$noi_dif_percent1 = $noi1 != 0 ? ($noi_dif1 / $noi1) * 100 : 0;
		    	$noi_dif_percent2 = $noi2 != 0 ? ($noi_dif2 / $noi2) * 100 : 0;
		    	$noi_condition1 = $noi_dif1 > 0 ? 'higher' :  'lower';
		    	$noi_condition2 = $noi_dif2 > 0 ? 'higher' :  'lower';

		    	$noi_unit_dif1 = $noi_unit - $noi_unit1;
		    	$noi_unit_dif2 = $noi_unit - $noi_unit2;
		    	$noi_unit_percent1 = $noi_unit1 > 0 ? ($noi_unit_dif1 / $noi_unit1) * 100 : 0;
		    	$noi_unit_percent2 = $noi_unit2 > 0 ? ($noi_unit_dif2 / $noi_unit2) * 100 : 0;

		    	$noi_percent_dif1 = $noi_percent - $noi_percent1;
		    	$noi_percent_dif2 = $noi_percent - $noi_percent2;
		    	$noi_percent_percent1 = $noi_percent1 > 0 ? ($noi_percent_dif1 / $noi_percent1) * 100 : 0;
		    	$noi_percent_percent2 = $noi_percent2 > 0 ? ($noi_percent_dif2 / $noi_percent2) * 100 : 0;

		    	$pnl_tbl = '
		            <tr>
		    			<td><strong>Sales Volume, in Unit</strong></td>
		    			<td align="right"><a href="' . base_url('dashboard/dl-sales-volume/' . encode($type) . '/' . encode($trans_id) . '/' . $year) . '" target="_blank">' . number_format($sales_unit/1000) . '</a></td>
		    			<td align="right">' . number_format($sales_unit1/1000) . '</td>
		    			<td align="right">' . number_format($sales_unit2/1000) . '</td>
		    			<td align="right">' . number_format($sales_unit_dif1/1000) . '</td>
		    			<td align="right">' . number_format($sales_unit_percent1) . '%</td>
		    			<td align="right">' . number_format($sales_unit_dif2/1000) . '</td>
		    			<td align="right">' . number_format($sales_unit_percent2) . '%</td>

		    		</tr>

		    		<tr>
		    			<td><strong>NET SALES</strong></td>
		    			<td align="right"><a href="' . base_url('dashboard/dl-net-sales/' . encode($type) . '/' . encode($trans_id) . '/' . $year) . '" target="_blank">' . number_format($net_sales/1000) . '</a></td>
		    			<td align="right">' . number_format($net_sales1/1000) . '</td>
		    			<td align="right">' . number_format($net_sales2/1000) . '</td>
		    			<td align="right">' . number_format($net_sales_dif1/1000) . '</td>
		    			<td align="right">' . number_format($net_sales_percent1) . '%</td>
		    			<td align="right">' . number_format($net_sales_dif2/1000) . '</td>
		    			<td align="right">' . number_format($net_sales_percent2) . '%</td>
		    		</tr>


		    		<tr>
		    			<td><strong>NSP per Unit (P)</strong></td>
		    			<td align="right">' . number_format($nsp, 2) . '</td>
		    			<td align="right">' . number_format($nsp1, 2) . '</td>
		    			<td align="right">' . number_format($nsp2, 2) . '</td>
		    			<td align="right">' . number_format($nsp_dif1, 2) . '</td>
		    			<td align="right">' . number_format($nsp_percent1) . '%</td>
		    			<td align="right">' . number_format($nsp_dif2, 2) . '</td>
		    			<td align="right">' . number_format($nsp_percent2) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Variable Cost</strong></td>
		    			<td align="right"><a href="' . base_url('dashboard/dl-noi-main-new/' . $type . '/' . encode($trans_id) . '/' . $year) . '" target="_blank">' . number_format($variable_cost/1000) . '</a></td>
		    			<td align="right">' . number_format($variable_cost1/1000) . '</td>
		    			<td align="right">' . number_format($variable_cost2/1000) . '</td>
		    			<td align="right">' . number_format(($variable_cost_dif1/1000) * -1) . '</td>
		    			<td align="right">' . number_format(($variable_cost_percent1) * -1) . '%</td>
		    			<td align="right">' . number_format(($variable_cost_dif2/1000) * -1) . '</td>
		    			<td align="right">' . number_format(($variable_cost_percent2) * -1) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Var. Cost per Unit (P)</strong></td>
		    			<td align="right">' . number_format($variable_cost_unit, 2) . '</td>
		    			<td align="right">' . number_format($variable_cost_unit1, 2) . '</td>
		    			<td align="right">' . number_format($variable_cost_unit2, 2) . '</td>
		    			<td align="right">' . number_format(($variable_cost_unit_dif1) * -1, 2) . '</td>
		    			<td align="right">' . number_format(($varialbe_cost_unit_percent1) * -1) . '%</td>
		    			<td align="right">' . number_format(($variable_cost_unit_dif2) * -1, 2) . '</td>
		    			<td align="right">' . number_format(($varialbe_cost_unit_percent2 * -1)) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Contribution Margin</strong></td>
		    			<td align="right">' . number_format($margin/1000) . '</td>
		    			<td align="right">' . number_format($margin1/1000) . '</td>
		    			<td align="right">' . number_format($margin2/1000) . '</td>
		    			<td align="right">' . number_format($margin_dif1/1000) . '</td>
		    			<td align="right">' . number_format($margin_percent1) . '%</td>
		    			<td align="right">' . number_format($margin_dif2/1000) . '</td>
		    			<td align="right">' . number_format($margin_percent2) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>CM per Unit (P)</strong></td>
		    			<td align="right">' . number_format($margin_unit, 2) . '</td>
		    			<td align="right">' . number_format($margin_unit1, 2) . '</td>
		    			<td align="right">' . number_format($margin_unit2, 2) . '</td>
		    			<td align="right">' . number_format($margin_unit_dif1, 2) . '</td>
		    			<td align="right">' . number_format($margin_unit_percent1) . '%</td>
		    			<td align="right">' . number_format($margin_unit_dif2, 2) . '</td>
		    			<td align="right">' . number_format($margin_unit_percent2) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>CM %</strong></td>
		    			<td align="right">' . number_format($margin_percent) . '%</td>
		    			<td align="right">' . number_format($cm_percent1) . '%</td>
		    			<td align="right">' . number_format($cm_percent2) . '%</td>
		    			<td align="right">' . number_format($cm_percent_dif1) . '%</td>
		    			<td align="right">' . number_format($cm_percent_dif_percent1) . '%</td>
		    			<td align="right">' . number_format($cm_percent_dif2) . '%</td>
		    			<td align="right">' . number_format($cm_percent_dif_percent2) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Period Cost</strong></td>
		    			<td align="right"><a href="' . base_url('dashboard/download-opex/' . $type . '/' . encode($trans_id) . '/' . $year) . '" target="_blank">' . number_format($period_cost/1000) . '</a</td>
		    			<td align="right">' . number_format($period_cost1/1000) . '</td>
		    			<td align="right">' . number_format($period_cost2/1000) . '</td>
		    			<td align="right">' . number_format(($period_cost_dif1/1000) * -1) . '</td>
		    			<td align="right">' . number_format(($period_cost_percent1) * -1) . '%</td>
		    			<td align="right">' . number_format(($period_cost_dif2/1000) * -1) . '</td>
		    			<td align="right">' . number_format(($period_cost_percent2) * -1) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Period Cost per Unit (P)</strong></td>
		    			<td align="right">' . number_format($period_cost_unit, 2) . '</td>
		    			<td align="right">' . number_format($period_cost_unit1, 2) . '</td>
		    			<td align="right">' . number_format($period_cost_unit2, 2) . '</td>
		    			<td align="right">' . number_format(($period_cost_unit_dif1) * -1, 2) . '</td>
		    			<td align="right">' . number_format($period_cost_unit_percent1 * -1) . '%</td>
		    			<td align="right">' . number_format(($period_cost_unit_dif2 * -1), 2) . '</td>
		    			<td align="right">' . number_format($period_cost_unit_percent2 * -1) . '%</td>
		    		</tr>
		    		
		    		<tr>
		    			<td><strong>Region Cost</strong></td>
		    			<td align="right">' . number_format($region_cost/1000) . '</td>
		    			<td align="right">' . number_format($region_cost1/1000) . '</td>
		    			<td align="right">' . number_format($region_cost2/1000) . '</td>
		    			<td align="right">' . number_format(($region_cost_dif1/1000) * -1) . '</td>
		    			<td align="right">' . number_format(($region_cost_percent1) * -1) . '%</td>
		    			<td align="right">' . number_format(($region_cost_dif2/1000) * -1) . '</td>
		    			<td align="right">' . number_format(($region_cost_percent2) * -1) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Other Income/Expenses</strong></td>
		    			<td align="right"></td>
		    			<td align="right">' . number_format($others1 / 1000) . '</td>
		    			<td align="right">' . number_format($others2 / 1000). '</td>
		    			<td align="right">' . number_format(($others_dif1 * -1) / 1000)  . '</td>
		    			<td align="right">' . number_format($others_percent1 * -1) . '%</td>
		    			<td align="right">' . number_format(($others_dif2 * -1) / 1000) . '</td>
		    			<td align="right">' . number_format($others_percent2 * -1) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Others per Unit (P)</strong></td>
		    			<td align="right"></td>
		    			<td align="right">' . number_format($others_unit1, 2) . '</td>
		    			<td align="right">' . number_format($others_unit2, 2) . '</td>
		    			<td align="right">' . number_format(($others_unit_dif1) * -1, 2) . '</td>
		    			<td align="right">' . number_format($others_unit_percent1 * -1) . '%</td>
		    			<td align="right">' . number_format(($others_unit_dif2) * -1, 2) . '</td>
		    			<td align="right">' . number_format($others_unit_percent2 * -1) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Net Operating Income</strong></td>
		    			<td align="right">' . number_format($noi/1000) . '</td>
		    			<td align="right">' . number_format($noi1/1000) . '</td>
		    			<td align="right">' . number_format($noi2/1000) . '</td>
		    			<td align="right">' . number_format($noi_dif1/1000) . '</td>
		    			<td align="right">' . number_format($noi_dif_percent1) . '%</td>
		    			<td align="right">' . number_format($noi_dif2/1000) . '</td>
		    			<td align="right">' . number_format($noi_dif_percent2) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>NOI per Unit (P)</strong></td>
		    			<td align="right">' . number_format($noi_unit, 2) . '</td>
		    			<td align="right">' . number_format($noi_unit1, 2) . '</td>
		    			<td align="right">' . number_format($noi_unit2, 2) . '</td>
		    			<td align="right">' . number_format($noi_unit_dif1, 2) . '</td>
		    			<td align="right">' . number_format($noi_unit_percent1) . '%</td>
		    			<td align="right">' . number_format($noi_unit_dif2, 2) . '</td>
		    			<td align="right">' . number_format($noi_unit_percent2) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>NOI to Sales</strong></td>
		    			<td align="right">' . number_format($noi_percent) . '%</td>
		    			<td align="right">' . number_format($noi_percent1) . '%</td>
		    			<td align="right">' . number_format($noi_percent2) . '%</td>
		    			<td align="right">' . number_format($noi_percent_dif1) . '%</td>
		    			<td align="right">' . number_format($noi_percent_percent1) . '%</td>
		    			<td align="right">' . number_format($noi_percent_dif2) . '%</td>
		    			<td align="right">' . number_format($noi_percent_percent2) . '%</td>
		    		</tr>
			    ';	
		    }
		}elseif($report_type == 'PDF'){
			$pnl_tbl = '
	            <tr>
	    			<td><strong>Sales Volume, in Unit</strong></td>
	    			<td align="right">' . number_format($sales_unit/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit1/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit2/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit_dif1/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit_percent1) . '%</td>
	    			<td align="right">' . number_format($sales_unit_dif2/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit_percent2) . '%</td>

	    		</tr>

	    		<tr>
	    			<td><strong>NET SALES</strong></td>
	    			<td align="right">' . number_format($net_sales/1000) . '</td>
	    			<td align="right">' . number_format($net_sales1/1000) . '</td>
	    			<td align="right">' . number_format($net_sales2/1000) . '</td>
	    			<td align="right">' . number_format($net_sales_dif1/1000) . '</td>
	    			<td align="right">' . number_format($net_sales_percent1) . '%</td>
	    			<td align="right">' . number_format($net_sales_dif2/1000) . '</td>
	    			<td align="right">' . number_format($net_sales_percent2) . '%</td>
	    		</tr>


	    		<tr>
	    			<td><strong>NSP per Unit (P)</strong></td>
	    			<td align="right">' . number_format($nsp, 2) . '</td>
	    			<td align="right">' . number_format($nsp1, 2) . '</td>
	    			<td align="right">' . number_format($nsp2, 2) . '</td>
	    			<td align="right">' . number_format($nsp_dif1, 2) . '</td>
	    			<td align="right">' . number_format($nsp_percent1) . '%</td>
	    			<td align="right">' . number_format($nsp_dif2, 2) . '</td>
	    			<td align="right">' . number_format($nsp_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Variable Cost</strong></td>
	    			<td align="right">' . number_format($variable_cost/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost1/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost2/1000) . '</td>
	    			<td align="right">' . number_format(($variable_cost_dif1/1000) * -1) . '</td>
	    			<td align="right">' . number_format(($variable_cost_percent1) * -1) . '%</td>
	    			<td align="right">' . number_format(($variable_cost_dif2/1000) * -1) . '</td>
	    			<td align="right">' . number_format(($variable_cost_percent2) * -1) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Var. Cost per Unit (P)</strong></td>
	    			<td align="right">' . number_format($variable_cost_unit, 2) . '</td>
	    			<td align="right">' . number_format($variable_cost_unit1, 2) . '</td>
	    			<td align="right">' . number_format($variable_cost_unit2, 2) . '</td>
	    			<td align="right">' . number_format(($variable_cost_unit_dif1) * -1, 2) . '</td>
	    			<td align="right">' . number_format(($varialbe_cost_unit_percent1) * -1) . '%</td>
	    			<td align="right">' . number_format(($variable_cost_unit_dif2) * -1, 2) . '</td>
	    			<td align="right">' . number_format(($varialbe_cost_unit_percent2 * -1)) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Contribution Margin</strong></td>
	    			<td align="right">' . number_format($margin/1000) . '</td>
	    			<td align="right">' . number_format($margin1/1000) . '</td>
	    			<td align="right">' . number_format($margin2/1000) . '</td>
	    			<td align="right">' . number_format($margin_dif1/1000) . '</td>
	    			<td align="right">' . number_format($margin_percent1) . '%</td>
	    			<td align="right">' . number_format($margin_dif2/1000) . '</td>
	    			<td align="right">' . number_format($margin_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>CM per Unit (P)</strong></td>
	    			<td align="right">' . number_format($margin_unit, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit1, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit2, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit_dif1, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit_percent1) . '%</td>
	    			<td align="right">' . number_format($margin_unit_dif2, 2) . '</td>
	    			<td align="right">' . number_format($margin_unit_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>CM %</strong></td>
	    			<td align="right">' . number_format($margin_percent) . '%</td>
	    			<td align="right">' . number_format($cm_percent1) . '%</td>
	    			<td align="right">' . number_format($cm_percent2) . '%</td>
	    			<td align="right">' . number_format($cm_percent_dif1) . '%</td>
	    			<td align="right">' . number_format($cm_percent_dif_percent1) . '%</td>
	    			<td align="right">' . number_format($cm_percent_dif2) . '%</td>
	    			<td align="right">' . number_format($cm_percent_dif_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Period Cost</strong></td>
	    			<td align="right">' . number_format($period_cost/1000) . '</td>
	    			<td align="right">' . number_format($period_cost1/1000) . '</td>
	    			<td align="right">' . number_format($period_cost2/1000) . '</td>
	    			<td align="right">' . number_format(($period_cost_dif1/1000) * -1) . '</td>
	    			<td align="right">' . number_format(($period_cost_percent1) * -1) . '%</td>
	    			<td align="right">' . number_format(($period_cost_dif2/1000) * -1) . '</td>
	    			<td align="right">' . number_format(($period_cost_percent2) * -1) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Period Cost per Unit (P)</strong></td>
	    			<td align="right">' . number_format($period_cost_unit, 2) . '</td>
	    			<td align="right">' . number_format($period_cost_unit1, 2) . '</td>
	    			<td align="right">' . number_format($period_cost_unit2, 2) . '</td>
	    			<td align="right">' . number_format(($period_cost_unit_dif1) * -1, 2) . '</td>
	    			<td align="right">' . number_format($period_cost_unit_percent1 * -1) . '%</td>
	    			<td align="right">' . number_format(($period_cost_unit_dif2 * -1), 2) . '</td>
	    			<td align="right">' . number_format($period_cost_unit_percent2 * -1) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Other Income/Expenses</strong></td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($others1 / 1000) . '</td>
	    			<td align="right">' . number_format($others2 / 1000). '</td>
	    			<td align="right">' . number_format(($others_dif1 * -1) / 1000)  . '</td>
	    			<td align="right">' . number_format($others_percent1 * -1) . '%</td>
	    			<td align="right">' . number_format(($others_dif2 * -1) / 1000) . '</td>
	    			<td align="right">' . number_format($others_percent2 * -1) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Others per Unit (P)</strong></td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($others_unit1, 2) . '</td>
	    			<td align="right">' . number_format($others_unit2, 2) . '</td>
	    			<td align="right">' . number_format(($others_unit_dif1) * -1, 2) . '</td>
	    			<td align="right">' . number_format($others_unit_percent1 * -1) . '%</td>
	    			<td align="right">' . number_format(($others_unit_dif2) * -1, 2) . '</td>
	    			<td align="right">' . number_format($others_unit_percent2 * -1) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>Net Operating Income</strong></td>
	    			<td align="right">' . number_format($noi/1000) . '</td>
	    			<td align="right">' . number_format($noi1/1000) . '</td>
	    			<td align="right">' . number_format($noi2/1000) . '</td>
	    			<td align="right">' . number_format($noi_dif1/1000) . '</td>
	    			<td align="right">' . number_format($noi_dif_percent1) . '%</td>
	    			<td align="right">' . number_format($noi_dif2/1000) . '</td>
	    			<td align="right">' . number_format($noi_dif_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>NOI per Unit (P)</strong></td>
	    			<td align="right">' . number_format($noi_unit, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit1, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit2, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit_dif1, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit_percent1) . '%</td>
	    			<td align="right">' . number_format($noi_unit_dif2, 2) . '</td>
	    			<td align="right">' . number_format($noi_unit_percent2) . '%</td>
	    		</tr>

	    		<tr>
	    			<td><strong>NOI to Sales</strong></td>
	    			<td align="right">' . number_format($noi_percent) . '%</td>
	    			<td align="right">' . number_format($noi_percent1) . '%</td>
	    			<td align="right">' . number_format($noi_percent2) . '%</td>
	    			<td align="right">' . number_format($noi_percent_dif1) . '%</td>
	    			<td align="right">' . number_format($noi_percent_percent1) . '%</td>
	    			<td align="right">' . number_format($noi_percent_dif2) . '%</td>
	    			<td align="right">' . number_format($noi_percent_percent2) . '%</td>
	    		</tr>
		    ';

		    if($type == 'NATIONAL'){

		    	$unit_cost_dif1 = $unit_cost - $unit_cost1;
    			$unit_cost_dif2 = $unit_cost - $unit_cost2;
	    		$unit_cost_percent1 = $unit_cost1 > 0 ? ($unit_cost_dif1 / $unit_cost1) * 100 : 0;
	    		$unit_cost_percent2 = $unit_cost2 > 0 ? ($unit_cost_dif2 / $unit_cost2) * 100 : 0;

	    		$fixed_cost_dif1 = $fixed_cost - $fixed_cost1;
    			$fixed_cost_dif2 = $fixed_cost - $fixed_cost2;
	    		$fixed_cost_percent1 = $fixed_cost1 > 0 ? ($fixed_cost_dif1 / $fixed_cost1) * 100 : 0;
	    		$fixed_cost_percent2 = $fixed_cost2 > 0 ? ($fixed_cost_dif2 / $fixed_cost2) * 100 : 0;


		    	$gae_cost_dif1 = $gae_cost - $gae_cost1;
    			$gae_cost_dif2 = $gae_cost - $gae_cost2;
	    		$gae_cost_percent1 = $gae_cost1 > 0 ? ($gae_cost_dif1 / $gae_cost1) * 100 : 0;
	    		$gae_cost_percent2 = $gae_cost2 > 0 ? ($gae_cost_dif2 / $gae_cost2) * 100 : 0;

	    		$interest_cost_dif1 = $interest_cost - $interest_cost1;
    			$interest_cost_dif2 = $interest_cost - $interest_cost2;
	    		$interest_cost_percent1 = $interest_cost1 > 0 ? ($interest_cost_dif1 / $interest_cost1) * 100 : 0;
	    		$interest_cost_percent2 = $interest_cost2 > 0 ? ($interest_cost_dif2 / $interest_cost2) * 100 : 0;

	    		$noi_ho = $noi - $unit_cost;
	    		$noi_ho1 = $noi1 - $unit_cost1;
	    		$noi_ho2 = $noi2 - $unit_cost2;

	    		$noi_ho_dif1 = $noi_ho - $noi_ho1;
    			$noi_ho_dif2 = $noi_ho - $noi_ho2;
	    		$noi_ho_percent1 = $noi_ho1 > 0 ? ($noi_ho_dif1 / $noi_ho1) * 100 : 0;
	    		$noi_ho_percent2 = $noi_ho2 > 0 ? ($noi_ho_dif2 / $noi_ho2) * 100 : 0;

	    		$unit_expense_dif1 = $unit_expense - $unit_expense1;
	    		$unit_expense_dif2 = $unit_expense - $unit_expense2;
	    		$unit_expense_percent1 = $unit_expense1 > 0 ? ($unit_expense_dif1 / $unit_expense1) * 100 : 0;
	    		$unit_expense_percent2 = $unit_expense2 > 0 ? ($unit_expense_dif2 / $unit_expense2) * 100 : 0;

	    		$noi_after_ho = $noi_ho - $unit_expense;
	    		$noi_after_ho1 = $noi_ho1 - $unit_expense1;
	    		$noi_after_ho2 = $noi_ho2 - $unit_expense2;

	    		$noi_after_ho_dif1 = $noi_after_ho - $noi_after_ho1;
    			$noi_after_ho_dif2 = $noi_after_ho - $noi_after_ho2;
	    		$noi_after_ho_percent1 = $noi_after_ho1 > 0 ? ($noi_after_ho_dif1 / $noi_after_ho1) * 100 : 0;
	    		$noi_after_ho_percent2 = $noi_after_ho2 > 0 ? ($noi_after_ho_dif2 / $noi_after_ho2) * 100 : 0;

	    		$noi_to_sales = $net_sales > 0 ? ($noi_after_ho / $net_sales) * 100 : 0;
	    		$noi_to_sales1 = $net_sales1 > 0 ? ($noi_after_ho1 / $net_sales1) * 100 : 0;
	    		$noi_to_sales2 = $net_sales2 > 0 ? ($noi_after_ho2 / $net_sales2) * 100 : 0;

	    		$noi_to_sales_dif1 = $noi_to_sales - $noi_to_sales1;
    			$noi_to_sales_dif2 = $noi_to_sales - $noi_to_sales2;
	    		$noi_to_sales_percent1 = $noi_to_sales1 > 0 ? ($noi_to_sales_dif1 / $noi_to_sales1) * 100 : 0;
	    		$noi_to_sales_percent2 = $noi_to_sales2 > 0 ? ($noi_to_sales_dif2 / $noi_to_sales2) * 100 : 0;

		    	$pnl_tbl .= '
			    	<tr>
		    			<td><strong>Head Office Expenses</strong></td>
		    			<td align="right">' . number_format($unit_cost/1000) . '</td>
		    			<td align="right">' . number_format($unit_cost1/1000) . '</td>
		    			<td align="right">' . number_format($unit_cost2/1000) . '</td>
		    			<td align="right">' . number_format(($unit_cost_dif1/1000)) . '</td>
		    			<td align="right">' . number_format(($unit_cost_percent1)) . '%</td>
		    			<td align="right">' . number_format(($unit_cost_dif2/1000)) . '</td>
		    			<td align="right">' . number_format(($unit_cost_percent2)) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>HO Fixed Cost</strong></td>
		    			<td align="right">' . number_format($fixed_cost/1000) . '</td>
		    			<td align="right">' . number_format($fixed_cost1/1000) . '</td>
		    			<td align="right">' . number_format($fixed_cost2/1000) . '</td>
		    			<td align="right">' . number_format(($fixed_cost_dif1/1000)) . '</td>
		    			<td align="right">' . number_format(($fixed_cost_percent1)) . '%</td>
		    			<td align="right">' . number_format(($fixed_cost_dif2/1000)) . '</td>
		    			<td align="right">' . number_format(($fixed_cost_percent2)) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>GAE</strong></td>
		    			<td align="right">' . number_format($gae_cost/1000) . '</td>
		    			<td align="right">' . number_format($gae_cost1/1000) . '</td>
		    			<td align="right">' . number_format($gae_cost2/1000) . '</td>
		    			<td align="right">' . number_format(($gae_cost_dif1/1000)) . '</td>
		    			<td align="right">' . number_format(($gae_cost_percent1)) . '%</td>
		    			<td align="right">' . number_format(($gae_cost_dif2/1000)) . '</td>
		    			<td align="right">' . number_format(($gae_cost_percent2)) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Interest Expense</strong></td>
		    			<td align="right">' . number_format($interest_cost/1000) . '</td>
		    			<td align="right">' . number_format($interest_cost1/1000) . '</td>
		    			<td align="right">' . number_format($interest_cost2/1000) . '</td>
		    			<td align="right">' . number_format(($interest_cost_dif1/1000) * -1) . '</td>
		    			<td align="right">' . number_format(($interest_cost_percent1) * -1) . '%</td>
		    			<td align="right">' . number_format(($interest_cost_dif2/1000) * -1) . '</td>
		    			<td align="right">' . number_format(($interest_cost_percent2) * -1) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>NOI</strong></td>
		    			<td align="right">' . number_format($noi_ho/1000) . '</td>
		    			<td align="right">' . number_format($noi_ho1/1000) . '</td>
		    			<td align="right">' . number_format($noi_ho2/1000) . '</td>
		    			<td align="right">' . number_format(($noi_ho_dif1/1000)) . '</td>
		    			<td align="right">' . number_format(($noi_ho_percent1)) . '%</td>
		    			<td align="right">' . number_format(($noi_ho_dif2/1000)) . '</td>
		    			<td align="right">' . number_format(($noi_ho_percent2)) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Other Income/Expenses</strong></td>
		    			<td align="right">' . number_format($unit_expense/1000) . '</td>
		    			<td align="right">' . number_format($unit_expense1/1000) . '</td>
		    			<td align="right">' . number_format($unit_expense2/1000) . '</td>
		    			<td align="right">' . number_format(($unit_expense_dif1/1000)) . '</td>
		    			<td align="right">' . number_format(($unit_expense_percent1)) . '%</td>
		    			<td align="right">' . number_format(($unit_expense_dif2/1000)) . '</td>
		    			<td align="right">' . number_format(($unit_expense_percent2)) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>NOI After HO Expenses</strong></td>
		    			<td align="right">' . number_format($noi_after_ho/1000) . '</td>
		    			<td align="right">' . number_format($noi_after_ho1/1000) . '</td>
		    			<td align="right">' . number_format($noi_after_ho2/1000) . '</td>
		    			<td align="right">' . number_format(($noi_after_ho_dif1/1000)) . '</td>
		    			<td align="right">' . number_format(($noi_after_ho_percent1)) . '%</td>
		    			<td align="right">' . number_format(($noi_after_ho_dif2/1000)) . '</td>
		    			<td align="right">' . number_format(($noi_after_ho_percent2)) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>% NOI to Sales</strong></td>
		    			<td align="right">' . number_format($noi_to_sales) . '%</td>
		    			<td align="right">' . number_format($noi_to_sales1) . '%</td>
		    			<td align="right">' . number_format($noi_to_sales2) . '%</td>
		    			<td align="right">' . number_format(($noi_to_sales_dif1)) . '%</td>
		    			<td align="right">' . number_format(($noi_to_sales_percent1)) . '%</td>
		    			<td align="right">' . number_format(($noi_to_sales_dif2)) . '%</td>
		    			<td align="right">' . number_format(($noi_to_sales_percent2)) . '%</td>
		    		</tr>

		    	';
		    }elseif($type == 'REGIONAL'){

		    	$noi = $margin - $period_cost - $others - $region_cost;
				$noi_unit = $sales_unit > 0 ? ($noi / $sales_unit) : 0;
				$noi_percent = $net_sales > 0 ? ($noi / $net_sales) * 100 : 0;

				$noi1 = $margin1 - $period_cost1 - $others1 - $region_cost1;
				$noi_unit1 = $sales_unit1 > 0 ? ($noi1 / $sales_unit1) : 0;
				$noi_percent1 = $net_sales1 > 0 ? ($noi1 / $net_sales1) * 100 : 0;

				$noi2 = $margin2 - $period_cost2 - $others2 - $region_cost2;
				$noi_unit2 = $sales_unit2 > 0 ? ($noi2 / $sales_unit2) : 0;
				$noi_percent2 = $net_sales2 > 0 ? ($noi2 / $net_sales2) * 100 : 0;

				$noi_dif1 = $noi - $noi1;
		    	$noi_dif2 = $noi - $noi2;
		    	$noi_dif_percent1 = $noi1 != 0 ? ($noi_dif1 / $noi1) * 100 : 0;
		    	$noi_dif_percent2 = $noi2 != 0 ? ($noi_dif2 / $noi2) * 100 : 0;
		    	$noi_condition1 = $noi_dif1 > 0 ? 'higher' :  'lower';
		    	$noi_condition2 = $noi_dif2 > 0 ? 'higher' :  'lower';

		    	$noi_unit_dif1 = $noi_unit - $noi_unit1;
		    	$noi_unit_dif2 = $noi_unit - $noi_unit2;
		    	$noi_unit_percent1 = $noi_unit1 > 0 ? ($noi_unit_dif1 / $noi_unit1) * 100 : 0;
		    	$noi_unit_percent2 = $noi_unit2 > 0 ? ($noi_unit_dif2 / $noi_unit2) * 100 : 0;

		    	$noi_percent_dif1 = $noi_percent - $noi_percent1;
		    	$noi_percent_dif2 = $noi_percent - $noi_percent2;
		    	$noi_percent_percent1 = $noi_percent1 > 0 ? ($noi_percent_dif1 / $noi_percent1) * 100 : 0;
		    	$noi_percent_percent2 = $noi_percent2 > 0 ? ($noi_percent_dif2 / $noi_percent2) * 100 : 0;

		
				$pnl_tbl = '
		            <tr>
		    			<td><strong>Sales Volume, in Unit</strong></td>
		    			<td align="right">' . number_format($sales_unit/1000) . '</td>
		    			<td align="right">' . number_format($sales_unit1/1000) . '</td>
		    			<td align="right">' . number_format($sales_unit2/1000) . '</td>
		    			<td align="right">' . number_format($sales_unit_dif1/1000) . '</td>
		    			<td align="right">' . number_format($sales_unit_percent1) . '%</td>
		    			<td align="right">' . number_format($sales_unit_dif2/1000) . '</td>
		    			<td align="right">' . number_format($sales_unit_percent2) . '%</td>

		    		</tr>

		    		<tr>
		    			<td><strong>NET SALES</strong></td>
		    			<td align="right">' . number_format($net_sales/1000) . '</td>
		    			<td align="right">' . number_format($net_sales1/1000) . '</td>
		    			<td align="right">' . number_format($net_sales2/1000) . '</td>
		    			<td align="right">' . number_format($net_sales_dif1/1000) . '</td>
		    			<td align="right">' . number_format($net_sales_percent1) . '%</td>
		    			<td align="right">' . number_format($net_sales_dif2/1000) . '</td>
		    			<td align="right">' . number_format($net_sales_percent2) . '%</td>
		    		</tr>


		    		<tr>
		    			<td><strong>NSP per Unit (P)</strong></td>
		    			<td align="right">' . number_format($nsp, 2) . '</td>
		    			<td align="right">' . number_format($nsp1, 2) . '</td>
		    			<td align="right">' . number_format($nsp2, 2) . '</td>
		    			<td align="right">' . number_format($nsp_dif1, 2) . '</td>
		    			<td align="right">' . number_format($nsp_percent1) . '%</td>
		    			<td align="right">' . number_format($nsp_dif2, 2) . '</td>
		    			<td align="right">' . number_format($nsp_percent2) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Variable Cost</strong></td>
		    			<td align="right">' . number_format($variable_cost/1000) . '</td>
		    			<td align="right">' . number_format($variable_cost1/1000) . '</td>
		    			<td align="right">' . number_format($variable_cost2/1000) . '</td>
		    			<td align="right">' . number_format(($variable_cost_dif1/1000) * -1) . '</td>
		    			<td align="right">' . number_format(($variable_cost_percent1) * -1) . '%</td>
		    			<td align="right">' . number_format(($variable_cost_dif2/1000) * -1) . '</td>
		    			<td align="right">' . number_format(($variable_cost_percent2) * -1) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Var. Cost per Unit (P)</strong></td>
		    			<td align="right">' . number_format($variable_cost_unit, 2) . '</td>
		    			<td align="right">' . number_format($variable_cost_unit1, 2) . '</td>
		    			<td align="right">' . number_format($variable_cost_unit2, 2) . '</td>
		    			<td align="right">' . number_format(($variable_cost_unit_dif1) * -1, 2) . '</td>
		    			<td align="right">' . number_format(($varialbe_cost_unit_percent1) * -1) . '%</td>
		    			<td align="right">' . number_format(($variable_cost_unit_dif2) * -1, 2) . '</td>
		    			<td align="right">' . number_format(($varialbe_cost_unit_percent2 * -1)) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Contribution Margin</strong></td>
		    			<td align="right">' . number_format($margin/1000) . '</td>
		    			<td align="right">' . number_format($margin1/1000) . '</td>
		    			<td align="right">' . number_format($margin2/1000) . '</td>
		    			<td align="right">' . number_format($margin_dif1/1000) . '</td>
		    			<td align="right">' . number_format($margin_percent1) . '%</td>
		    			<td align="right">' . number_format($margin_dif2/1000) . '</td>
		    			<td align="right">' . number_format($margin_percent2) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>CM per Unit (P)</strong></td>
		    			<td align="right">' . number_format($margin_unit, 2) . '</td>
		    			<td align="right">' . number_format($margin_unit1, 2) . '</td>
		    			<td align="right">' . number_format($margin_unit2, 2) . '</td>
		    			<td align="right">' . number_format($margin_unit_dif1, 2) . '</td>
		    			<td align="right">' . number_format($margin_unit_percent1) . '%</td>
		    			<td align="right">' . number_format($margin_unit_dif2, 2) . '</td>
		    			<td align="right">' . number_format($margin_unit_percent2) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>CM %</strong></td>
		    			<td align="right">' . number_format($margin_percent) . '%</td>
		    			<td align="right">' . number_format($cm_percent1) . '%</td>
		    			<td align="right">' . number_format($cm_percent2) . '%</td>
		    			<td align="right">' . number_format($cm_percent_dif1) . '%</td>
		    			<td align="right">' . number_format($cm_percent_dif_percent1) . '%</td>
		    			<td align="right">' . number_format($cm_percent_dif2) . '%</td>
		    			<td align="right">' . number_format($cm_percent_dif_percent2) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Period Cost</strong></td>
		    			<td align="right">' . number_format($period_cost/1000) . '</td>
		    			<td align="right">' . number_format($period_cost1/1000) . '</td>
		    			<td align="right">' . number_format($period_cost2/1000) . '</td>
		    			<td align="right">' . number_format(($period_cost_dif1/1000) * -1) . '</td>
		    			<td align="right">' . number_format(($period_cost_percent1) * -1) . '%</td>
		    			<td align="right">' . number_format(($period_cost_dif2/1000) * -1) . '</td>
		    			<td align="right">' . number_format(($period_cost_percent2) * -1) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Period Cost per Unit (P)</strong></td>
		    			<td align="right">' . number_format($period_cost_unit, 2) . '</td>
		    			<td align="right">' . number_format($period_cost_unit1, 2) . '</td>
		    			<td align="right">' . number_format($period_cost_unit2, 2) . '</td>
		    			<td align="right">' . number_format(($period_cost_unit_dif1) * -1, 2) . '</td>
		    			<td align="right">' . number_format($period_cost_unit_percent1 * -1) . '%</td>
		    			<td align="right">' . number_format(($period_cost_unit_dif2 * -1), 2) . '</td>
		    			<td align="right">' . number_format($period_cost_unit_percent2 * -1) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Region Cost</strong></td>
		    			<td align="right">' . number_format($region_cost/1000) . '</td>
		    			<td align="right">' . number_format($region_cost1/1000) . '</td>
		    			<td align="right">' . number_format($region_cost2/1000) . '</td>
		    			<td align="right">' . number_format(($region_cost_dif1/1000) * -1) . '</td>
		    			<td align="right">' . number_format(($region_cost_percent1) * -1) . '%</td>
		    			<td align="right">' . number_format(($region_cost_dif2/1000) * -1) . '</td>
		    			<td align="right">' . number_format(($region_cost_percent2) * -1) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Other Income/Expenses</strong></td>
		    			<td align="right"></td>
		    			<td align="right">' . number_format($others1 / 1000) . '</td>
		    			<td align="right">' . number_format($others2 / 1000). '</td>
		    			<td align="right">' . number_format(($others_dif1 * -1) / 1000)  . '</td>
		    			<td align="right">' . number_format($others_percent1 * -1) . '%</td>
		    			<td align="right">' . number_format(($others_dif2 * -1) / 1000) . '</td>
		    			<td align="right">' . number_format($others_percent2 * -1) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Others per Unit (P)</strong></td>
		    			<td align="right"></td>
		    			<td align="right">' . number_format($others_unit1, 2) . '</td>
		    			<td align="right">' . number_format($others_unit2, 2) . '</td>
		    			<td align="right">' . number_format(($others_unit_dif1) * -1, 2) . '</td>
		    			<td align="right">' . number_format($others_unit_percent1 * -1) . '%</td>
		    			<td align="right">' . number_format(($others_unit_dif2) * -1, 2) . '</td>
		    			<td align="right">' . number_format($others_unit_percent2 * -1) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>Net Operating Income</strong></td>
		    			<td align="right">' . number_format($noi/1000) . '</td>
		    			<td align="right">' . number_format($noi1/1000) . '</td>
		    			<td align="right">' . number_format($noi2/1000) . '</td>
		    			<td align="right">' . number_format($noi_dif1/1000) . '</td>
		    			<td align="right">' . number_format($noi_dif_percent1) . '%</td>
		    			<td align="right">' . number_format($noi_dif2/1000) . '</td>
		    			<td align="right">' . number_format($noi_dif_percent2) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>NOI per Unit (P)</strong></td>
		    			<td align="right">' . number_format($noi_unit, 2) . '</td>
		    			<td align="right">' . number_format($noi_unit1, 2) . '</td>
		    			<td align="right">' . number_format($noi_unit2, 2) . '</td>
		    			<td align="right">' . number_format($noi_unit_dif1, 2) . '</td>
		    			<td align="right">' . number_format($noi_unit_percent1) . '%</td>
		    			<td align="right">' . number_format($noi_unit_dif2, 2) . '</td>
		    			<td align="right">' . number_format($noi_unit_percent2) . '%</td>
		    		</tr>

		    		<tr>
		    			<td><strong>NOI to Sales</strong></td>
		    			<td align="right">' . number_format($noi_percent) . '%</td>
		    			<td align="right">' . number_format($noi_percent1) . '%</td>
		    			<td align="right">' . number_format($noi_percent2) . '%</td>
		    			<td align="right">' . number_format($noi_percent_dif1) . '%</td>
		    			<td align="right">' . number_format($noi_percent_percent1) . '%</td>
		    			<td align="right">' . number_format($noi_percent_dif2) . '%</td>
		    			<td align="right">' . number_format($noi_percent_percent2) . '%</td>
		    		</tr>
			    ';
		    }
		}

    	$sales_unit_percent1 = $sales_unit1 > 0 ? ($sales_unit_dif1 / $sales_unit1) * 100 : 0;
    	$sales_unit_percent2 = $sales_unit2 > 0 ? ($sales_unit_dif2 / $sales_unit2) * 100 : 0;
    	$sales_unit_condition1 = $sales_unit_dif1 > 0 ? 'higher' :  'lower';
    	$sales_unit_condition2 = $sales_unit_dif2 > 0 ? 'higher' :  'lower';
    	$sales_unit_sign1 = $sales_unit_percent1 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';
    	$sales_unit_sign2 = $sales_unit_percent2 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';

    	
    	$net_sales_condition1 = $net_sales_dif1 > 0 ? 'higher' :  'lower';
    	$net_sales_condition2 = $net_sales_dif2 > 0 ? 'higher' :  'lower';
    	$net_sales_sign1 = $net_sales_percent1 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';
    	$net_sales_sign2 = $net_sales_percent2 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';


    	$noi_condition1 = $noi_dif1 > 0 ? 'higher' :  'lower';
    	$noi_condition2 = $noi_dif2 > 0 ? 'higher' :  'lower';
    	$noi_sign1 = $noi_percent1 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';
    	$noi_sign2 = $noi_percent2 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';

    	if($report_type == null){
	    	$sales_unit_report = "Total Sales Units is <span class='dashboard-num'>" . convert_num($sales_unit) . "</span> which is <span class='dashboard-num'>" . number_format($sales_unit_percent1) ."%</span>" . $sales_unit_sign1 . " " . $sales_unit_condition1 . " than " . ($year - 1) . "'s <span class='dashboard-num'>" . convert_num($sales_unit1) ."</span> and <span class='dashboard-num'>" . number_format($sales_unit_percent2) . "%</span>" . $sales_unit_sign2 . " " . $sales_unit_condition2 . " than " . ($year - 2) . " of <span class='dashboard-num'>" . convert_num($sales_unit2) . '</span>';

	    	$net_sales_report = "Net sales is <span class='dashboard-num'>₱" . convert_num($net_sales) . "</span> which is <span class='dashboard-num'>" . number_format($net_sales_percent1) ."%</span>" . $net_sales_sign1 . " " . $net_sales_condition1 . " than " . ($year - 1) . "'s <span class='dashboard-num'>₱" . convert_num($net_sales1) ."</span> and <span class='dashboard-num'>" . number_format($net_sales_percent2) . "%</span>" . $net_sales_sign2 . " " . $net_sales_condition2 . " than " . ($year - 2) . " of <span class='dashboard-num'>₱" . convert_num($net_sales2) . '</span>';


	 		$noi_report = "NOI is <span class='dashboard-num'>₱" . convert_num($noi) . "</span> which is <span class='dashboard-num'>" . number_format($noi_dif_percent1) ."%</span>" . $noi_sign1 . " " . $noi_condition1 . " than " . ($year - 1) . "'s <span class='dashboard-num'>₱" . convert_num($noi1) ."</span> and <span class='dashboard-num'>" . number_format($noi_dif_percent2) . "%</span>" . $noi_sign2 . " " . $noi_condition2 . " than " . ($year - 2) . " of <span class='dashboard-num'>₱" . convert_num($noi2) . '</span>';
	 	}elseif($report_type == 'PDF'){
	 		$sales_unit_report = "Total Sales Units is " . convert_num($sales_unit) . " which is " . number_format($sales_unit_percent1) ."% " . $sales_unit_condition1 . " than " . ($year - 1) . "'s " . convert_num($sales_unit1) ." and " . number_format($sales_unit_percent2) . "% " . $sales_unit_condition2 . " than " . ($year - 2) . " of " . convert_num($sales_unit2);

	    	$net_sales_report = "Net sales is ₱" . convert_num($net_sales) . " which is " . number_format($net_sales_percent1) ."% " . $net_sales_condition1 . " than " . ($year - 1) . "'s ₱" . convert_num($net_sales1) ." and " . number_format($net_sales_percent2) . "% " . $net_sales_condition2 . " than " . ($year - 2) . " of ₱" . convert_num($net_sales2);


	 		$noi_report = "NOI is ₱" . convert_num($noi) . " which is " . number_format($noi_dif_percent1) ."% " . $noi_condition1 . " than " . ($year - 1) . "'s ₱" . convert_num($noi1) ." and " . number_format($noi_dif_percent2) . "% " . $noi_condition2 . " than " . ($year - 2) . " of ₱" . convert_num($noi2);
	 	}

 		$data['sales_unit_report'] = $sales_unit_report;
 		$data['sales_unit'] = $sales_unit;
 		$data['sales_unit1'] = $sales_unit1;
 		$data['sales_unit2'] = $sales_unit2;

 		$data['net_sales_report'] = $net_sales_report;
 		$data['net_sales'] = $net_sales;
 		$data['net_sales1'] = $net_sales1;
 		$data['net_sales2'] = $net_sales2;

 		$data['nsp'] = $nsp;
 		$data['nsp1'] = $nsp1;
 		$data['nsp2'] = $nsp2;

 		$data['variable_cost'] = $variable_cost;
 		$data['variable_cost1'] = $variable_cost1;
 		$data['variable_cost2'] = $variable_cost2;

 		$data['variable_cost_unit'] = $variable_cost_unit;
 		$data['variable_cost_unit1'] = $variable_cost_unit1;
 		$data['variable_cost_unit2'] = $variable_cost_unit2;

 		$data['margin'] = $margin;
 		$data['margin1'] = $margin1;
 		$data['margin2'] = $margin2;

 		$data['margin_unit'] = $margin_unit;
 		$data['margin_unit1'] = $margin_unit1;
 		$data['margin_unit2'] = $margin_unit2;

 		$data['margin_percent'] = $margin_percent;
 		$data['margin_percent1'] = $margin_percent1;
 		$data['margin_percent2'] = $margin_percent2;

 		$data['period_cost'] = $period_cost;
 		$data['period_cost1'] = $period_cost1;
 		$data['period_cost2'] = $period_cost2;

 		$data['period_cost_unit'] = $period_cost_unit;
 		$data['period_cost_unit1'] = $period_cost_unit1;
 		$data['period_cost_unit2'] = $period_cost_unit2;


 		$data['noi_report'] = $noi_report;
 		$data['noi'] = $noi;
 		$data['noi1'] = $noi1;
 		$data['noi2'] = $noi2;

 		$data['noi_unit'] = $noi_unit;
 		$data['noi_unit1'] = $noi_unit1;
 		$data['noi_unit2'] = $noi_unit2;

 		$data['noi_percent'] = $noi_percent;
 		$data['noi_percent1'] = $noi_percent1;
 		$data['noi_percent2'] = $noi_percent2;
 		

	    $data['pnl_tbl'] = $pnl_tbl;
	    return $data;
	}

	public function get_sales_mix_report_data($trans_id, $year){
		$info = $this->_require_login();

		$join_sales_mix = array('report_sales_mix_tbl b' => 'a.report_sales_mix_id = b.report_sales_mix_id AND a.dashboard_sales_mix_status = 1 AND a.dashboard_bc_trans_id IN (' . $trans_id . ')');
		$select_sales_mix = 'b.report_sales_mix_name, SUM(a.dashboard_sales_mix_amount) as dashboard_sales_mix_amount, AVG(a.dashboard_sales_mix_amount1) as dashboard_sales_mix_amount1, AVG(a.dashboard_sales_mix_amount2) as dashboard_sales_mix_amount2';
		$get_sales_mix = $this->admin->get_join('dashboard_sales_mix_tbl a', $join_sales_mix, FALSE, 'b.report_sales_mix_sequence ASC', 'b.report_sales_mix_id', $select_sales_mix);

		$total_sales_mix = 0;
		foreach($get_sales_mix as $row){
			$total_sales_mix += $row->dashboard_sales_mix_amount;
		}

		$sales_mix_tbl = '';
		$sales_mix_arr = array();
		foreach($get_sales_mix as $row2){
			$segment = $row2->report_sales_mix_name;
			$sales_mix = $row2->dashboard_sales_mix_amount;
			$percent = $total_sales_mix > 0 ? ($sales_mix / $total_sales_mix) * 100 : 0;
			$percent1 = $row2->dashboard_sales_mix_amount1;
			$percent2 = $row2->dashboard_sales_mix_amount2;

			$sales_mix_tbl .= '
				<tr>
					<td>' . $segment . '</td>
					<td>' . number_format($percent) . ' %</td>
					<td>' . number_format($percent1) . ' %</td>
					<td>' . number_format($percent2) . ' %</td>
				</tr>
			';

			$sales_mix_details = new stdClass;
			$sales_mix_details->segment = $segment;
			$sales_mix_details->sales_mix_amount = $percent;
			array_push($sales_mix_arr, $sales_mix_details);
		}
    	
    	$data['sales_mix_tbl'] = $sales_mix_tbl;
    	$data['sales_mix'] = $sales_mix_arr;
    	$data['sales_mix_total'] = $total_sales_mix;
    	return $data;
	}

	public function get_employee_report_data($trans_id, $year, $report_type = null, $type = null, $trans_unit_id = null){
		$info = $this->_require_login();

		$emp_new = 0;
		$emp_old = 0;

		if($type == 'NATIONAL'){
			$get_employee = $this->admin->get_query('
				SELECT SUM(dashboard_bc_manpower_new) as dashboard_bc_manpower_new, SUM(dashboard_bc_manpower_old) as dashboard_bc_manpower_old

				FROM
					(
						SELECT SUM(dashboard_bc_manpower_new) as dashboard_bc_manpower_new, SUM(dashboard_bc_manpower_old) as dashboard_bc_manpower_old FROM `dashboard_bc_manpower_tbl` WHERE `dashboard_bc_trans_id` IN(' . $trans_id . ') AND `dashboard_bc_manpower_status` = 1

						UNION 

						SELECT SUM(dashboard_dept_manpower_unit_new), SUM(dashboard_dept_manpower_unit_old) FROM dashboard_dept_manpower_unit_tbl x WHERE x.dashboard_unit_trans_id IN (' . $trans_unit_id . ') AND x.dashboard_dept_manpower_unit_status = 1
					) as manpower
			', TRUE);

			$emp_new = $get_employee->dashboard_bc_manpower_new;
			$emp_old = $get_employee->dashboard_bc_manpower_old;
		}else{
			$where_employee = 'dashboard_bc_trans_id IN(' .  $trans_id .') AND dashboard_bc_manpower_status = 1';
			$select_employee = 'SUM(dashboard_bc_manpower_new) as dashboard_bc_manpower_new, SUM(dashboard_bc_manpower_old) as dashboard_bc_manpower_old';
			$check_employee = $this->admin->check_data('dashboard_bc_manpower_tbl', $where_employee, TRUE, $select_employee);

			if($check_employee['result'] == TRUE){
				$emp_new = $check_employee['info']->dashboard_bc_manpower_new;
				$emp_old = $check_employee['info']->dashboard_bc_manpower_old;
			}
		}

		


		if($report_type == null){
	    	$emp_condition = $emp_new > 0 ? 'increase' :  'decrease';
	    	$emp_sign = $emp_new > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';
	    	$employee_report = 'Manpower will ' . $emp_condition . ' by <span class="dashboard-num">' . $emp_new . '</span> ' . $emp_sign . ' from <span class="dashboard-num">' . $emp_old . '</span> to <span class="dashboard-num">' . ($emp_new + $emp_old) . '</span> personnel in <span class="dashboard-num">' . $year . '</span>';
	    }elseif($report_type == 'PDF'){
	    	$emp_condition = $emp_new > 0 ? 'increase' :  'decrease';
	    	$employee_report = 'Manpower will ' . $emp_condition . ' by ' . $emp_new . ' from ' . $emp_old . ' to ' . ($emp_new + $emp_old) . ' personnel in ' . $year . '';
	    }

    	$data['employee_report'] = $employee_report;
    	$data['employee_new'] = $emp_new;
    	return $data;
	}

	public function get_outlet_report_data($trans_id, $year, $report_type = null){
		$info = $this->_require_login();

		$outlet_new = 0;
		$outlet_old = 0;
		$where_outlet = 'dashboard_bc_trans_id IN(' . $trans_id . ') AND dashboard_outlet_status = 1';
		$select_outlet = 'SUM(dashboard_outlet_new) as dashboard_outlet_new, SUM(dashboard_outlet_old) as dashboard_outlet_old';
		$check_outlet = $this->admin->check_data('dashboard_outlet_tbl', $where_outlet, TRUE, $select_outlet);
		if($check_outlet['result'] == TRUE){
			$outlet_new = $check_outlet['info']->dashboard_outlet_new;
			$outlet_old = $check_outlet['info']->dashboard_outlet_old;
		}

		$outlet_total = $outlet_new + $outlet_old;

		if($report_type == null){
    		$outlet_report = 'Open <span class="dashboard-num">' . $outlet_new . '</span> stores to end with <span class="dashboard-num">' . $outlet_total . '</span> stores in <span class="dashboard-num">' . $year . '</span>';
    	}elseif($report_type == 'PDF'){
    		$outlet_report = 'Open ' . $outlet_new . ' stores to end with ' . $outlet_total . ' stores in ' . $year;
    	}

    	return $outlet_report;
	}

	public function get_capex_summary_report_data($trans_id, $year, $report_type = null, $type = null, $trans_unit_id = null){
		$info = $this->_require_login();

		$capex = 0;
		$capex1 = 0;
		$capex2 = 0;

		if($type == 'NATIONAL'){

			$get_capex = $this->admin->get_query('
				SELECT SUM(dashboard_bc_capex_summary_amount) as dashboard_bc_capex_summary_amount, SUM(dashboard_bc_capex_summary_amount1) as dashboard_bc_capex_summary_amount1, SUM(dashboard_bc_capex_summary_amount2) as dashboard_bc_capex_summary_amount2
				FROM
					(
						SELECT SUM(dashboard_bc_capex_summary_amount) as dashboard_bc_capex_summary_amount, SUM(dashboard_bc_capex_summary_amount1) as dashboard_bc_capex_summary_amount1, SUM(dashboard_bc_capex_summary_amount2) as dashboard_bc_capex_summary_amount2 FROM `dashboard_bc_capex_summary_tbl` WHERE `dashboard_bc_trans_id` IN(' . $trans_id . ') AND `dashboard_bc_capex_summary_status` = 1

						UNION

						SELECT SUM(x.dashboard_unit_capex_group_total), SUM(dashboard_unit_capex_group_total1), SUM(dashboard_unit_capex_group_total2) FROM dashboard_unit_capex_group_tbl x WHERE x.dashboard_unit_capex_group_status = 1 AND x.dashboard_unit_trans_id IN (' . $trans_unit_id . ')
					) capex

			', TRUE);

			$capex = $get_capex->dashboard_bc_capex_summary_amount;
			$capex1 = $get_capex->dashboard_bc_capex_summary_amount1;
			$capex2 = $get_capex->dashboard_bc_capex_summary_amount2;
		}else{
			$where_capex = 'dashboard_bc_trans_id IN(' . $trans_id . ') AND dashboard_bc_capex_summary_status = 1';
			$select_capex = 'SUM(dashboard_bc_capex_summary_amount) as dashboard_bc_capex_summary_amount, SUM(dashboard_bc_capex_summary_amount1) as dashboard_bc_capex_summary_amount1, SUM(dashboard_bc_capex_summary_amount2) as dashboard_bc_capex_summary_amount2';
			$check_capex = $this->admin->check_data('dashboard_bc_capex_summary_tbl', $where_capex, TRUE, $select_capex);

			if($check_capex['result'] == TRUE){
				$capex = $check_capex['info']->dashboard_bc_capex_summary_amount;
				$capex1 = $check_capex['info']->dashboard_bc_capex_summary_amount1;
				$capex2 = $check_capex['info']->dashboard_bc_capex_summary_amount2;
			}
		}

    	$capex_dif1 = $capex - $capex1;
    	$capex_dif2 = $capex - $capex2;
    	$capex_percent1 = $capex1 > 0 ? ($capex_dif1 / $capex1) * 100 : 0;
    	$capex_percent2 = $capex2 > 0 ? ($capex_dif2 / $capex2) * 100 : 0;
    	$capex_condition1 = $capex_dif1 > 0 ? 'higher' :  'lower';
    	$capex_condition2 = $capex_dif2 > 0 ? 'higher' :  'lower';
    	$capex_sign1 = $capex_percent1 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';
    	$capex_sign2 = $capex_percent2 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';

    	if($report_type == null){
 			$capex_report = '<label class="chart-remarks"><strong>CAPEX is <span class="dashboard-num">₱' . convert_num($capex). '</span>, ' . $capex_condition1 . ' by <span class="dashboard-num">₱' . convert_num($capex_dif1) . '</span>' . $capex_sign1 . ' vs ' . ($year - 1) . ' and ' . $capex_condition2 . ' by <span class="dashboard-num">₱' . convert_num($capex_dif2) . '</span>' . $capex_sign2 . ' vs ' . ($year - 2) . '</strong></label>';
 		}elseif($report_type == 'PDF'){
 			$capex_report = 'CAPEX is ₱' . convert_num($capex). ', ' . $capex_condition1 . ' by ₱' . convert_num($capex_dif1) . ' vs ' . ($year - 1) . ' and ' . $capex_condition2 . ' by ₱' . convert_num($capex_dif2) . ' vs ' . ($year - 2);
 		}

 		$data['capex_report'] = $capex_report;
 		$data['capex'] = $capex;
 		$data['capex1'] = $capex1;
 		$data['capex2'] = $capex2;
    	return $data;
	}

	public function capex_report_item_data($trans_id, $bc_id, $cost_center_id, $year){
		//$info = $this->_require_login();

		$join_capex = array(
			'asset_group_transaction_item_tbl f' => 'a.ag_trans_item_id = f.ag_trans_item_id AND f.ag_trans_item_status = 1',
			'asset_group_transaction_tbl b' => 'f.ag_trans_id=b.ag_trans_id AND b.ag_trans_status=1 AND a.ag_trans_det_status=1 AND b.ag_trans_budget_year = ' . $year,
			'asset_subgroup_tbl c' => 'f.asg_id=c.asg_id',
			'asset_group_tbl d' => 'c.ag_id = d.ag_id',
			'cost_center_tbl e' => 'f.cost_center_id = e.cost_center_id AND e.cost_center_id AND e.parent_id=' . $cost_center_id
		);

		$capex_asset = $this->admin->get_join('asset_group_transaction_details_tbl a', $join_capex, FALSE, 'd.ag_name', 'c.asg_id', 'c.asg_id, d.ag_id , d.ag_name, c.asg_name, SUM(a.capex_qty) total_qty, f.capex_price, SUM(a.capex_qty * f.capex_price) as capex_total
		'
		);

		foreach($capex_asset as $row){
			$asg_id = $row->asg_id;
			$qty = $row->total_qty;
			$price = $row->capex_price;
			$capex_total = $row->capex_total;

			$set_capex = array(
				'dashboard_bc_trans_id' => $trans_id,
				'bc_id' => $bc_id,
				'asg_id' => $asg_id,
				'dashboard_bc_capex_item_qty' => $qty,
				'dashboard_bc_capex_item_price' => $price,
				'dashboard_bc_capex_item_total' => $capex_total,
				'dashboard_bc_capex_item_added' => date_now(),
				'dashboard_bc_capex_item_status' => 1
			);

			$insert_capex = $this->admin->insert_data('dashboard_bc_capex_item_tbl', $set_capex);
		}
	}

	public function capex_report_group_data($trans_id, $bc_id, $cost_center_id, $year){
		//$info = $this->_require_login();

		$capex_asset = $this->admin->get_query('

			SELECT capex.ag_id, capex.ag_name, SUM(capex.capex_total) as capex_total, SUM(capex.capex_total1) as capex_total1, SUM(capex.capex_total2) as capex_total2  

			FROM
			(
				(
					SELECT `d`.`ag_id`, `d`.`ag_name`, SUM(a.capex_qty * f.capex_price) as capex_total, 0 as capex_total1, 0 as capex_total2 FROM `asset_group_transaction_details_tbl` `a` JOIN `asset_group_transaction_item_tbl` `f` ON `a`.`ag_trans_item_id` = `f`.`ag_trans_item_id` AND `f`.`ag_trans_item_status` = 1 JOIN `asset_group_transaction_tbl` `b` ON `f`.`ag_trans_id`=`b`.`ag_trans_id` AND `b`.`ag_trans_status`=1 AND `a`.`ag_trans_det_status`=1 AND `b`.`ag_trans_budget_year` = ' . $year . ' JOIN `asset_subgroup_tbl` `c` ON `f`.`asg_id`=`c`.`asg_id` JOIN `asset_group_tbl` `d` ON `c`.`ag_id` = `d`.`ag_id` JOIN `cost_center_tbl` `e` ON `f`.`cost_center_id` = `e`.`cost_center_id` AND `e`.`cost_center_id` AND `e`.`parent_id`= ' . $cost_center_id . ' GROUP BY `d`.`ag_id` ORDER BY `d`.`ag_name`
				)

				UNION

				(
					SELECT y.ag_id, y.ag_name, 0 as capex_total, SUM(x.comp_capex_val) as capex_total1, 0 as capex_total2 FROM comparative_capex_tbl x, asset_group_tbl y WHERE y.ag_id = x.ag_id AND x.bc_id = ' . $bc_id .' AND x.comp_capex_status = 1 AND x.comp_capex_year = ' . ($year - 1) . ' GROUP BY y.ag_name
				)

				UNION 

				(
					SELECT y.ag_id, y.ag_name, 0 as capex_total, 0 as capex_total1, SUM(x.comp_capex_val)  as capex_total2 FROM comparative_capex_tbl x, asset_group_tbl y WHERE y.ag_id = x.ag_id AND x.bc_id = ' . $bc_id .' AND x.comp_capex_status = 1 AND x.comp_capex_year = ' . ($year - 2) . ' GROUP BY y.ag_name
				)
			)as capex

			GROUP BY capex.ag_name
		');

		$capex_grand_total = 0;
	    $capex_grand_total1 = 0;
	    $capex_grand_total2 = 0;

		foreach($capex_asset as $row){
			$ag_id = $row->ag_id;
			$capex_total = $row->capex_total;
	    	$capex_total1 = $row->capex_total1;
	    	$capex_total2 = $row->capex_total2;

	    	$capex_grand_total += $capex_total;
	    	$capex_grand_total1 += $capex_total1;
	    	$capex_grand_total2 += $capex_total2;

			$set_capex = array(
				'dashboard_bc_trans_id' => $trans_id,
				'bc_id' => $bc_id,
				'ag_id' => $ag_id,
				'dashboard_bc_capex_group_total' => $capex_total,
				'dashboard_bc_capex_group_total1' => $capex_total1,
				'dashboard_bc_capex_group_total2' => $capex_total2,
				'dashboard_bc_capex_group_added' => date_now(),
				'dashboard_bc_capex_group_status' => 1
			);

			$insert_capex = $this->admin->insert_data('dashboard_bc_capex_group_tbl', $set_capex);
		}
	}

	public function get_volume_report_data($trans_id){
		$info = $this->_require_login();

		$where_volume = 'dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_volume_status = 1';
		$group_volume = 'dashboard_volume_name';
		$select_volume = 'dashboard_volume_name, SUM(dashboard_volume_unit) as dashboard_volume_unit, SUM(dashboard_volume_unit1) as dashboard_volume_unit1, SUM(dashboard_volume_unit2) as dashboard_volume_unit2, SUM(dashboard_volume_unit_dif1) as dashboard_volume_unit_dif1, SUM(dashboard_volume_unit_dif2) as dashboard_volume_unit_dif2, AVG(dashboard_volume_unit_percent1) as dashboard_volume_unit_percent1, AVG(dashboard_volume_unit_percent2) as dashboard_volume_unit_percent2,

			SUM(dashboard_volume_heads) as dashboard_volume_heads, SUM(dashboard_volume_heads1) as dashboard_volume_heads1, SUM(dashboard_volume_heads2) as dashboard_volume_heads2, SUM(dashboard_volume_heads_dif1) as dashboard_volume_heads_dif1, SUM(dashboard_volume_heads_dif2) as dashboard_volume_heads_dif2, AVG(dashboard_volume_heads_percent1) as dashboard_volume_heads_percent1, AVG(dashboard_volume_heads_percent2) as dashboard_volume_heads_percent2';
		$volume = $this->admin->get_data('dashboard_volume_tbl', $where_volume, FALSE, $select_volume, 'dashboard_volume_id ASC', $group_volume);

		$volume_tbl = '';
		foreach($volume as $row){
			$volume_name = $row->dashboard_volume_name;
			$unit = $row->dashboard_volume_unit;
			$unit1 = $row->dashboard_volume_unit1;
			$unit2 = $row->dashboard_volume_unit2;

			$unit_dif1 = $unit > 0 ? $row->dashboard_volume_unit_dif1 : 0;
			$unit_dif2 = $unit > 0 ? $row->dashboard_volume_unit_dif2 : 0;
			$unit_per1 = $unit > 0 ? $row->dashboard_volume_unit_percent1 : 0;
			$unit_per2 = $unit > 0 ? $row->dashboard_volume_unit_percent2 : 0;

			$heads = $row->dashboard_volume_heads;
			$heads1 = $row->dashboard_volume_heads1;
			$heads2 = $row->dashboard_volume_heads2;

			$heads_dif1 = $heads > 0 ? $row->dashboard_volume_heads_dif1 : 0;
			$heads_dif2 = $heads > 0 ? $row->dashboard_volume_heads_dif2 : 0;
			$heads_per1 = $heads > 0 ? $row->dashboard_volume_heads_percent1 : 0;
			$heads_per2 = $heads > 0 ? $row->dashboard_volume_heads_percent2 : 0;

			$volume_tbl .= '
				<tr>
		            <td class="text-left">' . $volume_name . '</td>
		            <td class="text-right">' . number_format($unit) . '</td>
		            <td class="text-right">' . number_format($unit1) . '</td>
		            <td class="text-right">' . number_format($unit2) . '</td>
		            <td class="text-right">' . number_format($unit_dif1) . '</td>
		            <td class="text-right">' . number_format($unit_per1) . '%</td>
		            <td class="text-right">' . number_format($unit_dif2) . '</td>
		            <td class="text-right">' . number_format($unit_per2) . '%</td>
		            
		            <td class="text-right">' . number_format($heads) . '</td>
		            <td class="text-right">' . number_format($heads1) . '</td>
		            <td class="text-right">' . number_format($heads2) . '</td>
		            <td class="text-right">' . number_format($heads_dif1) . '</td>
		            <td class="text-right">' . number_format($heads_per1) . '%</td>
		            <td class="text-right">' . number_format($heads_dif2) . '</td>
		            <td class="text-right">' . number_format($heads_per2) . '%</td>
		        </tr>
	        ';
	    }

	    return $volume_tbl;
	}

	public function price_assumption_report_data($trans_id, $year){
		$info = $this->_require_login();

		$where_price = 'dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_price_status = 1';
		$select_price = '
			dashboard_price_segment, dashboard_price_product, dashboard_price_year,
			AVG(dashboard_price_jan) as dashboard_price_jan, AVG(dashboard_price_feb) as dashboard_price_feb, AVG(dashboard_price_mar) as dashboard_price_mar, AVG(dashboard_price_apr) as dashboard_price_apr, AVG(dashboard_price_may) as dashboard_price_may, AVG(dashboard_price_june) as dashboard_price_june, AVG(dashboard_price_july) as dashboard_price_july, AVG(dashboard_price_aug) as dashboard_price_aug, AVG(dashboard_price_sep) as dashboard_price_sep, AVG(dashboard_price_oct) as dashboard_price_oct, AVG(dashboard_price_nov) as dashboard_price_nov, AVG(dashboard_price_dec) as dashboard_price_dec';
		$group_price = 'dashboard_price_segment, dashboard_price_product, dashboard_price_year';
		$get_price = $this->admin->get_data('dashboard_price_tbl', $where_price, FALSE, $select_price, FALSE, $group_price);

		$price_tbl = '';
		foreach($get_price as $row){
			$segment = $row->dashboard_price_segment;
			$product = $row->dashboard_price_product;
			$price_year = $row->dashboard_price_year;
			$price_jan = $row->dashboard_price_jan;
			$price_feb = $row->dashboard_price_feb;
			$price_mar = $row->dashboard_price_mar;
			$price_apr = $row->dashboard_price_apr;
			$price_may = $row->dashboard_price_may;
			$price_june = $row->dashboard_price_june;
			$price_july = $row->dashboard_price_july;
			$price_aug = $row->dashboard_price_aug;
			$price_sep = $row->dashboard_price_sep;
			$price_oct = $row->dashboard_price_oct;
			$price_nov = $row->dashboard_price_nov;
			$price_dec = $row->dashboard_price_dec;

			$arr_price = array();

			if($price_jan > 0){
				array_push($arr_price, $price_jan);
			}

			if($price_feb > 0){
				array_push($arr_price, $price_feb);
			}

			if($price_mar > 0){
				array_push($arr_price, $price_mar);
			}

			if($price_apr > 0){
				array_push($arr_price, $price_apr);
			}


			if($price_may > 0){
				array_push($arr_price, $price_may);
			}

			if($price_june > 0){
				array_push($arr_price, $price_june);
			}

			if($price_july > 0){
				array_push($arr_price, $price_july);
			}

			if($price_aug > 0){
				array_push($arr_price, $price_aug);
			}

			if($price_sep > 0){
				array_push($arr_price, $price_sep);
			}

			if($price_oct > 0){
				array_push($arr_price, $price_oct);
			}

			if($price_nov > 0){
				array_push($arr_price, $price_nov);
			}

			if($price_dec > 0){
				array_push($arr_price, $price_dec);
			}

			$price_min = 0;
			$price_max = 0;
			$price_avg = 0;

			if(count($arr_price) > 0){
				$price_min = min($arr_price);
				$price_max = max($arr_price);
				$price_avg = array_sum($arr_price) / count($arr_price);	
			}
			

			$price_tbl .= '
				<tr>
                    <td>' . $segment . '</td>
                    <td>' . $product . '</td>
                    <td>' . $price_year . '</td>
                    <td class="text-right">' . check_zero(number_format($price_jan)) . '</td>
                    <td class="text-right">' . check_zero(number_format($price_feb)) . '</td>
                    <td class="text-right">' . check_zero(number_format($price_mar)) . '</td>
                    <td class="text-right">' . check_zero(number_format($price_apr)) . '</td>
                    <td class="text-right">' . check_zero(number_format($price_may)) . '</td>
                    <td class="text-right">' . check_zero(number_format($price_june)) . '</td>
                    <td class="text-right">' . check_zero(number_format($price_july)) . '</td>
                    <td class="text-right">' . check_zero(number_format($price_aug)) . '</td>
                    <td class="text-right">' . check_zero(number_format($price_sep)) . '</td>
                    <td class="text-right">' . check_zero(number_format($price_oct)) . '</td>
                    <td class="text-right">' . check_zero(number_format($price_nov)) . '</td>
                    <td class="text-right">' . check_zero(number_format($price_dec)) . '</td>
                    <td class="text-right">' . check_zero(number_format($price_avg)) . '</td>
                    <td class="text-right">' . check_zero(number_format($price_min)) . '</td>
                    <td class="text-right">' . check_zero(number_format($price_max)) . '</td>
                </tr>
			';
		}

		return $price_tbl;
	}

	public function opex_report_data($trans_id, $year, $type, $trans_unit_id){
		$info = $this->_require_login();

		if($type == 'NATIONAL'){
			$get_opex = $this->admin->get_query('

				SELECT SUM(opex.dashboard_bc_opex_gl_amount) as dashboard_bc_opex_gl_amount, SUM(opex.dashboard_bc_opex_gl_amount1) as dashboard_bc_opex_gl_amount1, SUM(opex.dashboard_bc_opex_gl_amount2) as dashboard_bc_opex_gl_amount2, opex.gl_sub_name
				
				FROM
					(
						SELECT SUM(a.dashboard_bc_opex_gl_amount) as dashboard_bc_opex_gl_amount, (a.dashboard_bc_opex_gl_amount1) as dashboard_bc_opex_gl_amount1, (a.dashboard_bc_opex_gl_amount2) as dashboard_bc_opex_gl_amount2, `b`.`gl_sub_name` FROM `dashboard_bc_opex_gl_tbl` `a` JOIN `gl_subgroup_tbl` `b` ON `a`.`gl_sub_id` = `b`.`gl_sub_id` AND `a`.`dashboard_bc_opex_gl_status` = 1 AND `a`.`dashboard_bc_trans_id` IN (' . $trans_id . ') GROUP BY `b`.`gl_sub_id`

						UNION

						SELECT SUM(a.dashboard_unit_opex_cost_center_amount) as dashboard_unit_opex_cost_center_amount, SUM(a.dashboard_unit_opex_cost_center_amount1) as dashboard_unit_opex_cost_center_amount1, SUM(a.dashboard_unit_opex_cost_center_amount2) as dashboard_unit_opex_cost_center_amount2, b.gl_sub_name

						FROM dashboard_unit_opex_cost_center_tbl a JOIN gl_subgroup_tbl b ON a.gl_sub_id = b.gl_sub_id AND a.dashboard_unit_opex_cost_center_status = 1 AND a.dashboard_unit_trans_id IN (' . $trans_unit_id . ') GROUP BY b.gl_sub_id
					) as opex

				GROUP BY opex.gl_sub_name
			');
		}else{
			$join_opex = array('gl_subgroup_tbl b' => 'a.gl_sub_id = b.gl_sub_id AND a.dashboard_bc_opex_gl_status = 1 AND a.dashboard_bc_trans_id IN (' . $trans_id . ')');
			$select_opex = 'SUM(a.dashboard_bc_opex_gl_amount) as dashboard_bc_opex_gl_amount, SUM(a.dashboard_bc_opex_gl_amount1) as dashboard_bc_opex_gl_amount1, SUM(a.dashboard_bc_opex_gl_amount2) as dashboard_bc_opex_gl_amount2, b.gl_sub_name';
			$group_opex = 'b.gl_sub_id';
			$get_opex = $this->admin->get_join('dashboard_bc_opex_gl_tbl a', $join_opex, FALSE, FALSE, $group_opex, $select_opex);
		}

		$opex_tbl = '';
		$total = 0;
		$total1 = 0;
		$total2 = 0;
		foreach($get_opex as $row){
			$gl_sub_name = $row->gl_sub_name;
			$gl_amount = $row->dashboard_bc_opex_gl_amount;
			$gl_amount1 = $row->dashboard_bc_opex_gl_amount1;
			$gl_amount2 = $row->dashboard_bc_opex_gl_amount2;
			$gl_dif1 = $gl_amount1 - $gl_amount;
			$gl_dif2 = $gl_amount2 - $gl_amount;
			$gl_per1 = $gl_amount1 != 0 && $gl_amount != 0 ? ($gl_dif1/$gl_amount1) * 100 : 0;
			$gl_per2 = $gl_amount2 != 0 && $gl_amount != 0 ? ($gl_dif1/$gl_amount2) * 100 : 0;


			$opex_tbl .= '
	    		<tr>
	    			<td>' . $gl_sub_name . '</td>
	    			<td align="right">' . number_format($gl_amount) . '</td>
	    			<td align="right">' . number_format($gl_amount1) . '</td>
	    			<td align="right">' . number_format($gl_amount2) . '</td>
	    			<td align="right">' . number_format($gl_dif1) . '</td>
	    			<td align="right">' . number_formaT($gl_per1) . '%</td>
	    			<td align="right">' . number_format($gl_dif2) . '</td>
	    			<td align="right">' . number_format($gl_per1) . '%</td>
	    		</tr>

	    	';

	    	$total += $gl_amount;
	    	$total1 += $gl_amount1;
	    	$total2 += $gl_amount2;

		}

		$total_dif1 = $total1 - $total;
	    $total_dif2 = $total2 - $total;

	    $total_per1 = $total1 != 0  && $total != 0? ($total_dif1/$total1) * 100 : 0;
	    $total_per2 = $total2 != 0 && $total != 0 ? ($total_dif2/$total2) * 100 : 0;

	    $opex_tbl .= '
	    	<tr>
	    		<td><strong>Total</td>
	    		<td align="right"><strong>' . number_format($total) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total1) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total2) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total_dif1) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total_per1) . '%</strong></td>
	    		<td align="right"><strong>' . number_format($total_dif2) . '</strong></td>
	    		<td align="right"><strong>' . number_format($total_per2) . '%</strong></td>
	    	</tr>
	    ';


    	$opex_report_dif1 = $total - $total1;
    	$opex_report_dif2 = $total - $total2;

    	$opex_condition1 = $opex_report_dif1 > 0 ? 'higher' :  'lower';
    	$opex_condition2 = $opex_report_dif2 > 0 ? 'higher' :  'lower';
    	$opex_sign1 = $opex_report_dif1 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';
    	$opex_sign2 = $opex_report_dif2 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';

 		$opex_report = '<label class="chart-remarks"><strong>OPEX is <span class="dashboard-num">₱' . convert_num($total). '</span>, ' . $opex_condition1 . ' by <span class="dashboard-num">₱' . convert_num($opex_report_dif1) . '</span>' . $opex_sign1 . ' vs ' . ($year - 1) . ' and ' . $opex_condition2 . ' by <span class="dashboard-num">₱' . convert_num($opex_report_dif2) . '</span>' . $opex_sign2 . ' vs ' . ($year - 2) . '</strong></label>';

	    $data['opex_tbl'] = $opex_tbl;
	    $data['opex'] = $total;
	    $data['opex1'] = $total1;
	    $data['opex2'] = $total2;
	    $data['opex_report'] = $opex_report;

		return $data;
	}

	public function get_cm_store_data($trans_id){
		$info = $this->_require_login();

		$join_cm = array(
			'outlet_tbl b' => 'a.outlet_id = b.outlet_id AND a.dashboard_cust_summary_status = 1 AND a.dashboard_bc_trans_id IN (' . $trans_id . ')',
			'bc_tbl c' => 'a.bc_id = c.bc_id',
			'brand_tbl d' => 'a.brand_id = d.brand_id'
		);

		$order_by = 'c.bc_name, d.brand_name, b.outlet_name';
		$group_by = 'b.outlet_id';
		$select = 'SUM(a.dashboard_cust_summary_sales_unit) as sales_unit, SUM(dashboard_cust_summary_net_sales) as net_sales, SUM(dashboard_cust_summary_variable_cost) as variable_cost, c.bc_name, b.outlet_name, d.brand_name, a.dashboard_cust_summary_id, b.outlet_id, a.dashboard_bc_trans_id, b.ifs_code';
		$get_cm = $this->admin->get_join('dashboard_customer_summary_tbl a', $join_cm, FALSE, $order_by, $group_by, $select);

		$cm_tbl = '';
		foreach($get_cm as $row){
			$bc_name = $row->bc_name;
			$outlet_name = $row->outlet_name;
			$ifs_code = $row->ifs_code;
			$brand_name = $row->brand_name;
			$sales_unit = $row->sales_unit;
			$net_sales = $row->net_sales;
			$variable_cost = $row->variable_cost;
			$cm = $net_sales - $variable_cost;

			$net_sales_unit = $sales_unit > 0 ? $net_sales / $sales_unit : 0;
			$variable_cost_unit = $sales_unit > 0 ? $variable_cost / $sales_unit : 0;
			$cm_unit = $sales_unit > 0 ? $cm / $sales_unit : 0;

			$cm_percent = $net_sales > 0 ? ($cm / $net_sales) * 100 : 0;

			$join_period_cost = array('cost_center_tbl b' => "a.cost_center_id = b.cost_center_id AND b.cost_center_code = '" . $ifs_code . "' AND a.dashboard_bc_trans_id = " . $row->dashboard_bc_trans_id);
			$select_period_cost = 'SUM(a.dashboard_opex_store_amount) as opex_amount';
			$get_period_cost = $this->admin->check_join('dashboard_opex_store_tbl a', $join_period_cost, TRUE, FALSE, FALSE, $select_period_cost);

			$period_cost = 0;
			if($get_period_cost['result'] == TRUE){
				$period_cost = $get_period_cost['info']->opex_amount;
			}

			$period_cost_unit = $sales_unit > 0 ? ($period_cost / $sales_unit) : 0;

			$noi = $cm - $period_cost;
			$noi_unit = $sales_unit > 0 ? ($noi / $sales_unit) : 0;
			$noi_percent = $net_sales > 0 ? ($noi / $net_sales) * 100 : 0;
			//echo $outlet_name . ' - ' . $net_sales . ' | ' . $noi . ' = ' . $noi_percent .  '<br />';

			$cm_tbl .= '
	    		<tr>
	    			<td>' . $bc_name . '</td>
	    			<td>' . $outlet_name . '</td>
	    			<td>' . $brand_name . '</td>
	    			<td align="right">' . number_format($sales_unit) . '</td>
	    			<td align="right">' . number_format($net_sales) . '</td>
	    			<td align="right">' . number_format($net_sales_unit) . '</td>
	    			<td align="right">' . number_format($variable_cost) . '</td>
	    			<td align="right">' . number_format($variable_cost_unit) . '</td>
	    			<td align="right">' . number_formaT($cm) . '</td>
	    			<td align="right">' . number_format($cm_unit) . '</td>
	    			<td align="right">' . number_format($cm_percent) . '%</td>
	    			<td align="right">' . number_format($period_cost) . '</td>
	    			<td align="right">' . number_format($period_cost_unit) . '</td>
	    			<td align="right">' . number_format($noi) . '</td>
	    			<td align="right">' . number_format($noi_unit) . '</td>
	    			<td align="right">' . number_format($noi_percent) . '%</td>
	    			<td class="text-center"><a href="#" class="btn btn-xs btn-info view-cm-store" data-trans-id="' . encode($row->dashboard_bc_trans_id) . '" data-outlet-id="' . encode($row->outlet_id) . '">View</a></td>
	    		</tr>

	    	';

		}
		//exit;

	    $data['cm_tbl'] = $cm_tbl;
		return $data;
	}

	public function get_cm_store_details(){
		$info = $this->_require_login();

		if($_SERVER['REQUEST_METHOD'] == 'POST'){
			$trans_id = decode(clean_data($this->input->post('trans_id')));
			$outlet_id = decode(clean_data($this->input->post('outlet_id')));

			if(!empty($trans_id) && !empty($outlet_id)){

				$check_trans = $this->admin->check_data('dashboard_bc_transaction_tbl', array('dashboard_bc_trans_id' => $trans_id));
				if($check_trans == TRUE){
					$check_outlet = $this->admin->check_data('outlet_tbl', array('outlet_id' => $outlet_id));
					if($check_outlet == TRUE){
						$join_cm = array(
							'outlet_tbl b' => 'a.outlet_id = b.outlet_id AND a.dashboard_cust_summary_status = 1 AND a.dashboard_bc_trans_id IN (' . $trans_id . ') AND b.outlet_id = ' . $outlet_id,
							'bc_tbl c' => 'a.bc_id = c.bc_id',
							'brand_tbl d' => 'a.brand_id = d.brand_id'
						);

						$order_by = 'a.dashboard_cust_summary_date ASC';
						$group_by = 'b.outlet_id, a.dashboard_cust_summary_date';
						$select = 'SUM(a.dashboard_cust_summary_sales_unit) as sales_unit, SUM(dashboard_cust_summary_net_sales) as net_sales, SUM(dashboard_cust_summary_variable_cost) as variable_cost, c.bc_name, b.outlet_name, b.ifs_code, d.brand_name, a.dashboard_cust_summary_id, a.dashboard_bc_trans_id, a.dashboard_cust_summary_date';
						$get_cm = $this->admin->get_join('dashboard_customer_summary_tbl a', $join_cm, FALSE, $order_by, $group_by, $select);

						$cm_tbl = '';
						$sales_unit_td = '';
						$net_sales_td = '';
						$net_sales_unit_td = '';
						$variable_cost_td = '';
						$variable_cost_unit_td = '';
						$cm_td = '';
						$cm_unit_td = '';
						$cm_percent_td = '';
						$period_cost_td = '';
						$period_cost_unit_td = '';
						$noi_td = '';
						$noi_unit_td = '';
						$noi_percent_td = '';

						$total_sales_unit = 0;
						$total_net_sales = 0;
						$total_variable_cost = 0;
						$total_period_cost = 0;

						$bc = '';
						$outlet = '';
						$brand = '';
						$ifs = '';
						foreach($get_cm as $row){
							$bc_name = $row->bc_name;
							$outlet_name = $row->outlet_name;
							$brand_name = $row->brand_name;
							$ifs_code = $row->ifs_code;
							$date = $row->dashboard_cust_summary_date;

							$sales_unit = $row->sales_unit;
							$net_sales = $row->net_sales;
							$variable_cost = $row->variable_cost;
							$cm = $net_sales - $variable_cost;

							$net_sales_unit = $sales_unit > 0 ? $net_sales / $sales_unit : 0;
							$variable_cost_unit = $sales_unit > 0 ? $variable_cost / $sales_unit : 0;
							$cm_unit = $sales_unit > 0 ? $cm / $sales_unit : 0;

							$cm_percent = $net_sales > 0 ? ($cm / $net_sales) * 100 : 0;

							$join_period_cost = array('cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND b.cost_center_code = "' . $ifs_code . '" AND a.dashboard_bc_trans_id = "' . $row->dashboard_bc_trans_id . '" AND a.dashboard_opex_store_date = "' . $date . '"');
							$select_period_cost = 'SUM(a.dashboard_opex_store_amount) as opex_amount';
							$get_period_cost = $this->admin->check_join('dashboard_opex_store_tbl a', $join_period_cost, TRUE, FALSE, FALSE, $select_period_cost);

							$period_cost = 0;
							if($get_period_cost['result'] == TRUE){
								$period_cost = $get_period_cost['info']->opex_amount;
							}

							$period_cost_unit = $sales_unit > 0 ? ($period_cost / $sales_unit) : 0;

							$noi = $cm - $period_cost;
							$noi_unit = $sales_unit > 0 ? ($noi / $sales_unit) : 0;
							$noi_percent = $net_sales > 0 ? ($noi / $net_sales) * 100 : 0;


							$sales_unit_td .= '<td class="text-right">' . number_format($sales_unit) . '</td>';
							$net_sales_td .= '<td class="text-right">' . number_format($net_sales) . '</td>';
							$net_sales_unit_td .= '<td class="text-right">' . number_format($net_sales_unit) . '</td>';
							$variable_cost_td .= '<td class="text-right">' . number_format($variable_cost) . '</td>';
							$variable_cost_unit_td .= '<td class="text-right">' . number_format($variable_cost_unit) . '</td>';
							$cm_td .= '<td class="text-right">' . number_format($cm) . '</td>';
							$cm_unit_td .= '<td class="text-right">' . number_format($cm_unit) . '</td>';
							$cm_percent_td .= '<td class="text-right">' . number_format($cm_percent) . '%</td>';
							$period_cost_td .= '<td class="text-right">' . number_format($period_cost) . '</td>';
							$period_cost_unit_td .= '<td class="text-right">' . number_format($period_cost_unit) . '</td>';
							$noi_td .= '<td class="text-right">' . number_format($noi) . '</td>';
							$noi_unit_td .= '<td class="text-right">' . number_format($noi_unit) . '</td>';
							$noi_percent_td .= '<td class="text-right">' . number_format($noi_percent) . '%</td>';

							$total_sales_unit += $sales_unit;
							$total_net_sales += $net_sales;
							$total_variable_cost += $variable_cost;
							$total_period_cost += $period_cost;

							$bc = $bc_name;
							$outlet = $outlet_name;
							$brand = $brand_name;
							$ifs = $ifs_code;
						}

						$total_cm = $total_net_sales - $total_variable_cost;
						$total_net_sales_unit = $total_sales_unit > 0 ? $total_net_sales / $total_sales_unit : 0;
						$total_variable_cost_unit = $total_sales_unit > 0 ? $total_variable_cost / $total_sales_unit : 0;
						$total_cm_unit = $total_sales_unit > 0 ? $total_cm / $total_sales_unit : 0;

						$total_cm_percent = $net_sales > 0 ? ($total_cm / $total_net_sales) * 100 : 0; 

						$total_period_cost_unit = $total_sales_unit > 0 ? ($total_period_cost / $total_sales_unit) : 0;

						$total_noi = $total_cm - $total_period_cost;
						$total_noi_unit = $total_sales_unit > 0 ? ($total_noi / $total_sales_unit) : 0;
						$total_noi_percent = $total_net_sales > 0 ? ($total_noi / $total_net_sales) * 100 : 0;

						$cm_tbl = '
							<thead>
								<tr>
									<td></td>
									<td>Total</td>
									<td>Jan</td>
									<td>Feb</td>
									<td>Mar</td>
									<td>Apr</td>
									<td>May</td>
									<td>Jun</td>
									<td>Jul</td>
									<td>Aug</td>
									<td>Sep</td>
									<td>Oct</td>
									<td>Nov</td>
									<td>Dec</td>
								</tr>
							</thead>

							<tbody>
								<tr>
									<td><strong>Sales Unit</strong></td>
									<td class="text-right">' . number_format($total_sales_unit) . '</td>
									' . $sales_unit_td . '
								</tr>

								<tr>
									<td><strong>Net Sales</strong></td>
									<td class="text-right">' . number_format($total_net_sales) . '</td>
									' . $net_sales_td . '
								</tr>

								<tr>
									<td><strong>Net Sales Per Unit</strong></td>
									<td class="text-right">' . number_format($total_net_sales_unit) . '</td>
									' . $net_sales_unit_td . '
								</tr>

								<tr>
									<td><strong>Variable Cost</strong></td>
									<td class="text-right">' . number_format($total_variable_cost) . '</td>
									' . $variable_cost_td . '
								</tr>

								<tr>
									<td><strong>Variable Cost Per Unit</strong></td>
									<td class="text-right">' . number_format($total_variable_cost_unit) . '</td>
									' . $variable_cost_unit_td . '
								</tr>

								<tr>
									<td><strong>Contribution Margin</strong></td>
									<td class="text-right">' . number_format($total_cm) . '</td>
									' . $cm_td . '
								</tr>

								<tr>
									<td><strong>Contribution Margin Per Unit</strong></td>
									<td class="text-right">' . number_format($total_cm_unit) . '</td>
									' . $cm_unit_td . '
								</tr>

								<tr>
									<td><strong>CM %</strong></td>
									<td class="text-right">' . number_format($total_cm_percent) . '%</td>
									' . $cm_percent_td . '
								</tr>

								<tr>
									<td><strong>Period Cost</strong></td>
									<td class="text-right">' . number_format($total_period_cost) . '</td>
									' . $period_cost_td . '
								</tr>

								<tr>
									<td><strong>Period Cost Per Unit</strong></td>
									<td class="text-right">' . number_format($total_period_cost_unit) . '</td>
									' . $period_cost_unit_td . '
								</tr>

								<tr>
									<td><strong>NOI</strong></td>
									<td class="text-right">' . number_format($total_noi) . '</td>
									' . $noi_td . '
								</tr>

								<tr>
									<td><strong>NOI Per Unit</strong></td>
									<td class="text-right">' . number_format($total_noi_unit) . '</td>
									' . $noi_unit_td . '
								</tr>

								<tr>
									<td><strong>NOI %</strong></td>
									<td class="text-right">' . number_format($total_noi_percent) . '%</td>
									' . $noi_percent_td . '
								</tr>
							</tbody>

						';


						$join_cm_mat = array(
							'outlet_tbl b' => 'a.outlet_id = b.outlet_id AND a.dashboard_cust_summary_status = 1 AND a.dashboard_bc_trans_id IN (' . $trans_id . ') AND b.outlet_id = ' . $outlet_id,
							'bc_tbl c' => 'a.bc_id = c.bc_id',
							'brand_tbl d' => 'a.brand_id = d.brand_id',
							'material_tbl e' => 'a.material_id = e.material_id'
						);

						$order_by_mat_cm = 'e.material_desc ASC';
						$group_by_mat_cm = 'e.material_id';
						$select_mat_cm = 'SUM(a.dashboard_cust_summary_sales_unit) as sales_unit, SUM(dashboard_cust_summary_net_sales) as net_sales, SUM(dashboard_cust_summary_variable_cost) as variable_cost, c.bc_name, b.outlet_name, b.ifs_code, d.brand_name, a.dashboard_cust_summary_id, e.material_desc, e.material_code';
						$get_cm_mat = $this->admin->get_join('dashboard_customer_summary_tbl a', $join_cm_mat, FALSE, $order_by_mat_cm, $group_by_mat_cm, $select_mat_cm);

						$cm_mat_tbl = '';
						foreach($get_cm_mat as $row_mat){
							$material_name = $row_mat->material_desc;
							$material_code = $row_mat->material_code;
							$mat_sales_unit = $row_mat->sales_unit;
							$mat_net_sales = $row_mat->net_sales;
							$mat_variable_cost = $row_mat->variable_cost;
							$mat_cm = $mat_net_sales - $mat_variable_cost;

							$mat_net_sales_unit = $mat_sales_unit > 0 ? $mat_net_sales / $mat_sales_unit : 0;
							$mat_variable_cost_unit = $mat_sales_unit > 0 ? $mat_variable_cost / $mat_sales_unit : 0;
							$mat_cm_unit = $mat_sales_unit > 0 ? $cm / $mat_sales_unit : 0;

							$mat_cm_percent = $mat_net_sales > 0 ? ($mat_cm / $mat_net_sales) * 100 : 0;

							$cm_mat_tbl .= '
								<tr>
									<td><strong>' . $material_code . ' - ' . $material_name . '</strong></td>
									<td class="text-right">' . number_format($mat_sales_unit) . '</td>
									<td class="text-right">' . number_format($mat_net_sales) . '</td>
									<td class="text-right">' . number_format($mat_net_sales_unit) . '</td>
									<td class="text-right">' . number_format($mat_variable_cost) . '</td>
									<td class="text-right">' . number_format($mat_variable_cost_unit) . '</td>
									<td class="text-right">' . number_format($mat_cm) . '</td>
									<td class="text-right">' . number_format($mat_cm_unit) . '</td>
									<td class="text-right">' . number_format($mat_cm_percent) . '%</td>
								</tr>

							';

						}

						$data['result'] = 1;
						$data['bc'] = $bc;
						$data['outlet'] = $outlet;
						$data['brand'] = $brand;
						$data['ifs'] = $ifs_code;
						$data['cm_monthly_tbl'] = $cm_tbl;
						$data['cm_material_tbl'] = $cm_mat_tbl;
					}else{
						$data['result'] = 0;
					}
				}else{
					$data['result'] = 0;
				}
			}

			echo json_encode($data);
		}
	}

	public function view_pdf($type = 'BC', $year = null, $id = null){
		$info = $this->_require_login();
		$user_type = decode($info['user_type_id']);
		$type = decode($type);
		$year = decode($year);

		$trans_unit_id = '';
 		if($type == 'BC'){
			$trans_id = decode($id);
			if($user_type == 2){
				$user_info = $this->get_user_info();
				$user_bc_id = $user_info['bc_id'];

				$join_trans = array('bc_tbl b' => 'a.bc_id = b.bc_id AND a.dashboard_trans_status_id = 3 AND a.bc_id = ' . $user_bc_id . ' AND a.dashboard_bc_trans_id = ' . $trans_id);
			}elseif($user_type == 6){
				$user_info = $this->get_user_info();
				$user_region_id = $user_info['region_id'];

				$join_trans = array(
					'bc_tbl b' => 'a.bc_id = b.bc_id AND a.dashboard_trans_status_id = 3 AND a.bc_id AND a.dashboard_bc_trans_id = ' . $trans_id,
					'region_tbl c' => 'b.region_id = c.region_id AND c.region_id = ' . $user_region_id
				);
			}elseif($user_type == 1 || $user_type == 7){
				$join_trans = array('bc_tbl b' => 'a.bc_id = b.bc_id AND a.dashboard_trans_status_id = 3 AND a.dashboard_bc_trans_id = ' . $trans_id);
			}else{
				echo "Sorry you don't have access to this report.";
				exit;
			}

			$check_trans = $this->admin->check_join('dashboard_bc_transaction_tbl a', $join_trans, TRUE);
			if($check_trans['result'] == TRUE){
				$bc_id = $check_trans['info']->bc_id;
				$pdf_name = $check_trans['info']->bc_name;
				$report_type = 'BUSINESS CENTER';
				$year = $check_trans['info']->dashboard_bc_trans_year;
				$cost_center_id = $this->get_bc_cost_center($bc_id);
			}else{
				echo 'Invalid Transaction. Please try again!';
				exit;
			}
		}elseif($type == 'REGIONAL'){
			$id = decode($id);

			if($user_type == 1 || $user_type == 7){
				$get_trans_det = $this->get_trans_region($id);
			}elseif($user_type == 6){
				$user_info = $this->get_user_info();
				$user_region_id = $user_info['region_id'];
				if($user_region_id == $id){
					$get_trans_det = $this->get_trans_region($id);
				}else{
					echo "Sorry you don't have access to this report.";
					exit;
				}
			}else{
				echo "Sorry you don't have access to this report.";
				exit;
			}

			$trans_id = $get_trans_det['trans_id'];
			$pdf_name = $get_trans_det['region_name'];
			$report_type = 'REGION';
			$get_details = $this->get_region_cost_center($id);
			$cost_center_id = $get_details['cost_center'];
			$bc_id = $get_details['bc'];
		}elseif($type == 'NATIONAL'){
			if($user_type == 1 || $user_type == 7){
				$pdf_name = 'NATIONAL';
				$report_type = '';
				$get_details = $this->get_trans_national();
				$trans_id = $get_details['trans_id'];
				$get_details = $this->get_national_cost_center($id);
				$cost_center_id = $get_details['cost_center'];
				$bc_id = $get_details['bc'];

				$trans_unit_id = $this->get_trans_unit_national();
			}else{
				echo "Sorry you don't have access to this report.";
				exit;
			}
		}

 		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','4048M');
		
		$this->load->library("Pdf");
			  
	    // create new PDF document
	    $pdf = new TCPDF('P', PDF_UNIT, 'A4', true, 'UTF-8', false);
	  
	    // set document information

	    $pdf->SetCreator(PDF_CREATOR);
	    $pdf->SetAuthor('Bounty Agro Venture, Inc.');
	    $pdf->SetTitle('BAVI Budgeting Report');
	    $pdf->SetSubject('BAVI Budgeting Report');
	    $pdf->SetKeywords('BAVI, Budgeting, Report');   
	  
	    // set default header data

	    $title = "Bounty Agro Venture, Inc.";

	    $pdf->setPrintHeader(false);
	    $pdf->setPrintFooter(false);

	    $pdf->SetAutoPageBreak(true);
	  
	    // set some language-dependent strings (optional)
	    if (@file_exists(dirname(__FILE__).'/lang/eng.php')) {
	        require_once(dirname(__FILE__).'/lang/eng.php');
	        $pdf->setLanguageArray($l);
	    }
	    
	  
	    // Add a page
	    // This method has several options, check the source code documentation for more information.
	    $pdf->AddPage();
	    $this->header($pdf);

	    $pdf->SetFont('arial', 'B', 52);
	    $pdf->SetTextColor(0,0,0);
	    $pdf->Text(20, 100, $pdf_name);
	    $pdf->Text(20, 120, 'BUDGET');
	    $pdf->SetTextColor(255,51,0);
	    $pdf->Text(20, 140, $year);

	    $pdf->SetFont('arial', 'B', 8);
	    $pdf->SetTextColor(0,0,0);
	    $pdf->Text(15, 280, 'BOUNTY AGRO VENTURES INC. | Unit 1008, The Taipan Place Condo, F. Ortigas Jr. Ave, Ortigas');
	    $pdf->Text(15, 285, 'Center, Pasig City');


	    //Table of Contents
	    $pdf->AddPage();
	    $this->header($pdf);

	    $pdf->SetFont('arial', 'B', 16);
	    
	    $pdf->SetTextColor(255,51,0);
	    $pdf->Text(20, 50, 'TABLE OF');
	    $pdf->SetTextColor(0,0,0);
	    $pdf->Text(49, 50, 'CONTENTS');
	    $pdf->SetTextColor(0,0,0);

	    $pdf->SetFont('arial', 'B', 9);
	    $pdf->Text(18, 80, 'EXECUTIVE SUMMARY  ...............................................................................................................................................  3');

	    /*$pdf->Text(18, 90, 'HARVESTABLE VOLUME  .....................................................................................................................................  4');*/

	    $pdf->Text(18, 100, 'PROFIT & LOSS STATEMENT');

	    $pdf->Text(20, 110, 'Schedule 1: Comparative Profit and Loss  ...............................................................................................................  5');

	    $pdf->Text(20, 120, 'Schedule 2: Monthly NOI Summary  ..........................................................................................................................  6');

	    $pdf->Text(20, 130, 'Schedule 3: Net Operating Income per Segment  .....................................................................................................  7');

	    /*$pdf->Text(20, 140, 'Schedule 4: Monthly NOI Summary - COMMODITY  ...........................................................................................  8');*/

	    $pdf->Text(20, 140, 'Schedule 4: Monthly NOI Summary - CHOOKS TO GO  ...........................................................................................  8');

	    $pdf->Text(20, 150, 'Schedule 5: Monthly NOI Summary - ULING ROASTERS  .......................................................................................  9');

	    $pdf->Text(20, 160, 'Schedule 6: Monthly NOI Summary - RESELLER  ....................................................................................................  10');
	    
		$pdf->Text(20, 170, 'Schedule 7: Monthly NOI Summary - CHOOKS EXPRESS  ......................................................................................  11');
		
		$pdf->Text(20, 180, 'Schedule 8: Monthly NOI Summary - CHOOKS DINE IN  ..........................................................................................  12');

	    $pdf->Text(20, 190, 'Schedule 9: Monthly Selling Prices  ...........................................................................................................................  13-14');

	    $pdf->Text(20, 200, 'Schedule 10: Comparative Operating Expenses per Cost Center  ..........................................................................  15');

	    $pdf->Text(20, 210, 'Schedule 11: Comparative Operating Expenses per Account  ................................................................................  16-17');

	    $pdf->Text(18, 220, 'CAPITAL EXPENDITURE (CAPEX)  ...............................................................................................................................  18-19');

	    $pdf->Text(18, 230, 'MANPOWER HEAD COUNT  ..........................................................................................................................................  20');

	    $pdf->AddPage();

	    $pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
	    $pdf->Text(20, 46, 'EXECUTIVE SUMMARY');
	    $pdf->Text(20, 52, 'Budget ' . $year);


	    /*Broiler Report*/
	    $get_broiler = $this->get_broiler_data($trans_id, $year, 'PDF');

	    $harvest_broiler_data = $get_broiler['broiler_tbl'];
	    $harvest_report = $get_broiler['birds_report'];
	    $broiler_cost_report = $get_broiler['cost_report'];

	    $pdf->SetMargins(20, 20, 20, true);

	    /*$pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 70, $harvest_report);*/

	    /*NOI*/

	    $get_noi = $this->get_noi_data($trans_id, $year, 'PDF', $type, $trans_unit_id, $id);
	    $net_sales_report = $get_noi['net_sales_report'];
	    $sales_report = $get_noi['sales_unit_report'];
	    $noi_report = $get_noi['noi_report'];
	    $pnl_data = $get_noi['pnl_tbl'];
	    $sales_unit = $get_noi['sales_unit'];
	    $sales_unit1 = $get_noi['sales_unit1'];
	    $sales_unit2 = $get_noi['sales_unit2'];


	    $pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 70, $sales_report);

	    $pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 80, $net_sales_report);


	    $pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 100, 'SALES MIX (%)');

	    $get_sales_mix = $this->get_sales_mix_report_data($trans_id, $year);
    	$sales_mix_data = $get_sales_mix['sales_mix_tbl'];

	    $sales_mix = '<br /><br /><br />
	    	<table border="1" cellpadding="15">
	    		<tr>
	    			<th align="center"><strong>SEGMENT</strong></th>
	    			<th align="center"><strong>' . $year . ' BUDGET</strong></th>
	    			<th align="center"><strong>' . ($year - 1) . '</strong></th>
	    			<th align="center"><strong>' . ($year - 2) . '</strong></th>
	    		</tr>
	    		' . $sales_mix_data . '	    		
	    	</table>
	    ';
	    $pdf->SetFont('arial', '', 10);
	    $pdf->writeHTML($sales_mix, true, false, true, false, '');

	    /*NOI*/

	    $pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 205, $noi_report);

	    /*Outlet Report*/

	    $outlet_report = $this->get_outlet_report_data($trans_id, $year, 'PDF');
		$data['outlet_report'] = $outlet_report;
	    $pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 215, $outlet_report);

	    /*$pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 225, $broiler_cost_report);*/

	    /*Manpower Report*/

	    $get_employee = $this->get_employee_report_data($trans_id, $year, 'PDF', $type, $trans_unit_id);
		$manpower_report = $get_employee['employee_report'];
	    $pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 225, $manpower_report);

	    
	    /*CAPEX Report*/

	    $get_capex = $this->get_capex_summary_report_data($trans_id, $year, 'PDF', $type, $trans_unit_id);
		$capex_report = $get_capex['capex_report'];
	    $pdf->SetFont('arial', 'I', 10);
	    $pdf->Text(20, 235, $capex_report);

	    // get the current page break margin
		$bMargin = $pdf->getBreakMargin();
		// get current auto-page-break mode
		$auto_page_break = $pdf->getAutoPageBreak();
		// disable auto-page-break
		$pdf->SetAutoPageBreak(false, 0);
		// set bacground image
		$img_file = 'assets/img/confidential.png';
		$pdf->Image($img_file, 10, 50, '', '', '', '', '', false, 300, '', false, false, 0);
		// restore auto-page-break status
		$pdf->SetAutoPageBreak($auto_page_break, $bMargin);
		// set the starting point for the page content
		$pdf->setPageMark();

		$this->header($pdf);


	    /*HARVESTABLE VOLUME PAGE*/

	    /*$pdf->AddPage();

	    $pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
	    $pdf->Text(20, 46, 'HARVESTABLE VOLUME');
	    $pdf->Text(20, 52, 'Budget ' . $year);

	    $pdf->SetFont('arial', '', 9);

	    $harvest_tbl = '<br /><br /><br />
	    	<table border="1" cellpadding="10">
	    		<tr>
	    			<th align="center" rowspan="2"><strong>MONTH</strong></th>
	    			<th align="center" colspan="3"><strong>HARVESTABLE BIRDS</strong></th>
	    			<th align="center" colspan="3"><strong>BROILER COST/KILO</strong></th>
	    		</tr>

	    		<tr>
                    <th align="center"><strong>' . $year . '</strong></th>
                    <th align="center"><strong>' . ($year - 1) . '</strong></th>
                    <th align="center"><strong>' . ($year - 2) . '</strong></th>

                    <th align="center"><strong>' . $year . '</strong></th>
                    <th align="center"><strong>' . ($year - 1) . '</strong></th>
                    <th align="center"><strong>' . ($year - 2) . '</strong></th>
                </tr>

                ' . $harvest_broiler_data . '
	    			    		
	    	</table>
	    ';

	    $pdf->writeHTML($harvest_tbl, true, false, true, false, '');


	    $this->watermark($pdf);
		$this->header($pdf);*/


		/*PNL PAGE*/

		$pdf->AddPage();

	    $pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 20, $pdf_name . ' ' . $report_type);
	    $pdf->Text(20, 26, 'PROFIT & LOSS STATEMENT');
	    $pdf->Text(20, 32, 'Budget ' . $year);

	    $pdf->SetFont('arial', '', 7);


	    $pnl_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="6">
	    		<tr>
	    			<th align="center" valign="bottom" rowspan="2"><strong>(In Thousands)</strong></th>
	    			<th align="center" valign="bottom" rowspan="2"><strong>BUDGET</strong></th>
	    			<th align="center" colspan="2"><strong>ACTUAL</strong></th>
	    			<th align="center" colspan="4"><strong>VARIANCE</strong></th>
	    		</tr>

	    		<tr>
                    <th align="center"><strong>' . ($year - 1) . '</strong></th>
                    <th align="center"><strong>' . ($year - 2) . '</strong></th>
                    <th align="center"><strong>BUDGET VS ' . ($year - 1) . '</strong></th>
                    <th align="center"><strong>%</strong></th>
                    <th align="center"><strong>BUDGET VS ' . ($year - 2) . '</strong></th>
                    <th align="center"><strong>%</strong></th>
                </tr>
                ' . $pnl_data . '
	    	</table>
	    ';

	    $pdf->writeHTML($pnl_tbl, true, false, true, false, '');

	    $this->watermark($pdf);
		$this->header($pdf);
		
		/*MONTHLY NOI SUMMARY PAGE*/

		if($type != 'NATIONAL'){

			$pdf->SetMargins(20, 20, 20, true);
			$pdf->AddPage('L');

			$pdf->SetTextColor(0,0,0);

		    $pdf->setFont('arialb', '', 12);
		    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
		    $pdf->Text(20, 46, 'MONTHLY NOI SUMMARY');
		    $pdf->Text(20, 52, 'Budget ' . $year);

		    $pdf->SetFont('arial', '', 8);

		    $pnl_monthly_tbl = $this->get_noi_monthly_data($trans_id, $cost_center_id);
		   

		    $pdf->writeHTML($pnl_monthly_tbl, true, false, true, false, '');

		    $this->watermark_landscape($pdf);
			$this->header_landscape($pdf);

			

			/*PNL PER SEGMENT PAGE*/

			$pdf->AddPage('L');

			$pdf->SetTextColor(0,0,0);

		    $pdf->setFont('arialb', '', 12);
		    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
		    $pdf->Text(20, 46, 'NET OPERATING INCOME PER SEGMENT');
		    $pdf->Text(20, 52, 'Budget ' . $year);
		    $pdf->Text(20, 58, '(In Thousands)');

		    $pdf->SetFont('arial', '', 8);

		    $pnl_segment = $this->get_noi_segment_monthly_data($trans_id, $cost_center_id, $year, $get_noi);

		    $pnl_segment_tbl = $pnl_segment['pnl_segment_tbl'];
		    $pdf->writeHTML($pnl_segment_tbl, true, false, true, false, '');

		    $this->watermark_landscape($pdf);
			$this->header_landscape($pdf);


			/*Monthly NOI Summary - Commodity*/

			/*$pdf->SetMargins(20, 20, 20, true);
			$pdf->AddPage('L');

			$pdf->SetTextColor(0,0,0);

		    $pdf->SetFont('arialb', '', 12);
		    $pdf->Text(20, 30, $pdf_name . ' ' . $report_type);
		    $pdf->Text(20, 36, 'MONTHLY NOI SUMMARY - COMMODITY');
		    $pdf->Text(20, 42, 'Budget ' . $year);
		    $pdf->Text(20, 48, '(In Thousands)');

		    $pdf->SetFont('arial', '', 8);

		    $noi_com_tbl = $pnl_segment['pnl_com_tbl'];
		    $pdf->writeHTML($noi_com_tbl, true, false, true, false, '');

		    $this->watermark_landscape($pdf);
			$this->header_landscape($pdf);*/


			/*Monthly NOI Summary - CTG*/
			$pdf->SetMargins(20, 20, 20, true);
			$pdf->AddPage('L');

			$pdf->SetTextColor(0,0,0);

		    $pdf->SetFont('arialb', '', 12);
		    $pdf->Text(20, 30, $pdf_name . ' ' . $report_type);
		    $pdf->Text(20, 36, 'MONTHLY NOI SUMMARY - CHOOKS-TO-GO');
		    $pdf->Text(20, 42, 'Budget ' . $year);
		    $pdf->Text(20, 48, '(In Thousands)');

		    $pdf->SetFont('arial', '', 8);

			$noi_ctg_tbl = $pnl_segment['pnl_ctg_tbl'];
		    $pdf->writeHTML($noi_ctg_tbl, true, false, true, false, '');

		    $this->watermark_landscape($pdf);
			$this->header_landscape($pdf);


		    /*Monthly NOI Summary - UR*/
		    $pdf->SetMargins(20, 20, 20, true);
			$pdf->AddPage('L');

			$pdf->SetTextColor(0,0,0);

		    $pdf->SetFont('arialb', '', 12);
		    $pdf->Text(20, 30, $pdf_name . ' ' . $report_type);
		    $pdf->Text(20, 36, 'MONTHLY NOI SUMMARY - ULING ROASTERS');
		    $pdf->Text(20, 42, 'Budget ' . $year);
		    $pdf->Text(20, 48, '(In Thousands)');

		    $pdf->SetFont('arial', '', 8);

		    
		    $noi_ur_tbl = $pnl_segment['pnl_ur_tbl'];
		    $pdf->writeHTML($noi_ur_tbl, true, false, true, false, '');

		    $this->watermark_landscape($pdf);
			$this->header_landscape($pdf);


			/*Monthly NOI Summary - Reseller*/

			$pdf->SetMargins(20, 20, 20, true);
			$pdf->AddPage('L');

			$pdf->SetTextColor(0,0,0);

		    $pdf->SetFont('arialb', '', 12);
		    $pdf->Text(20, 30, $pdf_name . ' ' . $report_type);
		    $pdf->Text(20, 36, 'MONTHLY NOI SUMMARY - RESELLERS');
		    $pdf->Text(20, 42, 'Budget ' . $year);
		    $pdf->Text(20, 48, '(In Thousands)');

		    $pdf->SetFont('arial', '', 8);

		    
		    $noi_rsl_tbl = $pnl_segment['pnl_rsl_tbl'];
		    $pdf->writeHTML($noi_rsl_tbl, true, false, true, false, '');

		    $this->watermark_landscape($pdf);
			$this->header_landscape($pdf);

			/*Monthly NOI Summary - HEIHEI*/

			$pdf->SetMargins(20, 20, 20, true);
			$pdf->AddPage('L');

			$pdf->SetTextColor(0,0,0);

		    $pdf->SetFont('arialb', '', 12);
		    $pdf->Text(20, 30, $pdf_name . ' ' . $report_type);
		    $pdf->Text(20, 36, 'MONTHLY NOI SUMMARY - CHOOKS EXPRESS');
		    $pdf->Text(20, 42, 'Budget ' . $year);
		    $pdf->Text(20, 48, '(In Thousands)');

		    $pdf->SetFont('arial', '', 8);

		    
		    $noi_exp_tbl = $pnl_segment['pnl_exp_tbl'];
		    $pdf->writeHTML($noi_exp_tbl, true, false, true, false, '');

		    $this->watermark_landscape($pdf);
			$this->header_landscape($pdf);

			/*Monthly NOI Summary - CHOOKS*/

			$pdf->SetMargins(20, 20, 20, true);
			$pdf->AddPage('L');

			$pdf->SetTextColor(0,0,0);

		    $pdf->SetFont('arialb', '', 12);
		    $pdf->Text(20, 30, $pdf_name . ' ' . $report_type);
		    $pdf->Text(20, 36, 'MONTHLY NOI SUMMARY - CHOOKS DINE IN');
		    $pdf->Text(20, 42, 'Budget ' . $year);
		    $pdf->Text(20, 48, '(In Thousands)');

		    $pdf->SetFont('arial', '', 8);

		    
		    $noi_chooks_tbl = $pnl_segment['pnl_chk_tbl'];
		    $pdf->writeHTML($noi_chooks_tbl, true, false, true, false, '');

		    $this->watermark_landscape($pdf);
			$this->header_landscape($pdf);

			/*Monthly Selling Price Page*/

			$pdf->SetMargins(20, 20, 20, true);
			$pdf->AddPage('L');

			$pdf->SetTextColor(0,0,0);

		    $pdf->setFont('arialb', '', 12);
		    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
		    $pdf->Text(20, 46, 'MONTHLY SELLING PRICES');
		    $pdf->Text(20, 52, 'Budget ' . $year);
		    /*$pdf->Text(20, 58, '(In Thousands)');*/

		    $pdf->SetFont('arial', '', 8);

		    $get_price_assumption = $this->price_assumption_report_pdf($trans_id, $pdf, $year, $pdf_name, $report_type);
		}
	    
	
		/*COMPARATIVE OPERATING EXPENSES PER COST CENTER Page*/

		$pdf->AddPage('L');

		$pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
	    $pdf->Text(20, 46, 'COMPARATIVE OPERATING EXPENSES PER COST CENTER');
	    $pdf->Text(20, 52, 'Budget ' . $year);

	    $pdf->SetFont('arial', '', 8);

	    $opex_cost_center_tbl = $this->opex_per_cost_center_pdf($trans_id, $year, $sales_unit, $sales_unit1, $sales_unit2, $type, $trans_unit_id);
		$pdf->writeHTML($opex_cost_center_tbl, true, false, true, false, '');


		/*COMPARATIVE OPERATING EXPENSES PER ACCOUNT Page*/

		$pdf->AddPage('L');

		$pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
	    $pdf->Text(20, 46, 'COMPARATIVE OPERATING EXPENSES PER ACCOUNT');
	    $pdf->Text(20, 52, 'Budget ' . $year);

	    $pdf->SetFont('arial', '', 8);

	    $get_opex_account = $this->opex_gl_report_pdf($trans_id, $year, $pdf, $pdf_name, $report_type, $type, $trans_unit_id);


	    $this->watermark_landscape($pdf);
		$this->header_landscape($pdf);

		/*CAPITAL EXPENDITURES SUMMARY PER CATEGORY Page*/

		$pdf->AddPage('P');

		$pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);


	    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
	    $pdf->Text(20, 46, 'CAPITAL EXPENDITURES SUMMARY PER CATEGORY');
	    $pdf->Text(20, 52, 'Budget ' . $year);

	    $pdf->SetFont('arial', '', 8);

	    $capex_category_tbl = $this->capex_group_report_pdf($trans_id, $year, $type, $trans_unit_id);
	    $pdf->writeHTML($capex_category_tbl, true, false, true, false, '');


	    $this->watermark($pdf);
		$this->header($pdf);

		/*CAPITAL EXPENDITURES Page*/

		$pdf->AddPage('P');

		$pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
	    $pdf->Text(20, 46, 'CAPITAL EXPENDITURES');
	    $pdf->Text(20, 52, 'Budget ' . $year);

	    $pdf->SetFont('arial', '', 10);

	    $get_capex = $this->capex_item_report_pdf($trans_id, $year, $pdf, $pdf_name, $report_type, $type, $trans_unit_id);
	    

		/*CAPITAL EXPENDITURES Page*/

		$pdf->AddPage();

		$pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
	    $pdf->Text(20, 46, 'MANPOWER SUMMARY');
	    $pdf->Text(20, 52, 'Budget ' . $year);

	    $pdf->SetFont('arial', '', 8);


	    $manpower_tbl = $this->manpower_report_pdf($trans_id, $year, $type, $trans_unit_id);

	    $pdf->writeHTML($manpower_tbl, true, false, true, false, '');

	    $this->watermark($pdf);
		$this->header($pdf);

	    //$this->footer($pdf);

	    

	    //$this->header($pdf);
	    //$this->footer($pdf);

   		$pdf->Output('BAVI Budgeting 2022' . date('Y/m/d'). '.pdf', 'I');	
	}

	public function header($pdf) {
		$image_file = 'assets/img/ctgi-logo-2.png';
        $pdf->setJPEGQuality(100);
	    $pdf->SetLineStyle(array('width' => 1, 'cap' => 'butt', 'join' => 'miter', 'dash' => 0, 'color' => array(255,255,255)));
	    $pdf->Image($image_file, 145, 10, 50, 14.31, 'PNG', '', '', true, 150, '', false, false, 1, false, false, false);
        // Set font
        
        // Page number
        
    }

    public function header_landscape($pdf) {
		// $image_file = 'assets/img/bavi-logo.png';
		$image_file = 'assets/img/ctgi-logo-2.png';
        $pdf->setJPEGQuality(100);
	    $pdf->SetLineStyle(array('width' => 1, 'cap' => 'butt', 'join' => 'miter', 'dash' => 0, 'color' => array(255,255,255)));
	    $pdf->Image($image_file, 230, 10, 50, 14.31, 'PNG', '', '', true, 150, '', false, false, 1, false, false, false);
        // Set font
        
        // Page number
        
    }

    public function footer($pdf) {
        // Position at 15 mm from bottom
        // Set font
    }

    public function watermark($pdf){
    	// get the current page break margin
		$bMargin = $pdf->getBreakMargin();
		// get current auto-page-break mode
		$auto_page_break = $pdf->getAutoPageBreak();
		// disable auto-page-break
		$pdf->SetAutoPageBreak(false, 0);
		// set bacground image
		$img_file = 'assets/img/confidential.png';
		$pdf->Image($img_file, 10, 50, '', '', '', '', '', false, 300, '', false, false, 0);
		// restore auto-page-break status
		$pdf->SetAutoPageBreak($auto_page_break, $bMargin);
		// set the starting point for the page content
		$pdf->setPageMark();
    }

    public function watermark_landscape($pdf){
    	// get the current page break margin
		$bMargin = $pdf->getBreakMargin();
		// get current auto-page-break mode
		$auto_page_break = $pdf->getAutoPageBreak();
		// disable auto-page-break
		$pdf->SetAutoPageBreak(false, 0);
		// set bacground image
		$img_file = 'assets/img/confidential.png';
		$pdf->Image($img_file, 50, 50, '', '', '', '', '', false, 300, '', false, false, 0);
		// restore auto-page-break status
		$pdf->SetAutoPageBreak($auto_page_break, $bMargin);
		// set the starting point for the page content
		$pdf->setPageMark();
    }

    public function get_noi_monthly_data($trans_id, $cost_center_id){
		// MONTHLY NOI SUMMARY

    	$where_pnl_month = 'dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_month_bc_summary_status = 1';
    	$select_pnl_month = 'SUM(dashboard_month_bc_summary_sales_unit) as dashboard_month_bc_summary_sales_unit, SUM(dashboard_month_bc_summary_net_sales) as dashboard_month_bc_summary_net_sales, SUM(dashboard_month_bc_summary_variable_cost) as dashboard_month_bc_summary_variable_cost, SUM(dashboard_month_bc_summary_period_cost) as dashboard_month_bc_summary_period_cost, dashboard_month_bc_summary_date';
    	$group_pnl_month = 'dashboard_month_bc_summary_date';
	    $get_pnl_month = $this->admin->get_data('dashboard_month_bc_summary_tbl', $where_pnl_month, FALSE, $select_pnl_month,'dashboard_month_bc_summary_date ASC', $group_pnl_month);

	    $sales_unit_td = '';
	    $nsp_unit_td = '';

	    $net_sales_td = '';

	    $variable_cost_td = '';
	    $variable_cost_unit_td = '';

	    $margin_td = '';
	    $margin_unit_td = '';
	    $margin_percent_td = '';

	    $period_cost_td = '';
	    $period_cost_unit_td = '';
	    $period_cost_percent_td = '';

	    $noi_td = '';
	    $noi_unit_td = '';
	    $noi_percent_td = '';

	    $count = 1;
	    $sales_unit = 0;;
	    $net_sales = 0;
	    $variable_cost = 0;
	    $period_cost = 0;
	    foreach($get_pnl_month as $row_pnl){

	    	$pnl_month_date = $row_pnl->dashboard_month_bc_summary_date;

	    	$sales_unit_month = $row_pnl->dashboard_month_bc_summary_sales_unit;
	    	$sales_unit += $sales_unit_month;
	    	$sales_unit_arr[$count] = $sales_unit_month;

	    	$net_sales_month = $row_pnl->dashboard_month_bc_summary_net_sales;
	    	$net_sales += $net_sales_month;
	    	$net_sales_arr[$count] = $net_sales_month;

	    	$variable_cost_month = $row_pnl->dashboard_month_bc_summary_variable_cost;
	    	$variable_cost += $variable_cost_month;
	    	$variable_cost_arr[$count] = $variable_cost_month;

	    	$variable_cost_unit_month = $sales_unit_month > 0 ? $variable_cost_month / $sales_unit_month : 0;

	    	$nsp_unit_month = $sales_unit_month > 0 ? $net_sales_month / $sales_unit_month : 0;

	    	$margin_month = $net_sales_month - $variable_cost_month;
	    	$margin_unit_month = $sales_unit_month > 0 ? $margin_month / $sales_unit_month : 0;
	    	$margin_percent_month = $net_sales_month > 0 ? ($margin_month / $net_sales_month) * 100 : 0;

	    	$other_expense_month = 0;

	    	
	    	$where_pnl_period_cost = 'cost_center_id IN (' . $cost_center_id . ') AND dashboard_bc_trans_id IN (' . $trans_id  . ') AND dashboard_opex_date = "' . $pnl_month_date . '" AND dashboard_opex_status = 1';
	    	$select_pnl_period_cost = 'SUM(dashboard_opex_amount) as period_cost_month';
	    	$check_pnl_period_cost = $this->admin->check_data('dashboard_opex_tbl', $where_pnl_period_cost, TRUE, $select_pnl_period_cost);

	    	$period_cost_month = 0;
	    	if($check_pnl_period_cost['result'] == TRUE){
	    		$period_cost_month = $check_pnl_period_cost['info']->period_cost_month;
	    		$period_cost += $period_cost_month;
	    	}

	    	$period_cost_arr[$count] = $period_cost_month;

	    	$period_cost_unit_month = $sales_unit_month > 0 ? $period_cost_month / $sales_unit_month : 0;
	    	$period_cost_percent_month = $net_sales_month > 0 ? ($period_cost_month / $net_sales_month) * 100 : 0;

	    	$noi_month = $margin_month - $period_cost_month - $other_expense_month;
	    	$noi_unit_month = $sales_unit_month > 0 ? ($noi_month / $sales_unit_month) : 0;
	    	$noi_percent_month = $net_sales_month > 0 ? ($noi_month / $net_sales_month) * 100 : 0;

	    	
	    	$sales_unit_td .= '<td align="right">' . number_format($sales_unit_month/1000) . '</td>';

	    	$net_sales_td .= '<td align="right">' . number_format($net_sales_month/1000) . '</td>';

	    	$nsp_unit_td .= '<td align="right">' . number_format($nsp_unit_month, 2) . '</td>';

	    	$variable_cost_td .= '<td align="right">' . number_format($variable_cost_month/1000) . '</td>';

	    	$variable_cost_unit_td .= '<td align="right">' . number_format($variable_cost_unit_month, 2) . '</td>';

	    	$margin_td .= '<td align="right">' . number_format($margin_month/1000) . '</td>';
	    	$margin_unit_td .= '<td align="right">' . number_format($margin_unit_month, 2) . '</td>';
	    	$margin_percent_td .= '<td align="right">' . number_format($margin_percent_month) . '%</td>';

	    	$period_cost_td .= '<td align="right">' . number_format($period_cost_month/1000) . '</td>';
	    	$period_cost_unit_td .= '<td align="right">' . number_format($period_cost_unit_month, 2) . '</td>';
	    	$period_cost_percent_td .= '<td align="right">' . number_format($period_cost_percent_month) . '%</td>';

	    	$noi_td .= '<td align="right">' . number_format($noi_month/1000) . '</td>';
	    	$noi_unit_td .= '<td align="right">' . number_format($noi_unit_month, 2) . '</td>';
	    	$noi_percent_td .= '<td align="right">' . number_format($noi_percent_month) . '%</td>';

	    	$count++;
	    }

	    $nsp = $sales_unit > 0 ? $net_sales/$sales_unit : 0;
	    $variable_cost_unit = $sales_unit > 0 ? $variable_cost / $sales_unit : 0;
	    $margin = $net_sales - $variable_cost;
	    $margin_unit = $sales_unit > 0 ?  $margin / $sales_unit : 0;
	    $margin_percent = $net_sales > 0 ? ($margin / $net_sales) * 100 : 0;
	    $period_cost_unit = $sales_unit > 0 ? $period_cost / $sales_unit : 0;
	    $others = 0;
	    $noi = $margin - $period_cost - $others;
	    $noi_unit = $sales_unit > 0 ? ($noi / $sales_unit) : 0;
		$noi_percent = $net_sales > 0 ? ($noi / $net_sales) * 100 : 0;
	    $pnl_monthly_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center"></th>
	    			<th align="center"><strong>TOTAL</strong></th>
	    			<th align="center"><strong>JAN</strong></th>
	    			<th align="center"><strong>FEB</strong></th>
	    			<th align="center"><strong>MAR</strong></th>
	    			<th align="center"><strong>APR</strong></th>
	    			<th align="center"><strong>MAY</strong></th>
	    			<th align="center"><strong>JUN</strong></th>
	    			<th align="center"><strong>JUL</strong></th>
	    			<th align="center"><strong>AUG</strong></th>
	    			<th align="center"><strong>SEP</strong></th>
	    			<th align="center"><strong>OCT</strong></th>
	    			<th align="center"><strong>NOV</strong></th>
	    			<th align="center"><strong>DEC</strong></th>
	    		</tr>

	    		<tr>
	    			<td align="">Sales Volume, in Unit</td>
	    			<td align="right">' . number_format($sales_unit/1000) . '</td>
	    			' . $sales_unit_td . '
	    		</tr>

	    		<tr>
	    			<td align="">NET SALES</td>
	    			<td align="right">' . number_format($net_sales/1000) . '</td>
	    			' . $net_sales_td . '
	    		</tr>

	    		<tr>
	    			<td align="">NSP per Unit</td>
	    			<td align="right">' . number_format($nsp, 2) . '</td>
	    			' . $nsp_unit_td . '
	    		</tr>

	    		<tr>
	    			<td align="">Variable Cost</td>
	    			<td align="right">' . number_format($variable_cost/1000) . '</td>
	    			' . $variable_cost_td . '
	    		</tr>

	    		<tr>
	    			<td align="">Var. Cost/Unit</td>
	    			<td align="right">' . number_format($variable_cost_unit, 2) . '</td>
	    			' . $variable_cost_unit_td . '
	    		</tr>

	    		<tr>
	    			<td align="">Contribution Margin</td>
	    			<td align="right">' . number_format($margin/1000) . '</td>
	    			' . $margin_td . '
	    		</tr>

	    		<tr>
	    			<td align="">CM Per Unit</td>
	    			<td align="right">' . number_format($margin_unit, 2) . '</td>
	    			' . $margin_unit_td . '
	    		</tr>

	    		<tr>
	    			<td align="">CM (%)</td>
	    			<td align="right">' . number_format($margin_percent) . '%</td>
	    			' . $margin_percent_td . '
	    		</tr>

	    		<tr>
	    			<td align="">Period Cost</td>
	    			<td align="right">' . number_format($period_cost/1000) . '</td>
	    			' . $period_cost_td . '
	    		</tr>

	    		<tr>
	    			<td align="">Period Cost/Unit</td>
	    			<td align="right">' . number_format($period_cost_unit, 2) . '</td>
	    			' . $period_cost_unit_td . '
	    		</tr>

	    		<tr>
	    			<td align="">Other Income/Expenses</td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    		</tr>

	    		<tr>
	    			<td align="">Others - Per Unit</td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    			<td align="center"></td>
	    		</tr>

	    		<tr>
	    			<td align="">NOI</td>
	    			<td align="right">' . number_format($noi/1000) . '</td>
	    			' . $noi_td . '
	    		</tr>

	    		<tr>
	    			<td align="">NOI per unit</td>
	    			<td align="right">' . number_format($noi_unit, 2) . '</td>
	    			' . $noi_unit_td . '
	    		</tr>

	    		<tr>
	    			<td align="">% NOI to Net Sales</td>
	    			<td align="right">' . number_format($noi_percent) . '%</td>
	    			' . $noi_percent_td . '
	    		</tr>
	    	</table>
	    ';
	    return $pnl_monthly_tbl;
    }

    public function get_noi_segment_monthly_data($trans_id, $cost_center_id, $year, $get_noi){
    	$select_summary = 'SUM(dashboard_brand_summary_sales_unit) as sales_unit, SUM(dashboard_brand_summary_net_sales) as net_sales, SUM(dashboard_brand_summary_variable_cost) as variable_cost';

	    $get_brand_summary_com = $this->admin->check_data('dashboard_brand_summary_tbl', 'brand_id IN (2, 10, 11, 12, 14, 16, 17, 18) AND dashboard_bc_trans_id IN (' . $trans_id . ')  AND dashboard_brand_summary_status = 1', TRUE, $select_summary);

	    $com_net_sales = 0;
	    $com_variable_cost = 0;
	    $com_sales_unit = 0;
	    $com_nsp = 0;
	    $com_variable_unit = 0;
	    $com_margin = 0;
	    $com_margin_unit = 0;
	    $com_margin_percent = 0;

	    if($get_brand_summary_com['result'] == TRUE){
	    	$com_net_sales = $get_brand_summary_com['info']->net_sales;
	    	$com_sales_unit = $get_brand_summary_com['info']->sales_unit;
	    	$com_variable_cost = $get_brand_summary_com['info']->variable_cost;
	    	$com_nsp = $com_sales_unit > 0 ? $com_net_sales / $com_sales_unit : 0;
	    	$com_variable_unit = $com_sales_unit > 0 ? $com_variable_cost / $com_sales_unit : 0;
	    	$com_margin = $com_net_sales - $com_variable_cost;
	    	$com_margin_unit = $com_sales_unit > 0 ?  $com_margin / $com_sales_unit : 0;
	    	$com_margin_percent = $com_net_sales > 0 ? ($com_margin / $com_net_sales) * 100 : 0;
	    }

	    $select_summary_period = 'SUM(dashboard_opex_amount) as total_period_cost';

	    $where_brand_period_com = 'cost_center_group_id = 1 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_opex_status = 1';
	    $get_brand_period_com = $this->admin->check_data('dashboard_opex_tbl', $where_brand_period_com, TRUE, $select_summary_period);

	    $com_period = 0;
	    $com_period_unit = 0;
	    if($get_brand_period_com['result'] == TRUE){

	    	//Get COM Allocation Period Cost
		    $com_allocation = $this->_get_segment_allocation($trans_id, 1, $year);
		    //$com_allocation = 0;

	    	$com_period = $get_brand_period_com['info']->total_period_cost + ($com_allocation);
	    	$com_period_unit = $com_sales_unit > 0 ?  $com_period / $com_sales_unit : 0;
	    }

	    $com_noi = $com_margin - $com_period;
	    $com_noi_unit = $com_sales_unit > 0 ? $com_noi / $com_sales_unit: 0;
	    $com_noi_percent = $com_net_sales > 0 ? ($com_noi / $com_net_sales) * 100 : 0;
	    $where_brand_summary_ctg = 'brand_id = 1 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_brand_summary_status = 1';
	    $get_brand_summary_ctg = $this->admin->check_data('dashboard_brand_summary_tbl', $where_brand_summary_ctg, TRUE, $select_summary);

	    $ctg_net_sales = 0;
	    $ctg_variable_cost = 0;
	    $ctg_sales_unit = 0;
	    $ctg_nsp = 0;
	    $ctg_variable_unit = 0;
	    $ctg_margin = 0;
	    $ctg_margin_unit = 0;
	    $ctg_margin_percent = 0;
	    if($get_brand_summary_ctg['result'] == TRUE){
	    	$ctg_net_sales = $get_brand_summary_ctg['info']->net_sales;
	    	$ctg_sales_unit = $get_brand_summary_ctg['info']->sales_unit;
	    	$ctg_variable_cost = $get_brand_summary_ctg['info']->variable_cost;
	    	$ctg_nsp = $ctg_sales_unit > 0 ? $ctg_net_sales / $ctg_sales_unit : 0;
	    	$ctg_variable_unit = $ctg_sales_unit > 0 ? $ctg_variable_cost / $ctg_sales_unit : 0;
	    	$ctg_margin = $ctg_net_sales - $ctg_variable_cost;
	    	$ctg_margin_unit = $ctg_sales_unit > 0 ?  $ctg_margin / $ctg_sales_unit : 0;
	    	$ctg_margin_percent = $ctg_net_sales > 0 ? ($ctg_margin / $ctg_net_sales) * 100 : 0;
	    }

	    $where_brand_period_ctg = 'cost_center_group_id = 2 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_opex_status = 1';
	    $get_brand_period_ctg = $this->admin->check_data('dashboard_opex_tbl', $where_brand_period_ctg, TRUE, $select_summary_period);

	    $ctg_period = 0;
	    $ctg_period_unit = 0;
	    if($get_brand_period_ctg['result'] == TRUE){

	    	$ctg_allocation = $this->_get_segment_allocation($trans_id, 2, $year);
	    	//$ctg_allocation = 0;

	    	$ctg_period = $get_brand_period_ctg['info']->total_period_cost + ($ctg_allocation);
	    	$ctg_period_unit = $ctg_sales_unit > 0 ?  $ctg_period / $ctg_sales_unit : 0;
	    }

	    $ctg_noi = $ctg_margin - $ctg_period;
	    $ctg_noi_unit = $ctg_sales_unit > 0 ? $ctg_noi / $ctg_sales_unit: 0;
	    $ctg_noi_percent = $ctg_net_sales > 0 ? ($ctg_noi / $ctg_net_sales) * 100 : 0;

	    $where_brand_summary_ur = 'brand_id = 5 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_brand_summary_status = 1';
	    $get_brand_summary_ur = $this->admin->check_data('dashboard_brand_summary_tbl', $where_brand_summary_ur, TRUE, $select_summary);

	    $ur_net_sales = 0;
	    $ur_sales_unit = 0;
	    $ur_variable_cost = 0;
	    $ur_nsp = 0;
	    $ur_variable_unit = 0;
	    $ur_margin = 0;
	    $ur_margin_unit = 0;
	    $ur_margin_percent = 0;
	    if($get_brand_summary_ur['result'] == TRUE){
	    	$ur_net_sales = $get_brand_summary_ur['info']->net_sales;
	    	$ur_sales_unit = $get_brand_summary_ur['info']->sales_unit;
	    	$ur_variable_cost = $get_brand_summary_ur['info']->variable_cost;
	    	$ur_nsp = $ur_sales_unit > 0 ? $ur_net_sales / $ur_sales_unit : 0;
	    	$ur_variable_unit = $ur_sales_unit > 0 ? $ur_variable_cost / $ur_sales_unit : 0;
	    	$ur_margin = $ur_net_sales - $ur_variable_cost;
	    	$ur_margin_unit = $ur_sales_unit > 0 ?  $ur_margin / $ur_sales_unit : 0;
	    	$ur_margin_percent = $ur_net_sales > 0 ? ($ur_margin / $ur_net_sales) * 100 : 0;
	    }

	    $where_brand_period_ur = 'cost_center_group_id = 3 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_opex_status = 1';
	    $get_brand_period_ur = $this->admin->check_data('dashboard_opex_tbl', $where_brand_period_ur, TRUE, $select_summary_period);

	    $ur_period = 0;
	    $ur_period_unit = 0;
	    if($get_brand_period_ur['result'] == TRUE){
	    	$ur_allocation = $this->_get_segment_allocation($trans_id, 3, $year);
	    	//$ur_allocation = 0;

	    	$ur_period = $get_brand_period_ur['info']->total_period_cost + ($ur_allocation);
	    	$ur_period_unit = $ur_sales_unit > 0 ?  $ur_period / $ur_sales_unit : 0;
	    }

	    $ur_noi = $ur_margin - $ur_period;
	    $ur_noi_unit = $ur_sales_unit > 0 ? $ur_noi / $ur_sales_unit: 0;
	    $ur_noi_percent = $ur_net_sales > 0 ? ($ur_noi / $ur_net_sales) * 100 : 0;

	    $where_brand_summary_rsl = 'brand_id = 15 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_brand_summary_status = 1';
	    $get_brand_summary_rsl = $this->admin->check_data('dashboard_brand_summary_tbl', $where_brand_summary_rsl, TRUE, $select_summary);

	    $rsl_net_sales = 0;
	    $rsl_sales_unit = 0;
	    $rsl_variable_cost = 0;
	    $rsl_nsp = 0;
	    $rsl_variable_unit = 0;
	    $rsl_margin = 0;
	    $rsl_margin_unit = 0;
	    $rsl_margin_percent = 0;
	    if($get_brand_summary_rsl['result'] == TRUE){
	    	$rsl_net_sales = $get_brand_summary_rsl['info']->net_sales;
	    	$rsl_sales_unit = $get_brand_summary_rsl['info']->sales_unit;
	    	$rsl_variable_cost = $get_brand_summary_rsl['info']->variable_cost;
	    	$rsl_nsp = $rsl_sales_unit > 0 ? $rsl_net_sales / $rsl_sales_unit : 0;
	    	$rsl_variable_unit = $rsl_sales_unit > 0 ? $rsl_variable_cost / $rsl_sales_unit : 0;
	    	$rsl_margin = $rsl_net_sales - $rsl_variable_cost;
	    	$rsl_margin_unit = $rsl_sales_unit > 0 ?  $rsl_margin / $rsl_sales_unit : 0;
	    	$rsl_margin_percent = $rsl_net_sales > 0 ? ($rsl_margin / $rsl_net_sales) * 100 : 0;
	    }

	    $where_brand_period_rsl = 'cost_center_group_id = 7 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_opex_status = 1';
	    $get_brand_period_rsl = $this->admin->check_data('dashboard_opex_tbl', $where_brand_period_rsl, TRUE, $select_summary_period);

	    $rsl_period = 0;
	    $rsl_period_unit = 0;
	    if($get_brand_period_rsl['result'] == TRUE){
	    	$rsl_allocation = $this->_get_segment_allocation($trans_id, 7, $year);
	    	//$rsl_allocation = 0;

	    	$rsl_period = $get_brand_period_rsl['info']->total_period_cost + ($rsl_allocation);
	    	$rsl_period_unit = $rsl_sales_unit > 0 ?  $rsl_period / $rsl_sales_unit : 0;
	    }

	    $rsl_noi = $rsl_margin - $rsl_period;
	    $rsl_noi_unit = $rsl_sales_unit > 0 ? $rsl_noi / $rsl_sales_unit: 0;
	    $rsl_noi_percent = $rsl_net_sales > 0 ? ($rsl_noi / $rsl_net_sales) * 100 : 0;


	    $where_brand_summary_hei = 'brand_id = 19 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_brand_summary_status = 1';
	    $get_brand_summary_hei = $this->admin->check_data('dashboard_brand_summary_tbl', $where_brand_summary_hei, TRUE, $select_summary);

	    $hei_net_sales = 0;
	    $hei_variable_cost = 0;
	    $hei_sales_unit = 0;
	    $hei_nsp = 0;
	    $hei_variable_unit = 0;
	    $hei_margin = 0;
	    $hei_margin_unit = 0;
	    $hei_margin_percent = 0;
	    if($get_brand_summary_hei['result'] == TRUE){
	    	$hei_net_sales = $get_brand_summary_hei['info']->net_sales;
	    	$hei_sales_unit = $get_brand_summary_hei['info']->sales_unit;
	    	$hei_variable_cost = $get_brand_summary_hei['info']->variable_cost;
	    	$hei_nsp = $hei_sales_unit > 0 ? $hei_net_sales / $hei_sales_unit : 0;
	    	$hei_variable_unit = $hei_sales_unit > 0 ? $hei_variable_cost / $hei_sales_unit : 0;
	    	$hei_margin = $hei_net_sales - $hei_variable_cost;
	    	$hei_margin_unit = $hei_sales_unit > 0 ?  $hei_margin / $hei_sales_unit : 0;
	    	$hei_margin_percent = $hei_net_sales > 0 ? ($hei_margin / $hei_net_sales) * 100 : 0;
	    }

	    $where_brand_period_hei = 'cost_center_group_id = 9 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_opex_status = 1';
	    $get_brand_period_hei = $this->admin->check_data('dashboard_opex_tbl', $where_brand_period_hei, TRUE, $select_summary_period);

	    $hei_period = 0;
	    $hei_period_unit = 0;
	    if($get_brand_period_hei['result'] == TRUE){

	    	$hei_allocation = $this->_get_segment_allocation($trans_id, 9, $year);
	    	//$ctg_allocation = 0;

	    	$hei_period = $get_brand_period_hei['info']->total_period_cost + ($hei_allocation);
	    	$hei_period_unit = $hei_sales_unit > 0 ?  $hei_period / $hei_sales_unit : 0;
	    }

	    $hei_noi = $hei_margin - $hei_period;
	    $hei_noi_unit = $hei_sales_unit > 0 ? $hei_noi / $hei_sales_unit: 0;
	    $hei_noi_percent = $hei_net_sales > 0 ? ($hei_noi / $hei_net_sales) * 100 : 0;


		// ADDITIONAL CHOOKS EXPRESS

		$where_brand_summary_exp = 'brand_id = 21 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_brand_summary_status = 1';
	    $get_brand_summary_exp = $this->admin->check_data('dashboard_brand_summary_tbl', $where_brand_summary_exp, TRUE, $select_summary);

	    $exp_net_sales = 0;
	    $exp_variable_cost = 0;
	    $exp_sales_unit = 0;
	    $exp_nsp = 0;
	    $exp_variable_unit = 0;
	    $exp_margin = 0;
	    $exp_margin_unit = 0;
	    $exp_margin_percent = 0;
	    if($get_brand_summary_exp['result'] == TRUE){
	    	$exp_net_sales = $get_brand_summary_exp['info']->net_sales;
	    	$exp_sales_unit = $get_brand_summary_exp['info']->sales_unit;
	    	$exp_variable_cost = $get_brand_summary_exp['info']->variable_cost;
	    	$exp_nsp = $exp_sales_unit > 0 ? $exp_net_sales / $exp_sales_unit : 0;
	    	$exp_variable_unit = $exp_sales_unit > 0 ? $exp_variable_cost / $exp_sales_unit : 0;
	    	$exp_margin = $exp_net_sales - $exp_variable_cost;
	    	$exp_margin_unit = $exp_sales_unit > 0 ?  $exp_margin / $exp_sales_unit : 0;
	    	$exp_margin_percent = $exp_net_sales > 0 ? ($exp_margin / $exp_net_sales) * 100 : 0;
	    }

	    $where_brand_period_exp = 'cost_center_group_id = 11 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_opex_status = 1';
	    $get_brand_period_exp = $this->admin->check_data('dashboard_opex_tbl', $where_brand_period_exp, TRUE, $select_summary_period);

	    $exp_period = 0;
	    $exp_period_unit = 0;
	    if($get_brand_period_exp['result'] == TRUE){

	    	$exp_allocation = $this->_get_segment_allocation($trans_id, 9, $year);
	    	//$ctg_allocation = 0;

	    	$exp_period = $get_brand_period_exp['info']->total_period_cost + ($exp_allocation);
	    	$exp_period_unit = $exp_sales_unit > 0 ?  $exp_period / $exp_sales_unit : 0;
	    }

	    $exp_noi = $exp_margin - $exp_period;
	    $exp_noi_unit = $exp_sales_unit > 0 ? $exp_noi / $exp_sales_unit: 0;
	    $exp_noi_percent = $exp_net_sales > 0 ? ($exp_noi / $exp_net_sales) * 100 : 0;


	    $where_brand_summary_chk = 'brand_id = 20 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_brand_summary_status = 1';
	    $get_brand_summary_chk = $this->admin->check_data('dashboard_brand_summary_tbl', $where_brand_summary_chk, TRUE, $select_summary);

	    $chk_net_sales = 0;
	    $chk_variable_cost = 0;
	    $chk_sales_unit = 0;
	    $chk_nsp = 0;
	    $chk_variable_unit = 0;
	    $chk_margin = 0;
	    $chk_margin_unit = 0;
	    $chk_margin_percent = 0;
	    if($get_brand_summary_chk['result'] == TRUE){
	    	$chk_net_sales = $get_brand_summary_chk['info']->net_sales;
	    	$chk_sales_unit = $get_brand_summary_chk['info']->sales_unit;
	    	$chk_variable_cost = $get_brand_summary_chk['info']->variable_cost;
	    	$chk_nsp = $chk_sales_unit > 0 ? $chk_net_sales / $chk_sales_unit : 0;
	    	$chk_variable_unit = $chk_sales_unit > 0 ? $chk_variable_cost / $chk_sales_unit : 0;
	    	$chk_margin = $chk_net_sales - $chk_variable_cost;
	    	$chk_margin_unit = $chk_sales_unit > 0 ?  $chk_margin / $chk_sales_unit : 0;
	    	$chk_margin_percent = $chk_net_sales > 0 ? ($chk_margin / $chk_net_sales) * 100 : 0;
	    }

	    $where_brand_period_chk = 'cost_center_group_id = 10 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_opex_status = 1';
	    $get_brand_period_chk = $this->admin->check_data('dashboard_opex_tbl', $where_brand_period_chk, TRUE, $select_summary_period);

	    $chk_period = 0;
	    $chk_period_unit = 0;
	    if($get_brand_period_chk['result'] == TRUE){

	    	$chk_allocation = $this->_get_segment_allocation($trans_id, 9, $year);
	    	//$ctg_allocation = 0;

	    	$chk_period = $get_brand_period_chk['info']->total_period_cost + ($chk_allocation);
	    	$chk_period_unit = $chk_sales_unit > 0 ?  $chk_period / $chk_sales_unit : 0;
	    }

	    $chk_noi = $chk_margin - $chk_period;
	    $chk_noi_unit = $chk_sales_unit > 0 ? $chk_noi / $chk_sales_unit: 0;
	    $chk_noi_percent = $chk_net_sales > 0 ? ($chk_noi / $chk_net_sales) * 100 : 0;

	   	$sales_unit = $get_noi['sales_unit'];
	   	$net_sales = $get_noi['net_sales'];
	   	$nsp = $get_noi['nsp'];
	   	$variable_cost = $get_noi['variable_cost'];
	   	$variable_cost_unit = $get_noi['variable_cost_unit'];
	   	$margin = $get_noi['margin'];
	   	$margin_unit = $get_noi['margin_unit'];
	   	$margin_percent = $get_noi['margin_percent'];
	   	$period_cost = $get_noi['period_cost'];
	   	$period_cost_unit = $get_noi['period_cost_unit'];
	   	$noi = $get_noi['noi'];
	   	$noi_unit = $get_noi['noi_unit'];
	   	$noi_percent = $get_noi['noi_percent'];

	   	$variable = $this->_get_variable_cost($trans_id);

	   	$cost_of_sales = $variable['cost_of_sales'];
	   	$cost_of_sales_unit = $sales_unit > 0 ? $cost_of_sales / $sales_unit : 0;
		$factory = $variable['factory'];
		$factory_unit = $sales_unit > 0 ? $factory / $sales_unit : 0;
		$packaging = $variable['packaging'];
		$packaging_unit = $sales_unit > 0 ? $packaging / $sales_unit : 0;
		$light = $variable['light'];
		$light_unit = $sales_unit > 0 ? $light / $sales_unit : 0;
		$lpg = $variable['lpg'];
		$lpg_unit = $sales_unit > 0 ? $lpg / $sales_unit : 0;
		$blast = $variable['blast'];
		$blast_unit = $sales_unit > 0 ? $blast / $sales_unit : 0;
		$freight = $variable['freight'];
		$freight_unit = $sales_unit > 0 ? $freight / $sales_unit : 0;
		$commission = $variable['commission'];
		$commission_unit = $sales_unit > 0 ? $commission / $sales_unit : 0;
		$distribution = $variable['distribution'];
		$distribution_unit = $sales_unit > 0 ? $distribution / $sales_unit : 0;

		$ctg_cost_of_sales = $variable['ctg_cost_of_sales'];
		$ctg_cost_of_sales_unit = $ctg_sales_unit > 0 ? $ctg_cost_of_sales / $ctg_sales_unit : 0;
		$ctg_factory = $variable['ctg_factory'];
		$ctg_factory_unit = $ctg_sales_unit > 0 ? $ctg_factory / $ctg_sales_unit : 0;
		$ctg_packaging = $variable['ctg_packaging'];
		$ctg_packagin_unit = $ctg_sales_unit > 0 ? $ctg_packaging / $ctg_sales_unit : 0;
		$ctg_light = $variable['ctg_light'];
		$ctg_light_unit = $ctg_sales_unit > 0 ? $ctg_light / $ctg_sales_unit : 0;
		$ctg_lpg = $variable['ctg_lpg'];
		$ctg_lpg_unit = $ctg_sales_unit > 0 ? $ctg_lpg / $ctg_sales_unit : 0;
		$ctg_blast = $variable['ctg_blast'];
		$ctg_blast_unit = $ctg_sales_unit > 0 ? $ctg_blast / $ctg_sales_unit : 0;
		$ctg_freight = $variable['ctg_freight'];
		$ctg_freight_unit = $ctg_sales_unit > 0 ? $ctg_freight / $ctg_sales_unit : 0;
		$ctg_commission = $variable['ctg_commission'];
		$ctg_commission_unit = $ctg_sales_unit > 0 ? $ctg_commission / $ctg_sales_unit : 0;
		$ctg_distribution = $variable['ctg_distribution'];
		$ctg_distribution_unit = $ctg_sales_unit > 0 ? $ctg_distribution / $ctg_sales_unit : 0;

		$ur_cost_of_sales = $variable['ur_cost_of_sales'];
		$ur_cost_of_sales_unit = $ur_sales_unit > 0 ? $ur_cost_of_sales / $ur_sales_unit : 0;
		$ur_factory = $variable['ur_factory'];
		$ur_factory_unit = $ur_sales_unit > 0 ? $ur_factory / $ur_sales_unit : 0;
		$ur_packaging = $variable['ur_packaging'];
		$ur_packaging_unit = $ur_sales_unit > 0 ? $ur_packaging / $ur_sales_unit : 0;
		$ur_light = $variable['ur_light'];
		$ur_light_unit = $ur_sales_unit > 0 ? $ur_light / $ur_sales_unit : 0;
		$ur_lpg = $variable['ur_lpg'];
		$ur_lpg_unit = $ur_sales_unit > 0 ? $ur_lpg / $ur_sales_unit : 0;
		$ur_blast = $variable['ur_blast'];
		$ur_blast_unit = $ur_sales_unit > 0 ? $ur_blast / $ur_sales_unit : 0;
		$ur_freight = $variable['ur_freight'];
		$ur_freight_unit = $ur_sales_unit > 0 ? $ur_freight / $ur_sales_unit : 0;
		$ur_commission = $variable['ur_commission'];
		$ur_commission_unit = $ur_sales_unit > 0 ? $ur_commission / $ur_sales_unit : 0;
		$ur_distribution = $variable['ur_distribution'];
		$ur_distribution_unit = $ur_sales_unit > 0 ? $ur_distribution / $ur_sales_unit : 0;

		$rsl_cost_of_sales = $variable['rsl_cost_of_sales'];
		$rsl_cost_of_sales_unit = $rsl_sales_unit > 0 ? $rsl_cost_of_sales / $rsl_sales_unit : 0;
		$rsl_factory = $variable['rsl_factory'];
		$rsl_factory_unit = $rsl_sales_unit > 0 ? $rsl_factory / $rsl_sales_unit : 0;
		$rsl_packaging = $variable['rsl_packaging'];
		$rsl_packging_unit = $rsl_sales_unit > 0 ? $rsl_packaging / $rsl_sales_unit : 0;
		$rsl_light = $variable['rsl_light'];
		$rsl_light_unit = $rsl_sales_unit > 0 ? $rsl_light / $rsl_sales_unit : 0;
		$rsl_lpg = $variable['rsl_lpg'];
		$rsl_lpg_unit = $rsl_sales_unit > 0 ? $rsl_lpg / $rsl_sales_unit : 0;
		$rsl_blast = $variable['rsl_blast'];
		$rsl_blast_unit = $rsl_sales_unit > 0 ? $rsl_blast / $rsl_sales_unit : 0;
		$rsl_freight = $variable['rsl_freight'];
		$rsl_freight_unit = $rsl_sales_unit > 0 ? $rsl_freight / $rsl_sales_unit : 0;
		$rsl_commission = $variable['rsl_commission'];
		$rsl_commission_unit = $rsl_sales_unit > 0 ? $rsl_commission / $rsl_sales_unit : 0;
		$rsl_distribution = $variable['rsl_distribution'];
		$rsl_distribution_unit = $rsl_sales_unit > 0 ? $rsl_distribution / $rsl_sales_unit : 0;

		$hei_cost_of_sales = $variable['hei_cost_of_sales'];
		$hei_cost_of_sales_unit = $hei_sales_unit > 0 ? $hei_cost_of_sales / $hei_sales_unit : 0;
		$hei_factory = $variable['hei_factory'];
		$hei_factory_unit = $hei_sales_unit > 0 ? $hei_factory / $hei_sales_unit : 0;
		$hei_packaging = $variable['hei_packaging'];
		$hei_packging_unit = $hei_sales_unit > 0 ? $hei_packaging / $hei_sales_unit : 0;
		$hei_light = $variable['hei_light'];
		$hei_light_unit = $hei_sales_unit > 0 ? $hei_light / $hei_sales_unit : 0;
		$hei_lpg = $variable['hei_lpg'];
		$hei_lpg_unit = $hei_sales_unit > 0 ? $hei_lpg / $hei_sales_unit : 0;
		$hei_blast = $variable['hei_blast'];
		$hei_blast_unit = $hei_sales_unit > 0 ? $hei_blast / $hei_sales_unit : 0;
		$hei_freight = $variable['hei_freight'];
		$hei_freight_unit = $hei_sales_unit > 0 ? $hei_freight / $hei_sales_unit : 0;
		$hei_commission = $variable['hei_commission'];
		$hei_commission_unit = $hei_sales_unit > 0 ? $hei_commission / $hei_sales_unit : 0;
		$hei_distribution = $variable['hei_distribution'];
		$hei_distribution_unit = $hei_sales_unit > 0 ? $hei_distribution / $hei_sales_unit : 0;
		
		$exp_cost_of_sales = $variable['exp_cost_of_sales'];
		$exp_cost_of_sales_unit = $exp_sales_unit > 0 ? $exp_cost_of_sales / $exp_sales_unit : 0;
		$exp_factory = $variable['exp_factory'];
		$exp_factory_unit = $exp_sales_unit > 0 ? $exp_factory / $exp_sales_unit : 0;
		$exp_packaging = $variable['exp_packaging'];
		$exp_packging_unit = $exp_sales_unit > 0 ? $exp_packaging / $exp_sales_unit : 0;
		$exp_light = $variable['exp_light'];
		$exp_light_unit = $exp_sales_unit > 0 ? $exp_light / $exp_sales_unit : 0;
		$exp_lpg = $variable['exp_lpg'];
		$exp_lpg_unit = $exp_sales_unit > 0 ? $exp_lpg / $exp_sales_unit : 0;
		$exp_blast = $variable['exp_blast'];
		$exp_blast_unit = $exp_sales_unit > 0 ? $exp_blast / $exp_sales_unit : 0;
		$exp_freight = $variable['exp_freight'];
		$exp_freight_unit = $exp_sales_unit > 0 ? $exp_freight / $exp_sales_unit : 0;
		$exp_commission = $variable['exp_commission'];
		$exp_commission_unit = $exp_sales_unit > 0 ? $exp_commission / $exp_sales_unit : 0;
		$exp_distribution = $variable['exp_distribution'];
		$exp_distribution_unit = $exp_sales_unit > 0 ? $exp_distribution / $exp_sales_unit : 0;

		$chk_cost_of_sales = $variable['chk_cost_of_sales'];
		$chk_cost_of_sales_unit = $chk_sales_unit > 0 ? $chk_cost_of_sales / $chk_sales_unit : 0;
		$chk_factory = $variable['chk_factory'];
		$chk_factory_unit = $chk_sales_unit > 0 ? $chk_factory / $chk_sales_unit : 0;
		$chk_packaging = $variable['chk_packaging'];
		$chk_packging_unit = $chk_sales_unit > 0 ? $chk_packaging / $chk_sales_unit : 0;
		$chk_light = $variable['chk_light'];
		$chk_light_unit = $chk_sales_unit > 0 ? $chk_light / $chk_sales_unit : 0;
		$chk_lpg = $variable['chk_lpg'];
		$chk_lpg_unit = $chk_sales_unit > 0 ? $chk_lpg / $chk_sales_unit : 0;
		$chk_blast = $variable['chk_blast'];
		$chk_blast_unit = $chk_sales_unit > 0 ? $chk_blast / $chk_sales_unit : 0;
		$chk_freight = $variable['chk_freight'];
		$chk_freight_unit = $chk_sales_unit > 0 ? $chk_freight / $chk_sales_unit : 0;
		$chk_commission = $variable['chk_commission'];
		$chk_commission_unit = $chk_sales_unit > 0 ? $chk_commission / $chk_sales_unit : 0;
		$chk_distribution = $variable['chk_distribution'];
		$chk_distribution_unit = $chk_sales_unit > 0 ? $chk_distribution / $chk_sales_unit : 0;

	    $pnl_segment_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" rowspan="2" width="15%"></th>
	    			<th align="center" colspan="2" width="14.16%"><strong>TOTAL</strong></th>
	    			<th align="center" colspan="2" width="14.16%"><strong>CTG</strong></th>
	    			<th align="center" colspan="2" width="14.16%"><strong>URL</strong></th>
	    			<th align="center" colspan="2" width="14.16%"><strong>RSL</strong></th>
	    			<th align="center" colspan="2" width="14.16%"><strong>EXP</strong></th>
	    			<th align="center" colspan="2" width="14.16%"><strong>CHK</strong></th>
	    		</tr>

	    		<tr>
	    			<th align="center"><strong>Amount</strong></th>
	    			<th align="center"><strong>/UM</strong></th>
	    			<th align="center"><strong>Amount</strong></th>
	    			<th align="center"><strong>/UM</strong></th>
	    			<th align="center"><strong>Amount</strong></th>
	    			<th align="center"><strong>/UM</strong></th>
	    			<th align="center"><strong>Amount</strong></th>
	    			<th align="center"><strong>/UM</strong></th>
	    			<th align="center"><strong>Amount</strong></th>
	    			<th align="center"><strong>/UM</strong></th>
	    			<th align="center"><strong>Amount</strong></th>
	    			<th align="center"><strong>/UM</strong></th>
	    		</tr>

	    		<tr>
	    			<td>Sales Unit</td>
	    			<td align="right">' . number_format($sales_unit/1000) . '</td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($ctg_sales_unit/1000) . '</td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($ur_sales_unit/1000) . '</td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($rsl_sales_unit/1000) . '</td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($exp_sales_unit/1000) . '</td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($chk_sales_unit/1000) . '</td>
	    			<td align="right"></td>
	    		</tr>

	    		<tr>
	    			<td>Net Sales</td>
	    			<td align="right">' . number_format($net_sales/1000) . '</td>
	    			<td align="right">' . number_format($nsp, 2) . '</td>
	    			<td align="right">' . number_format($ctg_net_sales/1000) . '</td>
	    			<td align="right">' . number_format($ctg_nsp, 2) . '</td>
	    			<td align="right">' . number_format($ur_net_sales/1000) . '</td>
	    			<td align="right">' . number_format($ur_nsp, 2) . '</td>
	    			<td align="right">' . number_format($rsl_net_sales/1000) . '</td>
	    			<td align="right">' . number_format($rsl_nsp, 2) . '</td>
	    			<td align="right">' . number_format($exp_net_sales/1000) . '</td>
	    			<td align="right">' . number_format($exp_nsp, 2) . '</td>
	    			<td align="right">' . number_format($chk_net_sales/1000) . '</td>
	    			<td align="right">' . number_format($chk_nsp, 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Cost of Sales</td>
	    			<td align="right">' . number_format($cost_of_sales/1000) . '</td>
	    			<td align="right">' . number_format($cost_of_sales_unit, 2) . '</td>
	    			<td align="right">' . number_format($ctg_cost_of_sales/1000) . '</td>
	    			<td align="right">' . number_format($ctg_cost_of_sales_unit, 2) . '</td>
	    			<td align="right">' . number_format($ur_cost_of_sales/1000) . '</td>
	    			<td align="right">' . number_format($ur_cost_of_sales_unit, 2) . '</td>
	    			<td align="right">' . number_format($rsl_cost_of_sales/1000) . '</td>
	    			<td align="right">' . number_format($rsl_cost_of_sales_unit, 2) . '</td>
	    			<td align="right">' . number_format($exp_cost_of_sales/1000) . '</td>
	    			<td align="right">' . number_format($exp_cost_of_sales_unit, 2) . '</td>
	    			<td align="right">' . number_format($chk_cost_of_sales/1000) . '</td>
	    			<td align="right">' . number_format($chk_cost_of_sales_unit, 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Factory Supplies</td>
	    			<td align="right">' . number_format($factory/1000) . '</td>
	    			<td align="right">' . number_format($factory_unit, 2) . '</td>
	    			<td align="right">' . number_format($ctg_factory/1000) . '</td>
	    			<td align="right">' . number_format($ctg_factory_unit, 2) . '</td>
	    			<td align="right">' . number_format($ur_factory/1000) . '</td>
	    			<td align="right">' . number_format($ur_factory_unit, 2) . '</td>
	    			<td align="right">' . number_format($rsl_factory/1000) . '</td>
	    			<td align="right">' . number_format($rsl_factory_unit, 2) . '</td>
	    			<td align="right">' . number_format($exp_factory/1000) . '</td>
	    			<td align="right">' . number_format($exp_factory_unit, 2) . '</td>
	    			<td align="right">' . number_format($chk_factory/1000) . '</td>
	    			<td align="right">' . number_format($chk_factory_unit, 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Packaging Supplies</td>
	    			<td align="right">' . number_format($packaging/1000) . '</td>
	    			<td align="right">' . number_format($packaging_unit, 2) . '</td>
	    			<td align="right">' . number_format($ctg_packaging/1000) . '</td>
	    			<td align="right">' . number_format($ctg_packagin_unit, 2) . '</td>
	    			<td align="right">' . number_format($ur_packaging/1000) . '</td>
	    			<td align="right">' . number_format($ur_packaging_unit, 2) . '</td>
	    			<td align="right">' . number_format($rsl_packaging/1000) . '</td>
	    			<td align="right">' . number_format($rsl_packging_unit, 2) . '</td>
	    			<td align="right">' . number_format($exp_packaging/1000) . '</td>
	    			<td align="right">' . number_format($exp_packging_unit, 2) . '</td>
	    			<td align="right">' . number_format($chk_packaging/1000) . '</td>
	    			<td align="right">' . number_format($chk_packging_unit, 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Light and Power</td>
	    			<td align="right">' . number_format($light/1000) . '</td>
	    			<td align="right">' . number_format($light_unit, 2) . '</td>
	    			<td align="right">' . number_format($ctg_light/1000) . '</td>
	    			<td align="right">' . number_format($ctg_light_unit, 2) . '</td>
	    			<td align="right">' . number_format($ur_light/1000) . '</td>
	    			<td align="right">' . number_format($ur_light_unit, 2) . '</td>
	    			<td align="right">' . number_format($rsl_light/1000) . '</td>
	    			<td align="right">' . number_format($rsl_light_unit, 2) . '</td>
	    			<td align="right">' . number_format($exp_light/1000) . '</td>
	    			<td align="right">' . number_format($exp_light_unit, 2) . '</td>
	    			<td align="right">' . number_format($chk_light/1000) . '</td>
	    			<td align="right">' . number_format($chk_light_unit, 2) . '</td>

	    		</tr>

	    		<tr>
	    			<td>LPG</td>
	    			<td align="right">' . number_format($lpg/1000) . '</td>
	    			<td align="right">' . number_format($lpg_unit, 2) . '</td>
	    			<td align="right">' . number_format($ctg_lpg/1000) . '</td>
	    			<td align="right">' . number_format($ctg_lpg_unit, 2) . '</td>
	    			<td align="right">' . number_format($ur_lpg/1000) . '</td>
	    			<td align="right">' . number_format($ur_lpg_unit, 2) . '</td>
	    			<td align="right">' . number_format($rsl_lpg/1000) . '</td>
	    			<td align="right">' . number_format($rsl_lpg_unit, 2) . '</td>
	    			<td align="right">' . number_format($exp_lpg/1000) . '</td>
	    			<td align="right">' . number_format($exp_lpg_unit, 2) . '</td>
	    			<td align="right">' . number_format($chk_lpg/1000) . '</td>
	    			<td align="right">' . number_format($chk_lpg_unit, 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Blastfreezing</td>
	    			<td align="right">' . number_format($blast/1000) . '</td>
	    			<td align="right">' . number_format($blast_unit, 2) . '</td>
	    			<td align="right">' . number_format($ctg_blast/1000) . '</td>
	    			<td align="right">' . number_format($ctg_blast_unit, 2) . '</td>
	    			<td align="right">' . number_format($ur_blast/1000) . '</td>
	    			<td align="right">' . number_format($ur_blast_unit, 2) . '</td>
	    			<td align="right">' . number_format($rsl_blast/1000) . '</td>
	    			<td align="right">' . number_format($rsl_blast_unit, 2) . '</td>
	    			<td align="right">' . number_format($exp_blast/1000) . '</td>
	    			<td align="right">' . number_format($exp_blast_unit, 2) . '</td>
	    			<td align="right">' . number_format($chk_blast/1000) . '</td>
	    			<td align="right">' . number_format($chk_blast_unit, 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Sales Commission</td>
	    			<td align="right">' . number_format($commission/1000) . '</td>
	    			<td align="right">' . number_format($commission_unit, 2) . '</td>
	    			<td align="right">' . number_format($ctg_commission/1000) . '</td>
	    			<td align="right">' . number_format($ctg_commission_unit, 2) . '</td>
	    			<td align="right">' . number_format($ur_commission/1000) . '</td>
	    			<td align="right">' . number_format($ur_commission_unit, 2) . '</td>
	    			<td align="right">' . number_format($rsl_commission/1000) . '</td>
	    			<td align="right">' . number_format($rsl_commission_unit, 2) . '</td>
	    			<td align="right">' . number_format($exp_commission/1000) . '</td>
	    			<td align="right">' . number_format($exp_commission_unit, 2) . '</td>
	    			<td align="right">' . number_format($chk_commission/1000) . '</td>
	    			<td align="right">' . number_format($chk_commission_unit, 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Distribution</td>
	    			<td align="right">' . number_format($distribution/1000) . '</td>
	    			<td align="right">' . number_format($distribution_unit, 2) . '</td>
	    			<td align="right">' . number_format($ctg_distribution/1000) . '</td>
	    			<td align="right">' . number_format($ctg_distribution_unit, 2) . '</td>
	    			<td align="right">' . number_format($ur_distribution/1000) . '</td>
	    			<td align="right">' . number_format($ur_distribution_unit, 2) . '</td>
	    			<td align="right">' . number_format($rsl_distribution/1000) . '</td>
	    			<td align="right">' . number_format($rsl_distribution_unit, 2) . '</td>
	    			<td align="right">' . number_format($exp_distribution/1000) . '</td>
	    			<td align="right">' . number_format($exp_distribution_unit, 2) . '</td>
	    			<td align="right">' . number_format($chk_distribution/1000) . '</td>
	    			<td align="right">' . number_format($chk_distribution_unit, 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Total Variable Cost</td>
	    			<td align="right">' . number_format($variable_cost/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost_unit, 2) . '</td>
	    			<td align="right">' . number_format($ctg_variable_cost/1000) . '</td>
	    			<td align="right">' . number_format($ctg_variable_unit, 2) . '</td>
	    			<td align="right">' . number_format($ur_variable_cost/1000) . '</td>
	    			<td align="right">' . number_format($ur_variable_unit, 2) . '</td>
	    			<td align="right">' . number_format($rsl_variable_cost/1000) . '</td>
	    			<td align="right">' . number_format($rsl_variable_unit, 2) . '</td>
	    			<td align="right">' . number_format($exp_variable_cost/1000) . '</td>
	    			<td align="right">' . number_format($exp_variable_unit, 2) . '</td>
	    			<td align="right">' . number_format($chk_variable_cost/1000) . '</td>
	    			<td align="right">' . number_format($chk_variable_unit, 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Contribution Margin</td>
	    			<td align="right">' . number_format($margin/1000) . '</td>
	    			<td align="right">' . number_format($margin_unit, 2) . '</td>
	    			<td align="right">' . number_format($ctg_margin/1000) . '</td>
	    			<td align="right">' . number_format($ctg_margin_unit, 2) . '</td>
	    			<td align="right">' . number_format($ur_margin/1000) . '</td>
	    			<td align="right">' . number_format($ur_margin_unit, 2) . '</td>
	    			<td align="right">' . number_format($rsl_margin/1000) . '</td>
	    			<td align="right">' . number_format($rsl_margin_unit, 2) . '</td>
	    			<td align="right">' . number_format($exp_margin/1000) . '</td>
	    			<td align="right">' . number_format($exp_margin_unit, 2) . '</td>
	    			<td align="right">' . number_format($chk_margin/1000) . '</td>
	    			<td align="right">' . number_format($chk_margin_unit, 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>CM %</td>
	    			<td align="right">' . number_format($margin_percent) . '%</td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($ctg_margin_percent) . '%</td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($ur_margin_percent) . '%</td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($rsl_margin_percent) . '%</td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($exp_margin_percent) . '%</td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($chk_margin_percent) . '%</td>
	    			<td align="right"></td>
	    		</tr>

	    		<tr>
	    			<td>Period Cost</td>
	    			<td align="right">' . number_format($period_cost/1000) . '</td>
	    			<td align="right">' . number_format($period_cost_unit, 2) . '</td>
	    			<td align="right">' . number_format($ctg_period/1000) . '</td>
	    			<td align="right">' . number_format($ctg_period_unit, 2) . '</td>
	    			<td align="right">' . number_format($ur_period/1000) . '</td>
	    			<td align="right">' . number_format($ur_period_unit, 2) . '</td>
	    			<td align="right">' . number_format($rsl_period/1000) . '</td>
	    			<td align="right">' . number_format($rsl_period_unit, 2) . '</td>
	    			<td align="right">' . number_format($exp_period/1000) . '</td>
	    			<td align="right">' . number_format($exp_period_unit, 2) . '</td>
	    			<td align="right">' . number_format($chk_period/1000) . '</td>
	    			<td align="right">' . number_format($chk_period_unit, 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Other Income/Expenses</td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    		</tr>

	    		<tr>
	    			<td>Net Operating Income</td>
	    			<td align="right">' . number_format($noi/1000) . '</td>
	    			<td align="right">' . number_format($noi_unit, 2) . '</td>
	    			<td align="right">' . number_format($ctg_noi/1000) . '</td>
	    			<td align="right">' . number_format($ctg_noi_unit, 2) . '</td>
	    			<td align="right">' . number_format($ur_noi/1000) . '</td>
	    			<td align="right">' . number_format($ur_noi_unit, 2) . '</td>
	    			<td align="right">' . number_format($rsl_noi/1000) . '</td>
	    			<td align="right">' . number_format($rsl_noi_unit, 2) . '</td>
	    			<td align="right">' . number_format($exp_noi/1000) . '</td>
	    			<td align="right">' . number_format($exp_noi_unit, 2) . '</td>
	    			<td align="right">' . number_format($chk_noi/1000) . '</td>
	    			<td align="right">' . number_format($chk_noi_unit, 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>NOI to Sales</td>
	    			<td align="right">' . number_format($noi_percent) . '%</td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($ctg_noi_percent) . '%</td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($ur_noi_percent) . '%</td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($rsl_noi_percent) . '%</td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($exp_noi_percent) . '%</td>
	    			<td align="right"></td>
	    			<td align="right">' . number_format($chk_noi_percent) . '%</td>
	    			<td align="right"></td>
	    		</tr>
	    	</table>

	    ';

	    $com_data['net_sales'] = $com_net_sales;
	    $com_data['variable_cost'] = $com_variable_cost;
	    $com_data['sales_unit'] = $com_sales_unit;
	    $com_data['nsp'] = $com_nsp;
	    $com_data['variable_unit'] = $com_variable_unit;
	    $com_data['margin'] = $com_margin;
	    $com_data['margin_unit'] = $com_margin_unit;
	    $com_data['margin_percent'] = $com_margin_percent;
	    $com_data['period'] = $com_period;
	    $com_data['period_unit'] = $com_sales_unit > 0 ?  $com_period / $com_sales_unit : 0;

	    $com_data['noi'] = $com_margin - $com_period;
	    $com_data['noi_unit'] = $com_sales_unit > 0 ? $com_noi / $com_sales_unit: 0;
	    $com_data['noi_percent'] = $com_net_sales > 0 ? ($com_noi / $com_net_sales) * 100 : 0;

	    $brand_list = '(2, 10, 11, 12, 14, 16, 17)';
	    $cost_group = 1;
	    $noi_com_data = $this->_get_noi_segment_month2($trans_id, $year, $com_data, $brand_list, $cost_center_id, $cost_group);

	    $noi_com_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="10%"><strong>COMMODITY</strong></th>
	    			<th align="center"><strong>TOTAL</strong></th>
	    			<th align="center"><strong>JAN</strong></th>
	    			<th align="center"><strong>FEB</strong></th>
	    			<th align="center"><strong>MAR</strong></th>
	    			<th align="center"><strong>APR</strong></th>
	    			<th align="center"><strong>MAY</strong></th>
	    			<th align="center"><strong>JUN</strong></th>
	    			<th align="center"><strong>JUL</strong></th>
	    			<th align="center"><strong>AUG</strong></th>
	    			<th align="center"><strong>SEP</strong></th>
	    			<th align="center"><strong>OCT</strong></th>
	    			<th align="center"><strong>NOV</strong></th>
	    			<th align="center"><strong>DEC</strong></th>
	    		</tr>

	    		 ' . $noi_com_data . '

	   		</table>
	    ';

	    $ctg_data['net_sales'] = $ctg_net_sales;
	    $ctg_data['variable_cost'] = $ctg_variable_cost;
	    $ctg_data['sales_unit'] = $ctg_sales_unit;
	    $ctg_data['nsp'] = $ctg_nsp;
	    $ctg_data['variable_unit'] = $ctg_variable_unit;
	    $ctg_data['margin'] = $ctg_margin;
	    $ctg_data['margin_unit'] = $ctg_margin_unit;
	    $ctg_data['margin_percent'] = $ctg_margin_percent;
	    $ctg_data['period'] = $ctg_period;
	    $ctg_data['period_unit'] = $ctg_sales_unit > 0 ?  $ctg_period / $ctg_sales_unit : 0;

	    $ctg_data['noi'] = $ctg_margin - $ctg_period;
	    $ctg_data['noi_unit'] = $ctg_sales_unit > 0 ? $ctg_noi / $ctg_sales_unit: 0;
	    $ctg_data['noi_percent'] = $ctg_net_sales > 0 ? ($ctg_noi / $ctg_net_sales) * 100 : 0;

	    $brand_list = '(1)';
	    $cost_group = 2;
	    $noi_ctg_data = $this->_get_noi_segment_month2($trans_id, $year, $ctg_data, $brand_list, $cost_center_id, $cost_group);

	    $noi_ctg_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="10%"><strong>CHOOKS-TO-GO</strong></th>
	    			<th align="center"><strong>TOTAL</strong></th>
	    			<th align="center"><strong>JAN</strong></th>
	    			<th align="center"><strong>FEB</strong></th>
	    			<th align="center"><strong>MAR</strong></th>
	    			<th align="center"><strong>APR</strong></th>
	    			<th align="center"><strong>MAY</strong></th>
	    			<th align="center"><strong>JUN</strong></th>
	    			<th align="center"><strong>JUL</strong></th>
	    			<th align="center"><strong>AUG</strong></th>
	    			<th align="center"><strong>SEP</strong></th>
	    			<th align="center"><strong>OCT</strong></th>
	    			<th align="center"><strong>NOV</strong></th>
	    			<th align="center"><strong>DEC</strong></th>
	    		</tr>

	    		 ' . $noi_ctg_data . '

	   		</table>
	    ';

	    $ur_data['net_sales'] = $ur_net_sales;
	    $ur_data['variable_cost'] = $ur_variable_cost;
	    $ur_data['sales_unit'] = $ur_sales_unit;
	    $ur_data['nsp'] = $ur_nsp;
	    $ur_data['variable_unit'] = $ur_variable_unit;
	    $ur_data['margin'] = $ur_margin;
	    $ur_data['margin_unit'] = $ur_margin_unit;
	    $ur_data['margin_percent'] = $ur_margin_percent;
	    $ur_data['period'] = $ur_period;
	    $ur_data['period_unit'] = $ur_sales_unit > 0 ?  $ur_period / $ur_sales_unit : 0;

	    $ur_data['noi'] = $ur_margin - $ur_period;
	    $ur_data['noi_unit'] = $ur_sales_unit > 0 ? $ur_noi / $ur_sales_unit: 0;
	    $ur_data['noi_percent'] = $ur_net_sales > 0 ? ($ur_noi / $ur_net_sales) * 100 : 0;

	    $brand_list = '(5)';
	    $cost_group = 3;
	    $noi_ur_data = $this->_get_noi_segment_month2($trans_id, $year, $ur_data, $brand_list, $cost_center_id, $cost_group);

	    $noi_ur_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="10%"><strong>ULING ROASTERS</strong></th>
	    			<th align="center"><strong>TOTAL</strong></th>
	    			<th align="center"><strong>JAN</strong></th>
	    			<th align="center"><strong>FEB</strong></th>
	    			<th align="center"><strong>MAR</strong></th>
	    			<th align="center"><strong>APR</strong></th>
	    			<th align="center"><strong>MAY</strong></th>
	    			<th align="center"><strong>JUN</strong></th>
	    			<th align="center"><strong>JUL</strong></th>
	    			<th align="center"><strong>AUG</strong></th>
	    			<th align="center"><strong>SEP</strong></th>
	    			<th align="center"><strong>OCT</strong></th>
	    			<th align="center"><strong>NOV</strong></th>
	    			<th align="center"><strong>DEC</strong></th>
	    		</tr>

	    		 ' . $noi_ur_data . '

	   		</table>
	    ';

	    $rsl_data['net_sales'] = $rsl_net_sales;
	    $rsl_data['variable_cost'] = $rsl_variable_cost;
	    $rsl_data['sales_unit'] = $rsl_sales_unit;
	    $rsl_data['nsp'] = $rsl_nsp;
	    $rsl_data['variable_unit'] = $rsl_variable_unit;
	    $rsl_data['margin'] = $rsl_margin;
	    $rsl_data['margin_unit'] = $rsl_margin_unit;
	    $rsl_data['margin_percent'] = $rsl_margin_percent;
	    $rsl_data['period'] = $rsl_period;
	    $rsl_data['period_unit'] = $rsl_sales_unit > 0 ?  $rsl_period / $rsl_sales_unit : 0;

	    $rsl_data['noi'] = $rsl_margin - $rsl_period;
	    $rsl_data['noi_unit'] = $rsl_sales_unit > 0 ? $rsl_noi / $rsl_sales_unit: 0;
	    $rsl_data['noi_percent'] = $rsl_net_sales > 0 ? ($rsl_noi / $rsl_net_sales) * 100 : 0;

	    $brand_list = '(15)';
	    $cost_group = 7;
	    $noi_rsl_data = $this->_get_noi_segment_month2($trans_id, $year, $rsl_data, $brand_list, $cost_center_id, $cost_group);

	    $noi_rsl_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="10%"><strong>RESELLERS</strong></th>
	    			<th align="center"><strong>TOTAL</strong></th>
	    			<th align="center"><strong>JAN</strong></th>
	    			<th align="center"><strong>FEB</strong></th>
	    			<th align="center"><strong>MAR</strong></th>
	    			<th align="center"><strong>APR</strong></th>
	    			<th align="center"><strong>MAY</strong></th>
	    			<th align="center"><strong>JUN</strong></th>
	    			<th align="center"><strong>JUL</strong></th>
	    			<th align="center"><strong>AUG</strong></th>
	    			<th align="center"><strong>SEP</strong></th>
	    			<th align="center"><strong>OCT</strong></th>
	    			<th align="center"><strong>NOV</strong></th>
	    			<th align="center"><strong>DEC</strong></th>
	    		</tr>

	    		 ' . $noi_rsl_data . '

	   		</table>
	    ';


	    $hei_data['net_sales'] = $hei_net_sales;
	    $hei_data['variable_cost'] = $hei_variable_cost;
	    $hei_data['sales_unit'] = $hei_sales_unit;
	    $hei_data['nsp'] = $hei_nsp;
	    $hei_data['variable_unit'] = $hei_variable_unit;
	    $hei_data['margin'] = $hei_margin;
	    $hei_data['margin_unit'] = $hei_margin_unit;
	    $hei_data['margin_percent'] = $hei_margin_percent;
	    $hei_data['period'] = $hei_period;
	    $hei_data['period_unit'] = $hei_sales_unit > 0 ?  $hei_period / $hei_sales_unit : 0;

	    $hei_data['noi'] = $hei_margin - $hei_period;
	    $hei_data['noi_unit'] = $hei_sales_unit > 0 ? $hei_noi / $hei_sales_unit: 0;
	    $hei_data['noi_percent'] = $hei_net_sales > 0 ? ($hei_noi / $hei_net_sales) * 100 : 0;

	    $brand_list = '(19)';
	    $cost_group = 9;
	    $noi_hei_data = $this->_get_noi_segment_month2($trans_id, $year, $hei_data, $brand_list, $cost_center_id, $cost_group);

	    $noi_hei_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="10%"><strong>HEIHEI</strong></th>
	    			<th align="center"><strong>TOTAL</strong></th>
	    			<th align="center"><strong>JAN</strong></th>
	    			<th align="center"><strong>FEB</strong></th>
	    			<th align="center"><strong>MAR</strong></th>
	    			<th align="center"><strong>APR</strong></th>
	    			<th align="center"><strong>MAY</strong></th>
	    			<th align="center"><strong>JUN</strong></th>
	    			<th align="center"><strong>JUL</strong></th>
	    			<th align="center"><strong>AUG</strong></th>
	    			<th align="center"><strong>SEP</strong></th>
	    			<th align="center"><strong>OCT</strong></th>
	    			<th align="center"><strong>NOV</strong></th>
	    			<th align="center"><strong>DEC</strong></th>
	    		</tr>

	    		 ' . $noi_hei_data . '

	   		</table>
	    ';
	    
		
		$exp_data['net_sales'] = $exp_net_sales;
	    $exp_data['variable_cost'] = $exp_variable_cost;
	    $exp_data['sales_unit'] = $exp_sales_unit;
	    $exp_data['nsp'] = $exp_nsp;
	    $exp_data['variable_unit'] = $exp_variable_unit;
	    $exp_data['margin'] = $exp_margin;
	    $exp_data['margin_unit'] = $exp_margin_unit;
	    $exp_data['margin_percent'] = $exp_margin_percent;
	    $exp_data['period'] = $exp_period;
	    $exp_data['period_unit'] = $exp_sales_unit > 0 ?  $exp_period / $exp_sales_unit : 0;

	    $exp_data['noi'] = $exp_margin - $exp_period;
	    $exp_data['noi_unit'] = $exp_sales_unit > 0 ? $exp_noi / $exp_sales_unit: 0;
	    $exp_data['noi_percent'] = $exp_net_sales > 0 ? ($exp_noi / $exp_net_sales) * 100 : 0;

	    $brand_list = '(21)';
	    $cost_group = 11;
	    $noi_exp_data = $this->_get_noi_segment_month2($trans_id, $year, $exp_data, $brand_list, $cost_center_id, $cost_group);

	    $noi_exp_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="10%"><strong>CHOOKS EXPRESS</strong></th>
	    			<th align="center"><strong>TOTAL</strong></th>
	    			<th align="center"><strong>JAN</strong></th>
	    			<th align="center"><strong>FEB</strong></th>
	    			<th align="center"><strong>MAR</strong></th>
	    			<th align="center"><strong>APR</strong></th>
	    			<th align="center"><strong>MAY</strong></th>
	    			<th align="center"><strong>JUN</strong></th>
	    			<th align="center"><strong>JUL</strong></th>
	    			<th align="center"><strong>AUG</strong></th>
	    			<th align="center"><strong>SEP</strong></th>
	    			<th align="center"><strong>OCT</strong></th>
	    			<th align="center"><strong>NOV</strong></th>
	    			<th align="center"><strong>DEC</strong></th>
	    		</tr>

	    		 ' . $noi_exp_data . '

	   		</table>
	    ';


	    $chk_data['net_sales'] = $chk_net_sales;
	    $chk_data['variable_cost'] = $chk_variable_cost;
	    $chk_data['sales_unit'] = $chk_sales_unit;
	    $chk_data['nsp'] = $chk_nsp;
	    $chk_data['variable_unit'] = $chk_variable_unit;
	    $chk_data['margin'] = $chk_margin;
	    $chk_data['margin_unit'] = $chk_margin_unit;
	    $chk_data['margin_percent'] = $chk_margin_percent;
	    $chk_data['period'] = $chk_period;
	    $chk_data['period_unit'] = $chk_sales_unit > 0 ?  $chk_period / $chk_sales_unit : 0;

	    $chk_data['noi'] = $chk_margin - $chk_period;
	    $chk_data['noi_unit'] = $chk_sales_unit > 0 ? $chk_noi / $chk_sales_unit: 0;
	    $chk_data['noi_percent'] = $chk_net_sales > 0 ? ($chk_noi / $chk_net_sales) * 100 : 0;

	    $brand_list = '(20)';
	    $cost_group = 10;
	    $noi_chk_data = $this->_get_noi_segment_month2($trans_id, $year, $chk_data, $brand_list, $cost_center_id, $cost_group);

	    $noi_chk_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="10%"><strong>CHOOKS DINE IN</strong></th>
	    			<th align="center"><strong>TOTAL</strong></th>
	    			<th align="center"><strong>JAN</strong></th>
	    			<th align="center"><strong>FEB</strong></th>
	    			<th align="center"><strong>MAR</strong></th>
	    			<th align="center"><strong>APR</strong></th>
	    			<th align="center"><strong>MAY</strong></th>
	    			<th align="center"><strong>JUN</strong></th>
	    			<th align="center"><strong>JUL</strong></th>
	    			<th align="center"><strong>AUG</strong></th>
	    			<th align="center"><strong>SEP</strong></th>
	    			<th align="center"><strong>OCT</strong></th>
	    			<th align="center"><strong>NOV</strong></th>
	    			<th align="center"><strong>DEC</strong></th>
	    		</tr>

	    		 ' . $noi_chk_data . '

	   		</table>
	    ';

	    $data['pnl_segment_tbl'] = $pnl_segment_tbl;
	    $data['pnl_com_tbl'] = $noi_com_tbl;
	    $data['pnl_ctg_tbl'] = $noi_ctg_tbl;
	    $data['pnl_ur_tbl'] = $noi_ur_tbl;
	    $data['pnl_rsl_tbl'] = $noi_rsl_tbl;
	    $data['pnl_ur_tbl'] = $noi_ur_tbl;
	    $data['pnl_hei_tbl'] = $noi_hei_tbl;
	    $data['pnl_exp_tbl'] = $noi_exp_tbl;
	    $data['pnl_chk_tbl'] = $noi_chk_tbl;
	    return $data;
    }

    public function _get_noi_segment_month2($trans_id, $year, $com_data, $brand_list, $cost_center_id, $cost_center_group_id){
		$select_noi_com = 'SUM(dashboard_brand_summary_sales_unit) as sales_unit, SUM(dashboard_brand_summary_net_sales) as net_sales, SUM(dashboard_brand_summary_variable_cost) as variable_cost';

		$select_summary_period = 'SUM(dashboard_opex_amount) as total_period_cost';


	    /*Commodity January*/

	    for($a = 1; $a <= 12; $a++){
	    	$month = $year . '-' . $a .'-01';
	    	$where_noi = 'brand_id IN ' . $brand_list . ' AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_brand_summary_date = "' .  $month . '" AND dashboard_brand_summary_status = 1';
		    $get_noi = $this->admin->check_data('dashboard_brand_summary_tbl', $where_noi, TRUE, $select_noi_com);

		    $sales_unit[$a] = 0;
		    $net_sales[$a]= 0;
		    $variable_cost[$a] = 0;
		    $nsp[$a] = 0;
		    $variable_unit[$a] = 0;
		    $margin[$a] = 0;
		    $margin_unit[$a] = 0;
		    $margin_percent[$a] = 0;
		    if($get_noi['result'] == TRUE){
		    	$sales_unit[$a] = $get_noi['info']->sales_unit;
		    	$net_sales[$a] = $get_noi['info']->net_sales;
		    	$variable_cost[$a] = $get_noi['info']->variable_cost;
		    	$nsp[$a] = $sales_unit[$a] > 0 ? $net_sales[$a] / $sales_unit[$a] : 0;
		    	$variable_unit[$a] = $sales_unit[$a] > 0 ? $variable_cost[$a] / $sales_unit[$a] : 0;

		    	$margin[$a] = $net_sales[$a] - $variable_cost[$a];
		    	$margin_unit[$a] = $sales_unit[$a] > 0 ?  $margin[$a] / $sales_unit[$a] : 0;
		    	$margin_percent[$a] = $net_sales[$a] > 0 ? ($margin[$a] / $net_sales[$a]) * 100 : 0;
		    }

		    $where_brand_period = 'cost_center_group_id = ' . $cost_center_group_id . ' AND dashboard_opex_date = "' . $month . '" AND cost_center_id IN (' . $cost_center_id . ') AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_opex_status = 1';
		    $get_brand_period = $this->admin->check_data('dashboard_opex_tbl', $where_brand_period, TRUE, $select_summary_period);

		    $period[$a] = 0;
		    $period_unit[$a] = 0;
		    if($get_brand_period['result'] == TRUE){

		    	$allocation = $this->_get_segment_allocation($trans_id, $cost_center_group_id, $year, $month);

		    	$period[$a] = $get_brand_period['info']->total_period_cost + $allocation;
		    	$period_unit[$a] = $sales_unit[$a] > 0 ?  $period[$a] / $sales_unit[$a] : 0;
		    }

		    $noi[$a] = $margin[$a] - $period[$a];
		    $noi_unit[$a] = $sales_unit[$a] > 0 ? $noi[$a] / $sales_unit[$a]: 0;
		    $noi_percent[$a] = $net_sales[$a] > 0 ? ($noi[$a] / $net_sales[$a]) * 100 : 0;
	    }

	    $noi_com_tbl = '
	    		<tr>
	    			<td>Sale Volume, in Unit</td>
	    			<td align="right">' . number_format($com_data['sales_unit']/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[1]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[2]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[3]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[4]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[5]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[6]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[7]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[8]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[9]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[10]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[11]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[12]/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>NET SALES</td>
	    			<td align="right">' . number_format($com_data['net_sales']/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[1]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[2]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[3]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[4]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[5]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[6]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[7]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[8]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[9]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[10]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[11]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[12]/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>NSP per Unit</td>
	    			<td align="right">' . number_format($com_data['nsp'], 2) . '</td>
	    			<td align="right">' . number_format($nsp[1], 2) . '</td>
	    			<td align="right">' . number_format($nsp[2], 2) . '</td>
	    			<td align="right">' . number_format($nsp[3], 2) . '</td>
	    			<td align="right">' . number_format($nsp[4], 2) . '</td>
	    			<td align="right">' . number_format($nsp[5], 2) . '</td>
	    			<td align="right">' . number_format($nsp[6], 2) . '</td>
	    			<td align="right">' . number_format($nsp[7], 2) . '</td>
	    			<td align="right">' . number_format($nsp[8], 2) . '</td>
	    			<td align="right">' . number_format($nsp[9], 2) . '</td>
	    			<td align="right">' . number_format($nsp[10], 2) . '</td>
	    			<td align="right">' . number_format($nsp[11], 2) . '</td>
	    			<td align="right">' . number_format($nsp[12], 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Variable Cost</td>
	    			<td align="right">' . number_format($com_data['variable_cost']/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[1]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[2]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[3]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[4]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[5]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[6]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[7]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[8]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[9]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[10]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[11]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[12]/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Var. Cost/Unit</td>
	    			<td align="right">' . number_format($com_data['variable_unit'], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[1], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[2], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[3], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[4], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[5], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[6], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[7], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[8], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[9], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[10], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[11], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[12], 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Contribution Margin</td>
	    			<td align="right">' . number_format($com_data['margin']/1000) . '</td>
	    			<td align="right">' . number_format($margin[1]/1000) . '</td>
	    			<td align="right">' . number_format($margin[2]/1000) . '</td>
	    			<td align="right">' . number_format($margin[3]/1000) . '</td>
	    			<td align="right">' . number_format($margin[4]/1000) . '</td>
	    			<td align="right">' . number_format($margin[5]/1000) . '</td>
	    			<td align="right">' . number_format($margin[6]/1000) . '</td>
	    			<td align="right">' . number_format($margin[7]/1000) . '</td>
	    			<td align="right">' . number_format($margin[8]/1000) . '</td>
	    			<td align="right">' . number_format($margin[9]/1000) . '</td>
	    			<td align="right">' . number_format($margin[10]/1000) . '</td>
	    			<td align="right">' . number_format($margin[11]/1000) . '</td>
	    			<td align="right">' . number_format($margin[12]/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>CM Per Unit</td>
	    			<td align="right">' . number_format($com_data['margin_unit'], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[1], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[2], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[3], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[4], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[5], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[6], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[7], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[8], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[9], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[10], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[11], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[12], 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>CM (%)</td>
	    			<td align="right">' . number_format($com_data['margin_percent']) . '%</td>
	    			<td align="right">' . number_format($margin_percent[1]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[2]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[3]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[4]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[5]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[6]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[7]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[8]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[9]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[10]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[11]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[12]) . '%</td>
	    		</tr>

	    		<tr>
	    			<td>Period Cost</td>
	    			<td align="right">' . number_format($com_data['period']/1000) . '</td>
	    			<td align="right">' . number_format($period[1]/1000) . '</td>
	    			<td align="right">' . number_format($period[2]/1000) . '</td>
	    			<td align="right">' . number_format($period[3]/1000) . '</td>
	    			<td align="right">' . number_format($period[4]/1000) . '</td>
	    			<td align="right">' . number_format($period[5]/1000) . '</td>
	    			<td align="right">' . number_format($period[6]/1000) . '</td>
	    			<td align="right">' . number_format($period[7]/1000) . '</td>
	    			<td align="right">' . number_format($period[8]/1000) . '</td>
	    			<td align="right">' . number_format($period[9]/1000) . '</td>
	    			<td align="right">' . number_format($period[10]/1000) . '</td>
	    			<td align="right">' . number_format($period[11]/1000) . '</td>
	    			<td align="right">' . number_format($period[12]/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Period Cost/ Unit</td>
	    			<td align="right">' . number_format($com_data['period_unit'], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[1], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[2], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[3], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[4], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[5], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[6], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[7], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[8], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[9], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[10], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[11], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[12], 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Other Income/Expenses</td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    		</tr>

	    		<tr>
	    			<td>Others - Per Unit</td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    		</tr>

	    		<tr>
	    			<td>NOI</td>
	    			<td align="right">' . number_format($com_data['noi']/1000) . '</td>
	    			<td align="right">' . number_format($noi[1]/1000) . '</td>
	    			<td align="right">' . number_format($noi[2]/1000) . '</td>
	    			<td align="right">' . number_format($noi[3]/1000) . '</td>
	    			<td align="right">' . number_format($noi[4]/1000) . '</td>
	    			<td align="right">' . number_format($noi[5]/1000) . '</td>
	    			<td align="right">' . number_format($noi[6]/1000) . '</td>
	    			<td align="right">' . number_format($noi[7]/1000) . '</td>
	    			<td align="right">' . number_format($noi[8]/1000) . '</td>
	    			<td align="right">' . number_format($noi[9]/1000) . '</td>
	    			<td align="right">' . number_format($noi[10]/1000) . '</td>
	    			<td align="right">' . number_format($noi[11]/1000) . '</td>
	    			<td align="right">' . number_format($noi[12]/1000) . '</td>
	    		</tr>


	    		<tr>
	    			<td>NOI per Unit</td>
	    			<td align="right">' . number_format($com_data['noi_unit'], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[1], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[2], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[3], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[4], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[5], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[6], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[7], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[8], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[9], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[10], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[11], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[12], 2) . '</td>
	    		</tr>


	    		<tr>
	    			<td>% NOI to Net Sales</td>
	    			<td align="right">' . number_format($com_data['noi_percent']) . '%</td>
	    			<td align="right">' . number_format($noi_percent[1]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[2]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[3]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[4]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[5]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[6]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[7]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[8]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[9]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[10]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[11]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[12]) . '%</td>
	    		</tr>
	    ';

	    return $noi_com_tbl;
	}

	public function _get_variable_cost($trans_id){
		$info = $this->_require_login();

		$join_variable = array(
			'dashboard_variable_cost_details_tbl b' => 'a.dashboard_variable_cost_id = b.dashboard_variable_cost_id AND a.dashboard_variable_cost_status = 1 AND b.dashboard_variable_cost_det_status = 1 AND a.dashboard_bc_trans_id IN (' . $trans_id . ')',
			'component_type_tbl c' => 'b.component_type_id = c.component_type_id',
			'brand_tbl d' => 'a.brand_id = d.brand_id'
		);
		$select_variable = 'SUM(dashboard_variable_cost_det_amount) as variable_cost, d.brand_name, c.component_type';
		$group_variable = 'a.brand_id, c.component_type_id';
		$get_variable = $this->admin->get_join('dashboard_variable_cost_tbl a', $join_variable, FALSE, FALSE, $group_variable, $select_variable);

		$cost_of_sales = 0;
		$factory = 0;
		$packaging = 0;
		$light = 0;
		$lpg = 0;
		$blast = 0;
		$freight = 0;
		$commission = 0;
		$distribution = 0;

		$ctg_cost_of_sales = 0;
		$ctg_factory = 0;
		$ctg_packaging = 0;
		$ctg_light = 0;
		$ctg_lpg = 0;
		$ctg_blast = 0;
		$ctg_freight = 0;
		$ctg_commission = 0;
		$ctg_distribution = 0;

		$ur_cost_of_sales = 0;
		$ur_factory = 0;
		$ur_packaging = 0;
		$ur_light = 0;
		$ur_lpg = 0;
		$ur_blast = 0;
		$ur_freight = 0;
		$ur_commission = 0;
		$ur_distribution = 0;

		$rsl_cost_of_sales = 0;
		$rsl_factory = 0;
		$rsl_packaging = 0;
		$rsl_light = 0;
		$rsl_lpg = 0;
		$rsl_blast = 0;
		$rsl_freight = 0;
		$rsl_commission = 0;
		$rsl_distribution = 0;

		$hei_cost_of_sales = 0;
		$hei_factory = 0;
		$hei_packaging = 0;
		$hei_light = 0;
		$hei_lpg = 0;
		$hei_blast = 0;
		$hei_freight = 0;
		$hei_commission = 0;
		$hei_distribution = 0;
		
		$exp_cost_of_sales = 0;
		$exp_factory = 0;
		$exp_packaging = 0;
		$exp_light = 0;
		$exp_lpg = 0;
		$exp_blast = 0;
		$exp_freight = 0;
		$exp_commission = 0;
		$exp_distribution = 0;

		$chk_cost_of_sales = 0;
		$chk_factory = 0;
		$chk_packaging = 0;
		$chk_light = 0;
		$chk_lpg = 0;
		$chk_blast = 0;
		$chk_freight = 0;
		$chk_commission = 0;
		$chk_distribution = 0;

		foreach($get_variable as $row){
			$variable_cost = $row->variable_cost;
			$brand_name = $row->brand_name;
			$component_type = $row->component_type;

			if($brand_name == 'CHOOKS-TO-GO'){
				if($component_type == 'COST OF SALES' || $component_type == 'DO-Variable' || $component_type == 'OTHER FEES'){
					$ctg_cost_of_sales += $variable_cost;
				}elseif($component_type == 'DO-Factory Supplies-Variable'){
					$ctg_factory += $variable_cost;
				}elseif($component_type == 'DO-Packaging Supplies'){
					$ctg_packaging += $variable_cost;
				}elseif($component_type == 'DO-Light & Power-Variable'){
					$ctg_light += $variable_cost;
				}elseif($component_type == 'DO-LPG-Variable'){
					$ctg_lpg += $variable_cost;
				}elseif($component_type == 'SALES COMMISSION'){
					$ctg_commission += $variable_cost;
				}elseif($component_type == "DISTRIBUTION COST"){
					$ctg_distribution += $variable_cost;
				}elseif($component_type == "DO-Variable"){

				}
			}elseif($brand_name == 'ULING ROASTER'){
				if($component_type == 'COST OF SALES' || $component_type == 'DO-Variable' || $component_type == 'OTHER FEES'){
					$ur_cost_of_sales += $variable_cost;
				}elseif($component_type == 'DO-Factory Supplies-Variable'){
					$ur_factory += $variable_cost;
				}elseif($component_type == 'DO-Packaging Supplies'){
					$ur_packaging += $variable_cost;
				}elseif($component_type == 'DO-Light & Power-Variable'){
					$ur_light += $variable_cost;
				}elseif($component_type == 'DO-LPG-Variable'){
					$ur_lpg += $variable_cost;
				}elseif($component_type == 'SALES COMMISSION'){
					$ur_commission += $variable_cost;
				}elseif($component_type == 'DISTRIBUTION COST'){
					$ur_distribution += $variable_cost;
				}
			}elseif($brand_name == 'RESELLER'){
				if($component_type == 'COST OF SALES' || $component_type == 'DO-Variable' || $component_type == 'OTHER FEES'){
					$rsl_cost_of_sales += $variable_cost;
				}elseif($component_type == 'DO-Factory Supplies-Variable'){
					$rsl_factory += $variable_cost;
				}elseif($component_type == 'DO-Packaging Supplies'){
					$rsl_packaging += $variable_cost;
				}elseif($component_type == 'DO-Light & Power-Variable'){
					$rsl_light += $variable_cost;
				}elseif($component_type == 'DO-LPG-Variable'){
					$rsl_lpg += $variable_cost;
				}elseif($component_type == 'SALES COMMISSION'){
					$rsl_commission += $variable_cost;
				}elseif($component_type == 'DISTRIBUTION COST'){
					$rsl_distribution += $variable_cost;
				}
			}elseif($brand_name == 'HEIHEI'){
				if($component_type == 'COST OF SALES' || $component_type == 'DO-Variable' || $component_type == 'OTHER FEES'){
					$hei_cost_of_sales += $variable_cost;
				}elseif($component_type == 'DO-Factory Supplies-Variable'){
					$hei_factory += $variable_cost;
				}elseif($component_type == 'DO-Packaging Supplies'){
					$hei_packaging += $variable_cost;
				}elseif($component_type == 'DO-Light & Power-Variable'){
					$hei_light += $variable_cost;
				}elseif($component_type == 'DO-LPG-Variable'){
					$hei_lpg += $variable_cost;
				}elseif($component_type == 'SALES COMMISSION'){
					$hei_commission += $variable_cost;
				}elseif($component_type == 'DISTRIBUTION COST'){
					$hei_distribution += $variable_cost;
				}
			}elseif($brand_name == 'CHOOKS EXPRESS'){
				if($component_type == 'COST OF SALES' || $component_type == 'DO-Variable' || $component_type == 'OTHER FEES'){
					$exp_cost_of_sales += $variable_cost;
				}elseif($component_type == 'DO-Factory Supplies-Variable'){
					$exp_factory += $variable_cost;
				}elseif($component_type == 'DO-Packaging Supplies'){
					$exp_packaging += $variable_cost;
				}elseif($component_type == 'DO-Light & Power-Variable'){
					$exp_light += $variable_cost;
				}elseif($component_type == 'DO-LPG-Variable'){
					$exp_lpg += $variable_cost;
				}elseif($component_type == 'SALES COMMISSION'){
					$exp_commission += $variable_cost;
				}elseif($component_type == 'DISTRIBUTION COST'){
					$exp_distribution += $variable_cost;
				}
			}elseif($brand_name == 'CHOOKS DINE IN'){
				if($component_type == 'COST OF SALES' || $component_type == 'DO-Variable' || $component_type == 'OTHER FEES'){
					$chk_cost_of_sales += $variable_cost;
				}elseif($component_type == 'DO-Factory Supplies-Variable'){
					$chk_factory += $variable_cost;
				}elseif($component_type == 'DO-Packaging Supplies'){
					$chk_packaging += $variable_cost;
				}elseif($component_type == 'DO-Light & Power-Variable'){
					$chk_light += $variable_cost;
				}elseif($component_type == 'DO-LPG-Variable'){
					$chk_lpg += $variable_cost;
				}elseif($component_type == 'SALES COMMISSION'){
					$chk_commission += $variable_cost;
				}elseif($component_type == 'DISTRIBUTION COST'){
					$chk_distribution += $variable_cost;
				}
			}
		}


		$cost_of_sales = $ctg_cost_of_sales + $ur_cost_of_sales + $rsl_cost_of_sales + $hei_cost_of_sales + $exp_cost_of_sales  + $chk_cost_of_sales;
		$factory = $ctg_factory + $ur_factory + $rsl_factory + $hei_factory + $exp_factory  + $chk_factory;
		$packaging = $ctg_packaging + $ur_packaging + $rsl_packaging + $hei_packaging + $exp_packaging  + $chk_packaging;
		$light = $ctg_light + $ur_light + $rsl_light + $hei_light + $exp_light  + $chk_light;
		$lpg = $ctg_lpg + $ur_lpg + $rsl_lpg + $hei_lpg + $exp_lpg  + $chk_light;
		$blast = $ctg_blast + $ur_blast + $rsl_blast + $hei_blast + $exp_blast  + $chk_blast;
		$freight = $ctg_freight + $ur_freight + $rsl_freight + $hei_freight + $exp_freight  + $chk_freight;
		$commission = $ctg_commission + $ur_commission + $rsl_commission + $hei_commission + $exp_commission  + $chk_commission;
		$distribution = $ctg_distribution + $ur_distribution + $rsl_distribution + $hei_distribution + $exp_distribution  + $chk_distribution;

		$data['cost_of_sales'] = $cost_of_sales;
		$data['factory'] = $factory;
		$data['packaging'] = $packaging;
		$data['light'] = $light;
		$data['lpg'] = $lpg;
		$data['blast'] = $blast;
		$data['freight'] = $freight;
		$data['commission'] = $commission;
		$data['distribution'] = $distribution;

		$data['ctg_cost_of_sales'] = $ctg_cost_of_sales;
		$data['ctg_factory'] = $ctg_factory;
		$data['ctg_packaging'] = $ctg_packaging;
		$data['ctg_light'] = $ctg_light;
		$data['ctg_lpg'] = $ctg_lpg;
		$data['ctg_blast'] = $ctg_blast;
		$data['ctg_freight'] = $ctg_freight;
		$data['ctg_commission'] = $ctg_commission;
		$data['ctg_distribution'] = $ctg_distribution;

		$data['ur_cost_of_sales'] = $ur_cost_of_sales;
		$data['ur_factory'] = $ur_factory;
		$data['ur_packaging'] = $ur_packaging;
		$data['ur_light'] = $ur_light;
		$data['ur_lpg'] = $ur_lpg;
		$data['ur_blast'] = $ur_blast;
		$data['ur_freight'] = $ur_freight;
		$data['ur_commission'] = $ur_commission;
		$data['ur_distribution'] = $ur_distribution;

		$data['rsl_cost_of_sales'] = $rsl_cost_of_sales;
		$data['rsl_factory'] = $rsl_factory;
		$data['rsl_packaging'] = $rsl_packaging;
		$data['rsl_light'] = $rsl_light;
		$data['rsl_lpg'] = $rsl_lpg;
		$data['rsl_blast'] = $rsl_blast;
		$data['rsl_freight'] = $rsl_freight;
		$data['rsl_commission'] = $rsl_commission;
		$data['rsl_distribution'] = $rsl_distribution;

		$data['hei_cost_of_sales'] = $hei_cost_of_sales;
		$data['hei_factory'] = $hei_factory;
		$data['hei_packaging'] = $hei_packaging;
		$data['hei_light'] = $hei_light;
		$data['hei_lpg'] = $hei_lpg;
		$data['hei_blast'] = $hei_blast;
		$data['hei_freight'] = $hei_freight;
		$data['hei_commission'] = $hei_commission;
		$data['hei_distribution'] = $hei_distribution;
		
		$data['exp_cost_of_sales'] = $exp_cost_of_sales;
		$data['exp_factory'] = $exp_factory;
		$data['exp_packaging'] = $exp_packaging;
		$data['exp_light'] = $exp_light;
		$data['exp_lpg'] = $exp_lpg;
		$data['exp_blast'] = $exp_blast;
		$data['exp_freight'] = $exp_freight;
		$data['exp_commission'] = $exp_commission;
		$data['exp_distribution'] = $exp_distribution;

		$data['chk_cost_of_sales'] = $chk_cost_of_sales;
		$data['chk_factory'] = $chk_factory;
		$data['chk_packaging'] = $chk_packaging;
		$data['chk_light'] = $chk_light;
		$data['chk_lpg'] = $chk_lpg;
		$data['chk_blast'] = $chk_blast;
		$data['chk_freight'] = $chk_freight;
		$data['chk_commission'] = $chk_commission;
		$data['chk_distribution'] = $chk_distribution;

		return $data;
	}

	public function _get_segment_allocation($trans_id, $cost_center_group_id, $year, $date = null){

		if($date == null){
			$where_allocation = 'cost_center_group_id = ' . $cost_center_group_id . ' AND YEAR(dashboard_allocation_opex_date) = ' . $year . ' AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_allocation_opex_status = 1';
		}else{
			$where_allocation = 'cost_center_group_id = ' . $cost_center_group_id . ' AND dashboard_allocation_opex_date = "' . $date . '" AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_allocation_opex_status = 1';
		}

		$get_allocation = $this->admin->get_data('dashboard_allocation_opex_tbl', $where_allocation, TRUE, 'SUM(dashboard_allocation_opex_amount) as total_allocation');

		$allocation = $get_allocation->total_allocation;

		return $allocation;
	}

	public function price_assumption_report_pdf($trans_id, $pdf, $year, $pdf_name, $report_type){
		$info = $this->_require_login();

		$where_price = 'dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_price_status = 1';
		$select_price = '
			dashboard_price_segment, dashboard_price_product, dashboard_price_year,
			AVG(dashboard_price_jan) as dashboard_price_jan, AVG(dashboard_price_feb) as dashboard_price_feb, AVG(dashboard_price_mar) as dashboard_price_mar, AVG(dashboard_price_apr) as dashboard_price_apr, AVG(dashboard_price_may) as dashboard_price_may, AVG(dashboard_price_june) as dashboard_price_june, AVG(dashboard_price_july) as dashboard_price_july, AVG(dashboard_price_aug) as dashboard_price_aug, AVG(dashboard_price_sep) as dashboard_price_sep, AVG(dashboard_price_oct) as dashboard_price_oct, AVG(dashboard_price_nov) as dashboard_price_nov, AVG(dashboard_price_dec) as dashboard_price_dec';
		$group_price = 'dashboard_price_segment, dashboard_price_product, dashboard_price_year';
		$get_price = $this->admin->get_data('dashboard_price_tbl', $where_price, FALSE, $select_price, FALSE, $group_price);

		$price_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center"><strong>SEGMENT</strong></th>
	    			<th align="center" width="50px;"><strong>PRODUCT</strong></th>
	    			<th align="center"><strong>YEAR</strong></th>
	    			<th align="center"><strong>JAN</strong></th>
	    			<th align="center"><strong>FEB</strong></th>
	    			<th align="center"><strong>MAR</strong></th>
	    			<th align="center"><strong>APR</strong></th>
	    			<th align="center"><strong>MAY</strong></th>
	    			<th align="center"><strong>JUN</strong></th>
	    			<th align="center"><strong>JUL</strong></th>
	    			<th align="center"><strong>AUG</strong></th>
	    			<th align="center"><strong>SEP</strong></th>
	    			<th align="center"><strong>OCT</strong></th>
	    			<th align="center"><strong>NOV</strong></th>
	    			<th align="center"><strong>DEC</strong></th>
	    		</tr>
	    ';

		$count_price = 1;
	    $price_content = '';
	    foreach($get_price as $row){

	    	$segment = $row->dashboard_price_segment;
			$product = $row->dashboard_price_product;
			$price_year = $row->dashboard_price_year;
			$price_jan = $row->dashboard_price_jan;
			$price_feb = $row->dashboard_price_feb;
			$price_mar = $row->dashboard_price_mar;
			$price_apr = $row->dashboard_price_apr;
			$price_may = $row->dashboard_price_may;
			$price_june = $row->dashboard_price_june;
			$price_july = $row->dashboard_price_july;
			$price_aug = $row->dashboard_price_aug;
			$price_sep = $row->dashboard_price_sep;
			$price_oct = $row->dashboard_price_oct;
			$price_nov = $row->dashboard_price_nov;
			$price_dec = $row->dashboard_price_dec;

			$arr_price = array();

			if($price_jan > 0){
				array_push($arr_price, $price_jan);
			}

			if($price_feb > 0){
				array_push($arr_price, $price_feb);
			}

			if($price_mar > 0){
				array_push($arr_price, $price_mar);
			}

			if($price_apr > 0){
				array_push($arr_price, $price_apr);
			}


			if($price_may > 0){
				array_push($arr_price, $price_may);
			}

			if($price_june > 0){
				array_push($arr_price, $price_june);
			}

			if($price_july > 0){
				array_push($arr_price, $price_july);
			}

			if($price_aug > 0){
				array_push($arr_price, $price_aug);
			}

			if($price_sep > 0){
				array_push($arr_price, $price_sep);
			}

			if($price_oct > 0){
				array_push($arr_price, $price_oct);
			}

			if($price_nov > 0){
				array_push($arr_price, $price_nov);
			}

			if($price_dec > 0){
				array_push($arr_price, $price_dec);
			}

			$price_min = 0;
			$price_max = 0;
			$price_avg = 0;

			if(count($arr_price) > 0){
				$price_min = min($arr_price);
				$price_max = max($arr_price);
				$price_avg = array_sum($arr_price) / count($arr_price);	
			}
			

			$price_tbl .= '
				<tr>
                    <td>' . $segment . '</td>
                    <td>' . $product . '</td>
                    <td>' . $price_year . '</td>
                    <td align="center">' . check_zero(number_format($price_jan)) . '</td>
                    <td align="center">' . check_zero(number_format($price_feb)) . '</td>
                    <td align="center">' . check_zero(number_format($price_mar)) . '</td>
                    <td align="center">' . check_zero(number_format($price_apr)) . '</td>
                    <td align="center">' . check_zero(number_format($price_may)) . '</td>
                    <td align="center">' . check_zero(number_format($price_june)) . '</td>
                    <td align="center">' . check_zero(number_format($price_july)) . '</td>
                    <td align="center">' . check_zero(number_format($price_aug)) . '</td>
                    <td align="center">' . check_zero(number_format($price_sep)) . '</td>
                    <td align="center">' . check_zero(number_format($price_oct)) . '</td>
                    <td align="center">' . check_zero(number_format($price_nov)) . '</td>
                    <td align="center">' . check_zero(number_format($price_dec)) . '</td>
                </tr>
			';

	    	if($count_price%12 == 0 && count($get_price) != $count_price){
	    		$price_tbl .= '</table>';
	    		$pdf->writeHTML($price_tbl, true, false, true, false, '');

		    	$this->watermark_landscape($pdf);
				$this->header_landscape($pdf);

				$pdf->SetMargins(20, 20, 20, true);
				$pdf->AddPage('L');

				$pdf->SetTextColor(0,0,0);

			    $pdf->setFont('arialb', '', 12);
			    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
			    $pdf->Text(20, 46, 'MONTHLY SELLING PRICES');
			    $pdf->Text(20, 52, 'Budget ' . $year);
			    /*$pdf->Text(20, 58, '(In Thousands)');*/

			    $pdf->SetFont('arial', '', 8);

				$price_tbl = '<br /><br /><br /><br />
			    	<table border="1" cellpadding="3">
			    		<tr>
			    			<th align="center"><strong>SEGMENT</strong></th>
			    			<th align="center" width="50px;"><strong>PRODUCT</strong></th>
			    			<th align="center"><strong>YEAR</strong></th>
			    			<th align="center"><strong>JAN</strong></th>
			    			<th align="center"><strong>FEB</strong></th>
			    			<th align="center"><strong>MAR</strong></th>
			    			<th align="center"><strong>APR</strong></th>
			    			<th align="center"><strong>MAY</strong></th>
			    			<th align="center"><strong>JUN</strong></th>
			    			<th align="center"><strong>JUL</strong></th>
			    			<th align="center"><strong>AUG</strong></th>
			    			<th align="center"><strong>SEP</strong></th>
			    			<th align="center"><strong>OCT</strong></th>
			    			<th align="center"><strong>NOV</strong></th>
			    			<th align="center"><strong>DEC</strong></th>
			    		</tr>
			    ';

			}elseif(count($get_price) == $count_price){
				$price_tbl .= '</table>';
	    		$pdf->writeHTML($price_tbl, true, false, true, false, '');

		    	$this->watermark_landscape($pdf);
				$this->header_landscape($pdf);
			}

			$count_price++;
	    }
	}

	public function opex_per_cost_center_pdf($trans_id, $year, $sales_unit, $sales_unit1, $sales_unit2, $type = null, $trans_unit_id){
		$opex_cost_center_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th rowspan="2" align="center" width="30%;"><strong>DEPARTMENT</strong></th>
	    			<th align="center" width="10%"><strong>BUDGET</strong></th>
	    			<th colspan="2" align="center" width="20%"><strong>ACTUAL</strong></th>
	    			<th colspan="4" align="center" width="40%"><strong>VARIANCE</strong></th>
	    		</tr>

	    		<tr>
	    			<td align="center"><strong>' . $year . '</strong></td>
	    			<td align="center"><strong>' . ($year - 1) . '</strong></td>
	    			<td align="center"><strong>' . ($year - 2) . '</strong></td>
	    			<td align="center"><strong>' . $year  . ' vs ' . ($year - 1) . '</strong></td>
	    			<td align="center"><strong>%</strong></td>
	    			<td align="center"><strong>' . $year . ' vs ' . ($year - 2) . '</strong></td>
	    			<td align="center"><strong>%</strong></td>
	    		</tr>
	    ';


	    if($type == 'NATIONAL'){
	    	$opex_per_cost_center = $this->admin->get_query('

	    		SELECT *

	    		FROM
	    			(
			    		SELECT a.dashboard_bc_opex_cost_center_amount, a.dashboard_bc_opex_cost_center_amount1, a.dashboard_bc_opex_cost_center_amount2, b.cost_center_id, b.cost_center_desc, c.cost_center_group_name, d.cost_center_type_id, b.bc_id

			    		FROM `dashboard_bc_opex_cost_center_tbl` `a` JOIN `cost_center_tbl` `b` ON `a`.`cost_center_id` = `b`.`cost_center_id` AND `a`.`dashboard_bc_opex_cost_center_status` = 1 AND `a`.`dashboard_bc_trans_id` IN ( ' . $trans_id . ' ) JOIN `cost_center_group_tbl` `c` ON `b`.`cost_center_group_id` = `c`.`cost_center_group_id` JOIN `cost_center_type_tbl` `d` ON `b`.`cost_center_type_id` = `d`.`cost_center_type_id`

			    		UNION

			    		SELECT SUM(a.dashboard_unit_opex_cost_center_amount) as dashboard_unit_opex_cost_center_amount, SUM(a.dashboard_unit_opex_cost_center_amount1) as dashboard_unit_opex_cost_center_amount1, SUM(a.dashboard_unit_opex_cost_center_amount2) as dashboard_unit_opex_cost_center_amount2, `b`.`cost_center_id`, `b`.`cost_center_desc`, c.cost_center_group_name, d.cost_center_type_id, "" FROM `dashboard_unit_opex_cost_center_tbl` `a` JOIN `cost_center_tbl` `b` ON `a`.`cost_center_id` = `b`.`cost_center_id` AND `a`.`dashboard_unit_opex_cost_center_status` = 1 AND `a`.`dashboard_unit_trans_id` IN (' . $trans_unit_id . ') 

			    			JOIN cost_center_group_tbl c ON b.cost_center_group_id = c.cost_center_group_id
			    			JOIN cost_center_type_tbl d ON b.cost_center_type_id = d.cost_center_type_id

			    			GROUP BY `a`.`cost_center_id`
			    	) as opex

	    	');
	    }else{
		    $join_opex_cost_center = array(
		    	'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.dashboard_bc_opex_cost_center_status = 1 AND a.dashboard_bc_trans_id IN ( ' . $trans_id . ')',
		    	'cost_center_group_tbl c' => 'b.cost_center_group_id = c.cost_center_group_id',
		    	'cost_center_type_tbl d' => 'b.cost_center_type_id = d.cost_center_type_id'
		    );

		    $opex_per_cost_center = $this->admin->get_join('dashboard_bc_opex_cost_center_tbl a', $join_opex_cost_center);
		}

		// echo '<pre>';
		// print_r($opex_per_cost_center);
		// echo '</pre>';
		// exit;
	    
	    $count_opex_cost_center = 1;
	    $ctg_sales = 0;
	    $com_sales = 0;
	    $ur_sales = 0;
	    $rsl_sales = 0;
	    $exp_sales = 0;

	    foreach($opex_per_cost_center as $row_opex){
	    	
	    	$cost_center_id = $row_opex->cost_center_id;
	    	$cost_center = $row_opex->cost_center_desc;
	    	$opex_total_cost_center = $row_opex->dashboard_bc_opex_cost_center_amount;
	    	$opex_total_cost_center1 = $row_opex->dashboard_bc_opex_cost_center_amount1;
	    	$opex_total_cost_center2 = $row_opex->dashboard_bc_opex_cost_center_amount2;
	    	$cost_center_group_name = $row_opex->cost_center_group_name;
	    	$cost_center_type_id = $row_opex->cost_center_type_id;
	    	if($cost_center_group_name == 'CTG' && $cost_center_type_id == 8){
	    		$bc_id = $row_opex->bc_id;
	    		$join_cost_sales = array(
	    			'cost_center_group_tbl b' => 'a.cost_center_group_id = b.cost_center_group_id AND a.cost_center_type_id = 10 AND b.cost_center_group_name = "' . $cost_center_group_name . '" AND a.bc_id = ' . $bc_id . ' AND a.cost_center_status = 1'
	    		);
	    		$get_cost_sales = $this->admin->check_join('cost_center_tbl a', $join_cost_sales, TRUE);

	    		if($get_cost_sales['result'] == TRUE){
	    			$sales_cost_center = $get_cost_sales['info']->cost_center_desc;
	    			if (array_search($sales_cost_center, array_column($opex_per_cost_center, 'cost_center_desc')) !== FALSE) {
	    				$index =  array_search($sales_cost_center, array_column($opex_per_cost_center, 'cost_center_desc'));

	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount += $opex_total_cost_center;
	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount1 += $opex_total_cost_center1;
	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount2 += $opex_total_cost_center2;
	    			}else{

	    				$opex_arr = new stdClass;
						$opex_arr->bc_id = $bc_id;
						$opex_arr->cost_center_desc = $sales_cost_center;
						$opex_arr->cost_center_group_name = $cost_center_group_name;
						$opex_arr->cost_center_type_id = 10;
						$opex_arr->dashboard_bc_opex_cost_center_amount = $opex_total_cost_center;
						$opex_arr->dashboard_bc_opex_cost_center_amount1 = $opex_total_cost_center1;
						$opex_arr->dashboard_bc_opex_cost_center_amount2 = $opex_total_cost_center2;

						array_push($opex_per_cost_center, $opex_arr);
	    			}
	    		}
	    	}elseif($cost_center_group_name == 'COM' && $cost_center_type_id == 8){
	    		$bc_id = $row_opex->bc_id;
	    		$join_cost_sales = array(
	    			'cost_center_group_tbl b' => 'a.cost_center_group_id = b.cost_center_group_id AND a.cost_center_type_id = 10 AND b.cost_center_group_name = "' . $cost_center_group_name . '" AND a.bc_id = ' . $bc_id . ' AND a.cost_center_status = 1'
	    		);
	    		$get_cost_sales = $this->admin->check_join('cost_center_tbl a', $join_cost_sales, TRUE);
	    		if($get_cost_sales['result'] == TRUE){
	    			

	    			$sales_cost_center = $get_cost_sales['info']->cost_center_desc;

	    			if (array_search($sales_cost_center, array_column($opex_per_cost_center, 'cost_center_desc')) !== FALSE) {
	    				$index =  array_search($sales_cost_center, array_column($opex_per_cost_center, 'cost_center_desc'));

	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount += $opex_total_cost_center;
	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount1 += $opex_total_cost_center1;
	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount2 += $opex_total_cost_center2;
	    			}else{

	    				$opex_arr = new stdClass;
						$opex_arr->bc_id = $bc_id;
						$opex_arr->cost_center_desc = $sales_cost_center;
						$opex_arr->cost_center_group_name = $cost_center_group_name;
						$opex_arr->cost_center_type_id = 10;
						$opex_arr->dashboard_bc_opex_cost_center_amount = $opex_total_cost_center;
						$opex_arr->dashboard_bc_opex_cost_center_amount1 = $opex_total_cost_center1;
						$opex_arr->dashboard_bc_opex_cost_center_amount2 = $opex_total_cost_center2;

						array_push($opex_per_cost_center, $opex_arr);
	    			}
	    		}else{

	    		}

	    		
	    	}elseif($cost_center_group_name == 'UR' && $cost_center_type_id == 8){
	    		$bc_id = $row_opex->bc_id;
	    		$join_cost_sales = array(
	    			'cost_center_group_tbl b' => 'a.cost_center_group_id = b.cost_center_group_id AND a.cost_center_type_id = 10 AND b.cost_center_group_name = "' . $cost_center_group_name . '" AND a.bc_id = ' . $bc_id . ' AND a.cost_center_status = 1'
	    		);
	    		$get_cost_sales = $this->admin->check_join('cost_center_tbl a', $join_cost_sales, TRUE);

	    		if($get_cost_sales['result'] == TRUE){
	    			$sales_cost_center = $get_cost_sales['info']->cost_center_desc;
	    			if (array_search($sales_cost_center, array_column($opex_per_cost_center, 'cost_center_desc')) !== FALSE) {
	    				$index =  array_search($sales_cost_center, array_column($opex_per_cost_center, 'cost_center_desc'));

	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount += $opex_total_cost_center;
	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount1 += $opex_total_cost_center1;
	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount2 += $opex_total_cost_center2;
	    			}else{

	    				$opex_arr = new stdClass;
						$opex_arr->bc_id = $bc_id;
						$opex_arr->cost_center_desc = $sales_cost_center;
						$opex_arr->cost_center_group_name = $cost_center_group_name;
						$opex_arr->cost_center_type_id = 10;
						$opex_arr->dashboard_bc_opex_cost_center_amount = $opex_total_cost_center;
						$opex_arr->dashboard_bc_opex_cost_center_amount1 = $opex_total_cost_center1;
						$opex_arr->dashboard_bc_opex_cost_center_amount2 = $opex_total_cost_center2;

						array_push($opex_per_cost_center, $opex_arr);
	    			}
	    		}
	    	}elseif($cost_center_group_name == 'RSL' && $cost_center_type_id == 8){
	    		$bc_id = $row_opex->bc_id;
	    		$join_cost_sales = array(
	    			'cost_center_group_tbl b' => 'a.cost_center_group_id = b.cost_center_group_id AND a.cost_center_type_id = 10 AND b.cost_center_group_name = "' . $cost_center_group_name . '" AND a.bc_id = ' . $bc_id . ' AND a.cost_center_status = 1'
	    		);
	    		$get_cost_sales = $this->admin->check_join('cost_center_tbl a', $join_cost_sales, TRUE);

	    		if($get_cost_sales['result'] == TRUE){
	    			$sales_cost_center = $get_cost_sales['info']->cost_center_desc;
	    			if (array_search($sales_cost_center, array_column($opex_per_cost_center, 'cost_center_desc')) !== FALSE) {
	    				$index =  array_search($sales_cost_center, array_column($opex_per_cost_center, 'cost_center_desc'));

	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount += $opex_total_cost_center;
	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount1 += $opex_total_cost_center1;
	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount2 += $opex_total_cost_center2;
	    			}else{

	    				$opex_arr = new stdClass;
						$opex_arr->bc_id = $bc_id;
						$opex_arr->cost_center_desc = $sales_cost_center;
						$opex_arr->cost_center_group_name = $cost_center_group_name;
						$opex_arr->cost_center_type_id = 10;
						$opex_arr->dashboard_bc_opex_cost_center_amount = $opex_total_cost_center;
						$opex_arr->dashboard_bc_opex_cost_center_amount1 = $opex_total_cost_center1;
						$opex_arr->dashboard_bc_opex_cost_center_amount2 = $opex_total_cost_center2;

						array_push($opex_per_cost_center, $opex_arr);
	    			}
	    		}
	    	}elseif($cost_center_group_name == 'EXP' && $cost_center_type_id == 8){
	    		$bc_id = $row_opex->bc_id;
	    		$join_cost_sales = array(
	    			'cost_center_group_tbl b' => 'a.cost_center_group_id = b.cost_center_group_id AND a.cost_center_type_id = 10 AND b.cost_center_group_name = "' . $cost_center_group_name . '" AND a.bc_id = ' . $bc_id . ' AND a.cost_center_status = 1'
	    		);
	    		$get_cost_sales = $this->admin->check_join('cost_center_tbl a', $join_cost_sales, TRUE, FALSE, FALSE, FALSE, FALSE);
				
	    		if($get_cost_sales['result'] == TRUE){
	    			$sales_cost_center = $get_cost_sales['info']->cost_center_desc;
					
	    			if (array_search($sales_cost_center, array_column($opex_per_cost_center, 'cost_center_desc')) !== FALSE) {
	    				$index =  array_search($sales_cost_center, array_column($opex_per_cost_center, 'cost_center_desc'));

	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount += $opex_total_cost_center;
	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount1 += $opex_total_cost_center1;
	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount2 += $opex_total_cost_center2;
	    			}else{

	    				$opex_arr = new stdClass;
						$opex_arr->bc_id = $bc_id;
						$opex_arr->cost_center_desc = $sales_cost_center;
						$opex_arr->cost_center_group_name = $cost_center_group_name;
						$opex_arr->cost_center_type_id = 10;
						$opex_arr->dashboard_bc_opex_cost_center_amount = $opex_total_cost_center;
						$opex_arr->dashboard_bc_opex_cost_center_amount1 = $opex_total_cost_center1;
						$opex_arr->dashboard_bc_opex_cost_center_amount2 = $opex_total_cost_center2;

						array_push($opex_per_cost_center, $opex_arr);
	    			}
	    		}
	    	}elseif($cost_center_group_name == 'CDI' && $cost_center_type_id == 8){
	    		$bc_id = $row_opex->bc_id;
	    		$join_cost_sales = array(
	    			'cost_center_group_tbl b' => 'a.cost_center_group_id = b.cost_center_group_id AND a.cost_center_type_id = 10 AND b.cost_center_group_name = "' . $cost_center_group_name . '" AND a.bc_id = ' . $bc_id . ' AND a.cost_center_status = 1'
	    		);
	    		$get_cost_sales = $this->admin->check_join('cost_center_tbl a', $join_cost_sales, TRUE);

	    		if($get_cost_sales['result'] == TRUE){
	    			$sales_cost_center = $get_cost_sales['info']->cost_center_desc;
	    			if (array_search($sales_cost_center, array_column($opex_per_cost_center, 'cost_center_desc')) !== FALSE) {
	    				$index =  array_search($sales_cost_center, array_column($opex_per_cost_center, 'cost_center_desc'));

	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount += $opex_total_cost_center;
	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount1 += $opex_total_cost_center1;
	    				$opex_per_cost_center[$index]->dashboard_bc_opex_cost_center_amount2 += $opex_total_cost_center2;
	    			}else{

	    				$opex_arr = new stdClass;
						$opex_arr->bc_id = $bc_id;
						$opex_arr->cost_center_desc = $sales_cost_center;
						$opex_arr->cost_center_group_name = $cost_center_group_name;
						$opex_arr->cost_center_type_id = 10;
						$opex_arr->dashboard_bc_opex_cost_center_amount = $opex_total_cost_center;
						$opex_arr->dashboard_bc_opex_cost_center_amount1 = $opex_total_cost_center1;
						$opex_arr->dashboard_bc_opex_cost_center_amount2 = $opex_total_cost_center2;

						array_push($opex_per_cost_center, $opex_arr);
	    			}
	    		}
	    	}else{
	    		

	    	}
	    }

		// echo '<pre>';
		// print_r($opex_per_cost_center);
		// echo '</pre>';
		// exit;

	    $opex_total_per_cc = 0;
	    $opex_total_per_cc1 = 0;
	    $opex_total_per_cc2 = 0;

	    foreach($opex_per_cost_center as $row_opex1){
	    	$cost_center = $row_opex1->cost_center_desc;
	    	$opex_total_cost_center = $row_opex1->dashboard_bc_opex_cost_center_amount;
	    	$opex_total_cost_center1 = $row_opex1->dashboard_bc_opex_cost_center_amount1;
	    	$opex_total_cost_center2 = $row_opex1->dashboard_bc_opex_cost_center_amount2;
	    	$cost_center_group_name = $row_opex1->cost_center_group_name;
	    	$cost_center_type_id = $row_opex1->cost_center_type_id;
	    	if($cost_center_group_name == 'CTG' && $cost_center_type_id == 8){
	    		$ctg_sales += $opex_total_cost_center;
	    	}elseif($cost_center_group_name == 'COM' && $cost_center_type_id == 8){
	    		$com_sales += $opex_total_cost_center;
	    	}elseif($cost_center_group_name == 'UR' && $cost_center_type_id == 8){
	    		$ur_sales += $opex_total_cost_center;
	    	}elseif($cost_center_group_name == 'RSL' && $cost_center_type_id == 8){
	    		$rsl_sales += $opex_total_cost_center;
	    	}elseif($cost_center_group_name == 'EXP' && $cost_center_type_id == 8){
	    		$exp_sales += $opex_total_cost_center;
	    	}else{

	    		$opex_total_per_cc += $opex_total_cost_center;
		    	$opex_total_per_cc1 += $opex_total_cost_center1;
		    	$opex_total_per_cc2 += $opex_total_cost_center2;

	    		$opex_total_cost_center_dif1 = $opex_total_cost_center - $opex_total_cost_center1;
	    		$opex_total_cost_center_dif2 = $opex_total_cost_center - $opex_total_cost_center2;

	    		/*$opex_total_cost_center_percent1 = $opex_total_cost_center1 != 0 && $opex_total_cost_center != 0 ? (($opex_total_cost_center_dif1/1000) / ($opex_total_cost_center1)/100) * 100 : 0;
	    		$opex_total_cost_center_percent2 = $opex_total_cost_center2 != 0 && $opex_total_cost_center != 0 ? (($opex_total_cost_center_dif2/1000) / ($opex_total_cost_center2/1000) * 100) : 0;*/

	    		$opex_total_cost_center_percent1 = round($opex_total_cost_center1/1000) != 0 && round($opex_total_cost_center/1000) != 0 ? (round($opex_total_cost_center_dif1/1000) / round($opex_total_cost_center1/1000) * 100) : 0;

	    		$opex_total_cost_center_percent2 = round($opex_total_cost_center2/1000) != 0 && round($opex_total_cost_center/1000) != 0 ? (round($opex_total_cost_center_dif2/1000) / round($opex_total_cost_center2/1000) * 100) : 0;

		    	$opex_cost_center_tbl .= '
		    	<tr>
	    			<td align="">' . $cost_center . '</td>
	    			<td align="right">' . number_format($opex_total_cost_center/1000) . '</td>
	    			<td align="right">' . number_format($opex_total_cost_center1/1000) . '</td>
	    			<td align="right">' . number_format($opex_total_cost_center2/1000) . '</td>
	    			<td align="right">' . number_format(($opex_total_cost_center_dif1/1000) * -1)  . '</td>
	    			<td align="right">' . number_format($opex_total_cost_center_percent1 * -1) . '%</td>
	    			<td align="right">' . number_format(($opex_total_cost_center_dif2/1000) * -1) . '</td>
	    			<td align="right">' . number_format($opex_total_cost_center_percent2 * -1) . '%</td>
	    		</tr>
	    		';

	    		$count_opex_cost_center++;
	    	}
	    }

	    $opex_sales_unit_per_cc = $sales_unit != 0 ? ($opex_total_per_cc / $sales_unit) : 100;
	    $opex_sales_unit_per_cc1 = $sales_unit1 != 0 ? ($opex_total_per_cc1 / $sales_unit1) : 100;
	    $opex_sales_unit_per_cc2 = $sales_unit2 != 0 ? ($opex_total_per_cc2 / $sales_unit2) : 100;
	    $opex_sales_unit_dif_per_cc1 = $opex_sales_unit_per_cc - $opex_sales_unit_per_cc1;
	    $opex_sales_unit_dif_per_cc2 = $opex_sales_unit_per_cc - $opex_sales_unit_per_cc2;
	    $opex_sales_unit_percent_cc1 = $opex_sales_unit_per_cc1 != 0 ? ($opex_sales_unit_dif_per_cc1 / $opex_sales_unit_per_cc1) * 100 : 100;
	    $opex_sales_unit_percent_cc2 = $opex_sales_unit_per_cc2 != 0 ? ($opex_sales_unit_dif_per_cc2 / $opex_sales_unit_per_cc2) * 100 : 100;

	    $opex_total_dif_per_cc1 = $opex_total_per_cc - $opex_total_per_cc1;
	    $opex_total_dif_per_cc2 = $opex_total_per_cc - $opex_total_per_cc2;
	    $opex_sales_percent_cc1 = $opex_total_per_cc1 != 0 ? ($opex_total_dif_per_cc1 / $opex_total_per_cc1) * 100 : 100;
	    $opex_sales_percent_cc2 = $opex_total_per_cc2 != 0 ? ($opex_total_dif_per_cc2 / $opex_total_per_cc2) * 100 : 100;

    	$opex_cost_center_tbl .= '
	    	<tr>
    			<td align=""><strong>Total</strong></td>
    			<td align="right"><strong>' . number_format($opex_total_per_cc/1000) . '</strong></td>
    			<td align="right"><strong>' . number_format($opex_total_per_cc1/1000) . '</strong></td>
    			<td align="right"><strong>' . number_format($opex_total_per_cc2/1000) . '</strong></td>
    			<td align="right"><strong>' . number_format(($opex_total_dif_per_cc1/1000) * -1) . '</strong></td>
    			<td align="right"><strong>' . number_format(($opex_sales_percent_cc1) * -1) . '%</strong></td>
    			<td align="right"><strong>' . number_format(($opex_total_dif_per_cc2/1000) * -1) . '</strong></td>
    			<td align="right"><strong>' . number_format(($opex_sales_percent_cc2) * -1) . '%</strong></td>
    		</tr>
    	';

    	$opex_cost_center_tbl .= '
	    	<tr>
    			<td align=""><strong>Ave. Cost/Unit</strong></td>
    			<td align="right"><strong>' . number_format($opex_sales_unit_per_cc, 2) . '</strong></td>
    			<td align="right"><strong>' . number_format($opex_sales_unit_per_cc1, 2) . '</strong></td>
    			<td align="right"><strong>' . number_format($opex_sales_unit_per_cc2, 2) . '</strong></td>
    			<td align="right"><strong>' . number_format(($opex_sales_unit_dif_per_cc1 * -1) / 1000, 2) . '</strong></td>
    			<td align="right"><strong>' . number_format($opex_sales_unit_percent_cc1 * -1) . '%</strong></td>
    			<td align="right"><strong>' . number_format(($opex_sales_unit_dif_per_cc2 * -1) / 1000, 2) . '</strong></td>
    			<td align="right"><strong>' . number_format($opex_sales_unit_percent_cc2 * -1) . '%</strong></td>
    		</tr>
    	';

	    $opex_cost_center_tbl .= '</table>';

	    return $opex_cost_center_tbl;
	}

	public function opex_gl_report_pdf($trans_id, $year, $pdf, $pdf_name, $report_type, $type = null, $trans_unit_id){
		$info = $this->_require_login();

		$opex_per_account_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th rowspan="2" align="center" width="30%"><strong>GL DESCRIPTION</strong></th>
	    			<th align="center" width="10%"><strong>BUDGET</strong></th>
	    			<th colspan="2" align="center" width="20%"><strong>ACTUAL</strong></th>
	    			<th colspan="4" align="center" width="40%"><strong>VARIANCE</strong></th>
	    		</tr>

	    		<tr>
	    			<td align="center"><strong>' . $year . '</strong></td>
	    			<td align="center"><strong>' . ($year - 1) . '</strong></td>
	    			<td align="center"><strong>' . ($year - 2) . '</strong></td>
	    			<td align="center"><strong>' . $year  . ' vs ' . ($year - 1) . '</strong></td>
	    			<td align="center"><strong>%</strong></td>
	    			<td align="center"><strong>' . ($year) . ' vs ' . ($year - 2) . '</strong></td>
	    			<td align="center"><strong>%</strong></td>
	    		</tr>
	    ';

	    if($type == 'NATIONAL'){
	    	$get_opex = $this->admin->get_query('
	    		SELECT SUM(dashboard_bc_opex_gl_amount) as dashboard_bc_opex_gl_amount, SUM(dashboard_bc_opex_gl_amount1) as dashboard_bc_opex_gl_amount1, SUM(dashboard_bc_opex_gl_amount2) as dashboard_bc_opex_gl_amount2, gl_sub_name
	    		FROM
	    			(
	    				SELECT SUM(a.dashboard_bc_opex_gl_amount) as dashboard_bc_opex_gl_amount, (a.dashboard_bc_opex_gl_amount1) as dashboard_bc_opex_gl_amount1, (a.dashboard_bc_opex_gl_amount2) as dashboard_bc_opex_gl_amount2, `b`.`gl_sub_name`, b.gl_sub_id
	    				FROM `dashboard_bc_opex_gl_tbl` `a`
	    				JOIN `gl_subgroup_tbl` `b` ON `a`.`gl_sub_id` = `b`.`gl_sub_id` AND `a`.`dashboard_bc_opex_gl_status` = 1 AND `a`.`dashboard_bc_trans_id` IN (' . $trans_id . ')
	    				GROUP BY `b`.`gl_sub_id`

	    				UNION

	    				SELECT SUM(a.dashboard_unit_opex_cost_center_amount) as dashboard_unit_opex_cost_center_amount, (a.dashboard_unit_opex_cost_center_amount1) as dashboard_unit_opex_cost_center_amount1, (a.dashboard_unit_opex_cost_center_amount2) as dashboard_unit_opex_cost_center_amount2, `b`.`gl_sub_name`, b.gl_sub_id

	    				FROM `dashboard_unit_opex_cost_center_tbl` `a`

	    				JOIN `gl_subgroup_tbl` `b` ON `a`.`gl_sub_id` = `b`.`gl_sub_id` AND `a`.`dashboard_unit_opex_cost_center_status` = 1 AND `a`.`dashboard_unit_trans_id` IN (' . $trans_unit_id . ')

	    				GROUP BY `b`.`gl_sub_id`
	    			) as opex
	    		GROUP BY opex.gl_sub_id
	    	');
			
		}else{
			$join_opex = array('gl_subgroup_tbl b' => 'a.gl_sub_id = b.gl_sub_id AND a.dashboard_bc_opex_gl_status = 1 AND a.dashboard_bc_trans_id IN (' . $trans_id . ')');
			$select_opex = 'SUM(a.dashboard_bc_opex_gl_amount) as dashboard_bc_opex_gl_amount, (a.dashboard_bc_opex_gl_amount1) as dashboard_bc_opex_gl_amount1, (a.dashboard_bc_opex_gl_amount2) as dashboard_bc_opex_gl_amount2, b.gl_sub_name';
			$group_opex = 'b.gl_sub_id';
			$get_opex = $this->admin->get_join('dashboard_bc_opex_gl_tbl a', $join_opex, FALSE, FALSE, $group_opex, $select_opex);
		}

		$opex_tbl = '';
		$count_opex_account = 1;
	    $opex_acc_overall = 0;
	    $opex_acc_overall1 = 0;
	    $opex_acc_overall2 = 0;
		foreach($get_opex as $row){
			$gl_sub_name = $row->gl_sub_name;
			$opex_acc_total = $row->dashboard_bc_opex_gl_amount;
			$opex_acc_total1 = $row->dashboard_bc_opex_gl_amount1;
			$opex_acc_total2 = $row->dashboard_bc_opex_gl_amount2;
			$opex_acc_dif1 = $opex_acc_total - $opex_acc_total1;
			$opex_acc_dif2 = $opex_acc_total - $opex_acc_total2;
			$opex_acc_per1 = $opex_acc_total1 != 0 && $opex_acc_total != 0 && ($opex_acc_total1 / 1000) > 1? ($opex_acc_dif1/$opex_acc_total1) * 100 : 0;
			$opex_acc_per2 = $opex_acc_total2 != 0 && $opex_acc_total != 0 && ($opex_acc_total2 / 1000) > 1 ? ($opex_acc_dif2/$opex_acc_total2) * 100 : 0;


			/*$opex_tbl .= '
	    		<tr>
	    			<td>' . $gl_sub_name . '</td>
	    			<td align="right">' . number_format($opex_acc_total) . '</td>
	    			<td align="right">' . number_format($opex_acc_total1) . '</td>
	    			<td align="right">' . number_format($opex_acc_total2) . '</td>
	    			<td align="right">' . number_format($opex_acc_dif1) . '</td>
	    			<td align="right">' . number_formaT($opex_acc_per1) . '%</td>
	    			<td align="right">' . number_format($opex_acc_dif2) . '</td>
	    			<td align="right">' . number_format($opex_acc_per2) . '%</td>
	    		</tr>

	    	';*/

	    	$opex_acc_overall += $opex_acc_total;
	    	$opex_acc_overall1 += $opex_acc_total1;
	    	$opex_acc_overall2 += $opex_acc_total2;

	    	/*$opex_acc_dif1 = ($opex_acc_total - $opex_acc_total1);
	    	$opex_acc_dif2 = ($opex_acc_total - $opex_acc_total2);
	    	$opex_acc_per1 = $opex_acc_total1 != 0 ? ($opex_acc_dif1/$opex_acc_total1) * 100 : 100;
	    	$opex_acc_per2 = $opex_acc_total2 != 0 ? ($opex_acc_dif2/$opex_acc_total2) * 100 : 100;*/

	    	$opex_per_account_tbl .= '
	    		<tr>
	    			<td>' . $row->gl_sub_name . '</td>
	    			<td align="right">' . number_format($opex_acc_total/1000) . '</td>
	    			<td align="right">' . number_format($opex_acc_total1/1000) . '</td>
	    			<td align="right">' . number_format($opex_acc_total2/1000) . '</td>
	    			<td align="right">' . number_format(($opex_acc_dif1/1000) * -1) . '</td>
	    			<td align="right">' . number_format($opex_acc_per1 * -1) . '%</td>
	    			<td align="right">' . number_format(($opex_acc_dif2/1000) * -1) . '</td>
	    			<td align="right">' . number_format($opex_acc_per2 * -1) . '%</td>
	    		</tr>

	    	';

	    	if($count_opex_account%19 == 0 && count($get_opex) != $count_opex_account){
	    		$opex_per_account_tbl .= '</table>';
	    		$pdf->writeHTML($opex_per_account_tbl, true, false, true, false, '');

	    		$this->watermark_landscape($pdf);
				$this->header_landscape($pdf);

				$pdf->AddPage('L');
				$pdf->SetTextColor(0,0,0);

			    $pdf->setFont('arialb', '', 12);
			    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
			    $pdf->Text(20, 46, 'COMPARATIVE OPERATING EXPENSES PER ACCOUNT');
			    $pdf->Text(20, 52, 'Budget ' . $year);

			    $pdf->SetFont('arial', '', 8);

		    	$opex_per_account_tbl = '<br /><br /><br /><br />
			    	<table border="1" cellpadding="3">
			    		<tr>
			    			<th rowspan="2" align="center" width="30%"><strong>GL DESCRIPTION</strong></th>
			    			<th align="center" width="10%"><strong>BUDGET</strong></th>
			    			<th colspan="2" align="center" width="20%"><strong>ACTUAL</strong></th>
			    			<th colspan="4" align="center" width="40%"><strong>VARIANCE</strong></th>
			    		</tr>

			    		<tr>
			    			<td align="center"><strong>' . $year . '</strong></td>
			    			<td align="center"><strong>' . ($year - 1) . '</strong></td>
			    			<td align="center"><strong>' . ($year - 2) . '</strong></td>
			    			<td align="center"><strong>' . $year  . ' vs ' . ($year - 1) . '</strong></td>
			    			<td align="center"><strong>%</strong></td>
			    			<td align="center"><strong>' . ($year) . ' vs ' . ($year - 2) . '</strong></td>
			    			<td align="center"><strong>%</strong></td>
			    		</tr>
			    ';
		    }elseif(count($get_opex) == $count_opex_account){

		    	$opex_acc_overall_dif1 = $opex_acc_overall - $opex_acc_overall1;
		    	$opex_acc_overall_dif2 = $opex_acc_overall - $opex_acc_overall2;
		    	$opex_acc_overall_per1 = $opex_acc_overall1 != 0 ? ($opex_acc_overall_dif1/$opex_acc_overall1) * 100 : 100;
		    	$opex_acc_overall_per2 = $opex_acc_overall2 != 0 ? ($opex_acc_overall_dif2/$opex_acc_overall2) * 100 : 100;
		    	$opex_per_account_tbl .= '
	    		<tr>
	    			<td><strong>Total:</strong></td>
	    			<td align="right"><strong>' . number_format($opex_acc_overall/1000) . '</strong></td>
	    			<td align="right"><strong>' . number_format($opex_acc_overall1/1000) . '</strong></td>
	    			<td align="right"><strong>' . number_format($opex_acc_overall2/1000) . '</strong></td>
	    			<td align="right"><strong>' . number_format(($opex_acc_overall_dif1/1000) * -1) . '</strong></td>
	    			<td align="right"><strong>' . number_format($opex_acc_overall_per1 * -1) . '%</strong></td>
	    			<td align="right"><strong>' . number_format(($opex_acc_overall_dif2/1000) * -1) . '</strong></td>
	    			<td align="right"><strong>' . number_format($opex_acc_overall_per2 * -1) . '%</strong></td>
	    		</tr>

	    	';

		    	$opex_per_account_tbl .= '</table>';
	    		$pdf->writeHTML($opex_per_account_tbl, true, false, true, false, '');

	    		$this->watermark_landscape($pdf);
				$this->header_landscape($pdf);
		    }

		    $count_opex_account++;

		}
	}

	public function capex_group_report_pdf($trans_id, $year, $type = null, $trans_unit_id = null){
		$info = $this->_require_login();

		if($type == 'NATIONAL'){
			$get_capex = $this->admin->get_query('
				SELECT ag_name, SUM(dashboard_bc_capex_group_total) as dashboard_bc_capex_group_total, SUM(dashboard_bc_capex_group_total1) as dashboard_bc_capex_group_total1, SUM(dashboard_bc_capex_group_total2) as dashboard_bc_capex_group_total2
				FROM
					(
						(SELECT `b`.`ag_name`, SUM(a.dashboard_bc_capex_group_total) as dashboard_bc_capex_group_total, SUM(a.dashboard_bc_capex_group_total1) as dashboard_bc_capex_group_total1, SUM(a.dashboard_bc_capex_group_total2) as dashboard_bc_capex_group_total2, b.ag_id
						FROM `dashboard_bc_capex_group_tbl` `a`
						JOIN `asset_group_tbl` `b` ON `a`.`ag_id` = `b`.`ag_id` AND `dashboard_bc_capex_group_status` = 1 AND `a`.`dashboard_bc_trans_id` IN (' . $trans_id . ')
						GROUP BY `b`.`ag_id`
						ORDER BY `b`.`ag_name`)

						UNION

						(SELECT `b`.`ag_name`, SUM(a.dashboard_unit_capex_group_total) as dashboard_unit_capex_group_total, SUM(a.dashboard_unit_capex_group_total1) as dashboard_unit_capex_group_total1, SUM(a.dashboard_unit_capex_group_total2) as dashboard_unit_capex_group_total2, b.ag_id
						FROM `dashboard_unit_capex_group_tbl` `a`
						JOIN `asset_group_tbl` `b` ON `a`.`ag_id` = `b`.`ag_id` AND `dashboard_unit_capex_group_status` = 1 AND `a`.`dashboard_unit_trans_id` IN (' . $trans_unit_id . ')
						GROUP BY `b`.`ag_id`
						ORDER BY `b`.`ag_name`)
					) capex

				GROUP BY capex.ag_id
				ORDER BY capex.ag_name

			');
		}else{

			$join_capex = array(
				'asset_group_tbl b' => 'a.ag_id = b.ag_id AND dashboard_bc_capex_group_status = 1 AND a.dashboard_bc_trans_id IN (' . $trans_id . ')'
			);
			$group_capex = 'b.ag_id';
			$select_capex = 'b.ag_name, SUM(a.dashboard_bc_capex_group_total) as dashboard_bc_capex_group_total, SUM(a.dashboard_bc_capex_group_total1) as dashboard_bc_capex_group_total1, SUM(a.dashboard_bc_capex_group_total2) as dashboard_bc_capex_group_total2';
			$get_capex = $this->admin->get_join('dashboard_bc_capex_group_tbl a',$join_capex, FALSE, 'b.ag_name', $group_capex, $select_capex);
		}
		
		$capex_grand_total = 0;
	    $capex_grand_total1 = 0;
	    $capex_grand_total2 = 0;

	    $capex_category_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="30%"><strong>ASSET TYPE</strong></th>
	    			<th align="center" width="10%"><strong>' . $year .'</strong></th>
	    			<th align="center" width="10%"><strong>' . ($year - 1) . '</strong></th>
	    			<th align="center" width="10%"><strong>' . ($year - 2) . '</strong></th>
	    			<th align="center" width="10%"><strong>Fav/(UnFav)</strong></th>
	    			<th align="center" width="10%"><strong>%</strong></th>
	    			<th align="center" width="10%"><strong>Fav/(UnFav)</strong></th>
	    			<th align="center" width="10%"><strong>%</strong></th>
	    		</tr>
	    ';

	    foreach($get_capex as $row_capex_cat){
	    	$capex_total = $row_capex_cat->dashboard_bc_capex_group_total;
	    	$capex_total1 = $row_capex_cat->dashboard_bc_capex_group_total1;
	    	$capex_total2 = $row_capex_cat->dashboard_bc_capex_group_total2;

	    	$capex_grand_total += $capex_total;
	    	$capex_grand_total1 += $capex_total1;
	    	$capex_grand_total2 += $capex_total2;

	    	$capex_dif1 =  $capex_total1 - $capex_total;
	    	$capex_dif2 =  $capex_total2 - $capex_total;
	    	$capex_per1 = $capex_total1 != 0 && $capex_total != 0 ? ($capex_dif1/$capex_total1) * 100 : 0;
	    	$capex_per2 = $capex_total2 != 0 && $capex_total != 0 ? ($capex_dif2/$capex_total2) * 100 : 0;

	    	$capex_category_tbl .= '
	    		<tr>
	    			<td>' . $row_capex_cat->ag_name . '</td>
	    			<td align="right">' . number_format($capex_total/1000) . '</td>
	    			<td align="right">' . number_format($capex_total1/1000) . '</td>
	    			<td align="right">' . number_format($capex_total2/1000) . '</td>
	    			<td align="right">' . number_format($capex_dif1/1000) . '</td>
	    			<td align="right">' . number_format($capex_per1) . '%</td>
	    			<td align="right">' . number_format($capex_dif2/1000) . '</td>
	    			<td align="right">' . number_format($capex_per2) . '%</td>
	    		</tr>

	    	';
	    }

	    $capex_total_dif1 = $capex_grand_total1 - $capex_grand_total;
	    $capex_total_dif2 = $capex_grand_total2 - $capex_grand_total;
	    $capex_total_per1 = $capex_grand_total1 != 0 ? ($capex_total_dif1/$capex_grand_total1) * 100 : 0;
	    $capex_total_per2 = $capex_grand_total2 != 0 ? ($capex_total_dif2/$capex_grand_total2) * 100 : 0;

	    $capex_category_tbl .= '
	    	<tr>
	    		<td><strong>TOTAL</strong></td>
	    		<td align="right"><strong>' . number_format($capex_grand_total/1000) . '</strong></td>
	    		<td align="right"><strong>' . number_format($capex_grand_total1/1000) . '</strong></td>
	    		<td align="right"><strong>' . number_format($capex_grand_total2/1000) . '</strong></td>
	    		<td align="right"><strong>' . number_format($capex_total_dif1/1000) . '</strong></td>
	    		<td align="right"><strong>' . number_format($capex_total_per1) . '%</strong></td>
	    		<td align="right"><strong>' . number_format($capex_total_dif2/1000) . '</strong></td>
	    		<td align="right"><strong>' . number_format($capex_total_per2) . '%</strong></td>
	    	</tr>
	    ';

	    $capex_category_tbl .= '</table>';

	    return $capex_category_tbl;
	}

	public function capex_item_report_pdf($trans_id, $year, $pdf, $pdf_name, $report_type, $type = null, $trans_unit_id){
		$info = $this->_require_login();

		if($type == 'NATIONAL'){
			$get_capex = $this->admin->get_query('
				SELECT ag_name, asg_name, SUM(dashboard_bc_capex_item_total) as dashboard_bc_capex_item_total, SUM(dashboard_bc_capex_item_qty) as dashboard_bc_capex_item_qty, SUM(dashboard_bc_capex_item_price) as dashboard_bc_capex_item_price

				FROM
					(
						(SELECT `c`.`ag_name`, `b`.`asg_name`, SUM(a.dashboard_bc_capex_item_total) as dashboard_bc_capex_item_total, SUM(a.dashboard_bc_capex_item_qty) as dashboard_bc_capex_item_qty, `dashboard_bc_capex_item_price`, b.asg_id
						FROM `dashboard_bc_capex_item_tbl` `a`
						JOIN `asset_subgroup_tbl` `b` ON `a`.`asg_id` = `b`.`asg_id` AND `dashboard_bc_capex_item_status` = 1 AND `a`.`dashboard_bc_trans_id` IN (' . $trans_id . ')
						JOIN `asset_group_tbl` `c` ON `b`.`ag_id` = `c`.`ag_id` GROUP BY `b`.`asg_id` ORDER BY `b`.`asg_name`)

						UNION

						(SELECT  `c`.`ag_name`, `b`.`asg_name`, SUM(a.dashboard_unit_capex_item_total) as dashboard_unit_capex_item_total, SUM(a.dashboard_unit_capex_item_qty) as dashboard_unit_capex_item_qty, `dashboard_unit_capex_item_price`, b.asg_id

						FROM `dashboard_unit_capex_item_tbl` `a`
						JOIN `asset_subgroup_tbl` `b` ON `a`.`asg_id` = `b`.`asg_id` AND `dashboard_unit_capex_item_status` = 1 AND `a`.`dashboard_unit_trans_id` IN (' . $trans_unit_id . ')
						JOIN `asset_group_tbl` `c` ON `b`.`ag_id` = `c`.`ag_id` GROUP BY `b`.`asg_id` ORDER BY `b`.`asg_name`)

					) capex
				GROUP BY capex.asg_id

			');
		}else{
			$join_capex = array(
				'asset_subgroup_tbl b' => 'a.asg_id = b.asg_id AND dashboard_bc_capex_item_status = 1 AND a.dashboard_bc_trans_id IN (' . $trans_id . ')',

				'asset_group_tbl c' => 'b.ag_id = c.ag_id'
			);
			$group_capex = 'b.asg_id';
			$select_capex = 'c.ag_name, b.asg_name, SUM(a.dashboard_bc_capex_item_total) as dashboard_bc_capex_item_total, SUM(a.dashboard_bc_capex_item_qty) as dashboard_bc_capex_item_qty, dashboard_bc_capex_item_price';
			$get_capex = $this->admin->get_join('dashboard_bc_capex_item_tbl a',$join_capex, FALSE, 'b.asg_name', $group_capex, $select_capex);
		}
		
		$capex_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="30%"><strong>ASSET GROUP</strong></th>
	    			<th align="center" width="30%"><strong>ITEM DESCRIPTION</strong></th>
	    			<th align="center" width="12%"><strong>QTY</strong></th>
	    			<th align="center" width="13%"><strong>COST</strong></th>
	    			<th align="center" width="15%"><strong>AMOUNT</strong></th>
	    		</tr>
	    ';
	    $count_capex = 1;
	    $total_capex = 0;
	    foreach($get_capex as $row_capex){

	    	$total_capex += $row_capex->dashboard_bc_capex_item_total;

	    	$capex_tbl .= '
	    		<tr>
	    			<td>' . $row_capex->ag_name . '</td>
	    			<td>' . $row_capex->asg_name . '</td>
	    			<td align="right">' . number_format($row_capex->dashboard_bc_capex_item_qty) . '</td>
	    			<td align="right">' . number_format($row_capex->dashboard_bc_capex_item_price) . '</td>
	    			<td align="right">' . number_format($row_capex->dashboard_bc_capex_item_total) . '</td>
	    		</tr>
	    	';

	    	if($count_capex%16 == 0 && count($get_capex) != $count_capex){
	    		$capex_tbl .= '</table>';
	    		$pdf->writeHTML($capex_tbl, true, false, true, false, '');

	    		$this->watermark($pdf);
				$this->header($pdf);

				$pdf->AddPage('P');

				$pdf->SetTextColor(0,0,0);

			    $pdf->setFont('arialb', '', 12);
			    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
			    $pdf->Text(20, 46, 'CAPITAL EXPENDITURES');
			    $pdf->Text(20, 52, 'Budget ' . $year);

			    $pdf->SetFont('arial', '', 10);

			    $capex_tbl = '<br /><br /><br /><br />
			    	<table border="1" cellpadding="3">
			    		<tr>
			    			<th align="center" width="30%"><strong>ASSET GROUP</strong></th>
			    			<th align="center" width="30%"><strong>ITEM DESCRIPTION</strong></th>
			    			<th align="center" width="12%"><strong>QTY</strong></th>
			    			<th align="center" width="13%"><strong>COST</strong></th>
			    			<th align="center" width="15%"><strong>AMOUNT</strong></th>
			    		</tr>
			    ';
		    }elseif(count($get_capex) == $count_capex){
		    	$capex_tbl .= '<tr><td align="right" colspan="5"><strong>' . number_format($total_capex) .'</strong></td></tr>';
		    	$capex_tbl .= '</table>';
	    		$pdf->writeHTML($capex_tbl, true, false, true, false, '');

	    		$this->watermark($pdf);
				$this->header($pdf);
		    }

		    $count_capex++;
	    }
	}

	public function manpower_report_pdf($trans_id, $year, $type = null, $trans_unit_id = null){
		$info = $this->_require_login();


		if($type == 'NATIONAL'){
			$get_manpower = $this->admin->get_query('
				SELECT *

				FROM
					(
						(SELECT SUM(a.dashboard_bc_manpower_unit_old ) as dashboard_bc_manpower_unit_old, SUM(a.dashboard_bc_manpower_unit_new) as dashboard_bc_manpower_unit_new, `a`.`dashboard_bc_manpower_unit_position`, `b`.`company_unit_name`, `c`.`rank_name`, d.bc_name
						FROM `dashboard_bc_manpower_unit_tbl` `a`
						JOIN `company_unit_tbl` `b` ON `a`.`company_unit_id` = `b`.`company_unit_id` AND `a`.`dashboard_bc_trans_id` IN (' . $trans_id . ') AND `a`.`dashboard_bc_manpower_unit_status` = 1
						JOIN `rank_tbl` `c` ON `a`.`rank_id` = `c`.`rank_id`
						JOIN `bc_tbl` `d` ON `a`.`bc_id` = `d`.`bc_id`
						GROUP BY `b`.`company_unit_id`, `a`.`dashboard_bc_manpower_unit_position`, `c`.`rank_id`
						ORDER BY d.bc_name, `b`.`company_unit_name`, `c`.`rank_name`, `a`.`dashboard_bc_manpower_unit_position`)

						UNION

						(SELECT SUM(a.dashboard_dept_manpower_unit_old ) as dashboard_dept_manpower_unit_old, SUM(a.dashboard_dept_manpower_unit_new) as dashboard_dept_manpower_unit_new, `a`.`dashboard_dept_manpower_unit_position`, `b`.`company_unit_name`, `c`.`rank_name`, b.company_unit_name
						FROM `dashboard_dept_manpower_unit_tbl` `a`
						JOIN `company_unit_tbl` `b` ON `a`.`company_unit_id` = `b`.`company_unit_id` AND `a`.`dashboard_unit_trans_id` IN (' . $trans_unit_id . ') AND `a`.`dashboard_dept_manpower_unit_status` = 1
						JOIN `rank_tbl` `c` ON `a`.`rank_id` = `c`.`rank_id`
						JOIN `cost_center_tbl` `d` ON `a`.`cost_center_id` = `d`.`cost_center_id`
						GROUP BY `b`.`company_unit_id`, `a`.`dashboard_dept_manpower_unit_position`, `c`.`rank_id`
						ORDER BY `b`.`company_unit_name`, `c`.`rank_name`, `a`.`dashboard_dept_manpower_unit_position`)
					) as manpower
			');

			$manpower_tbl = '<br /><br /><br /><br />
		    	<table border="1" cellpadding="3">
		    		<tr>
		    			<th align="center"><strong>LOCATION</strong></th>
		    			<th align="center"><strong>POSITION</strong></th>
		    			<th align="center"><strong>RANK</strong></th>
		    			<th align="center"><strong>' . ($year - 1) . '</strong></th>
		    			<th align="center"><strong>ADDL</strong></th>
		    			<th align="center"><strong>' . $year . '</strong></th>
		    		</tr>
		    ';

		    $manpower_grandtotal = 0;
		    $manpower_old_total = 0;
		    $manpower_new_total = 0;
		    foreach($get_manpower as $row_manpower){
		    	$manpower_old = $row_manpower->dashboard_bc_manpower_unit_old;
		    	$manpower_new = $row_manpower->dashboard_bc_manpower_unit_new;
		    	$manpower_total = $manpower_old + $manpower_new;

		    	$manpower_old_total += $manpower_old;
		    	$manpower_new_total += $manpower_new;
		    	$manpower_grandtotal += $manpower_total;
		    	$manpower_tbl .= '
		    		<tr>
		    			<td>' . $row_manpower->bc_name . '</td>
		    			<td>' . $row_manpower->dashboard_bc_manpower_unit_position . '</td>
		    			<td>' . $row_manpower->rank_name . '</td>
		    			<td align="center">' . number_format($manpower_old) . '</td>
		    			<td align="center">' . number_format($manpower_new) . '</td>
		    			<td align="center">' . number_format($manpower_total) . '</td>
		    		</tr>
		    	';
		    }
		    $manpower_tbl .= '
		    	<tr>
		    		<td></td>
		    		<td></td>
		    		<td></td>
		    		<td align="center"><strong>' . number_format($manpower_old_total) . '</strong></td>
		    		<td align="center"><strong>' . number_format($manpower_new_total) . '</strong></td>
		    		<td align="center"><strong>' . number_format($manpower_grandtotal) . '</strong></td>
		    	</tr>
		    ';

		    $manpower_tbl .= '</table>';
			
		}else{
			$join_manpower = array(
				'company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id AND a.dashboard_bc_trans_id IN (' . $trans_id . ') AND a.dashboard_bc_manpower_unit_status = 1',
				'rank_tbl c' => 'a.rank_id = c.rank_id'
			);
			$group_manpower = 'b.company_unit_id, a.dashboard_bc_manpower_unit_position, c.rank_id';
			$select_manpower = 'SUM(a.dashboard_bc_manpower_unit_old ) as dashboard_bc_manpower_unit_old , SUM(a.dashboard_bc_manpower_unit_new) as dashboard_bc_manpower_unit_new, a.dashboard_bc_manpower_unit_position, b.company_unit_name, c.rank_name ';
			$order_manpower = 'b.company_unit_name, c.rank_name, a.dashboard_bc_manpower_unit_position';

			$get_manpower = $this->admin->get_join('dashboard_bc_manpower_unit_tbl a', $join_manpower, FALSE, $order_manpower, $group_manpower, $select_manpower);

			$manpower_tbl = '<br /><br /><br /><br />
		    	<table border="1" cellpadding="3">
		    		<tr>
		    			<th align="center"><strong>DEPARTMENT</strong></th>
		    			<th align="center"><strong>POSITION</strong></th>
		    			<th align="center"><strong>RANK</strong></th>
		    			<th align="center"><strong>' . ($year - 1) . '</strong></th>
		    			<th align="center"><strong>ADDL</strong></th>
		    			<th align="center"><strong>' . $year . '</strong></th>
		    		</tr>
		    ';

		    $manpower_grandtotal = 0;
		    $manpower_old_total = 0;
		    $manpower_new_total = 0;
		    foreach($get_manpower as $row_manpower){
		    	$manpower_old = $row_manpower->dashboard_bc_manpower_unit_old;
		    	$manpower_new = $row_manpower->dashboard_bc_manpower_unit_new;
		    	$manpower_total = $manpower_old + $manpower_new;

		    	$manpower_old_total += $manpower_old;
		    	$manpower_new_total += $manpower_new;
		    	$manpower_grandtotal += $manpower_total;
		    	$manpower_tbl .= '
		    		<tr>
		    			<td>' . $row_manpower->company_unit_name . '</td>
		    			<td>' . $row_manpower->dashboard_bc_manpower_unit_position . '</td>
		    			<td>' . $row_manpower->rank_name . '</td>
		    			<td align="center">' . number_format($manpower_old) . '</td>
		    			<td align="center">' . number_format($manpower_new) . '</td>
		    			<td align="center">' . number_format($manpower_total) . '</td>
		    		</tr>
		    	';
		    }
		    $manpower_tbl .= '
		    	<tr>
		    		<td></td>
		    		<td></td>
		    		<td></td>
		    		<td align="center"><strong>' . number_format($manpower_old_total) . '</strong></td>
		    		<td align="center"><strong>' . number_format($manpower_new_total) . '</strong></td>
		    		<td align="center"><strong>' . number_format($manpower_grandtotal) . '</strong></td>
		    	</tr>
		    ';

		    $manpower_tbl .= '</table>';
		}

		$manpower_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center"><strong>DEPARTMENT</strong></th>
	    			<th align="center"><strong>POSITION</strong></th>
	    			<th align="center"><strong>RANK</strong></th>
	    			<th align="center"><strong>' . ($year - 1) . '</strong></th>
	    			<th align="center"><strong>ADDL</strong></th>
	    			<th align="center"><strong>' . $year . '</strong></th>
	    		</tr>
	    ';

	    $manpower_grandtotal = 0;
	    $manpower_old_total = 0;
	    $manpower_new_total = 0;
	    foreach($get_manpower as $row_manpower){
	    	$manpower_old = $row_manpower->dashboard_bc_manpower_unit_old;
	    	$manpower_new = $row_manpower->dashboard_bc_manpower_unit_new;
	    	$manpower_total = $manpower_old + $manpower_new;

	    	$manpower_old_total += $manpower_old;
	    	$manpower_new_total += $manpower_new;
	    	$manpower_grandtotal += $manpower_total;
	    	$manpower_tbl .= '
	    		<tr>
	    			<td>' . $row_manpower->company_unit_name . '</td>
	    			<td>' . $row_manpower->dashboard_bc_manpower_unit_position . '</td>
	    			<td>' . $row_manpower->rank_name . '</td>
	    			<td align="center">' . number_format($manpower_old) . '</td>
	    			<td align="center">' . number_format($manpower_new) . '</td>
	    			<td align="center">' . number_format($manpower_total) . '</td>
	    		</tr>
	    	';
	    }
	    $manpower_tbl .= '
	    	<tr>
	    		<td></td>
	    		<td></td>
	    		<td></td>
	    		<td align="center"><strong>' . number_format($manpower_old_total) . '</strong></td>
	    		<td align="center"><strong>' . number_format($manpower_new_total) . '</strong></td>
	    		<td align="center"><strong>' . number_format($manpower_grandtotal) . '</strong></td>
	    	</tr>
	    ';

	    $manpower_tbl .= '</table>';

	    return $manpower_tbl;
	}

	public function dl_noi($type = 'BC', $year = null, $id = null){
		$info = $this->_require_login();
		$user_type = decode($info['user_type_id']);
		$type = decode($type);
		$year = decode($year);

		$trans_unit_id = '';
 		if($type == 'BC'){
			$trans_id = decode($id);
			if($user_type == 2){
				$user_info = $this->get_user_info();
				$user_bc_id = $user_info['bc_id'];

				$join_trans = array('bc_tbl b' => 'a.bc_id = b.bc_id AND a.dashboard_trans_status_id = 3 AND a.bc_id = ' . $user_bc_id . ' AND a.dashboard_bc_trans_id = ' . $trans_id);
			}elseif($user_type == 6){
				$user_info = $this->get_user_info();
				$user_region_id = $user_info['region_id'];

				$join_trans = array(
					'bc_tbl b' => 'a.bc_id = b.bc_id AND a.dashboard_trans_status_id = 3 AND a.bc_id AND a.dashboard_bc_trans_id = ' . $trans_id,
					'region_tbl c' => 'b.region_id = c.region_id AND c.region_id = ' . $user_region_id
				);
			}elseif($user_type == 1 || $user_type == 7){
				$join_trans = array('bc_tbl b' => 'a.bc_id = b.bc_id AND a.dashboard_trans_status_id = 3 AND a.dashboard_bc_trans_id = ' . $trans_id);
			}else{
				echo "Sorry you don't have access to this report.";
				exit;
			}

			$check_trans = $this->admin->check_join('dashboard_bc_transaction_tbl a', $join_trans, TRUE);
			if($check_trans['result'] == TRUE){
				$bc_id = $check_trans['info']->bc_id;
				$bc_code = $check_trans['info']->bc_code;
				$pdf_name = $check_trans['info']->bc_name;
				$report_type = 'BUSINESS CENTER';
				$year = $check_trans['info']->dashboard_bc_trans_year;
				$cost_center_id = $this->get_bc_cost_center($bc_id);
			}else{
				echo 'Invalid Transaction. Please try again!';
				exit;
			}
		}elseif($type == 'REGIONAL'){
			$id = decode($id);

			if($user_type == 1 || $user_type == 7){
				$get_trans_det = $this->get_trans_region($id);
			}elseif($user_type == 6){
				$user_info = $this->get_user_info();
				$user_region_id = $user_info['region_id'];
				if($user_region_id == $id){
					$get_trans_det = $this->get_trans_region($id);
				}else{
					echo "Sorry you don't have access to this report.";
					exit;
				}
			}else{
				echo "Sorry you don't have access to this report.";
				exit;
			}

			$trans_id = $get_trans_det['trans_id'];
			$pdf_name = $get_trans_det['region_name'];
			$report_type = 'REGION';
			$get_details = $this->get_region_cost_center($id);
			$cost_center_id = $get_details['cost_center'];
			$bc_id = $get_details['bc'];
		}elseif($type == 'NATIONAL'){
			if($user_type == 1 || $user_type == 7){
				$pdf_name = 'NATIONAL';
				$report_type = '';
				$get_details = $this->get_trans_national();
				$trans_id = $get_details['trans_id'];
				$get_details = $this->get_national_cost_center($id);
				$cost_center_id = $get_details['cost_center'];
				$bc_id = $get_details['bc'];

				$trans_unit_id = $this->get_trans_unit_national();
			}else{
				echo "Sorry you don't have access to this report.";
				exit;
			}
		}

		$get_noi = $this->get_noi_data($trans_id, $year, 'PDF', $type, $trans_unit_id, $id);

		$this->_noi_segment_monthly_excel($trans_id, $cost_center_id, $year, $get_noi);
	}

	public function _noi_segment_monthly_excel($trans_id, $cost_center_id, $year, $get_noi){
    	$select_summary = 'SUM(dashboard_brand_summary_sales_unit) as sales_unit, SUM(dashboard_brand_summary_net_sales) as net_sales, SUM(dashboard_brand_summary_variable_cost) as variable_cost';

	    $get_brand_summary_com = $this->admin->check_data('dashboard_brand_summary_tbl', 'brand_id IN (2, 10, 11, 12, 14, 16, 17, 18) AND dashboard_bc_trans_id IN (' . $trans_id . ')  AND dashboard_brand_summary_status = 1', TRUE, $select_summary);

	    $com_net_sales = 0;
	    $com_variable_cost = 0;
	    $com_sales_unit = 0;
	    $com_nsp = 0;
	    $com_variable_unit = 0;
	    $com_margin = 0;
	    $com_margin_unit = 0;
	    $com_margin_percent = 0;

	    if($get_brand_summary_com['result'] == TRUE){
	    	$com_net_sales = $get_brand_summary_com['info']->net_sales;
	    	$com_sales_unit = $get_brand_summary_com['info']->sales_unit;
	    	$com_variable_cost = $get_brand_summary_com['info']->variable_cost;
	    	$com_nsp = $com_sales_unit > 0 ? $com_net_sales / $com_sales_unit : 0;
	    	$com_variable_unit = $com_sales_unit > 0 ? $com_variable_cost / $com_sales_unit : 0;
	    	$com_margin = $com_net_sales - $com_variable_cost;
	    	$com_margin_unit = $com_sales_unit > 0 ?  $com_margin / $com_sales_unit : 0;
	    	$com_margin_percent = $com_net_sales > 0 ? ($com_margin / $com_net_sales) * 100 : 0;
	    }

	    $select_summary_period = 'SUM(dashboard_opex_amount) as total_period_cost';

	    $where_brand_period_com = 'cost_center_group_id = 1 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_opex_status = 1';
	    $get_brand_period_com = $this->admin->check_data('dashboard_opex_tbl', $where_brand_period_com, TRUE, $select_summary_period);

	    $com_period = 0;
	    $com_period_unit = 0;
	    if($get_brand_period_com['result'] == TRUE){

	    	//Get COM Allocation Period Cost
		    $com_allocation = $this->_get_segment_allocation($trans_id, 1, $year);
		    //$com_allocation = 0;

	    	$com_period = $get_brand_period_com['info']->total_period_cost + ($com_allocation);
	    	$com_period_unit = $com_sales_unit > 0 ?  $com_period / $com_sales_unit : 0;
	    }

	    $com_noi = $com_margin - $com_period;
	    $com_noi_unit = $com_sales_unit > 0 ? $com_noi / $com_sales_unit: 0;
	    $com_noi_percent = $com_net_sales > 0 ? ($com_noi / $com_net_sales) * 100 : 0;
	    $where_brand_summary_ctg = 'brand_id = 1 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_brand_summary_status = 1';
	    $get_brand_summary_ctg = $this->admin->check_data('dashboard_brand_summary_tbl', $where_brand_summary_ctg, TRUE, $select_summary);

	    $ctg_net_sales = 0;
	    $ctg_variable_cost = 0;
	    $ctg_sales_unit = 0;
	    $ctg_nsp = 0;
	    $ctg_variable_unit = 0;
	    $ctg_margin = 0;
	    $ctg_margin_unit = 0;
	    $ctg_margin_percent = 0;
	    if($get_brand_summary_ctg['result'] == TRUE){
	    	$ctg_net_sales = $get_brand_summary_ctg['info']->net_sales;
	    	$ctg_sales_unit = $get_brand_summary_ctg['info']->sales_unit;
	    	$ctg_variable_cost = $get_brand_summary_ctg['info']->variable_cost;
	    	$ctg_nsp = $ctg_sales_unit > 0 ? $ctg_net_sales / $ctg_sales_unit : 0;
	    	$ctg_variable_unit = $ctg_sales_unit > 0 ? $ctg_variable_cost / $ctg_sales_unit : 0;
	    	$ctg_margin = $ctg_net_sales - $ctg_variable_cost;
	    	$ctg_margin_unit = $ctg_sales_unit > 0 ?  $ctg_margin / $ctg_sales_unit : 0;
	    	$ctg_margin_percent = $ctg_net_sales > 0 ? ($ctg_margin / $ctg_net_sales) * 100 : 0;
	    }

	    $where_brand_period_ctg = 'cost_center_group_id = 2 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_opex_status = 1';
	    $get_brand_period_ctg = $this->admin->check_data('dashboard_opex_tbl', $where_brand_period_ctg, TRUE, $select_summary_period);

	    $ctg_period = 0;
	    $ctg_period_unit = 0;
	    if($get_brand_period_ctg['result'] == TRUE){

	    	$ctg_allocation = $this->_get_segment_allocation($trans_id, 2, $year);
	    	//$ctg_allocation = 0;

	    	$ctg_period = $get_brand_period_ctg['info']->total_period_cost + ($ctg_allocation);
	    	$ctg_period_unit = $ctg_sales_unit > 0 ?  $ctg_period / $ctg_sales_unit : 0;
	    }

	    $ctg_noi = $ctg_margin - $ctg_period;
	    $ctg_noi_unit = $ctg_sales_unit > 0 ? $ctg_noi / $ctg_sales_unit: 0;
	    $ctg_noi_percent = $ctg_net_sales > 0 ? ($ctg_noi / $ctg_net_sales) * 100 : 0;

	    $where_brand_summary_ur = 'brand_id = 5 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_brand_summary_status = 1';
	    $get_brand_summary_ur = $this->admin->check_data('dashboard_brand_summary_tbl', $where_brand_summary_ur, TRUE, $select_summary);

	    $ur_net_sales = 0;
	    $ur_sales_unit = 0;
	    $ur_variable_cost = 0;
	    $ur_nsp = 0;
	    $ur_variable_unit = 0;
	    $ur_margin = 0;
	    $ur_margin_unit = 0;
	    $ur_margin_percent = 0;
	    if($get_brand_summary_ur['result'] == TRUE){
	    	$ur_net_sales = $get_brand_summary_ur['info']->net_sales;
	    	$ur_sales_unit = $get_brand_summary_ur['info']->sales_unit;
	    	$ur_variable_cost = $get_brand_summary_ur['info']->variable_cost;
	    	$ur_nsp = $ur_sales_unit > 0 ? $ur_net_sales / $ur_sales_unit : 0;
	    	$ur_variable_unit = $ur_sales_unit > 0 ? $ur_variable_cost / $ur_sales_unit : 0;
	    	$ur_margin = $ur_net_sales - $ur_variable_cost;
	    	$ur_margin_unit = $ur_sales_unit > 0 ?  $ur_margin / $ur_sales_unit : 0;
	    	$ur_margin_percent = $ur_net_sales > 0 ? ($ur_margin / $ur_net_sales) * 100 : 0;
	    }

	    $where_brand_period_ur = 'cost_center_group_id = 3 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_opex_status = 1';
	    $get_brand_period_ur = $this->admin->check_data('dashboard_opex_tbl', $where_brand_period_ur, TRUE, $select_summary_period);

	    $ur_period = 0;
	    $ur_period_unit = 0;
	    if($get_brand_period_ur['result'] == TRUE){
	    	$ur_allocation = $this->_get_segment_allocation($trans_id, 3, $year);
	    	//$ur_allocation = 0;

	    	$ur_period = $get_brand_period_ur['info']->total_period_cost + ($ur_allocation);
	    	$ur_period_unit = $ur_sales_unit > 0 ?  $ur_period / $ur_sales_unit : 0;
	    }

	    $ur_noi = $ur_margin - $ur_period;
	    $ur_noi_unit = $ur_sales_unit > 0 ? $ur_noi / $ur_sales_unit: 0;
	    $ur_noi_percent = $ur_net_sales > 0 ? ($ur_noi / $ur_net_sales) * 100 : 0;

	    $where_brand_summary_rsl = 'brand_id = 15 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_brand_summary_status = 1';
	    $get_brand_summary_rsl = $this->admin->check_data('dashboard_brand_summary_tbl', $where_brand_summary_rsl, TRUE, $select_summary);

	    $rsl_net_sales = 0;
	    $rsl_sales_unit = 0;
	    $rsl_variable_cost = 0;
	    $rsl_nsp = 0;
	    $rsl_variable_unit = 0;
	    $rsl_margin = 0;
	    $rsl_margin_unit = 0;
	    $rsl_margin_percent = 0;
	    if($get_brand_summary_rsl['result'] == TRUE){
	    	$rsl_net_sales = $get_brand_summary_rsl['info']->net_sales;
	    	$rsl_sales_unit = $get_brand_summary_rsl['info']->sales_unit;
	    	$rsl_variable_cost = $get_brand_summary_rsl['info']->variable_cost;
	    	$rsl_nsp = $rsl_sales_unit > 0 ? $rsl_net_sales / $rsl_sales_unit : 0;
	    	$rsl_variable_unit = $rsl_sales_unit > 0 ? $rsl_variable_cost / $rsl_sales_unit : 0;
	    	$rsl_margin = $rsl_net_sales - $rsl_variable_cost;
	    	$rsl_margin_unit = $rsl_sales_unit > 0 ?  $rsl_margin / $rsl_sales_unit : 0;
	    	$rsl_margin_percent = $rsl_net_sales > 0 ? ($rsl_margin / $rsl_net_sales) * 100 : 0;
	    }

	    $where_brand_period_rsl = 'cost_center_group_id = 7 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_opex_status = 1';
	    $get_brand_period_rsl = $this->admin->check_data('dashboard_opex_tbl', $where_brand_period_rsl, TRUE, $select_summary_period);

	    $rsl_period = 0;
	    $rsl_period_unit = 0;
	    if($get_brand_period_rsl['result'] == TRUE){
	    	$rsl_allocation = $this->_get_segment_allocation($trans_id, 7, $year);
	    	//$rsl_allocation = 0;

	    	$rsl_period = $get_brand_period_rsl['info']->total_period_cost + ($rsl_allocation);
	    	$rsl_period_unit = $rsl_sales_unit > 0 ?  $rsl_period / $rsl_sales_unit : 0;
	    }

	    $rsl_noi = $rsl_margin - $rsl_period;
	    $rsl_noi_unit = $rsl_sales_unit > 0 ? $rsl_noi / $rsl_sales_unit: 0;
	    $rsl_noi_percent = $rsl_net_sales > 0 ? ($rsl_noi / $rsl_net_sales) * 100 : 0;


	    $where_brand_summary_hei = 'brand_id = 19 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_brand_summary_status = 1';
	    $get_brand_summary_hei = $this->admin->check_data('dashboard_brand_summary_tbl', $where_brand_summary_hei, TRUE, $select_summary);

	    $hei_net_sales = 0;
	    $hei_variable_cost = 0;
	    $hei_sales_unit = 0;
	    $hei_nsp = 0;
	    $hei_variable_unit = 0;
	    $hei_margin = 0;
	    $hei_margin_unit = 0;
	    $hei_margin_percent = 0;
	    if($get_brand_summary_hei['result'] == TRUE){
	    	$hei_net_sales = $get_brand_summary_hei['info']->net_sales;
	    	$hei_sales_unit = $get_brand_summary_hei['info']->sales_unit;
	    	$hei_variable_cost = $get_brand_summary_hei['info']->variable_cost;
	    	$hei_nsp = $hei_sales_unit > 0 ? $hei_net_sales / $hei_sales_unit : 0;
	    	$hei_variable_unit = $hei_sales_unit > 0 ? $hei_variable_cost / $hei_sales_unit : 0;
	    	$hei_margin = $hei_net_sales - $hei_variable_cost;
	    	$hei_margin_unit = $hei_sales_unit > 0 ?  $hei_margin / $hei_sales_unit : 0;
	    	$hei_margin_percent = $hei_net_sales > 0 ? ($hei_margin / $hei_net_sales) * 100 : 0;
	    }

	    $where_brand_period_hei = 'cost_center_group_id = 9 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_opex_status = 1';
	    $get_brand_period_hei = $this->admin->check_data('dashboard_opex_tbl', $where_brand_period_hei, TRUE, $select_summary_period);

	    $hei_period = 0;
	    $hei_period_unit = 0;
	    if($get_brand_period_hei['result'] == TRUE){

	    	$hei_allocation = $this->_get_segment_allocation($trans_id, 9, $year);
	    	//$ctg_allocation = 0;

	    	$hei_period = $get_brand_period_hei['info']->total_period_cost + ($hei_allocation);
	    	$hei_period_unit = $hei_sales_unit > 0 ?  $hei_period / $hei_sales_unit : 0;
	    }

	    $hei_noi = $hei_margin - $hei_period;
	    $hei_noi_unit = $hei_sales_unit > 0 ? $hei_noi / $hei_sales_unit: 0;
	    $hei_noi_percent = $hei_net_sales > 0 ? ($hei_noi / $hei_net_sales) * 100 : 0;
	    
		
		$where_brand_summary_exp = 'brand_id = 21 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_brand_summary_status = 1';
	    $get_brand_summary_exp = $this->admin->check_data('dashboard_brand_summary_tbl', $where_brand_summary_exp, TRUE, $select_summary);

	    $exp_net_sales = 0;
	    $exp_variable_cost = 0;
	    $exp_sales_unit = 0;
	    $exp_nsp = 0;
	    $exp_variable_unit = 0;
	    $exp_margin = 0;
	    $exp_margin_unit = 0;
	    $exp_margin_percent = 0;
	    if($get_brand_summary_exp['result'] == TRUE){
	    	$exp_net_sales = $get_brand_summary_exp['info']->net_sales;
	    	$exp_sales_unit = $get_brand_summary_exp['info']->sales_unit;
	    	$exp_variable_cost = $get_brand_summary_exp['info']->variable_cost;
	    	$exp_nsp = $exp_sales_unit > 0 ? $exp_net_sales / $exp_sales_unit : 0;
	    	$exp_variable_unit = $exp_sales_unit > 0 ? $exp_variable_cost / $exp_sales_unit : 0;
	    	$exp_margin = $exp_net_sales - $exp_variable_cost;
	    	$exp_margin_unit = $exp_sales_unit > 0 ?  $exp_margin / $exp_sales_unit : 0;
	    	$exp_margin_percent = $exp_net_sales > 0 ? ($exp_margin / $exp_net_sales) * 100 : 0;
	    }

	    $where_brand_period_exp = 'cost_center_group_id = 11 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_opex_status = 1';
	    $get_brand_period_exp = $this->admin->check_data('dashboard_opex_tbl', $where_brand_period_exp, TRUE, $select_summary_period);

	    $exp_period = 0;
	    $exp_period_unit = 0;
	    if($get_brand_period_exp['result'] == TRUE){

	    	$exp_allocation = $this->_get_segment_allocation($trans_id, 11, $year);
	    	//$ctg_allocation = 0;

	    	$exp_period = $get_brand_period_exp['info']->total_period_cost + ($exp_allocation);
	    	$exp_period_unit = $exp_sales_unit > 0 ?  $exp_period / $exp_sales_unit : 0;
	    }

	    $exp_noi = $exp_margin - $exp_period;
	    $exp_noi_unit = $exp_sales_unit > 0 ? $exp_noi / $exp_sales_unit: 0;
	    $exp_noi_percent = $exp_net_sales > 0 ? ($exp_noi / $exp_net_sales) * 100 : 0;


	    $where_brand_summary_chk = 'brand_id = 20 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_brand_summary_status = 1';
	    $get_brand_summary_chk = $this->admin->check_data('dashboard_brand_summary_tbl', $where_brand_summary_chk, TRUE, $select_summary);

	    $chk_net_sales = 0;
	    $chk_variable_cost = 0;
	    $chk_sales_unit = 0;
	    $chk_nsp = 0;
	    $chk_variable_unit = 0;
	    $chk_margin = 0;
	    $chk_margin_unit = 0;
	    $chk_margin_percent = 0;
	    if($get_brand_summary_chk['result'] == TRUE){
	    	$chk_net_sales = $get_brand_summary_chk['info']->net_sales;
	    	$chk_sales_unit = $get_brand_summary_chk['info']->sales_unit;
	    	$chk_variable_cost = $get_brand_summary_chk['info']->variable_cost;
	    	$chk_nsp = $chk_sales_unit > 0 ? $chk_net_sales / $chk_sales_unit : 0;
	    	$chk_variable_unit = $chk_sales_unit > 0 ? $chk_variable_cost / $chk_sales_unit : 0;
	    	$chk_margin = $chk_net_sales - $chk_variable_cost;
	    	$chk_margin_unit = $chk_sales_unit > 0 ?  $chk_margin / $chk_sales_unit : 0;
	    	$chk_margin_percent = $chk_net_sales > 0 ? ($chk_margin / $chk_net_sales) * 100 : 0;
	    }

	    $where_brand_period_chk = 'cost_center_group_id = 10 AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_opex_status = 1';
	    $get_brand_period_chk = $this->admin->check_data('dashboard_opex_tbl', $where_brand_period_chk, TRUE, $select_summary_period);

	    $chk_period = 0;
	    $chk_period_unit = 0;
	    if($get_brand_period_chk['result'] == TRUE){

	    	$chk_allocation = $this->_get_segment_allocation($trans_id, 10, $year);
	    	//$ctg_allocation = 0;

	    	$chk_period = $get_brand_period_chk['info']->total_period_cost + ($chk_allocation);
	    	$chk_period_unit = $chk_sales_unit > 0 ?  $chk_period / $chk_sales_unit : 0;
	    }

	    $chk_noi = $chk_margin - $chk_period;
	    $chk_noi_unit = $chk_sales_unit > 0 ? $chk_noi / $chk_sales_unit: 0;
	    $chk_noi_percent = $chk_net_sales > 0 ? ($chk_noi / $chk_net_sales) * 100 : 0;

	   	$sales_unit = $get_noi['sales_unit'];
	   	$net_sales = $get_noi['net_sales'];
	   	$nsp = $get_noi['nsp'];
	   	$variable_cost = $get_noi['variable_cost'];
	   	$variable_cost_unit = $get_noi['variable_cost_unit'];
	   	$margin = $get_noi['margin'];
	   	$margin_unit = $get_noi['margin_unit'];
	   	$margin_percent = $get_noi['margin_percent'];
	   	$period_cost = $get_noi['period_cost'];
	   	$period_cost_unit = $get_noi['period_cost_unit'];
	   	$noi = $get_noi['noi'];
	   	$noi_unit = $get_noi['noi_unit'];
	   	$noi_percent = $get_noi['noi_percent'];

	   	$variable = $this->_get_variable_cost($trans_id);

	   	$cost_of_sales = $variable['cost_of_sales'];
	   	$cost_of_sales_unit = $sales_unit > 0 ? $cost_of_sales / $sales_unit : 0;
		$factory = $variable['factory'];
		$factory_unit = $sales_unit > 0 ? $factory / $sales_unit : 0;
		$packaging = $variable['packaging'];
		$packaging_unit = $sales_unit > 0 ? $packaging / $sales_unit : 0;
		$light = $variable['light'];
		$light_unit = $sales_unit > 0 ? $light / $sales_unit : 0;
		$lpg = $variable['lpg'];
		$lpg_unit = $sales_unit > 0 ? $lpg / $sales_unit : 0;
		$blast = $variable['blast'];
		$blast_unit = $sales_unit > 0 ? $blast / $sales_unit : 0;
		$freight = $variable['freight'];
		$freight_unit = $sales_unit > 0 ? $freight / $sales_unit : 0;
		$commission = $variable['commission'];
		$commission_unit = $sales_unit > 0 ? $commission / $sales_unit : 0;
		$distribution = $variable['distribution'];
		$distribution_unit = $sales_unit > 0 ? $distribution / $sales_unit : 0;

		$ctg_cost_of_sales = $variable['ctg_cost_of_sales'];
		$ctg_cost_of_sales_unit = $ctg_sales_unit > 0 ? $ctg_cost_of_sales / $ctg_sales_unit : 0;
		$ctg_factory = $variable['ctg_factory'];
		$ctg_factory_unit = $ctg_sales_unit > 0 ? $ctg_factory / $ctg_sales_unit : 0;
		$ctg_packaging = $variable['ctg_packaging'];
		$ctg_packagin_unit = $ctg_sales_unit > 0 ? $ctg_packaging / $ctg_sales_unit : 0;
		$ctg_light = $variable['ctg_light'];
		$ctg_light_unit = $ctg_sales_unit > 0 ? $ctg_light / $ctg_sales_unit : 0;
		$ctg_lpg = $variable['ctg_lpg'];
		$ctg_lpg_unit = $ctg_sales_unit > 0 ? $ctg_lpg / $ctg_sales_unit : 0;
		$ctg_blast = $variable['ctg_blast'];
		$ctg_blast_unit = $ctg_sales_unit > 0 ? $ctg_blast / $ctg_sales_unit : 0;
		$ctg_freight = $variable['ctg_freight'];
		$ctg_freight_unit = $ctg_sales_unit > 0 ? $ctg_freight / $ctg_sales_unit : 0;
		$ctg_commission = $variable['ctg_commission'];
		$ctg_commission_unit = $ctg_sales_unit > 0 ? $ctg_commission / $ctg_sales_unit : 0;
		$ctg_distribution = $variable['ctg_distribution'];
		$ctg_distribution_unit = $ctg_sales_unit > 0 ? $ctg_distribution / $ctg_sales_unit : 0;

		$ur_cost_of_sales = $variable['ur_cost_of_sales'];
		$ur_cost_of_sales_unit = $ur_sales_unit > 0 ? $ur_cost_of_sales / $ur_sales_unit : 0;
		$ur_factory = $variable['ur_factory'];
		$ur_factory_unit = $ur_sales_unit > 0 ? $ur_factory / $ur_sales_unit : 0;
		$ur_packaging = $variable['ur_packaging'];
		$ur_packaging_unit = $ur_sales_unit > 0 ? $ur_packaging / $ur_sales_unit : 0;
		$ur_light = $variable['ur_light'];
		$ur_light_unit = $ur_sales_unit > 0 ? $ur_light / $ur_sales_unit : 0;
		$ur_lpg = $variable['ur_lpg'];
		$ur_lpg_unit = $ur_sales_unit > 0 ? $ur_lpg / $ur_sales_unit : 0;
		$ur_blast = $variable['ur_blast'];
		$ur_blast_unit = $ur_sales_unit > 0 ? $ur_blast / $ur_sales_unit : 0;
		$ur_freight = $variable['ur_freight'];
		$ur_freight_unit = $ur_sales_unit > 0 ? $ur_freight / $ur_sales_unit : 0;
		$ur_commission = $variable['ur_commission'];
		$ur_commission_unit = $ur_sales_unit > 0 ? $ur_commission / $ur_sales_unit : 0;
		$ur_distribution = $variable['ur_distribution'];
		$ur_distribution_unit = $ur_sales_unit > 0 ? $ur_distribution / $ur_sales_unit : 0;

		$rsl_cost_of_sales = $variable['rsl_cost_of_sales'];
		$rsl_cost_of_sales_unit = $rsl_sales_unit > 0 ? $rsl_cost_of_sales / $rsl_sales_unit : 0;
		$rsl_factory = $variable['rsl_factory'];
		$rsl_factory_unit = $rsl_sales_unit > 0 ? $rsl_factory / $rsl_sales_unit : 0;
		$rsl_packaging = $variable['rsl_packaging'];
		$rsl_packging_unit = $rsl_sales_unit > 0 ? $rsl_packaging / $rsl_sales_unit : 0;
		$rsl_light = $variable['rsl_light'];
		$rsl_light_unit = $rsl_sales_unit > 0 ? $rsl_light / $rsl_sales_unit : 0;
		$rsl_lpg = $variable['rsl_lpg'];
		$rsl_lpg_unit = $rsl_sales_unit > 0 ? $rsl_lpg / $rsl_sales_unit : 0;
		$rsl_blast = $variable['rsl_blast'];
		$rsl_blast_unit = $rsl_sales_unit > 0 ? $rsl_blast / $rsl_sales_unit : 0;
		$rsl_freight = $variable['rsl_freight'];
		$rsl_freight_unit = $rsl_sales_unit > 0 ? $rsl_freight / $rsl_sales_unit : 0;
		$rsl_commission = $variable['rsl_commission'];
		$rsl_commission_unit = $rsl_sales_unit > 0 ? $rsl_commission / $rsl_sales_unit : 0;
		$rsl_distribution = $variable['rsl_distribution'];
		$rsl_distribution_unit = $rsl_sales_unit > 0 ? $rsl_distribution / $rsl_sales_unit : 0;

		$hei_cost_of_sales = $variable['hei_cost_of_sales'];
		$hei_cost_of_sales_unit = $hei_sales_unit > 0 ? $hei_cost_of_sales / $hei_sales_unit : 0;
		$hei_factory = $variable['hei_factory'];
		$hei_factory_unit = $hei_sales_unit > 0 ? $hei_factory / $hei_sales_unit : 0;
		$hei_packaging = $variable['hei_packaging'];
		$hei_packging_unit = $hei_sales_unit > 0 ? $hei_packaging / $hei_sales_unit : 0;
		$hei_light = $variable['hei_light'];
		$hei_light_unit = $hei_sales_unit > 0 ? $hei_light / $hei_sales_unit : 0;
		$hei_lpg = $variable['hei_lpg'];
		$hei_lpg_unit = $hei_sales_unit > 0 ? $hei_lpg / $hei_sales_unit : 0;
		$hei_blast = $variable['hei_blast'];
		$hei_blast_unit = $hei_sales_unit > 0 ? $hei_blast / $hei_sales_unit : 0;
		$hei_freight = $variable['hei_freight'];
		$hei_freight_unit = $hei_sales_unit > 0 ? $hei_freight / $hei_sales_unit : 0;
		$hei_commission = $variable['hei_commission'];
		$hei_commission_unit = $hei_sales_unit > 0 ? $hei_commission / $hei_sales_unit : 0;
		$hei_distribution = $variable['hei_distribution'];
		$hei_distribution_unit = $hei_sales_unit > 0 ? $hei_distribution / $hei_sales_unit : 0;
		
		$exp_cost_of_sales = $variable['exp_cost_of_sales'];
		$exp_cost_of_sales_unit = $exp_sales_unit > 0 ? $exp_cost_of_sales / $exp_sales_unit : 0;
		$exp_factory = $variable['exp_factory'];
		$exp_factory_unit = $exp_sales_unit > 0 ? $exp_factory / $exp_sales_unit : 0;
		$exp_packaging = $variable['exp_packaging'];
		$exp_packging_unit = $exp_sales_unit > 0 ? $exp_packaging / $exp_sales_unit : 0;
		$exp_light = $variable['exp_light'];
		$exp_light_unit = $exp_sales_unit > 0 ? $exp_light / $exp_sales_unit : 0;
		$exp_lpg = $variable['exp_lpg'];
		$exp_lpg_unit = $exp_sales_unit > 0 ? $exp_lpg / $exp_sales_unit : 0;
		$exp_blast = $variable['exp_blast'];
		$exp_blast_unit = $exp_sales_unit > 0 ? $exp_blast / $exp_sales_unit : 0;
		$exp_freight = $variable['exp_freight'];
		$exp_freight_unit = $exp_sales_unit > 0 ? $exp_freight / $exp_sales_unit : 0;
		$exp_commission = $variable['exp_commission'];
		$exp_commission_unit = $exp_sales_unit > 0 ? $exp_commission / $exp_sales_unit : 0;
		$exp_distribution = $variable['exp_distribution'];
		$exp_distribution_unit = $exp_sales_unit > 0 ? $exp_distribution / $exp_sales_unit : 0;

		$chk_cost_of_sales = $variable['chk_cost_of_sales'];
		$chk_cost_of_sales_unit = $chk_sales_unit > 0 ? $chk_cost_of_sales / $chk_sales_unit : 0;
		$chk_factory = $variable['chk_factory'];
		$chk_factory_unit = $chk_sales_unit > 0 ? $chk_factory / $chk_sales_unit : 0;
		$chk_packaging = $variable['chk_packaging'];
		$chk_packging_unit = $chk_sales_unit > 0 ? $chk_packaging / $chk_sales_unit : 0;
		$chk_light = $variable['chk_light'];
		$chk_light_unit = $chk_sales_unit > 0 ? $chk_light / $chk_sales_unit : 0;
		$chk_lpg = $variable['chk_lpg'];
		$chk_lpg_unit = $chk_sales_unit > 0 ? $chk_lpg / $chk_sales_unit : 0;
		$chk_blast = $variable['chk_blast'];
		$chk_blast_unit = $chk_sales_unit > 0 ? $chk_blast / $chk_sales_unit : 0;
		$chk_freight = $variable['chk_freight'];
		$chk_freight_unit = $chk_sales_unit > 0 ? $chk_freight / $chk_sales_unit : 0;
		$chk_commission = $variable['chk_commission'];
		$chk_commission_unit = $chk_sales_unit > 0 ? $chk_commission / $chk_sales_unit : 0;
		$chk_distribution = $variable['chk_distribution'];
		$chk_distribution_unit = $chk_sales_unit > 0 ? $chk_distribution / $chk_sales_unit : 0;

	    $this->load->library('excel');

		$spreadsheet = $this->excel;
		$ctg_sheet = $spreadsheet->createSheet(0);
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('Sales Templates')
				->setSubject('Sales Module')
				->setDescription('Sales Templates');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);


		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_material = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_mat_code= array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);


	    $ctg_data['net_sales'] = $ctg_net_sales;
	    $ctg_data['variable_cost'] = $ctg_variable_cost;
	    $ctg_data['sales_unit'] = $ctg_sales_unit;
	    $ctg_data['nsp'] = $ctg_nsp;
	    $ctg_data['variable_unit'] = $ctg_variable_unit;
	    $ctg_data['margin'] = $ctg_margin;
	    $ctg_data['margin_unit'] = $ctg_margin_unit;
	    $ctg_data['margin_percent'] = $ctg_margin_percent;
	    $ctg_data['period'] = $ctg_period;
	    $ctg_data['period_unit'] = $ctg_sales_unit > 0 ?  $ctg_period / $ctg_sales_unit : 0;

	    $ctg_data['noi'] = $ctg_margin - $ctg_period;
	    $ctg_data['noi_unit'] = $ctg_sales_unit > 0 ? $ctg_noi / $ctg_sales_unit: 0;
	    $ctg_data['noi_percent'] = $ctg_net_sales > 0 ? ($ctg_noi / $ctg_net_sales) * 100 : 0;

	    $brand_list = '(1)';
	    $cost_group = 2;
	    $noi_ctg_data = $this->_get_noi_segment_month_excel($trans_id, $year, $ctg_data, $brand_list, $cost_center_id, $cost_group, $ctg_sheet);

	    $ctg_sheet->getStyle("A1:N16")->applyFromArray($style_border);
	    $ctg_sheet->getStyle("A1:N1")->applyFromArray($style_info);
	    for($a = 2; $a <= 16; $a++){
	    	$ctg_sheet->getStyle("A" . $a)->applyFromArray($style_info);
	    }
	    $ctg_sheet->getStyle("A2")->applyFromArray($style_info);
		foreach(range('A','N') as $columnID) {
			$ctg_sheet->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$ctg_sheet->getStyle('B2:N' . (16))->getNumberFormat()->setFormatCode('#,##0.00');
		$ctg_sheet->setTitle('CTG NOI');


		$ur_sheet = $spreadsheet->createSheet(1);
		$ur_sheet->setTitle('UR NOI');

		$ur_data['net_sales'] = $ur_net_sales;
	    $ur_data['variable_cost'] = $ur_variable_cost;
	    $ur_data['sales_unit'] = $ur_sales_unit;
	    $ur_data['nsp'] = $ur_nsp;
	    $ur_data['variable_unit'] = $ur_variable_unit;
	    $ur_data['margin'] = $ur_margin;
	    $ur_data['margin_unit'] = $ur_margin_unit;
	    $ur_data['margin_percent'] = $ur_margin_percent;
	    $ur_data['period'] = $ur_period;
	    $ur_data['period_unit'] = $ur_sales_unit > 0 ?  $ur_period / $ur_sales_unit : 0;

	    $ur_data['noi'] = $ur_margin - $ur_period;
	    $ur_data['noi_unit'] = $ur_sales_unit > 0 ? $ur_noi / $ur_sales_unit: 0;
	    $ur_data['noi_percent'] = $ur_net_sales > 0 ? ($ur_noi / $ur_net_sales) * 100 : 0;

	    $brand_list = '(5)';
	    $cost_group = 3;
	    $noi_ur_data = $this->_get_noi_segment_month_excel($trans_id, $year, $ur_data, $brand_list, $cost_center_id, $cost_group, $ur_sheet);

	    $ur_sheet->getStyle("A1:N16")->applyFromArray($style_border);
	    $ur_sheet->getStyle("A1:N1")->applyFromArray($style_info);
	    for($a = 2; $a <= 16; $a++){
	    	$ur_sheet->getStyle("A" . $a)->applyFromArray($style_info);
	    }
	    $ur_sheet->getStyle("A2")->applyFromArray($style_info);
		foreach(range('A','N') as $columnID) {
			$ur_sheet->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$ur_sheet->getStyle('B2:N' . (16))->getNumberFormat()->setFormatCode('#,##0.00');


		$rsl_sheet = $spreadsheet->createSheet(2);
		$rsl_sheet->setTitle('RSL NOI');

		$rsl_data['net_sales'] = $rsl_net_sales;
	    $rsl_data['variable_cost'] = $rsl_variable_cost;
	    $rsl_data['sales_unit'] = $rsl_sales_unit;
	    $rsl_data['nsp'] = $rsl_nsp;
	    $rsl_data['variable_unit'] = $rsl_variable_unit;
	    $rsl_data['margin'] = $rsl_margin;
	    $rsl_data['margin_unit'] = $rsl_margin_unit;
	    $rsl_data['margin_percent'] = $rsl_margin_percent;
	    $rsl_data['period'] = $rsl_period;
	    $rsl_data['period_unit'] = $rsl_sales_unit > 0 ?  $rsl_period / $rsl_sales_unit : 0;

	    $rsl_data['noi'] = $rsl_margin - $rsl_period;
	    $rsl_data['noi_unit'] = $rsl_sales_unit > 0 ? $rsl_noi / $rsl_sales_unit: 0;
	    $rsl_data['noi_percent'] = $rsl_net_sales > 0 ? ($rsl_noi / $rsl_net_sales) * 100 : 0;

	    $brand_list = '(15)';
	    $cost_group = 7;
	    $noi_rsl_data = $this->_get_noi_segment_month_excel($trans_id, $year, $rsl_data, $brand_list, $cost_center_id, $cost_group, $rsl_sheet);

	    $rsl_sheet->getStyle("A1:N16")->applyFromArray($style_border);
	    $rsl_sheet->getStyle("A1:N1")->applyFromArray($style_info);
	    for($a = 2; $a <= 16; $a++){
	    	$rsl_sheet->getStyle("A" . $a)->applyFromArray($style_info);
	    }

	    $rsl_sheet->getStyle("A2")->applyFromArray($style_info);
		foreach(range('A','N') as $columnID) {
			$rsl_sheet->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$rsl_sheet->getStyle('B2:N' . (16))->getNumberFormat()->setFormatCode('#,##0.00');
		
		
		
		$exp_sheet = $spreadsheet->createSheet(3);
		$exp_sheet->setTitle('EXP NOI');

		$exp_data['net_sales'] = $exp_net_sales;
	    $exp_data['variable_cost'] = $exp_variable_cost;
	    $exp_data['sales_unit'] = $exp_sales_unit;
	    $exp_data['nsp'] = $exp_nsp;
	    $exp_data['variable_unit'] = $exp_variable_unit;
	    $exp_data['margin'] = $exp_margin;
	    $exp_data['margin_unit'] = $exp_margin_unit;
	    $exp_data['margin_percent'] = $exp_margin_percent;
	    $exp_data['period'] = $exp_period;
	    $exp_data['period_unit'] = $exp_sales_unit > 0 ?  $exp_period / $exp_sales_unit : 0;

	    $exp_data['noi'] = $exp_margin - $exp_period;
	    $exp_data['noi_unit'] = $exp_sales_unit > 0 ? $exp_noi / $exp_sales_unit: 0;
	    $exp_data['noi_percent'] = $exp_net_sales > 0 ? ($exp_noi / $exp_net_sales) * 100 : 0;

	    $brand_list = '(21)';
	    $cost_group = 11;
	    $noi_exp_data = $this->_get_noi_segment_month_excel($trans_id, $year, $exp_data, $brand_list, $cost_center_id, $cost_group, $exp_sheet);

	    $exp_sheet->getStyle("A1:N16")->applyFromArray($style_border);
	    $exp_sheet->getStyle("A1:N1")->applyFromArray($style_info);
	    for($a = 2; $a <= 16; $a++){
	    	$exp_sheet->getStyle("A" . $a)->applyFromArray($style_info);
	    }

	    $exp_sheet->getStyle("A2")->applyFromArray($style_info);
		foreach(range('A','N') as $columnID) {
			$exp_sheet->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$exp_sheet->getStyle('B2:N' . (16))->getNumberFormat()->setFormatCode('#,##0.00');
		
		
		$chk_sheet = $spreadsheet->createSheet(4);
		$chk_sheet->setTitle('CDI NOI');

		$chk_data['net_sales'] = $chk_net_sales;
	    $chk_data['variable_cost'] = $chk_variable_cost;
	    $chk_data['sales_unit'] = $chk_sales_unit;
	    $chk_data['nsp'] = $chk_nsp;
	    $chk_data['variable_unit'] = $chk_variable_unit;
	    $chk_data['margin'] = $chk_margin;
	    $chk_data['margin_unit'] = $chk_margin_unit;
	    $chk_data['margin_percent'] = $chk_margin_percent;
	    $chk_data['period'] = $chk_period;
	    $chk_data['period_unit'] = $chk_sales_unit > 0 ?  $chk_period / $chk_sales_unit : 0;

	    $chk_data['noi'] = $chk_margin - $chk_period;
	    $chk_data['noi_unit'] = $chk_sales_unit > 0 ? $chk_noi / $chk_sales_unit: 0;
	    $chk_data['noi_percent'] = $chk_net_sales > 0 ? ($chk_noi / $chk_net_sales) * 100 : 0;

	    $brand_list = '(20)';
	    $cost_group = 10;
	    $noi_chk_data = $this->_get_noi_segment_month_excel($trans_id, $year, $chk_data, $brand_list, $cost_center_id, $cost_group, $chk_sheet);

	    $chk_sheet->getStyle("A1:N16")->applyFromArray($style_border);
	    $chk_sheet->getStyle("A1:N1")->applyFromArray($style_info);
	    for($a = 2; $a <= 16; $a++){
	    	$chk_sheet->getStyle("A" . $a)->applyFromArray($style_info);
	    }

	    $chk_sheet->getStyle("A2")->applyFromArray($style_info);
		foreach(range('A','N') as $columnID) {
			$chk_sheet->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$chk_sheet->getStyle('B2:N' . (16))->getNumberFormat()->setFormatCode('#,##0.00');

		$spreadsheet->setActiveSheetIndex(0);

		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		$random = generate_random(5);
		header('Content-Disposition: attachment;filename="Budgeting - NOI_' . $random . '.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
    }

    public function _get_noi_segment_month_excel($trans_id, $year, $com_data, $brand_list, $cost_center_id, $cost_center_group_id, $spreadsheet){
		$select_noi_com = 'SUM(dashboard_brand_summary_sales_unit) as sales_unit, SUM(dashboard_brand_summary_net_sales) as net_sales, SUM(dashboard_brand_summary_variable_cost) as variable_cost';

		$select_summary_period = 'SUM(dashboard_opex_amount) as total_period_cost';


	    /*Commodity January*/

	    for($a = 1; $a <= 12; $a++){
	    	$month = $year . '-' . $a .'-01';
	    	$where_noi = 'brand_id IN ' . $brand_list . ' AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_brand_summary_date = "' .  $month . '" AND dashboard_brand_summary_status = 1';
		    $get_noi = $this->admin->check_data('dashboard_brand_summary_tbl', $where_noi, TRUE, $select_noi_com);

		    $sales_unit[$a] = 0;
		    $net_sales[$a]= 0;
		    $variable_cost[$a] = 0;
		    $nsp[$a] = 0;
		    $variable_unit[$a] = 0;
		    $margin[$a] = 0;
		    $margin_unit[$a] = 0;
		    $margin_percent[$a] = 0;
		    if($get_noi['result'] == TRUE){
		    	$sales_unit[$a] = $get_noi['info']->sales_unit;
		    	$net_sales[$a] = $get_noi['info']->net_sales;
		    	$variable_cost[$a] = $get_noi['info']->variable_cost;
		    	$nsp[$a] = $sales_unit[$a] > 0 ? $net_sales[$a] / $sales_unit[$a] : 0;
		    	$variable_unit[$a] = $sales_unit[$a] > 0 ? $variable_cost[$a] / $sales_unit[$a] : 0;

		    	$margin[$a] = $net_sales[$a] - $variable_cost[$a];
		    	$margin_unit[$a] = $sales_unit[$a] > 0 ?  $margin[$a] / $sales_unit[$a] : 0;
		    	$margin_percent[$a] = $net_sales[$a] > 0 ? ($margin[$a] / $net_sales[$a]) * 100 : 0;
		    }

		    $where_brand_period = 'cost_center_group_id = ' . $cost_center_group_id . ' AND dashboard_opex_date = "' . $month . '" AND cost_center_id IN (' . $cost_center_id . ') AND dashboard_bc_trans_id IN (' . $trans_id . ') AND dashboard_opex_status = 1';
		    $get_brand_period = $this->admin->check_data('dashboard_opex_tbl', $where_brand_period, TRUE, $select_summary_period);

		    $period[$a] = 0;
		    $period_unit[$a] = 0;
		    if($get_brand_period['result'] == TRUE){

		    	$allocation = $this->_get_segment_allocation($trans_id, $cost_center_group_id, $year, $month);

		    	$period[$a] = $get_brand_period['info']->total_period_cost + $allocation;
		    	$period_unit[$a] = $sales_unit[$a] > 0 ?  $period[$a] / $sales_unit[$a] : 0;
		    }

		    $noi[$a] = $margin[$a] - $period[$a];
		    $noi_unit[$a] = $sales_unit[$a] > 0 ? $noi[$a] / $sales_unit[$a]: 0;
		    $noi_percent[$a] = $net_sales[$a] > 0 ? ($noi[$a] / $net_sales[$a]) * 100 : 0;
	    }

	    $noi_com_tbl = '
	    		<tr>
	    			<td>Sale Volume, in Unit</td>
	    			<td align="right">' . number_format($com_data['sales_unit']/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[1]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[2]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[3]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[4]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[5]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[6]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[7]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[8]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[9]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[10]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[11]/1000) . '</td>
	    			<td align="right">' . number_format($sales_unit[12]/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>NET SALES</td>
	    			<td align="right">' . number_format($com_data['net_sales']/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[1]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[2]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[3]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[4]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[5]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[6]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[7]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[8]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[9]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[10]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[11]/1000) . '</td>
	    			<td align="right">' . number_format($net_sales[12]/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>NSP per Unit</td>
	    			<td align="right">' . number_format($com_data['nsp'], 2) . '</td>
	    			<td align="right">' . number_format($nsp[1], 2) . '</td>
	    			<td align="right">' . number_format($nsp[2], 2) . '</td>
	    			<td align="right">' . number_format($nsp[3], 2) . '</td>
	    			<td align="right">' . number_format($nsp[4], 2) . '</td>
	    			<td align="right">' . number_format($nsp[5], 2) . '</td>
	    			<td align="right">' . number_format($nsp[6], 2) . '</td>
	    			<td align="right">' . number_format($nsp[7], 2) . '</td>
	    			<td align="right">' . number_format($nsp[8], 2) . '</td>
	    			<td align="right">' . number_format($nsp[9], 2) . '</td>
	    			<td align="right">' . number_format($nsp[10], 2) . '</td>
	    			<td align="right">' . number_format($nsp[11], 2) . '</td>
	    			<td align="right">' . number_format($nsp[12], 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Variable Cost</td>
	    			<td align="right">' . number_format($com_data['variable_cost']/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[1]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[2]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[3]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[4]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[5]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[6]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[7]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[8]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[9]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[10]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[11]/1000) . '</td>
	    			<td align="right">' . number_format($variable_cost[12]/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Var. Cost/Unit</td>
	    			<td align="right">' . number_format($com_data['variable_unit'], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[1], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[2], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[3], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[4], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[5], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[6], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[7], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[8], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[9], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[10], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[11], 2) . '</td>
	    			<td align="right">' . number_format($variable_unit[12], 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Contribution Margin</td>
	    			<td align="right">' . number_format($com_data['margin']/1000) . '</td>
	    			<td align="right">' . number_format($margin[1]/1000) . '</td>
	    			<td align="right">' . number_format($margin[2]/1000) . '</td>
	    			<td align="right">' . number_format($margin[3]/1000) . '</td>
	    			<td align="right">' . number_format($margin[4]/1000) . '</td>
	    			<td align="right">' . number_format($margin[5]/1000) . '</td>
	    			<td align="right">' . number_format($margin[6]/1000) . '</td>
	    			<td align="right">' . number_format($margin[7]/1000) . '</td>
	    			<td align="right">' . number_format($margin[8]/1000) . '</td>
	    			<td align="right">' . number_format($margin[9]/1000) . '</td>
	    			<td align="right">' . number_format($margin[10]/1000) . '</td>
	    			<td align="right">' . number_format($margin[11]/1000) . '</td>
	    			<td align="right">' . number_format($margin[12]/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>CM Per Unit</td>
	    			<td align="right">' . number_format($com_data['margin_unit'], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[1], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[2], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[3], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[4], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[5], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[6], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[7], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[8], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[9], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[10], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[11], 2) . '</td>
	    			<td align="right">' . number_format($margin_unit[12], 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>CM (%)</td>
	    			<td align="right">' . number_format($com_data['margin_percent']) . '%</td>
	    			<td align="right">' . number_format($margin_percent[1]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[2]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[3]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[4]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[5]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[6]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[7]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[8]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[9]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[10]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[11]) . '%</td>
	    			<td align="right">' . number_format($margin_percent[12]) . '%</td>
	    		</tr>

	    		<tr>
	    			<td>Period Cost</td>
	    			<td align="right">' . number_format($com_data['period']/1000) . '</td>
	    			<td align="right">' . number_format($period[1]/1000) . '</td>
	    			<td align="right">' . number_format($period[2]/1000) . '</td>
	    			<td align="right">' . number_format($period[3]/1000) . '</td>
	    			<td align="right">' . number_format($period[4]/1000) . '</td>
	    			<td align="right">' . number_format($period[5]/1000) . '</td>
	    			<td align="right">' . number_format($period[6]/1000) . '</td>
	    			<td align="right">' . number_format($period[7]/1000) . '</td>
	    			<td align="right">' . number_format($period[8]/1000) . '</td>
	    			<td align="right">' . number_format($period[9]/1000) . '</td>
	    			<td align="right">' . number_format($period[10]/1000) . '</td>
	    			<td align="right">' . number_format($period[11]/1000) . '</td>
	    			<td align="right">' . number_format($period[12]/1000) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Period Cost/ Unit</td>
	    			<td align="right">' . number_format($com_data['period_unit'], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[1], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[2], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[3], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[4], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[5], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[6], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[7], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[8], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[9], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[10], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[11], 2) . '</td>
	    			<td align="right">' . number_format($period_unit[12], 2) . '</td>
	    		</tr>

	    		<tr>
	    			<td>Other Income/Expenses</td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    		</tr>

	    		<tr>
	    			<td>Others - Per Unit</td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    			<td align="right"></td>
	    		</tr>

	    		<tr>
	    			<td>NOI</td>
	    			<td align="right">' . number_format($com_data['noi']/1000) . '</td>
	    			<td align="right">' . number_format($noi[1]/1000) . '</td>
	    			<td align="right">' . number_format($noi[2]/1000) . '</td>
	    			<td align="right">' . number_format($noi[3]/1000) . '</td>
	    			<td align="right">' . number_format($noi[4]/1000) . '</td>
	    			<td align="right">' . number_format($noi[5]/1000) . '</td>
	    			<td align="right">' . number_format($noi[6]/1000) . '</td>
	    			<td align="right">' . number_format($noi[7]/1000) . '</td>
	    			<td align="right">' . number_format($noi[8]/1000) . '</td>
	    			<td align="right">' . number_format($noi[9]/1000) . '</td>
	    			<td align="right">' . number_format($noi[10]/1000) . '</td>
	    			<td align="right">' . number_format($noi[11]/1000) . '</td>
	    			<td align="right">' . number_format($noi[12]/1000) . '</td>
	    		</tr>


	    		<tr>
	    			<td>NOI per Unit</td>
	    			<td align="right">' . number_format($com_data['noi_unit'], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[1], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[2], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[3], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[4], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[5], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[6], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[7], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[8], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[9], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[10], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[11], 2) . '</td>
	    			<td align="right">' . number_format($noi_unit[12], 2) . '</td>
	    		</tr>


	    		<tr>
	    			<td>% NOI to Net Sales</td>
	    			<td align="right">' . number_format($com_data['noi_percent']) . '%</td>
	    			<td align="right">' . number_format($noi_percent[1]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[2]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[3]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[4]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[5]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[6]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[7]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[8]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[9]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[10]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[11]) . '%</td>
	    			<td align="right">' . number_format($noi_percent[12]) . '%</td>
	    		</tr>
	    ';

	    $spreadsheet
			->setCellValue("A1", '')
			->setCellValue("B1", 'TOTAL')
			->setCellValue("C1", 'JAN')
			->setCellValue("D1", 'FEB')
			->setCellValue("E1", 'MAR')
			->setCellValue("F1", 'APR')
			->setCellValue("G1", 'MAY')
			->setCellValue("H1", 'JUN')
			->setCellValue("I1", 'JUL')
			->setCellValue("J1", 'AUG')
			->setCellValue("K1", 'SEP')
			->setCellValue("L1", 'OCT')
			->setCellValue("M1", 'NOV')
			->setCellValue("N1", 'DEC')
		;

	    $spreadsheet
			->setCellValue("A2", 'Sales Volume, in Unit')
			->setCellValue("B2", $com_data['sales_unit'])
			->setCellValue("C2", $sales_unit[1])
			->setCellValue("D2", $sales_unit[2])
			->setCellValue("E2", $sales_unit[3])
			->setCellValue("F2", $sales_unit[4])
			->setCellValue("G2", $sales_unit[5])
			->setCellValue("H2", $sales_unit[6])
			->setCellValue("I2", $sales_unit[7])
			->setCellValue("J2", $sales_unit[8])
			->setCellValue("K2", $sales_unit[9])
			->setCellValue("L2", $sales_unit[10])
			->setCellValue("M2", $sales_unit[11])
			->setCellValue("N2", $sales_unit[12])
		;

		$spreadsheet
			->setCellValue("A3", 'NET SALES')
			->setCellValue("B3", $com_data['net_sales'])
			->setCellValue("C3", $net_sales[1])
			->setCellValue("D3", $net_sales[2])
			->setCellValue("E3", $net_sales[3])
			->setCellValue("F3", $net_sales[4])
			->setCellValue("G3", $net_sales[5])
			->setCellValue("H3", $net_sales[6])
			->setCellValue("I3", $net_sales[7])
			->setCellValue("J3", $net_sales[8])
			->setCellValue("K3", $net_sales[9])
			->setCellValue("L3", $net_sales[10])
			->setCellValue("M3", $net_sales[11])
			->setCellValue("N3", $net_sales[12])
		;


		$spreadsheet
			->setCellValue("A4", 'NSP per Unit')
			->setCellValue("B4", $com_data['nsp'])
			->setCellValue("C4", $nsp[1])
			->setCellValue("D4", $nsp[2])
			->setCellValue("E4", $nsp[3])
			->setCellValue("F4", $nsp[4])
			->setCellValue("G4", $nsp[5])
			->setCellValue("H4", $nsp[6])
			->setCellValue("I4", $nsp[7])
			->setCellValue("J4", $nsp[8])
			->setCellValue("K4", $nsp[9])
			->setCellValue("L4", $nsp[10])
			->setCellValue("M4", $nsp[11])
			->setCellValue("N4", $nsp[12])
		;

		$spreadsheet
			->setCellValue("A5", 'Variable Cost')
			->setCellValue("B5", $com_data['variable_cost'])
			->setCellValue("C5", $variable_cost[1])
			->setCellValue("D5", $variable_cost[2])
			->setCellValue("E5", $variable_cost[3])
			->setCellValue("F5", $variable_cost[4])
			->setCellValue("G5", $variable_cost[5])
			->setCellValue("H5", $variable_cost[6])
			->setCellValue("I5", $variable_cost[7])
			->setCellValue("J5", $variable_cost[8])
			->setCellValue("K5", $variable_cost[9])
			->setCellValue("L5", $variable_cost[10])
			->setCellValue("M5", $variable_cost[11])
			->setCellValue("N5", $variable_cost[12])
		;

		$spreadsheet
			->setCellValue("A6", 'Var. Cost/Unit')
			->setCellValue("B6", $com_data['variable_unit'])
			->setCellValue("C6", $variable_unit[1])
			->setCellValue("D6", $variable_unit[2])
			->setCellValue("E6", $variable_unit[3])
			->setCellValue("F6", $variable_unit[4])
			->setCellValue("G6", $variable_unit[5])
			->setCellValue("H6", $variable_unit[6])
			->setCellValue("I6", $variable_unit[7])
			->setCellValue("J6", $variable_unit[8])
			->setCellValue("K6", $variable_unit[9])
			->setCellValue("L6", $variable_unit[10])
			->setCellValue("M6", $variable_unit[11])
			->setCellValue("N6", $variable_unit[12])
		;

		$spreadsheet
			->setCellValue("A7", 'Contribution Margin')
			->setCellValue("B7", $com_data['margin'])
			->setCellValue("C7", $margin[1])
			->setCellValue("D7", $margin[2])
			->setCellValue("E7", $margin[3])
			->setCellValue("F7", $margin[4])
			->setCellValue("G7", $margin[5])
			->setCellValue("H7", $margin[6])
			->setCellValue("I7", $margin[7])
			->setCellValue("J7", $margin[8])
			->setCellValue("K7", $margin[9])
			->setCellValue("L7", $margin[10])
			->setCellValue("M7", $margin[11])
			->setCellValue("N7", $margin[12])
		;

		$spreadsheet
			->setCellValue("A8", 'CM Per Unit')
			->setCellValue("B8", $com_data['margin_unit'])
			->setCellValue("C8", $margin_unit[1])
			->setCellValue("D8", $margin_unit[2])
			->setCellValue("E8", $margin_unit[3])
			->setCellValue("F8", $margin_unit[4])
			->setCellValue("G8", $margin_unit[5])
			->setCellValue("H8", $margin_unit[6])
			->setCellValue("I8", $margin_unit[7])
			->setCellValue("J8", $margin_unit[8])
			->setCellValue("K8", $margin_unit[9])
			->setCellValue("L8", $margin_unit[10])
			->setCellValue("M8", $margin_unit[11])
			->setCellValue("N8", $margin_unit[12])
		;

		$spreadsheet
			->setCellValue("A9", 'CM (%)')
			->setCellValue("B9", $com_data['margin_percent'])
			->setCellValue("C9", $margin_percent[1])
			->setCellValue("D9", $margin_percent[2])
			->setCellValue("E9", $margin_percent[3])
			->setCellValue("F9", $margin_percent[4])
			->setCellValue("G9", $margin_percent[5])
			->setCellValue("H9", $margin_percent[6])
			->setCellValue("I9", $margin_percent[7])
			->setCellValue("J9", $margin_percent[8])
			->setCellValue("K9", $margin_percent[9])
			->setCellValue("L9", $margin_percent[10])
			->setCellValue("M9", $margin_percent[11])
			->setCellValue("N9", $margin_percent[12])
		;

		$spreadsheet
			->setCellValue("A10", 'Period Cost')
			->setCellValue("B10", $com_data['period'])
			->setCellValue("C10", $period[1])
			->setCellValue("D10", $period[2])
			->setCellValue("E10", $period[3])
			->setCellValue("F10", $period[4])
			->setCellValue("G10", $period[5])
			->setCellValue("H10", $period[6])
			->setCellValue("I10", $period[7])
			->setCellValue("J10", $period[8])
			->setCellValue("K10", $period[9])
			->setCellValue("L10", $period[10])
			->setCellValue("M10", $period[11])
			->setCellValue("N10", $period[12])
		;

		$spreadsheet
			->setCellValue("A11", 'Period Cost/ Unit')
			->setCellValue("B11", $com_data['period_unit'])
			->setCellValue("C11", $period_unit[1])
			->setCellValue("D11", $period_unit[2])
			->setCellValue("E11", $period_unit[3])
			->setCellValue("F11", $period_unit[4])
			->setCellValue("G11", $period_unit[5])
			->setCellValue("H11", $period_unit[6])
			->setCellValue("I11", $period_unit[7])
			->setCellValue("J11", $period_unit[8])
			->setCellValue("K11", $period_unit[9])
			->setCellValue("L11", $period_unit[10])
			->setCellValue("M11", $period_unit[11])
			->setCellValue("N11", $period_unit[12])
		;

		$spreadsheet
			->setCellValue("A12", 'Other Income/Expenses')
			->setCellValue("B12", '')
			->setCellValue("C12", '')
			->setCellValue("D12", '')
			->setCellValue("E12", '')
			->setCellValue("F12", '')
			->setCellValue("G12", '')
			->setCellValue("H12", '')
			->setCellValue("I12", '')
			->setCellValue("J12", '')
			->setCellValue("K12", '')
			->setCellValue("L12", '')
			->setCellValue("M12", '')
			->setCellValue("N12", '')
		;

		$spreadsheet
			->setCellValue("A13", 'Others - Per Unit')
			->setCellValue("B13", '')
			->setCellValue("C13", '')
			->setCellValue("D13", '')
			->setCellValue("E13", '')
			->setCellValue("F13", '')
			->setCellValue("G13", '')
			->setCellValue("H13", '')
			->setCellValue("I13", '')
			->setCellValue("J13", '')
			->setCellValue("K13", '')
			->setCellValue("L13", '')
			->setCellValue("M13", '')
			->setCellValue("N13", '')
		;

		$spreadsheet
			->setCellValue("A14", 'NOI')
			->setCellValue("B14", $com_data['noi'])
			->setCellValue("C14", $noi[1])
			->setCellValue("D14", $noi[2])
			->setCellValue("E14", $noi[3])
			->setCellValue("F14", $noi[4])
			->setCellValue("G14", $noi[5])
			->setCellValue("H14", $noi[6])
			->setCellValue("I14", $noi[7])
			->setCellValue("J14", $noi[8])
			->setCellValue("K14", $noi[9])
			->setCellValue("L14", $noi[10])
			->setCellValue("M14", $noi[11])
			->setCellValue("N14", $noi[12])
		;

		$spreadsheet
			->setCellValue("A15", 'NOI per Unit')
			->setCellValue("B15", $com_data['noi_unit'])
			->setCellValue("C15", $noi_unit[1])
			->setCellValue("D15", $noi_unit[2])
			->setCellValue("E15", $noi_unit[3])
			->setCellValue("F15", $noi_unit[4])
			->setCellValue("G15", $noi_unit[5])
			->setCellValue("H15", $noi_unit[6])
			->setCellValue("I15", $noi_unit[7])
			->setCellValue("J15", $noi_unit[8])
			->setCellValue("K15", $noi_unit[9])
			->setCellValue("L15", $noi_unit[10])
			->setCellValue("M15", $noi_unit[11])
			->setCellValue("N15", $noi_unit[12])
		;

		$spreadsheet
			->setCellValue("A16", '% NOI to Net Sales')
			->setCellValue("B16", $com_data['noi_percent'])
			->setCellValue("C16", $noi_percent[1])
			->setCellValue("D16", $noi_percent[2])
			->setCellValue("E16", $noi_percent[3])
			->setCellValue("F16", $noi_percent[4])
			->setCellValue("G16", $noi_percent[5])
			->setCellValue("H16", $noi_percent[6])
			->setCellValue("I16", $noi_percent[7])
			->setCellValue("J16", $noi_percent[8])
			->setCellValue("K16", $noi_percent[9])
			->setCellValue("L16", $noi_percent[10])
			->setCellValue("M16", $noi_percent[11])
			->setCellValue("N16", $noi_percent[12])
		;

	}

	/*Unit PDF*/

	public function process_unit($unit_name){
		//$info = $this->_require_login();

		$unit_name = clean_data($unit_name);
		$unit_name = str_replace('-', ' ', $unit_name);
		$unit_name = str_replace('_', '/', $unit_name);
		$unit_name = str_replace('.', '&', $unit_name);

		$check_processing = $this->admin->check_data('dashboard_unit_transaction_tbl', array('dashboard_trans_status_id' => 2));
		if($check_processing == FALSE){
			$join_process = array('company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id AND a.dashboard_trans_status_id = 1');
			$get_process = $this->admin->check_join('dashboard_unit_transaction_tbl a', $join_process, TRUE);
			
			if($get_process['result'] == TRUE){
				if($get_process['info']->company_unit_name == strtoupper($unit_name)){
					$dashboard_unit_trans_id = $get_process['info']->dashboard_unit_trans_id;
					$company_unit_id = $get_process['info']->company_unit_id;
					$year = $get_process['info']->dashboard_unit_trans_year;
					$this->dashboard_unit($dashboard_unit_trans_id, $company_unit_id, $year, strtoupper($unit_name));
				}else{

				}
			}else{
				echo 'Ongoing Queue';
			}
		}else{
			echo 'Ongoing Process';
		}
	}

	public function dashboard_unit($trans_id, $company_unit_id, $year, $unit_name){
		$logDir = APPPATH . '../assets/ErrorLogs/';
		$logFile = $logDir . "process-dashboard-unit-{$trans_id}-{$unit_name}.log";
		if (!file_exists($logDir)) {
			mkdir($logDir, 0777, true);
		}
		if (!file_exists($logFile)) {
			file_put_contents($logFile, "");
			chmod($logFile, 0666);
		}
		$prev_error_handler = $this->set_dashboard_error_handler($logFile);

		try {
			$data['title'] = 'Dashboard';
			ini_set('max_execution_time', 0); 
			ini_set('memory_limit','6048M');
			$cost_center_id = $this->get_unit_cost_center($company_unit_id);
			$set_trans = array('dashboard_trans_status_id' => 2, 'dashboard_unit_trans_process' => date_now());
			$where_trans = array('dashboard_unit_trans_id' => $trans_id);
			$update_trans = $this->admin->update_data('dashboard_unit_transaction_tbl', $set_trans, $where_trans);
			$this->db->trans_start();

			/*OPEX Per Cost Center*/
			$process_opex = $this->unit_opex_data($trans_id, $company_unit_id, $year);
			/*CAPEX*/
			$process_capex = $this->unit_capex_data($trans_id, $company_unit_id, $year);
			/*Manpower*/
			$process_manpower = $this->unit_employee_pdf_data($trans_id, $cost_center_id, $year);

			if($this->db->trans_status() === FALSE){
				$this->db->trans_rollback();
				$msg = '<div class="alert alert-danger">Error please try again!</div>';
				$set_trans = array('dashboard_trans_status_id' => 6);
				$where_trans = array('dashboard_unit_trans_id' => $trans_id);
				$update_trans = $this->admin->update_data('dashboard_unit_transaction_tbl', $set_trans, $where_trans);
				$db_error = print_r($this->db->error(), true);
				$this->log_error($logFile, "DB transaction failed and rolled back. DB Error: " . $db_error);
			}else{
				$this->db->trans_commit();
				$msg = '<div class="alert alert-success">Price successfully adjusted.</strong></div>';
				$set_trans = array('dashboard_trans_status_id' => 3, 'dashboard_unit_trans_end' => date_now());
				$where_trans = array('dashboard_unit_trans_id' => $trans_id);
				$update_trans = $this->admin->update_data('dashboard_unit_transaction_tbl', $set_trans, $where_trans);
				if (file_exists($logFile)) { @unlink($logFile); }
			}

			echo $msg;
		} catch (Throwable $e) {
			$this->log_error($logFile, "Error in dashboard_unit: " . $e->getMessage());
			echo '<div class="alert alert-danger">Error occurred. See log.</div>';
		}

		if ($prev_error_handler !== null) {
			set_error_handler($prev_error_handler);
		} else {
			restore_error_handler();
		}
	}

	public function unit_opex_data($trans_id, $company_unit_id, $year){
		//$info = $this->_require_login();
		$cost_center_id = $this->get_unit_cost_center($company_unit_id);

		$opex_gl = $this->admin->get_query('

			SELECT cost_center_id, gl_group_name, gl_sub_id, gl_sub_name, (opex) as opex, (opex1) as opex1, (opex2) as opex2

			FROM 
			(
				(SELECT f.cost_center_id, `e`.`gl_group_name`, `d`.`gl_sub_id`, `d`.`gl_sub_name`, SUM(a.opex_amount) opex, 0 as opex1, 0 opex2 FROM `gl_transaction_details_tbl` `a` JOIN `gl_transaction_item_tbl` `b` ON `a`.`gl_trans_item_id` = `b`.`gl_trans_item_id` AND `b`.`gl_trans_item_status` = 1 AND `a`.`gl_trans_det_status`=1 JOIN `gl_transaction_tbl` `c` ON `b`.`gl_trans_id`=`c`.`gl_trans_id` AND `c`.`gl_trans_status`=1 AND `c`.`gl_year`= ' . $year . ' JOIN `gl_subgroup_tbl` `d` ON `b`.`gl_sub_id`=`d`.`gl_sub_id` JOIN `gl_group_tbl` `e` ON `d`.`gl_group_id` = `e`.`gl_group_id` AND `e`.`gl_group_show` = 1 JOIN `cost_center_tbl` `f` ON `b`.`cost_center_id` = `f`.`cost_center_id` AND `f`.`parent_id`= '. $cost_center_id . ' GROUP BY f.cost_center_id, `b`.`gl_sub_id` ORDER BY `e`.`gl_group_id`, f.cost_center_id, `d`.`gl_sub_name`,  `opex` DESC
				)

				UNION

				(SELECT x.cost_center_id, z.gl_group_name, y.gl_sub_id, y.gl_sub_name, 0 as opex, SUM(x.cost) as opex1, 0 as opex2 FROM comparative_opex_dept_tbl x, gl_subgroup_tbl y, gl_group_tbl z WHERE x.gl_sub_id = y.gl_sub_id AND y.gl_group_id = z.gl_group_id AND x.company_unit_id = ' . $company_unit_id . ' AND x.comp_opex_dept_status = 1 AND YEAR(x.trans_year) = ' . ($year - 1) . ' AND z.gl_group_name != "DEPRECIATION EXPENSES" GROUP BY z.gl_group_id, y.gl_sub_id, x.cost_center_id
				)

				UNION

				(SELECT x.cost_center_id, z.gl_group_name, y.gl_sub_id, y.gl_sub_name, 0 as opex, 0 as opex1, SUM(x.cost) as opex2 FROM comparative_opex_dept_tbl x, gl_subgroup_tbl y, gl_group_tbl z WHERE x.gl_sub_id = y.gl_sub_id AND y.gl_group_id = z.gl_group_id AND x.company_unit_id = ' . $company_unit_id . ' AND x.comp_opex_dept_status = 1 AND YEAR(x.trans_year) = ' . ($year - 2) . ' AND z.gl_group_name != "DEPRECIATION EXPENSES" GROUP BY z.gl_group_id, y.gl_sub_id, x.cost_center_id
				)
			) as opex_data


			ORDER BY
				gl_group_name, gl_sub_name

		');

		foreach($opex_gl as $row){
			$gl_cost_center = $row->cost_center_id;
			$gl_sub_id = $row->gl_sub_id;
			$gl_amount = $row->opex;
			$gl_amount1 = $row->opex1;
			$gl_amount2 = $row->opex2;

			$set_opex = array(
				'dashboard_unit_trans_id' => $trans_id,
				'company_unit_id' => $company_unit_id,
				'cost_center_id' => $gl_cost_center,
				'gl_sub_id' => $gl_sub_id,
				'dashboard_unit_opex_cost_center_amount' => $gl_amount,
				'dashboard_unit_opex_cost_center_amount1' => $gl_amount1,
				'dashboard_unit_opex_cost_center_amount2' => $gl_amount2,
				'dashboard_unit_opex_cost_center_added' => date_now(),
				'dashboard_unit_opex_cost_center_status' => 1
			);

			$insert_opex = $this->admin->insert_data('dashboard_unit_opex_cost_center_tbl', $set_opex);
		}

		$get_opex_depre = $this->gl_depreciation_data($cost_center_id, $company_unit_id, $year);

		foreach($get_opex_depre as $row_depre){
			$gl_cost_center = $row_depre->cost_center_id;
			$gl_sub_id = $row_depre->gl_sub_id;
			$gl_amount = $row_depre->total;
			$gl_amount1 = $row_depre->total1;
			$gl_amount2 = $row_depre->total2;

			$set_opex = array(
				'dashboard_unit_trans_id' => $trans_id,
				'company_unit_id' => $company_unit_id,
				'cost_center_id' => $gl_cost_center,
				'gl_sub_id' => $gl_sub_id,
				'dashboard_unit_opex_cost_center_amount' => $gl_amount,
				'dashboard_unit_opex_cost_center_amount1' => $gl_amount1,
				'dashboard_unit_opex_cost_center_amount2' => $gl_amount2,
				'dashboard_unit_opex_cost_center_added' => date_now(),
				'dashboard_unit_opex_cost_center_status' => 1
			);

			$insert_opex = $this->admin->insert_data('dashboard_unit_opex_cost_center_tbl', $set_opex);
		}
	}

	public function gl_depreciation_data($cost_center, $company_unit_id, $year){
		//$info = $this->_require_login();

		$get_depreciation = $this->admin->get_query('
			SELECT 
				ag_name, asset_group, cost_center_id, ag_gl_code, SUM(total) as total, SUM(total1) as total1, SUM(total2) as total2, budget_date, gl_sub_id, gl_sub_name

				
			FROM
			(

				(
					SELECT e.ag_name, d.asg_name as asset_group, f.cost_center_id, e.ag_gl_code, SUM((b.capex_price / b.capex_lifespan) * (13-MONTH(c.capex_budget_date)) * c.capex_qty) as total, 0 as total1, 0 as total2, MONTH(c.capex_budget_date) as budget_date, h.gl_sub_id, h.gl_sub_name FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_group_transaction_details_tbl c, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g, gl_subgroup_tbl h, gl_group_tbl i WHERE a.ag_trans_id=b.ag_trans_id AND b.ag_trans_item_id=c.ag_trans_item_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND e.ag_gl_code = h.gl_code AND h.gl_group_id = i.gl_group_id AND g.trans_type_id = 1 AND a.ag_trans_status = 1 AND b.ag_trans_item_status = 1 AND h.gl_sub_status = 1 AND c.ag_trans_det_status=1 AND f.parent_id=' . $cost_center . ' AND YEAR(c.capex_budget_date)=' . $year . ' GROUP BY h.gl_sub_id, f.cost_center_id
				)

				UNION

				(
					SELECT "", "", x.cost_center_id, y.gl_code, SUM(x.depreciation_unit_amount) as total, 0 as total1, 0 as total2, x.depreciation_unit_date, y.gl_sub_id, y.gl_sub_name FROM depreciation_unit_tbl x, gl_subgroup_tbl y WHERE x.gl_sub_id = y.gl_sub_id  AND YEAR(x.depreciation_unit_date) = ' . $year . ' AND x.company_unit_id = "' . $company_unit_id . '" AND x.depreciation_unit_status = 1 GROUP BY y.gl_sub_id, x.cost_center_id
				)

				UNION


				(
					SELECT "", "", x.cost_center_id, y.gl_code, 0 as total, SUM(x.cost) as total1, 0 as total2, "", y.gl_sub_id, y.gl_sub_name FROM comparative_opex_dept_tbl x, gl_subgroup_tbl y, gl_group_tbl z WHERE x.gl_sub_id = y.gl_sub_id AND y.gl_group_id = z.gl_group_id AND x.company_unit_id = ' . $company_unit_id . ' AND x.comp_opex_dept_status = 1 AND YEAR(x.trans_year) = ' . ($year - 1) . ' AND z.gl_group_name = "DEPRECIATION EXPENSES" GROUP BY y.gl_sub_id, x.cost_center_id
				)

				UNION

				(
					SELECT "", "", x.cost_center_id, y.gl_code, 0 as total, 0 as total1, SUM(x.cost) as total2, "", y.gl_sub_id, y.gl_sub_name FROM comparative_opex_dept_tbl x, gl_subgroup_tbl y, gl_group_tbl z WHERE x.gl_sub_id = y.gl_sub_id AND y.gl_group_id = z.gl_group_id AND x.company_unit_id = ' . $company_unit_id . ' AND x.comp_opex_dept_status = 1 AND YEAR(x.trans_year) = ' . ($year - 2) . ' AND z.gl_group_name = "DEPRECIATION EXPENSES" GROUP BY y.gl_sub_id, x.cost_center_id
				)

			)depreciation_bc_tbl


			GROUP BY gl_sub_name, cost_center_id
		');

		return $get_depreciation;
	}

	public function unit_capex_data($trans_id, $company_unit_id, $year){
		//$info = $this->_require_login();
		$cost_center_id = $this->get_unit_cost_center($company_unit_id);


		$capex = $this->admin->get_query('

			SELECT cost_center_id, ag_id, ag_name, SUM(capex) as capex, SUM(capex1) as capex1, SUM(capex2) as capex2
			
			FROM
			(
				(SELECT f.cost_center_id, d.ag_id, `d`.`ag_name`, `c`.`asg_name`, SUM(a.capex_qty * `f`.`capex_price`) as capex, 0 as capex1, 0 as capex2  FROM `asset_group_transaction_details_tbl` `a` JOIN `asset_group_transaction_item_tbl` `f` ON `a`.`ag_trans_item_id` = `f`.`ag_trans_item_id` AND `f`.`ag_trans_item_status` = 1 JOIN `asset_group_transaction_tbl` `b` ON `f`.`ag_trans_id`=`b`.`ag_trans_id` AND `b`.`ag_trans_status`=1 AND `a`.`ag_trans_det_status`=1 AND `b`.`ag_trans_budget_year` = ' . $year . ' JOIN `asset_subgroup_tbl` `c` ON `f`.`asg_id`=`c`.`asg_id` JOIN `asset_group_tbl` `d` ON `c`.`ag_id` = `d`.`ag_id` JOIN `cost_center_tbl` `e` ON `f`.`cost_center_id` = `e`.`cost_center_id` AND `e`.`cost_center_id` AND `e`.`parent_id`= ' . $cost_center_id . ' GROUP BY `c`.`asg_id`, f.cost_center_id ORDER BY `d`.`ag_name`)

				UNION

				(SELECT x.cost_center_id, y.ag_id, y.ag_name, "", 0 as capex, SUM(x.comp_capex_unit_val) as capex1, 0 as capex2 FROM comparative_capex_unit_tbl x, asset_group_tbl y WHERE x.ag_id = y.ag_id AND x.company_unit_id = ' . $company_unit_id .' AND x.comp_capex_unit_status = 1 AND x.comp_capex_unit_year = ' . ($year - 1) . ' GROUP BY y.ag_name, x.cost_center_id) 

				UNION

				(SELECT x.cost_center_id, y.ag_id, y.ag_name, "", 0 as capex, 0 as capex1, SUM(x.comp_capex_unit_val) as capex2 FROM comparative_capex_unit_tbl x, asset_group_tbl y WHERE x.ag_id = y.ag_id AND x.company_unit_id = ' . $company_unit_id .' AND x.comp_capex_unit_status = 1 AND x.comp_capex_unit_year = ' . ($year - 2) . ' GROUP BY y.ag_name, x.cost_center_id) 
			) as capex_data

			GROUP BY ag_name, cost_center_id;
		');

		foreach($capex as $row){
			$ag_id = $row->ag_id;
			$capex_cost_center = $row->cost_center_id;
			$capex_amount = $row->capex;
			$capex_amount1 = $row->capex1;
			$capex_amount2 = $row->capex2;

			$set_capex = array(
				'dashboard_unit_trans_id' => $trans_id,
				'company_unit_id' => $company_unit_id,
				'cost_center_id' => $capex_cost_center,
				'ag_id' => $ag_id,
				'dashboard_unit_capex_group_total' => $capex_amount,
				'dashboard_unit_capex_group_total1' => $capex_amount1,
				'dashboard_unit_capex_group_total2' => $capex_amount2,
				'dashboard_unit_capex_group_added' => date_now(),
				'dashboard_unit_capex_group_status' => 1
			);

			$insert_capex = $this->admin->insert_data('dashboard_unit_capex_group_tbl', $set_capex);
		}

		$join_capex = array(
			'asset_group_transaction_item_tbl f' => 'a.ag_trans_item_id = f.ag_trans_item_id AND f.ag_trans_item_status = 1',
			'asset_group_transaction_tbl b' => 'f.ag_trans_id=b.ag_trans_id AND b.ag_trans_status=1 AND a.ag_trans_det_status=1 AND b.ag_trans_budget_year = ' . $year,
			'asset_subgroup_tbl c' => 'f.asg_id=c.asg_id',
			'asset_group_tbl d' => 'c.ag_id = d.ag_id',
			'cost_center_tbl e' => 'f.cost_center_id = e.cost_center_id AND e.parent_id=' . $cost_center_id
		);

		$capex_item = $this->admin->get_join('asset_group_transaction_details_tbl a', $join_capex, FALSE, 'd.ag_name', 'c.asg_id, e.cost_center_id', 'd.ag_name, c.asg_name, SUM(a.capex_qty) total_qty, f.capex_price, e.cost_center_id, c.asg_id
		');

		foreach($capex_item  as $row_item){
			$asg_id = $row_item->asg_id;
			$capex_cost_center = $row_item->cost_center_id;
			$capex_qty = $row_item->total_qty;
			$capex_price = $row_item->capex_price;
			$capex_total = $capex_qty * $capex_price;

			$set_capex_item = array(
				'dashboard_unit_trans_id' => $trans_id,
				'company_unit_id' => $company_unit_id,
				'cost_center_id' => $capex_cost_center,
				'asg_id' => $asg_id,
				'dashboard_unit_capex_item_qty' => $capex_qty,
				'dashboard_unit_capex_item_price' => $capex_price,
				'dashboard_unit_capex_item_total' => $capex_total,
				'dashboard_unit_capex_item_added' => date_now(),
				'dashboard_unit_capex_item_status' => 1
			);

			$insert_capex_item = $this->admin->insert_data('dashboard_unit_capex_item_tbl', $set_capex_item);
		}
	}

	public function view_unit_pdf($id){
		$info = $this->_require_login();
		$user_type = decode($info['user_type_id']);
		if($user_type == 1 || $user_type == 3 || $user_type == 7){
			$trans_id = decode($id);
			$join_trans = array('company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id AND a.dashboard_trans_status_id = 3 AND a.dashboard_unit_trans_id = ' . $trans_id);
			$check_trans = $this->admin->check_join('dashboard_unit_transaction_tbl a', $join_trans, TRUE);
			if($check_trans['result'] == TRUE){
				$company_unit_id = $check_trans['info']->company_unit_id;
				$pdf_name = $check_trans['info']->company_unit_name;
				$report_type = 'SUPPORT CENTER';
				$year = $check_trans['info']->dashboard_unit_trans_year;
				$cost_center_id = $this->get_unit_cost_center($company_unit_id);

				ini_set('max_execution_time', 0); 
				ini_set('memory_limit','4048M');
				
				$this->load->library("Pdf");
					  
			    // create new PDF document
			    $pdf = new TCPDF('P', PDF_UNIT, 'A4', true, 'UTF-8', false);
			  
			    // set document information

			    $pdf->SetCreator(PDF_CREATOR);
			    $pdf->SetAuthor('Bounty Agro Venture, Inc.');
			    $pdf->SetTitle('BAVI Budgeting Report');
			    $pdf->SetSubject('BAVI Budgeting Report');
			    $pdf->SetKeywords('BAVI, Budgeting, Report');   
			  
			    // set default header data

			    $title = "Bounty Agro Venture, Inc.";

			    $pdf->setPrintHeader(false);
			    $pdf->setPrintFooter(false);

			    $pdf->SetAutoPageBreak(true);
			  
			    // set some language-dependent strings (optional)
			    if (@file_exists(dirname(__FILE__).'/lang/eng.php')) {
			        require_once(dirname(__FILE__).'/lang/eng.php');
			        $pdf->setLanguageArray($l);
			    }

			    // Add a page
			    // This method has several options, check the source code documentation for more information.
			    $pdf->AddPage();
			    $this->header($pdf);

			    $pdf->SetFont('arial', 'B', 52);
			    $pdf->SetTextColor(0,0,0);
			    $pdf->Text(20, 100, $pdf_name);
			    $pdf->Text(20, 120, 'BUDGET');
			    $pdf->SetTextColor(255,51,0);
			    $pdf->Text(20, 140, $year);

			    $pdf->SetFont('arial', 'B', 8);
			    $pdf->SetTextColor(0,0,0);
			    $pdf->Text(15, 280, 'BOUNTY AGRO VENTURES INC. | Unit 1008, The Taipan Place Condo, F. Ortigas Jr. Ave, Ortigas');
			    $pdf->Text(15, 285, 'Center, Pasig City');

			    $pdf->AddPage();
			    $this->header($pdf);



			    $pdf->SetTextColor(0,0,0);

			    $pdf->setFont('arialb', '', 12);
			    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
			    $pdf->Text(20, 46, 'EXECUTIVE SUMMARY');
			    $pdf->Text(20, 52, 'Budget ' . $year);

			    $opex_report = $this->unit_opex_report_data($trans_id, $year);

			    $pdf->SetFont('arial', 'I', 10);
			    $pdf->Text(20, 80, $opex_report);

			    $get_capex = $this->unit_capex_group_report_pdf($trans_id, $year);
			    $capex_category_tbl = $get_capex['capex_category_tbl'];
			    $capex_report = $get_capex['capex_report'];

			    $pdf->SetFont('arial', 'I', 10);
			    $pdf->Text(20, 95, $capex_report);

			    $get_employee = $this->get_employee_report_unit_data($trans_id, $year);
				$manpower_report = $get_employee['employee_report'];
			    $pdf->SetFont('arial', 'I', 10);
			    $pdf->Text(20, 110, $manpower_report);

			    

			    
		    	

		    	/*COMPARATIVE OPERATING EXPENSES PER COST CENTER Page*/

				$pdf->AddPage('L');

				$pdf->SetTextColor(0,0,0);

			    $pdf->setFont('arialb', '', 12);
			    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
			    $pdf->Text(20, 46, 'COMPARATIVE OPERATING EXPENSES PER COST CENTER');
			    $pdf->Text(20, 52, 'Budget ' . $year);

			    $pdf->SetFont('arial', '', 8);

			    $opex_cost_center_tbl = $this->unit_opex_per_cost_center_pdf($trans_id, $year);
				$pdf->writeHTML($opex_cost_center_tbl, true, false, true, false, '');


				/*COMPARATIVE OPERATING EXPENSES PER ACCOUNT Page*/

				$pdf->AddPage('L');

				$pdf->SetTextColor(0,0,0);

			    $pdf->setFont('arialb', '', 12);
			    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
			    $pdf->Text(20, 46, 'COMPARATIVE OPERATING EXPENSES PER ACCOUNT');
			    $pdf->Text(20, 52, 'Budget ' . $year);

			    $pdf->SetFont('arial', '', 8);

			    $get_opex_account = $this->unit_opex_gl_report_pdf($trans_id, $year, $pdf, $pdf_name, $report_type);


			    $this->watermark_landscape($pdf);
				$this->header_landscape($pdf);

				/*OPEX Per Sub Unit*/

				$join_opex_count = array(
					'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND (b.parent_id = ' . $cost_center_id . ' OR b.cost_center_id = ' . $cost_center_id .')'
				);
				$get_opex_count = $this->admin->get_join('dashboard_unit_opex_cost_center_tbl a', $join_opex_count, FALSE, FALSE, 'b.cost_center_id');

				if(count($get_opex_count) > 0){
					foreach($get_opex_count as $row_opex_count){
						$opex_cost_center = $row_opex_count->cost_center_id;
						$opex_cost_center_desc = $row_opex_count->cost_center_desc;

						$this->unit_opex_gl_subunit_report_pdf($trans_id, $opex_cost_center, $opex_cost_center_desc, $year, $pdf, $pdf_name, $report_type);
					}
				}

				/*CAPITAL EXPENDITURES SUMMARY PER CATEGORY Page*/

				$pdf->AddPage('P');

				$pdf->SetTextColor(0,0,0);

			    $pdf->setFont('arialb', '', 12);


			    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
			    $pdf->Text(20, 46, 'CAPITAL EXPENDITURES SUMMARY PER CATEGORY');
			    $pdf->Text(20, 52, 'Budget ' . $year);

			    $pdf->SetFont('arial', '', 8);


			    $pdf->writeHTML($capex_category_tbl, true, false, true, false, '');


			    $this->watermark($pdf);
				$this->header($pdf);

				/*CAPITAL EXPENDITURES Page*/

				$pdf->AddPage('P');

				$pdf->SetTextColor(0,0,0);

			    $pdf->setFont('arialb', '', 12);
			    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
			    $pdf->Text(20, 46, 'CAPITAL EXPENDITURES');
			    $pdf->Text(20, 52, 'Budget ' . $year);

			    $pdf->SetFont('arial', '', 10);

			    $get_capex = $this->unit_capex_item_report_pdf($trans_id, $year, $pdf, $pdf_name, $report_type);


			    /*CAPEX Per Sub Unit*/

				$join_capex_count = array(
					'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND b.parent_id = ' . $cost_center_id
				);
				$get_capex_count = $this->admin->get_join('dashboard_unit_capex_item_tbl a', $join_capex_count, FALSE, FALSE, 'b.cost_center_id');

				if(count($get_capex_count) > 0){
					foreach($get_capex_count as $row_capex_count){
						$capex_cost_center = $row_capex_count->cost_center_id;
						$capex_cost_center_desc = $row_capex_count->cost_center_desc;

						$this->unit_capex_item_subunit_report_pdf($trans_id, $capex_cost_center, $capex_cost_center_desc, $year, $pdf, $pdf_name, $report_type);
					}
				}

			    /*Manpower*/

			    $pdf->AddPage();

				$pdf->SetTextColor(0,0,0);

			    $pdf->setFont('arialb', '', 12);
			    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
			    $pdf->Text(20, 46, 'MANPOWER SUMMARY');
			    $pdf->Text(20, 52, 'Budget ' . $year);

			    $pdf->SetFont('arial', '', 8);


			    $manpower_tbl = $this->unit_manpower_report_pdf($trans_id, $year);

			    $pdf->writeHTML($manpower_tbl, true, false, true, false, '');

			    $this->watermark($pdf);
				$this->header($pdf);

			}

			$pdf->Output('BAVI Budgeting ' . $year .' - ' . date('Y/m/d'). '.pdf', 'I');
			exit;
		}
	}

	public function get_employee_report_unit_data($trans_unit_id, $year){
		$info = $this->_require_login();

		$emp_new = 0;
		$emp_old = 0;

		$get_employee = $this->admin->get_query('
			SELECT SUM(dashboard_dept_manpower_unit_new) as dashboard_dept_manpower_unit_new, SUM(dashboard_dept_manpower_unit_bc_new) as dashboard_dept_manpower_unit_bc_new, SUM(dashboard_dept_manpower_unit_old) as dashboard_dept_manpower_unit_old, SUM(dashboard_dept_manpower_unit_bc_old) as dashboard_dept_manpower_unit_bc_old FROM dashboard_dept_manpower_unit_tbl x WHERE x.dashboard_unit_trans_id IN (' . $trans_unit_id . ') AND x.dashboard_dept_manpower_unit_status = 1
		', TRUE);

		$emp_new = $get_employee->dashboard_dept_manpower_unit_new + $get_employee->dashboard_dept_manpower_unit_bc_new;
		$emp_old = $get_employee->dashboard_dept_manpower_unit_old + $get_employee->dashboard_dept_manpower_unit_bc_old;
		
		$employee_report = '';
	    if($emp_new >= 1){
	    	$employee_report = 'Manpower will increase by ' . $emp_new . ' from ' . $emp_old . ' to ' . ($emp_new + $emp_old) . ' personnel in ' . $year . '';
	    }elseif($emp_new == 0){
			$employee_report = 'Manpower will have no increase and total of ' . ($emp_new + $emp_old) . ' personnel in ' . $year . '';
	    }

    	$data['employee_report'] = $employee_report;
    	$data['employee_new'] = $emp_new;
    	return $data;
	}

	public function unit_opex_report_data($trans_id, $year){
		$info = $this->_require_login();

		$join_opex = array('gl_subgroup_tbl b' => 'a.gl_sub_id = b.gl_sub_id AND a.dashboard_unit_opex_cost_center_status = 1 AND a.dashboard_unit_trans_id IN (' . $trans_id . ')');
		$select_opex = 'SUM(a.dashboard_unit_opex_cost_center_amount) as dashboard_unit_opex_cost_center_amount, SUM(a.dashboard_unit_opex_cost_center_amount1) as dashboard_unit_opex_cost_center_amount1, SUM(a.dashboard_unit_opex_cost_center_amount2) as dashboard_unit_opex_cost_center_amount2, b.gl_sub_name';
		$get_opex = $this->admin->get_join('dashboard_unit_opex_cost_center_tbl a', $join_opex, TRUE, FALSE, FALSE, $select_opex);

		$opex_report = 0;

		if(!empty($get_opex) > 0){
			$count_opex_account = 1;
		    $opex_acc_overall = $get_opex->dashboard_unit_opex_cost_center_amount;
		    $opex_acc_overall1 = $get_opex->dashboard_unit_opex_cost_center_amount1;
		    $opex_acc_overall2 = $get_opex->dashboard_unit_opex_cost_center_amount2;

		    $opex_acc_overall_dif1 = $opex_acc_overall - $opex_acc_overall1;
	    	$opex_acc_overall_dif2 = $opex_acc_overall - $opex_acc_overall2;
	    	$opex_acc_overall_per1 = $opex_acc_overall1 != 0 ? ($opex_acc_overall_dif1/$opex_acc_overall1) * 100 : 100;
	    	$opex_acc_overall_per2 = $opex_acc_overall2 != 0 ? ($opex_acc_overall_dif2/$opex_acc_overall2) * 100 : 100;

			$opex_condition1 = $opex_acc_overall_dif1 > 0 ? 'higher' :  'lower';
	    	$opex_condition2 = $opex_acc_overall_dif1 > 0 ? 'higher' :  'lower';

	 		$opex_report = 'OPEX is ₱' . convert_num($opex_acc_overall). ', ' . $opex_condition1 . ' by ₱' . convert_num($opex_acc_overall_dif1) . ' vs ' . ($year - 1) . ' and ' . $opex_condition2 . ' by ₱' . convert_num($opex_acc_overall_dif2) . ' vs ' . ($year - 2);
	 	}

	 	return $opex_report;
	}

	public function unit_opex_per_cost_center_pdf($trans_id, $year){
		$opex_cost_center_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th rowspan="2" align="center" width="30%;"><strong>DEPARTMENT</strong></th>
	    			<th align="center" width="10%"><strong>BUDGET</strong></th>
	    			<th colspan="2" align="center" width="20%"><strong>ACTUAL</strong></th>
	    			<th colspan="4" align="center" width="40%"><strong>VARIANCE</strong></th>
	    		</tr>

	    		<tr>
	    			<td align="center"><strong>' . $year . '</strong></td>
	    			<td align="center"><strong>' . ($year - 1) . '</strong></td>
	    			<td align="center"><strong>' . ($year - 2) . '</strong></td>
	    			<td align="center"><strong>' . $year  . ' vs ' . ($year - 1) . '</strong></td>
	    			<td align="center"><strong>%</strong></td>
	    			<td align="center"><strong>' . $year . ' vs ' . ($year - 2) . '</strong></td>
	    			<td align="center"><strong>%</strong></td>
	    		</tr>
	    ';

	    $join_opex_cost_center = array(
	    	'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.dashboard_unit_opex_cost_center_status = 1 AND a.dashboard_unit_trans_id IN ( ' . $trans_id . ')'
	    );
	    $group_opex_cost_center = 'a.cost_center_id';
	    $select_opex_cost_center = 'SUM(a.dashboard_unit_opex_cost_center_amount) as dashboard_unit_opex_cost_center_amount, SUM(a.dashboard_unit_opex_cost_center_amount1) as dashboard_unit_opex_cost_center_amount1, SUM(a.dashboard_unit_opex_cost_center_amount2) as dashboard_unit_opex_cost_center_amount2, b.cost_center_id, b.cost_center_desc';

	    $opex_per_cost_center = $this->admin->get_join('dashboard_unit_opex_cost_center_tbl a', $join_opex_cost_center, FALSE, FALSE, $group_opex_cost_center, $select_opex_cost_center);

	    $opex_total_per_cc = 0;
	    $opex_total_per_cc1 = 0;
	    $opex_total_per_cc2 = 0;
	    foreach($opex_per_cost_center as $row_opex){
	    	$cost_center_id = $row_opex->cost_center_id;
	    	$cost_center = $row_opex->cost_center_desc;
	    	$opex_total_cost_center = $row_opex->dashboard_unit_opex_cost_center_amount;
	    	$opex_total_cost_center1 = $row_opex->dashboard_unit_opex_cost_center_amount1;
	    	$opex_total_cost_center2 = $row_opex->dashboard_unit_opex_cost_center_amount2;

	    	$opex_total_per_cc += $opex_total_cost_center;
	    	$opex_total_per_cc1 += $opex_total_cost_center1;
	    	$opex_total_per_cc2 += $opex_total_cost_center2;

    		$opex_total_cost_center_dif1 = $opex_total_cost_center - $opex_total_cost_center1;
    		$opex_total_cost_center_dif2 = $opex_total_cost_center - $opex_total_cost_center2;
    		$opex_total_cost_center_percent1 = $opex_total_cost_center1 != 0 ? ($opex_total_cost_center_dif1 / $opex_total_cost_center1) * 100 : 100;
    		$opex_total_cost_center_percent2 = $opex_total_cost_center2 != 0 ? ($opex_total_cost_center_dif2 / $opex_total_cost_center2 * 100) : 100;

	    	$opex_cost_center_tbl .= '
	    	<tr>
    			<td align="">' . $cost_center . '</td>
    			<td align="right">' . number_format($opex_total_cost_center/1000) . '</td>
    			<td align="right">' . number_format($opex_total_cost_center1/1000) . '</td>
    			<td align="right">' . number_format($opex_total_cost_center2/1000) . '</td>
    			<td align="right">' . number_format(($opex_total_cost_center_dif1/1000) * -1)  . '</td>
    			<td align="right">' . number_format($opex_total_cost_center_percent1 * -1) . '%</td>
    			<td align="right">' . number_format(($opex_total_cost_center_dif2/1000) * -1) . '</td>
    			<td align="right">' . number_format($opex_total_cost_center_percent2 * -1) . '%</td>
    		</tr>
    		';
	    }

	    $opex_total_dif_per_cc1 = $opex_total_per_cc - $opex_total_per_cc1;
	    $opex_total_dif_per_cc2 = $opex_total_per_cc - $opex_total_per_cc2;
	    $opex_sales_percent_cc1 = $opex_total_per_cc1 != 0 ? ($opex_total_dif_per_cc1 / $opex_total_per_cc1) * 100 : 100;
	    $opex_sales_percent_cc2 = $opex_total_per_cc2 != 0 ? ($opex_total_dif_per_cc2 / $opex_total_per_cc2) * 100 : 100;

	    $opex_cost_center_tbl .= '
	    	<tr>
    			<td align=""><strong>Total</strong></td>
    			<td align="right"><strong>' . number_format($opex_total_per_cc/1000) . '</strong></td>
    			<td align="right"><strong>' . number_format($opex_total_per_cc1/1000) . '</strong></td>
    			<td align="right"><strong>' . number_format($opex_total_per_cc2/1000) . '</strong></td>
    			<td align="right"><strong>' . number_format(($opex_total_dif_per_cc1/1000) * -1) . '</strong></td>
    			<td align="right"><strong>' . number_format(($opex_sales_percent_cc1) * -1) . '%</strong></td>
    			<td align="right"><strong>' . number_format(($opex_total_dif_per_cc2/1000) * -1) . '</strong></td>
    			<td align="right"><strong>' . number_format(($opex_sales_percent_cc2) * -1) . '%</strong></td>
    		</tr>
    	';

    	$opex_cost_center_tbl .= '</table>';

	    return $opex_cost_center_tbl;
	}

	public function unit_opex_gl_report_pdf($trans_id, $year, $pdf, $pdf_name, $report_type){
		$info = $this->_require_login();

		$opex_per_account_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th rowspan="2" align="center" width="30%"><strong>GL DESCRIPTION</strong></th>
	    			<th align="center" width="10%"><strong>BUDGET</strong></th>
	    			<th colspan="2" align="center" width="20%"><strong>ACTUAL</strong></th>
	    			<th colspan="4" align="center" width="40%"><strong>VARIANCE</strong></th>
	    		</tr>

	    		<tr>
	    			<td align="center"><strong>' . $year . '</strong></td>
	    			<td align="center"><strong>' . ($year - 1) . '</strong></td>
	    			<td align="center"><strong>' . ($year - 2) . '</strong></td>
	    			<td align="center"><strong>' . $year  . ' vs ' . ($year - 1) . '</strong></td>
	    			<td align="center"><strong>%</strong></td>
	    			<td align="center"><strong>' . ($year) . ' vs ' . ($year - 2) . '</strong></td>
	    			<td align="center"><strong>%</strong></td>
	    		</tr>
	    ';

		$join_opex = array('gl_subgroup_tbl b' => 'a.gl_sub_id = b.gl_sub_id AND a.dashboard_unit_opex_cost_center_status = 1 AND a.dashboard_unit_trans_id IN (' . $trans_id . ')');
		$select_opex = 'SUM(a.dashboard_unit_opex_cost_center_amount) as dashboard_unit_opex_cost_center_amount, SUM(a.dashboard_unit_opex_cost_center_amount1) as dashboard_unit_opex_cost_center_amount1, SUM(a.dashboard_unit_opex_cost_center_amount2) as dashboard_unit_opex_cost_center_amount2, b.gl_sub_name';
		$group_opex = 'b.gl_sub_id';
		$get_opex = $this->admin->get_join('dashboard_unit_opex_cost_center_tbl a', $join_opex, FALSE, FALSE, $group_opex, $select_opex);

		$opex_tbl = '';
		$count_opex_account = 1;
	    $opex_acc_overall = 0;
	    $opex_acc_overall1 = 0;
	    $opex_acc_overall2 = 0;
		foreach($get_opex as $row){
			$gl_sub_name = $row->gl_sub_name;
			$opex_acc_total = $row->dashboard_unit_opex_cost_center_amount;
			$opex_acc_total1 = $row->dashboard_unit_opex_cost_center_amount1;
			$opex_acc_total2 = $row->dashboard_unit_opex_cost_center_amount2;
			$opex_acc_dif1 = $opex_acc_total - $opex_acc_total1;
			$opex_acc_dif2 = $opex_acc_total - $opex_acc_total2;
			$opex_acc_per1 = $opex_acc_total1 != 0 && $opex_acc_total != 0 && ($opex_acc_total1 / 1000) > 1? ($opex_acc_dif1/$opex_acc_total1) * 100 : 0;
			$opex_acc_per2 = $opex_acc_total2 != 0 && $opex_acc_total != 0 && ($opex_acc_total2 / 1000) > 1 ? ($opex_acc_dif2/$opex_acc_total2) * 100 : 0;


			$opex_tbl .= '
	    		<tr>
	    			<td>' . $gl_sub_name . '</td>
	    			<td align="right">' . number_format($opex_acc_total) . '</td>
	    			<td align="right">' . number_format($opex_acc_total1) . '</td>
	    			<td align="right">' . number_format($opex_acc_total2) . '</td>
	    			<td align="right">' . number_format($opex_acc_dif1) . '</td>
	    			<td align="right">' . number_formaT($opex_acc_per1) . '%</td>
	    			<td align="right">' . number_format($opex_acc_dif2) . '</td>
	    			<td align="right">' . number_format($opex_acc_per2) . '%</td>
	    		</tr>

	    	';

	    	$opex_acc_overall += $opex_acc_total;
	    	$opex_acc_overall1 += $opex_acc_total1;
	    	$opex_acc_overall2 += $opex_acc_total2;

	    	/*$opex_acc_dif1 = ($opex_acc_total - $opex_acc_total1);
	    	$opex_acc_dif2 = ($opex_acc_total - $opex_acc_total2);
	    	$opex_acc_per1 = $opex_acc_total1 != 0 ? ($opex_acc_dif1/$opex_acc_total1) * 100 : 100;
	    	$opex_acc_per2 = $opex_acc_total2 != 0 ? ($opex_acc_dif2/$opex_acc_total2) * 100 : 100;*/

	    	$opex_per_account_tbl .= '
	    		<tr>
	    			<td>' . $row->gl_sub_name . '</td>
	    			<td align="right">' . number_format($opex_acc_total/1000) . '</td>
	    			<td align="right">' . number_format($opex_acc_total1/1000) . '</td>
	    			<td align="right">' . number_format($opex_acc_total2/1000) . '</td>
	    			<td align="right">' . number_format(($opex_acc_dif1/1000) * -1) . '</td>
	    			<td align="right">' . number_format($opex_acc_per1 * -1) . '%</td>
	    			<td align="right">' . number_format(($opex_acc_dif2/1000) * -1) . '</td>
	    			<td align="right">' . number_format($opex_acc_per2 * -1) . '%</td>
	    		</tr>

	    	';

	    	if($count_opex_account%19 == 0 && count($get_opex) != $count_opex_account){
	    		$opex_per_account_tbl .= '</table>';
	    		$pdf->writeHTML($opex_per_account_tbl, true, false, true, false, '');

	    		$this->watermark_landscape($pdf);
				$this->header_landscape($pdf);

				$pdf->AddPage('L');
				$pdf->SetTextColor(0,0,0);

			    $pdf->setFont('arialb', '', 12);
			    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
			    $pdf->Text(20, 46, 'COMPARATIVE OPERATING EXPENSES PER ACCOUNT');
			    $pdf->Text(20, 52, 'Budget ' . $year);

			    $pdf->SetFont('arial', '', 8);

		    	$opex_per_account_tbl = '<br /><br /><br /><br />
			    	<table border="1" cellpadding="3">
			    		<tr>
			    			<th rowspan="2" align="center" width="30%"><strong>GL DESCRIPTION</strong></th>
			    			<th align="center" width="10%"><strong>BUDGET</strong></th>
			    			<th colspan="2" align="center" width="20%"><strong>ACTUAL</strong></th>
			    			<th colspan="4" align="center" width="40%"><strong>VARIANCE</strong></th>
			    		</tr>

			    		<tr>
			    			<td align="center"><strong>' . $year . '</strong></td>
			    			<td align="center"><strong>' . ($year - 1) . '</strong></td>
			    			<td align="center"><strong>' . ($year - 2) . '</strong></td>
			    			<td align="center"><strong>' . $year  . ' vs ' . ($year - 1) . '</strong></td>
			    			<td align="center"><strong>%</strong></td>
			    			<td align="center"><strong>' . ($year - 1) . ' vs ' . ($year - 2) . '</strong></td>
			    			<td align="center"><strong>%</strong></td>
			    		</tr>
			    ';
		    }elseif(count($get_opex) == $count_opex_account){

		    	$opex_acc_overall_dif1 = $opex_acc_overall - $opex_acc_overall1;
		    	$opex_acc_overall_dif2 = $opex_acc_overall - $opex_acc_overall2;
		    	$opex_acc_overall_per1 = $opex_acc_overall1 != 0 ? ($opex_acc_overall_dif1/$opex_acc_overall1) * 100 : 100;
		    	$opex_acc_overall_per2 = $opex_acc_overall2 != 0 ? ($opex_acc_overall_dif2/$opex_acc_overall2) * 100 : 100;
		    	$opex_per_account_tbl .= '
	    		<tr>
	    			<td><strong>Total:</strong></td>
	    			<td align="right"><strong>' . number_format($opex_acc_overall/1000) . '</strong></td>
	    			<td align="right"><strong>' . number_format($opex_acc_overall1/1000) . '</strong></td>
	    			<td align="right"><strong>' . number_format($opex_acc_overall2/1000) . '</strong></td>
	    			<td align="right"><strong>' . number_format(($opex_acc_overall_dif1/1000) * -1) . '</strong></td>
	    			<td align="right"><strong>' . number_format($opex_acc_overall_per1 * -1) . '%</strong></td>
	    			<td align="right"><strong>' . number_format(($opex_acc_overall_dif2/1000) * -1) . '</strong></td>
	    			<td align="right"><strong>' . number_format($opex_acc_overall_per2 * -1) . '%</strong></td>
	    		</tr>

	    	';

		    	$opex_per_account_tbl .= '</table>';
	    		$pdf->writeHTML($opex_per_account_tbl, true, false, true, false, '');

	    		$this->watermark_landscape($pdf);
				$this->header_landscape($pdf);
		    }

		    $count_opex_account++;

		}
	}

	public function unit_opex_gl_subunit_report_pdf($trans_id, $cost_center_id, $cost_center_desc, $year, $pdf, $pdf_name, $report_type){
		$info = $this->_require_login();

		$pdf->AddPage('L');
		$pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
	    $pdf->Text(20, 46, 'COMPARATIVE OPERATING EXPENSES PER ACCOUNT - ' . $cost_center_desc);
	    $pdf->Text(20, 52, 'Budget ' . $year);

	    $pdf->SetFont('arial', '', 8);

		$opex_per_account_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th rowspan="2" align="center" width="30%"><strong>GL DESCRIPTION</strong></th>
	    			<th align="center" width="10%"><strong>BUDGET</strong></th>
	    			<th colspan="2" align="center" width="20%"><strong>ACTUAL</strong></th>
	    			<th colspan="4" align="center" width="40%"><strong>VARIANCE</strong></th>
	    		</tr>

	    		<tr>
	    			<td align="center"><strong>' . $year . '</strong></td>
	    			<td align="center"><strong>' . ($year - 1) . '</strong></td>
	    			<td align="center"><strong>' . ($year - 2) . '</strong></td>
	    			<td align="center"><strong>' . $year  . ' vs ' . ($year - 1) . '</strong></td>
	    			<td align="center"><strong>%</strong></td>
	    			<td align="center"><strong>' . ($year - 1) . ' vs ' . ($year - 2) . '</strong></td>
	    			<td align="center"><strong>%</strong></td>
	    		</tr>
	    ';

		$join_opex = array(
			'gl_subgroup_tbl b' => 'a.gl_sub_id = b.gl_sub_id AND a.dashboard_unit_opex_cost_center_status = 1 AND a.dashboard_unit_trans_id IN (' . $trans_id . ')',
			'cost_center_tbl c' => 'a.cost_center_id = c.cost_center_id AND (c.parent_id = ' . $cost_center_id . ' OR c.cost_center_id = ' . $cost_center_id .')'
		);
		$select_opex = 'SUM(a.dashboard_unit_opex_cost_center_amount) as dashboard_unit_opex_cost_center_amount, (a.dashboard_unit_opex_cost_center_amount1) as dashboard_unit_opex_cost_center_amount1, (a.dashboard_unit_opex_cost_center_amount2) as dashboard_unit_opex_cost_center_amount2, b.gl_sub_name';
		$group_opex = 'b.gl_sub_id';
		$get_opex = $this->admin->get_join('dashboard_unit_opex_cost_center_tbl a', $join_opex, FALSE, FALSE, $group_opex, $select_opex);

		$opex_tbl = '';
		$count_opex_account = 1;
	    $opex_acc_overall = 0;
	    $opex_acc_overall1 = 0;
	    $opex_acc_overall2 = 0;
		foreach($get_opex as $row){
			$gl_sub_name = $row->gl_sub_name;
			$opex_acc_total = $row->dashboard_unit_opex_cost_center_amount;
			$opex_acc_total1 = $row->dashboard_unit_opex_cost_center_amount1;
			$opex_acc_total2 = $row->dashboard_unit_opex_cost_center_amount2;
			$opex_acc_dif1 = $opex_acc_total - $opex_acc_total1;
			$opex_acc_dif2 = $opex_acc_total - $opex_acc_total2;
			$opex_acc_per1 = $opex_acc_total1 != 0 && $opex_acc_total != 0 ? ($opex_acc_dif1/$opex_acc_total1) * 100 : 0;
			$opex_acc_per2 = $opex_acc_total2 != 0 && $opex_acc_total != 0 ? ($opex_acc_dif2/$opex_acc_total2) * 100 : 0;


			$opex_tbl .= '
	    		<tr>
	    			<td>' . $gl_sub_name . '</td>
	    			<td align="right">' . number_format($opex_acc_total) . '</td>
	    			<td align="right">' . number_format($opex_acc_total1) . '</td>
	    			<td align="right">' . number_format($opex_acc_total2) . '</td>
	    			<td align="right">' . number_format($opex_acc_dif1) . '</td>
	    			<td align="right">' . number_formaT($opex_acc_per1) . '%</td>
	    			<td align="right">' . number_format($opex_acc_dif2) . '</td>
	    			<td align="right">' . number_format($opex_acc_per2) . '%</td>
	    		</tr>

	    	';

	    	$opex_acc_overall += $opex_acc_total;
	    	$opex_acc_overall1 += $opex_acc_total1;
	    	$opex_acc_overall2 += $opex_acc_total2;

	    	/*$opex_acc_dif1 = ($opex_acc_total - $opex_acc_total1);
	    	$opex_acc_dif2 = ($opex_acc_total - $opex_acc_total2);
	    	$opex_acc_per1 = $opex_acc_total1 != 0 ? ($opex_acc_dif1/$opex_acc_total1) * 100 : 100;
	    	$opex_acc_per2 = $opex_acc_total2 != 0 ? ($opex_acc_dif2/$opex_acc_total2) * 100 : 100;*/

	    	$opex_per_account_tbl .= '
	    		<tr>
	    			<td>' . $row->gl_sub_name . '</td>
	    			<td align="right">' . number_format($opex_acc_total/1000) . '</td>
	    			<td align="right">' . number_format($opex_acc_total1/1000) . '</td>
	    			<td align="right">' . number_format($opex_acc_total2/1000) . '</td>
	    			<td align="right">' . number_format(($opex_acc_dif1/1000) * -1) . '</td>
	    			<td align="right">' . number_format($opex_acc_per1 * -1) . '%</td>
	    			<td align="right">' . number_format(($opex_acc_dif2/1000) * -1) . '</td>
	    			<td align="right">' . number_format($opex_acc_per2 * -1) . '%</td>
	    		</tr>

	    	';

	    	if($count_opex_account%19 == 0 && count($get_opex) != $count_opex_account){
	    		$opex_per_account_tbl .= '</table>';
	    		$pdf->writeHTML($opex_per_account_tbl, true, false, true, false, '');

	    		$this->watermark_landscape($pdf);
				$this->header_landscape($pdf);

				$pdf->AddPage('L');
				$pdf->SetTextColor(0,0,0);

			    $pdf->setFont('arialb', '', 12);
			    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
			    $pdf->Text(20, 46, 'COMPARATIVE OPERATING EXPENSES PER ACCOUNT - ' . $cost_center_desc);
			    $pdf->Text(20, 52, 'Budget ' . $year);

			    $pdf->SetFont('arial', '', 8);

		    	$opex_per_account_tbl = '<br /><br /><br /><br />
			    	<table border="1" cellpadding="3">
			    		<tr>
			    			<th rowspan="2" align="center" width="30%"><strong>GL DESCRIPTION</strong></th>
			    			<th align="center" width="10%"><strong>BUDGET</strong></th>
			    			<th colspan="2" align="center" width="20%"><strong>ACTUAL</strong></th>
			    			<th colspan="4" align="center" width="40%"><strong>VARIANCE</strong></th>
			    		</tr>

			    		<tr>
			    			<td align="center"><strong>' . $year . '</strong></td>
			    			<td align="center"><strong>' . ($year - 1) . '</strong></td>
			    			<td align="center"><strong>' . ($year - 2) . '</strong></td>
			    			<td align="center"><strong>' . $year  . ' vs ' . ($year - 1) . '</strong></td>
			    			<td align="center"><strong>%</strong></td>
			    			<td align="center"><strong>' . ($year - 1) . ' vs ' . ($year - 2) . '</strong></td>
			    			<td align="center"><strong>%</strong></td>
			    		</tr>
			    ';
		    }elseif(count($get_opex) == $count_opex_account){

		    	$opex_acc_overall_dif1 = $opex_acc_overall - $opex_acc_overall1;
		    	$opex_acc_overall_dif2 = $opex_acc_overall - $opex_acc_overall2;
		    	$opex_acc_overall_per1 = $opex_acc_overall1 != 0 ? ($opex_acc_overall_dif1/$opex_acc_overall1) * 100 : 100;
		    	$opex_acc_overall_per2 = $opex_acc_overall2 != 0 ? ($opex_acc_overall_dif2/$opex_acc_overall2) * 100 : 100;
		    	$opex_per_account_tbl .= '
	    		<tr>
	    			<td><strong>Total:</strong></td>
	    			<td align="right"><strong>' . number_format($opex_acc_overall/1000) . '</strong></td>
	    			<td align="right"><strong>' . number_format($opex_acc_overall1/1000) . '</strong></td>
	    			<td align="right"><strong>' . number_format($opex_acc_overall2/1000) . '</strong></td>
	    			<td align="right"><strong>' . number_format(($opex_acc_overall_dif1/1000) * -1) . '</strong></td>
	    			<td align="right"><strong>' . number_format($opex_acc_overall_per1 * -1) . '%</strong></td>
	    			<td align="right"><strong>' . number_format(($opex_acc_overall_dif2/1000) * -1) . '</strong></td>
	    			<td align="right"><strong>' . number_format($opex_acc_overall_per2 * -1) . '%</strong></td>
	    		</tr>

	    	';

		    	$opex_per_account_tbl .= '</table>';
	    		$pdf->writeHTML($opex_per_account_tbl, true, false, true, false, '');

	    		$this->watermark_landscape($pdf);
				$this->header_landscape($pdf);
		    }

		    $count_opex_account++;

		}
	}

	public function unit_capex_group_report_pdf($trans_id, $year){
		$info = $this->_require_login();

		$join_capex = array(
			'asset_group_tbl b' => 'a.ag_id = b.ag_id AND dashboard_unit_capex_group_status = 1 AND a.dashboard_unit_trans_id IN (' . $trans_id . ')'
		);
		$group_capex = 'b.ag_id';
		$select_capex = 'b.ag_name, SUM(a.dashboard_unit_capex_group_total) as dashboard_unit_capex_group_total, SUM(a.dashboard_unit_capex_group_total1) as dashboard_unit_capex_group_total1, SUM(a.dashboard_unit_capex_group_total2) as dashboard_unit_capex_group_total2';
		$get_capex = $this->admin->get_join('dashboard_unit_capex_group_tbl a',$join_capex, FALSE, 'b.ag_name', $group_capex, $select_capex);
		
		$capex_grand_total = 0;
	    $capex_grand_total1 = 0;
	    $capex_grand_total2 = 0;

	    $capex_category_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="30%"><strong>ASSET TYPE</strong></th>
	    			<th align="center" width="10%"><strong>' . $year .'</strong></th>
	    			<th align="center" width="10%"><strong>' . ($year - 1) . '</strong></th>
	    			<th align="center" width="10%"><strong>' . ($year - 2) . '</strong></th>
	    			<th align="center" width="10%"><strong>Fav/(UnFav)</strong></th>
	    			<th align="center" width="10%"><strong>%</strong></th>
	    			<th align="center" width="10%"><strong>Fav/(UnFav)</strong></th>
	    			<th align="center" width="10%"><strong>%</strong></th>
	    		</tr>
	    ';

	    foreach($get_capex as $row_capex_cat){
	    	$capex_total = $row_capex_cat->dashboard_unit_capex_group_total;
	    	$capex_total1 = $row_capex_cat->dashboard_unit_capex_group_total1;
	    	$capex_total2 = $row_capex_cat->dashboard_unit_capex_group_total2;

	    	$capex_grand_total += $capex_total;
	    	$capex_grand_total1 += $capex_total1;
	    	$capex_grand_total2 += $capex_total2;

	    	$capex_dif1 = $capex_total - $capex_total1;
	    	$capex_dif2 = $capex_total - $capex_total2;
	    	$capex_per1 = $capex_total1 != 0 && $capex_total != 0 ? ($capex_dif1/$capex_total1) * 100 : 0;
	    	$capex_per2 = $capex_total2 != 0 && $capex_total != 0 ? ($capex_dif2/$capex_total2) * 100 : 0;

	    	$capex_category_tbl .= '
	    		<tr>
	    			<td>' . $row_capex_cat->ag_name . '</td>
	    			<td align="right">' . number_format($capex_total/1000) . '</td>
	    			<td align="right">' . number_format($capex_total1/1000) . '</td>
	    			<td align="right">' . number_format($capex_total2/1000) . '</td>
	    			<td align="right">' . number_format($capex_dif1/1000) . '</td>
	    			<td align="right">' . number_format($capex_per1) . '%</td>
	    			<td align="right">' . number_format($capex_dif2/1000) . '</td>
	    			<td align="right">' . number_format($capex_per2) . '%</td>
	    		</tr>

	    	';
	    }

	    $capex_total_dif1 = $capex_grand_total - $capex_grand_total1;
	    $capex_total_dif2 = $capex_grand_total - $capex_grand_total2;
	    $capex_total_per1 = $capex_grand_total1 != 0 && $capex_grand_total != 0 ? ($capex_total_dif1/$capex_grand_total1) * 100 : 0;
	    $capex_total_per2 = $capex_grand_total2 != 0 && $capex_grand_total != 0 ? ($capex_total_dif2/$capex_grand_total2) * 100 : 0;

	    $capex_category_tbl .= '
	    	<tr>
	    		<td><strong>TOTAL</strong></td>
	    		<td align="right"><strong>' . number_format($capex_grand_total/1000) . '</strong></td>
	    		<td align="right"><strong>' . number_format($capex_grand_total1/1000) . '</strong></td>
	    		<td align="right"><strong>' . number_format($capex_grand_total2/1000) . '</strong></td>
	    		<td align="right"><strong>' . number_format($capex_total_dif1/1000) . '</strong></td>
	    		<td align="right"><strong>' . number_format($capex_total_per1) . '%</strong></td>
	    		<td align="right"><strong>' . number_format($capex_total_dif2/1000) . '</strong></td>
	    		<td align="right"><strong>' . number_format($capex_total_per2) . '%</strong></td>
	    	</tr>
	    ';

	    $capex_category_tbl .= '</table>';

    	$capex_condition1 = $capex_total_dif1 > 0 ? 'higher' :  'lower';
    	$capex_condition2 = $capex_total_dif2 > 0 ? 'higher' :  'lower';
    	$capex_sign1 = $capex_total_per1 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';
    	$capex_sign2 = $capex_total_per2 > 0 ? '<span class="fa fa-long-arrow-up"></span>' : '<span class="fa fa-long-arrow-down"></span>';

 		$capex_report = 'CAPEX is ₱' . convert_num($capex_grand_total). ', ' . $capex_condition1 . ' by ₱' . convert_num($capex_total_dif1) . ' vs ' . ($year - 1) . ' and ' . $capex_condition2 . ' by ₱' . convert_num($capex_total_dif2) . ' vs ' . ($year - 2);
 		$data['capex_category_tbl'] = $capex_category_tbl;
 		$data['capex_report'] = $capex_report;
	    return $data;
	}

	public function unit_capex_item_report_pdf($trans_id, $year, $pdf, $pdf_name, $report_type){
		$info = $this->_require_login();

		$join_capex = array(
			'asset_subgroup_tbl b' => 'a.asg_id = b.asg_id AND dashboard_unit_capex_item_status = 1 AND a.dashboard_unit_trans_id IN (' . $trans_id . ')',

			'asset_group_tbl c' => 'b.ag_id = c.ag_id'
		);
		$group_capex = 'b.asg_id';
		$select_capex = 'c.ag_name, b.asg_name, SUM(a.dashboard_unit_capex_item_total) as dashboard_unit_capex_item_total, SUM(a.dashboard_unit_capex_item_qty) as dashboard_unit_capex_item_qty,  dashboard_unit_capex_item_price';
		$get_capex = $this->admin->get_join('dashboard_unit_capex_item_tbl a',$join_capex, FALSE, 'b.asg_name', $group_capex, $select_capex);
		
		$capex_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="30%"><strong>ASSET GROUP</strong></th>
	    			<th align="center" width="30%"><strong>ITEM DESCRIPTION</strong></th>
	    			<th align="center" width="12%"><strong>QTY</strong></th>
	    			<th align="center" width="13%"><strong>COST</strong></th>
	    			<th align="center" width="15%"><strong>AMOUNT</strong></th>
	    		</tr>
	    ';
	    $count_capex = 1;
	    $total_capex = 0;
	    foreach($get_capex as $row_capex){

	    	$total_capex += $row_capex->dashboard_unit_capex_item_total;

	    	$capex_tbl .= '
	    		<tr>
	    			<td>' . $row_capex->ag_name . '</td>
	    			<td>' . $row_capex->asg_name . '</td>
	    			<td align="right">' . number_format($row_capex->dashboard_unit_capex_item_qty) . '</td>
	    			<td align="right">' . number_format($row_capex->dashboard_unit_capex_item_price) . '</td>
	    			<td align="right">' . number_format($row_capex->dashboard_unit_capex_item_total) . '</td>
	    		</tr>
	    	';

	    	if($count_capex%16 == 0 && count($get_capex) != $count_capex){
	    		$capex_tbl .= '</table>';
	    		$pdf->writeHTML($capex_tbl, true, false, true, false, '');

	    		$this->watermark($pdf);
				$this->header($pdf);

				$pdf->AddPage('P');

				$pdf->SetTextColor(0,0,0);

			    $pdf->setFont('arialb', '', 12);
			    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
			    $pdf->Text(20, 46, 'CAPITAL EXPENDITURES');
			    $pdf->Text(20, 52, 'Budget ' . $year);

			    $pdf->SetFont('arial', '', 10);

			    $capex_tbl = '<br /><br /><br /><br />
			    	<table border="1" cellpadding="3">
			    		<tr>
			    			<th align="center" width="30%"><strong>ASSET GROUP</strong></th>
			    			<th align="center" width="30%"><strong>ITEM DESCRIPTION</strong></th>
			    			<th align="center" width="12%"><strong>QTY</strong></th>
			    			<th align="center" width="13%"><strong>COST</strong></th>
			    			<th align="center" width="15%"><strong>AMOUNT</strong></th>
			    		</tr>
			    ';
		    }elseif(count($get_capex) == $count_capex){
		    	$capex_tbl .= '<tr><td align="right" colspan="5"><strong>' . number_format($total_capex) .'</strong></td></tr>';
		    	$capex_tbl .= '</table>';
	    		$pdf->writeHTML($capex_tbl, true, false, true, false, '');

	    		$this->watermark($pdf);
				$this->header($pdf);
		    }

		    $count_capex++;
	    }
	}

	public function unit_capex_item_subunit_report_pdf($trans_id, $cost_center_id, $cost_center_desc, $year, $pdf, $pdf_name, $report_type){
		$info = $this->_require_login();

		$join_capex = array(
			'asset_subgroup_tbl b' => 'a.asg_id = b.asg_id AND dashboard_unit_capex_item_status = 1 AND a.dashboard_unit_trans_id IN (' . $trans_id . ') AND a.cost_center_id = ' . $cost_center_id,

			'asset_group_tbl c' => 'b.ag_id = c.ag_id'
		);
		$group_capex = 'b.asg_id';
		$select_capex = 'c.ag_name, b.asg_name, SUM(a.dashboard_unit_capex_item_total) as dashboard_unit_capex_item_total, SUM(a.dashboard_unit_capex_item_qty) as dashboard_unit_capex_item_qty,  dashboard_unit_capex_item_price';
		$get_capex = $this->admin->get_join('dashboard_unit_capex_item_tbl a',$join_capex, FALSE, 'b.asg_name', $group_capex, $select_capex);
		
		$capex_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center" width="30%"><strong>ASSET GROUP</strong></th>
	    			<th align="center" width="30%"><strong>ITEM DESCRIPTION</strong></th>
	    			<th align="center" width="12%"><strong>QTY</strong></th>
	    			<th align="center" width="13%"><strong>COST</strong></th>
	    			<th align="center" width="15%"><strong>AMOUNT</strong></th>
	    		</tr>
	    ';

	    $pdf->AddPage('P');

		$pdf->SetTextColor(0,0,0);

	    $pdf->setFont('arialb', '', 12);
	    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
	    $pdf->Text(20, 46, 'CAPITAL EXPENDITURES - ' . $cost_center_desc);
	    $pdf->Text(20, 52, 'Budget ' . $year);

	    $pdf->SetFont('arial', '', 10);

	    $count_capex = 1;
	    $total_capex = 0;
	    foreach($get_capex as $row_capex){

	    	$total_capex += $row_capex->dashboard_unit_capex_item_total;

	    	$capex_tbl .= '
	    		<tr>
	    			<td>' . $row_capex->ag_name . '</td>
	    			<td>' . $row_capex->asg_name . '</td>
	    			<td align="right">' . number_format($row_capex->dashboard_unit_capex_item_qty) . '</td>
	    			<td align="right">' . number_format($row_capex->dashboard_unit_capex_item_price) . '</td>
	    			<td align="right">' . number_format($row_capex->dashboard_unit_capex_item_total) . '</td>
	    		</tr>
	    	';

	    	if($count_capex%16 == 0 && count($get_capex) != $count_capex){
	    		$capex_tbl .= '</table>';
	    		$pdf->writeHTML($capex_tbl, true, false, true, false, '');

	    		$this->watermark($pdf);
				$this->header($pdf);

				$pdf->AddPage('P');

				$pdf->SetTextColor(0,0,0);

			    $pdf->setFont('arialb', '', 12);
			    $pdf->Text(20, 40, $pdf_name . ' ' . $report_type);
			    $pdf->Text(20, 46, 'CAPITAL EXPENDITURES - ' . $cost_center_desc);
			    $pdf->Text(20, 52, 'Budget ' . $year);

			    $pdf->SetFont('arial', '', 10);

			    $capex_tbl = '<br /><br /><br /><br />
			    	<table border="1" cellpadding="3">
			    		<tr>
			    			<th align="center" width="30%"><strong>ASSET GROUP</strong></th>
			    			<th align="center" width="30%"><strong>ITEM DESCRIPTION</strong></th>
			    			<th align="center" width="12%"><strong>QTY</strong></th>
			    			<th align="center" width="13%"><strong>COST</strong></th>
			    			<th align="center" width="15%"><strong>AMOUNT</strong></th>
			    		</tr>
			    ';
		    }elseif(count($get_capex) == $count_capex){
		    	$capex_tbl .= '<tr><td align="right" colspan="5"><strong>' . number_format($total_capex) .'</strong></td></tr>';
		    	$capex_tbl .= '</table>';
	    		$pdf->writeHTML($capex_tbl, true, false, true, false, '');

	    		$this->watermark($pdf);
				$this->header($pdf);
		    }

		    $count_capex++;
	    }
	}

	public function unit_employee_pdf_data($trans_id, $cost_center_id, $year){
		$join_manpower = array(
			'cost_center_tbl b' => 'a.cost_center_id = b.cost_center_id AND a.manpower_status = 1 AND a.manpower_year = ' . $year . ' AND (b.parent_id = ' . $cost_center_id . ' OR b.cost_center_id = ' . $cost_center_id . ')',
			'company_unit_tbl c' => 'b.company_unit_id = c.company_unit_id',
			'rank_tbl d' => 'a.rank_id = d.rank_id'
		);
		$group_manpower = 'b.cost_center_id, a.manpower_position, d.rank_id';
		$select_manpower = 'IFNULL(SUM(a.manpower_old), 0) as manpower_old, IFNULL(SUM(a.manpower_new), 0) as manpower_new, IFNULL(SUM(a.manpower_bc_old), 0) as manpower_bc_old, IFNULL(SUM(a.manpower_bc_new), 0) as manpower_bc_new, a.manpower_position, c.company_unit_id, d.rank_id, b.cost_center_id';
		$order_manpower = 'c.company_unit_name, d.rank_name, a.manpower_position';

	    $get_manpower = $this->admin->get_join('manpower_tbl a', $join_manpower, FALSE, $order_manpower, $group_manpower, $select_manpower);

	    $manpower_grandtotal = 0;
	    $manpower_old_total = 0;
	    $manpower_new_total = 0;
	    foreach($get_manpower as $row_manpower){
	    	$company_unit_id = $row_manpower->company_unit_id;
	    	$rank_id = $row_manpower->rank_id;
	    	$position = $row_manpower->manpower_position;
	    	$cost_center = $row_manpower->cost_center_id;

	    	$manpower_old = $row_manpower->manpower_old;
	    	$manpower_new = $row_manpower->manpower_new;
	    	$manpower_bc_old = $row_manpower->manpower_bc_old;
	    	$manpower_bc_new = $row_manpower->manpower_bc_new;
	    	$manpower_total = $manpower_old + $manpower_new;

	    	$set_manpower = array(
	    		'dashboard_unit_trans_id' => $trans_id,
	    		'cost_center_id' => $cost_center,
	    		'company_unit_id' => $company_unit_id,
	    		'rank_id' => $rank_id,
	    		'dashboard_dept_manpower_unit_position' => $position,
	    		'dashboard_dept_manpower_unit_old' => $manpower_old,
	    		'dashboard_dept_manpower_unit_new' => $manpower_new,
	    		'dashboard_dept_manpower_unit_bc_old' => $manpower_bc_old,
	    		'dashboard_dept_manpower_unit_bc_new' => $manpower_bc_new,
	    		'dashboard_dept_manpower_unit_total' => $manpower_total,
	    		'dashboard_dept_manpower_unit_added' => date_now(),
	    		'dashboard_dept_manpower_unit_status' => 1
	    	);

	    	$insert_manpower = $this->admin->insert_data('dashboard_dept_manpower_unit_tbl', $set_manpower);

	    }
	}

	public function unit_manpower_report_pdf($trans_id, $year){
		$info = $this->_require_login();

		$join_manpower = array(
			'company_unit_tbl b' => 'a.company_unit_id = b.company_unit_id AND a.dashboard_unit_trans_id IN (' . $trans_id . ') AND a.dashboard_dept_manpower_unit_status = 1',
			'rank_tbl c' => 'a.rank_id = c.rank_id'
		);
		$group_manpower = 'a.cost_center_id, a.dashboard_dept_manpower_unit_position, c.rank_id';
		$select_manpower = 'SUM(a.dashboard_dept_manpower_unit_old) as dashboard_dept_manpower_unit_old , SUM(a.dashboard_dept_manpower_unit_new) as dashboard_dept_manpower_unit_new, SUM(a.dashboard_dept_manpower_unit_bc_old) as dashboard_dept_manpower_unit_bc_old , SUM(a.dashboard_dept_manpower_unit_bc_new) as dashboard_dept_manpower_unit_bc_new, a.dashboard_dept_manpower_unit_position, b.company_unit_name, c.rank_name ';
		$order_manpower = 'b.company_unit_name, c.rank_name, a.dashboard_dept_manpower_unit_position';

		$get_manpower = $this->admin->get_join('dashboard_dept_manpower_unit_tbl a', $join_manpower, FALSE, $order_manpower, $group_manpower, $select_manpower);

		 $manpower_tbl = '<br /><br /><br /><br />
	    	<table border="1" cellpadding="3">
	    		<tr>
	    			<th align="center"><strong>Cost Center</strong></th>
	    			<th align="center"><strong>POSITION</strong></th>
	    			<th align="center"><strong>RANK</strong></th>
	    			<th align="center"><strong>' . ($year - 1) . '</strong></th>
	    			<th align="center"><strong>ADDL</strong></th>
	    			<th align="center"><strong>' . $year . '</strong></th>
	    		</tr>
	    ';

	    $manpower_grandtotal = 0;
	    $manpower_old_total = 0;
	    $manpower_new_total = 0;
	    foreach($get_manpower as $row_manpower){
	    	$manpower_old = $row_manpower->dashboard_dept_manpower_unit_old;
	    	$manpower_new = $row_manpower->dashboard_dept_manpower_unit_new;
	    	$manpower_bc_old = $row_manpower->dashboard_dept_manpower_unit_bc_old;
	    	$manpower_bc_new = $row_manpower->dashboard_dept_manpower_unit_bc_new;
	    	$manpower_total = $manpower_old + $manpower_bc_old + $manpower_new + $manpower_bc_new;

	    	$manpower_old_total += $manpower_old + $manpower_bc_old;
	    	$manpower_new_total += $manpower_new + $manpower_bc_new;
	    	$manpower_grandtotal += $manpower_total;
	    	$manpower_tbl .= '
	    		<tr>
	    			<td>' . $row_manpower->company_unit_name . '</td>
	    			<td>' . $row_manpower->dashboard_dept_manpower_unit_position . '</td>
	    			<td>' . $row_manpower->rank_name . '</td>
	    			<td align="center">' . number_format($manpower_old + $manpower_bc_old) . '</td>
	    			<td align="center">' . number_format($manpower_new + $manpower_bc_new) . '</td>
	    			<td align="center">' . number_format($manpower_total) . '</td>
	    		</tr>
	    	';
	    }
	    $manpower_tbl .= '
	    	<tr>
	    		<td></td>
	    		<td></td>
	    		<td></td>
	    		<td align="center"><strong>' . number_format($manpower_old_total) . '</strong></td>
	    		<td align="center"><strong>' . number_format($manpower_new_total) . '</strong></td>
	    		<td align="center"><strong>' . number_format($manpower_grandtotal) . '</strong></td>
	    	</tr>
	    ';

	    $manpower_tbl .= '</table>';

	    return $manpower_tbl;
	}

	public function dl_net_sales_old($type, $id, $year){
		$info = $this->_require_login();

 		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','12048M');

		$type = decode($type);

 		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('Sales Templates')
				->setSubject('Sales Module')
				->setDescription('Sales Templates');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);

		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_material = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_mat_code= array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);


		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Business Center')
				->setCellValue("B1", 'IFS Code')
				->setCellValue("C1", 'Outlet name')
				->setCellValue("D1", 'Brand')
				->setCellValue("E1", 'Material Code')
				->setCellValue("F1", 'Material Description')
				->setCellValue("G1", 'VAT TYPE')
				->setCellValue("H1", 'Material Group')
				->setCellValue("I1", 'Date')
				->setCellValue("J1", 'Sales QTY')
				->setCellValue("K1", 'ASP')
				->setCellValue("L1", 'Weight')
				->setCellValue("M1", 'Total Qty')
				->setCellValue("N1", 'VAT')
				->setCellValue("O1", 'Price less VAT')
				->setCellValue("P1", 'Adjustment Price')
				->setCellValue("Q1", 'Tactical Price')
				->setCellValue("R1", 'Last Price')
				->setCellValue("S1", 'Net Sales');


		$trans_id = decode($id);
		$get_details = $this->get_trans_bc($trans_id);
		$bc = $get_details['bc_id'];

		$get_sales_item = $this->admin->get_query('

			SELECT sales.*
			FROM
				(SELECT g.bc_name, d.ifs_code, d.outlet_name, f.brand_name, c.material_code, c.material_desc, IF(c.vat_type_id = 1, 1.12, 1) vat, j.vat_type_name, i.material_group_name, h.sales_det_date, h.sales_det_qty, h.sales_det_asp, c.material_id, f.brand_id, g.bc_id,

					IFNULL(
				        (
				        SELECT
				            n.price_adjustment_det_value
				        FROM
				            price_adjustment_tbl m,
				            price_adjustment_details_tbl n
				        WHERE
				            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
				    	),
				    0) as adjustment_price,

				    IFNULL(
					    (
					    SELECT
					        y.sales_tactical_det_price
					    FROM
					        sales_tactical_tbl w,
					        `sales_tactical_item_tbl` `x`,
					        sales_tactical_details_tbl y
					    WHERE
					        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
						),
					0) as tactical_price,
					
					(
					    h.sales_det_asp + IFNULL(
					        (
					        SELECT
					            n.price_adjustment_det_value
					        FROM
					            price_adjustment_tbl m,
					            price_adjustment_details_tbl n
					        WHERE
					            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
					    ),
					    0
					    )
					) - IFNULL(
					    (
					    SELECT
					        y.sales_tactical_det_price
					    FROM
					        sales_tactical_tbl w,
					        `sales_tactical_item_tbl` `x`,
					        sales_tactical_details_tbl y
					    WHERE
					        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
					),
					0
					) as price,

					IF(
						i.material_group_name = "LIVE SALES", (
							SELECT y.sales_live_alw_det_value FROM sales_live_alw_tbl x, sales_live_alw_detail_tbl y WHERE g.bc_id = x.bc_id AND x.sales_live_alw_id = y.sales_live_alw_id AND h.sales_det_date = y.sales_live_alw_det_date AND x.sales_live_alw_status = 1 AND y.sales_live_alw_det_status = 1
						),

						IF(
							i.material_group_name = "DRESSED", (
							SELECT g1.ave_wgt FROM prod_trans_tbl a1, prod_trans_dtl_tbl b1, component_type_tbl c1, material_tbl d1, material_tbl e1,  ext_prod_trans_tbl f1, ext_prod_trans_dtl_tbl g1

							WHERE a1.prod_trans_id = b1.prod_trans_id AND b1.component_type_id = c1.component_type_id AND a1.prod_id= c.material_id AND a1.prod_id = c.material_id AND b1.article_id = e1.material_id AND b1.article_type_id = 1 AND a1.prod_trans_status = 3 AND a1.bc_id = g.bc_id AND b1.prod_trans_dtl_date = h.sales_det_date AND a1.brand_id = f.brand_id AND a1.process_type_id = 5 AND c1.component_type = "COST OF SALES" AND f1.bc_id = a1.bc_id AND b1.prod_trans_dtl_date = g1.trans_dtl_date AND e1.material_id = f1.material_id AND f1.ext_prod_trans_status = 1 AND g1.ext_prod_trans_dtl_status = 1
							)
						, 1)
					) as sales_weight

					IF(
						i.material_group_name = "LIVE SALES", (
							SELECT y.sales_live_alw_det_value FROM sales_live_alw_tbl x, sales_live_alw_detail_tbl y WHERE g.bc_id = x.bc_id AND x.sales_live_alw_id = y.sales_live_alw_id AND h.sales_det_date = y.sales_live_alw_det_date AND x.sales_live_alw_status = 1 AND y.sales_live_alw_det_status = 1
						), 0
					) as alw
				FROM
				    `sales_tbl` `a`
				JOIN `sales_item_tbl` `b` ON
				    `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND a.sales_year = ' . $year . '
				JOIN `material_tbl` `c` ON
				    `b`.`material_id` = `c`.`material_id`
				JOIN `outlet_tbl` `d` ON
				    `a`.`outlet_id` = `d`.`outlet_id`
				JOIN `outlet_brand_tbl` `e` ON
				    `d`.`outlet_id` = `e`.`outlet_id` AND `e`.`outlet_brand_status` = 1
				JOIN `brand_tbl` `f` ON
				    `e`.`brand_id` = `f`.`brand_id`
				JOIN `bc_tbl` `g` ON
				    `d`.`bc_id` = `g`.`bc_id` AND `g`.`bc_id` IN (' . $bc . ')
				JOIN `sales_details_tbl` `h` ON
				    `b`.`sales_item_id` = `h`.`sales_item_id` AND `h`.`sales_det_qty` > 0 AND h.sales_det_status = 1
				JOIN `material_group_tbl` `i` ON `c`.`material_group_id` = `i`.`material_group_id`
				JOIN `vat_type_tbl` `j` ON `c`.`vat_type_id` = `j`.`vat_type_id` ORDER BY g.bc_name, f.brand_name, c.material_desc, h.sales_det_date ASC
				
			) as sales'
		);

		$count = 2;
		foreach($get_sales_item as $row_sales){
			$material_id = $row_sales->material_id;
			$brand_id = $row_sales->brand_id;
			$bc_id = $row_sales->bc_id;
			$bc_name = $row_sales->bc_name;
			$ifs_code = $row_sales->ifs_code;
			$outlet_name = $row_sales->outlet_name;
			$brand_name = $row_sales->brand_name;
			$brand_id = $row_sales->brand_id;
			$material_code = $row_sales->material_code;
			$material_desc = $row_sales->material_desc;
			$vat_type_name = $row_sales->vat_type_name;
			$material_group_name = $row_sales->material_group_name;
			$sales_date = $row_sales->sales_det_date;
			$sales_det_qty = $row_sales->sales_det_qty;
			$sales_det_asp = $row_sales->sales_det_asp;
			$sales_weight = 1;
			$total_qty = $sales_det_qty * $sales_weight;
			$vat = $row_sales->vat;
			$price_less_vat = $sales_det_asp / $vat;
			$adjustment_price = $row_sales->adjustment_price;
			$tactical_price = $row_sales->tactical_price;
			$last_price = $price_less_vat - $adjustment_price - $tactical_price;
			$net_sales = $last_price * $total_qty;
			
			$bc_name = $row_sales->bc_name;

			if($material_group_name == 'LIVE SALES'){
				$sales_weight = $row_sales->alw;
				$total_qty = $sales_det_qty * $sales_weight;
				$net_sales = $last_price * $total_qty;
			}elseif($material_group_name == 'DRESSED'){
				$get_dressed_wt = $this->admin->get_query(
					'SELECT g1.ext_prod_trans_dtl_id, g1.ave_wgt FROM prod_trans_tbl a1, prod_trans_dtl_tbl b1, component_type_tbl c1, material_tbl d1, ext_prod_trans_tbl f1, ext_prod_trans_dtl_tbl g1

					WHERE a1.prod_trans_id = b1.prod_trans_id AND b1.component_type_id = c1.component_type_id AND a1.prod_id = ' . $material_id . ' AND b1.article_id = d1.material_id AND b1.article_type_id = 1 AND a1.prod_trans_status = 3 AND a1.bc_id = ' . $bc_id . ' AND b1.prod_trans_dtl_date = "' . $sales_date . '" AND a1.process_type_id = 5 AND c1.component_type = "COST OF SALES" AND f1.bc_id = a1.bc_id AND f1.ext_prod_trans_id = g1.ext_prod_trans_id AND b1.prod_trans_dtl_date = g1.trans_dtl_date AND d1.material_id = f1.material_id AND f1.ext_prod_trans_status = 1 AND g1.ext_prod_trans_dtl_status = 1
				', TRUE);
				
				if(!empty($get_dressed_wt)){
					$sales_weight = $get_dressed_wt->ave_wgt;
					if($sales_weight > 0){
						$total_qty = $sales_det_qty * $sales_weight;
						$net_sales = $last_price * $total_qty;
					}else{
						$sales_weight = 1;
					}
				}
			}

			$spreadsheet->setActiveSheetIndex(0)
			->setCellValue("A" . $count, $bc_name)
			->setCellValue("B" . $count, $ifs_code)
			->setCellValue("C" . $count, $outlet_name)		
			->setCellValue("D" . $count, $brand_name)
			->setCellValue("E" . $count, $material_code)
			->setCellValue("F" . $count, $material_desc)
			->setCellValue("G" . $count, $vat_type_name)
			->setCellValue("H" . $count, $material_group_name)
			->setCellValue("I" . $count, $sales_date)
			->setCellValue("J" . $count, $sales_det_qty)
			->setCellValue("K" . $count, $sales_det_asp)
			->setCellValue("L" . $count, $sales_weight)
			->setCellValue("M" . $count, $total_qty)
			->setCellValue("N" . $count, $vat)
			->setCellValue("O" . $count, $price_less_vat)
			->setCellValue("P" . $count, $adjustment_price)
			->setCellValue("Q" . $count, $tactical_price)
			->setCellValue("R" . $count, $last_price)
			->setCellValue("S" . $count, $net_sales)
			;
			$count++;
			$total_cost = 0;
		}


		$spreadsheet->getActiveSheet()->getStyle("A1:S" . $count)->applyFromArray($style_border);
		foreach(range('A','S') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$spreadsheet->getActiveSheet()->getStyle('J2:S' . ($count - 1))->getNumberFormat()->setFormatCode('#,##0.00');

		$spreadsheet->getActiveSheet()->setTitle('Sales data');

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		$random = generate_random(5);
		header('Content-Disposition: attachment;filename="Budgeting - ' . $bc_name . ' Net Sales_' . $random . '.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;

		/*$data['overall_cm'] = $overall_cm;
		$data['variable_cost'] = $overall_variable;
		$data['net_sales'] = $overall_net_sales;
		return $data;*/
	}

	public function dl_net_sales($type, $id, $year){
		$info = $this->_require_login();

 		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','12048M');

		$type = decode($type);

 		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('Sales Templates')
				->setSubject('Sales Module')
				->setDescription('Sales Templates');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);

		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_material = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_mat_code= array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);


		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Business Center')
				->setCellValue("B1", 'IFS Code')
				->setCellValue("C1", 'Outlet name')
				->setCellValue("D1", 'Brand')
				->setCellValue("E1", 'Material Code')
				->setCellValue("F1", 'Material Description')
				->setCellValue("G1", 'VAT TYPE')
				->setCellValue("H1", 'Material Group')
				->setCellValue("I1", 'Date')
				->setCellValue("J1", 'Sales QTY')
				->setCellValue("K1", 'ASP')
				->setCellValue("L1", 'Weight')
				->setCellValue("M1", 'Total Qty')
				->setCellValue("N1", 'VAT')
				->setCellValue("O1", 'Price less VAT')
				->setCellValue("P1", 'Adjustment Price')
				->setCellValue("Q1", 'Tactical Price')
				->setCellValue("R1", 'Last Price')
				->setCellValue("S1", 'Net Sales');


		$trans_id = decode($id);
		$get_details = $this->get_trans_bc($trans_id);
		$bc = $get_details['bc_id'];

		$get_sales_item = $this->admin->get_query('

			SELECT sales.*
			FROM
				(SELECT g.bc_name, d.ifs_code, d.outlet_name, f.brand_name, c.material_code, c.material_desc, IF(c.vat_type_id = 1, 1.12, 1) vat, j.vat_type_name, i.material_group_name, h.sales_det_date, h.sales_det_qty, h.sales_det_asp, c.material_id, f.brand_id, g.bc_id,

					IFNULL(
				        (
				        SELECT
				            n.price_adjustment_det_value
				        FROM
				            price_adjustment_tbl m,
				            price_adjustment_details_tbl n
				        WHERE
				            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
				    	),
				    0) as adjustment_price,

				    IFNULL(
					    (
					    SELECT
					        y.sales_tactical_det_price
					    FROM
					        sales_tactical_tbl w,
					        `sales_tactical_item_tbl` `x`,
					        sales_tactical_details_tbl y
					    WHERE
					        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
						),
					0) as tactical_price,
					
					(
					    h.sales_det_asp + IFNULL(
					        (
					        SELECT
					            n.price_adjustment_det_value
					        FROM
					            price_adjustment_tbl m,
					            price_adjustment_details_tbl n
					        WHERE
					            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
					    ),
					    0
					    )
					) - IFNULL(
					    (
					    SELECT
					        y.sales_tactical_det_price
					    FROM
					        sales_tactical_tbl w,
					        `sales_tactical_item_tbl` `x`,
					        sales_tactical_details_tbl y
					    WHERE
					        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
					),
					0
					) as price,


					IF(
						i.material_group_name = "LIVE SALES", (
							SELECT y.sales_live_alw_det_value FROM sales_live_alw_tbl x, sales_live_alw_detail_tbl y WHERE g.bc_id = x.bc_id AND x.sales_live_alw_id = y.sales_live_alw_id AND h.sales_det_date = y.sales_live_alw_det_date AND x.sales_live_alw_status = 1 AND y.sales_live_alw_det_status = 1
						), 0
					) as alw
				FROM
				    `sales_tbl` `a`
				JOIN `sales_item_tbl` `b` ON
				    `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1 AND a.sales_year = ' . $year . '
				JOIN `material_tbl` `c` ON
				    `b`.`material_id` = `c`.`material_id`
				JOIN `outlet_tbl` `d` ON
				    `a`.`outlet_id` = `d`.`outlet_id`
				JOIN `outlet_brand_tbl` `e` ON
				    `d`.`outlet_id` = `e`.`outlet_id` AND `e`.`outlet_brand_status` = 1
				JOIN `brand_tbl` `f` ON
				    `e`.`brand_id` = `f`.`brand_id`
				JOIN `bc_tbl` `g` ON
				    `d`.`bc_id` = `g`.`bc_id` AND `g`.`bc_id` IN (' . $bc . ')
				JOIN `sales_details_tbl` `h` ON
				    `b`.`sales_item_id` = `h`.`sales_item_id` AND `h`.`sales_det_qty` > 0 AND h.sales_det_status = 1
				JOIN `material_group_tbl` `i` ON `c`.`material_group_id` = `i`.`material_group_id`
				JOIN `vat_type_tbl` `j` ON `c`.`vat_type_id` = `j`.`vat_type_id` ORDER BY g.bc_name, f.brand_name, c.material_desc, h.sales_det_date ASC
				
			) as sales'
		);
		
		$count = 2;
		foreach($get_sales_item as $row_sales){
			$material_id = $row_sales->material_id;
			$brand_id = $row_sales->brand_id;
			$bc_id = $row_sales->bc_id;
			$bc_name = $row_sales->bc_name;
			$ifs_code = $row_sales->ifs_code;
			$outlet_name = $row_sales->outlet_name;
			$brand_name = $row_sales->brand_name;
			$brand_id = $row_sales->brand_id;
			$material_code = $row_sales->material_code;
			$material_desc = $row_sales->material_desc;
			$vat_type_name = $row_sales->vat_type_name;
			$material_group_name = $row_sales->material_group_name;
			$sales_date = $row_sales->sales_det_date;
			$sales_det_qty = $row_sales->sales_det_qty;
			$sales_det_asp = $row_sales->sales_det_asp;
			$sales_weight = 1;
			$total_qty = $sales_det_qty * $sales_weight;
			$vat = $row_sales->vat;
			$price_less_vat = $sales_det_asp / $vat;
			$adjustment_price = $row_sales->adjustment_price;
			$tactical_price = $row_sales->tactical_price;
			$last_price = $price_less_vat - $adjustment_price - $tactical_price;
			$net_sales = $last_price * $total_qty;
			
			$bc_name = $row_sales->bc_name;

			if($material_group_name == 'LIVE SALES'){
				$sales_weight = $row_sales->alw;
				$total_qty = $sales_det_qty * $sales_weight;
				$net_sales = $last_price * $total_qty;
			}elseif($material_group_name == 'DRESSED'){
				

				//Get SKU costing base on generated above and get raw materials
				$check_sku = $this->admin->get_query("SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details, b.total_cost, b.ave_wgt, f.material_group_name,

					IFNULL((SELECT y.sales_live_alw_det_value FROM sales_live_alw_tbl x, sales_live_alw_detail_tbl y WHERE x.sales_live_alw_id = y.sales_live_alw_id AND x.sales_live_alw_status = 1 AND y.sales_live_alw_det_status = 1 AND sales_live_alw_det_date = '" . $sales_date . "' AND x.bc_id = " . $bc_id . "), 1) as live_ave_wt

				 FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e, material_group_tbl f WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= " . $material_id . " AND a.prod_id = d.material_id AND b.article_id = e.material_id AND d.material_group_id = f.material_group_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = " . $bc_id . " AND b.prod_trans_dtl_date = '" . $sales_date . "' AND a.brand_id = " . $brand_id . " AND a.process_type_id = 5 AND b.prod_trans_dtl_status <> 5 AND c.component_type = 'COST OF SALES'", TRUE);

				if(!empty($check_sku)){
					

					$sales_weight = $check_sku->ave_wgt;
					if($sales_weight > 0){
						$total_qty = $sales_det_qty * $sales_weight;
						$net_sales = $last_price * $total_qty;
					}else{
						$sales_weight = 1;
					}
				}
			}

			$spreadsheet->setActiveSheetIndex(0)
			->setCellValue("A" . $count, $bc_name)
			->setCellValue("B" . $count, $ifs_code)
			->setCellValue("C" . $count, $outlet_name)		
			->setCellValue("D" . $count, $brand_name)
			->setCellValue("E" . $count, $material_code)
			->setCellValue("F" . $count, $material_desc)
			->setCellValue("G" . $count, $vat_type_name)
			->setCellValue("H" . $count, $material_group_name)
			->setCellValue("I" . $count, $sales_date)
			->setCellValue("J" . $count, $sales_det_qty)
			->setCellValue("K" . $count, $sales_det_asp)
			->setCellValue("L" . $count, $sales_weight)
			->setCellValue("M" . $count, $total_qty)
			->setCellValue("N" . $count, $vat)
			->setCellValue("O" . $count, $price_less_vat)
			->setCellValue("P" . $count, $adjustment_price)
			->setCellValue("Q" . $count, $tactical_price)
			->setCellValue("R" . $count, $last_price)
			->setCellValue("S" . $count, $net_sales)
			;
			$count++;
			$total_cost = 0;
		}


		$spreadsheet->getActiveSheet()->getStyle("A1:S" . $count)->applyFromArray($style_border);
		foreach(range('A','S') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$spreadsheet->getActiveSheet()->getStyle('J2:S' . ($count - 1))->getNumberFormat()->setFormatCode('#,##0.00');

		$spreadsheet->getActiveSheet()->setTitle('Sales data');

		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		$random = generate_random(5);
		header('Content-Disposition: attachment;filename="Budgeting - ' . $bc_name . ' Net Sales_' . $random . '.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
	}

	public function dl_sales_volume($type, $id, $year){
		$user_info = $this->get_user_info();
 		$bc = $user_info['bc_id'];
		$bc_name = $user_info['cost_center_desc'];

		$trans_id = decode($id);
		$get_details = $this->get_trans_bc($trans_id);
		$bc = $get_details['bc_id'];

		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','4096M');

 		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('Sales Templates')
				->setSubject('Sales Module')
				->setDescription('Sales Templates');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);

		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_material = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_mat_code= array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Business Center')
				->setCellValue("B1", 'IFS Code')
				->setCellValue("C1", 'Outlet name')
				->setCellValue("D1", 'Brand')
				->setCellValue("E1", 'Material Code')
				->setCellValue("F1", 'Material Description')
				->setCellValue("G1", 'VAT TYPE')
				->setCellValue("H1", 'Material Group')
				->setCellValue("I1", 'Date')
				->setCellValue("J1", 'Sales QTY')
				->setCellValue("K1", 'Sales Unit')
				->setCellValue("L1", 'Total Sales Volume');
		
		$year = $this->_active_year();
		
		$total_cm = 0;
		$overall_cm = 0;
		$total_cost = 0;
		$total_variable = 0;
		$net_sales = 0;
		$total_qty = 0;
		$total_kgs = 0;

		$overall_variable = 0;
		$overall_cm = 0;
		$overall_net_sales = 0;
		$live_sales_alw = 1;
		$count = 1;
		
		$join_material = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'material_tbl c' => 'b.material_id = c.material_id',
			'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
			'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
			'brand_tbl f' => 'e.brand_id = f.brand_id',
			'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id IN (' . $bc . ')',
			'vat_type_tbl h' => 'c.vat_type_id = h.vat_type_id',
			'material_group_tbl i' => 'c.material_group_id = i.material_group_id',
			'sales_details_tbl j' => 'b.sales_item_id = j.sales_item_id AND j.sales_det_status = 1' 
		);
		$get_material = $this->admin->get_join('sales_tbl a', $join_material, FALSE, FALSE, 'c.material_id, e.brand_id, d.bc_id, j.sales_det_date');
		$count++;
		foreach($get_material as $row){
			$material_id = $row->material_id;
			$material_desc = $row->material_desc;
			$brand_id = $row->brand_id;
			$brand_name = $row->brand_name;
			$bc_id = $row->bc_id;
			$bc_name = $row->bc_name;
			$date = $row->sales_det_date;
			
			
			//Get SKU costing base on generated above and get raw materials
			$check_sku = $this->admin->get_query("SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= " . $material_id . " AND a.prod_id = d.material_id AND b.article_id = e.material_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = " . $bc_id . " AND b.prod_trans_dtl_date = '" . $date . "' AND a.brand_id = " . $brand_id . " AND a.process_type_id = 5 AND b.prod_trans_dtl_status <> 5 AND c.component_type = 'COST OF SALES'", TRUE);
			if(!empty($check_sku)){
				$raw_mat = $check_sku->sku_material_id;

				//Check if existing in external
				$join_ext = array(
					'ext_prod_trans_dtl_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id AND a.ext_prod_trans_status = 1 AND b.ext_prod_trans_dtl_status = 1 AND a.bc_id = '. $bc_id . ' AND b.trans_dtl_date = "' . $date . '" AND a.material_id = ' . $raw_mat,
				);

				$check_ext_prod = $this->admin->check_join('ext_prod_trans_tbl a', $join_ext, TRUE);
				$total_cost = 0;
				$dressed_ave_wt = 1;
				$live_ave_wt = 1;
				$live_cost = 0;
				/*echo $material_desc . '|' . $brand_name;
				echo '|' . $check_sku->mat_details;
				echo '|' . $date;*/
				//echo '<br />';
				if($check_ext_prod['result'] == TRUE){
					$cost = $check_ext_prod['info']->cost;
					$ave_wgt = $check_ext_prod['info']->ave_wgt;

					if($ave_wgt != 0){
						//$cost = $cost * $ave_wgt;
						$dressed_ave_wt = $ave_wgt;
					}

					$total_cost = $cost;
					
					/*$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("J" . $count, $cost);*/

					/*echo '|' . $total_cost;
					//echo '<br />';*/
					/*$count++;
					$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("L" . $count, $ave_wgt)
					->setCellValue("M" . $count, $cost)
					->setCellValue("N" . $count, $total_cost);*/
				}
			}else{
				$dressed_ave_wt = 1;
			}

			$join_sales_item = array(
				'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
				'material_tbl c' => 'b.material_id = c.material_id AND c.material_id = ' . $material_id,
				'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
				'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
				'brand_tbl f' => 'e.brand_id = f.brand_id AND f.brand_id = ' . $brand_id,
				'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc_id,
				'sales_details_tbl h' => 'b.sales_item_id = h.sales_item_id AND h.sales_det_qty > 0 AND h.sales_det_date = "' . $date . '"'
			);
			
			$get_sales_item = $this->admin->get_query('

				SELECT sales.*, IF(sales.material_group_name = "DRESSED" OR sales.material_group_name = "LIVE SALES", "' . $dressed_ave_wt . '", 1) as sales_weight FROM
					(SELECT g.bc_name, d.ifs_code, d.outlet_name, f.brand_name, c.material_code, c.material_desc, IF(c.vat_type_id = 1, 1.12, 1) vat, j.vat_type_name, i.material_group_name, h.sales_det_date, h.sales_det_qty, h.sales_det_asp, k.sales_unit_equivalent,

						IFNULL(
					        (
					        SELECT
					            n.price_adjustment_det_value
					        FROM
					            price_adjustment_tbl m,
					            price_adjustment_details_tbl n
					        WHERE
					            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
					    	),
					    0) as adjustment_price,

					    IFNULL(
						    (
						    SELECT
						        y.sales_tactical_det_price
						    FROM
						        sales_tactical_tbl w,
						        `sales_tactical_item_tbl` `x`,
						        sales_tactical_details_tbl y
						    WHERE
						        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
							),
						0) as tactical_price,

					    (
					        CASE WHEN c.material_group_id = 2 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) WHEN c.material_id = 225 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) ELSE h.sales_det_qty
					    END
					) AS overall_qty,
					(
					    h.sales_det_asp + IFNULL(
					        (
					        SELECT
					            n.price_adjustment_det_value
					        FROM
					            price_adjustment_tbl m,
					            price_adjustment_details_tbl n
					        WHERE
					            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
					    ),
					    0
					    )
					) - IFNULL(
					    (
					    SELECT
					        y.sales_tactical_det_price
					    FROM
					        sales_tactical_tbl w,
					        `sales_tactical_item_tbl` `x`,
					        sales_tactical_details_tbl y
					    WHERE
					        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
					),
					0
					) as price
					FROM
					    `sales_tbl` `a`
					JOIN `sales_item_tbl` `b` ON
					    `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1
					JOIN `material_tbl` `c` ON
					    `b`.`material_id` = `c`.`material_id` AND `c`.`material_id` = ' . $material_id . '
					JOIN `outlet_tbl` `d` ON
					    `a`.`outlet_id` = `d`.`outlet_id`
					JOIN `outlet_brand_tbl` `e` ON
					    `d`.`outlet_id` = `e`.`outlet_id` AND `e`.`outlet_brand_status` = 1
					JOIN `brand_tbl` `f` ON
					    `e`.`brand_id` = `f`.`brand_id` AND `f`.`brand_id` = ' . $brand_id . '
					JOIN `bc_tbl` `g` ON
					    `d`.`bc_id` = `g`.`bc_id` AND `g`.`bc_id` = ' . $bc_id . '
					JOIN `sales_details_tbl` `h` ON
					    `b`.`sales_item_id` = `h`.`sales_item_id` AND `h`.`sales_det_qty` > 0 AND `h`.`sales_det_date` = "' . $date . '"
					JOIN `material_group_tbl` `i` ON `c`.`material_group_id` = `i`.`material_group_id`
					JOIN `vat_type_tbl` `j` ON `c`.`vat_type_id` = `j`.`vat_type_id`
					JOIN `material_unit_tbl` `k` ON `c`.`material_id` = `k`.`material_id` AND `k`.`material_unit_status` = 1
					 ) as sales');
			

			/*$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, 'wewe');*/
			foreach($get_sales_item as $row_sales){
				$bc_name = $row_sales->bc_name;
				$ifs_code = $row_sales->ifs_code;
				$outlet_name = $row_sales->outlet_name;
				$brand_name = $row_sales->brand_name;
				$material_code = $row_sales->material_code;
				$material_desc = $row_sales->material_desc;
				$vat_type_name = $row_sales->vat_type_name;
				$material_group_name = $row_sales->material_group_name;
				$sales_date = $row_sales->sales_det_date;
				$sales_det_qty = $row_sales->sales_det_qty;
				$sales_det_asp = $row_sales->sales_det_asp;
				$sales_weight = $row_sales->sales_weight;
				$total_qty = $sales_det_qty * $sales_weight;
				$vat = $row_sales->vat;
				$price_less_vat = $sales_det_asp / $vat;
				$adjustment_price = $row_sales->adjustment_price;
				$tactical_price = $row_sales->tactical_price;
				$last_price = $price_less_vat - $adjustment_price - $tactical_price;
				$net_sales = $last_price * $total_qty;
				$sales_unit_equivalent = $row_sales->sales_unit_equivalent;

				$total_sales_volume = $sales_unit_equivalent == 0 ? 0 : $sales_det_qty / $sales_unit_equivalent;
				/*$ifs_code = $row_sales->ifs_code;
				$ifs_code = $row_sales->ifs_code;
				$ifs_code = $row_sales->ifs_code;
				$ifs_code = $row_sales->ifs_code;
				$ifs_code = $row_sales->ifs_code;
				$ifs_code = $row_sales->ifs_code;
				$ifs_code = $row_sales->ifs_code;*/
				

				$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A" . $count, $bc_name)
				->setCellValue("B" . $count, $ifs_code)
				->setCellValue("C" . $count, $outlet_name)		
				->setCellValue("D" . $count, $brand_name)
				->setCellValue("E" . $count, $material_code)
				->setCellValue("F" . $count, $material_desc)
				->setCellValue("G" . $count, $vat_type_name)
				->setCellValue("H" . $count, $material_group_name)
				->setCellValue("I" . $count, $sales_date)
				->setCellValue("J" . $count, $sales_det_qty)
				->setCellValue("K" . $count, $sales_unit_equivalent)
				->setCellValue("L" . $count, $total_sales_volume)
				;
				$count++;
				$total_cost = 0;
			}

			//$total_cost = $total_cost + $bom_total;
			
		}

		$spreadsheet->getActiveSheet()->getStyle("A1:L" . $count)->applyFromArray($style_border);
		foreach(range('A','L') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}		

		$spreadsheet->getActiveSheet()->getStyle('J2:L' . ($count - 1))->getNumberFormat()->setFormatCode('#,##0.00');

		$spreadsheet->getActiveSheet()->setTitle('Sales Volume');

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		$random = generate_random(5);
		header('Content-Disposition: attachment;filename="Budgeting - ' . $bc_name . ' Sales volume_' . $random . '.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;

		/*$data['overall_cm'] = $overall_cm;
		$data['variable_cost'] = $overall_variable;
		$data['net_sales'] = $overall_net_sales;
		return $data;*/
	}

	public function dl_noi_main_new($type, $id, $year){

		$info = $this->_require_login();

		$trans_id = decode($id);
		$get_details = $this->get_trans_bc($trans_id);
		$bc = $get_details['bc_id'];

		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','2048M');

 		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('Sales Templates')
				->setSubject('Sales Module')
				->setDescription('Sales Templates');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);

		foreach(range('A','B') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'font' => array(
				'bold' => true
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);

		$style_material = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_mat_code= array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Date')
				->setCellValue("B1", 'Business Center')
				->setCellValue("C1", 'Material Code')
				->setCellValue("D1", 'Material Description')
				->setCellValue("E1", 'Brand')
				->setCellValue("F1", 'Production Cost')
				->setCellValue("G1", 'BOM')
				->setCellValue("H1", 'Commission')
				->setCellValue("I1", 'Sales QTY')
				->setCellValue("J1", 'Weight')
				->setCellValue("K1", 'QTY')
				->setCellValue("L1", 'Total BOM')
				->setCellValue("M1", 'Total Commission')
				->setCellValue("N1", 'Total Production Cost')
				->setCellValue("O1", 'Total Variable Cost');
		
		$year = $this->_active_year();
		
		$total_cm = 0;
		$overall_cm = 0;
		$total_cost = 0;
		$total_variable = 0;
		$net_sales = 0;
		$total_qty = 0;
		$total_kgs = 0;

		$overall_variable = 0;
		$overall_cm = 0;
		$overall_net_sales = 0;
		$overall_sales_unit = 0;
		$overall_commission = 0;
		$overall_customer_commission = 0;
		$live_sales_alw = 1;
		$count = 1;
		$join_material = array(
			'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1 AND a.sales_year = ' . $year,
			'material_tbl c' => 'b.material_id = c.material_id',
			'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
			'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
			'brand_tbl f' => 'e.brand_id = f.brand_id',
			'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id IN (' . $bc . ')',
			'vat_type_tbl h' => 'c.vat_type_id = h.vat_type_id',
			'material_group_tbl i' => 'c.material_group_id = i.material_group_id',
			'sales_details_tbl j' => 'b.sales_item_id = j.sales_item_id AND j.sales_det_status = 1' 
		);
		$get_material = $this->admin->get_join('sales_tbl a', $join_material, FALSE, FALSE, 'c.material_id, e.brand_id, d.bc_id, j.sales_det_date');

		/*echo $this->db->last_query();
		exit;*/
		$count++;
		// echo "<pre>";
		// print_r($get_material);
		// echo "</pre>";
		// exit;
		foreach($get_material as $row){
			$material_id = $row->material_id;
			$material_desc = $row->material_desc;
			$material_code = $row->material_code;
			$material_group = $row->material_group_name;
			$brand_id = $row->brand_id;
			$brand_name = $row->brand_name;
			$bc_id = $row->bc_id;
			$bc_name = $row->bc_name;
			$date = $row->sales_det_date;
			$ifs_code = $row->ifs_code;
			$outlet_name = $row->outlet_name;

			
			
			//Get SKU costing base on generated above and get raw materials
			$sql = "SELECT e.material_id as sku_material_id, a.prod_trans_id, a.process_type_id, c.component_type, d.material_desc, d.material_id, e.material_desc as mat_details, b.total_cost, b.ave_wgt, f.material_group_name,

			IFNULL((SELECT y.sales_live_alw_det_value FROM sales_live_alw_tbl x, sales_live_alw_detail_tbl y WHERE x.sales_live_alw_id = y.sales_live_alw_id AND x.sales_live_alw_status = 1 AND y.sales_live_alw_det_status = 1 AND sales_live_alw_det_date = '" . $date . "' AND x.bc_id = " . $bc_id . "), 1) as live_ave_wt

		 FROM prod_trans_tbl a, prod_trans_dtl_tbl b, component_type_tbl c, material_tbl d, material_tbl e, material_group_tbl f WHERE a.prod_trans_id = b.prod_trans_id AND b.component_type_id = c.component_type_id AND a.prod_id= " . $material_id . " AND a.prod_id = d.material_id AND b.article_id = e.material_id AND d.material_group_id = f.material_group_id AND b.article_type_id = 1 AND a.prod_trans_status = 3 AND a.bc_id = " . $bc_id . " AND b.prod_trans_dtl_date = '" . $date . "' AND a.brand_id = " . $brand_id . " AND a.process_type_id = 5 AND b.prod_trans_dtl_status <> 5 AND c.component_type = 'COST OF SALES'";
			$check_sku = $this->admin->get_query($sql, TRUE);


			$total_cost = 0;
			$dressed_ave_wt = 1;
			$live_ave_wt = 0;
			$live_cost = 0;

			// if($material_id == 2166){
			// 	echo $sql;
			// 	exit;
			// }

			if(!empty($check_sku)){
				$total_cost = 0;
				$raw_mat = $check_sku->sku_material_id;
				$raw_mat_desc = $check_sku->mat_details;
				$live_ave_wt = $check_sku->live_ave_wt;
				$dressed_ave_wt = $check_sku->ave_wgt;
				$material_group = $check_sku->material_group_name;

				//Check if existing in external
				$join_ext = array(
					'ext_prod_trans_dtl_tbl b' => 'a.ext_prod_trans_id = b.ext_prod_trans_id AND a.ext_prod_trans_status = 1 AND b.ext_prod_trans_dtl_status = 1 AND a.bc_id = '. $bc_id . ' AND b.trans_dtl_date = "' . $date . '" AND a.material_id = ' . $raw_mat,
				);

				// $check_ext_prod = $this->admin->check_join('ext_prod_trans_tbl a', $join_ext, TRUE, TRUE, TRUE, TRUE, FALSE);
				$check_ext_prod = $this->admin->check_join('ext_prod_trans_tbl a', $join_ext, TRUE);
				// echo $check_ext_prod;
				// exit;

				

				if($check_ext_prod['result'] == TRUE){
					$cost = $check_ext_prod['info']->cost;
					$ave_wgt = $check_ext_prod['info']->ave_wgt;
		
					$dressed_ave_wt = $ave_wgt;			
					$total_cost = $cost;
				}else{

					$raw_mat_cost = 0;
					if($material_group == 'LIVE SALES'){
						$join_cost = array(
							'prod_trans_dtl_tbl b' => 'a.prod_trans_id = b.prod_trans_id AND a.prod_trans_status = 3 AND a.process_type_id != 5 AND b.article_type_id = 1 AND b.component_type_id = 2 AND b.prod_trans_dtl_status = 1 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND b.article_id = ' . $raw_mat
						);
						$check_cost = $this->admin->check_join('prod_trans_tbl a', $join_cost, TRUE);
						$raw_mat_cost = 0;
						if($check_cost['result'] == TRUE){
							$raw_mat_cost = $check_cost['info']->cost;
						}						

					}elseif($material_group == 'BY-PRODUCTS' || $material_group == 'LIVER / GIZZARD'){
						$join_cost = array(
							'prod_trans_dtl_tbl b' => 'a.prod_trans_id = b.prod_trans_id AND a.prod_trans_status = 3 AND a.process_type_id != 5 AND b.article_type_id = 1 AND b.component_type_id = 4 AND b.prod_trans_dtl_status = 1 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND b.article_id = ' . $raw_mat
						);
						$check_cost = $this->admin->check_join('prod_trans_tbl a', $join_cost, TRUE);

						$raw_mat_cost = 0;
						if($check_cost['result'] == TRUE){
							$raw_mat_cost = $check_cost['info']->cost;
						}
					}else{
						$join_cost = array(
							'prod_trans_dtl_tbl b' => 'a.prod_trans_id = b.prod_trans_id AND a.prod_trans_status = 3 AND a.process_type_id != 5 AND b.article_type_id = 1 AND b.component_type_id = 1 AND b.prod_trans_dtl_status = 1 AND a.bc_id = ' . $bc_id . ' AND b.prod_trans_dtl_date = "' . $date . '" AND a.prod_id = ' . $raw_mat
						);
						$check_cost = $this->admin->check_join('prod_trans_tbl a', $join_cost, TRUE);
						$raw_mat_cost = 0;
						$ave_wgt = 1;
						if($check_cost['result'] == TRUE){
							$raw_mat_cost = $check_cost['info']->cost;
							$ave_wgt = $check_cost['info']->ave_wgt;
						}

						$dressed_ave_wt = $ave_wgt;
					}

					$total_cost = $raw_mat_cost;
				}

				$pass_on_price = $this->get_pass_on_price($material_id, $bc_id, $brand_id, $date, $total_cost);
				$production_cost = $total_cost + $pass_on_price;
				
				
				$bom_total = 0;
				$bom_multiplier = 1;
				$bom_commision = 0;
				$bom_commision_type = 0;
					
				$join_bom = array('bom_summary_details_tbl b' => 'a.bom_summary_id = b.bom_summary_id AND a.bom_summary_status = 1 AND b.bom_summary_det_status = 1 AND a.bc_id = ' . $bc_id . ' AND a.brand_id = ' . $brand_id . ' AND a.material_id = ' . $material_id . ' AND b.bom_summary_det_date = "' . $date . '"');

				$check_bom = $this->admin->check_join('bom_summary_tbl a', $join_bom, TRUE);
				if($check_bom['result'] == TRUE){
					$bom_total = $check_bom['info']->bom_summary_det_total;
					$bom_multiplier = $check_bom['info']->bom_summary_det_multi;
					$bom_commision = $check_bom['info']->bom_summary_det_commision;
					$bom_commision_type = $check_bom['info']->amount_type_id;
				}

				$total_cost = $production_cost + $bom_total;
				$join_sales_item = array(
					'sales_item_tbl b' => 'a.sales_id = b.sales_id AND a.sales_status = 1 AND b.sales_item_status = 1',
					'material_tbl c' => 'b.material_id = c.material_id AND c.material_id = ' . $material_id,
					'outlet_tbl d' => 'a.outlet_id = d.outlet_id',
					'outlet_brand_tbl e' => 'd.outlet_id = e.outlet_id AND e.outlet_brand_status = 1',
					'brand_tbl f' => 'e.brand_id = f.brand_id AND f.brand_id = ' . $brand_id,
					'bc_tbl g' => 'd.bc_id = g.bc_id AND g.bc_id = ' . $bc_id,
					'sales_details_tbl h' => 'b.sales_item_id = h.sales_item_id AND h.sales_det_qty > 0 AND h.sales_det_date = "' . $date . '"'
				);
				if(empty($dressed_ave_wt) || $dressed_ave_wt <= 0){
					$dressed_ave_wt = 1;
				}
				
				$get_sales_item = $this->admin->get_query('

					SELECT SUM(sales.overall_qty * (sales.price / sales.vat)) as net_sales, SUM(sales.overall_qty) as total_qty, SUM(sales.sales_unit) sales_unit, asp, SUM(sales_commission) as customer_commission, SUM(sales.qty) as sales_qty,
						IF(sales.material_group_name = "DRESSED", "' . $dressed_ave_wt . '", IF(sales.material_group_name = "LIVE SALES", "' . $live_ave_wt . '", 1)) as sales_weight, sales.brand_id

					FROM
						(SELECT
							f.brand_id,
							i.material_group_name,
						    c.material_desc,
						    (h.sales_det_qty) AS qty,
						    h.sales_det_asp, IF(c.vat_type_id = 1, 1.12, 1) vat,
						    @total_qty :=(
						        CASE WHEN c.material_group_id = 2 THEN(' . $dressed_ave_wt . ' * h.sales_det_qty) WHEN c.material_id = 225
						        
						        THEN(' . $live_ave_wt . ' * h.sales_det_qty) ELSE h.sales_det_qty
						    	
						    	END
							) AS overall_qty,
							
							(
						    h.sales_det_asp + IFNULL(
						        (
						        SELECT
						            n.price_adjustment_det_value
						        FROM
						            price_adjustment_tbl m,
						            price_adjustment_details_tbl n
						        WHERE
						            m.price_adjustment_id = n.price_adjustment_id AND m.price_adjustment_status = 1 AND n.price_adjustment_det_status = 1 AND m.material_id = c.material_id AND n.price_adjustment_det_date = h.sales_det_date AND m.bc_id = g.bc_id
						    	),
						    	0
						    	)
						) - IFNULL(
						    (
						    SELECT
						        y.sales_tactical_det_price
						    FROM
						        sales_tactical_tbl w,
						        `sales_tactical_item_tbl` `x`,
						        sales_tactical_details_tbl y
						    WHERE
						        w.sales_tactical_id = x.sales_tactical_id AND x.sales_tactical_item_id = y.sales_tactical_item_id AND w.sales_tactical_status = 1 AND x.sales_tactical_item_status = 1 AND y.sales_tactical_det_status = 1 AND w.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_tactical_det_date = h.sales_det_date
						),
						0
						) as price,

						(
							SELECT IF(
								z.amount_type_name = "PERCENT", (@total_qty * h.sales_det_asp) * (y.sales_commission_det_value / 100),
								IF(z.amount_type_name = "AMOUNT", @total_qty * y.sales_commission_det_value, 0)

							) FROM sales_commission_tbl x, sales_commission_details_tbl y, amount_type_tbl z WHERE x.sales_commission_id = y.sales_commission_id AND x.amount_type_id = z.amount_type_id AND x.sales_commission_status = 1 AND y.sales_commission_det_status = 1 AND x.outlet_id = d.outlet_id AND x.material_id = c.material_id AND y.sales_commission_det_date = h.sales_det_date
						) as sales_commission,

						(h.sales_det_qty/j.sales_unit_equivalent) as sales_unit,

						h.sales_det_asp as asp

						FROM
						    `sales_tbl` `a`
						JOIN `sales_item_tbl` `b` ON
						    `a`.`sales_id` = `b`.`sales_id` AND `a`.`sales_status` = 1 AND `b`.`sales_item_status` = 1
						JOIN `material_tbl` `c` ON
						    `b`.`material_id` = `c`.`material_id` AND `c`.`material_id` = ' . $material_id . '
						JOIN `outlet_tbl` `d` ON
						    `a`.`outlet_id` = `d`.`outlet_id`
						JOIN `outlet_brand_tbl` `e` ON
						    `d`.`outlet_id` = `e`.`outlet_id` AND `e`.`outlet_brand_status` = 1
						JOIN `brand_tbl` `f` ON
						    `e`.`brand_id` = `f`.`brand_id` AND `f`.`brand_id` = ' . $brand_id . '
						JOIN `bc_tbl` `g` ON
						    `d`.`bc_id` = `g`.`bc_id` AND `g`.`bc_id` = ' . $bc_id . '
						JOIN `sales_details_tbl` `h` ON
						    `b`.`sales_item_id` = `h`.`sales_item_id` AND `h`.`sales_det_qty` > 0 AND `h`.`sales_det_date` = "' . $date . '"
						JOIN `material_group_tbl` `i` ON `c`.`material_group_id` = `i`.`material_group_id`

						JOIN material_unit_tbl j ON c.material_id = j.material_id AND j.material_unit_status = 1

						 ) as sales', TRUE);

				$net_sales = 0;
				$total_qty = 0;
				$sales_unit = 0;
				$variable = 0;
				$cm = 0;
				$commission = 0;
				$total_sales = 0;
				$customer_commission = 0;
				$total_variable_cost = 0;
				$variable = 0;
				if(!empty($get_sales_item)){
					$total_qty = $get_sales_item->total_qty;
					$sales_qty = $get_sales_item->sales_qty;
					$net_sales = $get_sales_item->net_sales;
					$sales_weight = $get_sales_item->sales_weight;
					$sales_unit = $get_sales_item->sales_unit;
					$total_sales = $get_sales_item->asp * $total_qty;
					$customer_commission = $get_sales_item->customer_commission;

					if($material_id == 225){
						$variable = $total_cost * $total_qty;
						if($bom_commision_type == 1){ //Percent
							if($bom_commision > 0){
								$commission = $total_sales * ($bom_commision / 100);
							}else{
								$commission = 0;
							}
						}elseif($bom_commision_type == 2){
							$commission = $total_qty * $bom_commision;
						}
					}else{
						$variable = $total_cost * $total_qty;
						if($bom_commision_type == 1){ //Percent
							if($bom_commision > 0){
								$commission = $total_sales * ($bom_commision / 100);
							}else{
								$commission = 0;
							}
						}elseif($bom_commision_type == 2){
							$commission = $total_qty * $bom_commision;
						}
					}


					if(is_null($net_sales)){
						$net_sales = 0;
					}

					$cm = $net_sales - $variable;

					/*$overall_commission += $commission;
					$overall_customer_commission += $customer_commission;

					$overall_variable += $variable + $overall_commission + $overall_customer_commission;
					$overall_cm += $cm;
					$overall_net_sales += $net_sales;
					$overall_sales_unit += $sales_unit;*/

					$total_variable_cost = $variable + $commission + $customer_commission;
				}

				$total_cost = 0;
				$bom_multiplier = 0;

				$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A" . $count, $date)
					->setCellValue("B" . $count, $bc_name)
					->setCellValue("C" . $count, $row->material_code)
					->setCellValue("D" . $count, $row->material_desc)
					->setCellValue("E" . $count, $brand_name)
					->setCellValue("F" . $count, $production_cost)
					->setCellValue("G" . $count, $bom_total)
					->setCellValue("H" . $count, $bom_commision)
					->setCellValue("I" . $count, $sales_qty)
					->setCellValue("J" . $count, $sales_weight)
					->setCellValue("K" . $count, $total_qty)
					->setCellValue("L" . $count, $bom_total * $total_qty)
					->setCellValue("M" . $count, $customer_commission + $commission)
					->setCellValue("N" . $count, $production_cost * $total_qty)
					->setCellValue("O" . $count, $total_variable_cost);

			}else{

				$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A" . $count, $date)
					->setCellValue("B" . $count, $bc_name)
					->setCellValue("C" . $count, $row->material_code)
					->setCellValue("D" . $count, $row->material_desc)
					->setCellValue("E" . $count, $brand_name)
					->setCellValue("F" . $count, '')
					->setCellValue("G" . $count, '')
					->setCellValue("H" . $count, '')
					->setCellValue("I" . $count, '')
					->setCellValue("J" . $count, '')
					->setCellValue("K" . $count, '')
					->setCellValue("L" . $count, '')
					->setCellValue("M" . $count, '')
					->setCellValue("N" . $count, '')
					->setCellValue("O" . $count, '');
				/*echo $material_code . ' - ' . $material_desc . '(' . $brand_name . ')' . ' Not Exist!';
				echo '<br />';

				print_r($check_sku);
				echo '<br />';

				echo $this->db->last_query();
				echo '<br />';
				echo '<br />';*/
			}

			$count++;
		}

		$spreadsheet->getActiveSheet()->getStyle('F2:O' . ($count - 1))->getNumberFormat()->setFormatCode('#,##0.00');

		$spreadsheet->getActiveSheet()->getStyle("A1:O" . $count)->applyFromArray($style_border);
		foreach(range('A','Q') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}		

		$spreadsheet->getActiveSheet()->setTitle('Variable Cost');

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);
		ob_end_clean();
		ob_start();
		// Redirect output to a client’s web browser (Excel2007)
		$random = generate_random(5);
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="Budgeting - ' . $bc_name . ' Variable Cost ' . $year . '_' . $random . '.xlsx"');
		header('Cache-Control: max-age=0');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;

		/*$data['overall_cm'] = $overall_cm;
		$data['variable_cost'] = $overall_variable;
		$data['net_sales'] = $overall_net_sales;
		return $data;*/
	}

	public function get_pass_on_price($material_id, $bc_id, $brand_id, $date, $production_cost){
		$info = $this->_require_login();

		$get_pass_on = $this->admin->get_query("
			SELECT b.* FROM prod_trans_tbl a, prod_trans_dtl_tbl b, bc_tbl c, material_tbl d, component_type_tbl e, services_tbl f WHERE a.prod_trans_id = b.prod_trans_id AND a.bc_id = c.bc_id AND a.prod_id = d.material_id AND b.component_type_id = e.component_type_id AND b.article_id = f.service_id AND a.prod_trans_status = 3 AND a.process_type_id = 5 AND b.article_type_id = 2 AND b.prod_trans_dtl_status = 1 AND c.bc_id = " . $bc_id . " AND d.material_id = " . $material_id . " AND a.brand_id = " . $brand_id . " AND f.service_desc = 'PERCENT MARKUP' AND b.prod_trans_dtl_date = '" . $date . "'
		", TRUE);

		$pass_on_price = 0;
		if(!empty($get_pass_on)){

			if($get_pass_on->amount_type_id == 1){
				$percent = $get_pass_on->cost / 100;
				$pass_on_price = $production_cost * $percent;
			}else{
				$pass_on_price = $get_pass_on->cost;
			}
		}

		return $pass_on_price;
	}

	public function download_opex($type, $id, $year){
		$info = $this->_require_login();

		$trans_id = decode($id);
		$get_details = $this->get_trans_bc($trans_id);
		$cost_center_id = $get_details['cost_center_id'];
		$bc_id = $get_details['bc_id'];
		$cost_center_name = '';
		$bc_name = '';

		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','4048M');

		$join_det = array(
			'gl_transaction_item_tbl b' => 'a.gl_trans_item_id = b.gl_trans_item_id AND b.gl_trans_item_status = 1 AND a.gl_trans_det_status = 1',
			'gl_transaction_tbl c' => 'b.gl_trans_id = c.gl_trans_id AND c.gl_trans_status = 1 AND c.gl_year = ' . $year,
			'cost_center_tbl d' => 'b.cost_center_id = d.cost_center_id AND d.parent_id IN (' . $cost_center_id . ')',
			'gl_subgroup_tbl e' => 'b.gl_sub_id=e.gl_sub_id',
			'gl_group_tbl f' => 'e.gl_group_id = f.gl_group_id'
		);
			
		$gl_details = $this->admin->get_join('gl_transaction_details_tbl a', $join_det, FALSE, 'd.parent_id, f.gl_group_name, e.gl_sub_name', 'b.gl_trans_item_id, d.parent_id', '*, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND YEAR(x.opex_budget_date)=' . $year . ') as total_qty, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=1 AND YEAR(x.opex_budget_date)=' . $year . ') as jan, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(opex_budget_date)=2 AND YEAR(x.opex_budget_date)=' . $year . ') as feb, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=3 AND YEAR(x.opex_budget_date)=' . $year . ') as mar, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=4 AND YEAR(x.opex_budget_date)=' . $year . ') as apr, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=5 AND YEAR(x.opex_budget_date)=' . $year . ') as may, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=6 AND YEAR(x.opex_budget_date)=' . $year . ') as jun, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=7 AND YEAR(x.opex_budget_date)=' . $year . ') as jul, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=8 AND YEAR(x.opex_budget_date)=' . $year . ') as aug, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=9 AND YEAR(x.opex_budget_date)=' . $year . ') as sep, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=10 AND YEAR(x.opex_budget_date)=' . $year . ') as oct, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=11 AND YEAR(x.opex_budget_date)=' . $year . ') as nov, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=12 AND YEAR(x.opex_budget_date)=' . $year . ') as december,

			(SELECT z.brand_name FROM outlet_tbl x, outlet_brand_tbl y, brand_tbl z WHERE d.cost_center_code = x.ifs_code AND x.outlet_id = y.outlet_id AND y.brand_id = z.brand_id AND y.outlet_brand_status = 1) as brand,

			(SELECT x.cost_center_group_name FROM cost_center_group_tbl x WHERE d.cost_center_group_id = x.cost_center_group_id) as cost_center_group,

			(SELECT x.cost_center_desc as bc FROM cost_center_tbl x WHERE d.parent_id = x.cost_center_id) as bc
			');

		$get_depreciation = $this->get_depreciation_monthly($cost_center_id, $year, $bc_id);
		$get_depreciation2 = $this->get_depreciation_monthly2($cost_center_id, $year, $bc_id);

		$this->load->library('excel');

		$spreadsheet = $this->excel;
		$spreadsheet->getProperties()->setCreator('BAVI')
				->setLastModifiedBy('Budgeting System')
				->setTitle('Employees')
				->setSubject('List of Employees')
				->setDescription('List of Employees');

		
		$styleArray = array(
				'font' 	=> array(
						'bold' => true,
				),
				'alignment' => array(
						'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
						'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				),
				'borders' => array(
						'top' => array(
								'style' => PHPExcel_Style_Border::BORDER_THIN,
						),
				),
				'fill' => array(
						'type' => \PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
						'rotation' => 90,
						'startcolor' => array(
								'argb' => 'FFA0A0A0',
						),
						'endcolor' => array(
								'argb' => 'FFFFFFFF',
						),
				),
		);


		foreach(range('A','H') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$style_center = array(
			'font' => array(
				'bold' => true,
				'size' => 20
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
			)
		);

		$style_info =  array(
			'font' => array(
				'bold' => true
			)
		);

		$style_border = array(
			'font' => array(
				'bold' => true
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_data = array(
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			)
		);

		$style_out = array(
			'font' => array(
				'bold' => true,
				'color' => array('rgb' => 'FF0000')
			),
			'borders' => array(
				'allborders' => array(
					'style' => PHPExcel_Style_Border::BORDER_THIN
				)
			),
			'alignment' => array(
				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
			),
		);


		$spreadsheet->getActiveSheet()->getStyle("A1:T1")->applyFromArray($style_border);
		$spreadsheet->getActiveSheet()->getStyle("A1:T1")->applyFromArray($style_info);
		$spreadsheet->setActiveSheetIndex(0)
			->setCellValue("A1", 'Location')
			->setCellValue("B1", 'GL Code')
			->setCellValue("C1", "GL Group")
			->setCellValue("D1", "GL Subgroup")
			->setCellValue("E1", "Brand")
			->setCellValue("F1", "Cost Center Code")
			->setCellValue("G1", "Cost Center Name")
			->setCellValue("H1", "Cost Center Group")
			->setCellValue("I1", "Year")
			->setCellValue("J1", "Jan")
			->setCellValue("K1", "Feb")
			->setCellValue("L1", "Mar")
			->setCellValue("M1", "Apr")
			->setCellValue("N1", "May")
			->setCellValue("O1", "Jun")
			->setCellValue("P1", "Jul")
			->setCellValue("Q1", "Aug")
			->setCellValue("R1", "Sep")
			->setCellValue("S1", "Oct")
			->setCellValue("T1", "Nov")
			->setCellValue("U1", "Dec")
			->setCellValue("V1", "Total")
			;
		// Add some data
		$x= 2;
		$count = 0;
		foreach($gl_details as $row){
			$jan = $row->jan;
			$feb = $row->feb;
			$mar = $row->mar;
			$apr = $row->apr;
			$may = $row->may;
			$jun = $row->jun;
			$jul = $row->jul;
			$aug = $row->aug;
			$sep = $row->sep;
			$oct = $row->oct;
			$nov = $row->nov;
			$december = $row->december;
			$total = $jan + $feb + $mar + $apr + $may + $jun + $jul + $aug + $sep + $oct + $nov + $december;
			$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A$x",$row->bc)
					->setCellValue("B$x",$row->gl_code)
					->setCellValue("C$x",$row->gl_group_name)
					->setCellValue("D$x",$row->gl_sub_name)
					->setCellValue("E$x",$row->brand)
					->setCellValue("F$x",$row->cost_center_code)
					->setCellValue("G$x",$row->cost_center_desc)
					->setCellValue("H$x",$row->cost_center_group)
					->setCellValue("I$x",$row->gl_year)
					->setCellValue("J$x",$jan)
					->setCellValue("K$x",$feb)
					->setCellValue("L$x",$mar)
					->setCellValue("M$x",$apr)
					->setCellValue("N$x",$may)
					->setCellValue("O$x",$jun)
					->setCellValue("P$x",$jul)
					->setCellValue("Q$x",$aug)
					->setCellValue("R$x",$sep)
					->setCellValue("S$x",$oct)
					->setCellValue("T$x",$nov)
					->setCellValue("U$x",$december)
					->setCellValue("V$x",$total)
					;

			$spreadsheet->getActiveSheet()->getStyle("A$x:V$x")->applyFromArray($style_data);
			$x++;
		}

		foreach($get_depreciation as $row){
			$jan = $row->jan;
			$feb = $row->feb;
			$mar = $row->mar;
			$apr = $row->apr;
			$may = $row->may;
			$jun = $row->jun;
			$jul = $row->jul;
			$aug = $row->aug;
			$sep = $row->sep;
			$oct = $row->oct;
			$nov = $row->nov;
			$december = $row->december;
			$amount = $row->amount;

			$month = array(0 => 0, 1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0, 6 => 0, 7 => 0, 8 => 0, 9 => 0, 10 => 0, 11 => 0);

			for($a = 0; $a < 12; $a++){
				$month[$a] += $jan * $amount;
			}

			for($a = 1; $a < 12; $a++){
				$month[$a] += $feb * $amount;
			}

			for($a = 2; $a < 12; $a++){
				$month[$a] += $mar * $amount;
			}

			for($a = 3; $a < 12; $a++){
				$month[$a] += $apr * $amount;
			}

			for($a = 4; $a < 12; $a++){
				$month[$a] += $may * $amount;
			}

			for($a = 5; $a < 12; $a++){
				$month[$a] += $jun * $amount;
			}

			for($a = 6; $a < 12; $a++){
				$month[$a] += $jul * $amount;
			}

			for($a = 7; $a < 12; $a++){
				$month[$a] += $aug * $amount;
			}

			for($a = 8; $a < 12; $a++){
				$month[$a] += $sep * $amount;
			}

			for($a = 9; $a < 12; $a++){
				$month[$a] += $oct * $amount;
			}

			for($a = 10; $a < 12; $a++){
				$month[$a] += $nov * $amount;
			}

			for($a = 11; $a < 12; $a++){
				$month[$a] += $december * $amount;
			}

			$total = $month[0] + $month[1] + $month[2] + $month[3] + $month[4] + $month[5] + $month[6] + $month[7] + $month[8] + $month[9] + $month[10] + $month[11];
			$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A$x",$row->bc)
					->setCellValue("B$x", '')
					->setCellValue("C$x", 'DEPRECIATION EXPENSES')
					->setCellValue("D$x", $row->gl_sub_name)
					->setCellValue("E$x",$row->brand)
					->setCellValue("F$x", $row->cost_center_code)
					->setCellValue("G$x", $row->cost_center_desc)
					->setCellValue("H$x", $row->cost_center_group)
					->setCellValue("I$x", $row->ag_trans_budget_year)
					->setCellValue("J$x", $month[0])
					->setCellValue("K$x", $month[1])
					->setCellValue("L$x", $month[2])
					->setCellValue("M$x", $month[3])
					->setCellValue("N$x", $month[4])
					->setCellValue("O$x", $month[5])
					->setCellValue("P$x", $month[6])
					->setCellValue("Q$x", $month[7])
					->setCellValue("R$x", $month[8])
					->setCellValue("S$x", $month[9])
					->setCellValue("T$x", $month[10])
					->setCellValue("U$x", $month[11])
					->setCellValue("V$x",$total)
					;

			$spreadsheet->getActiveSheet()->getStyle("A$x:V$x")->applyFromArray($style_data);
			$x++;
		}



		/*foreach($get_depreciation2 as $row){
			$jan = $row->jan;
			$feb = $row->feb;
			$mar = $row->mar;
			$apr = $row->apr;
			$may = $row->may;
			$jun = $row->jun;
			$jul = $row->jul;
			$aug = $row->aug;
			$sep = $row->sep;
			$oct = $row->oct;
			$nov = $row->nov;
			$december = $row->december;
			$total = $jan + $feb + $mar + $apr + $may + $jun + $jul + $aug + $sep + $oct + $nov + $december;
			$spreadsheet->setActiveSheetIndex(0)
					->setCellValue("A$x",$cost_center_name)
					->setCellValue("B$x",$row->gl_code)
					->setCellValue("C$x","DEPRECIATION - 2")
					->setCellValue("D$x",$row->gl_sub_name)
					->setCellValue("E$x",$row->brand)
					->setCellValue("F$x",$row->cost_center_code)
					->setCellValue("G$x",$row->cost_center_desc)
					->setCellValue("H$x",$row->cost_center_group)
					->setCellValue("I$x",$row->gl_year)
					->setCellValue("J$x",$jan)
					->setCellValue("K$x",$feb)
					->setCellValue("L$x",$mar)
					->setCellValue("M$x",$apr)
					->setCellValue("N$x",$may)
					->setCellValue("O$x",$jun)
					->setCellValue("P$x",$jul)
					->setCellValue("Q$x",$aug)
					->setCellValue("R$x",$sep)
					->setCellValue("S$x",$oct)
					->setCellValue("T$x",$nov)
					->setCellValue("U$x",$december)
					->setCellValue("V$x",$total)
					;

			$spreadsheet->getActiveSheet()->getStyle("A$x:V$x")->applyFromArray($style_data);
			$x++;
		}*/

		$depre_counter = 0;
		$depre_prev_identifier = '';
		$month_counter = 0;
		$month_amount = array();
		$depre_total = 0;
		foreach($get_depreciation2 as $row){
			$depre_amount = $row->depreciation_bc_amount;
			$depre_date = $row->depreciation_bc_date;
			$depre_cost_center = $row->cost_center_desc;
			$depre_cost_center_code = $row->cost_center_code;
			$depre_gl_sub_name = $row->gl_sub_name;
			$depre_gl_code = $row->gl_code;
			$depre_cost_center_group = $row->cost_center_group;
			$depre_gl_year = $row->gl_year;
			$depre_brand = $row->brand;
			$depre_bc_id = $row->bc_id;
			$depre_identifier = $depre_bc_id . $depre_gl_sub_name . $depre_cost_center_code;

			if($depre_counter > 0){
				$depre_total += $depre_amount;
				$month_amount[$month_counter] = $depre_amount;
				if($depre_identifier == $depre_prev_identifier){	
					if($month_counter == 11){
						$spreadsheet->setActiveSheetIndex(0)
							->setCellValue("A$x",$row->bc)
							->setCellValue("B$x",$row->gl_code)
							->setCellValue("C$x","DEPRECIATION - 2")
							->setCellValue("D$x",$row->gl_sub_name)
							->setCellValue("E$x",$row->brand)
							->setCellValue("F$x",$row->cost_center_code)
							->setCellValue("G$x",$row->cost_center_desc)
							->setCellValue("H$x",$row->cost_center_group)
							->setCellValue("I$x",$row->gl_year)
							->setCellValue("J$x",$month_amount[0])
							->setCellValue("K$x",$month_amount[1])
							->setCellValue("L$x",$month_amount[2])
							->setCellValue("M$x",$month_amount[3])
							->setCellValue("N$x",$month_amount[4])
							->setCellValue("O$x",$month_amount[5])
							->setCellValue("P$x",$month_amount[6])
							->setCellValue("Q$x",$month_amount[7])
							->setCellValue("R$x",$month_amount[8])
							->setCellValue("S$x",$month_amount[9])
							->setCellValue("T$x",$month_amount[10])
							->setCellValue("U$x",$month_amount[11])
							->setCellValue("V$x",$depre_total)
						;

						$spreadsheet->getActiveSheet()->getStyle("A$x:V$x")->applyFromArray($style_data);

						$month_counter = 0;
						$depre_total = 0;

						$x++;
					}else{
						$month_counter++;
					}
				}else{
					$month_counter++;
				}

				
				$depre_prev_identifier = $depre_identifier;

			}else{
				$depre_prev_identifier = $depre_identifier;
				$depre_total += $depre_amount;
				$month_amount[$month_counter] = $depre_amount;
				$month_counter++;
			}

			$depre_counter++;
		}

		foreach(range('A','V') as $columnID) {
			$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
					->setAutoSize(true);
		}

		$spreadsheet->getActiveSheet()->getStyle('J2:V' . ($x - 1))->getNumberFormat()->setFormatCode('#,##0.00');
		
		// Rename worksheet
		$spreadsheet->getActiveSheet()->setTitle('OPEX Data - ' . $year);

		// set right to left direction
		//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$spreadsheet->setActiveSheetIndex(0);

		// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		$random = generate_random(5);
		header('Content-Disposition: attachment;filename="Budgeting - ' . $bc_name . ' OPEX ' . $year . '_' . $random . '.xlsx"');
		header('Cache-Control: max-age=0');
		// If you're serving to IE 9, then the following may be needed
		header('Cache-Control: max-age=1');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
		$writer->save('php://output');
		exit;
		
	}

	public function get_depreciation_monthly($cost_center, $year){
		$info = $this->_require_login();

		
		$get_depreciation = $this->admin->get_query('SELECT d.asg_name as asset_group, f.cost_center_code, f.cost_center_desc, a.ag_trans_budget_year, (b.capex_price / b.capex_lifespan) amount,

			(SELECT z.brand_name FROM outlet_tbl x, outlet_brand_tbl y, brand_tbl z WHERE f.cost_center_code = x.ifs_code AND x.outlet_id = y.outlet_id AND y.brand_id = z.brand_id AND y.outlet_brand_status = 1) as brand,

			(SELECT m.gl_sub_name FROM gl_subgroup_tbl m WHERE e.ag_gl_code = m.gl_code LIMIT 1) as gl_sub_name,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 1) as jan,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 2) as feb,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 3) as mar,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 4) as apr,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 5) as may,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 6) as jun,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 7) as jul,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 8) as aug,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 9) as sep,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 10) as oct,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 11) as nov,

			(SELECT x.capex_qty FROM asset_group_transaction_details_tbl x WHERE b.ag_trans_item_id = x.ag_trans_item_id AND x.ag_trans_det_status = 1 AND MONTH(x.capex_budget_date) = 12) as december,

			(SELECT x.cost_center_group_name FROM cost_center_group_tbl x WHERE f.cost_center_group_id = x.cost_center_group_id) as cost_center_group,

			(SELECT x.cost_center_desc as bc FROM cost_center_tbl x WHERE f.parent_id = x.cost_center_id) as bc

			FROM asset_group_transaction_tbl a, asset_group_transaction_item_tbl b, asset_subgroup_tbl d, asset_group_tbl e, cost_center_tbl f, transaction_type_tbl g WHERE a.ag_trans_id=b.ag_trans_id AND b.asg_id=d.asg_id AND d.ag_id=e.ag_id AND b.cost_center_id=f.cost_center_id AND a.trans_type_id=g.trans_type_id AND g.trans_type_id=1 AND a.ag_trans_status=1 AND b.ag_trans_item_status = 1 AND f.parent_id IN(' . $cost_center . ') AND a.ag_trans_budget_year=' . $year . ' ORDER BY f.parent_id, e.ag_name, d.asg_name
		');

		return $get_depreciation;
	}

	/*public function get_depreciation_monthly2($cost_center, $year, $bc_id){
		$info = $this->_require_login();

		
		$get_depreciation = $this->admin->get_query('

			SELECT n.gl_sub_name, n.gl_code, "DEPRECIATION(OLD)", o.cost_center_code, o.cost_center_desc, "' . $year . '" as gl_year, 1 as amount,

				(SELECT z.brand_name FROM outlet_tbl x, outlet_brand_tbl y, brand_tbl z WHERE o.cost_center_code = x.ifs_code AND x.outlet_id = y.outlet_id AND y.brand_id = z.brand_id AND y.outlet_brand_status = 1) as brand,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 1 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  jan,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 2 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  feb,


				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 3 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  mar,


				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 4 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  apr,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 5 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  may,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 6 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  jun,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 7 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  jul,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 8 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  aug,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 9 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  sep,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 10 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  oct,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 11 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  nov,

				(SELECT SUM(x.depreciation_bc_amount) FROM depreciation_bc_tbl x WHERE x.cost_center_id = o.cost_center_id AND x.gl_sub_id = n.gl_sub_id AND MONTH(x.depreciation_bc_date) = 12 AND x.depreciation_bc_status = 1 AND YEAR(x.depreciation_bc_date) = ' . $year . ' AND x.bc_id = ' . $bc_id . ') as  december,

				(SELECT x.cost_center_group_name FROM cost_center_group_tbl x WHERE o.cost_center_group_id = x.cost_center_group_id) as cost_center_group
			
			FROM depreciation_bc_tbl m, gl_subgroup_tbl n, cost_center_tbl o, asset_group_tbl p WHERE m.gl_sub_id = n.gl_sub_id AND m.cost_center_id = o.cost_center_id AND  n.gl_code = p.ag_gl_code AND m.depreciation_bc_status = 1 AND YEAR(m.depreciation_bc_date) = ' . $year . ' AND m.bc_id IN (' . $bc_id . ') GROUP BY m.bc_id, o.cost_center_id, n.gl_sub_id


		');

		return $get_depreciation;
	}*/

	public function get_depreciation_monthly2($cost_center, $year, $bc_id){
		$info = $this->_require_login();

		
		$get_depreciation = $this->admin->get_query('

			SELECT n.gl_sub_name, n.gl_code, "DEPRECIATION(OLD)", o.cost_center_code, o.cost_center_desc, "' . $year . '" as gl_year, SUM(m.depreciation_bc_amount) as depreciation_bc_amount, m.depreciation_bc_date, m.bc_id, q.bc_name as bc,

				(SELECT z.brand_name FROM outlet_tbl x, outlet_brand_tbl y, brand_tbl z WHERE o.cost_center_code = x.ifs_code AND x.outlet_id = y.outlet_id AND y.brand_id = z.brand_id AND y.outlet_brand_status = 1) as brand,

				(SELECT x.cost_center_group_name FROM cost_center_group_tbl x WHERE o.cost_center_group_id = x.cost_center_group_id) as cost_center_group
			
			FROM depreciation_bc_tbl m, gl_subgroup_tbl n, cost_center_tbl o, asset_group_tbl p, bc_tbl q WHERE m.gl_sub_id = n.gl_sub_id AND m.cost_center_id = o.cost_center_id AND  n.gl_code = p.ag_gl_code AND m.bc_id = q.bc_id AND m.depreciation_bc_status = 1 AND YEAR(m.depreciation_bc_date) = ' . $year . ' AND m.bc_id IN (' . $bc_id . ') GROUP BY m.bc_id, o.cost_center_id, n.gl_sub_id, m.depreciation_bc_date ORDER BY m.bc_id, o.cost_center_id, n.gl_sub_id, m.depreciation_bc_date ASC


		');

		return $get_depreciation;
	}

	public function download_unit_opex($trans_id, $year){
		$info = $this->_require_login();

		$user_info = $this->get_user_info();
		$cost_center_id = $user_info['cost_center_id'];
		$company_unit_id = $user_info['company_unit_id'];

		ini_set('max_execution_time', 0); 
		ini_set('memory_limit','2048M');

		$check_cost_center = $this->admin->check_data('cost_center_tbl', array('cost_center_id' => $cost_center_id, 'cost_center_status' => 1), TRUE);
		if($check_cost_center['result'] == TRUE){
			$cost_center_name = $check_cost_center['info']->cost_center_desc;

			$join_det = array(
				'gl_transaction_item_tbl b' => 'a.gl_trans_item_id = b.gl_trans_item_id AND b.gl_trans_item_status = 1 AND a.gl_trans_det_status = 1',
				'gl_transaction_tbl c' => 'b.gl_trans_id = c.gl_trans_id AND c.gl_trans_status = 1 AND c.gl_year = ' . $year,
				'cost_center_tbl d' => 'b.cost_center_id = d.cost_center_id AND (d.parent_id = ' . $cost_center_id . ' OR d.cost_center_id = ' . $cost_center_id . ')',
				'gl_subgroup_tbl e' => 'b.gl_sub_id=e.gl_sub_id',
				'gl_group_tbl f' => 'e.gl_group_id = f.gl_group_id'	
			);
				
			$gl_details = $this->admin->get_join('gl_transaction_details_tbl a', $join_det, FALSE, FALSE, 'b.gl_trans_item_id', '*, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND YEAR(x.opex_budget_date)=' . $year . ') as total_qty, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=1 AND YEAR(x.opex_budget_date)=' . $year . ') as jan, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(opex_budget_date)=2 AND YEAR(x.opex_budget_date)=' . $year . ') as feb, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=3 AND YEAR(x.opex_budget_date)=' . $year . ') as mar, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=4 AND YEAR(x.opex_budget_date)=' . $year . ') as apr, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=5 AND YEAR(x.opex_budget_date)=' . $year . ') as may, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=6 AND YEAR(x.opex_budget_date)=' . $year . ') as jun, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=7 AND YEAR(x.opex_budget_date)=' . $year . ') as jul, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=8 AND YEAR(x.opex_budget_date)=' . $year . ') as aug, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=9 AND YEAR(x.opex_budget_date)=' . $year . ') as sep, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=10 AND YEAR(x.opex_budget_date)=' . $year . ') as oct, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=11 AND YEAR(x.opex_budget_date)=' . $year . ') as nov, (SELECT SUM(x.opex_amount) FROM gl_transaction_details_tbl x WHERE b.gl_trans_item_id=x.gl_trans_item_id AND MONTH(x.opex_budget_date)=12 AND YEAR(x.opex_budget_date)=' . $year . ') as december');

			$get_depreciation = $this->get_depreciation_monthly($cost_center_id, $year);

			$get_depreciation2 = $this->admin->get_query('SELECT *, YEAR(a.depreciation_unit_date) as gl_year,

				(SELECT SUM(x.depreciation_unit_amount) FROM depreciation_unit_tbl x WHERE b.gl_sub_id = x.gl_sub_id AND a.cost_center_id = x.cost_center_id AND x.depreciation_unit_status = 1 AND MONTH(x.depreciation_unit_date) = 1 AND YEAR(x.depreciation_unit_date) = ' . $year . ' AND x.company_unit_id = ' . $company_unit_id . ') as jan,

				(SELECT SUM(x.depreciation_unit_amount) FROM depreciation_unit_tbl x WHERE b.gl_sub_id = x.gl_sub_id AND a.cost_center_id = x.cost_center_id AND x.depreciation_unit_status = 1 AND MONTH(x.depreciation_unit_date) = 2 AND YEAR(x.depreciation_unit_date) = ' . $year . ' AND x.company_unit_id = ' . $company_unit_id . ') as feb,


				(SELECT SUM(x.depreciation_unit_amount) FROM depreciation_unit_tbl x WHERE b.gl_sub_id = x.gl_sub_id AND a.cost_center_id = x.cost_center_id AND x.depreciation_unit_status = 1 AND MONTH(x.depreciation_unit_date) = 3 AND YEAR(x.depreciation_unit_date) = ' . $year . ' AND x.company_unit_id = ' . $company_unit_id . ') as mar,


				(SELECT SUM(x.depreciation_unit_amount) FROM depreciation_unit_tbl x WHERE b.gl_sub_id = x.gl_sub_id AND a.cost_center_id = x.cost_center_id AND x.depreciation_unit_status = 1 AND MONTH(x.depreciation_unit_date) = 4 AND YEAR(x.depreciation_unit_date) = ' . $year . ' AND x.company_unit_id = ' . $company_unit_id . ') as apr,


				(SELECT SUM(x.depreciation_unit_amount) FROM depreciation_unit_tbl x WHERE b.gl_sub_id = x.gl_sub_id AND a.cost_center_id = x.cost_center_id AND x.depreciation_unit_status = 1 AND MONTH(x.depreciation_unit_date) = 5 AND YEAR(x.depreciation_unit_date) = ' . $year . ' AND x.company_unit_id = ' . $company_unit_id . ') as may,


				(SELECT SUM(x.depreciation_unit_amount) FROM depreciation_unit_tbl x WHERE b.gl_sub_id = x.gl_sub_id AND a.cost_center_id = x.cost_center_id AND x.depreciation_unit_status = 1 AND MONTH(x.depreciation_unit_date) = 6 AND YEAR(x.depreciation_unit_date) = ' . $year . ' AND x.company_unit_id = ' . $company_unit_id . ') as jun,


				(SELECT SUM(x.depreciation_unit_amount) FROM depreciation_unit_tbl x WHERE b.gl_sub_id = x.gl_sub_id AND a.cost_center_id = x.cost_center_id AND x.depreciation_unit_status = 1 AND MONTH(x.depreciation_unit_date) = 7 AND YEAR(x.depreciation_unit_date) = ' . $year . ' AND x.company_unit_id = ' . $company_unit_id . ') as jul,

				(SELECT SUM(x.depreciation_unit_amount) FROM depreciation_unit_tbl x WHERE b.gl_sub_id = x.gl_sub_id AND a.cost_center_id = x.cost_center_id AND x.depreciation_unit_status = 1 AND MONTH(x.depreciation_unit_date) = 8 AND YEAR(x.depreciation_unit_date) = ' . $year . ' AND x.company_unit_id = ' . $company_unit_id . ') as aug,

				(SELECT SUM(x.depreciation_unit_amount) FROM depreciation_unit_tbl x WHERE b.gl_sub_id = x.gl_sub_id AND a.cost_center_id = x.cost_center_id AND x.depreciation_unit_status = 1 AND MONTH(x.depreciation_unit_date) = 9 AND YEAR(x.depreciation_unit_date) = ' . $year . ' AND x.company_unit_id = ' . $company_unit_id . ') as sep,

				(SELECT SUM(x.depreciation_unit_amount) FROM depreciation_unit_tbl x WHERE b.gl_sub_id = x.gl_sub_id AND a.cost_center_id = x.cost_center_id AND x.depreciation_unit_status = 1 AND MONTH(x.depreciation_unit_date) = 10 AND YEAR(x.depreciation_unit_date) = ' . $year . ' AND x.company_unit_id = ' . $company_unit_id . ') as oct,

				(SELECT SUM(x.depreciation_unit_amount) FROM depreciation_unit_tbl x WHERE b.gl_sub_id = x.gl_sub_id AND a.cost_center_id = x.cost_center_id AND x.depreciation_unit_status = 1 AND MONTH(x.depreciation_unit_date) = 11 AND YEAR(x.depreciation_unit_date) = ' . $year . ' AND x.company_unit_id = ' . $company_unit_id . ') as nov,

				(SELECT SUM(x.depreciation_unit_amount) FROM depreciation_unit_tbl x WHERE b.gl_sub_id = x.gl_sub_id AND a.cost_center_id = x.cost_center_id AND x.depreciation_unit_status = 1 AND MONTH(x.depreciation_unit_date) = 12 AND YEAR(x.depreciation_unit_date) = ' . $year . ' AND x.company_unit_id = ' . $company_unit_id . ') as december

			  FROM depreciation_unit_tbl a, gl_subgroup_tbl b, gl_group_tbl c, cost_center_tbl d WHERE a.gl_sub_id = b.gl_sub_id AND b.gl_group_id = c.gl_group_id AND a.cost_center_id = d.cost_center_id AND c.gl_group_name = "DEPRECIATION EXPENSES" AND depreciation_unit_status = 1 AND a.cost_center_id = ' . $cost_center_id . ' GROUP BY a.gl_sub_id, a.cost_center_id');  


			$this->load->library('excel');

			$spreadsheet = $this->excel;
			$spreadsheet->getProperties()->setCreator('BAVI')
					->setLastModifiedBy('Budgeting System')
					->setTitle('Employees')
					->setSubject('List of Employees')
					->setDescription('List of Employees');

			
			$styleArray = array(
					'font' 	=> array(
							'bold' => true,
					),
					'alignment' => array(
							'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
							'vertical' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
					),
					'borders' => array(
							'top' => array(
									'style' => PHPExcel_Style_Border::BORDER_THIN,
							),
					),
					'fill' => array(
							'type' => \PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,
							'rotation' => 90,
							'startcolor' => array(
									'argb' => 'FFA0A0A0',
							),
							'endcolor' => array(
									'argb' => 'FFFFFFFF',
							),
					),
			);


			foreach(range('A','H') as $columnID) {
				$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
						->setAutoSize(true);
			}

			$style_center = array(
				'font' => array(
					'bold' => true,
					'size' => 20
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				)
			);

			$style_info =  array(
				'font' => array(
					'bold' => true
				)
			);

			$style_border = array(
				'font' => array(
					'bold' => true
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				)
			);

			$style_data = array(
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				)
			);

			$style_out = array(
				'font' => array(
					'bold' => true,
					'color' => array('rgb' => 'FF0000')
				),
				'borders' => array(
					'allborders' => array(
						'style' => PHPExcel_Style_Border::BORDER_THIN
					)
				),
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
				),
			);


			$spreadsheet->getActiveSheet()->getStyle("A1:T1")->applyFromArray($style_border);
			$spreadsheet->getActiveSheet()->getStyle("A1:T1")->applyFromArray($style_info);
			$spreadsheet->setActiveSheetIndex(0)
				->setCellValue("A1", 'Location')
				->setCellValue("B1", 'GL Code')
				->setCellValue("C1", "GL Group")
				->setCellValue("D1", "GL Subgroup")
				->setCellValue("E1", "Cost Center Code")
				->setCellValue("F1", "Cost Center Name")
				->setCellValue("G1", "Year")
				->setCellValue("H1", "Jan")
				->setCellValue("I1", "Feb")
				->setCellValue("J1", "Mar")
				->setCellValue("K1", "Apr")
				->setCellValue("L1", "May")
				->setCellValue("M1", "Jun")
				->setCellValue("N1", "Jul")
				->setCellValue("O1", "Aug")
				->setCellValue("P1", "Sep")
				->setCellValue("Q1", "Oct")
				->setCellValue("R1", "Nov")
				->setCellValue("S1", "Dec")
				->setCellValue("T1", "Total")
				;
			// Add some data
			$x= 2;
			$count = 0;
			foreach($gl_details as $row){
				$jan = $row->jan;
				$feb = $row->feb;
				$mar = $row->mar;
				$apr = $row->apr;
				$may = $row->may;
				$jun = $row->jun;
				$jul = $row->jul;
				$aug = $row->aug;
				$sep = $row->sep;
				$oct = $row->oct;
				$nov = $row->nov;
				$december = $row->december;
				$total = $jan + $feb + $mar + $apr + $may + $jun + $jul + $aug + $sep + $oct + $nov + $december;
				$spreadsheet->setActiveSheetIndex(0)
						->setCellValue("A$x",$cost_center_name)
						->setCellValue("B$x",$row->gl_code)
						->setCellValue("C$x",$row->gl_group_name)
						->setCellValue("D$x",$row->gl_sub_name)
						->setCellValue("E$x",$row->cost_center_code)
						->setCellValue("F$x",$row->cost_center_desc)
						->setCellValue("G$x",$row->gl_year)
						->setCellValue("H$x",$jan)
						->setCellValue("I$x",$feb)
						->setCellValue("J$x",$mar)
						->setCellValue("K$x",$apr)
						->setCellValue("L$x",$may)
						->setCellValue("M$x",$jun)
						->setCellValue("N$x",$jul)
						->setCellValue("O$x",$aug)
						->setCellValue("P$x",$sep)
						->setCellValue("Q$x",$oct)
						->setCellValue("R$x",$nov)
						->setCellValue("S$x",$december)
						->setCellValue("T$x",$total)
						;

				$spreadsheet->getActiveSheet()->getStyle("A$x:T$x")->applyFromArray($style_data);
				$x++;
			}

			foreach($get_depreciation as $row){
				$jan = $row->jan;
				$feb = $row->feb;
				$mar = $row->mar;
				$apr = $row->apr;
				$may = $row->may;
				$jun = $row->jun;
				$jul = $row->jul;
				$aug = $row->aug;
				$sep = $row->sep;
				$oct = $row->oct;
				$nov = $row->nov;
				$december = $row->december;
				$amount = $row->amount;

				$month = array(0 => 0, 1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0, 6 => 0, 7 => 0, 8 => 0, 9 => 0, 10 => 0, 11 => 0);

				for($a = 0; $a < 12; $a++){
					$month[$a] += $jan * $amount;
				}

				for($a = 1; $a < 12; $a++){
					$month[$a] += $feb * $amount;
				}

				for($a = 2; $a < 12; $a++){
					$month[$a] += $mar * $amount;
				}

				for($a = 3; $a < 12; $a++){
					$month[$a] += $apr * $amount;
				}

				for($a = 4; $a < 12; $a++){
					$month[$a] += $may * $amount;
				}

				for($a = 5; $a < 12; $a++){
					$month[$a] += $jun * $amount;
				}

				for($a = 6; $a < 12; $a++){
					$month[$a] += $jul * $amount;
				}

				for($a = 7; $a < 12; $a++){
					$month[$a] += $aug * $amount;
				}

				for($a = 8; $a < 12; $a++){
					$month[$a] += $sep * $amount;
				}

				for($a = 9; $a < 12; $a++){
					$month[$a] += $oct * $amount;
				}

				for($a = 10; $a < 12; $a++){
					$month[$a] += $nov * $amount;
				}

				for($a = 11; $a < 12; $a++){
					$month[$a] += $december * $amount;
				}

				$total = $month[0] + $month[1] + $month[2] + $month[3] + $month[4] + $month[5] + $month[6] + $month[7] + $month[8] + $month[9] + $month[10] + $month[11];
				$spreadsheet->setActiveSheetIndex(0)
						->setCellValue("A$x",$row->bc)
						->setCellValue("B$x", '')
						->setCellValue("C$x", 'DEPRECIATION EXPENSES')
						->setCellValue("D$x", $row->ag_name)
						->setCellValue("E$x", $row->cost_center_code)
						->setCellValue("F$x", $row->cost_center_desc)
						->setCellValue("G$x", $row->ag_trans_budget_year)
						->setCellValue("H$x", $month[0])
						->setCellValue("I$x", $month[1])
						->setCellValue("J$x", $month[2])
						->setCellValue("K$x", $month[3])
						->setCellValue("L$x", $month[4])
						->setCellValue("M$x", $month[5])
						->setCellValue("N$x", $month[6])
						->setCellValue("O$x", $month[7])
						->setCellValue("P$x", $month[8])
						->setCellValue("Q$x", $month[9])
						->setCellValue("R$x", $month[10])
						->setCellValue("S$x", $month[11])
						->setCellValue("T$x",$total)
						;

				$spreadsheet->getActiveSheet()->getStyle("A$x:T$x")->applyFromArray($style_data);
				$x++;
			}

			foreach($get_depreciation2 as $row){
				$jan = $row->jan;
				$feb = $row->feb;
				$mar = $row->mar;
				$apr = $row->apr;
				$may = $row->may;
				$jun = $row->jun;
				$jul = $row->jul;
				$aug = $row->aug;
				$sep = $row->sep;
				$oct = $row->oct;
				$nov = $row->nov;
				$december = $row->december;
				$total = $jan + $feb + $mar + $apr + $may + $jun + $jul + $aug + $sep + $oct + $nov + $december;
				$spreadsheet->setActiveSheetIndex(0)
						->setCellValue("A$x",$cost_center_name)
						->setCellValue("B$x",$row->gl_code)
						->setCellValue("C$x", 'DEPRECIATION 2')
						->setCellValue("D$x",$row->gl_sub_name)
						->setCellValue("E$x",$row->cost_center_code)
						->setCellValue("F$x",$row->cost_center_desc)
						->setCellValue("G$x",$row->gl_year)
						->setCellValue("H$x",$jan)
						->setCellValue("I$x",$feb)
						->setCellValue("J$x",$mar)
						->setCellValue("K$x",$apr)
						->setCellValue("L$x",$may)
						->setCellValue("M$x",$jun)
						->setCellValue("N$x",$jul)
						->setCellValue("O$x",$aug)
						->setCellValue("P$x",$sep)
						->setCellValue("Q$x",$oct)
						->setCellValue("R$x",$nov)
						->setCellValue("S$x",$december)
						->setCellValue("T$x",$total)
						;

				$spreadsheet->getActiveSheet()->getStyle("A$x:T$x")->applyFromArray($style_data);
				$x++;
			}


			foreach(range('A','T') as $columnID) {
				$spreadsheet->getActiveSheet()->getColumnDimension($columnID)
						->setAutoSize(true);
			}

			$spreadsheet->getActiveSheet()->getStyle('H2:T' . ($x - 1))->getNumberFormat()->setFormatCode('#,##0.00');
			
			// Rename worksheet
			$spreadsheet->getActiveSheet()->setTitle('OPEX Data - ' . $year);

			// set right to left direction
			//		$spreadsheet->getActiveSheet()->setRightToLeft(true);

			// Set active sheet index to the first sheet, so Excel opens this as the first sheet
			$spreadsheet->setActiveSheetIndex(0);

			// Redirect output to a client’s web browser (Excel2007)
			header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
			header('Content-Disposition: attachment;filename="Budgeting - OPEX ' . $year . '.xlsx"');
			header('Cache-Control: max-age=0');
			// If you're serving to IE 9, then the following may be needed
			header('Cache-Control: max-age=1');

			// If you're serving to IE over SSL, then the following may be needed
			header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
			header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
			header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
			header('Pragma: public'); // HTTP/1.0

			$writer = PHPExcel_IOFactory::createWriter($spreadsheet, 'Excel2007');
			$writer->save('php://output');
			exit;
		}else{
			echo 'Error Cost Center not exist. Please try again!';
		}
	}
}
